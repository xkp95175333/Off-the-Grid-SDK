#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_Limb_DOS

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"


namespace SDK::Params
{

// Function WBP_Tooltip_Limb_DOS.WBP_Tooltip_Limb_DOS_C.InitLimbSetup
// 0x0030 (0x0030 - 0x0000)
struct WBP_Tooltip_Limb_DOS_C_InitLimbSetup final
{
public:
	class UGzBodyPartItemData*                    LimbItemData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 CallFunc_GetRarity_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetShortDescription_ReturnValue;          // 0x0020(0x0010)(ConstParm)
};
static_assert(alignof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_DOS_C_InitLimbSetup");
static_assert(sizeof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup) == 0x000030, "Wrong size on WBP_Tooltip_Limb_DOS_C_InitLimbSetup");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup, LimbItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_DOS_C_InitLimbSetup::LimbItemData' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup, CallFunc_GetRarity_ReturnValue) == 0x000008, "Member 'WBP_Tooltip_Limb_DOS_C_InitLimbSetup::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup, CallFunc_GetRarityColor_ReturnValue) == 0x00000C, "Member 'WBP_Tooltip_Limb_DOS_C_InitLimbSetup::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_InitLimbSetup, CallFunc_GetShortDescription_ReturnValue) == 0x000020, "Member 'WBP_Tooltip_Limb_DOS_C_InitLimbSetup::CallFunc_GetShortDescription_ReturnValue' has a wrong offset!");

// Function WBP_Tooltip_Limb_DOS.WBP_Tooltip_Limb_DOS_C.UpdateInteractBlock
// 0x0014 (0x0014 - 0x0000)
struct WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock final
{
public:
	bool                                          bCanInteract;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowBroken;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5E[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock) == 0x000004, "Wrong alignment on WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock");
static_assert(sizeof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock) == 0x000014, "Wrong size on WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock, bCanInteract) == 0x000000, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock::bCanInteract' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock, bShowBroken) == 0x000001, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock::bShowBroken' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock, Temp_bool_Variable) == 0x000002, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock, K2Node_Select_Default) == 0x000004, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateInteractBlock::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Tooltip_Limb_DOS.WBP_Tooltip_Limb_DOS_C.UpdateLimbType
// 0x0008 (0x0008 - 0x0000)
struct WBP_Tooltip_Limb_DOS_C_UpdateLimbType final
{
public:
	class UGzBodyPartItemData*                    LimbItemData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_DOS_C_UpdateLimbType) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_DOS_C_UpdateLimbType");
static_assert(sizeof(WBP_Tooltip_Limb_DOS_C_UpdateLimbType) == 0x000008, "Wrong size on WBP_Tooltip_Limb_DOS_C_UpdateLimbType");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateLimbType, LimbItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateLimbType::LimbItemData' has a wrong offset!");

// Function WBP_Tooltip_Limb_DOS.WBP_Tooltip_Limb_DOS_C.UpdateTooltip
// 0x0018 (0x0018 - 0x0000)
struct WBP_Tooltip_Limb_DOS_C_UpdateTooltip final
{
public:
	class UGzItemData*                            CallFunc_GetItemData_ItemData;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartItemData*                    K2Node_DynamicCast_AsGz_Body_Part_Item_Data;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_DOS_C_UpdateTooltip");
static_assert(sizeof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip) == 0x000018, "Wrong size on WBP_Tooltip_Limb_DOS_C_UpdateTooltip");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip, CallFunc_GetItemData_ItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateTooltip::CallFunc_GetItemData_ItemData' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip, K2Node_DynamicCast_AsGz_Body_Part_Item_Data) == 0x000008, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateTooltip::K2Node_DynamicCast_AsGz_Body_Part_Item_Data' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateTooltip::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_DOS_C_UpdateTooltip, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WBP_Tooltip_Limb_DOS_C_UpdateTooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

