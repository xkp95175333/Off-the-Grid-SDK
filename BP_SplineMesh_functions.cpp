#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh

#include "Basic.hpp"

#include "BP_SplineMesh_classes.hpp"
#include "BP_SplineMesh_parameters.hpp"


namespace SDK
{

// Function BP_SplineMesh.BP_SplineMesh_C.AddInstance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DistanceAlongSpline                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCap                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInstancedStaticMeshComponent*>Param_ISMs                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  InEndDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::AddInstance(double DistanceAlongSpline, class USplineComponent* SplineComponent, class UStaticMesh* Mesh, bool IsCap, TArray<class UInstancedStaticMeshComponent*>& Param_ISMs, double InEndDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "AddInstance");

	Params::BP_SplineMesh_C_AddInstance Parms{};

	Parms.DistanceAlongSpline = DistanceAlongSpline;
	Parms.SplineComponent = SplineComponent;
	Parms.Mesh = Mesh;
	Parms.IsCap = IsCap;
	Parms.Param_ISMs = std::move(Param_ISMs);
	Parms.InEndDistance = InEndDistance;

	UObject::ProcessEvent(Func, &Parms);

	Param_ISMs = std::move(Parms.Param_ISMs);
}


// Function BP_SplineMesh.BP_SplineMesh_C.AddISM
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMesh*>              Meshes                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SplineMesh_C::AddISM(TArray<class UStaticMesh*>& Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "AddISM");

	Params::BP_SplineMesh_C_AddISM Parms{};

	Parms.Meshes = std::move(Meshes);

	UObject::ProcessEvent(Func, &Parms);

	Meshes = std::move(Parms.Meshes);
}


// Function BP_SplineMesh.BP_SplineMesh_C.AddSplineMeshComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Has_Collision                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Start_Location_Distance                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Start_Tangent__Distance                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  End_Location_Distance                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  End_Tangent_Distance                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 Spline_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  ClampTangent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineMeshComponent*             Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::AddSplineMeshComponent(class UStaticMesh* Mesh, bool Has_Collision, double Start_Location_Distance, double Start_Tangent__Distance, double End_Location_Distance, double End_Tangent_Distance, class USplineComponent* Spline_Component, double ClampTangent, class USplineMeshComponent** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "AddSplineMeshComponent");

	Params::BP_SplineMesh_C_AddSplineMeshComponent Parms{};

	Parms.Mesh = Mesh;
	Parms.Has_Collision = Has_Collision;
	Parms.Start_Location_Distance = Start_Location_Distance;
	Parms.Start_Tangent__Distance = Start_Tangent__Distance;
	Parms.End_Location_Distance = End_Location_Distance;
	Parms.End_Tangent_Distance = End_Tangent_Distance;
	Parms.Spline_Component = Spline_Component;
	Parms.ClampTangent = ClampTangent;

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function BP_SplineMesh.BP_SplineMesh_C.BuildSplineMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::BuildSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "BuildSplineMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Get Spline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::Get_Spline(class USplineComponent** SplineComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Get Spline");

	Params::BP_SplineMesh_C_Get_Spline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;
}


// Function BP_SplineMesh.BP_SplineMesh_C.GetAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Param_StartDistance                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  EndDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseRightVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::GetAngle(class USplineComponent* SplineComponent, double Param_StartDistance, double EndDistance, bool UseRightVector, double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "GetAngle");

	Params::BP_SplineMesh_C_GetAngle Parms{};

	Parms.SplineComponent = SplineComponent;
	Parms.Param_StartDistance = Param_StartDistance;
	Parms.EndDistance = EndDistance;
	Parms.UseRightVector = UseRightVector;

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_SplineMesh.BP_SplineMesh_C.GetBoundSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UStaticMesh*                      Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::GetBoundSize(class UStaticMesh* Object, double* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "GetBoundSize");

	Params::BP_SplineMesh_C_GetBoundSize Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = Parms.Size;
}


// Function BP_SplineMesh.BP_SplineMesh_C.GetMeshSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMesh*>              SplineMeshes                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_SplineMesh_C::GetMeshSize(TArray<class UStaticMesh*>& SplineMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "GetMeshSize");

	Params::BP_SplineMesh_C_GetMeshSize Parms{};

	Parms.SplineMeshes = std::move(SplineMeshes);

	UObject::ProcessEvent(Func, &Parms);

	SplineMeshes = std::move(Parms.SplineMeshes);

	return Parms.ReturnValue;
}


// Function BP_SplineMesh.BP_SplineMesh_C.GetSplineComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::GetSplineComponent(class USplineComponent** SplineComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "GetSplineComponent");

	Params::BP_SplineMesh_C_GetSplineComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;
}


// Function BP_SplineMesh.BP_SplineMesh_C.GetSplineLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_SplineMesh_C::GetSplineLength(class USplineComponent* SplineComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "GetSplineLength");

	Params::BP_SplineMesh_C_GetSplineLength Parms{};

	Parms.SplineComponent = SplineComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplineMesh.BP_SplineMesh_C.SnapToActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::SnapToActor(class USceneComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "SnapToActor");

	Params::BP_SplineMesh_C_SnapToActor Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineMesh.BP_SplineMesh_C.SnapToLandscapePos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DistanceAlongSpline                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::SnapToLandscapePos(double DistanceAlongSpline, class USplineComponent* SplineComponent, struct FVector* Location, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "SnapToLandscapePos");

	Params::BP_SplineMesh_C_SnapToLandscapePos Parms{};

	Parms.DistanceAlongSpline = DistanceAlongSpline;
	Parms.SplineComponent = SplineComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function BP_SplineMesh.BP_SplineMesh_C.SnapToSpline
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::SnapToSpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "SnapToSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

