#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KineticShield

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_KineticShieldState_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KineticShield.BP_KineticShield_C
// 0x00B8 (0x03C8 - 0x0310)
class ABP_KineticShield_C final : public AGzShield
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      ShieldNiagara;                                     // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DeployVFX;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ExplosionCollisionBox;                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShieldMesh;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Shield_Color_Curve;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHealthUpdated;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveLinearColor*                      Impact_Color_Curve;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              BulletRefArray;                                    // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                ServerCollisionOffset_Standing;                    // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ServerCollisionOffset_Crouching;                   // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_KineticShieldComponent_C*           Kinetic_Shield_Ability_Component;                  // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_KineticShieldState                          State;                                             // 0x03B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6195[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x03B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blast_Range;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHealth;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateBlast();
	void ActivateShield();
	void BP_OnHealthChange(float Health);
	void BreakShield();
	void ClearBulletImpacts();
	void CloseShield(bool DidBlast);
	void ExecuteUbergraph_BP_KineticShield(int32 EntryPoint);
	void GetHealthPercentage(double* HealthPercentage);
	void GetImpactColor(struct FLinearColor* ImpactColor);
	void GetShieldColor(struct FLinearColor* ShieldColor);
	void InitializeHealth(double Param_MaxHealth, double Param_CurrentHealth);
	void MulticastActivateBlast(const struct FRotator& BlastRotation);
	void OnHealthUpdated__DelegateSignature(double NewHealthValue);
	void OnRep_State();
	void OnStateChanged();
	void ReceiveTick(float DeltaSeconds);
	void ServerUpdateCollision();
	void SetLimbAbilityComponent(class UBP_KineticShieldComponent_C* KineticShieldAbilityComponent);
	void SpawnBulletImpactVFX(const struct FVector& HitLocation);
	void SpawnFallenBulletVFX();
	void UpdateShieldColor();

	void PlayDeploymentVFX() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KineticShield_C">();
	}
	static class ABP_KineticShield_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KineticShield_C>();
	}
};
static_assert(alignof(ABP_KineticShield_C) == 0x000008, "Wrong alignment on ABP_KineticShield_C");
static_assert(sizeof(ABP_KineticShield_C) == 0x0003C8, "Wrong size on ABP_KineticShield_C");
static_assert(offsetof(ABP_KineticShield_C, UberGraphFrame) == 0x000310, "Member 'ABP_KineticShield_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, ShieldNiagara) == 0x000318, "Member 'ABP_KineticShield_C::ShieldNiagara' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, DeployVFX) == 0x000320, "Member 'ABP_KineticShield_C::DeployVFX' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, Arrow) == 0x000328, "Member 'ABP_KineticShield_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, ExplosionCollisionBox) == 0x000330, "Member 'ABP_KineticShield_C::ExplosionCollisionBox' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, ShieldMesh) == 0x000338, "Member 'ABP_KineticShield_C::ShieldMesh' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_KineticShield_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, Shield_Color_Curve) == 0x000348, "Member 'ABP_KineticShield_C::Shield_Color_Curve' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, OnHealthUpdated) == 0x000350, "Member 'ABP_KineticShield_C::OnHealthUpdated' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, Impact_Color_Curve) == 0x000360, "Member 'ABP_KineticShield_C::Impact_Color_Curve' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, BulletRefArray) == 0x000368, "Member 'ABP_KineticShield_C::BulletRefArray' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, ServerCollisionOffset_Standing) == 0x000378, "Member 'ABP_KineticShield_C::ServerCollisionOffset_Standing' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, ServerCollisionOffset_Crouching) == 0x000390, "Member 'ABP_KineticShield_C::ServerCollisionOffset_Crouching' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, Kinetic_Shield_Ability_Component) == 0x0003A8, "Member 'ABP_KineticShield_C::Kinetic_Shield_Ability_Component' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, State) == 0x0003B0, "Member 'ABP_KineticShield_C::State' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, MaxHealth) == 0x0003B4, "Member 'ABP_KineticShield_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, Blast_Range) == 0x0003B8, "Member 'ABP_KineticShield_C::Blast_Range' has a wrong offset!");
static_assert(offsetof(ABP_KineticShield_C, CurrentHealth) == 0x0003C0, "Member 'ABP_KineticShield_C::CurrentHealth' has a wrong offset!");

}

