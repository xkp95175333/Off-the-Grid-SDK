#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Lighting_Utility

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_Light_Type_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_Lighting_Utility.BPFL_Lighting_Utility_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_Lighting_Utility_C final : public UBlueprintFunctionLibrary
{
public:
	static void Create_Bulb_Mesh(class UObject* Self_Reference, class UStaticMesh* Bulb_Mesh, const struct FVector& Bulb_Light_Location, const struct FRotator& Bulb_Light_Rotation, const struct FVector& Bulb_Mesh_Offset, const struct FRotator& Bulb_Mesh_Rotation, const struct FVector& Bulb_Mesh_Scale, class UObject* __WorldContext, class UPrimitiveComponent** Bulb_Mesh_Reference);
	static void Create_LED_Diode_Mesh(class UObject* Self_Reference, class UStaticMesh* LED_Diode_Mesh, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, int32 Number_of_X_Duplications, double X_Spacing, int32 Number_of_Y_Duplications, double Y_Spacing, class UObject* __WorldContext, class UPrimitiveComponent** LED_Didoe_Mesh_Reference);
	static void Create_Light_Component(class UObject* Self_Reference, E_Light_Type Light_Type, const struct FVector& Light_Location, const struct FRotator& Light_Rotation, class UObject* __WorldContext, class USpotLightComponent** Spot_Light_Reference, class UPointLightComponent** Point_Light_Reference, class URectLightComponent** Rect_Light_Reference);
	static void Point_Light_Settings(class UPointLightComponent* Point_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Scale_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);
	static void Rect_Light_Settings(class URectLightComponent* Rect_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Width, double Source_Height, double Barn_Door_Angle, double Barn_Door_Length, class UTexture* Source_Texture, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);
	static void Spot_Light_Settings(class USpotLightComponent* Spot_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Inner_Cone_Angle, double Outer_Cone_Angle, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Slope_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_Lighting_Utility_C">();
	}
	static class UBPFL_Lighting_Utility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_Lighting_Utility_C>();
	}
};
static_assert(alignof(UBPFL_Lighting_Utility_C) == 0x000008, "Wrong alignment on UBPFL_Lighting_Utility_C");
static_assert(sizeof(UBPFL_Lighting_Utility_C) == 0x000028, "Wrong size on UBPFL_Lighting_Utility_C");

}

