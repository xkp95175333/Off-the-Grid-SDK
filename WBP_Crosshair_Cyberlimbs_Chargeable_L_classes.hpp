#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_Chargeable_L

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C
// 0x0068 (0x0358 - 0x02F0)
class UWBP_Crosshair_Cyberlimbs_Chargeable_L_C final : public UGzLimbCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       MaxChargeFade;                                     // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_Progressbar;                                 // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ProgressBarOverlay;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_InputAction_C*           WBP_Abilities_InputInfo;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharging;                                        // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCooldown;                                      // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA4[0x6];                                     // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzChargeableAbilityComponent*          AbilityComponent;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzGA_Charge_LimbAbility*               CachedLimbAbility;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   TO_CHARGE;                                         // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TO_FIRE;                                           // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Construct();
	void ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L(int32 EntryPoint);
	void OnChargeStarted();
	void OnCooldownFinished();
	void OnCooldownStarted();
	void OnLimbActivated(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData);
	void OnLimbActivationEnded(EGzLimbType LimbType);
	void OnMaxCharge();
	void PreConstruct(bool IsDesignTime);
	void Reset();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Crosshair_Cyberlimbs_Chargeable_L_C">();
	}
	static class UWBP_Crosshair_Cyberlimbs_Chargeable_L_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Crosshair_Cyberlimbs_Chargeable_L_C>();
	}
};
static_assert(alignof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C) == 0x000008, "Wrong alignment on UWBP_Crosshair_Cyberlimbs_Chargeable_L_C");
static_assert(sizeof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C) == 0x000358, "Wrong size on UWBP_Crosshair_Cyberlimbs_Chargeable_L_C");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, MaxChargeFade) == 0x0002F8, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::MaxChargeFade' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, Image_Progressbar) == 0x000300, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::Image_Progressbar' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, ProgressBarOverlay) == 0x000308, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::ProgressBarOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, WBP_Abilities_InputInfo) == 0x000310, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::WBP_Abilities_InputInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, MaterialInstance) == 0x000318, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, IsCharging) == 0x000320, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::IsCharging' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, IsInCooldown) == 0x000321, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::IsInCooldown' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, AbilityComponent) == 0x000328, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::AbilityComponent' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, CachedLimbAbility) == 0x000330, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::CachedLimbAbility' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, TO_CHARGE) == 0x000338, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::TO_CHARGE' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Chargeable_L_C, TO_FIRE) == 0x000348, "Member 'UWBP_Crosshair_Cyberlimbs_Chargeable_L_C::TO_FIRE' has a wrong offset!");

}

