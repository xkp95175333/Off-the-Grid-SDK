#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_NPC_Enemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_NPCIdleMontages_structs.hpp"
#include "E_NPC_ActionStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AI_Controller_classes.hpp"
#include "G01_structs.hpp"
#include "E_NPC_MissionStates_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_NPC_Enemy.BPC_NPC_Enemy_C
// 0x00E0 (0x05A8 - 0x04C8)
class ABPC_NPC_Enemy_C : public ABP_AI_Controller_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_NPC_PatrolPoint_C*                  PatrolPathStart;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_NPC_PatrolPoint_C*                  NextPatrolPoint;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_NPC_PatrolPoint_C*                  PreviousPatrolPoint;                               // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Event_PatrolEnd;                                   // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Event_IdleEnd;                                     // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AGzNonPlayerCharacter*                  NPCRef;                                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMap<E_NPCIdleMontages, class UAnimMontage*>  PatrolIdleMontages;                                // 0x0510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_NPC_ActionStates                            LastFreeAction;                                    // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389A[0x7];                                     // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             NewEventDispatcher;                                // 0x0568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                InitialLocation;                                   // 0x0578(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Event_AlertEnd;                                    // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveFloat*                            CurveFloat;                                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ShouldFollowVehicle();
	void SetMissionState(E_NPC_MissionStates NewMissionState);
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void OnNPCDied(class AGzCharacter* Param_Character);
	void OnChangeAILOD(const struct FGzAILOD& AILOD);
	void NewEventDispatcher__DelegateSignature();
	void GetIdleMontageToPlay(E_NPCIdleMontages IdleToPlay, class UAnimMontage** Montage);
	void ExecuteUbergraph_BPC_NPC_Enemy(int32 EntryPoint);
	void Event_PatrolEnd__DelegateSignature();
	void Event_IdleEnd__DelegateSignature(bool Success);
	void Event_AlertEnd__DelegateSignature(bool Success);
	void MentalStateChanged(EGzMentalState ChangedMentalState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_NPC_Enemy_C">();
	}
	static class ABPC_NPC_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPC_NPC_Enemy_C>();
	}
};
static_assert(alignof(ABPC_NPC_Enemy_C) == 0x000008, "Wrong alignment on ABPC_NPC_Enemy_C");
static_assert(sizeof(ABPC_NPC_Enemy_C) == 0x0005A8, "Wrong size on ABPC_NPC_Enemy_C");
static_assert(offsetof(ABPC_NPC_Enemy_C, UberGraphFrame) == 0x0004C8, "Member 'ABPC_NPC_Enemy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, PatrolPathStart) == 0x0004D0, "Member 'ABPC_NPC_Enemy_C::PatrolPathStart' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, NextPatrolPoint) == 0x0004D8, "Member 'ABPC_NPC_Enemy_C::NextPatrolPoint' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, PreviousPatrolPoint) == 0x0004E0, "Member 'ABPC_NPC_Enemy_C::PreviousPatrolPoint' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, Event_PatrolEnd) == 0x0004E8, "Member 'ABPC_NPC_Enemy_C::Event_PatrolEnd' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, Event_IdleEnd) == 0x0004F8, "Member 'ABPC_NPC_Enemy_C::Event_IdleEnd' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, NPCRef) == 0x000508, "Member 'ABPC_NPC_Enemy_C::NPCRef' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, PatrolIdleMontages) == 0x000510, "Member 'ABPC_NPC_Enemy_C::PatrolIdleMontages' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, LastFreeAction) == 0x000560, "Member 'ABPC_NPC_Enemy_C::LastFreeAction' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, NewEventDispatcher) == 0x000568, "Member 'ABPC_NPC_Enemy_C::NewEventDispatcher' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, InitialLocation) == 0x000578, "Member 'ABPC_NPC_Enemy_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, Event_AlertEnd) == 0x000590, "Member 'ABPC_NPC_Enemy_C::Event_AlertEnd' has a wrong offset!");
static_assert(offsetof(ABPC_NPC_Enemy_C, CurveFloat) == 0x0005A0, "Member 'ABPC_NPC_Enemy_C::CurveFloat' has a wrong offset!");

}

