#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpiderMine_BP_HUD

#include "Basic.hpp"

#include "S_SpiderMine_TextData_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C
// 0x0128 (0x0418 - 0x02F0)
class UWBP_SpiderMine_BP_HUD_C final : public UGzLimbCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       NoValidRange;                                      // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_InputAction_C*           LinkMine_InputInfo;                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           MineAmount;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MineIcon;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           OutOfRange;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzSpiderMine_PreviewComponent*         SpiderPreviewComponent;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bDistanceWasValid;                                 // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLinkingWasValid;                                  // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLinkingUIVisible;                                 // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B12[0x1];                                     // 0x032B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ValidColor;                                        // 0x032C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            InvalidColor;                                      // 0x0340(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_5B13[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SpiderMine_TextData                 TextData;                                          // 0x0358(0x0090)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        ChargeIndicatorPadding;                            // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SingleMineText;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   LinkText;                                          // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bWasValid;                                         // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_SpiderMine_BP_HUD(int32 EntryPoint);
	void OnLimbActivated(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData);
	void OnLimbActivationEnded(EGzLimbType LimbType);
	void UpdateActiveMines(int32 Curren, int32 Max);
	void UpdateMineCount();
	void UpdateValidation(bool bValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SpiderMine_BP_HUD_C">();
	}
	static class UWBP_SpiderMine_BP_HUD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SpiderMine_BP_HUD_C>();
	}
};
static_assert(alignof(UWBP_SpiderMine_BP_HUD_C) == 0x000008, "Wrong alignment on UWBP_SpiderMine_BP_HUD_C");
static_assert(sizeof(UWBP_SpiderMine_BP_HUD_C) == 0x000418, "Wrong size on UWBP_SpiderMine_BP_HUD_C");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_SpiderMine_BP_HUD_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, NoValidRange) == 0x0002F8, "Member 'UWBP_SpiderMine_BP_HUD_C::NoValidRange' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, LinkMine_InputInfo) == 0x000300, "Member 'UWBP_SpiderMine_BP_HUD_C::LinkMine_InputInfo' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, MineAmount) == 0x000308, "Member 'UWBP_SpiderMine_BP_HUD_C::MineAmount' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, MineIcon) == 0x000310, "Member 'UWBP_SpiderMine_BP_HUD_C::MineIcon' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, OutOfRange) == 0x000318, "Member 'UWBP_SpiderMine_BP_HUD_C::OutOfRange' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, SpiderPreviewComponent) == 0x000320, "Member 'UWBP_SpiderMine_BP_HUD_C::SpiderPreviewComponent' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, bDistanceWasValid) == 0x000328, "Member 'UWBP_SpiderMine_BP_HUD_C::bDistanceWasValid' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, bLinkingWasValid) == 0x000329, "Member 'UWBP_SpiderMine_BP_HUD_C::bLinkingWasValid' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, bLinkingUIVisible) == 0x00032A, "Member 'UWBP_SpiderMine_BP_HUD_C::bLinkingUIVisible' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, ValidColor) == 0x00032C, "Member 'UWBP_SpiderMine_BP_HUD_C::ValidColor' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, InvalidColor) == 0x000340, "Member 'UWBP_SpiderMine_BP_HUD_C::InvalidColor' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, TextData) == 0x000358, "Member 'UWBP_SpiderMine_BP_HUD_C::TextData' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, ChargeIndicatorPadding) == 0x0003E8, "Member 'UWBP_SpiderMine_BP_HUD_C::ChargeIndicatorPadding' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, SingleMineText) == 0x0003F0, "Member 'UWBP_SpiderMine_BP_HUD_C::SingleMineText' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, LinkText) == 0x000400, "Member 'UWBP_SpiderMine_BP_HUD_C::LinkText' has a wrong offset!");
static_assert(offsetof(UWBP_SpiderMine_BP_HUD_C, bWasValid) == 0x000410, "Member 'UWBP_SpiderMine_BP_HUD_C::bWasValid' has a wrong offset!");

}

