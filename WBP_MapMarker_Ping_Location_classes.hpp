#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapMarker_Ping_Location

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C
// 0x00C0 (0x0460 - 0x03A0)
class UWBP_MapMarker_Ping_Location_C final : public UGzMapMarkerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                ItemPing_Background_Border;                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemPing_Image;                                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemPing_LimbType_Image;                           // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemPing_Quality_Image;                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               ItemPing_SizeBox;                                  // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        PingType_WidgetSwitcher;                           // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MapMarker_Content_C*               WBP_MapMarker_Content;                             // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Marker_PingFeedback_C*             WBP_Marker_PingFeedback;                           // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsItem;                                            // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AEB[0x3];                                     // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor_Team;                              // 0x03EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Owner;                             // 0x03FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AEC[0x4];                                     // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FName>        PingTypeToName;                                    // 0x0410(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Construct();
	void ExecuteUbergraph_WBP_MapMarker_Ping_Location(int32 EntryPoint);
	void OnPingAgreementChanged(class AGzPlayerState* PlayerState, const struct FGzPingData& PingData, bool bAgree);
	void SetBackgroundColor();
	void SetItemPingIcon(class UObject* ItemObject, bool* ValidItem);
	void SetPingIcon();
	void ShowItemDibs();
	void ToggleItemDibsForPlayer(class AGzPlayerState* PlayerState, bool Agree);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MapMarker_Ping_Location_C">();
	}
	static class UWBP_MapMarker_Ping_Location_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MapMarker_Ping_Location_C>();
	}
};
static_assert(alignof(UWBP_MapMarker_Ping_Location_C) == 0x000008, "Wrong alignment on UWBP_MapMarker_Ping_Location_C");
static_assert(sizeof(UWBP_MapMarker_Ping_Location_C) == 0x000460, "Wrong size on UWBP_MapMarker_Ping_Location_C");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, UberGraphFrame) == 0x0003A0, "Member 'UWBP_MapMarker_Ping_Location_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, ItemPing_Background_Border) == 0x0003A8, "Member 'UWBP_MapMarker_Ping_Location_C::ItemPing_Background_Border' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, ItemPing_Image) == 0x0003B0, "Member 'UWBP_MapMarker_Ping_Location_C::ItemPing_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, ItemPing_LimbType_Image) == 0x0003B8, "Member 'UWBP_MapMarker_Ping_Location_C::ItemPing_LimbType_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, ItemPing_Quality_Image) == 0x0003C0, "Member 'UWBP_MapMarker_Ping_Location_C::ItemPing_Quality_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, ItemPing_SizeBox) == 0x0003C8, "Member 'UWBP_MapMarker_Ping_Location_C::ItemPing_SizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, PingType_WidgetSwitcher) == 0x0003D0, "Member 'UWBP_MapMarker_Ping_Location_C::PingType_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, WBP_MapMarker_Content) == 0x0003D8, "Member 'UWBP_MapMarker_Ping_Location_C::WBP_MapMarker_Content' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, WBP_Marker_PingFeedback) == 0x0003E0, "Member 'UWBP_MapMarker_Ping_Location_C::WBP_Marker_PingFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, IsItem) == 0x0003E8, "Member 'UWBP_MapMarker_Ping_Location_C::IsItem' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, BackgroundColor_Team) == 0x0003EC, "Member 'UWBP_MapMarker_Ping_Location_C::BackgroundColor_Team' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, BackgroundColor_Owner) == 0x0003FC, "Member 'UWBP_MapMarker_Ping_Location_C::BackgroundColor_Owner' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Ping_Location_C, PingTypeToName) == 0x000410, "Member 'UWBP_MapMarker_Ping_Location_C::PingTypeToName' has a wrong offset!");

}

