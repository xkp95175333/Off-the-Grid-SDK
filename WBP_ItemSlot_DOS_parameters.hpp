#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ItemSlot_DOS

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ItemSlotShowingState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.ApplySlotState
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_ItemSlot_DOS_C_ApplySlotState final
{
public:
	class FName                                   TextColor_Disabled;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TextColor_Default;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Active;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Disabled;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Default;                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IconColor_Disabled;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IconColor_Default;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemSlotShowingState                         Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4838[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemSlotShowingState                         Temp_byte_Variable_1;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4839[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_5;                            // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	EItemSlotShowingState                         Temp_byte_Variable_2;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemSlotShowingState                         Temp_byte_Variable_3;                              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483A[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x00C4(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_2;                           // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetInventoryItemCount_Result;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00E8(0x0010)()
};
static_assert(alignof(WBP_ItemSlot_DOS_C_ApplySlotState) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_ApplySlotState");
static_assert(sizeof(WBP_ItemSlot_DOS_C_ApplySlotState) == 0x0000F8, "Wrong size on WBP_ItemSlot_DOS_C_ApplySlotState");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, TextColor_Disabled) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::TextColor_Disabled' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, TextColor_Default) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::TextColor_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, BackgroundColor_Active) == 0x000010, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::BackgroundColor_Active' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, BackgroundColor_Disabled) == 0x000020, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::BackgroundColor_Disabled' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, BackgroundColor_Default) == 0x000030, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::BackgroundColor_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, IconColor_Disabled) == 0x000040, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::IconColor_Disabled' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, IconColor_Default) == 0x000050, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::IconColor_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_byte_Variable) == 0x000060, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable) == 0x000064, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_byte_Variable_1) == 0x000074, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_1) == 0x000078, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_2) == 0x000080, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_3) == 0x000088, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_4) == 0x000090, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_5) == 0x000098, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_byte_Variable_2) == 0x0000A0, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_byte_Variable_3) == 0x0000A1, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, Temp_struct_Variable_6) == 0x0000A4, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, K2Node_Select_Default) == 0x0000B4, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, K2Node_Select_Default_1) == 0x0000C4, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, K2Node_Select_Default_2) == 0x0000CC, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, CallFunc_GetInventoryItemCount_Result) == 0x0000D4, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::CallFunc_GetInventoryItemCount_Result' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, K2Node_Select_Default_3) == 0x0000D8, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ApplySlotState, CallFunc_Conv_IntToText_ReturnValue) == 0x0000E8, "Member 'WBP_ItemSlot_DOS_C_ApplySlotState::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Are Any Granted Abilities
// 0x000C (0x000C - 0x0000)
struct WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities final
{
public:
	bool                                          AreAny;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities) == 0x000004, "Wrong alignment on WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities) == 0x00000C, "Wrong size on WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities, AreAny) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities::AreAny' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_Are_Any_Granted_Abilities::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Check for Blocked State
// 0x0002 (0x0002 - 0x0000)
struct WBP_ItemSlot_DOS_C_Check_for_Blocked_State final
{
public:
	bool                                          CallFunc_Are_Any_Granted_Abilities_AreAny;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCanActivateSlotAbilities_CanActivate; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Check_for_Blocked_State) == 0x000001, "Wrong alignment on WBP_ItemSlot_DOS_C_Check_for_Blocked_State");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Check_for_Blocked_State) == 0x000002, "Wrong size on WBP_ItemSlot_DOS_C_Check_for_Blocked_State");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Check_for_Blocked_State, CallFunc_Are_Any_Granted_Abilities_AreAny) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Check_for_Blocked_State::CallFunc_Are_Any_Granted_Abilities_AreAny' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Check_for_Blocked_State, CallFunc_CheckCanActivateSlotAbilities_CanActivate) == 0x000001, "Member 'WBP_ItemSlot_DOS_C_Check_for_Blocked_State::CallFunc_CheckCanActivateSlotAbilities_CanActivate' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.CheckCanActivateSlotAbilities
// 0x0048 (0x0048 - 0x0000)
struct WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities final
{
public:
	bool                                          CanActivate;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  NewLocalVar;                                       // 0x0008(0x0020)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483D[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGameplayAbility*                     CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_CanActivateAbility_ReturnValue;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities");
static_assert(sizeof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities) == 0x000048, "Wrong size on WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CanActivate) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CanActivate' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, NewLocalVar) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, Temp_int_Array_Index_Variable) == 0x000028, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_Array_Get_Item) == 0x000038, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_BP_CanActivateAbility_ReturnValue) == 0x000044, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_BP_CanActivateAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities, CallFunc_IsValid_ReturnValue) == 0x000046, "Member 'WBP_ItemSlot_DOS_C_CheckCanActivateSlotAbilities::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.ExecuteUbergraph_WBP_ItemSlot_DOS
// 0x01F0 (0x01F0 - 0x0000)
struct WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzInvComponent*                        CallFunc_GetInventoryComponent_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskAttributeChanged*           CallFunc_ListenForAttributeChange_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskAttributeChanged*           CallFunc_ListenForAttributeChange_ReturnValue_1;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483E[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_1;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable;                              // 0x0030(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483F[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4840[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     K2Node_CustomEvent_Attribute;                      // 0x0080(0x0038)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_OldValue;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable_1;                            // 0x00C8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4841[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_OldViewTarget;                        // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     K2Node_CustomEvent_Attribute_1;                    // 0x0110(0x0038)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue_1;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_OldValue_1;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_NewViewTarget;                        // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0158(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4842[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4843[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x017C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzInvPocketDef& PocketDef, struct FGzInvPocket& Pocket)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x018C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzInvPocketChangeData& PocketChangeData)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x019C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x01AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x01BC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x01CC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4844[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_ViewTarget;                           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS");
static_assert(sizeof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS) == 0x0001F0, "Wrong size on WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, EntryPoint) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_real_Variable) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_GetInventoryComponent_ReturnValue) == 0x000010, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_GetInventoryComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_ListenForAttributeChange_ReturnValue) == 0x000018, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_ListenForAttributeChange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_ListenForAttributeChange_ReturnValue_1) == 0x000020, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_ListenForAttributeChange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_real_Variable_1) == 0x00002C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_struct_Variable) == 0x000030, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue_2) == 0x000068, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate) == 0x00006C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_Attribute) == 0x000080, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_Attribute' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_NewValue) == 0x0000B8, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_OldValue) == 0x0000BC, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_OldValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_real_Variable_2) == 0x0000C0, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_real_Variable_3) == 0x0000C4, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, Temp_struct_Variable_1) == 0x0000C8, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue_3) == 0x000100, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_Event_OldViewTarget) == 0x000108, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_Event_OldViewTarget' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_Attribute_1) == 0x000110, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_Attribute_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_NewValue_1) == 0x000148, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_NewValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CustomEvent_OldValue_1) == 0x00014C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CustomEvent_OldValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_Event_NewViewTarget) == 0x000150, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_Event_NewViewTarget' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_1) == 0x000158, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue_4) == 0x000168, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_DynamicCast_AsGz_Player_Character) == 0x000170, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_DynamicCast_bSuccess) == 0x000178, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_2) == 0x00017C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_3) == 0x00018C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_4) == 0x00019C, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_5) == 0x0001AC, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_6) == 0x0001BC, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_CreateDelegate_OutputDelegate_7) == 0x0001CC, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, K2Node_Event_ViewTarget) == 0x0001E0, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::K2Node_Event_ViewTarget' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, CallFunc_IsValid_ReturnValue_5) == 0x0001E8, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x0001E9, "Member 'WBP_ItemSlot_DOS_C_ExecuteUbergraph_WBP_ItemSlot_DOS::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.FilterDelegate
// 0x0090 (0x0090 - 0x0000)
struct WBP_ItemSlot_DOS_C_FilterDelegate final
{
public:
	struct FGzInvPocketDef                        PocketDef;                                         // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGzInvPocket                           Pocket;                                            // 0x0060(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_FilterDelegate) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_FilterDelegate");
static_assert(sizeof(WBP_ItemSlot_DOS_C_FilterDelegate) == 0x000090, "Wrong size on WBP_ItemSlot_DOS_C_FilterDelegate");
static_assert(offsetof(WBP_ItemSlot_DOS_C_FilterDelegate, PocketDef) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_FilterDelegate::PocketDef' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_FilterDelegate, Pocket) == 0x000060, "Member 'WBP_ItemSlot_DOS_C_FilterDelegate::Pocket' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_FilterDelegate, ReturnValue) == 0x000088, "Member 'WBP_ItemSlot_DOS_C_FilterDelegate::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_FilterDelegate, CallFunc_MatchesTag_ReturnValue) == 0x000089, "Member 'WBP_ItemSlot_DOS_C_FilterDelegate::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.GetInventoryItemCount
// 0x0038 (0x0038 - 0x0000)
struct WBP_ItemSlot_DOS_C_GetInventoryItemCount final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4845[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetViewTarget_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4846[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzCharacter*                           K2Node_DynamicCast_AsGz_Character;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4847[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzInvComponent*                        CallFunc_GetInventoryComponent_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemCountByItemData_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_GetInventoryItemCount) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_GetInventoryItemCount");
static_assert(sizeof(WBP_ItemSlot_DOS_C_GetInventoryItemCount) == 0x000038, "Wrong size on WBP_ItemSlot_DOS_C_GetInventoryItemCount");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, Result) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::Result' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, CallFunc_GetViewTarget_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, K2Node_DynamicCast_AsGz_Character) == 0x000018, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::K2Node_DynamicCast_AsGz_Character' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, CallFunc_GetInventoryComponent_ReturnValue) == 0x000028, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::CallFunc_GetInventoryComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_GetInventoryItemCount, CallFunc_GetItemCountByItemData_ReturnValue) == 0x000030, "Member 'WBP_ItemSlot_DOS_C_GetInventoryItemCount::CallFunc_GetItemCountByItemData_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6
// 0x0040 (0x0040 - 0x0000)
struct WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6 final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         NewValue;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldValue;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6");
static_assert(sizeof(WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6) == 0x000040, "Wrong size on WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6, Attribute) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6::Attribute' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6, NewValue) == 0x000038, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6, OldValue) == 0x00003C, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_17AA1234425B0CE202B3A498FA7F18E6::OldValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991
// 0x0040 (0x0040 - 0x0000)
struct WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991 final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         NewValue;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldValue;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991");
static_assert(sizeof(WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991) == 0x000040, "Wrong size on WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991, Attribute) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991::Attribute' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991, NewValue) == 0x000038, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991, OldValue) == 0x00003C, "Member 'WBP_ItemSlot_DOS_C_OnAttributeChanged_2FA51DEA4EDC1E240C2DF99336D4F991::OldValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.OnBlockedTagsChagned
// 0x0008 (0x0008 - 0x0000)
struct WBP_ItemSlot_DOS_C_OnBlockedTagsChagned final
{
public:
	int32                                         CallFunc_GetInventoryItemCount_Result;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_OnBlockedTagsChagned) == 0x000004, "Wrong alignment on WBP_ItemSlot_DOS_C_OnBlockedTagsChagned");
static_assert(sizeof(WBP_ItemSlot_DOS_C_OnBlockedTagsChagned) == 0x000008, "Wrong size on WBP_ItemSlot_DOS_C_OnBlockedTagsChagned");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnBlockedTagsChagned, CallFunc_GetInventoryItemCount_Result) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_OnBlockedTagsChagned::CallFunc_GetInventoryItemCount_Result' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnBlockedTagsChagned, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_OnBlockedTagsChagned::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnBlockedTagsChagned, CallFunc_Conv_IntToBool_ReturnValue) == 0x000005, "Member 'WBP_ItemSlot_DOS_C_OnBlockedTagsChagned::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.OnInventoryPocketChange
// 0x0080 (0x0080 - 0x0000)
struct WBP_ItemSlot_DOS_C_OnInventoryPocketChange final
{
public:
	struct FGzInvPocketChangeData                 PocketChangeData;                                  // 0x0000(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_OnInventoryPocketChange) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_OnInventoryPocketChange");
static_assert(sizeof(WBP_ItemSlot_DOS_C_OnInventoryPocketChange) == 0x000080, "Wrong size on WBP_ItemSlot_DOS_C_OnInventoryPocketChange");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnInventoryPocketChange, PocketChangeData) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_OnInventoryPocketChange::PocketChangeData' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.OnViewTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_ItemSlot_DOS_C_OnViewTargetChanged final
{
public:
	class APawn*                                  ViewTarget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_OnViewTargetChanged) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_OnViewTargetChanged");
static_assert(sizeof(WBP_ItemSlot_DOS_C_OnViewTargetChanged) == 0x000008, "Wrong size on WBP_ItemSlot_DOS_C_OnViewTargetChanged");
static_assert(offsetof(WBP_ItemSlot_DOS_C_OnViewTargetChanged, ViewTarget) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_OnViewTargetChanged::ViewTarget' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.ReceiveBindEvents
// 0x0008 (0x0008 - 0x0000)
struct WBP_ItemSlot_DOS_C_ReceiveBindEvents final
{
public:
	class APawn*                                  NewViewTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_ReceiveBindEvents) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_ReceiveBindEvents");
static_assert(sizeof(WBP_ItemSlot_DOS_C_ReceiveBindEvents) == 0x000008, "Wrong size on WBP_ItemSlot_DOS_C_ReceiveBindEvents");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ReceiveBindEvents, NewViewTarget) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_ReceiveBindEvents::NewViewTarget' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.ReceiveUnbindEvents
// 0x0008 (0x0008 - 0x0000)
struct WBP_ItemSlot_DOS_C_ReceiveUnbindEvents final
{
public:
	class APawn*                                  OldViewTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_ReceiveUnbindEvents) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_ReceiveUnbindEvents");
static_assert(sizeof(WBP_ItemSlot_DOS_C_ReceiveUnbindEvents) == 0x000008, "Wrong size on WBP_ItemSlot_DOS_C_ReceiveUnbindEvents");
static_assert(offsetof(WBP_ItemSlot_DOS_C_ReceiveUnbindEvents, OldViewTarget) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_ReceiveUnbindEvents::OldViewTarget' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Select Counter Text Style
// 0x0118 (0x0118 - 0x0000)
struct WBP_ItemSlot_DOS_C_Select_Counter_Text_Style final
{
public:
	int32                                         Param_ItemCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4848[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4849[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0010)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484A[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00F8(0x0010)()
	class FText                                   K2Node_Select_Default;                             // 0x0108(0x0010)()
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_Select_Counter_Text_Style");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style) == 0x000118, "Wrong size on WBP_ItemSlot_DOS_C_Select_Counter_Text_Style");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, Param_ItemCount) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::Param_ItemCount' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000070, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, K2Node_MakeArray_Array) == 0x000078, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, Temp_bool_Variable) == 0x0000F0, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, CallFunc_Format_ReturnValue_1) == 0x0000F8, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Select_Counter_Text_Style, K2Node_Select_Default) == 0x000108, "Member 'WBP_ItemSlot_DOS_C_Select_Counter_Text_Style::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Set Slot Abilities
// 0x0038 (0x0038 - 0x0000)
struct WBP_ItemSlot_DOS_C_Set_Slot_Abilities final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue; // 0x0008(0x0020)()
	TArray<class UGzGameplayAbility*>             CallFunc_GetAbilitiesForInventorySlots_OutAbilities; // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_Set_Slot_Abilities");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities) == 0x000038, "Wrong size on WBP_ItemSlot_DOS_C_Set_Slot_Abilities");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Set_Slot_Abilities::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'WBP_ItemSlot_DOS_C_Set_Slot_Abilities::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_Set_Slot_Abilities::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Slot_Abilities, CallFunc_GetAbilitiesForInventorySlots_OutAbilities) == 0x000028, "Member 'WBP_ItemSlot_DOS_C_Set_Slot_Abilities::CallFunc_GetAbilitiesForInventorySlots_OutAbilities' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Set Style for Sides
// 0x0009 (0x0009 - 0x0000)
struct WBP_ItemSlot_DOS_C_Set_Style_for_Sides final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides) == 0x000001, "Wrong alignment on WBP_ItemSlot_DOS_C_Set_Style_for_Sides");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides) == 0x000009, "Wrong size on WBP_ItemSlot_DOS_C_Set_Style_for_Sides");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_byte_Variable) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_bool_Variable) == 0x000002, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, K2Node_Select_Default) == 0x000007, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Set_Style_for_Sides, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_Set_Style_for_Sides::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct WBP_ItemSlot_DOS_C_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_SetActiveState) == 0x000001, "Wrong alignment on WBP_ItemSlot_DOS_C_SetActiveState");
static_assert(sizeof(WBP_ItemSlot_DOS_C_SetActiveState) == 0x000001, "Wrong size on WBP_ItemSlot_DOS_C_SetActiveState");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SetActiveState, IsActive) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_SetActiveState::IsActive' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.SetItemData
// 0x0038 (0x0038 - 0x0000)
struct WBP_ItemSlot_DOS_C_SetItemData final
{
public:
	class UGzInvComponent*                        CallFunc_GetInventoryComponent_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGzInvPocket                           CallFunc_GetPocketBySlot_ReturnValue;              // 0x0008(0x0028)(ConstParm)
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_SetItemData) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_SetItemData");
static_assert(sizeof(WBP_ItemSlot_DOS_C_SetItemData) == 0x000038, "Wrong size on WBP_ItemSlot_DOS_C_SetItemData");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SetItemData, CallFunc_GetInventoryComponent_ReturnValue) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_SetItemData::CallFunc_GetInventoryComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SetItemData, CallFunc_GetPocketBySlot_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_SetItemData::CallFunc_GetPocketBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SetItemData, CallFunc_GetItemData_ReturnValue) == 0x000030, "Member 'WBP_ItemSlot_DOS_C_SetItemData::CallFunc_GetItemData_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct WBP_ItemSlot_DOS_C_SetState final
{
public:
	EItemSlotShowingState                         TargetShowingState;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_SetState) == 0x000001, "Wrong alignment on WBP_ItemSlot_DOS_C_SetState");
static_assert(sizeof(WBP_ItemSlot_DOS_C_SetState) == 0x000001, "Wrong size on WBP_ItemSlot_DOS_C_SetState");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SetState, TargetShowingState) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_SetState::TargetShowingState' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.SubscribeToAbilities
// 0x0068 (0x0068 - 0x0000)
struct WBP_ItemSlot_DOS_C_SubscribeToAbilities final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGameplayAbility*                     CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484D[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetActivationOwnedTags_ReturnValue;       // 0x0020(0x0020)(ConstParm)
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0040(0x0010)(ReferenceParm)
	TDelegate<void(bool bWasAdded)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_SubscribeToAbilities) == 0x000008, "Wrong alignment on WBP_ItemSlot_DOS_C_SubscribeToAbilities");
static_assert(sizeof(WBP_ItemSlot_DOS_C_SubscribeToAbilities) == 0x000068, "Wrong size on WBP_ItemSlot_DOS_C_SubscribeToAbilities");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_Array_Get_Item) == 0x000010, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_GetActivationOwnedTags_ReturnValue) == 0x000020, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_GetActivationOwnedTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000040, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_SubscribeToAbilities, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000060, "Member 'WBP_ItemSlot_DOS_C_SubscribeToAbilities::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.Update Current State
// 0x0008 (0x0008 - 0x0000)
struct WBP_ItemSlot_DOS_C_Update_Current_State final
{
public:
	int32                                         CallFunc_GetInventoryItemCount_Result;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_Update_Current_State) == 0x000004, "Wrong alignment on WBP_ItemSlot_DOS_C_Update_Current_State");
static_assert(sizeof(WBP_ItemSlot_DOS_C_Update_Current_State) == 0x000008, "Wrong size on WBP_ItemSlot_DOS_C_Update_Current_State");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Update_Current_State, CallFunc_GetInventoryItemCount_Result) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_Update_Current_State::CallFunc_GetInventoryItemCount_Result' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_Update_Current_State, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_Update_Current_State::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.UpdateCounter
// 0x0004 (0x0004 - 0x0000)
struct WBP_ItemSlot_DOS_C_UpdateCounter final
{
public:
	int32                                         CallFunc_GetInventoryItemCount_Result;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_UpdateCounter) == 0x000004, "Wrong alignment on WBP_ItemSlot_DOS_C_UpdateCounter");
static_assert(sizeof(WBP_ItemSlot_DOS_C_UpdateCounter) == 0x000004, "Wrong size on WBP_ItemSlot_DOS_C_UpdateCounter");
static_assert(offsetof(WBP_ItemSlot_DOS_C_UpdateCounter, CallFunc_GetInventoryItemCount_Result) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_UpdateCounter::CallFunc_GetInventoryItemCount_Result' has a wrong offset!");

// Function WBP_ItemSlot_DOS.WBP_ItemSlot_DOS_C.UpdateItemIcon
// 0x000C (0x000C - 0x0000)
struct WBP_ItemSlot_DOS_C_UpdateItemIcon final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetInventoryItemCount_Result;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemSlot_DOS_C_UpdateItemIcon) == 0x000004, "Wrong alignment on WBP_ItemSlot_DOS_C_UpdateItemIcon");
static_assert(sizeof(WBP_ItemSlot_DOS_C_UpdateItemIcon) == 0x00000C, "Wrong size on WBP_ItemSlot_DOS_C_UpdateItemIcon");
static_assert(offsetof(WBP_ItemSlot_DOS_C_UpdateItemIcon, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_ItemSlot_DOS_C_UpdateItemIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_UpdateItemIcon, CallFunc_GetInventoryItemCount_Result) == 0x000004, "Member 'WBP_ItemSlot_DOS_C_UpdateItemIcon::CallFunc_GetInventoryItemCount_Result' has a wrong offset!");
static_assert(offsetof(WBP_ItemSlot_DOS_C_UpdateItemIcon, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WBP_ItemSlot_DOS_C_UpdateItemIcon::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

