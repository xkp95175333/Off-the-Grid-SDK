#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_MicroMissile_Lock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C
// 0x0048 (0x0328 - 0x02E0)
class UWBP_Crosshair_MicroMissile_Lock_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       LockingAnimation;                                  // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_Default;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_LockingProgress;                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_TargetAquired;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        StatusWidgetSwitcher;                              // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        TimeToLockOn;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LockOnDuration;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bLocking;                                          // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock(int32 EntryPoint);
	void OnLockingAnimationFinished();
	void OnLockingAnimationStarted();
	void OnLockOnInterrupted();
	void OnLockOnStatusChanged(bool bNewLocking, double Progress);
	void OnLockOnSucceed();
	void OnTargetingStopped();
	void ResetLock();
	void StartLockOnTarget();
	void UnbindEvents();
	void UpdateStatus(double DeltaTime, bool* NeedsToContinueTick);

	void GetPlaybackSpeed(double* PlaybackSpeed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Crosshair_MicroMissile_Lock_C">();
	}
	static class UWBP_Crosshair_MicroMissile_Lock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Crosshair_MicroMissile_Lock_C>();
	}
};
static_assert(alignof(UWBP_Crosshair_MicroMissile_Lock_C) == 0x000008, "Wrong alignment on UWBP_Crosshair_MicroMissile_Lock_C");
static_assert(sizeof(UWBP_Crosshair_MicroMissile_Lock_C) == 0x000328, "Wrong size on UWBP_Crosshair_MicroMissile_Lock_C");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, LockingAnimation) == 0x0002E8, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::LockingAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, Image_Default) == 0x0002F0, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::Image_Default' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, Image_LockingProgress) == 0x0002F8, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::Image_LockingProgress' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, Image_TargetAquired) == 0x000300, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::Image_TargetAquired' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, StatusWidgetSwitcher) == 0x000308, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::StatusWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, TimeToLockOn) == 0x000310, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::TimeToLockOn' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, LockOnDuration) == 0x000318, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::LockOnDuration' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_MicroMissile_Lock_C, bLocking) == 0x000320, "Member 'UWBP_Crosshair_MicroMissile_Lock_C::bLocking' has a wrong offset!");

}

