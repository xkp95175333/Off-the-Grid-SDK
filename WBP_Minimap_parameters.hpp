#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Minimap

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Minimap.WBP_Minimap_C.ExecuteUbergraph_WBP_Minimap
// 0x0028 (0x0028 - 0x0000)
struct WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D81[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MinimapController_C*                K2Node_DynamicCast_AsBP_Minimap_Controller;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D82[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MinimapController_C*                CallFunc_CreateControllerForMap_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ViewTarget;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap) == 0x000008, "Wrong alignment on WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap");
static_assert(sizeof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap) == 0x000028, "Wrong size on WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap");
static_assert(offsetof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap, EntryPoint) == 0x000000, "Member 'WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap, K2Node_DynamicCast_AsBP_Minimap_Controller) == 0x000008, "Member 'WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap::K2Node_DynamicCast_AsBP_Minimap_Controller' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap, CallFunc_CreateControllerForMap_ReturnValue) == 0x000018, "Member 'WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap::CallFunc_CreateControllerForMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap, K2Node_Event_ViewTarget) == 0x000020, "Member 'WBP_Minimap_C_ExecuteUbergraph_WBP_Minimap::K2Node_Event_ViewTarget' has a wrong offset!");

// Function WBP_Minimap.WBP_Minimap_C.OnViewTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_Minimap_C_OnViewTargetChanged final
{
public:
	class APawn*                                  ViewTarget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Minimap_C_OnViewTargetChanged) == 0x000008, "Wrong alignment on WBP_Minimap_C_OnViewTargetChanged");
static_assert(sizeof(WBP_Minimap_C_OnViewTargetChanged) == 0x000008, "Wrong size on WBP_Minimap_C_OnViewTargetChanged");
static_assert(offsetof(WBP_Minimap_C_OnViewTargetChanged, ViewTarget) == 0x000000, "Member 'WBP_Minimap_C_OnViewTargetChanged::ViewTarget' has a wrong offset!");

// Function WBP_Minimap.WBP_Minimap_C.ShouldDisplayMap
// 0x0020 (0x0020 - 0x0000)
struct WBP_Minimap_C_ShouldDisplayMap final
{
public:
	class APawn*                                  ViewTarget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldDisplaySpectatedPlayerMap_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D83[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInComebackArena_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Minimap_C_ShouldDisplayMap) == 0x000008, "Wrong alignment on WBP_Minimap_C_ShouldDisplayMap");
static_assert(sizeof(WBP_Minimap_C_ShouldDisplayMap) == 0x000020, "Wrong size on WBP_Minimap_C_ShouldDisplayMap");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, ViewTarget) == 0x000000, "Member 'WBP_Minimap_C_ShouldDisplayMap::ViewTarget' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, bResult) == 0x000008, "Member 'WBP_Minimap_C_ShouldDisplayMap::bResult' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, CallFunc_ShouldDisplaySpectatedPlayerMap_ReturnValue) == 0x000009, "Member 'WBP_Minimap_C_ShouldDisplayMap::CallFunc_ShouldDisplaySpectatedPlayerMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000010, "Member 'WBP_Minimap_C_ShouldDisplayMap::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, CallFunc_IsInComebackArena_ReturnValue) == 0x000018, "Member 'WBP_Minimap_C_ShouldDisplayMap::CallFunc_IsInComebackArena_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'WBP_Minimap_C_ShouldDisplayMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplayMap, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'WBP_Minimap_C_ShouldDisplayMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WBP_Minimap.WBP_Minimap_C.ShouldDisplaySpectatedPlayerMap
// 0x0080 (0x0080 - 0x0000)
struct WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D84[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASpectatorPawn*                         CallFunc_GetSpectatorPawn_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInComebackArena_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D85[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzSpectatorPawn*                       K2Node_DynamicCast_AsGz_Spectator_Pawn;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D86[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetSpectatedPawn_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D87[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface_1; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D88[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetViewTargetPlayerState_ReturnValue;     // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap) == 0x000008, "Wrong alignment on WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap");
static_assert(sizeof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap) == 0x000080, "Wrong size on WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, ReturnValue) == 0x000000, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, Temp_object_Variable) == 0x000008, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_GetSpectatorPawn_ReturnValue) == 0x000018, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_GetSpectatorPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_IsInComebackArena_ReturnValue) == 0x000020, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_IsInComebackArena_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_AsGz_Spectator_Pawn) == 0x000028, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_AsGz_Spectator_Pawn' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_GetSpectatedPawn_ReturnValue) == 0x000038, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_GetSpectatedPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_AsGz_Player_View_Target_Interface) == 0x000040, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_AsGz_Player_View_Target_Interface' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000058, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_AsGz_Player_View_Target_Interface_1) == 0x000060, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_AsGz_Player_View_Target_Interface_1' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap, CallFunc_GetViewTargetPlayerState_ReturnValue) == 0x000078, "Member 'WBP_Minimap_C_ShouldDisplaySpectatedPlayerMap::CallFunc_GetViewTargetPlayerState_ReturnValue' has a wrong offset!");

// Function WBP_Minimap.WBP_Minimap_C.UpdateMinimapVisibility
// 0x0010 (0x0010 - 0x0000)
struct WBP_Minimap_C_UpdateMinimapVisibility final
{
public:
	class APawn*                                  ViewTarget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldDisplayMap_bResult;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Minimap_C_UpdateMinimapVisibility) == 0x000008, "Wrong alignment on WBP_Minimap_C_UpdateMinimapVisibility");
static_assert(sizeof(WBP_Minimap_C_UpdateMinimapVisibility) == 0x000010, "Wrong size on WBP_Minimap_C_UpdateMinimapVisibility");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, ViewTarget) == 0x000000, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::ViewTarget' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, Temp_bool_Variable) == 0x000008, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, CallFunc_ShouldDisplayMap_bResult) == 0x000009, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::CallFunc_ShouldDisplayMap_bResult' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, Temp_byte_Variable) == 0x00000A, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, Temp_byte_Variable_1) == 0x00000B, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Minimap_C_UpdateMinimapVisibility, K2Node_Select_Default) == 0x00000C, "Member 'WBP_Minimap_C_UpdateMinimapVisibility::K2Node_Select_Default' has a wrong offset!");

}

