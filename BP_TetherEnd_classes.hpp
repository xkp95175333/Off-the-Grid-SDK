#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TetherEnd

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TetherEnd.BP_TetherEnd_C
// 0x00B0 (0x03D0 - 0x0320)
class ABP_TetherEnd_C final : public AGzTetherEnd
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       DamageSphereCollision;                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CartridgeMesh;                                     // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MovingToTarget_LerpValue_496F7A934FEAFFE2735E30BA70A4A20D; // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MovingToTarget__Direction_496F7A934FEAFFE2735E30BA70A4A20D; // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F58[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MovingToTarget;                                    // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedToTarget;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPos;                                         // 0x0350(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                SpawnPos;                                          // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMatRef;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_TetherEnd_C*                        OtherEnd;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnArrivedAtTargetLocation;                         // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInFlight;                                        // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F59[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ActiveColor;                                       // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F5A[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OtherEndLocation;                                  // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnDeath(bool HasDeathHitPoint, const struct FVector& DeathHitPoint);
	void CacheOtherEndLocation(class AActor* DestroyedActor);
	void DestroyWithParent(class AActor* DestroyedActor);
	void ExecuteUbergraph_BP_TetherEnd(int32 EntryPoint);
	void MovingToTarget__FinishedFunc();
	void MovingToTarget__UpdateFunc();
	void OnArrivedAtTargetLocation__DelegateSignature();
	void OnRep_OtherEnd();
	void PlayExplosionCue();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetOtherEndReference(class AGzTetherEnd* Param_OtherEnd);
	void SetupMaterial();
	void SpawnFX();
	void SpawnFXOnCLient();
	void SpawnOnDestroyedFX();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TetherEnd_C">();
	}
	static class ABP_TetherEnd_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TetherEnd_C>();
	}
};
static_assert(alignof(ABP_TetherEnd_C) == 0x000008, "Wrong alignment on ABP_TetherEnd_C");
static_assert(sizeof(ABP_TetherEnd_C) == 0x0003D0, "Wrong size on ABP_TetherEnd_C");
static_assert(offsetof(ABP_TetherEnd_C, UberGraphFrame) == 0x000320, "Member 'ABP_TetherEnd_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, DamageSphereCollision) == 0x000328, "Member 'ABP_TetherEnd_C::DamageSphereCollision' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, CartridgeMesh) == 0x000330, "Member 'ABP_TetherEnd_C::CartridgeMesh' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, MovingToTarget_LerpValue_496F7A934FEAFFE2735E30BA70A4A20D) == 0x000338, "Member 'ABP_TetherEnd_C::MovingToTarget_LerpValue_496F7A934FEAFFE2735E30BA70A4A20D' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, MovingToTarget__Direction_496F7A934FEAFFE2735E30BA70A4A20D) == 0x00033C, "Member 'ABP_TetherEnd_C::MovingToTarget__Direction_496F7A934FEAFFE2735E30BA70A4A20D' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, MovingToTarget) == 0x000340, "Member 'ABP_TetherEnd_C::MovingToTarget' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, SpeedToTarget) == 0x000348, "Member 'ABP_TetherEnd_C::SpeedToTarget' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, TargetPos) == 0x000350, "Member 'ABP_TetherEnd_C::TargetPos' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, SpawnPos) == 0x000368, "Member 'ABP_TetherEnd_C::SpawnPos' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, DynMatRef) == 0x000380, "Member 'ABP_TetherEnd_C::DynMatRef' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, OtherEnd) == 0x000388, "Member 'ABP_TetherEnd_C::OtherEnd' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, OnArrivedAtTargetLocation) == 0x000390, "Member 'ABP_TetherEnd_C::OnArrivedAtTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, IsInFlight) == 0x0003A0, "Member 'ABP_TetherEnd_C::IsInFlight' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, ActiveColor) == 0x0003A4, "Member 'ABP_TetherEnd_C::ActiveColor' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_C, OtherEndLocation) == 0x0003B8, "Member 'ABP_TetherEnd_C::OtherEndLocation' has a wrong offset!");

}

