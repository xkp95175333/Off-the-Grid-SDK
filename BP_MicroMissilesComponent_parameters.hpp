#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MicroMissilesComponent

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_0
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0 final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0");
static_assert(sizeof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0");
static_assert(offsetof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_1
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1 final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1");
static_assert(sizeof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1");
static_assert(offsetof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_2
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2 final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2");
static_assert(sizeof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2");
static_assert(offsetof(BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.ExecuteUbergraph_BP_MicroMissilesComponent
// 0x0070 (0x0070 - 0x0000)
struct BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AF3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent");
static_assert(sizeof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent) == 0x000070, "Wrong size on BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, EntryPoint) == 0x000000, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000028, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_CreateDelegate_OutputDelegate_3) == 0x000038, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_CreateDelegate_OutputDelegate_4) == 0x000050, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_DynamicCast_AsPawn) == 0x000060, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent, CallFunc_IsLocallyControlled_ReturnValue) == 0x000069, "Member 'BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnExpired
// 0x0140 (0x0140 - 0x0000)
struct BP_MicroMissilesComponent_C_LockOnExpired final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0120(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MicroMissilesComponent_C_LockOnExpired) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_LockOnExpired");
static_assert(sizeof(BP_MicroMissilesComponent_C_LockOnExpired) == 0x000140, "Wrong size on BP_MicroMissilesComponent_C_LockOnExpired");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnExpired, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_LockOnExpired::TargetData' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnExpired, Temp_delegate_Variable) == 0x000120, "Member 'BP_MicroMissilesComponent_C_LockOnExpired::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnExpired, CallFunc_GetOwner_ReturnValue) == 0x000130, "Member 'BP_MicroMissilesComponent_C_LockOnExpired::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnExpired, CallFunc_PostEvent_ReturnValue) == 0x000138, "Member 'BP_MicroMissilesComponent_C_LockOnExpired::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnFailed
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_LockOnFailed final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_LockOnFailed) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_LockOnFailed");
static_assert(sizeof(BP_MicroMissilesComponent_C_LockOnFailed) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_LockOnFailed");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnFailed, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_LockOnFailed::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnInterrupted
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_LockOnInterrupted final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_LockOnInterrupted) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_LockOnInterrupted");
static_assert(sizeof(BP_MicroMissilesComponent_C_LockOnInterrupted) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_LockOnInterrupted");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnInterrupted, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_LockOnInterrupted::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnStarted
// 0x0120 (0x0120 - 0x0000)
struct BP_MicroMissilesComponent_C_LockOnStarted final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MicroMissilesComponent_C_LockOnStarted) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_LockOnStarted");
static_assert(sizeof(BP_MicroMissilesComponent_C_LockOnStarted) == 0x000120, "Wrong size on BP_MicroMissilesComponent_C_LockOnStarted");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnStarted, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_LockOnStarted::TargetData' has a wrong offset!");

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnSuccess
// 0x0140 (0x0140 - 0x0000)
struct BP_MicroMissilesComponent_C_LockOnSuccess final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0120(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MicroMissilesComponent_C_LockOnSuccess) == 0x000008, "Wrong alignment on BP_MicroMissilesComponent_C_LockOnSuccess");
static_assert(sizeof(BP_MicroMissilesComponent_C_LockOnSuccess) == 0x000140, "Wrong size on BP_MicroMissilesComponent_C_LockOnSuccess");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnSuccess, TargetData) == 0x000000, "Member 'BP_MicroMissilesComponent_C_LockOnSuccess::TargetData' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnSuccess, Temp_delegate_Variable) == 0x000120, "Member 'BP_MicroMissilesComponent_C_LockOnSuccess::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnSuccess, CallFunc_GetOwner_ReturnValue) == 0x000130, "Member 'BP_MicroMissilesComponent_C_LockOnSuccess::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MicroMissilesComponent_C_LockOnSuccess, CallFunc_PostEvent_ReturnValue) == 0x000138, "Member 'BP_MicroMissilesComponent_C_LockOnSuccess::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

}

