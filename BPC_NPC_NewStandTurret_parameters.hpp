#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_NPC_NewStandTurret

#include "Basic.hpp"

#include "G01_structs.hpp"


namespace SDK::Params
{

// Function BPC_NPC_NewStandTurret.BPC_NPC_NewStandTurret_C.Play Mental State Sound
// 0x0018 (0x0018 - 0x0000)
struct BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound final
{
public:
	EGzMentalState                                MentalState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NPC_StandTurret_C*                  K2Node_DynamicCast_AsBP_NPC_Stand_Turret;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartSound_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartSound_ReturnValue_1;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartSound_ReturnValue_2;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound) == 0x000008, "Wrong alignment on BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound");
static_assert(sizeof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound) == 0x000018, "Wrong size on BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, MentalState) == 0x000000, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::MentalState' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, K2Node_DynamicCast_AsBP_NPC_Stand_Turret) == 0x000008, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::K2Node_DynamicCast_AsBP_NPC_Stand_Turret' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, CallFunc_StartSound_ReturnValue) == 0x000012, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::CallFunc_StartSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, CallFunc_StartSound_ReturnValue_1) == 0x000013, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::CallFunc_StartSound_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound, CallFunc_StartSound_ReturnValue_2) == 0x000014, "Member 'BPC_NPC_NewStandTurret_C_Play_Mental_State_Sound::CallFunc_StartSound_ReturnValue_2' has a wrong offset!");

// Function BPC_NPC_NewStandTurret.BPC_NPC_NewStandTurret_C.OnPossessedPawnChanged_Event
// 0x0010 (0x0010 - 0x0000)
struct BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event) == 0x000008, "Wrong alignment on BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event");
static_assert(sizeof(BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event) == 0x000010, "Wrong size on BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event, OldPawn) == 0x000000, "Member 'BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event::OldPawn' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event, NewPawn) == 0x000008, "Member 'BPC_NPC_NewStandTurret_C_OnPossessedPawnChanged_Event::NewPawn' has a wrong offset!");

// Function BPC_NPC_NewStandTurret.BPC_NPC_NewStandTurret_C.IsMentalStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BPC_NPC_NewStandTurret_C_IsMentalStateChanged final
{
public:
	EGzMentalState                                ChangedMentalState;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_NPC_NewStandTurret_C_IsMentalStateChanged) == 0x000001, "Wrong alignment on BPC_NPC_NewStandTurret_C_IsMentalStateChanged");
static_assert(sizeof(BPC_NPC_NewStandTurret_C_IsMentalStateChanged) == 0x000001, "Wrong size on BPC_NPC_NewStandTurret_C_IsMentalStateChanged");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_IsMentalStateChanged, ChangedMentalState) == 0x000000, "Member 'BPC_NPC_NewStandTurret_C_IsMentalStateChanged::ChangedMentalState' has a wrong offset!");

// Function BPC_NPC_NewStandTurret.BPC_NPC_NewStandTurret_C.ExecuteUbergraph_BPC_NPC_NewStandTurret
// 0x0040 (0x0040 - 0x0000)
struct BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_OldPawn;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_NewPawn;                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EGzMentalState ChangedMentalState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class APawn* OldPawn, class APawn* NewPawn)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzMentalState                                K2Node_CustomEvent_ChangedMentalState;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret) == 0x000008, "Wrong alignment on BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret");
static_assert(sizeof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret) == 0x000040, "Wrong size on BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, EntryPoint) == 0x000000, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_CustomEvent_OldPawn) == 0x000008, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_CustomEvent_OldPawn' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_CustomEvent_NewPawn) == 0x000010, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_CustomEvent_NewPawn' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret, K2Node_CustomEvent_ChangedMentalState) == 0x00003C, "Member 'BPC_NPC_NewStandTurret_C_ExecuteUbergraph_BPC_NPC_NewStandTurret::K2Node_CustomEvent_ChangedMentalState' has a wrong offset!");

// Function BPC_NPC_NewStandTurret.BPC_NPC_NewStandTurret_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BPC_NPC_NewStandTurret_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_NPC_NewStandTurret_C_ReceiveTick) == 0x000004, "Wrong alignment on BPC_NPC_NewStandTurret_C_ReceiveTick");
static_assert(sizeof(BPC_NPC_NewStandTurret_C_ReceiveTick) == 0x000004, "Wrong size on BPC_NPC_NewStandTurret_C_ReceiveTick");
static_assert(offsetof(BPC_NPC_NewStandTurret_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BPC_NPC_NewStandTurret_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

