#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TetherEnd_Preview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "G01_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TetherEnd_Preview.BP_TetherEnd_Preview_C
// 0x0060 (0x0300 - 0x02A0)
class ABP_TetherEnd_Preview_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_Limb_TetherArm_ScanGrid;                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LaserCylinder;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LaserParent;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SphereDynMatRef;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GridMaterial;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ValidColor;                                        // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InvalidColor;                                      // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LaserMaterial;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TetherEnd_Preview(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetupMaterials();
	void UpdateColors(bool IsValid);
	void UpdateLaserTransform(EGzLimbType Type);
	void UpdateSphere(bool IsValid, const struct FVector& Location, const struct FVector& Normal, EGzLimbType LimbType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TetherEnd_Preview_C">();
	}
	static class ABP_TetherEnd_Preview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TetherEnd_Preview_C>();
	}
};
static_assert(alignof(ABP_TetherEnd_Preview_C) == 0x000008, "Wrong alignment on ABP_TetherEnd_Preview_C");
static_assert(sizeof(ABP_TetherEnd_Preview_C) == 0x000300, "Wrong size on ABP_TetherEnd_Preview_C");
static_assert(offsetof(ABP_TetherEnd_Preview_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_TetherEnd_Preview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, NS_Limb_TetherArm_ScanGrid) == 0x0002A8, "Member 'ABP_TetherEnd_Preview_C::NS_Limb_TetherArm_ScanGrid' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, LaserCylinder) == 0x0002B0, "Member 'ABP_TetherEnd_Preview_C::LaserCylinder' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, LaserParent) == 0x0002B8, "Member 'ABP_TetherEnd_Preview_C::LaserParent' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_TetherEnd_Preview_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, SphereDynMatRef) == 0x0002C8, "Member 'ABP_TetherEnd_Preview_C::SphereDynMatRef' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, GridMaterial) == 0x0002D0, "Member 'ABP_TetherEnd_Preview_C::GridMaterial' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, ValidColor) == 0x0002D8, "Member 'ABP_TetherEnd_Preview_C::ValidColor' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, InvalidColor) == 0x0002E8, "Member 'ABP_TetherEnd_Preview_C::InvalidColor' has a wrong offset!");
static_assert(offsetof(ABP_TetherEnd_Preview_C, LaserMaterial) == 0x0002F8, "Member 'ABP_TetherEnd_Preview_C::LaserMaterial' has a wrong offset!");

}

