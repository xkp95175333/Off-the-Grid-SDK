#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_TetherArm_Base_R

#include "Basic.hpp"

#include "ABP_CLA_TetherArm_Base_R_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ControlRig_structs.hpp"
#include "E_TetherLimbState_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C
// 0x0B90 (0x0F00 - 0x0370)
class UABP_CLA_TetherArm_Base_R_C final : public UAnimInstance
{
public:
	uint8                                         Pad_6F6D[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_CLA_TetherArm_Base_R::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0390(0x0020)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x03B0(0x0158)(ContainsInstancedReference)
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x0508(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x09D8(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A20(0x00F0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0B10(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0B58(0x0070)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0BC8(0x00F0)()
	struct FAnimNode_PoseDriver                   AnimGraphNode_PoseDriver;                          // 0x0CB8(0x01A0)()
	class AGzMultiPartCharacter*                  MultiPartCharacterOwner;                           // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Owner_Mesh;                                        // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGA_Tether_C*                           TetherAbilityReference;                            // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BlendReloadAngle;                                  // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TetherLimbState                             AbilityState;                                      // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEnoughEnergyForReload;                          // 0x0E79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F6E[0x6];                                     // 0x0E7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           IdleToActivationToAim;                             // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AimToDeactivationToIdle;                           // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Fire1ToAim2;                                       // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Aim2ToFire2ToReloadToIdle;                         // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Fire2ToIdle;                                       // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ReloadToIdle;                                      // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cartridge_B_BoneName;                              // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cartridge_A_BoneName;                              // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGA_SpiderMine_C*                       As_GA_Spider_Mine;                                 // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Mat_count;                                         // 0x0EC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LOD_count;                                         // 0x0ED8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_TetherLimbState                             CachedState;                                       // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAiming;                                           // 0x0EE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F6F[0x6];                                     // 0x0EEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimerHandle>                   Async_Tasks;                                       // 0x0EF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_HideCartridges();
	void AnimNotify_ShowCartridges();
	void BlueprintInitializeAnimation();
	void ClearTimers();
	void DisableAimAfter1Shoot();
	void EnabledAimAfter2Shoot();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R_AnimGraphNode_LayeredBoneBlend_CE41977946565B5110A5F5977A96DC4B();
	void ExecuteUbergraph_ABP_CLA_TetherArm_Base_R(int32 EntryPoint);
	void GetCachedAbilityReference(class UGA_SpiderMine_C** TetherAbility);
	double GetCurrentReloadAngle(double MaxAllowedReloadAngle);
	void OnTagAdded_97B05C654C386D12957811859AF1EDC1(const struct FGameplayTag& Tag);
	void OnTagAdded_B0C6569149E07DA36B77768CFE2194E9(const struct FGameplayTag& Tag);
	void OnTagRemoved_97B05C654C386D12957811859AF1EDC1(const struct FGameplayTag& Tag);
	void OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9(const struct FGameplayTag& Tag);
	void UnHideMaterialSlots(TArray<int32>& LODs, TArray<int32>& Materials);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CLA_TetherArm_Base_R_C">();
	}
	static class UABP_CLA_TetherArm_Base_R_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CLA_TetherArm_Base_R_C>();
	}
};
static_assert(alignof(UABP_CLA_TetherArm_Base_R_C) == 0x000010, "Wrong alignment on UABP_CLA_TetherArm_Base_R_C");
static_assert(sizeof(UABP_CLA_TetherArm_Base_R_C) == 0x000F00, "Wrong size on UABP_CLA_TetherArm_Base_R_C");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, UberGraphFrame) == 0x000370, "Member 'UABP_CLA_TetherArm_Base_R_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_CLA_TetherArm_Base_R_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_Root) == 0x000390, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_CopyPoseFromMesh) == 0x0003B0, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_ControlRig) == 0x000508, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_Slot) == 0x0009D8, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A20, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_SequencePlayer) == 0x000B10, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_BlendSpacePlayer) == 0x000B58, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_LayeredBoneBlend) == 0x000BC8, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AnimGraphNode_PoseDriver) == 0x000CB8, "Member 'UABP_CLA_TetherArm_Base_R_C::AnimGraphNode_PoseDriver' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, MultiPartCharacterOwner) == 0x000E58, "Member 'UABP_CLA_TetherArm_Base_R_C::MultiPartCharacterOwner' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Owner_Mesh) == 0x000E60, "Member 'UABP_CLA_TetherArm_Base_R_C::Owner_Mesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, TetherAbilityReference) == 0x000E68, "Member 'UABP_CLA_TetherArm_Base_R_C::TetherAbilityReference' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, BlendReloadAngle) == 0x000E70, "Member 'UABP_CLA_TetherArm_Base_R_C::BlendReloadAngle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AbilityState) == 0x000E78, "Member 'UABP_CLA_TetherArm_Base_R_C::AbilityState' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, HasEnoughEnergyForReload) == 0x000E79, "Member 'UABP_CLA_TetherArm_Base_R_C::HasEnoughEnergyForReload' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, IdleToActivationToAim) == 0x000E80, "Member 'UABP_CLA_TetherArm_Base_R_C::IdleToActivationToAim' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, AimToDeactivationToIdle) == 0x000E88, "Member 'UABP_CLA_TetherArm_Base_R_C::AimToDeactivationToIdle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Fire1ToAim2) == 0x000E90, "Member 'UABP_CLA_TetherArm_Base_R_C::Fire1ToAim2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Aim2ToFire2ToReloadToIdle) == 0x000E98, "Member 'UABP_CLA_TetherArm_Base_R_C::Aim2ToFire2ToReloadToIdle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Fire2ToIdle) == 0x000EA0, "Member 'UABP_CLA_TetherArm_Base_R_C::Fire2ToIdle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, ReloadToIdle) == 0x000EA8, "Member 'UABP_CLA_TetherArm_Base_R_C::ReloadToIdle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Cartridge_B_BoneName) == 0x000EB0, "Member 'UABP_CLA_TetherArm_Base_R_C::Cartridge_B_BoneName' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Cartridge_A_BoneName) == 0x000EB8, "Member 'UABP_CLA_TetherArm_Base_R_C::Cartridge_A_BoneName' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, As_GA_Spider_Mine) == 0x000EC0, "Member 'UABP_CLA_TetherArm_Base_R_C::As_GA_Spider_Mine' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Mat_count) == 0x000EC8, "Member 'UABP_CLA_TetherArm_Base_R_C::Mat_count' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, LOD_count) == 0x000ED8, "Member 'UABP_CLA_TetherArm_Base_R_C::LOD_count' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, CachedState) == 0x000EE8, "Member 'UABP_CLA_TetherArm_Base_R_C::CachedState' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, bAiming) == 0x000EE9, "Member 'UABP_CLA_TetherArm_Base_R_C::bAiming' has a wrong offset!");
static_assert(offsetof(UABP_CLA_TetherArm_Base_R_C, Async_Tasks) == 0x000EF0, "Member 'UABP_CLA_TetherArm_Base_R_C::Async_Tasks' has a wrong offset!");

}

