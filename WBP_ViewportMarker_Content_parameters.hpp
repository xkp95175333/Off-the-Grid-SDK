#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ViewportMarker_Content

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_PingContent_structs.hpp"
#include "E_MarkerPingPadding_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.AdjustMissionMarker
// 0x0028 (0x0028 - 0x0000)
struct WBP_ViewportMarker_Content_C_AdjustMissionMarker final
{
public:
	bool                                          IsSpecial;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_628B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_AdjustMissionMarker) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_AdjustMissionMarker");
static_assert(sizeof(WBP_ViewportMarker_Content_C_AdjustMissionMarker) == 0x000028, "Wrong size on WBP_ViewportMarker_Content_C_AdjustMissionMarker");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, IsSpecial) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::IsSpecial' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_bool_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_byte_Variable) == 0x000002, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_object_Variable) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, Temp_object_Variable_1) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, K2Node_Select_Default) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_AdjustMissionMarker, K2Node_Select_Default_1) == 0x000020, "Member 'WBP_ViewportMarker_Content_C_AdjustMissionMarker::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.ChangePingSize
// 0x0038 (0x0038 - 0x0000)
struct WBP_ViewportMarker_Content_C_ChangePingSize final
{
public:
	E_MarkerPingPadding                           Param_PingSize;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_628C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_628D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_628E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Top_ImplicitCast;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_ChangePingSize) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_ChangePingSize");
static_assert(sizeof(WBP_ViewportMarker_Content_C_ChangePingSize) == 0x000038, "Wrong size on WBP_ViewportMarker_Content_C_ChangePingSize");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, Param_PingSize) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::Param_PingSize' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, CallFunc_Map_Find_Value) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, K2Node_MakeStruct_Margin) == 0x000014, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ChangePingSize, K2Node_MakeStruct_Top_ImplicitCast) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_ChangePingSize::K2Node_MakeStruct_Top_ImplicitCast' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.CheckDisagree
// 0x0020 (0x0020 - 0x0000)
struct WBP_ViewportMarker_Content_C_CheckDisagree final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Agree;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_628F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_CheckDisagree) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_CheckDisagree");
static_assert(sizeof(WBP_ViewportMarker_Content_C_CheckDisagree) == 0x000020, "Wrong size on WBP_ViewportMarker_Content_C_CheckDisagree");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckDisagree, PlayerState) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_CheckDisagree::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckDisagree, Agree) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_CheckDisagree::Agree' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckDisagree, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_CheckDisagree::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckDisagree, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_CheckDisagree::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.CheckOffScreen
// 0x0048 (0x0048 - 0x0000)
struct WBP_ViewportMarker_Content_C_CheckOffScreen final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTagContainer                  Ta;                                                // 0x0020(0x0020)(Edit, BlueprintVisible)
	bool                                          CallFunc_HasAnyTags_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_CheckOffScreen) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_CheckOffScreen");
static_assert(sizeof(WBP_ViewportMarker_Content_C_CheckOffScreen) == 0x000048, "Wrong size on WBP_ViewportMarker_Content_C_CheckOffScreen");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckOffScreen, TagContainer) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_CheckOffScreen::TagContainer' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckOffScreen, Ta) == 0x000020, "Member 'WBP_ViewportMarker_Content_C_CheckOffScreen::Ta' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_CheckOffScreen, CallFunc_HasAnyTags_ReturnValue) == 0x000040, "Member 'WBP_ViewportMarker_Content_C_CheckOffScreen::CallFunc_HasAnyTags_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.ExecuteUbergraph_WBP_ViewportMarker_Content
// 0x0270 (0x0270 - 0x0000)
struct WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6290[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            Temp_struct_Variable;                              // 0x0008(0x0060)(ConstParm, HasGetValueTypeHash)
	TDelegate<void(bool bIsOffScreen)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0068(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsOffScreen;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6291[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            K2Node_CustomEvent_PingData_1;                     // 0x0088(0x0060)(ConstParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAgree;                         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6292[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzMarkerComponent*                     K2Node_CustomEvent_MarkerComponent_1;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            K2Node_CustomEvent_PingData;                       // 0x00F8(0x0060)(ConstParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsFocused;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6293[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsFocused)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x015C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6294[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzMarkerComponent*                     K2Node_CustomEvent_MarkerComponent;                // 0x0170(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  K2Node_CustomEvent_States;                         // 0x0178(0x0020)(ConstParm)
	TDelegate<void(class UGzMarkerComponent* MarkerComponent, struct FGameplayTagContainer& States)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0198(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x01A8(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetArrowRotationAngle_ReturnValue;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AGzPlayerState* PlayerState, struct FGzPingData& PingData, bool bAgree)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x01E8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UGzMarkerComponent* MarkerComponent, struct FGzPingData& PingData)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x01F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6295[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGzMarkerComponent* MarkerComponent, struct FGzPingData& PingData)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x020C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AGzPlayerState* PlayerState, struct FGzPingData& PingData, bool bAgree)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x021C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsFocused)>              K2Node_CreateDelegate_OutputDelegate_7;            // 0x022C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UGzMarkerComponent* MarkerComponent, struct FGameplayTagContainer& States)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x023C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsOffScreen)>            K2Node_CreateDelegate_OutputDelegate_9;            // 0x024C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6296[0x2];                                     // 0x025E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceToTarget_ReturnValue;          // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6297[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateDistance_Distance_ImplicitCast;     // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content");
static_assert(sizeof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content) == 0x000270, "Wrong size on WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, EntryPoint) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, Temp_struct_Variable) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate) == 0x000068, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_bIsOffScreen) == 0x000078, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_bIsOffScreen' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_Event_IsDesignTime) == 0x000079, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_PlayerState) == 0x000080, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_PingData_1) == 0x000088, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_PingData_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_bAgree) == 0x0000E8, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_bAgree' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_MarkerComponent_1) == 0x0000F0, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_MarkerComponent_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_PingData) == 0x0000F8, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_PingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_bIsFocused) == 0x000158, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_bIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_1) == 0x00015C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_MarkerComponent) == 0x000170, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CustomEvent_States) == 0x000178, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CustomEvent_States' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_2) == 0x000198, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_Event_MyGeometry) == 0x0001A8, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_Event_InDeltaTime) == 0x0001E0, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_GetArrowRotationAngle_ReturnValue) == 0x0001E4, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_GetArrowRotationAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_3) == 0x0001E8, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001F8, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_IsValid_ReturnValue_2) == 0x000208, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_5) == 0x00020C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_6) == 0x00021C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_7) == 0x00022C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_8) == 0x00023C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, K2Node_CreateDelegate_OutputDelegate_9) == 0x00024C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_IsValid_ReturnValue_3) == 0x00025C, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_IsValid_ReturnValue_4) == 0x00025D, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_GetDistanceToTarget_ReturnValue) == 0x000260, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_GetDistanceToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content, CallFunc_UpdateDistance_Distance_ImplicitCast) == 0x000268, "Member 'WBP_ViewportMarker_Content_C_ExecuteUbergraph_WBP_ViewportMarker_Content::CallFunc_UpdateDistance_Distance_ImplicitCast' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.GetIndexInTeam
// 0x0048 (0x0048 - 0x0000)
struct WBP_ViewportMarker_Content_C_GetIndexInTeam final
{
public:
	class AGzTeam*                                Team;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OutputPin;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6298[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGzTeamMember>                  CallFunc_GetTeamMembers_ReturnValue;               // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGzTeamMember                          CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6299[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_GetIndexInTeam) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_GetIndexInTeam");
static_assert(sizeof(WBP_ViewportMarker_Content_C_GetIndexInTeam) == 0x000048, "Wrong size on WBP_ViewportMarker_Content_C_GetIndexInTeam");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, Team) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::Team' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, PlayerState) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, OutputPin) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_GetTeamMembers_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetIndexInTeam, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'WBP_ViewportMarker_Content_C_GetIndexInTeam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.GetPositiveNegativePrompt
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt final
{
public:
	struct FGzPingData                            GzPingData;                                        // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class FText                                   Ping_Prompts_Cancel;                               // 0x0060(0x0010)(Parm, OutParm)
	class FText                                   Positive;                                          // 0x0070(0x0010)(Parm, OutParm)
	class FText                                   Negative;                                          // 0x0080(0x0010)(Parm, OutParm)
	EGzPingTarget                                 Temp_byte_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0098(0x0010)(ConstParm)
	EGzPingTarget                                 Temp_byte_Variable_1;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629C[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x00B0(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default;                             // 0x00C0(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default_1;                           // 0x00D0(0x0010)(ConstParm)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt");
static_assert(sizeof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt) == 0x0000E0, "Wrong size on WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, GzPingData) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::GzPingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Ping_Prompts_Cancel) == 0x000060, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Ping_Prompts_Cancel' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Positive) == 0x000070, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Positive' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Negative) == 0x000080, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Negative' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Temp_byte_Variable) == 0x000090, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Temp_text_Variable) == 0x000098, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Temp_byte_Variable_1) == 0x0000A8, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, Temp_text_Variable_1) == 0x0000B0, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, K2Node_Select_Default) == 0x0000C0, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt, K2Node_Select_Default_1) == 0x0000D0, "Member 'WBP_ViewportMarker_Content_C_GetPositiveNegativePrompt::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.HighlightState
// 0x0048 (0x0048 - 0x0000)
struct WBP_ViewportMarker_Content_C_HighlightState final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_HighlightState) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_HighlightState");
static_assert(sizeof(WBP_ViewportMarker_Content_C_HighlightState) == 0x000048, "Wrong size on WBP_ViewportMarker_Content_C_HighlightState");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, TagContainer) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_HighlightState::TagContainer' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, CallFunc_HasTag_ReturnValue) == 0x000020, "Member 'WBP_ViewportMarker_Content_C_HighlightState::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_HighlightState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, CallFunc_SelectColor_ReturnValue) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_HighlightState::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000040, "Member 'WBP_ViewportMarker_Content_C_HighlightState::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_HighlightState, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000041, "Member 'WBP_ViewportMarker_Content_C_HighlightState::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.InitViewportMarker
// 0x0010 (0x0010 - 0x0000)
struct WBP_ViewportMarker_Content_C_InitViewportMarker final
{
public:
	class UGzMarkerComponent*                     Param_MarkerComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzViewportMarkerWidget*                Parent;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_InitViewportMarker) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_InitViewportMarker");
static_assert(sizeof(WBP_ViewportMarker_Content_C_InitViewportMarker) == 0x000010, "Wrong size on WBP_ViewportMarker_Content_C_InitViewportMarker");
static_assert(offsetof(WBP_ViewportMarker_Content_C_InitViewportMarker, Param_MarkerComponent) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_InitViewportMarker::Param_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_InitViewportMarker, Parent) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_InitViewportMarker::Parent' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.OnMarkerStatesChanged
// 0x0028 (0x0028 - 0x0000)
struct WBP_ViewportMarker_Content_C_OnMarkerStatesChanged final
{
public:
	class UGzMarkerComponent*                     Param_MarkerComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  States;                                            // 0x0008(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_OnMarkerStatesChanged) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_OnMarkerStatesChanged");
static_assert(sizeof(WBP_ViewportMarker_Content_C_OnMarkerStatesChanged) == 0x000028, "Wrong size on WBP_ViewportMarker_Content_C_OnMarkerStatesChanged");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnMarkerStatesChanged, Param_MarkerComponent) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_OnMarkerStatesChanged::Param_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnMarkerStatesChanged, States) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_OnMarkerStatesChanged::States' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.OnOffScreen
// 0x0001 (0x0001 - 0x0000)
struct WBP_ViewportMarker_Content_C_OnOffScreen final
{
public:
	bool                                          bIsOffScreen;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_OnOffScreen) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_OnOffScreen");
static_assert(sizeof(WBP_ViewportMarker_Content_C_OnOffScreen) == 0x000001, "Wrong size on WBP_ViewportMarker_Content_C_OnOffScreen");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnOffScreen, bIsOffScreen) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_OnOffScreen::bIsOffScreen' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.OnPingAgreementChanged
// 0x0070 (0x0070 - 0x0000)
struct WBP_ViewportMarker_Content_C_OnPingAgreementChanged final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            PingData;                                          // 0x0008(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bAgree;                                            // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_OnPingAgreementChanged) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_OnPingAgreementChanged");
static_assert(sizeof(WBP_ViewportMarker_Content_C_OnPingAgreementChanged) == 0x000070, "Wrong size on WBP_ViewportMarker_Content_C_OnPingAgreementChanged");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnPingAgreementChanged, PlayerState) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_OnPingAgreementChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnPingAgreementChanged, PingData) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_OnPingAgreementChanged::PingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnPingAgreementChanged, bAgree) == 0x000068, "Member 'WBP_ViewportMarker_Content_C_OnPingAgreementChanged::bAgree' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.OnPlayerMarkerFocusChanged_Event
// 0x0001 (0x0001 - 0x0000)
struct WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event");
static_assert(sizeof(WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event) == 0x000001, "Wrong size on WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event");
static_assert(offsetof(WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event, bIsFocused) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_OnPlayerMarkerFocusChanged_Event::bIsFocused' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_ViewportMarker_Content_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_PreConstruct");
static_assert(sizeof(WBP_ViewportMarker_Content_C_PreConstruct) == 0x000001, "Wrong size on WBP_ViewportMarker_Content_C_PreConstruct");
static_assert(offsetof(WBP_ViewportMarker_Content_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.SetArrowRotation
// 0x0004 (0x0004 - 0x0000)
struct WBP_ViewportMarker_Content_C_SetArrowRotation final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_SetArrowRotation) == 0x000004, "Wrong alignment on WBP_ViewportMarker_Content_C_SetArrowRotation");
static_assert(sizeof(WBP_ViewportMarker_Content_C_SetArrowRotation) == 0x000004, "Wrong size on WBP_ViewportMarker_Content_C_SetArrowRotation");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowRotation, Angle) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_SetArrowRotation::Angle' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.SetArrowVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_ViewportMarker_Content_C_SetArrowVisibility final
{
public:
	bool                                          Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_SetArrowVisibility) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_SetArrowVisibility");
static_assert(sizeof(WBP_ViewportMarker_Content_C_SetArrowVisibility) == 0x000005, "Wrong size on WBP_ViewportMarker_Content_C_SetArrowVisibility");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowVisibility, Param_Index) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_SetArrowVisibility::Param_Index' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Content_C_SetArrowVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_ViewportMarker_Content_C_SetArrowVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ViewportMarker_Content_C_SetArrowVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetArrowVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_ViewportMarker_Content_C_SetArrowVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.SetPingIcon
// 0x0158 (0x0158 - 0x0000)
struct WBP_ViewportMarker_Content_C_SetPingIcon final
{
public:
	struct FS_PingContent                         PingContentRef;                                    // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FS_PingContent                         NewLocalVar;                                       // 0x0060(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1; // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629E[0x5];                                     // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x00C8(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629F[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzTeam*                                CallFunc_GetTeamFromPlayer_ReturnValue;            // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A0[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIndexInTeam_OutputPin;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A1[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetTeammateColorFromIndex_OutPlayerColor; // 0x0144(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_SetPingIcon) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_SetPingIcon");
static_assert(sizeof(WBP_ViewportMarker_Content_C_SetPingIcon) == 0x000158, "Wrong size on WBP_ViewportMarker_Content_C_SetPingIcon");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, PingContentRef) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::PingContentRef' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, NewLocalVar) == 0x000060, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue) == 0x0000C0, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1) == 0x0000C1, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_BooleanOR_ReturnValue) == 0x0000C2, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_GetPingData_ReturnValue) == 0x0000C8, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_IsValid_ReturnValue) == 0x000128, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_GetTeamFromPlayer_ReturnValue) == 0x000130, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_GetTeamFromPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_IsValid_ReturnValue_1) == 0x000138, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_GetIndexInTeam_OutputPin) == 0x00013C, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_GetIndexInTeam_OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_BooleanAND_ReturnValue) == 0x000140, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPingIcon, CallFunc_GetTeammateColorFromIndex_OutPlayerColor) == 0x000144, "Member 'WBP_ViewportMarker_Content_C_SetPingIcon::CallFunc_GetTeammateColorFromIndex_OutPlayerColor' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.SetProgress
// 0x0020 (0x0020 - 0x0000)
struct WBP_ViewportMarker_Content_C_SetProgress final
{
public:
	float                                         Percent__0Minus1_;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAnimationCurrentTime_InTime_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_SetProgress) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_SetProgress");
static_assert(sizeof(WBP_ViewportMarker_Content_C_SetProgress) == 0x000020, "Wrong size on WBP_ViewportMarker_Content_C_SetProgress");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetProgress, Percent__0Minus1_) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_SetProgress::Percent__0Minus1_' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetProgress, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_SetProgress::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetProgress, CallFunc_FClamp_Value_ImplicitCast) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_SetProgress::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetProgress, CallFunc_SetAnimationCurrentTime_InTime_ImplicitCast) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_SetProgress::CallFunc_SetAnimationCurrentTime_InTime_ImplicitCast' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.SetPromptVisibility
// 0x0018 (0x0018 - 0x0000)
struct WBP_ViewportMarker_Content_C_SetPromptVisibility final
{
public:
	bool                                          IsInFocus;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzMarkerComponent*                     Param_MarkerComponent;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPingable_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_SetPromptVisibility) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_SetPromptVisibility");
static_assert(sizeof(WBP_ViewportMarker_Content_C_SetPromptVisibility) == 0x000018, "Wrong size on WBP_ViewportMarker_Content_C_SetPromptVisibility");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, IsInFocus) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::IsInFocus' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, Param_MarkerComponent) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::Param_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, Temp_bool_Variable) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, CallFunc_IsPingable_ReturnValue) == 0x000011, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::CallFunc_IsPingable_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, Temp_byte_Variable) == 0x000013, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, Temp_byte_Variable_1) == 0x000014, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_SetPromptVisibility, K2Node_Select_Default) == 0x000015, "Member 'WBP_ViewportMarker_Content_C_SetPromptVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.ShowProgress
// 0x0040 (0x0040 - 0x0000)
struct WBP_ViewportMarker_Content_C_ShowProgress final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dashed;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A4[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                DistanceSmallPadding;                              // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DistanceBigPadding;                                // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A5[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           Temp_byte_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           Temp_byte_Variable_1;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           K2Node_Select_Default_1;                           // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A6[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_ShowProgress) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_ShowProgress");
static_assert(sizeof(WBP_ViewportMarker_Content_C_ShowProgress) == 0x000040, "Wrong size on WBP_ViewportMarker_Content_C_ShowProgress");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Show) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Show' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Dashed) == 0x000001, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Dashed' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, DistanceSmallPadding) == 0x000004, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::DistanceSmallPadding' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, DistanceBigPadding) == 0x000014, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::DistanceBigPadding' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_bool_Variable) == 0x000024, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, CallFunc_SelectInt_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_byte_Variable) == 0x00002C, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_byte_Variable_1) == 0x00002D, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_bool_Variable_1) == 0x00002E, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_byte_Variable_2) == 0x00002F, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, Temp_byte_Variable_3) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, K2Node_Select_Default) == 0x000031, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000032, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, K2Node_Select_Default_1) == 0x000033, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_ShowProgress, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'WBP_ViewportMarker_Content_C_ShowProgress::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_ViewportMarker_Content_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_Tick) == 0x000004, "Wrong alignment on WBP_ViewportMarker_Content_C_Tick");
static_assert(sizeof(WBP_ViewportMarker_Content_C_Tick) == 0x00003C, "Wrong size on WBP_ViewportMarker_Content_C_Tick");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_ViewportMarker_Content_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.Toggle Distance View
// 0x0005 (0x0005 - 0x0000)
struct WBP_ViewportMarker_Content_C_Toggle_Distance_View final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_Toggle_Distance_View) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_Toggle_Distance_View");
static_assert(sizeof(WBP_ViewportMarker_Content_C_Toggle_Distance_View) == 0x000005, "Wrong size on WBP_ViewportMarker_Content_C_Toggle_Distance_View");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Toggle_Distance_View, Show) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_Toggle_Distance_View::Show' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Toggle_Distance_View, Temp_bool_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Content_C_Toggle_Distance_View::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Toggle_Distance_View, Temp_byte_Variable) == 0x000002, "Member 'WBP_ViewportMarker_Content_C_Toggle_Distance_View::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Toggle_Distance_View, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ViewportMarker_Content_C_Toggle_Distance_View::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_Toggle_Distance_View, K2Node_Select_Default) == 0x000004, "Member 'WBP_ViewportMarker_Content_C_Toggle_Distance_View::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.UpdateDistance
// 0x0090 (0x0090 - 0x0000)
struct WBP_ViewportMarker_Content_C_UpdateDistance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0010)()
};
static_assert(alignof(WBP_ViewportMarker_Content_C_UpdateDistance) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_UpdateDistance");
static_assert(sizeof(WBP_ViewportMarker_Content_C_UpdateDistance) == 0x000090, "Wrong size on WBP_ViewportMarker_Content_C_UpdateDistance");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, Distance) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::Distance' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, CallFunc_FTrunc_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, K2Node_MakeArray_Array) == 0x000070, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdateDistance, CallFunc_Format_ReturnValue) == 0x000080, "Member 'WBP_ViewportMarker_Content_C_UpdateDistance::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.UpdatePingState
// 0x0068 (0x0068 - 0x0000)
struct WBP_ViewportMarker_Content_C_UpdatePingState final
{
public:
	class UGzMarkerComponent*                     Param_MarkerComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            PingData;                                          // 0x0008(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_UpdatePingState) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_UpdatePingState");
static_assert(sizeof(WBP_ViewportMarker_Content_C_UpdatePingState) == 0x000068, "Wrong size on WBP_ViewportMarker_Content_C_UpdatePingState");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePingState, Param_MarkerComponent) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_UpdatePingState::Param_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePingState, PingData) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_UpdatePingState::PingData' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.UpdatePromptText
// 0x0118 (0x0118 - 0x0000)
struct WBP_ViewportMarker_Content_C_UpdatePromptText final
{
public:
	class UGzMarkerComponent*                     Param_MarkerComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   CancelPrompt;                                      // 0x0008(0x0010)(Edit, BlueprintVisible)
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A8[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0030(0x0060)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A9[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel; // 0x0098(0x0010)()
	class FText                                   CallFunc_GetPositiveNegativePrompt_Positive;       // 0x00A8(0x0010)()
	class FText                                   CallFunc_GetPositiveNegativePrompt_Negative;       // 0x00B8(0x0010)()
	bool                                          Temp_bool_Variable_1;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62AA[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62AB[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00E8(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default_1;                           // 0x00F8(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default_2;                           // 0x0108(0x0010)()
};
static_assert(alignof(WBP_ViewportMarker_Content_C_UpdatePromptText) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_UpdatePromptText");
static_assert(sizeof(WBP_ViewportMarker_Content_C_UpdatePromptText) == 0x000118, "Wrong size on WBP_ViewportMarker_Content_C_UpdatePromptText");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, Param_MarkerComponent) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::Param_MarkerComponent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CancelPrompt) == 0x000008, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CancelPrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, Temp_text_Variable) == 0x000018, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetPingData_ReturnValue) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, Temp_bool_Variable) == 0x000090, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel) == 0x000098, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Positive) == 0x0000A8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Positive' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Negative) == 0x0000B8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Negative' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, Temp_bool_Variable_1) == 0x0000C8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_IsValid_ReturnValue_1) == 0x0000C9, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_Not_PreBool_ReturnValue) == 0x0000CA, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, Temp_bool_Variable_2) == 0x0000CB, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x0000D0, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x0000D8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_Array_Contains_ReturnValue) == 0x0000E0, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E1, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, K2Node_Select_Default) == 0x0000E8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, K2Node_Select_Default_1) == 0x0000F8, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_UpdatePromptText, K2Node_Select_Default_2) == 0x000108, "Member 'WBP_ViewportMarker_Content_C_UpdatePromptText::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.VisualizeDesigner
// 0x0004 (0x0004 - 0x0000)
struct WBP_ViewportMarker_Content_C_VisualizeDesigner final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_VisualizeDesigner) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Content_C_VisualizeDesigner");
static_assert(sizeof(WBP_ViewportMarker_Content_C_VisualizeDesigner) == 0x000004, "Wrong size on WBP_ViewportMarker_Content_C_VisualizeDesigner");
static_assert(offsetof(WBP_ViewportMarker_Content_C_VisualizeDesigner, Temp_bool_Variable) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_VisualizeDesigner::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_VisualizeDesigner, Temp_byte_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Content_C_VisualizeDesigner::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_VisualizeDesigner, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_ViewportMarker_Content_C_VisualizeDesigner::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_VisualizeDesigner, K2Node_Select_Default) == 0x000003, "Member 'WBP_ViewportMarker_Content_C_VisualizeDesigner::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ViewportMarker_Content.WBP_ViewportMarker_Content_C.WarningState
// 0x0038 (0x0038 - 0x0000)
struct WBP_ViewportMarker_Content_C_WarningState final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62AC[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Content_C_WarningState) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Content_C_WarningState");
static_assert(sizeof(WBP_ViewportMarker_Content_C_WarningState) == 0x000038, "Wrong size on WBP_ViewportMarker_Content_C_WarningState");
static_assert(offsetof(WBP_ViewportMarker_Content_C_WarningState, TagContainer) == 0x000000, "Member 'WBP_ViewportMarker_Content_C_WarningState::TagContainer' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_WarningState, CallFunc_HasTag_ReturnValue) == 0x000020, "Member 'WBP_ViewportMarker_Content_C_WarningState::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_WarningState, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000021, "Member 'WBP_ViewportMarker_Content_C_WarningState::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_WarningState, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Content_C_WarningState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Content_C_WarningState, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000030, "Member 'WBP_ViewportMarker_Content_C_WarningState::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");

}

