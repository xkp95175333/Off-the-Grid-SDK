#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VirtualCamera

#include "Basic.hpp"

#include "VirtualCamera_classes.hpp"
#include "VirtualCamera_parameters.hpp"


namespace SDK
{

// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.GetAllAssetsByMetaDataTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSet<class FName>                       RequiredTags                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSet<class UClass*>                     AllowedClasses                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UAssetFilteringAndSortingFunctionLibrary::GetAllAssetsByMetaDataTags(const TSet<class FName>& RequiredTags, const TSet<class UClass*>& AllowedClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetFilteringAndSortingFunctionLibrary", "GetAllAssetsByMetaDataTags");

	Params::AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags Parms{};

	Parms.RequiredTags = std::move(RequiredTags);
	Parms.AllowedClasses = std::move(AllowedClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByAssetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               Assets                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ESortOrder                              SortOrder                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAssetFilteringAndSortingFunctionLibrary::SortByAssetName(TArray<struct FAssetData>& Assets, ESortOrder SortOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetFilteringAndSortingFunctionLibrary", "SortByAssetName");

	Params::AssetFilteringAndSortingFunctionLibrary_SortByAssetName Parms{};

	Parms.Assets = std::move(Assets);
	Parms.SortOrder = SortOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Assets = std::move(Parms.Assets);
}


// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByCustomPredicate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               Assets                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FAssetData& Left, struct FAssetData& Right)>SortingPredicate                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortOrder                              SortOrder                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAssetFilteringAndSortingFunctionLibrary::SortByCustomPredicate(TArray<struct FAssetData>& Assets, TDelegate<void(struct FAssetData& Left, struct FAssetData& Right)> SortingPredicate, ESortOrder SortOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetFilteringAndSortingFunctionLibrary", "SortByCustomPredicate");

	Params::AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate Parms{};

	Parms.Assets = std::move(Assets);
	Parms.SortingPredicate = SortingPredicate;
	Parms.SortOrder = SortOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Assets = std::move(Parms.Assets);
}


// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByMetaData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               Assets                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             MetaDataTag                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAssetTagMetaDataSortType               MetaDataType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortOrder                              SortOrder                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAssetFilteringAndSortingFunctionLibrary::SortByMetaData(TArray<struct FAssetData>& Assets, class FName MetaDataTag, EAssetTagMetaDataSortType MetaDataType, ESortOrder SortOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetFilteringAndSortingFunctionLibrary", "SortByMetaData");

	Params::AssetFilteringAndSortingFunctionLibrary_SortByMetaData Parms{};

	Parms.Assets = std::move(Assets);
	Parms.MetaDataTag = MetaDataTag;
	Parms.MetaDataType = MetaDataType;
	Parms.SortOrder = SortOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Assets = std::move(Parms.Assets);

	return Parms.ReturnValue;
}


// Function VirtualCamera.GameViewFunctionLibrary.CanToggleGameView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVCamTargetViewportID                   ViewportID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameViewFunctionLibrary::CanToggleGameView(EVCamTargetViewportID ViewportID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "CanToggleGameView");

	Params::GameViewFunctionLibrary_CanToggleGameView Parms{};

	Parms.ViewportID = ViewportID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.GameViewFunctionLibrary.IsInGameView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVCamTargetViewportID                   ViewportID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameViewFunctionLibrary::IsInGameView(EVCamTargetViewportID ViewportID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "IsInGameView");

	Params::GameViewFunctionLibrary_IsInGameView Parms{};

	Parms.ViewportID = ViewportID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.GameViewFunctionLibrary.RestoreGameViewStates
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<EVCamTargetViewportID, bool>       Snapshot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGameViewFunctionLibrary::RestoreGameViewStates(const TMap<EVCamTargetViewportID, bool>& Snapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "RestoreGameViewStates");

	Params::GameViewFunctionLibrary_RestoreGameViewStates Parms{};

	Parms.Snapshot = std::move(Snapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.GameViewFunctionLibrary.SetGameViewEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVCamTargetViewportID                   ViewportID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameViewFunctionLibrary::SetGameViewEnabled(EVCamTargetViewportID ViewportID, bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "SetGameViewEnabled");

	Params::GameViewFunctionLibrary_SetGameViewEnabled Parms{};

	Parms.ViewportID = ViewportID;
	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.GameViewFunctionLibrary.SetGameViewEnabledForAllViewports
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameViewFunctionLibrary::SetGameViewEnabledForAllViewports(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "SetGameViewEnabledForAllViewports");

	Params::GameViewFunctionLibrary_SetGameViewEnabledForAllViewports Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.GameViewFunctionLibrary.SnapshotGameViewStates
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<EVCamTargetViewportID, bool>       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EVCamTargetViewportID, bool> UGameViewFunctionLibrary::SnapshotGameViewStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "SnapshotGameViewStates");

	Params::GameViewFunctionLibrary_SnapshotGameViewStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.GameViewFunctionLibrary.ToggleGameView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVCamTargetViewportID                   ViewportID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameViewFunctionLibrary::ToggleGameView(EVCamTargetViewportID ViewportID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameViewFunctionLibrary", "ToggleGameView");

	Params::GameViewFunctionLibrary_ToggleGameView Parms{};

	Parms.ViewportID = ViewportID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.LevelSequenceVCamLibrary.FindPilotableCamerasInActiveLevelSequence
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FPilotableSequenceCameraInfo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FPilotableSequenceCameraInfo> ULevelSequenceVCamLibrary::FindPilotableCamerasInActiveLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceVCamLibrary", "FindPilotableCamerasInActiveLevelSequence");

	Params::LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.LevelSequenceVCamLibrary.HasAnyCameraCutsInLevelSequence
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelSequence*                   Sequence                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceVCamLibrary::HasAnyCameraCutsInLevelSequence(class ULevelSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceVCamLibrary", "HasAnyCameraCutsInLevelSequence");

	Params::LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence Parms{};

	Parms.Sequence = Sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetRecordOnClient
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                            ClientEndpointId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMultiUserTakesVCamFunctionLibrary::GetRecordOnClient(const struct FGuid& ClientEndpointId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "GetRecordOnClient");

	Params::MultiUserTakesVCamFunctionLibrary_GetRecordOnClient Parms{};

	Parms.ClientEndpointId = std::move(ClientEndpointId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetRecordOnClientLocal
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMultiUserTakesVCamFunctionLibrary::GetRecordOnClientLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "GetRecordOnClientLocal");

	Params::MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetSynchronizeTakeRecorderTransactions
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                            ClientEndpointId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMultiUserTakesVCamFunctionLibrary::GetSynchronizeTakeRecorderTransactions(const struct FGuid& ClientEndpointId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "GetSynchronizeTakeRecorderTransactions");

	Params::MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions Parms{};

	Parms.ClientEndpointId = std::move(ClientEndpointId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetSynchronizeTakeRecorderTransactionsLocal
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMultiUserTakesVCamFunctionLibrary::GetSynchronizeTakeRecorderTransactionsLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "GetSynchronizeTakeRecorderTransactionsLocal");

	Params::MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetRecordOnClient
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ClientEndpointId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMultiUserTakesVCamFunctionLibrary::SetRecordOnClient(const struct FGuid& ClientEndpointId, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "SetRecordOnClient");

	Params::MultiUserTakesVCamFunctionLibrary_SetRecordOnClient Parms{};

	Parms.ClientEndpointId = std::move(ClientEndpointId);
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetRecordOnClientLocal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMultiUserTakesVCamFunctionLibrary::SetRecordOnClientLocal(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "SetRecordOnClientLocal");

	Params::MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetSynchronizeTakeRecorderTransactionsLocal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMultiUserTakesVCamFunctionLibrary::SetSynchronizeTakeRecorderTransactionsLocal(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MultiUserTakesVCamFunctionLibrary", "SetSynchronizeTakeRecorderTransactionsLocal");

	Params::MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetAllTakeMetaDataTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSet<class FName>                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class FName> UTakeMetaDataTagsFunctionLibrary::GetAllTakeMetaDataTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetAllTakeMetaDataTags");

	Params::TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Description
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_Description()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_Description");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_LevelPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_LevelPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_LevelPath");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Slate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_Slate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_Slate");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TakeNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_TakeNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_TakeNumber");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TimecodeIn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_TimecodeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_TimecodeIn");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TimecodeOut
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_TimecodeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_TimecodeOut");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Timestamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTakeMetaDataTagsFunctionLibrary::GetTakeMetaDataTag_Timestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeMetaDataTagsFunctionLibrary", "GetTakeMetaDataTag_Timestamp");

	Params::TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.CalculateAutoFocusDistance
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReticlePosition                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCineCameraComponent*             CineCamera                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVCamBlueprintFunctionLibrary::CalculateAutoFocusDistance(const struct FVector2D& ReticlePosition, class UCineCameraComponent* CineCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "CalculateAutoFocusDistance");

	Params::VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance Parms{};

	Parms.ReticlePosition = std::move(ReticlePosition);
	Parms.CineCamera = CineCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.CallFunctionByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ObjPtr                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FunctionName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::CallFunctionByName(class UObject* ObjPtr, class FName FunctionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "CallFunctionByName");

	Params::VCamBlueprintFunctionLibrary_CallFunctionByName Parms{};

	Parms.ObjPtr = ObjPtr;
	Parms.FunctionName = FunctionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.ConvertStringToFrameRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InFrameRateString                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFrameRate UVCamBlueprintFunctionLibrary::ConvertStringToFrameRate(const class FString& InFrameRateString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "ConvertStringToFrameRate");

	Params::VCamBlueprintFunctionLibrary_ConvertStringToFrameRate Parms{};

	Parms.InFrameRateString = std::move(InFrameRateString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.CopyToCineCameraActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCineCameraComponent*             SourceCameraComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACineCameraActor*                 TargetCameraActor                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::CopyToCineCameraActor(class UCineCameraComponent* SourceCameraComponent, class ACineCameraActor* TargetCameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "CopyToCineCameraActor");

	Params::VCamBlueprintFunctionLibrary_CopyToCineCameraActor Parms{};

	Parms.SourceCameraComponent = SourceCameraComponent;
	Parms.TargetCameraActor = TargetCameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.DeprojectScreenToWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InScreenPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::DeprojectScreenToWorld(const struct FVector2D& InScreenPosition, struct FVector* OutWorldPosition, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "DeprojectScreenToWorld");

	Params::VCamBlueprintFunctionLibrary_DeprojectScreenToWorld Parms{};

	Parms.InScreenPosition = std::move(InScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldPosition != nullptr)
		*OutWorldPosition = std::move(Parms.OutWorldPosition);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.DeprojectScreenToWorldByViewport
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InScreenPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVCamTargetViewportID                   TargetViewport                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::DeprojectScreenToWorldByViewport(const struct FVector2D& InScreenPosition, EVCamTargetViewportID TargetViewport, struct FVector* OutWorldPosition, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "DeprojectScreenToWorldByViewport");

	Params::VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport Parms{};

	Parms.InScreenPosition = std::move(InScreenPosition);
	Parms.TargetViewport = TargetViewport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldPosition != nullptr)
		*OutWorldPosition = std::move(Parms.OutWorldPosition);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorLoadAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UVCamBlueprintFunctionLibrary::EditorLoadAsset(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "EditorLoadAsset");

	Params::VCamBlueprintFunctionLibrary_EditorLoadAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorSaveAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::EditorSaveAsset(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "EditorSaveAsset");

	Params::VCamBlueprintFunctionLibrary_EditorSaveAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorSetGameView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsToggled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::EditorSetGameView(bool bIsToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "EditorSetGameView");

	Params::VCamBlueprintFunctionLibrary_EditorSetGameView Parms{};

	Parms.bIsToggled = bIsToggled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.EnableDebugFocusPlane
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCineCameraComponent*             CineCamera                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::EnableDebugFocusPlane(class UCineCameraComponent* CineCamera, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "EnableDebugFocusPlane");

	Params::VCamBlueprintFunctionLibrary_EnableDebugFocusPlane Parms{};

	Parms.CineCamera = CineCamera;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetBoundObjects
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FMovieSceneObjectBindingID       CameraBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UVCamBlueprintFunctionLibrary::GetBoundObjects(const struct FMovieSceneObjectBindingID& CameraBindingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetBoundObjects");

	Params::VCamBlueprintFunctionLibrary_GetBoundObjects Parms{};

	Parms.CameraBindingID = std::move(CameraBindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetCurrentLevelSequence
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* UVCamBlueprintFunctionLibrary::GetCurrentLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetCurrentLevelSequence");

	Params::VCamBlueprintFunctionLibrary_GetCurrentLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetCurrentLevelSequenceCurrentFrame
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCamBlueprintFunctionLibrary::GetCurrentLevelSequenceCurrentFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetCurrentLevelSequenceCurrentFrame");

	Params::VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetDisplayRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFrameRate UVCamBlueprintFunctionLibrary::GetDisplayRate(class ULevelSequence* LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetDisplayRate");

	Params::VCamBlueprintFunctionLibrary_GetDisplayRate Parms{};

	Parms.LevelSequence = LevelSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceFrameAsTimecode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimecode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimecode UVCamBlueprintFunctionLibrary::GetLevelSequenceFrameAsTimecode(const class ULevelSequence* LevelSequence, int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetLevelSequenceFrameAsTimecode");

	Params::VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceFrameAsTimecodeWithoutObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFrameRate                       DisplayRate                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimecode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimecode UVCamBlueprintFunctionLibrary::GetLevelSequenceFrameAsTimecodeWithoutObject(const struct FFrameRate& DisplayRate, int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetLevelSequenceFrameAsTimecodeWithoutObject");

	Params::VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject Parms{};

	Parms.DisplayRate = std::move(DisplayRate);
	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceLengthInFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCamBlueprintFunctionLibrary::GetLevelSequenceLengthInFrames(const class ULevelSequence* LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetLevelSequenceLengthInFrames");

	Params::VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames Parms{};

	Parms.LevelSequence = LevelSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetNextUndoDescription
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVCamBlueprintFunctionLibrary::GetNextUndoDescription()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetNextUndoDescription");

	Params::VCamBlueprintFunctionLibrary_GetNextUndoDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetObjectMetadataTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FString>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FString> UVCamBlueprintFunctionLibrary::GetObjectMetadataTags(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetObjectMetadataTags");

	Params::VCamBlueprintFunctionLibrary_GetObjectMetadataTags Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetPendingTakeLevelSequence
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* UVCamBlueprintFunctionLibrary::GetPendingTakeLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetPendingTakeLevelSequence");

	Params::VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetPlaybackSpeed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVCamBlueprintFunctionLibrary::GetPlaybackSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "GetPlaybackSpeed");

	Params::VCamBlueprintFunctionLibrary_GetPlaybackSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.ImportSnapshotTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SubFolderName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AbsolutePathPackage                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UVCamBlueprintFunctionLibrary::ImportSnapshotTexture(const class FString& Filename, const class FString& SubFolderName, const class FString& AbsolutePathPackage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "ImportSnapshotTexture");

	Params::VCamBlueprintFunctionLibrary_ImportSnapshotTexture Parms{};

	Parms.Filename = std::move(Filename);
	Parms.SubFolderName = std::move(SubFolderName);
	Parms.AbsolutePathPackage = std::move(AbsolutePathPackage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsCurrentLevelSequencePlaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::IsCurrentLevelSequencePlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "IsCurrentLevelSequencePlaying");

	Params::VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsGameRunning
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::IsGameRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "IsGameRunning");

	Params::VCamBlueprintFunctionLibrary_IsGameRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsRecording
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::IsRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "IsRecording");

	Params::VCamBlueprintFunctionLibrary_IsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsTakeRecorderPanelOpen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::IsTakeRecorderPanelOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "IsTakeRecorderPanelOpen");

	Params::VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.ModifyObjectMetadataTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InTag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InValue                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::ModifyObjectMetadataTags(class UObject* InObject, class FName InTag, const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "ModifyObjectMetadataTags");

	Params::VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags Parms{};

	Parms.InObject = InObject;
	Parms.InTag = InTag;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.MultiTraceHitProxyOnViewport
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        InScreenPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVCamTargetViewportID                   InTargetViewport                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVCamTraceHitProxyQueryParams    InQueryParams                                          (Parm, NativeAccessSpecifierPublic)
// TArray<struct FVCamTraceHitProxyResult> Result                                                 (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::MultiTraceHitProxyOnViewport(const struct FVector2D& InScreenPosition, EVCamTargetViewportID InTargetViewport, const struct FVCamTraceHitProxyQueryParams& InQueryParams, TArray<struct FVCamTraceHitProxyResult>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "MultiTraceHitProxyOnViewport");

	Params::VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport Parms{};

	Parms.InScreenPosition = std::move(InScreenPosition);
	Parms.InTargetViewport = InTargetViewport;
	Parms.InQueryParams = std::move(InQueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.OpenLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::OpenLevelSequence(class ULevelSequence* LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "OpenLevelSequence");

	Params::VCamBlueprintFunctionLibrary_OpenLevelSequence Parms{};

	Parms.LevelSequence = LevelSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.PauseCurrentLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)

void UVCamBlueprintFunctionLibrary::PauseCurrentLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "PauseCurrentLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.PilotActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SelectedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::PilotActor(class AActor* SelectedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "PilotActor");

	Params::VCamBlueprintFunctionLibrary_PilotActor Parms{};

	Parms.SelectedActor = SelectedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.PlayCurrentLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)

void UVCamBlueprintFunctionLibrary::PlayCurrentLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "PlayCurrentLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetActorLabel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewActorLabel                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::SetActorLabel(class AActor* Actor, const class FString& NewActorLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "SetActorLabel");

	Params::VCamBlueprintFunctionLibrary_SetActorLabel Parms{};

	Parms.Actor = Actor;
	Parms.NewActorLabel = std::move(NewActorLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetCurrentLevelSequenceCurrentFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::SetCurrentLevelSequenceCurrentFrame(int32 NewFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "SetCurrentLevelSequenceCurrentFrame");

	Params::VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame Parms{};

	Parms.NewFrame = NewFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetOnTakeRecorderSlateChanged
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& Slate)>OnTakeRecorderSlateChanged                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::SetOnTakeRecorderSlateChanged(TDelegate<void(const class FString& Slate)> OnTakeRecorderSlateChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "SetOnTakeRecorderSlateChanged");

	Params::VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged Parms{};

	Parms.OnTakeRecorderSlateChanged = OnTakeRecorderSlateChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetPlaybackSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::SetPlaybackSpeed(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "SetPlaybackSpeed");

	Params::VCamBlueprintFunctionLibrary_SetPlaybackSpeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.SortAssetsByTimecodeAssetData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               LevelSequenceAssets                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UVCamBlueprintFunctionLibrary::SortAssetsByTimecodeAssetData(const TArray<struct FAssetData>& LevelSequenceAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "SortAssetsByTimecodeAssetData");

	Params::VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData Parms{};

	Parms.LevelSequenceAssets = std::move(LevelSequenceAssets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.TimecodeToFrameAmount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTimecode                        Timecode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameRate                       InFrameRate                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCamBlueprintFunctionLibrary::TimecodeToFrameAmount(const struct FTimecode& Timecode, const struct FFrameRate& InFrameRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "TimecodeToFrameAmount");

	Params::VCamBlueprintFunctionLibrary_TimecodeToFrameAmount Parms{};

	Parms.Timecode = std::move(Timecode);
	Parms.InFrameRate = std::move(InFrameRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.TryOpenTakeRecorderPanel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::TryOpenTakeRecorderPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "TryOpenTakeRecorderPanel");

	Params::VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VCamBlueprintFunctionLibrary.UpdatePostProcessSettingsForCapture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthOfField                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FStopValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamBlueprintFunctionLibrary::UpdatePostProcessSettingsForCapture(class USceneCaptureComponent2D* CaptureComponent, float DepthOfField, float FStopValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamBlueprintFunctionLibrary", "UpdatePostProcessSettingsForCapture");

	Params::VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.DepthOfField = DepthOfField;
	Parms.FStopValue = FStopValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction VirtualCamera.VCamBlueprintFunctionLibrary.OnTakeRecorderSlateChanged_VCam__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           Slate                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintFunctionLibrary::OnTakeRecorderSlateChanged_VCam__DelegateSignature(const class FString& Slate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBlueprintFunctionLibrary", "OnTakeRecorderSlateChanged_VCam__DelegateSignature");

	Params::VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature Parms{};

	Parms.Slate = std::move(Slate);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VirtualCamera.VirtualCameraUserSettings.GetSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVirtualCameraUserSettings*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVirtualCameraUserSettings* UVirtualCameraUserSettings::GetSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraUserSettings", "GetSettings");

	Params::VirtualCameraUserSettings_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraUserSettings.SetTutorialCompletionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVCamTutorialCompletionState            NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraUserSettings::SetTutorialCompletionState(EVCamTutorialCompletionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraUserSettings", "SetTutorialCompletionState");

	Params::VirtualCameraUserSettings_SetTutorialCompletionState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraUserSettings.IsTutorialCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCameraUserSettings::IsTutorialCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraUserSettings", "IsTutorialCompleted");

	Params::VirtualCameraUserSettings_IsTutorialCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetAllClipsMetaDataTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSet<class FName>                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class FName> UVirtualCameraClipsMetaData::GetAllClipsMetaDataTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetAllClipsMetaDataTags");

	Params::VirtualCameraClipsMetaData_GetAllClipsMetaDataTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_DisplayRate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_DisplayRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_DisplayRate");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FavoriteLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_FavoriteLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_FavoriteLevel");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FocalLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_FocalLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_FocalLength");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FrameCountEnd
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_FrameCountEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_FrameCountEnd");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FrameCountStart
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_FrameCountStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_FrameCountStart");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsCineACineCameraRecording
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_IsCineACineCameraRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_IsCineACineCameraRecording");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsCreatedFromVCam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_IsCreatedFromVCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_IsCreatedFromVCam");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsFlagged
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_IsFlagged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_IsFlagged");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsNoGood
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_IsNoGood()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_IsNoGood");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsSelected
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_IsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_IsSelected");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_LengthInFrames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_LengthInFrames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_LengthInFrames");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_RecordedLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCameraClipsMetaData::GetClipsMetaDataTag_RecordedLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCameraClipsMetaData", "GetClipsMetaDataTag_RecordedLevel");

	Params::VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetDisplayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFrameRate                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFrameRate UVirtualCameraClipsMetaData::GetDisplayRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetDisplayRate");

	Params::VirtualCameraClipsMetaData_GetDisplayRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetLengthInFrames
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVirtualCameraClipsMetaData::GetLengthInFrames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetLengthInFrames");

	Params::VirtualCameraClipsMetaData_GetLengthInFrames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetDisplayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFrameRate                       InDisplayRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetDisplayRate(const struct FFrameRate& InDisplayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetDisplayRate");

	Params::VirtualCameraClipsMetaData_SetDisplayRate Parms{};

	Parms.InDisplayRate = std::move(InDisplayRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetFocalLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFocalLength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetFocalLength(float InFocalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetFocalLength");

	Params::VirtualCameraClipsMetaData_SetFocalLength Parms{};

	Parms.InFocalLength = InFocalLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetFrameCountEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetFrameCountEnd(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetFrameCountEnd");

	Params::VirtualCameraClipsMetaData_SetFrameCountEnd Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetFrameCountStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetFrameCountStart(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetFrameCountStart");

	Params::VirtualCameraClipsMetaData_SetFrameCountStart Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetIsACineCameraRecording
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsACineCameraRecording                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetIsACineCameraRecording(bool bInIsACineCameraRecording)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetIsACineCameraRecording");

	Params::VirtualCameraClipsMetaData_SetIsACineCameraRecording Parms{};

	Parms.bInIsACineCameraRecording = bInIsACineCameraRecording;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetLengthInFrames
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InLength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetLengthInFrames(int32 InLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetLengthInFrames");

	Params::VirtualCameraClipsMetaData_SetLengthInFrames Parms{};

	Parms.InLength = InLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetRecordedLevelName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InLevelName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetRecordedLevelName(const class FString& InLevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetRecordedLevelName");

	Params::VirtualCameraClipsMetaData_SetRecordedLevelName Parms{};

	Parms.InLevelName = std::move(InLevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.SetSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInSelected                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCameraClipsMetaData::SetSelected(bool bInSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "SetSelected");

	Params::VirtualCameraClipsMetaData_SetSelected Parms{};

	Parms.bInSelected = bInSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetFocalLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVirtualCameraClipsMetaData::GetFocalLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetFocalLength");

	Params::VirtualCameraClipsMetaData_GetFocalLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetFrameCountEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVirtualCameraClipsMetaData::GetFrameCountEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetFrameCountEnd");

	Params::VirtualCameraClipsMetaData_GetFrameCountEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetFrameCountStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVirtualCameraClipsMetaData::GetFrameCountStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetFrameCountStart");

	Params::VirtualCameraClipsMetaData_GetFrameCountStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetIsACineCameraRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCameraClipsMetaData::GetIsACineCameraRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetIsACineCameraRecording");

	Params::VirtualCameraClipsMetaData_GetIsACineCameraRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetRecordedLevelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVirtualCameraClipsMetaData::GetRecordedLevelName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetRecordedLevelName");

	Params::VirtualCameraClipsMetaData_GetRecordedLevelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VirtualCamera.VirtualCameraClipsMetaData.GetSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCameraClipsMetaData::GetSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualCameraClipsMetaData", "GetSelected");

	Params::VirtualCameraClipsMetaData_GetSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

