#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Tether

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Tether.BPFL_Tether_C.Is Tether LinkConnectionPossible
// 0x0430 (0x0430 - 0x0000)
struct BPFL_Tether_C_Is_Tether_LinkConnectionPossible final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartNormal;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndNormal;                                         // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalExtrudeDistance;                             // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          LinkConnectionPossible;                            // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F64[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0090(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                SecondTetherLocations;                             // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FirstTetherLocations;                              // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0248(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F65[0x2];                                     // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F66[0x2];                                     // 0x034A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F67[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x03C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F68[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible) == 0x000008, "Wrong alignment on BPFL_Tether_C_Is_Tether_LinkConnectionPossible");
static_assert(sizeof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible) == 0x000430, "Wrong size on BPFL_Tether_C_Is_Tether_LinkConnectionPossible");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, Instigator) == 0x000000, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::Instigator' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, StartLocation) == 0x000008, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::StartLocation' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, StartNormal) == 0x000020, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::StartNormal' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, EndLocation) == 0x000038, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::EndLocation' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, EndNormal) == 0x000050, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::EndNormal' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, NormalExtrudeDistance) == 0x000068, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::NormalExtrudeDistance' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, IgnoredActors) == 0x000070, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, __WorldContext) == 0x000080, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, LinkConnectionPossible) == 0x000088, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::LinkConnectionPossible' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, HitResult) == 0x000090, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::HitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, SecondTetherLocations) == 0x000188, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::SecondTetherLocations' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, FirstTetherLocations) == 0x0001A0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::FirstTetherLocations' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0001B8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0001D0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001E8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000200, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Add_VectorVector_ReturnValue) == 0x000218, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000230, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_LineTraceSingle_OutHit) == 0x000248, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_LineTraceSingle_ReturnValue) == 0x000340, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Not_PreBool_ReturnValue) == 0x000341, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_Array_Add_ReturnValue) == 0x000344, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_bBlockingHit) == 0x000348, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_bInitialOverlap) == 0x000349, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_Time) == 0x00034C, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_Distance) == 0x000350, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_Location) == 0x000358, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_ImpactPoint) == 0x000370, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_Normal) == 0x000388, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_ImpactNormal) == 0x0003A0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_PhysMat) == 0x0003B8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_HitActor) == 0x0003C0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_HitComponent) == 0x0003C8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_HitBoneName) == 0x0003D0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_BoneName) == 0x0003D8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_HitItem) == 0x0003E0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_ElementIndex) == 0x0003E4, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_FaceIndex) == 0x0003E8, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_TraceStart) == 0x0003F0, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BreakHitResult_TraceEnd) == 0x000408, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_GetObjectClass_ReturnValue) == 0x000420, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_ClassIsChildOf_ReturnValue) == 0x000428, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Tether_C_Is_Tether_LinkConnectionPossible, CallFunc_BooleanOR_ReturnValue) == 0x000429, "Member 'BPFL_Tether_C_Is_Tether_LinkConnectionPossible::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

