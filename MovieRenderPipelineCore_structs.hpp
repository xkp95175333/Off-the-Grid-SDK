#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MovieRenderPipelineCore.EMovieGraphValueType
// NumValues: 0x0014
enum class EMovieGraphValueType : uint8
{
	None                                     = 0,
	Bool                                     = 1,
	Byte                                     = 2,
	Int32                                    = 3,
	Int64                                    = 4,
	Float                                    = 5,
	Double                                   = 6,
	Name                                     = 7,
	String                                   = 8,
	Text                                     = 9,
	Enum                                     = 10,
	Struct                                   = 11,
	Object                                   = 12,
	SoftObject                               = 13,
	Class                                    = 14,
	SoftClass                                = 15,
	UInt32                                   = 16,
	UInt64                                   = 17,
	Count                                    = 18,
	EMovieGraphValueType_MAX                 = 19,
};

// Enum MovieRenderPipelineCore.EMovieGraphContainerType
// NumValues: 0x0004
enum class EMovieGraphContainerType : uint8
{
	None                                     = 0,
	Array                                    = 1,
	Count                                    = 2,
	EMovieGraphContainerType_MAX             = 3,
};

// Enum MovieRenderPipelineCore.EMovieGraphScalabilityQualityLevel
// NumValues: 0x0006
enum class EMovieGraphScalabilityQualityLevel : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Epic                                     = 3,
	Cinematic                                = 4,
	EMovieGraphScalabilityQualityLevel_MAX   = 5,
};

// Enum MovieRenderPipelineCore.EMovieGraphPinQueryRequirement
// NumValues: 0x0004
enum class EMovieGraphPinQueryRequirement : uint8
{
	BuiltIn                                  = 0,
	Dynamic                                  = 1,
	BuiltInOrDynamic                         = 2,
	EMovieGraphPinQueryRequirement_MAX       = 3,
};

// Enum MovieRenderPipelineCore.EMovieGraphConditionGroupOpType
// NumValues: 0x0004
enum class EMovieGraphConditionGroupOpType : uint8
{
	Add                                      = 0,
	Subtract                                 = 1,
	And                                      = 2,
	EMovieGraphConditionGroupOpType_MAX      = 3,
};

// Enum MovieRenderPipelineCore.EMovieGraphConditionGroupQueryOpType
// NumValues: 0x0004
enum class EMovieGraphConditionGroupQueryOpType : uint8
{
	Add                                      = 0,
	Subtract                                 = 1,
	And                                      = 2,
	EMovieGraphConditionGroupQueryOpType_MAX = 3,
};

// Enum MovieRenderPipelineCore.EMoviePipelineEncodeQuality
// NumValues: 0x0005
enum class EMoviePipelineEncodeQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Epic                                     = 3,
	EMoviePipelineEncodeQuality_MAX          = 4,
};

// Enum MovieRenderPipelineCore.FCPXMLExportDataSource
// NumValues: 0x0003
enum class EFCPXMLExportDataSource : uint8
{
	OutputMetadata                           = 0,
	SequenceData                             = 1,
	FCPXMLExportDataSource_MAX               = 2,
};

// Enum MovieRenderPipelineCore.EMoviePipelineTextureStreamingMethod
// NumValues: 0x0004
enum class EMoviePipelineTextureStreamingMethod : uint8
{
	None                                     = 0,
	Disabled                                 = 1,
	FullyLoad                                = 2,
	EMoviePipelineTextureStreamingMethod_MAX = 3,
};

// Enum MovieRenderPipelineCore.EMovieRenderPipelineState
// NumValues: 0x0006
enum class EMovieRenderPipelineState : uint8
{
	Uninitialized                            = 0,
	ProducingFrames                          = 1,
	Finalize                                 = 2,
	Export                                   = 3,
	Finished                                 = 4,
	EMovieRenderPipelineState_MAX            = 5,
};

// Enum MovieRenderPipelineCore.EMovieRenderShotState
// NumValues: 0x0006
enum class EMovieRenderShotState : uint8
{
	Uninitialized                            = 0,
	WarmingUp                                = 1,
	MotionBlur                               = 2,
	Rendering                                = 3,
	Finished                                 = 4,
	EMovieRenderShotState_MAX                = 5,
};

// Enum MovieRenderPipelineCore.EMoviePipelineShutterTiming
// NumValues: 0x0004
enum class EMoviePipelineShutterTiming : uint8
{
	FrameOpen                                = 0,
	FrameCenter                              = 1,
	FrameClose                               = 2,
	EMoviePipelineShutterTiming_MAX          = 3,
};

// ScriptStruct MovieRenderPipelineCore.MoviePipelinePassIdentifier
// 0x0020 (0x0020 - 0x0000)
struct FMoviePipelinePassIdentifier final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CameraName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelinePassIdentifier) == 0x000008, "Wrong alignment on FMoviePipelinePassIdentifier");
static_assert(sizeof(FMoviePipelinePassIdentifier) == 0x000020, "Wrong size on FMoviePipelinePassIdentifier");
static_assert(offsetof(FMoviePipelinePassIdentifier, Name) == 0x000000, "Member 'FMoviePipelinePassIdentifier::Name' has a wrong offset!");
static_assert(offsetof(FMoviePipelinePassIdentifier, CameraName) == 0x000010, "Member 'FMoviePipelinePassIdentifier::CameraName' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineRenderPassOutputData
// 0x0010 (0x0010 - 0x0000)
struct FMoviePipelineRenderPassOutputData final
{
public:
	TArray<class FString>                         FilePaths;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineRenderPassOutputData) == 0x000008, "Wrong alignment on FMoviePipelineRenderPassOutputData");
static_assert(sizeof(FMoviePipelineRenderPassOutputData) == 0x000010, "Wrong size on FMoviePipelineRenderPassOutputData");
static_assert(offsetof(FMoviePipelineRenderPassOutputData, FilePaths) == 0x000000, "Member 'FMoviePipelineRenderPassOutputData::FilePaths' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineShotOutputData
// 0x0058 (0x0058 - 0x0000)
struct FMoviePipelineShotOutputData final
{
public:
	TWeakObjectPtr<class UMoviePipelineExecutorShot> Shot;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FMoviePipelinePassIdentifier, struct FMoviePipelineRenderPassOutputData> RenderPassData;                                    // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineShotOutputData) == 0x000008, "Wrong alignment on FMoviePipelineShotOutputData");
static_assert(sizeof(FMoviePipelineShotOutputData) == 0x000058, "Wrong size on FMoviePipelineShotOutputData");
static_assert(offsetof(FMoviePipelineShotOutputData, Shot) == 0x000000, "Member 'FMoviePipelineShotOutputData::Shot' has a wrong offset!");
static_assert(offsetof(FMoviePipelineShotOutputData, RenderPassData) == 0x000008, "Member 'FMoviePipelineShotOutputData::RenderPassData' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphRenderDataIdentifier
// 0x0048 (0x0048 - 0x0000)
struct FMovieGraphRenderDataIdentifier final
{
public:
	class FName                                   RootBranchName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RendererName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubResourceName;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CameraName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphRenderDataIdentifier) == 0x000008, "Wrong alignment on FMovieGraphRenderDataIdentifier");
static_assert(sizeof(FMovieGraphRenderDataIdentifier) == 0x000048, "Wrong size on FMovieGraphRenderDataIdentifier");
static_assert(offsetof(FMovieGraphRenderDataIdentifier, RootBranchName) == 0x000000, "Member 'FMovieGraphRenderDataIdentifier::RootBranchName' has a wrong offset!");
static_assert(offsetof(FMovieGraphRenderDataIdentifier, LayerName) == 0x000008, "Member 'FMovieGraphRenderDataIdentifier::LayerName' has a wrong offset!");
static_assert(offsetof(FMovieGraphRenderDataIdentifier, RendererName) == 0x000018, "Member 'FMovieGraphRenderDataIdentifier::RendererName' has a wrong offset!");
static_assert(offsetof(FMovieGraphRenderDataIdentifier, SubResourceName) == 0x000028, "Member 'FMovieGraphRenderDataIdentifier::SubResourceName' has a wrong offset!");
static_assert(offsetof(FMovieGraphRenderDataIdentifier, CameraName) == 0x000038, "Member 'FMovieGraphRenderDataIdentifier::CameraName' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphRenderLayerOutputData
// 0x0010 (0x0010 - 0x0000)
struct FMovieGraphRenderLayerOutputData final
{
public:
	TArray<class FString>                         FilePaths;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphRenderLayerOutputData) == 0x000008, "Wrong alignment on FMovieGraphRenderLayerOutputData");
static_assert(sizeof(FMovieGraphRenderLayerOutputData) == 0x000010, "Wrong size on FMovieGraphRenderLayerOutputData");
static_assert(offsetof(FMovieGraphRenderLayerOutputData, FilePaths) == 0x000000, "Member 'FMovieGraphRenderLayerOutputData::FilePaths' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphRenderOutputData
// 0x0058 (0x0058 - 0x0000)
struct FMovieGraphRenderOutputData final
{
public:
	TWeakObjectPtr<class UMoviePipelineExecutorShot> Shot;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FMovieGraphRenderDataIdentifier, struct FMovieGraphRenderLayerOutputData> RenderLayerData;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphRenderOutputData) == 0x000008, "Wrong alignment on FMovieGraphRenderOutputData");
static_assert(sizeof(FMovieGraphRenderOutputData) == 0x000058, "Wrong size on FMovieGraphRenderOutputData");
static_assert(offsetof(FMovieGraphRenderOutputData, Shot) == 0x000000, "Member 'FMovieGraphRenderOutputData::Shot' has a wrong offset!");
static_assert(offsetof(FMovieGraphRenderOutputData, RenderLayerData) == 0x000008, "Member 'FMovieGraphRenderOutputData::RenderLayerData' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineOutputData
// 0x0038 (0x0038 - 0x0000)
struct FMoviePipelineOutputData final
{
public:
	class UMoviePipelineBase*                     Pipeline;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              Job;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMoviePipelineShotOutputData>   ShotData;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMovieGraphRenderOutputData>    GraphData;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineOutputData) == 0x000008, "Wrong alignment on FMoviePipelineOutputData");
static_assert(sizeof(FMoviePipelineOutputData) == 0x000038, "Wrong size on FMoviePipelineOutputData");
static_assert(offsetof(FMoviePipelineOutputData, Pipeline) == 0x000000, "Member 'FMoviePipelineOutputData::Pipeline' has a wrong offset!");
static_assert(offsetof(FMoviePipelineOutputData, Job) == 0x000008, "Member 'FMoviePipelineOutputData::Job' has a wrong offset!");
static_assert(offsetof(FMoviePipelineOutputData, bSuccess) == 0x000010, "Member 'FMoviePipelineOutputData::bSuccess' has a wrong offset!");
static_assert(offsetof(FMoviePipelineOutputData, ShotData) == 0x000018, "Member 'FMoviePipelineOutputData::ShotData' has a wrong offset!");
static_assert(offsetof(FMoviePipelineOutputData, GraphData) == 0x000028, "Member 'FMoviePipelineOutputData::GraphData' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphFilenameResolveParams
// 0x0158 (0x0158 - 0x0000)
struct FMovieGraphFilenameResolveParams final
{
public:
	struct FMovieGraphRenderDataIdentifier        RenderDataIdentifier;                              // 0x0000(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RootFrameNumber;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotFrameNumber;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RootFrameNumberRel;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotFrameNumberRel;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            FileMetadata;                                      // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRelativeFrameNumbers;                        // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448F[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameOverride;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnsureAbsolutePath;                               // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4490[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              InitializationTime;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              InitializationTimeOffset;                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroPadFrameNumberCount;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4491[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            FileNameFormatOverrides;                           // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              Job;                                               // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorShot*             Shot;                                              // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieGraphEvaluatedConfig*             EvaluatedConfig;                                   // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberOffset;                                 // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             DefaultFrameRate;                                  // 0x014C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4492[0x4];                                     // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieGraphFilenameResolveParams) == 0x000008, "Wrong alignment on FMovieGraphFilenameResolveParams");
static_assert(sizeof(FMovieGraphFilenameResolveParams) == 0x000158, "Wrong size on FMovieGraphFilenameResolveParams");
static_assert(offsetof(FMovieGraphFilenameResolveParams, RenderDataIdentifier) == 0x000000, "Member 'FMovieGraphFilenameResolveParams::RenderDataIdentifier' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, RootFrameNumber) == 0x000048, "Member 'FMovieGraphFilenameResolveParams::RootFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, ShotFrameNumber) == 0x00004C, "Member 'FMovieGraphFilenameResolveParams::ShotFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, RootFrameNumberRel) == 0x000050, "Member 'FMovieGraphFilenameResolveParams::RootFrameNumberRel' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, ShotFrameNumberRel) == 0x000054, "Member 'FMovieGraphFilenameResolveParams::ShotFrameNumberRel' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, FileMetadata) == 0x000058, "Member 'FMovieGraphFilenameResolveParams::FileMetadata' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, Version) == 0x0000A8, "Member 'FMovieGraphFilenameResolveParams::Version' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, bForceRelativeFrameNumbers) == 0x0000AC, "Member 'FMovieGraphFilenameResolveParams::bForceRelativeFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, FileNameOverride) == 0x0000B0, "Member 'FMovieGraphFilenameResolveParams::FileNameOverride' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, bEnsureAbsolutePath) == 0x0000C0, "Member 'FMovieGraphFilenameResolveParams::bEnsureAbsolutePath' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, InitializationTime) == 0x0000C8, "Member 'FMovieGraphFilenameResolveParams::InitializationTime' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, InitializationTimeOffset) == 0x0000D0, "Member 'FMovieGraphFilenameResolveParams::InitializationTimeOffset' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, ZeroPadFrameNumberCount) == 0x0000D8, "Member 'FMovieGraphFilenameResolveParams::ZeroPadFrameNumberCount' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, FileNameFormatOverrides) == 0x0000E0, "Member 'FMovieGraphFilenameResolveParams::FileNameFormatOverrides' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, Job) == 0x000130, "Member 'FMovieGraphFilenameResolveParams::Job' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, Shot) == 0x000138, "Member 'FMovieGraphFilenameResolveParams::Shot' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, EvaluatedConfig) == 0x000140, "Member 'FMovieGraphFilenameResolveParams::EvaluatedConfig' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, FrameNumberOffset) == 0x000148, "Member 'FMovieGraphFilenameResolveParams::FrameNumberOffset' has a wrong offset!");
static_assert(offsetof(FMovieGraphFilenameResolveParams, DefaultFrameRate) == 0x00014C, "Member 'FMovieGraphFilenameResolveParams::DefaultFrameRate' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineFormatArgs
// 0x00A8 (0x00A8 - 0x0000)
struct FMoviePipelineFormatArgs final
{
public:
	TMap<class FString, class FString>            FilenameArguments;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            FileMetadata;                                      // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineFormatArgs) == 0x000008, "Wrong alignment on FMoviePipelineFormatArgs");
static_assert(sizeof(FMoviePipelineFormatArgs) == 0x0000A8, "Wrong size on FMoviePipelineFormatArgs");
static_assert(offsetof(FMoviePipelineFormatArgs, FilenameArguments) == 0x000000, "Member 'FMoviePipelineFormatArgs::FilenameArguments' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFormatArgs, FileMetadata) == 0x000050, "Member 'FMoviePipelineFormatArgs::FileMetadata' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFormatArgs, InJob) == 0x0000A0, "Member 'FMoviePipelineFormatArgs::InJob' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphInitConfig
// 0x0020 (0x0020 - 0x0000)
struct FMovieGraphInitConfig final
{
public:
	TSubclassOf<class UMovieGraphRendererBase>    RendererClass;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieGraphDataSourceBase>  DataSourceClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieGraphAudioRendererBase> AudioRendererClass;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderViewport;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4493[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieGraphInitConfig) == 0x000008, "Wrong alignment on FMovieGraphInitConfig");
static_assert(sizeof(FMovieGraphInitConfig) == 0x000020, "Wrong size on FMovieGraphInitConfig");
static_assert(offsetof(FMovieGraphInitConfig, RendererClass) == 0x000000, "Member 'FMovieGraphInitConfig::RendererClass' has a wrong offset!");
static_assert(offsetof(FMovieGraphInitConfig, DataSourceClass) == 0x000008, "Member 'FMovieGraphInitConfig::DataSourceClass' has a wrong offset!");
static_assert(offsetof(FMovieGraphInitConfig, AudioRendererClass) == 0x000010, "Member 'FMovieGraphInitConfig::AudioRendererClass' has a wrong offset!");
static_assert(offsetof(FMovieGraphInitConfig, bRenderViewport) == 0x000018, "Member 'FMovieGraphInitConfig::bRenderViewport' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphEvaluatedSettingsStack
// 0x0010 (0x0010 - 0x0000)
struct FMovieGraphEvaluatedSettingsStack final
{
public:
	TArray<class UMovieGraphNode*>                NodeInstances;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphEvaluatedSettingsStack) == 0x000008, "Wrong alignment on FMovieGraphEvaluatedSettingsStack");
static_assert(sizeof(FMovieGraphEvaluatedSettingsStack) == 0x000010, "Wrong size on FMovieGraphEvaluatedSettingsStack");
static_assert(offsetof(FMovieGraphEvaluatedSettingsStack, NodeInstances) == 0x000000, "Member 'FMovieGraphEvaluatedSettingsStack::NodeInstances' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineSegmentWorkMetrics
// 0x0028 (0x0028 - 0x0000)
struct FMoviePipelineSegmentWorkMetrics final
{
public:
	class FString                                 SegmentName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputFrameIndex;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalOutputFrameCount;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputSubSampleIndex;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSubSampleCount;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineWarmUpFrameIndex;                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEngineWarmUpFrameCount;                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineSegmentWorkMetrics) == 0x000008, "Wrong alignment on FMoviePipelineSegmentWorkMetrics");
static_assert(sizeof(FMoviePipelineSegmentWorkMetrics) == 0x000028, "Wrong size on FMoviePipelineSegmentWorkMetrics");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, SegmentName) == 0x000000, "Member 'FMoviePipelineSegmentWorkMetrics::SegmentName' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, OutputFrameIndex) == 0x000010, "Member 'FMoviePipelineSegmentWorkMetrics::OutputFrameIndex' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, TotalOutputFrameCount) == 0x000014, "Member 'FMoviePipelineSegmentWorkMetrics::TotalOutputFrameCount' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, OutputSubSampleIndex) == 0x000018, "Member 'FMoviePipelineSegmentWorkMetrics::OutputSubSampleIndex' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, TotalSubSampleCount) == 0x00001C, "Member 'FMoviePipelineSegmentWorkMetrics::TotalSubSampleCount' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, EngineWarmUpFrameIndex) == 0x000020, "Member 'FMoviePipelineSegmentWorkMetrics::EngineWarmUpFrameIndex' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSegmentWorkMetrics, TotalEngineWarmUpFrameCount) == 0x000024, "Member 'FMoviePipelineSegmentWorkMetrics::TotalEngineWarmUpFrameCount' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphBranch
// 0x0008 (0x0008 - 0x0000)
struct FMovieGraphBranch final
{
public:
	class FName                                   BranchName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphBranch) == 0x000004, "Wrong alignment on FMovieGraphBranch");
static_assert(sizeof(FMovieGraphBranch) == 0x000008, "Wrong size on FMovieGraphBranch");
static_assert(offsetof(FMovieGraphBranch, BranchName) == 0x000000, "Member 'FMovieGraphBranch::BranchName' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphEvaluatedBranchConfig
// 0x0050 (0x0050 - 0x0000)
struct FMovieGraphEvaluatedBranchConfig final
{
public:
	TMap<class FString, struct FMovieGraphEvaluatedSettingsStack> NamedNodes;                                        // 0x0000(0x0050)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieGraphEvaluatedBranchConfig) == 0x000008, "Wrong alignment on FMovieGraphEvaluatedBranchConfig");
static_assert(sizeof(FMovieGraphEvaluatedBranchConfig) == 0x000050, "Wrong size on FMovieGraphEvaluatedBranchConfig");
static_assert(offsetof(FMovieGraphEvaluatedBranchConfig, NamedNodes) == 0x000000, "Member 'FMovieGraphEvaluatedBranchConfig::NamedNodes' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphEvaluationContext_VisitedNodeInfo
// 0x0050 (0x0050 - 0x0000)
struct FMovieGraphEvaluationContext_VisitedNodeInfo final
{
public:
	TSet<class UMovieGraphNode*>                  VisitedNodes;                                      // 0x0000(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphEvaluationContext_VisitedNodeInfo) == 0x000008, "Wrong alignment on FMovieGraphEvaluationContext_VisitedNodeInfo");
static_assert(sizeof(FMovieGraphEvaluationContext_VisitedNodeInfo) == 0x000050, "Wrong size on FMovieGraphEvaluationContext_VisitedNodeInfo");
static_assert(offsetof(FMovieGraphEvaluationContext_VisitedNodeInfo, VisitedNodes) == 0x000000, "Member 'FMovieGraphEvaluationContext_VisitedNodeInfo::VisitedNodes' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphTimeStepData
// 0x0068 (0x0068 - 0x0000)
struct FMovieGraphTimeStepData final
{
public:
	int32                                         OutputFrameNumber;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotOutputFrameNumber;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenderedFrameNumber;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameDeltaTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldTimeDilation;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSeconds;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBlurFraction;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             FrameRate;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalSampleIndex;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalSampleCount;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstTemporalSampleForFrame;                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLastTemporalSampleForFrame;                     // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiscardOutput;                                    // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresAccumulator;                              // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieGraphEvaluatedConfig*             EvaluatedConfig;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              RootTimeCode;                                      // 0x0038(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           RootFrameNumber;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ShotTimeCode;                                      // 0x0050(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           ShotFrameNumber;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphTimeStepData) == 0x000008, "Wrong alignment on FMovieGraphTimeStepData");
static_assert(sizeof(FMovieGraphTimeStepData) == 0x000068, "Wrong size on FMovieGraphTimeStepData");
static_assert(offsetof(FMovieGraphTimeStepData, OutputFrameNumber) == 0x000000, "Member 'FMovieGraphTimeStepData::OutputFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, ShotOutputFrameNumber) == 0x000004, "Member 'FMovieGraphTimeStepData::ShotOutputFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, RenderedFrameNumber) == 0x000008, "Member 'FMovieGraphTimeStepData::RenderedFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, FrameDeltaTime) == 0x00000C, "Member 'FMovieGraphTimeStepData::FrameDeltaTime' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, WorldTimeDilation) == 0x000010, "Member 'FMovieGraphTimeStepData::WorldTimeDilation' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, WorldSeconds) == 0x000014, "Member 'FMovieGraphTimeStepData::WorldSeconds' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, MotionBlurFraction) == 0x000018, "Member 'FMovieGraphTimeStepData::MotionBlurFraction' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, FrameRate) == 0x00001C, "Member 'FMovieGraphTimeStepData::FrameRate' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, TemporalSampleIndex) == 0x000024, "Member 'FMovieGraphTimeStepData::TemporalSampleIndex' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, TemporalSampleCount) == 0x000028, "Member 'FMovieGraphTimeStepData::TemporalSampleCount' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, bIsFirstTemporalSampleForFrame) == 0x00002C, "Member 'FMovieGraphTimeStepData::bIsFirstTemporalSampleForFrame' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, bIsLastTemporalSampleForFrame) == 0x00002D, "Member 'FMovieGraphTimeStepData::bIsLastTemporalSampleForFrame' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, bDiscardOutput) == 0x00002E, "Member 'FMovieGraphTimeStepData::bDiscardOutput' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, bRequiresAccumulator) == 0x00002F, "Member 'FMovieGraphTimeStepData::bRequiresAccumulator' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, EvaluatedConfig) == 0x000030, "Member 'FMovieGraphTimeStepData::EvaluatedConfig' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, RootTimeCode) == 0x000038, "Member 'FMovieGraphTimeStepData::RootTimeCode' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, RootFrameNumber) == 0x00004C, "Member 'FMovieGraphTimeStepData::RootFrameNumber' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, ShotTimeCode) == 0x000050, "Member 'FMovieGraphTimeStepData::ShotTimeCode' has a wrong offset!");
static_assert(offsetof(FMovieGraphTimeStepData, ShotFrameNumber) == 0x000064, "Member 'FMovieGraphTimeStepData::ShotFrameNumber' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphTraversalContext
// 0x00D0 (0x00D0 - 0x0000)
struct FMovieGraphTraversalContext final
{
public:
	int32                                         ShotIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              Job;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorShot*             Shot;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieGraphConfig*                      RootGraph;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphRenderDataIdentifier        RenderDataIdentifier;                              // 0x0020(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphTimeStepData                Time;                                              // 0x0068(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphTraversalContext) == 0x000008, "Wrong alignment on FMovieGraphTraversalContext");
static_assert(sizeof(FMovieGraphTraversalContext) == 0x0000D0, "Wrong size on FMovieGraphTraversalContext");
static_assert(offsetof(FMovieGraphTraversalContext, ShotIndex) == 0x000000, "Member 'FMovieGraphTraversalContext::ShotIndex' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, ShotCount) == 0x000004, "Member 'FMovieGraphTraversalContext::ShotCount' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, Job) == 0x000008, "Member 'FMovieGraphTraversalContext::Job' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, Shot) == 0x000010, "Member 'FMovieGraphTraversalContext::Shot' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, RootGraph) == 0x000018, "Member 'FMovieGraphTraversalContext::RootGraph' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, RenderDataIdentifier) == 0x000020, "Member 'FMovieGraphTraversalContext::RenderDataIdentifier' has a wrong offset!");
static_assert(offsetof(FMovieGraphTraversalContext, Time) == 0x000068, "Member 'FMovieGraphTraversalContext::Time' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphEvaluationContext
// 0x0160 (0x0160 - 0x0000)
struct FMovieGraphEvaluationContext final
{
public:
	struct FMovieGraphTraversalContext            UserContext;                                       // 0x0000(0x00D0)(NativeAccessSpecifierPublic)
	TMap<class UMovieGraphConfig*, struct FMovieGraphEvaluationContext_VisitedNodeInfo> VisitedNodesByOwningGraph;                         // 0x00D0(0x0050)(NativeAccessSpecifierPublic)
	class UMovieGraphPin*                         PinBeingFollowed;                                  // 0x0120(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieGraphSubgraphNode*>        SubgraphStack;                                     // 0x0128(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bCircularGraphReferenceFound;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4494[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TraversalError;                                    // 0x0140(0x0010)(NativeAccessSpecifierPublic)
	uint8                                         Pad_4495[0x10];                                    // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieGraphEvaluationContext) == 0x000008, "Wrong alignment on FMovieGraphEvaluationContext");
static_assert(sizeof(FMovieGraphEvaluationContext) == 0x000160, "Wrong size on FMovieGraphEvaluationContext");
static_assert(offsetof(FMovieGraphEvaluationContext, UserContext) == 0x000000, "Member 'FMovieGraphEvaluationContext::UserContext' has a wrong offset!");
static_assert(offsetof(FMovieGraphEvaluationContext, VisitedNodesByOwningGraph) == 0x0000D0, "Member 'FMovieGraphEvaluationContext::VisitedNodesByOwningGraph' has a wrong offset!");
static_assert(offsetof(FMovieGraphEvaluationContext, PinBeingFollowed) == 0x000120, "Member 'FMovieGraphEvaluationContext::PinBeingFollowed' has a wrong offset!");
static_assert(offsetof(FMovieGraphEvaluationContext, SubgraphStack) == 0x000128, "Member 'FMovieGraphEvaluationContext::SubgraphStack' has a wrong offset!");
static_assert(offsetof(FMovieGraphEvaluationContext, bCircularGraphReferenceFound) == 0x000138, "Member 'FMovieGraphEvaluationContext::bCircularGraphReferenceFound' has a wrong offset!");
static_assert(offsetof(FMovieGraphEvaluationContext, TraversalError) == 0x000140, "Member 'FMovieGraphEvaluationContext::TraversalError' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphImagePreviewData
// 0x0050 (0x0050 - 0x0000)
struct FMovieGraphImagePreviewData final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphRenderDataIdentifier        Identifier;                                        // 0x0008(0x0048)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphImagePreviewData) == 0x000008, "Wrong alignment on FMovieGraphImagePreviewData");
static_assert(sizeof(FMovieGraphImagePreviewData) == 0x000050, "Wrong size on FMovieGraphImagePreviewData");
static_assert(offsetof(FMovieGraphImagePreviewData, Texture) == 0x000000, "Member 'FMovieGraphImagePreviewData::Texture' has a wrong offset!");
static_assert(offsetof(FMovieGraphImagePreviewData, Identifier) == 0x000008, "Member 'FMovieGraphImagePreviewData::Identifier' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphResolveArgs
// 0x00A0 (0x00A0 - 0x0000)
struct FMovieGraphResolveArgs final
{
public:
	TMap<class FString, class FString>            FilenameArguments;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            FileMetadata;                                      // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphResolveArgs) == 0x000008, "Wrong alignment on FMovieGraphResolveArgs");
static_assert(sizeof(FMovieGraphResolveArgs) == 0x0000A0, "Wrong size on FMovieGraphResolveArgs");
static_assert(offsetof(FMovieGraphResolveArgs, FilenameArguments) == 0x000000, "Member 'FMovieGraphResolveArgs::FilenameArguments' has a wrong offset!");
static_assert(offsetof(FMovieGraphResolveArgs, FileMetadata) == 0x000050, "Member 'FMovieGraphResolveArgs::FileMetadata' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphVersioningSettings
// 0x0008 (0x0008 - 0x0000)
struct FMovieGraphVersioningSettings final
{
public:
	bool                                          bAutoVersioning;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4496[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionNumber;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphVersioningSettings) == 0x000004, "Wrong alignment on FMovieGraphVersioningSettings");
static_assert(sizeof(FMovieGraphVersioningSettings) == 0x000008, "Wrong size on FMovieGraphVersioningSettings");
static_assert(offsetof(FMovieGraphVersioningSettings, bAutoVersioning) == 0x000000, "Member 'FMovieGraphVersioningSettings::bAutoVersioning' has a wrong offset!");
static_assert(offsetof(FMovieGraphVersioningSettings, VersionNumber) == 0x000004, "Member 'FMovieGraphVersioningSettings::VersionNumber' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphNamedResolution
// 0x0020 (0x0020 - 0x0000)
struct FMovieGraphNamedResolution final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Resolution;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphNamedResolution) == 0x000008, "Wrong alignment on FMovieGraphNamedResolution");
static_assert(sizeof(FMovieGraphNamedResolution) == 0x000020, "Wrong size on FMovieGraphNamedResolution");
static_assert(offsetof(FMovieGraphNamedResolution, ProfileName) == 0x000000, "Member 'FMovieGraphNamedResolution::ProfileName' has a wrong offset!");
static_assert(offsetof(FMovieGraphNamedResolution, Resolution) == 0x000008, "Member 'FMovieGraphNamedResolution::Resolution' has a wrong offset!");
static_assert(offsetof(FMovieGraphNamedResolution, Description) == 0x000010, "Member 'FMovieGraphNamedResolution::Description' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphPropertyInfo
// 0x0018 (0x0018 - 0x0000)
struct FMovieGraphPropertyInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDynamicProperty;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieGraphValueType                          ValueType;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4497[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ValueTypeObject;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieGraphPropertyInfo) == 0x000008, "Wrong alignment on FMovieGraphPropertyInfo");
static_assert(sizeof(FMovieGraphPropertyInfo) == 0x000018, "Wrong size on FMovieGraphPropertyInfo");
static_assert(offsetof(FMovieGraphPropertyInfo, Name) == 0x000000, "Member 'FMovieGraphPropertyInfo::Name' has a wrong offset!");
static_assert(offsetof(FMovieGraphPropertyInfo, bIsDynamicProperty) == 0x000008, "Member 'FMovieGraphPropertyInfo::bIsDynamicProperty' has a wrong offset!");
static_assert(offsetof(FMovieGraphPropertyInfo, ValueType) == 0x000009, "Member 'FMovieGraphPropertyInfo::ValueType' has a wrong offset!");
static_assert(offsetof(FMovieGraphPropertyInfo, ValueTypeObject) == 0x000010, "Member 'FMovieGraphPropertyInfo::ValueTypeObject' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MovieGraphPinProperties
// 0x0020 (0x0020 - 0x0000)
struct FMovieGraphPinProperties final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieGraphValueType                          Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4498[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                TypeObject;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleConnections;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBranch;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBuiltIn;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4499[0x5];                                     // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieGraphPinProperties) == 0x000008, "Wrong alignment on FMovieGraphPinProperties");
static_assert(sizeof(FMovieGraphPinProperties) == 0x000020, "Wrong size on FMovieGraphPinProperties");
static_assert(offsetof(FMovieGraphPinProperties, Label) == 0x000000, "Member 'FMovieGraphPinProperties::Label' has a wrong offset!");
static_assert(offsetof(FMovieGraphPinProperties, Type) == 0x000008, "Member 'FMovieGraphPinProperties::Type' has a wrong offset!");
static_assert(offsetof(FMovieGraphPinProperties, TypeObject) == 0x000010, "Member 'FMovieGraphPinProperties::TypeObject' has a wrong offset!");
static_assert(offsetof(FMovieGraphPinProperties, bAllowMultipleConnections) == 0x000018, "Member 'FMovieGraphPinProperties::bAllowMultipleConnections' has a wrong offset!");
static_assert(offsetof(FMovieGraphPinProperties, bIsBranch) == 0x000019, "Member 'FMovieGraphPinProperties::bIsBranch' has a wrong offset!");
static_assert(offsetof(FMovieGraphPinProperties, bIsBuiltIn) == 0x00001A, "Member 'FMovieGraphPinProperties::bIsBuiltIn' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineSidecarCamera
// 0x0028 (0x0028 - 0x0000)
struct FMoviePipelineSidecarCamera final
{
public:
	struct FGuid                                  BindingID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449A[0x8];                                     // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePipelineSidecarCamera) == 0x000008, "Wrong alignment on FMoviePipelineSidecarCamera");
static_assert(sizeof(FMoviePipelineSidecarCamera) == 0x000028, "Wrong size on FMoviePipelineSidecarCamera");
static_assert(offsetof(FMoviePipelineSidecarCamera, BindingID) == 0x000000, "Member 'FMoviePipelineSidecarCamera::BindingID' has a wrong offset!");
static_assert(offsetof(FMoviePipelineSidecarCamera, Name) == 0x000018, "Member 'FMoviePipelineSidecarCamera::Name' has a wrong offset!");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineCameraCutInfo
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FMoviePipelineCameraCutInfo final
{
public:
	uint8                                         Pad_449B[0xC8];                                    // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoviePipelineCameraCutInfo) == 0x000008, "Wrong alignment on FMoviePipelineCameraCutInfo");
static_assert(sizeof(FMoviePipelineCameraCutInfo) == 0x0000C8, "Wrong size on FMoviePipelineCameraCutInfo");

// ScriptStruct MovieRenderPipelineCore.MoviePipelineFilenameResolveParams
// 0x0120 (0x0120 - 0x0000)
struct FMoviePipelineFilenameResolveParams final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberShot;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberRel;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberShotRel;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CameraNameOverride;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShotNameOverride;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroPadFrameNumberCount;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRelativeFrameNumbers;                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameOverride;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            FileNameFormatOverrides;                           // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            FileMetadata;                                      // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              InitializationTime;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              InitializationTimeOffset;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitializationVersion;                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449D[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineExecutorJob*              Job;                                               // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449E[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineExecutorShot*             ShotOverride;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalFrameNumberOffset;                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449F[0x4];                                     // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoviePipelineFilenameResolveParams) == 0x000008, "Wrong alignment on FMoviePipelineFilenameResolveParams");
static_assert(sizeof(FMoviePipelineFilenameResolveParams) == 0x000120, "Wrong size on FMoviePipelineFilenameResolveParams");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FrameNumber) == 0x000000, "Member 'FMoviePipelineFilenameResolveParams::FrameNumber' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FrameNumberShot) == 0x000004, "Member 'FMoviePipelineFilenameResolveParams::FrameNumberShot' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FrameNumberRel) == 0x000008, "Member 'FMoviePipelineFilenameResolveParams::FrameNumberRel' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FrameNumberShotRel) == 0x00000C, "Member 'FMoviePipelineFilenameResolveParams::FrameNumberShotRel' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, CameraNameOverride) == 0x000010, "Member 'FMoviePipelineFilenameResolveParams::CameraNameOverride' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, ShotNameOverride) == 0x000020, "Member 'FMoviePipelineFilenameResolveParams::ShotNameOverride' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, ZeroPadFrameNumberCount) == 0x000030, "Member 'FMoviePipelineFilenameResolveParams::ZeroPadFrameNumberCount' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, bForceRelativeFrameNumbers) == 0x000034, "Member 'FMoviePipelineFilenameResolveParams::bForceRelativeFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FileNameOverride) == 0x000038, "Member 'FMoviePipelineFilenameResolveParams::FileNameOverride' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FileNameFormatOverrides) == 0x000048, "Member 'FMoviePipelineFilenameResolveParams::FileNameFormatOverrides' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, FileMetadata) == 0x000098, "Member 'FMoviePipelineFilenameResolveParams::FileMetadata' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, InitializationTime) == 0x0000E8, "Member 'FMoviePipelineFilenameResolveParams::InitializationTime' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, InitializationTimeOffset) == 0x0000F0, "Member 'FMoviePipelineFilenameResolveParams::InitializationTimeOffset' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, InitializationVersion) == 0x0000F8, "Member 'FMoviePipelineFilenameResolveParams::InitializationVersion' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, Job) == 0x000100, "Member 'FMoviePipelineFilenameResolveParams::Job' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, ShotOverride) == 0x000110, "Member 'FMoviePipelineFilenameResolveParams::ShotOverride' has a wrong offset!");
static_assert(offsetof(FMoviePipelineFilenameResolveParams, AdditionalFrameNumberOffset) == 0x000118, "Member 'FMoviePipelineFilenameResolveParams::AdditionalFrameNumberOffset' has a wrong offset!");

}

