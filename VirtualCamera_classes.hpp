#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VirtualCamera

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "VirtualCamera_structs.hpp"
#include "VCamCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VirtualCamera.AssetFilteringAndSortingFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAssetFilteringAndSortingFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FAssetData> GetAllAssetsByMetaDataTags(const TSet<class FName>& RequiredTags, const TSet<class UClass*>& AllowedClasses);
	static void SortByAssetName(TArray<struct FAssetData>& Assets, ESortOrder SortOrder);
	static void SortByCustomPredicate(TArray<struct FAssetData>& Assets, TDelegate<void(struct FAssetData& Left, struct FAssetData& Right)> SortingPredicate, ESortOrder SortOrder);
	static bool SortByMetaData(TArray<struct FAssetData>& Assets, class FName MetaDataTag, EAssetTagMetaDataSortType MetaDataType, ESortOrder SortOrder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetFilteringAndSortingFunctionLibrary">();
	}
	static class UAssetFilteringAndSortingFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetFilteringAndSortingFunctionLibrary>();
	}
};
static_assert(alignof(UAssetFilteringAndSortingFunctionLibrary) == 0x000008, "Wrong alignment on UAssetFilteringAndSortingFunctionLibrary");
static_assert(sizeof(UAssetFilteringAndSortingFunctionLibrary) == 0x000028, "Wrong size on UAssetFilteringAndSortingFunctionLibrary");

// Class VirtualCamera.GameViewFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UGameViewFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanToggleGameView(EVCamTargetViewportID ViewportID);
	static bool IsInGameView(EVCamTargetViewportID ViewportID);
	static void RestoreGameViewStates(const TMap<EVCamTargetViewportID, bool>& Snapshot);
	static void SetGameViewEnabled(EVCamTargetViewportID ViewportID, bool bIsEnabled);
	static void SetGameViewEnabledForAllViewports(bool bIsEnabled);
	static TMap<EVCamTargetViewportID, bool> SnapshotGameViewStates();
	static void ToggleGameView(EVCamTargetViewportID ViewportID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameViewFunctionLibrary">();
	}
	static class UGameViewFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameViewFunctionLibrary>();
	}
};
static_assert(alignof(UGameViewFunctionLibrary) == 0x000008, "Wrong alignment on UGameViewFunctionLibrary");
static_assert(sizeof(UGameViewFunctionLibrary) == 0x000028, "Wrong size on UGameViewFunctionLibrary");

// Class VirtualCamera.LevelSequenceVCamLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelSequenceVCamLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FPilotableSequenceCameraInfo> FindPilotableCamerasInActiveLevelSequence();
	static bool HasAnyCameraCutsInLevelSequence(class ULevelSequence* Sequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceVCamLibrary">();
	}
	static class ULevelSequenceVCamLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceVCamLibrary>();
	}
};
static_assert(alignof(ULevelSequenceVCamLibrary) == 0x000008, "Wrong alignment on ULevelSequenceVCamLibrary");
static_assert(sizeof(ULevelSequenceVCamLibrary) == 0x000028, "Wrong size on ULevelSequenceVCamLibrary");

// Class VirtualCamera.MultiUserTakesVCamFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMultiUserTakesVCamFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetRecordOnClient(const struct FGuid& ClientEndpointId);
	static bool GetRecordOnClientLocal();
	static bool GetSynchronizeTakeRecorderTransactions(const struct FGuid& ClientEndpointId);
	static bool GetSynchronizeTakeRecorderTransactionsLocal();
	static void SetRecordOnClient(const struct FGuid& ClientEndpointId, bool bNewValue);
	static void SetRecordOnClientLocal(bool bNewValue);
	static void SetSynchronizeTakeRecorderTransactionsLocal(bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserTakesVCamFunctionLibrary">();
	}
	static class UMultiUserTakesVCamFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserTakesVCamFunctionLibrary>();
	}
};
static_assert(alignof(UMultiUserTakesVCamFunctionLibrary) == 0x000008, "Wrong alignment on UMultiUserTakesVCamFunctionLibrary");
static_assert(sizeof(UMultiUserTakesVCamFunctionLibrary) == 0x000028, "Wrong size on UMultiUserTakesVCamFunctionLibrary");

// Class VirtualCamera.TakeMetaDataTagsFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UTakeMetaDataTagsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TSet<class FName> GetAllTakeMetaDataTags();
	static class FName GetTakeMetaDataTag_Description();
	static class FName GetTakeMetaDataTag_LevelPath();
	static class FName GetTakeMetaDataTag_Slate();
	static class FName GetTakeMetaDataTag_TakeNumber();
	static class FName GetTakeMetaDataTag_TimecodeIn();
	static class FName GetTakeMetaDataTag_TimecodeOut();
	static class FName GetTakeMetaDataTag_Timestamp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeMetaDataTagsFunctionLibrary">();
	}
	static class UTakeMetaDataTagsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeMetaDataTagsFunctionLibrary>();
	}
};
static_assert(alignof(UTakeMetaDataTagsFunctionLibrary) == 0x000008, "Wrong alignment on UTakeMetaDataTagsFunctionLibrary");
static_assert(sizeof(UTakeMetaDataTagsFunctionLibrary) == 0x000028, "Wrong size on UTakeMetaDataTagsFunctionLibrary");

// Class VirtualCamera.VCamBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVCamBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CalculateAutoFocusDistance(const struct FVector2D& ReticlePosition, class UCineCameraComponent* CineCamera);
	static bool CallFunctionByName(class UObject* ObjPtr, class FName FunctionName);
	static struct FFrameRate ConvertStringToFrameRate(const class FString& InFrameRateString);
	static bool CopyToCineCameraActor(class UCineCameraComponent* SourceCameraComponent, class ACineCameraActor* TargetCameraActor);
	static bool DeprojectScreenToWorld(const struct FVector2D& InScreenPosition, struct FVector* OutWorldPosition, struct FVector* OutWorldDirection);
	static bool DeprojectScreenToWorldByViewport(const struct FVector2D& InScreenPosition, EVCamTargetViewportID TargetViewport, struct FVector* OutWorldPosition, struct FVector* OutWorldDirection);
	static class UObject* EditorLoadAsset(const class FString& AssetPath);
	static bool EditorSaveAsset(const class FString& AssetPath);
	static void EditorSetGameView(bool bIsToggled);
	static void EnableDebugFocusPlane(class UCineCameraComponent* CineCamera, bool bEnabled);
	static TArray<class UObject*> GetBoundObjects(const struct FMovieSceneObjectBindingID& CameraBindingID);
	static class ULevelSequence* GetCurrentLevelSequence();
	static int32 GetCurrentLevelSequenceCurrentFrame();
	static struct FFrameRate GetDisplayRate(class ULevelSequence* LevelSequence);
	static struct FTimecode GetLevelSequenceFrameAsTimecode(const class ULevelSequence* LevelSequence, int32 InFrame);
	static struct FTimecode GetLevelSequenceFrameAsTimecodeWithoutObject(const struct FFrameRate& DisplayRate, int32 InFrame);
	static int32 GetLevelSequenceLengthInFrames(const class ULevelSequence* LevelSequence);
	static class FString GetNextUndoDescription();
	static TMap<class FName, class FString> GetObjectMetadataTags(class UObject* InObject);
	static class ULevelSequence* GetPendingTakeLevelSequence();
	static float GetPlaybackSpeed();
	static class UTexture* ImportSnapshotTexture(const class FString& Filename, const class FString& SubFolderName, const class FString& AbsolutePathPackage);
	static bool IsCurrentLevelSequencePlaying();
	static bool IsGameRunning();
	static bool IsRecording();
	static bool IsTakeRecorderPanelOpen();
	static void ModifyObjectMetadataTags(class UObject* InObject, class FName InTag, const class FString& InValue);
	static bool MultiTraceHitProxyOnViewport(const struct FVector2D& InScreenPosition, EVCamTargetViewportID InTargetViewport, const struct FVCamTraceHitProxyQueryParams& InQueryParams, TArray<struct FVCamTraceHitProxyResult>* Result);
	static bool OpenLevelSequence(class ULevelSequence* LevelSequence);
	static void PauseCurrentLevelSequence();
	static void PilotActor(class AActor* SelectedActor);
	static void PlayCurrentLevelSequence();
	static void SetActorLabel(class AActor* Actor, const class FString& NewActorLabel);
	static void SetCurrentLevelSequenceCurrentFrame(int32 NewFrame);
	static void SetOnTakeRecorderSlateChanged(TDelegate<void(const class FString& Slate)> OnTakeRecorderSlateChanged);
	static void SetPlaybackSpeed(float Value);
	static TArray<struct FAssetData> SortAssetsByTimecodeAssetData(const TArray<struct FAssetData>& LevelSequenceAssets);
	static int32 TimecodeToFrameAmount(const struct FTimecode& Timecode, const struct FFrameRate& InFrameRate);
	static bool TryOpenTakeRecorderPanel();
	static bool UpdatePostProcessSettingsForCapture(class USceneCaptureComponent2D* CaptureComponent, float DepthOfField, float FStopValue);

	void OnTakeRecorderSlateChanged_VCam__DelegateSignature(const class FString& Slate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamBlueprintFunctionLibrary">();
	}
	static class UVCamBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UVCamBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UVCamBlueprintFunctionLibrary");
static_assert(sizeof(UVCamBlueprintFunctionLibrary) == 0x000028, "Wrong size on UVCamBlueprintFunctionLibrary");

// Class VirtualCamera.VirtualCameraUserSettings
// 0x0008 (0x0030 - 0x0028)
class UVirtualCameraUserSettings final : public UObject
{
public:
	EVCamTutorialCompletionState                  VCamTutorialCompletionState;                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_474B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVirtualCameraUserSettings* GetSettings();

	void SetTutorialCompletionState(EVCamTutorialCompletionState NewState);

	bool IsTutorialCompleted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCameraUserSettings">();
	}
	static class UVirtualCameraUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCameraUserSettings>();
	}
};
static_assert(alignof(UVirtualCameraUserSettings) == 0x000008, "Wrong alignment on UVirtualCameraUserSettings");
static_assert(sizeof(UVirtualCameraUserSettings) == 0x000030, "Wrong size on UVirtualCameraUserSettings");
static_assert(offsetof(UVirtualCameraUserSettings, VCamTutorialCompletionState) == 0x000028, "Member 'UVirtualCameraUserSettings::VCamTutorialCompletionState' has a wrong offset!");

// Class VirtualCamera.VirtualCameraClipsMetaData
// 0x0040 (0x0068 - 0x0028)
class UVirtualCameraClipsMetaData final : public UObject
{
public:
	uint8                                         Pad_474C[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalLength;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsSelected;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474D[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RecordedLevelName;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FrameCountStart;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FrameCountEnd;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LengthInFrames;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                             DisplayRate;                                       // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsACineCameraRecording;                           // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsNoGood;                                         // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsFlagged;                                        // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474E[0x1];                                     // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FavoriteLevel;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsCreatedFromVCam;                                // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474F[0x3];                                     // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TSet<class FName> GetAllClipsMetaDataTags();
	static class FName GetClipsMetaDataTag_DisplayRate();
	static class FName GetClipsMetaDataTag_FavoriteLevel();
	static class FName GetClipsMetaDataTag_FocalLength();
	static class FName GetClipsMetaDataTag_FrameCountEnd();
	static class FName GetClipsMetaDataTag_FrameCountStart();
	static class FName GetClipsMetaDataTag_IsCineACineCameraRecording();
	static class FName GetClipsMetaDataTag_IsCreatedFromVCam();
	static class FName GetClipsMetaDataTag_IsFlagged();
	static class FName GetClipsMetaDataTag_IsNoGood();
	static class FName GetClipsMetaDataTag_IsSelected();
	static class FName GetClipsMetaDataTag_LengthInFrames();
	static class FName GetClipsMetaDataTag_RecordedLevel();

	struct FFrameRate GetDisplayRate();
	int32 GetLengthInFrames();
	void SetDisplayRate(const struct FFrameRate& InDisplayRate);
	void SetFocalLength(float InFocalLength);
	void SetFrameCountEnd(int32 InFrame);
	void SetFrameCountStart(int32 InFrame);
	void SetIsACineCameraRecording(bool bInIsACineCameraRecording);
	void SetLengthInFrames(int32 InLength);
	void SetRecordedLevelName(const class FString& InLevelName);
	void SetSelected(bool bInSelected);

	float GetFocalLength() const;
	int32 GetFrameCountEnd() const;
	int32 GetFrameCountStart() const;
	bool GetIsACineCameraRecording() const;
	class FString GetRecordedLevelName() const;
	bool GetSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCameraClipsMetaData">();
	}
	static class UVirtualCameraClipsMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCameraClipsMetaData>();
	}
};
static_assert(alignof(UVirtualCameraClipsMetaData) == 0x000008, "Wrong alignment on UVirtualCameraClipsMetaData");
static_assert(sizeof(UVirtualCameraClipsMetaData) == 0x000068, "Wrong size on UVirtualCameraClipsMetaData");
static_assert(offsetof(UVirtualCameraClipsMetaData, FocalLength) == 0x000030, "Member 'UVirtualCameraClipsMetaData::FocalLength' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, bIsSelected) == 0x000034, "Member 'UVirtualCameraClipsMetaData::bIsSelected' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, RecordedLevelName) == 0x000038, "Member 'UVirtualCameraClipsMetaData::RecordedLevelName' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, FrameCountStart) == 0x000048, "Member 'UVirtualCameraClipsMetaData::FrameCountStart' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, FrameCountEnd) == 0x00004C, "Member 'UVirtualCameraClipsMetaData::FrameCountEnd' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, LengthInFrames) == 0x000050, "Member 'UVirtualCameraClipsMetaData::LengthInFrames' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, DisplayRate) == 0x000054, "Member 'UVirtualCameraClipsMetaData::DisplayRate' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, bIsACineCameraRecording) == 0x00005C, "Member 'UVirtualCameraClipsMetaData::bIsACineCameraRecording' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, bIsNoGood) == 0x00005D, "Member 'UVirtualCameraClipsMetaData::bIsNoGood' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, bIsFlagged) == 0x00005E, "Member 'UVirtualCameraClipsMetaData::bIsFlagged' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, FavoriteLevel) == 0x000060, "Member 'UVirtualCameraClipsMetaData::FavoriteLevel' has a wrong offset!");
static_assert(offsetof(UVirtualCameraClipsMetaData, bIsCreatedFromVCam) == 0x000064, "Member 'UVirtualCameraClipsMetaData::bIsCreatedFromVCam' has a wrong offset!");

}

