#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AKSoundSource

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_AKSoundSource.BP_AKSoundSource_C.AttachToOwner
// 0x0010 (0x0010 - 0x0000)
struct BP_AKSoundSource_C_AttachToOwner final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_AttachToOwner) == 0x000008, "Wrong alignment on BP_AKSoundSource_C_AttachToOwner");
static_assert(sizeof(BP_AKSoundSource_C_AttachToOwner) == 0x000010, "Wrong size on BP_AKSoundSource_C_AttachToOwner");
static_assert(offsetof(BP_AKSoundSource_C_AttachToOwner, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AKSoundSource_C_AttachToOwner::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_AttachToOwner, CallFunc_K2_AttachToActor_ReturnValue) == 0x000008, "Member 'BP_AKSoundSource_C_AttachToOwner::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_AttachToOwner, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_AKSoundSource_C_AttachToOwner::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AKSoundSource.BP_AKSoundSource_C.CustomEvent
// 0x0010 (0x0010 - 0x0000)
struct BP_AKSoundSource_C_CustomEvent final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B46[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_CustomEvent) == 0x000008, "Wrong alignment on BP_AKSoundSource_C_CustomEvent");
static_assert(sizeof(BP_AKSoundSource_C_CustomEvent) == 0x000010, "Wrong size on BP_AKSoundSource_C_CustomEvent");
static_assert(offsetof(BP_AKSoundSource_C_CustomEvent, CallbackType) == 0x000000, "Member 'BP_AKSoundSource_C_CustomEvent::CallbackType' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_CustomEvent, CallbackInfo) == 0x000008, "Member 'BP_AKSoundSource_C_CustomEvent::CallbackInfo' has a wrong offset!");

// Function BP_AKSoundSource.BP_AKSoundSource_C.ExecuteUbergraph_BP_AKSoundSource
// 0x0078 (0x0078 - 0x0000)
struct BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAkCallbackType                               K2Node_CustomEvent_CallbackType;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B47[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        K2Node_CustomEvent_CallbackInfo;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          K2Node_CustomEvent_AkEvent_1;                      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_MaxTime;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B48[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B49[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_CustomEvent_AkEvent;                        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4A[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMin_B_ImplicitCast;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource) == 0x000008, "Wrong alignment on BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource");
static_assert(sizeof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource) == 0x000078, "Wrong size on BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, EntryPoint) == 0x000000, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, Temp_delegate_Variable) == 0x000004, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CustomEvent_CallbackType) == 0x000024, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CustomEvent_CallbackType' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CustomEvent_CallbackInfo) == 0x000028, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CustomEvent_CallbackInfo' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CustomEvent_AkEvent_1) == 0x000030, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CustomEvent_AkEvent_1' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CustomEvent_MaxTime) == 0x000038, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CustomEvent_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_FMin_ReturnValue) == 0x000048, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_PostAkEvent_ReturnValue) == 0x000050, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, K2Node_CustomEvent_AkEvent) == 0x000058, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::K2Node_CustomEvent_AkEvent' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_PostAkEvent_ReturnValue_1) == 0x000060, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_FMin_B_ImplicitCast) == 0x000068, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_FMin_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource, CallFunc_Delay_Duration_ImplicitCast) == 0x000070, "Member 'BP_AKSoundSource_C_ExecuteUbergraph_BP_AKSoundSource::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function BP_AKSoundSource.BP_AKSoundSource_C.Play
// 0x0008 (0x0008 - 0x0000)
struct BP_AKSoundSource_C_Play final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_Play) == 0x000008, "Wrong alignment on BP_AKSoundSource_C_Play");
static_assert(sizeof(BP_AKSoundSource_C_Play) == 0x000008, "Wrong size on BP_AKSoundSource_C_Play");
static_assert(offsetof(BP_AKSoundSource_C_Play, AkEvent) == 0x000000, "Member 'BP_AKSoundSource_C_Play::AkEvent' has a wrong offset!");

// Function BP_AKSoundSource.BP_AKSoundSource_C.PlayAndDestroy
// 0x0010 (0x0010 - 0x0000)
struct BP_AKSoundSource_C_PlayAndDestroy final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTime;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_PlayAndDestroy) == 0x000008, "Wrong alignment on BP_AKSoundSource_C_PlayAndDestroy");
static_assert(sizeof(BP_AKSoundSource_C_PlayAndDestroy) == 0x000010, "Wrong size on BP_AKSoundSource_C_PlayAndDestroy");
static_assert(offsetof(BP_AKSoundSource_C_PlayAndDestroy, AkEvent) == 0x000000, "Member 'BP_AKSoundSource_C_PlayAndDestroy::AkEvent' has a wrong offset!");
static_assert(offsetof(BP_AKSoundSource_C_PlayAndDestroy, MaxTime) == 0x000008, "Member 'BP_AKSoundSource_C_PlayAndDestroy::MaxTime' has a wrong offset!");

// Function BP_AKSoundSource.BP_AKSoundSource_C.PlayStartSound
// 0x0001 (0x0001 - 0x0000)
struct BP_AKSoundSource_C_PlayStartSound final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AKSoundSource_C_PlayStartSound) == 0x000001, "Wrong alignment on BP_AKSoundSource_C_PlayStartSound");
static_assert(sizeof(BP_AKSoundSource_C_PlayStartSound) == 0x000001, "Wrong size on BP_AKSoundSource_C_PlayStartSound");
static_assert(offsetof(BP_AKSoundSource_C_PlayStartSound, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AKSoundSource_C_PlayStartSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

