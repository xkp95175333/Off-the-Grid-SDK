#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GiveEffectZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GiveEffectZone.BP_GiveEffectZone_C
// 0x0040 (0x02E0 - 0x02A0)
class ABP_GiveEffectZone_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EffectToApply;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             BillboardSprite;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DelayTime;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EffectApplied;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void UserConstructionScript();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void EnableOverlap();
	void ExecuteUbergraph_BP_GiveEffectZone(int32 EntryPoint);
	void EffectApplied__DelegateSignature();
	void DisableOverlap();
	void ApplyEffect(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GiveEffectZone_C">();
	}
	static class ABP_GiveEffectZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GiveEffectZone_C>();
	}
};
static_assert(alignof(ABP_GiveEffectZone_C) == 0x000008, "Wrong alignment on ABP_GiveEffectZone_C");
static_assert(sizeof(ABP_GiveEffectZone_C) == 0x0002E0, "Wrong size on ABP_GiveEffectZone_C");
static_assert(offsetof(ABP_GiveEffectZone_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_GiveEffectZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, Billboard) == 0x0002A8, "Member 'ABP_GiveEffectZone_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, Sphere) == 0x0002B0, "Member 'ABP_GiveEffectZone_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, EffectToApply) == 0x0002B8, "Member 'ABP_GiveEffectZone_C::EffectToApply' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, BillboardSprite) == 0x0002C0, "Member 'ABP_GiveEffectZone_C::BillboardSprite' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, DelayTime) == 0x0002C8, "Member 'ABP_GiveEffectZone_C::DelayTime' has a wrong offset!");
static_assert(offsetof(ABP_GiveEffectZone_C, EffectApplied) == 0x0002D0, "Member 'ABP_GiveEffectZone_C::EffectApplied' has a wrong offset!");

}

