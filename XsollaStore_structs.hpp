#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaUtils_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum XsollaStore.EXsollaOrderStatus
// NumValues: 0x0006
enum class EXsollaOrderStatus : uint8
{
	Unknown                                  = 0,
	New                                      = 1,
	Paid                                     = 2,
	Done                                     = 3,
	Canceled                                 = 4,
	EXsollaOrderStatus_MAX                   = 5,
};

// ScriptStruct XsollaStore.SubscriptionPeriod
// 0x0018 (0x0018 - 0x0000)
struct FSubscriptionPeriod final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2843[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Unit;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionPeriod) == 0x000008, "Wrong alignment on FSubscriptionPeriod");
static_assert(sizeof(FSubscriptionPeriod) == 0x000018, "Wrong size on FSubscriptionPeriod");
static_assert(offsetof(FSubscriptionPeriod, Value) == 0x000000, "Member 'FSubscriptionPeriod::Value' has a wrong offset!");
static_assert(offsetof(FSubscriptionPeriod, Unit) == 0x000008, "Member 'FSubscriptionPeriod::Unit' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionPlanCharge
// 0x0018 (0x0018 - 0x0000)
struct FSubscriptionPlanCharge final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Setup_fee;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionPlanCharge) == 0x000008, "Wrong alignment on FSubscriptionPlanCharge");
static_assert(sizeof(FSubscriptionPlanCharge) == 0x000018, "Wrong size on FSubscriptionPlanCharge");
static_assert(offsetof(FSubscriptionPlanCharge, Amount) == 0x000000, "Member 'FSubscriptionPlanCharge::Amount' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlanCharge, Setup_fee) == 0x000004, "Member 'FSubscriptionPlanCharge::Setup_fee' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlanCharge, Currency) == 0x000008, "Member 'FSubscriptionPlanCharge::Currency' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionPlanPromotion
// 0x0008 (0x0008 - 0x0000)
struct FSubscriptionPlanPromotion final
{
public:
	float                                         Promotion_charge_amount;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Promotion_remaining_charges;                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionPlanPromotion) == 0x000004, "Wrong alignment on FSubscriptionPlanPromotion");
static_assert(sizeof(FSubscriptionPlanPromotion) == 0x000008, "Wrong size on FSubscriptionPlanPromotion");
static_assert(offsetof(FSubscriptionPlanPromotion, Promotion_charge_amount) == 0x000000, "Member 'FSubscriptionPlanPromotion::Promotion_charge_amount' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlanPromotion, Promotion_remaining_charges) == 0x000004, "Member 'FSubscriptionPlanPromotion::Promotion_remaining_charges' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionPlan
// 0x00A8 (0x00A8 - 0x0000)
struct FSubscriptionPlan final
{
public:
	int32                                         Plan_id;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2844[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Plan_external_id;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_group_id;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_type;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_name;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_description;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_start_date;                                   // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_end_date;                                     // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trial_period;                                      // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2845[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubscriptionPeriod                    Period;                                            // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubscriptionPlanCharge                Charge;                                            // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubscriptionPlanPromotion             Promotion;                                         // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionPlan) == 0x000008, "Wrong alignment on FSubscriptionPlan");
static_assert(sizeof(FSubscriptionPlan) == 0x0000A8, "Wrong size on FSubscriptionPlan");
static_assert(offsetof(FSubscriptionPlan, Plan_id) == 0x000000, "Member 'FSubscriptionPlan::Plan_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_external_id) == 0x000008, "Member 'FSubscriptionPlan::Plan_external_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_group_id) == 0x000018, "Member 'FSubscriptionPlan::Plan_group_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_type) == 0x000028, "Member 'FSubscriptionPlan::Plan_type' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_name) == 0x000038, "Member 'FSubscriptionPlan::Plan_name' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_description) == 0x000048, "Member 'FSubscriptionPlan::Plan_description' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_start_date) == 0x000058, "Member 'FSubscriptionPlan::Plan_start_date' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Plan_end_date) == 0x000060, "Member 'FSubscriptionPlan::Plan_end_date' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Trial_period) == 0x000068, "Member 'FSubscriptionPlan::Trial_period' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Period) == 0x000070, "Member 'FSubscriptionPlan::Period' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Charge) == 0x000088, "Member 'FSubscriptionPlan::Charge' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlan, Promotion) == 0x0000A0, "Member 'FSubscriptionPlan::Promotion' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItemMediaList
// 0x0020 (0x0020 - 0x0000)
struct FStoreItemMediaList final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItemMediaList) == 0x000008, "Wrong alignment on FStoreItemMediaList");
static_assert(sizeof(FStoreItemMediaList) == 0x000020, "Wrong size on FStoreItemMediaList");
static_assert(offsetof(FStoreItemMediaList, Type) == 0x000000, "Member 'FStoreItemMediaList::Type' has a wrong offset!");
static_assert(offsetof(FStoreItemMediaList, URL) == 0x000010, "Member 'FStoreItemMediaList::URL' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackageContent
// 0x0078 (0x0078 - 0x0000)
struct FVirtualCurrencyPackageContent final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2846[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaItemOptions                     Inventory_options;                                 // 0x0058(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPackageContent) == 0x000008, "Wrong alignment on FVirtualCurrencyPackageContent");
static_assert(sizeof(FVirtualCurrencyPackageContent) == 0x000078, "Wrong size on FVirtualCurrencyPackageContent");
static_assert(offsetof(FVirtualCurrencyPackageContent, Sku) == 0x000000, "Member 'FVirtualCurrencyPackageContent::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Name) == 0x000010, "Member 'FVirtualCurrencyPackageContent::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Type) == 0x000020, "Member 'FVirtualCurrencyPackageContent::Type' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Description) == 0x000030, "Member 'FVirtualCurrencyPackageContent::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Image_url) == 0x000040, "Member 'FVirtualCurrencyPackageContent::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Quantity) == 0x000050, "Member 'FVirtualCurrencyPackageContent::Quantity' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Inventory_options) == 0x000058, "Member 'FVirtualCurrencyPackageContent::Inventory_options' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackage
// 0x0198 (0x0198 - 0x0000)
struct FVirtualCurrencyPackage final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 bundle_type;                                       // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2847[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0088(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVirtualCurrencyPackageContent         Content;                                           // 0x00C8(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0150(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2848[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreItemMediaList>            Media_list;                                        // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaStoreItemPromotion>      Promotions;                                        // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemLimits                 Limits;                                            // 0x0178(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPackage) == 0x000008, "Wrong alignment on FVirtualCurrencyPackage");
static_assert(sizeof(FVirtualCurrencyPackage) == 0x000198, "Wrong size on FVirtualCurrencyPackage");
static_assert(offsetof(FVirtualCurrencyPackage, Sku) == 0x000000, "Member 'FVirtualCurrencyPackage::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Name) == 0x000010, "Member 'FVirtualCurrencyPackage::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Type) == 0x000020, "Member 'FVirtualCurrencyPackage::Type' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Description) == 0x000030, "Member 'FVirtualCurrencyPackage::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Image_url) == 0x000040, "Member 'FVirtualCurrencyPackage::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Attributes) == 0x000050, "Member 'FVirtualCurrencyPackage::Attributes' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Groups) == 0x000060, "Member 'FVirtualCurrencyPackage::Groups' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, bundle_type) == 0x000070, "Member 'FVirtualCurrencyPackage::bundle_type' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Is_free) == 0x000080, "Member 'FVirtualCurrencyPackage::Is_free' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Price) == 0x000088, "Member 'FVirtualCurrencyPackage::Price' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Virtual_prices) == 0x0000B8, "Member 'FVirtualCurrencyPackage::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Content) == 0x0000C8, "Member 'FVirtualCurrencyPackage::Content' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Long_description) == 0x000140, "Member 'FVirtualCurrencyPackage::Long_description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Order) == 0x000150, "Member 'FVirtualCurrencyPackage::Order' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Media_list) == 0x000158, "Member 'FVirtualCurrencyPackage::Media_list' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Promotions) == 0x000168, "Member 'FVirtualCurrencyPackage::Promotions' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Limits) == 0x000178, "Member 'FVirtualCurrencyPackage::Limits' has a wrong offset!");

// ScriptStruct XsollaStore.OwnedGameItem
// 0x0070 (0x0070 - 0x0000)
struct FOwnedGameItem final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Project_id;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2849[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Game_sku;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Drm;                                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_pre_order;                                      // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284A[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOwnedGameItem) == 0x000008, "Wrong alignment on FOwnedGameItem");
static_assert(sizeof(FOwnedGameItem) == 0x000070, "Wrong size on FOwnedGameItem");
static_assert(offsetof(FOwnedGameItem, Name) == 0x000000, "Member 'FOwnedGameItem::Name' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Description) == 0x000010, "Member 'FOwnedGameItem::Description' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Project_id) == 0x000020, "Member 'FOwnedGameItem::Project_id' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Game_sku) == 0x000028, "Member 'FOwnedGameItem::Game_sku' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Drm) == 0x000038, "Member 'FOwnedGameItem::Drm' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Image_url) == 0x000048, "Member 'FOwnedGameItem::Image_url' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Is_pre_order) == 0x000058, "Member 'FOwnedGameItem::Is_pre_order' has a wrong offset!");
static_assert(offsetof(FOwnedGameItem, Attributes) == 0x000060, "Member 'FOwnedGameItem::Attributes' has a wrong offset!");

// ScriptStruct XsollaStore.OwnedGamesList
// 0x0018 (0x0018 - 0x0000)
struct FOwnedGamesList final
{
public:
	bool                                          Has_more;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Total_items_count;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOwnedGameItem>                 Items;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOwnedGamesList) == 0x000008, "Wrong alignment on FOwnedGamesList");
static_assert(sizeof(FOwnedGamesList) == 0x000018, "Wrong size on FOwnedGamesList");
static_assert(offsetof(FOwnedGamesList, Has_more) == 0x000000, "Member 'FOwnedGamesList::Has_more' has a wrong offset!");
static_assert(offsetof(FOwnedGamesList, Total_items_count) == 0x000004, "Member 'FOwnedGamesList::Total_items_count' has a wrong offset!");
static_assert(offsetof(FOwnedGamesList, Items) == 0x000008, "Member 'FOwnedGamesList::Items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreCartItem
// 0x0100 (0x0100 - 0x0000)
struct FStoreCartItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_bonus;                                          // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284C[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0088(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Vc_prices;                                         // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284D[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaItemOptions                     Inventory_options;                                 // 0x00E0(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreCartItem) == 0x000008, "Wrong alignment on FStoreCartItem");
static_assert(sizeof(FStoreCartItem) == 0x000100, "Wrong size on FStoreCartItem");
static_assert(offsetof(FStoreCartItem, Sku) == 0x000000, "Member 'FStoreCartItem::Sku' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Name) == 0x000010, "Member 'FStoreCartItem::Name' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Attributes) == 0x000020, "Member 'FStoreCartItem::Attributes' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Groups) == 0x000030, "Member 'FStoreCartItem::Groups' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Description) == 0x000040, "Member 'FStoreCartItem::Description' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Long_description) == 0x000050, "Member 'FStoreCartItem::Long_description' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Type) == 0x000060, "Member 'FStoreCartItem::Type' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Virtual_item_type) == 0x000070, "Member 'FStoreCartItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Is_free) == 0x000080, "Member 'FStoreCartItem::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Is_bonus) == 0x000081, "Member 'FStoreCartItem::Is_bonus' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Price) == 0x000088, "Member 'FStoreCartItem::Price' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Vc_prices) == 0x0000B8, "Member 'FStoreCartItem::Vc_prices' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Image_url) == 0x0000C8, "Member 'FStoreCartItem::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Quantity) == 0x0000D8, "Member 'FStoreCartItem::Quantity' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Inventory_options) == 0x0000E0, "Member 'FStoreCartItem::Inventory_options' has a wrong offset!");

// ScriptStruct XsollaStore.StoreCart
// 0x0058 (0x0058 - 0x0000)
struct FStoreCart final
{
public:
	class FString                                 Cart_id;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaPrice                           Price;                                             // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284E[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreCartItem>                 Items;                                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreCart) == 0x000008, "Wrong alignment on FStoreCart");
static_assert(sizeof(FStoreCart) == 0x000058, "Wrong size on FStoreCart");
static_assert(offsetof(FStoreCart, Cart_id) == 0x000000, "Member 'FStoreCart::Cart_id' has a wrong offset!");
static_assert(offsetof(FStoreCart, Price) == 0x000010, "Member 'FStoreCart::Price' has a wrong offset!");
static_assert(offsetof(FStoreCart, Is_free) == 0x000040, "Member 'FStoreCart::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreCart, Items) == 0x000048, "Member 'FStoreCart::Items' has a wrong offset!");

// ScriptStruct XsollaStore.ConnectionData
// 0x0018 (0x0018 - 0x0000)
struct FConnectionData final
{
public:
	class FString                                 Auth;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Project_id;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectionData) == 0x000008, "Wrong alignment on FConnectionData");
static_assert(sizeof(FConnectionData) == 0x000018, "Wrong size on FConnectionData");
static_assert(offsetof(FConnectionData, Auth) == 0x000000, "Member 'FConnectionData::Auth' has a wrong offset!");
static_assert(offsetof(FConnectionData, Project_id) == 0x000010, "Member 'FConnectionData::Project_id' has a wrong offset!");

// ScriptStruct XsollaStore.ConnectCommand
// 0x0018 (0x0018 - 0x0000)
struct FConnectCommand final
{
public:
	struct FConnectionData                        Data;                                              // 0x0000(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectCommand) == 0x000008, "Wrong alignment on FConnectCommand");
static_assert(sizeof(FConnectCommand) == 0x000018, "Wrong size on FConnectCommand");
static_assert(offsetof(FConnectCommand, Data) == 0x000000, "Member 'FConnectCommand::Data' has a wrong offset!");

// ScriptStruct XsollaStore.ConnectionMessage
// 0x0020 (0x0020 - 0x0000)
struct FConnectionMessage final
{
public:
	struct FConnectCommand                        Connect;                                           // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2850[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectionMessage) == 0x000008, "Wrong alignment on FConnectionMessage");
static_assert(sizeof(FConnectionMessage) == 0x000020, "Wrong size on FConnectionMessage");
static_assert(offsetof(FConnectionMessage, Connect) == 0x000000, "Member 'FConnectionMessage::Connect' has a wrong offset!");
static_assert(offsetof(FConnectionMessage, ID) == 0x000018, "Member 'FConnectionMessage::ID' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrency
// 0x0130 (0x0130 - 0x0000)
struct FVirtualCurrency final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Groups;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2851[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0078(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaItemOptions                     Inventory_options;                                 // 0x00B8(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2852[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreItemMediaList>            Media_list;                                        // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaStoreItemPromotion>      Promotions;                                        // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemLimits                 Limits;                                            // 0x0110(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrency) == 0x000008, "Wrong alignment on FVirtualCurrency");
static_assert(sizeof(FVirtualCurrency) == 0x000130, "Wrong size on FVirtualCurrency");
static_assert(offsetof(FVirtualCurrency, Sku) == 0x000000, "Member 'FVirtualCurrency::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Name) == 0x000010, "Member 'FVirtualCurrency::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Groups) == 0x000020, "Member 'FVirtualCurrency::Groups' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Attributes) == 0x000030, "Member 'FVirtualCurrency::Attributes' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Type) == 0x000040, "Member 'FVirtualCurrency::Type' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Description) == 0x000050, "Member 'FVirtualCurrency::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Image_url) == 0x000060, "Member 'FVirtualCurrency::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Is_free) == 0x000070, "Member 'FVirtualCurrency::Is_free' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Price) == 0x000078, "Member 'FVirtualCurrency::Price' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Virtual_prices) == 0x0000A8, "Member 'FVirtualCurrency::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Inventory_options) == 0x0000B8, "Member 'FVirtualCurrency::Inventory_options' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Long_description) == 0x0000D8, "Member 'FVirtualCurrency::Long_description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Order) == 0x0000E8, "Member 'FVirtualCurrency::Order' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Media_list) == 0x0000F0, "Member 'FVirtualCurrency::Media_list' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Promotions) == 0x000100, "Member 'FVirtualCurrency::Promotions' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Limits) == 0x000110, "Member 'FVirtualCurrency::Limits' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaOrderItem
// 0x0058 (0x0058 - 0x0000)
struct FXsollaOrderItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2853[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Is_free;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaPrice                           Price;                                             // 0x0028(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaOrderItem) == 0x000008, "Wrong alignment on FXsollaOrderItem");
static_assert(sizeof(FXsollaOrderItem) == 0x000058, "Wrong size on FXsollaOrderItem");
static_assert(offsetof(FXsollaOrderItem, Sku) == 0x000000, "Member 'FXsollaOrderItem::Sku' has a wrong offset!");
static_assert(offsetof(FXsollaOrderItem, Quantity) == 0x000010, "Member 'FXsollaOrderItem::Quantity' has a wrong offset!");
static_assert(offsetof(FXsollaOrderItem, Is_free) == 0x000018, "Member 'FXsollaOrderItem::Is_free' has a wrong offset!");
static_assert(offsetof(FXsollaOrderItem, Price) == 0x000028, "Member 'FXsollaOrderItem::Price' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaOrderContent
// 0x00D0 (0x00D0 - 0x0000)
struct FXsollaOrderContent final
{
public:
	struct FXsollaPrice                           Price;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FXsollaVirtualCurrencyPrice            Virtual_price;                                     // 0x0030(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Is_free;                                           // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaOrderItem>               Items;                                             // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaOrderContent) == 0x000008, "Wrong alignment on FXsollaOrderContent");
static_assert(sizeof(FXsollaOrderContent) == 0x0000D0, "Wrong size on FXsollaOrderContent");
static_assert(offsetof(FXsollaOrderContent, Price) == 0x000000, "Member 'FXsollaOrderContent::Price' has a wrong offset!");
static_assert(offsetof(FXsollaOrderContent, Virtual_price) == 0x000030, "Member 'FXsollaOrderContent::Virtual_price' has a wrong offset!");
static_assert(offsetof(FXsollaOrderContent, Is_free) == 0x0000B0, "Member 'FXsollaOrderContent::Is_free' has a wrong offset!");
static_assert(offsetof(FXsollaOrderContent, Items) == 0x0000C0, "Member 'FXsollaOrderContent::Items' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaOrder
// 0x00E8 (0x00E8 - 0x0000)
struct FXsollaOrder final
{
public:
	int32                                         Order_id;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2854[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaOrderContent                    Content;                                           // 0x0018(0x00D0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaOrder) == 0x000008, "Wrong alignment on FXsollaOrder");
static_assert(sizeof(FXsollaOrder) == 0x0000E8, "Wrong size on FXsollaOrder");
static_assert(offsetof(FXsollaOrder, Order_id) == 0x000000, "Member 'FXsollaOrder::Order_id' has a wrong offset!");
static_assert(offsetof(FXsollaOrder, Status) == 0x000008, "Member 'FXsollaOrder::Status' has a wrong offset!");
static_assert(offsetof(FXsollaOrder, Content) == 0x000018, "Member 'FXsollaOrder::Content' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackagesData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyPackagesData final
{
public:
	TArray<struct FVirtualCurrencyPackage>        Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPackagesData) == 0x000008, "Wrong alignment on FVirtualCurrencyPackagesData");
static_assert(sizeof(FVirtualCurrencyPackagesData) == 0x000010, "Wrong size on FVirtualCurrencyPackagesData");
static_assert(offsetof(FVirtualCurrencyPackagesData, Items) == 0x000000, "Member 'FVirtualCurrencyPackagesData::Items' has a wrong offset!");

// ScriptStruct XsollaStore.DRMItem
// 0x0058 (0x0058 - 0x0000)
struct FDRMItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Link;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Redeem_instruction_link;                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Drm_id;                                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2855[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDRMItem) == 0x000008, "Wrong alignment on FDRMItem");
static_assert(sizeof(FDRMItem) == 0x000058, "Wrong size on FDRMItem");
static_assert(offsetof(FDRMItem, Sku) == 0x000000, "Member 'FDRMItem::Sku' has a wrong offset!");
static_assert(offsetof(FDRMItem, Name) == 0x000010, "Member 'FDRMItem::Name' has a wrong offset!");
static_assert(offsetof(FDRMItem, Image) == 0x000020, "Member 'FDRMItem::Image' has a wrong offset!");
static_assert(offsetof(FDRMItem, Link) == 0x000030, "Member 'FDRMItem::Link' has a wrong offset!");
static_assert(offsetof(FDRMItem, Redeem_instruction_link) == 0x000040, "Member 'FDRMItem::Redeem_instruction_link' has a wrong offset!");
static_assert(offsetof(FDRMItem, Drm_id) == 0x000050, "Member 'FDRMItem::Drm_id' has a wrong offset!");

// ScriptStruct XsollaStore.StoreDRMList
// 0x0010 (0x0010 - 0x0000)
struct FStoreDRMList final
{
public:
	TArray<struct FDRMItem>                       Drm;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreDRMList) == 0x000008, "Wrong alignment on FStoreDRMList");
static_assert(sizeof(FStoreDRMList) == 0x000010, "Wrong size on FStoreDRMList");
static_assert(offsetof(FStoreDRMList, Drm) == 0x000000, "Member 'FStoreDRMList::Drm' has a wrong offset!");

// ScriptStruct XsollaStore.OrderStatusData
// 0x0018 (0x0018 - 0x0000)
struct FOrderStatusData final
{
public:
	int32                                         Order_id;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2856[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrderStatusData) == 0x000008, "Wrong alignment on FOrderStatusData");
static_assert(sizeof(FOrderStatusData) == 0x000018, "Wrong size on FOrderStatusData");
static_assert(offsetof(FOrderStatusData, Order_id) == 0x000000, "Member 'FOrderStatusData::Order_id' has a wrong offset!");
static_assert(offsetof(FOrderStatusData, Status) == 0x000008, "Member 'FOrderStatusData::Status' has a wrong offset!");

// ScriptStruct XsollaStore.OrderStatusPub
// 0x0020 (0x0020 - 0x0000)
struct FOrderStatusPub final
{
public:
	struct FOrderStatusData                       Data;                                              // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2857[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrderStatusPub) == 0x000008, "Wrong alignment on FOrderStatusPub");
static_assert(sizeof(FOrderStatusPub) == 0x000020, "Wrong size on FOrderStatusPub");
static_assert(offsetof(FOrderStatusPub, Data) == 0x000000, "Member 'FOrderStatusPub::Data' has a wrong offset!");
static_assert(offsetof(FOrderStatusPub, Offset) == 0x000018, "Member 'FOrderStatusPub::Offset' has a wrong offset!");

// ScriptStruct XsollaStore.GameKeyItem
// 0x00F0 (0x00F0 - 0x0000)
struct FGameKeyItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2858[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0078(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Drm_name;                                          // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Drm_sku;                                           // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Has_keys;                                          // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_pre_order;                                      // 0x00D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2859[0x6];                                     // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Release_date;                                      // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameKeyItem) == 0x000008, "Wrong alignment on FGameKeyItem");
static_assert(sizeof(FGameKeyItem) == 0x0000F0, "Wrong size on FGameKeyItem");
static_assert(offsetof(FGameKeyItem, Sku) == 0x000000, "Member 'FGameKeyItem::Sku' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Name) == 0x000010, "Member 'FGameKeyItem::Name' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Type) == 0x000020, "Member 'FGameKeyItem::Type' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Groups) == 0x000030, "Member 'FGameKeyItem::Groups' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Attributes) == 0x000040, "Member 'FGameKeyItem::Attributes' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Description) == 0x000050, "Member 'FGameKeyItem::Description' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Image_url) == 0x000060, "Member 'FGameKeyItem::Image_url' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Is_free) == 0x000070, "Member 'FGameKeyItem::Is_free' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Price) == 0x000078, "Member 'FGameKeyItem::Price' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Virtual_prices) == 0x0000A8, "Member 'FGameKeyItem::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Drm_name) == 0x0000B8, "Member 'FGameKeyItem::Drm_name' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Drm_sku) == 0x0000C8, "Member 'FGameKeyItem::Drm_sku' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Has_keys) == 0x0000D8, "Member 'FGameKeyItem::Has_keys' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Is_pre_order) == 0x0000D9, "Member 'FGameKeyItem::Is_pre_order' has a wrong offset!");
static_assert(offsetof(FGameKeyItem, Release_date) == 0x0000E0, "Member 'FGameKeyItem::Release_date' has a wrong offset!");

// ScriptStruct XsollaStore.GameUnitItem
// 0x00A0 (0x00A0 - 0x0000)
struct FGameUnitItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0028(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Drm_name;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Drm_sku;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Has_keys;                                          // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_pre_order;                                      // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285B[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Release_date;                                      // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameUnitItem) == 0x000008, "Wrong alignment on FGameUnitItem");
static_assert(sizeof(FGameUnitItem) == 0x0000A0, "Wrong size on FGameUnitItem");
static_assert(offsetof(FGameUnitItem, Sku) == 0x000000, "Member 'FGameUnitItem::Sku' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Type) == 0x000010, "Member 'FGameUnitItem::Type' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Is_free) == 0x000020, "Member 'FGameUnitItem::Is_free' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Price) == 0x000028, "Member 'FGameUnitItem::Price' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Virtual_prices) == 0x000058, "Member 'FGameUnitItem::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Drm_name) == 0x000068, "Member 'FGameUnitItem::Drm_name' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Drm_sku) == 0x000078, "Member 'FGameUnitItem::Drm_sku' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Has_keys) == 0x000088, "Member 'FGameUnitItem::Has_keys' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Is_pre_order) == 0x000089, "Member 'FGameUnitItem::Is_pre_order' has a wrong offset!");
static_assert(offsetof(FGameUnitItem, Release_date) == 0x000090, "Member 'FGameUnitItem::Release_date' has a wrong offset!");

// ScriptStruct XsollaStore.GameItem
// 0x0090 (0x0090 - 0x0000)
struct FGameItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Unit_type;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameUnitItem>                  Unit_items;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameItem) == 0x000008, "Wrong alignment on FGameItem");
static_assert(sizeof(FGameItem) == 0x000090, "Wrong size on FGameItem");
static_assert(offsetof(FGameItem, Sku) == 0x000000, "Member 'FGameItem::Sku' has a wrong offset!");
static_assert(offsetof(FGameItem, Name) == 0x000010, "Member 'FGameItem::Name' has a wrong offset!");
static_assert(offsetof(FGameItem, Groups) == 0x000020, "Member 'FGameItem::Groups' has a wrong offset!");
static_assert(offsetof(FGameItem, Attributes) == 0x000030, "Member 'FGameItem::Attributes' has a wrong offset!");
static_assert(offsetof(FGameItem, Type) == 0x000040, "Member 'FGameItem::Type' has a wrong offset!");
static_assert(offsetof(FGameItem, Unit_type) == 0x000050, "Member 'FGameItem::Unit_type' has a wrong offset!");
static_assert(offsetof(FGameItem, Description) == 0x000060, "Member 'FGameItem::Description' has a wrong offset!");
static_assert(offsetof(FGameItem, Image_url) == 0x000070, "Member 'FGameItem::Image_url' has a wrong offset!");
static_assert(offsetof(FGameItem, Unit_items) == 0x000080, "Member 'FGameItem::Unit_items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreGameKeysList
// 0x0010 (0x0010 - 0x0000)
struct FStoreGameKeysList final
{
public:
	TArray<struct FGameKeyItem>                   GameKeys;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreGameKeysList) == 0x000008, "Wrong alignment on FStoreGameKeysList");
static_assert(sizeof(FStoreGameKeysList) == 0x000010, "Wrong size on FStoreGameKeysList");
static_assert(offsetof(FStoreGameKeysList, GameKeys) == 0x000000, "Member 'FStoreGameKeysList::GameKeys' has a wrong offset!");

// ScriptStruct XsollaStore.StoreGamesList
// 0x0010 (0x0010 - 0x0000)
struct FStoreGamesList final
{
public:
	TArray<struct FGameItem>                      Games;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreGamesList) == 0x000008, "Wrong alignment on FStoreGamesList");
static_assert(sizeof(FStoreGamesList) == 0x000010, "Wrong size on FStoreGamesList");
static_assert(offsetof(FStoreGamesList, Games) == 0x000000, "Member 'FStoreGamesList::Games' has a wrong offset!");

// ScriptStruct XsollaStore.StoreBundleContent
// 0x0098 (0x0098 - 0x0000)
struct FStoreBundleContent final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285C[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0058(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreBundleContent) == 0x000008, "Wrong alignment on FStoreBundleContent");
static_assert(sizeof(FStoreBundleContent) == 0x000098, "Wrong size on FStoreBundleContent");
static_assert(offsetof(FStoreBundleContent, Sku) == 0x000000, "Member 'FStoreBundleContent::Sku' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Name) == 0x000010, "Member 'FStoreBundleContent::Name' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Type) == 0x000020, "Member 'FStoreBundleContent::Type' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Description) == 0x000030, "Member 'FStoreBundleContent::Description' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Image_url) == 0x000040, "Member 'FStoreBundleContent::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Quantity) == 0x000050, "Member 'FStoreBundleContent::Quantity' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Price) == 0x000058, "Member 'FStoreBundleContent::Price' has a wrong offset!");
static_assert(offsetof(FStoreBundleContent, Virtual_prices) == 0x000088, "Member 'FStoreBundleContent::Virtual_prices' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItem
// 0x0190 (0x0190 - 0x0000)
struct FStoreItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285D[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0068(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaItemOptions                     Inventory_options;                                 // 0x00B8(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 bundle_type;                                       // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaPrice                           Total_content_price;                               // 0x00E8(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FStoreBundleContent>            Content;                                           // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0148(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285E[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreItemMediaList>            Media_list;                                        // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaStoreItemPromotion>      Promotions;                                        // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemLimits                 Limits;                                            // 0x0170(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItem) == 0x000008, "Wrong alignment on FStoreItem");
static_assert(sizeof(FStoreItem) == 0x000190, "Wrong size on FStoreItem");
static_assert(offsetof(FStoreItem, Sku) == 0x000000, "Member 'FStoreItem::Sku' has a wrong offset!");
static_assert(offsetof(FStoreItem, Name) == 0x000010, "Member 'FStoreItem::Name' has a wrong offset!");
static_assert(offsetof(FStoreItem, Description) == 0x000020, "Member 'FStoreItem::Description' has a wrong offset!");
static_assert(offsetof(FStoreItem, Type) == 0x000030, "Member 'FStoreItem::Type' has a wrong offset!");
static_assert(offsetof(FStoreItem, Virtual_item_type) == 0x000040, "Member 'FStoreItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FStoreItem, Groups) == 0x000050, "Member 'FStoreItem::Groups' has a wrong offset!");
static_assert(offsetof(FStoreItem, Is_free) == 0x000060, "Member 'FStoreItem::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreItem, Price) == 0x000068, "Member 'FStoreItem::Price' has a wrong offset!");
static_assert(offsetof(FStoreItem, Virtual_prices) == 0x000098, "Member 'FStoreItem::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FStoreItem, Image_url) == 0x0000A8, "Member 'FStoreItem::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreItem, Inventory_options) == 0x0000B8, "Member 'FStoreItem::Inventory_options' has a wrong offset!");
static_assert(offsetof(FStoreItem, bundle_type) == 0x0000D8, "Member 'FStoreItem::bundle_type' has a wrong offset!");
static_assert(offsetof(FStoreItem, Total_content_price) == 0x0000E8, "Member 'FStoreItem::Total_content_price' has a wrong offset!");
static_assert(offsetof(FStoreItem, Content) == 0x000118, "Member 'FStoreItem::Content' has a wrong offset!");
static_assert(offsetof(FStoreItem, Attributes) == 0x000128, "Member 'FStoreItem::Attributes' has a wrong offset!");
static_assert(offsetof(FStoreItem, Long_description) == 0x000138, "Member 'FStoreItem::Long_description' has a wrong offset!");
static_assert(offsetof(FStoreItem, Order) == 0x000148, "Member 'FStoreItem::Order' has a wrong offset!");
static_assert(offsetof(FStoreItem, Media_list) == 0x000150, "Member 'FStoreItem::Media_list' has a wrong offset!");
static_assert(offsetof(FStoreItem, Promotions) == 0x000160, "Member 'FStoreItem::Promotions' has a wrong offset!");
static_assert(offsetof(FStoreItem, Limits) == 0x000170, "Member 'FStoreItem::Limits' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItemsList
// 0x0010 (0x0010 - 0x0000)
struct FStoreItemsList final
{
public:
	TArray<struct FStoreItem>                     Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItemsList) == 0x000008, "Wrong alignment on FStoreItemsList");
static_assert(sizeof(FStoreItemsList) == 0x000010, "Wrong size on FStoreItemsList");
static_assert(offsetof(FStoreItemsList, Items) == 0x000000, "Member 'FStoreItemsList::Items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreBundle
// 0x0140 (0x0140 - 0x0000)
struct FStoreBundle final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bundle_type;                                       // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Is_free;                                           // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaPrice                           Price;                                             // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FXsollaPrice                           Total_content_price;                               // 0x00C0(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoreBundleContent>            Content;                                           // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaStoreItemPromotion>      Promotions;                                        // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemLimits                 Limits;                                            // 0x0120(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreBundle) == 0x000008, "Wrong alignment on FStoreBundle");
static_assert(sizeof(FStoreBundle) == 0x000140, "Wrong size on FStoreBundle");
static_assert(offsetof(FStoreBundle, Sku) == 0x000000, "Member 'FStoreBundle::Sku' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Name) == 0x000010, "Member 'FStoreBundle::Name' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Groups) == 0x000020, "Member 'FStoreBundle::Groups' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Attributes) == 0x000030, "Member 'FStoreBundle::Attributes' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Type) == 0x000040, "Member 'FStoreBundle::Type' has a wrong offset!");
static_assert(offsetof(FStoreBundle, bundle_type) == 0x000050, "Member 'FStoreBundle::bundle_type' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Description) == 0x000060, "Member 'FStoreBundle::Description' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Image_url) == 0x000070, "Member 'FStoreBundle::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Is_free) == 0x000080, "Member 'FStoreBundle::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Price) == 0x000090, "Member 'FStoreBundle::Price' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Total_content_price) == 0x0000C0, "Member 'FStoreBundle::Total_content_price' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Virtual_prices) == 0x0000F0, "Member 'FStoreBundle::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Content) == 0x000100, "Member 'FStoreBundle::Content' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Promotions) == 0x000110, "Member 'FStoreBundle::Promotions' has a wrong offset!");
static_assert(offsetof(FStoreBundle, Limits) == 0x000120, "Member 'FStoreBundle::Limits' has a wrong offset!");

// ScriptStruct XsollaStore.StoreListOfBundles
// 0x0010 (0x0010 - 0x0000)
struct FStoreListOfBundles final
{
public:
	TArray<struct FStoreBundle>                   Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreListOfBundles) == 0x000008, "Wrong alignment on FStoreListOfBundles");
static_assert(sizeof(FStoreListOfBundles) == 0x000010, "Wrong size on FStoreListOfBundles");
static_assert(offsetof(FStoreListOfBundles, Items) == 0x000000, "Member 'FStoreListOfBundles::Items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreDiscount
// 0x0010 (0x0010 - 0x0000)
struct FStoreDiscount final
{
public:
	class FString                                 Percent;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreDiscount) == 0x000008, "Wrong alignment on FStoreDiscount");
static_assert(sizeof(FStoreDiscount) == 0x000010, "Wrong size on FStoreDiscount");
static_assert(offsetof(FStoreDiscount, Percent) == 0x000000, "Member 'FStoreDiscount::Percent' has a wrong offset!");

// ScriptStruct XsollaStore.StorePromocodeRewardData
// 0x0028 (0x0028 - 0x0000)
struct FStorePromocodeRewardData final
{
public:
	TArray<struct FXsollaBonusItem>               bonus;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStoreDiscount                         Discount;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          Is_selectable;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_285F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStorePromocodeRewardData) == 0x000008, "Wrong alignment on FStorePromocodeRewardData");
static_assert(sizeof(FStorePromocodeRewardData) == 0x000028, "Wrong size on FStorePromocodeRewardData");
static_assert(offsetof(FStorePromocodeRewardData, bonus) == 0x000000, "Member 'FStorePromocodeRewardData::bonus' has a wrong offset!");
static_assert(offsetof(FStorePromocodeRewardData, Discount) == 0x000010, "Member 'FStorePromocodeRewardData::Discount' has a wrong offset!");
static_assert(offsetof(FStorePromocodeRewardData, Is_selectable) == 0x000020, "Member 'FStorePromocodeRewardData::Is_selectable' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionCharge
// 0x0018 (0x0018 - 0x0000)
struct FSubscriptionCharge final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount_with_promotion;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionCharge) == 0x000008, "Wrong alignment on FSubscriptionCharge");
static_assert(sizeof(FSubscriptionCharge) == 0x000018, "Wrong size on FSubscriptionCharge");
static_assert(offsetof(FSubscriptionCharge, Amount) == 0x000000, "Member 'FSubscriptionCharge::Amount' has a wrong offset!");
static_assert(offsetof(FSubscriptionCharge, Amount_with_promotion) == 0x000004, "Member 'FSubscriptionCharge::Amount_with_promotion' has a wrong offset!");
static_assert(offsetof(FSubscriptionCharge, Currency) == 0x000008, "Member 'FSubscriptionCharge::Currency' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionDetails
// 0x00F0 (0x00F0 - 0x0000)
struct FSubscriptionDetails final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plan_id;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_external_id;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_name;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_description;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_start_date;                                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_end_date;                                     // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Product_id;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2860[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Product_external_id;                               // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Product_name;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Product_description;                               // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_in_trial;                                       // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2861[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Trial_period;                                      // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_create;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_next_charge;                                  // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_last_charge;                                  // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubscriptionCharge                    Charge;                                            // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubscriptionPeriod                    Period;                                            // 0x00C8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_end;                                          // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_renew_possible;                                 // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_change_to_non_renew_possible;                   // 0x00E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_change_plan_allowed;                            // 0x00EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2862[0x5];                                     // 0x00EB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubscriptionDetails) == 0x000008, "Wrong alignment on FSubscriptionDetails");
static_assert(sizeof(FSubscriptionDetails) == 0x0000F0, "Wrong size on FSubscriptionDetails");
static_assert(offsetof(FSubscriptionDetails, ID) == 0x000000, "Member 'FSubscriptionDetails::ID' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_id) == 0x000004, "Member 'FSubscriptionDetails::Plan_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_external_id) == 0x000008, "Member 'FSubscriptionDetails::Plan_external_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_name) == 0x000018, "Member 'FSubscriptionDetails::Plan_name' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_description) == 0x000028, "Member 'FSubscriptionDetails::Plan_description' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_start_date) == 0x000038, "Member 'FSubscriptionDetails::Plan_start_date' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Plan_end_date) == 0x000040, "Member 'FSubscriptionDetails::Plan_end_date' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Product_id) == 0x000048, "Member 'FSubscriptionDetails::Product_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Product_external_id) == 0x000050, "Member 'FSubscriptionDetails::Product_external_id' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Product_name) == 0x000060, "Member 'FSubscriptionDetails::Product_name' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Product_description) == 0x000070, "Member 'FSubscriptionDetails::Product_description' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Status) == 0x000080, "Member 'FSubscriptionDetails::Status' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Is_in_trial) == 0x000090, "Member 'FSubscriptionDetails::Is_in_trial' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Trial_period) == 0x000094, "Member 'FSubscriptionDetails::Trial_period' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Date_create) == 0x000098, "Member 'FSubscriptionDetails::Date_create' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Date_next_charge) == 0x0000A0, "Member 'FSubscriptionDetails::Date_next_charge' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Date_last_charge) == 0x0000A8, "Member 'FSubscriptionDetails::Date_last_charge' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Charge) == 0x0000B0, "Member 'FSubscriptionDetails::Charge' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Period) == 0x0000C8, "Member 'FSubscriptionDetails::Period' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Date_end) == 0x0000E0, "Member 'FSubscriptionDetails::Date_end' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Is_renew_possible) == 0x0000E8, "Member 'FSubscriptionDetails::Is_renew_possible' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Is_change_to_non_renew_possible) == 0x0000E9, "Member 'FSubscriptionDetails::Is_change_to_non_renew_possible' has a wrong offset!");
static_assert(offsetof(FSubscriptionDetails, Is_change_plan_allowed) == 0x0000EA, "Member 'FSubscriptionDetails::Is_change_plan_allowed' has a wrong offset!");

// ScriptStruct XsollaStore.StoreGamesData
// 0x0070 (0x0070 - 0x0000)
struct FStoreGamesData final
{
public:
	TArray<struct FGameItem>                      Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FString>                           GroupIds;                                          // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreGamesData) == 0x000008, "Wrong alignment on FStoreGamesData");
static_assert(sizeof(FStoreGamesData) == 0x000070, "Wrong size on FStoreGamesData");
static_assert(offsetof(FStoreGamesData, Items) == 0x000000, "Member 'FStoreGamesData::Items' has a wrong offset!");
static_assert(offsetof(FStoreGamesData, GroupIds) == 0x000010, "Member 'FStoreGamesData::GroupIds' has a wrong offset!");
static_assert(offsetof(FStoreGamesData, Groups) == 0x000060, "Member 'FStoreGamesData::Groups' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItemsData
// 0x0070 (0x0070 - 0x0000)
struct FStoreItemsData final
{
public:
	TArray<struct FStoreItem>                     Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FString>                           GroupIds;                                          // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItemsData) == 0x000008, "Wrong alignment on FStoreItemsData");
static_assert(sizeof(FStoreItemsData) == 0x000070, "Wrong size on FStoreItemsData");
static_assert(offsetof(FStoreItemsData, Items) == 0x000000, "Member 'FStoreItemsData::Items' has a wrong offset!");
static_assert(offsetof(FStoreItemsData, GroupIds) == 0x000010, "Member 'FStoreItemsData::GroupIds' has a wrong offset!");
static_assert(offsetof(FStoreItemsData, Groups) == 0x000060, "Member 'FStoreItemsData::Groups' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionPlansList
// 0x0018 (0x0018 - 0x0000)
struct FSubscriptionPlansList final
{
public:
	TArray<struct FSubscriptionPlan>              Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Has_more;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2863[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubscriptionPlansList) == 0x000008, "Wrong alignment on FSubscriptionPlansList");
static_assert(sizeof(FSubscriptionPlansList) == 0x000018, "Wrong size on FSubscriptionPlansList");
static_assert(offsetof(FSubscriptionPlansList, Items) == 0x000000, "Member 'FSubscriptionPlansList::Items' has a wrong offset!");
static_assert(offsetof(FSubscriptionPlansList, Has_more) == 0x000010, "Member 'FSubscriptionPlansList::Has_more' has a wrong offset!");

// ScriptStruct XsollaStore.Subscription
// 0x00E0 (0x00E0 - 0x0000)
struct FSubscription final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plan_id;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_external_id;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_name;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plan_description;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_start_date;                                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Plan_end_date;                                     // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Product_id;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2864[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Product_external_id;                               // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Product_name;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Product_description;                               // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_in_trial;                                       // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2865[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Trial_period;                                      // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_create;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_next_charge;                                  // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date_last_charge;                                  // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubscriptionCharge                    Charge;                                            // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubscriptionPeriod                    Period;                                            // 0x00C8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscription) == 0x000008, "Wrong alignment on FSubscription");
static_assert(sizeof(FSubscription) == 0x0000E0, "Wrong size on FSubscription");
static_assert(offsetof(FSubscription, ID) == 0x000000, "Member 'FSubscription::ID' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_id) == 0x000004, "Member 'FSubscription::Plan_id' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_external_id) == 0x000008, "Member 'FSubscription::Plan_external_id' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_name) == 0x000018, "Member 'FSubscription::Plan_name' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_description) == 0x000028, "Member 'FSubscription::Plan_description' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_start_date) == 0x000038, "Member 'FSubscription::Plan_start_date' has a wrong offset!");
static_assert(offsetof(FSubscription, Plan_end_date) == 0x000040, "Member 'FSubscription::Plan_end_date' has a wrong offset!");
static_assert(offsetof(FSubscription, Product_id) == 0x000048, "Member 'FSubscription::Product_id' has a wrong offset!");
static_assert(offsetof(FSubscription, Product_external_id) == 0x000050, "Member 'FSubscription::Product_external_id' has a wrong offset!");
static_assert(offsetof(FSubscription, Product_name) == 0x000060, "Member 'FSubscription::Product_name' has a wrong offset!");
static_assert(offsetof(FSubscription, Product_description) == 0x000070, "Member 'FSubscription::Product_description' has a wrong offset!");
static_assert(offsetof(FSubscription, Status) == 0x000080, "Member 'FSubscription::Status' has a wrong offset!");
static_assert(offsetof(FSubscription, Is_in_trial) == 0x000090, "Member 'FSubscription::Is_in_trial' has a wrong offset!");
static_assert(offsetof(FSubscription, Trial_period) == 0x000094, "Member 'FSubscription::Trial_period' has a wrong offset!");
static_assert(offsetof(FSubscription, Date_create) == 0x000098, "Member 'FSubscription::Date_create' has a wrong offset!");
static_assert(offsetof(FSubscription, Date_next_charge) == 0x0000A0, "Member 'FSubscription::Date_next_charge' has a wrong offset!");
static_assert(offsetof(FSubscription, Date_last_charge) == 0x0000A8, "Member 'FSubscription::Date_last_charge' has a wrong offset!");
static_assert(offsetof(FSubscription, Charge) == 0x0000B0, "Member 'FSubscription::Charge' has a wrong offset!");
static_assert(offsetof(FSubscription, Period) == 0x0000C8, "Member 'FSubscription::Period' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionsList
// 0x0018 (0x0018 - 0x0000)
struct FSubscriptionsList final
{
public:
	TArray<struct FSubscription>                  Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Has_more;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2866[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubscriptionsList) == 0x000008, "Wrong alignment on FSubscriptionsList");
static_assert(sizeof(FSubscriptionsList) == 0x000018, "Wrong size on FSubscriptionsList");
static_assert(offsetof(FSubscriptionsList, Items) == 0x000000, "Member 'FSubscriptionsList::Items' has a wrong offset!");
static_assert(offsetof(FSubscriptionsList, Has_more) == 0x000010, "Member 'FSubscriptionsList::Has_more' has a wrong offset!");

// ScriptStruct XsollaStore.OrderStatusPush
// 0x0030 (0x0030 - 0x0000)
struct FOrderStatusPush final
{
public:
	struct FOrderStatusPub                        Pub;                                               // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 Channel;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrderStatusPush) == 0x000008, "Wrong alignment on FOrderStatusPush");
static_assert(sizeof(FOrderStatusPush) == 0x000030, "Wrong size on FOrderStatusPush");
static_assert(offsetof(FOrderStatusPush, Pub) == 0x000000, "Member 'FOrderStatusPush::Pub' has a wrong offset!");
static_assert(offsetof(FOrderStatusPush, Channel) == 0x000020, "Member 'FOrderStatusPush::Channel' has a wrong offset!");

// ScriptStruct XsollaStore.OrderStatusMessage
// 0x0030 (0x0030 - 0x0000)
struct FOrderStatusMessage final
{
public:
	struct FOrderStatusPush                       Push;                                              // 0x0000(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrderStatusMessage) == 0x000008, "Wrong alignment on FOrderStatusMessage");
static_assert(sizeof(FOrderStatusMessage) == 0x000030, "Wrong size on FOrderStatusMessage");
static_assert(offsetof(FOrderStatusMessage, Push) == 0x000000, "Member 'FOrderStatusMessage::Push' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyData final
{
public:
	TArray<struct FVirtualCurrency>               Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyData) == 0x000008, "Wrong alignment on FVirtualCurrencyData");
static_assert(sizeof(FVirtualCurrencyData) == 0x000010, "Wrong size on FVirtualCurrencyData");
static_assert(offsetof(FVirtualCurrencyData, Items) == 0x000000, "Member 'FVirtualCurrencyData::Items' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreCurrencySymbol
// 0x0028 (0x0028 - 0x0000)
struct FXsollaStoreCurrencySymbol final
{
public:
	class FString                                 Grapheme;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Format;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rtl;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2867[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaStoreCurrencySymbol) == 0x000008, "Wrong alignment on FXsollaStoreCurrencySymbol");
static_assert(sizeof(FXsollaStoreCurrencySymbol) == 0x000028, "Wrong size on FXsollaStoreCurrencySymbol");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Grapheme) == 0x000000, "Member 'FXsollaStoreCurrencySymbol::Grapheme' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Format) == 0x000010, "Member 'FXsollaStoreCurrencySymbol::Format' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Rtl) == 0x000020, "Member 'FXsollaStoreCurrencySymbol::Rtl' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreCurrency
// 0x0050 (0x0058 - 0x0008)
struct FXsollaStoreCurrency final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FractionSize;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2868[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaStoreCurrencySymbol             Symbol;                                            // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreCurrency) == 0x000008, "Wrong alignment on FXsollaStoreCurrency");
static_assert(sizeof(FXsollaStoreCurrency) == 0x000058, "Wrong size on FXsollaStoreCurrency");
static_assert(offsetof(FXsollaStoreCurrency, Name) == 0x000008, "Member 'FXsollaStoreCurrency::Name' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, Description) == 0x000018, "Member 'FXsollaStoreCurrency::Description' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, FractionSize) == 0x000028, "Member 'FXsollaStoreCurrency::FractionSize' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, Symbol) == 0x000030, "Member 'FXsollaStoreCurrency::Symbol' has a wrong offset!");

// ScriptStruct XsollaStore.SubscriptionPaystationLink
// 0x0010 (0x0010 - 0x0000)
struct FSubscriptionPaystationLink final
{
public:
	class FString                                 Link_to_ps;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionPaystationLink) == 0x000008, "Wrong alignment on FSubscriptionPaystationLink");
static_assert(sizeof(FSubscriptionPaystationLink) == 0x000010, "Wrong size on FSubscriptionPaystationLink");
static_assert(offsetof(FSubscriptionPaystationLink, Link_to_ps) == 0x000000, "Member 'FSubscriptionPaystationLink::Link_to_ps' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreSaveData
// 0x0020 (0x0020 - 0x0000)
struct FXsollaStoreSaveData final
{
public:
	class FString                                 CartId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartCurrency;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreSaveData) == 0x000008, "Wrong alignment on FXsollaStoreSaveData");
static_assert(sizeof(FXsollaStoreSaveData) == 0x000020, "Wrong size on FXsollaStoreSaveData");
static_assert(offsetof(FXsollaStoreSaveData, CartId) == 0x000000, "Member 'FXsollaStoreSaveData::CartId' has a wrong offset!");
static_assert(offsetof(FXsollaStoreSaveData, CartCurrency) == 0x000010, "Member 'FXsollaStoreSaveData::CartCurrency' has a wrong offset!");

}

