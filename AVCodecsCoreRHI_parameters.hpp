#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVCodecsCoreRHI

#include "Basic.hpp"

#include "AVCodecsCoreRHI_structs.hpp"


namespace SDK::Params
{

// Function AVCodecsCoreRHI.SimpleAudioEncoder.Open
// 0x0014 (0x0014 - 0x0000)
struct SimpleAudioEncoder_Open final
{
public:
	ESimpleAudioCodec                             Codec;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4816[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleAudioEncoderConfig              Config;                                            // 0x0004(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAsynchronous;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4817[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleAudioEncoder_Open) == 0x000004, "Wrong alignment on SimpleAudioEncoder_Open");
static_assert(sizeof(SimpleAudioEncoder_Open) == 0x000014, "Wrong size on SimpleAudioEncoder_Open");
static_assert(offsetof(SimpleAudioEncoder_Open, Codec) == 0x000000, "Member 'SimpleAudioEncoder_Open::Codec' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_Open, Config) == 0x000004, "Member 'SimpleAudioEncoder_Open::Config' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_Open, bAsynchronous) == 0x000010, "Member 'SimpleAudioEncoder_Open::bAsynchronous' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_Open, ReturnValue) == 0x000011, "Member 'SimpleAudioEncoder_Open::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.ReceivePacket
// 0x0030 (0x0030 - 0x0000)
struct SimpleAudioEncoder_ReceivePacket final
{
public:
	struct FSimpleAudioPacket                     OutPacket;                                         // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4818[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleAudioEncoder_ReceivePacket) == 0x000008, "Wrong alignment on SimpleAudioEncoder_ReceivePacket");
static_assert(sizeof(SimpleAudioEncoder_ReceivePacket) == 0x000030, "Wrong size on SimpleAudioEncoder_ReceivePacket");
static_assert(offsetof(SimpleAudioEncoder_ReceivePacket, OutPacket) == 0x000000, "Member 'SimpleAudioEncoder_ReceivePacket::OutPacket' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_ReceivePacket, ReturnValue) == 0x000028, "Member 'SimpleAudioEncoder_ReceivePacket::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.ReceivePackets
// 0x0010 (0x0010 - 0x0000)
struct SimpleAudioEncoder_ReceivePackets final
{
public:
	TArray<struct FSimpleAudioPacket>             OutPackets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_ReceivePackets) == 0x000008, "Wrong alignment on SimpleAudioEncoder_ReceivePackets");
static_assert(sizeof(SimpleAudioEncoder_ReceivePackets) == 0x000010, "Wrong size on SimpleAudioEncoder_ReceivePackets");
static_assert(offsetof(SimpleAudioEncoder_ReceivePackets, OutPackets) == 0x000000, "Member 'SimpleAudioEncoder_ReceivePackets::OutPackets' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.SendFrameFloat
// 0x0028 (0x0028 - 0x0000)
struct SimpleAudioEncoder_SendFrameFloat final
{
public:
	TArray<float>                                 Resource;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Timestamp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamples;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleDuration;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4819[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleAudioEncoder_SendFrameFloat) == 0x000008, "Wrong alignment on SimpleAudioEncoder_SendFrameFloat");
static_assert(sizeof(SimpleAudioEncoder_SendFrameFloat) == 0x000028, "Wrong size on SimpleAudioEncoder_SendFrameFloat");
static_assert(offsetof(SimpleAudioEncoder_SendFrameFloat, Resource) == 0x000000, "Member 'SimpleAudioEncoder_SendFrameFloat::Resource' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_SendFrameFloat, Timestamp) == 0x000010, "Member 'SimpleAudioEncoder_SendFrameFloat::Timestamp' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_SendFrameFloat, NumSamples) == 0x000018, "Member 'SimpleAudioEncoder_SendFrameFloat::NumSamples' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_SendFrameFloat, SampleDuration) == 0x00001C, "Member 'SimpleAudioEncoder_SendFrameFloat::SampleDuration' has a wrong offset!");
static_assert(offsetof(SimpleAudioEncoder_SendFrameFloat, ReturnValue) == 0x000020, "Member 'SimpleAudioEncoder_SendFrameFloat::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.SetConfig
// 0x000C (0x000C - 0x0000)
struct SimpleAudioEncoder_SetConfig final
{
public:
	struct FSimpleAudioEncoderConfig              NewConfig;                                         // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_SetConfig) == 0x000004, "Wrong alignment on SimpleAudioEncoder_SetConfig");
static_assert(sizeof(SimpleAudioEncoder_SetConfig) == 0x00000C, "Wrong size on SimpleAudioEncoder_SetConfig");
static_assert(offsetof(SimpleAudioEncoder_SetConfig, NewConfig) == 0x000000, "Member 'SimpleAudioEncoder_SetConfig::NewConfig' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.GetCodec
// 0x0001 (0x0001 - 0x0000)
struct SimpleAudioEncoder_GetCodec final
{
public:
	ESimpleAudioCodec                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_GetCodec) == 0x000001, "Wrong alignment on SimpleAudioEncoder_GetCodec");
static_assert(sizeof(SimpleAudioEncoder_GetCodec) == 0x000001, "Wrong size on SimpleAudioEncoder_GetCodec");
static_assert(offsetof(SimpleAudioEncoder_GetCodec, ReturnValue) == 0x000000, "Member 'SimpleAudioEncoder_GetCodec::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.GetConfig
// 0x000C (0x000C - 0x0000)
struct SimpleAudioEncoder_GetConfig final
{
public:
	struct FSimpleAudioEncoderConfig              ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_GetConfig) == 0x000004, "Wrong alignment on SimpleAudioEncoder_GetConfig");
static_assert(sizeof(SimpleAudioEncoder_GetConfig) == 0x00000C, "Wrong size on SimpleAudioEncoder_GetConfig");
static_assert(offsetof(SimpleAudioEncoder_GetConfig, ReturnValue) == 0x000000, "Member 'SimpleAudioEncoder_GetConfig::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.IsAsync
// 0x0001 (0x0001 - 0x0000)
struct SimpleAudioEncoder_IsAsync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_IsAsync) == 0x000001, "Wrong alignment on SimpleAudioEncoder_IsAsync");
static_assert(sizeof(SimpleAudioEncoder_IsAsync) == 0x000001, "Wrong size on SimpleAudioEncoder_IsAsync");
static_assert(offsetof(SimpleAudioEncoder_IsAsync, ReturnValue) == 0x000000, "Member 'SimpleAudioEncoder_IsAsync::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleAudioEncoder.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct SimpleAudioEncoder_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleAudioEncoder_IsOpen) == 0x000001, "Wrong alignment on SimpleAudioEncoder_IsOpen");
static_assert(sizeof(SimpleAudioEncoder_IsOpen) == 0x000001, "Wrong size on SimpleAudioEncoder_IsOpen");
static_assert(offsetof(SimpleAudioEncoder_IsOpen, ReturnValue) == 0x000000, "Member 'SimpleAudioEncoder_IsOpen::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoHelper.ShareRenderTarget2D
// 0x0008 (0x0008 - 0x0000)
struct SimpleVideoHelper_ShareRenderTarget2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoHelper_ShareRenderTarget2D) == 0x000008, "Wrong alignment on SimpleVideoHelper_ShareRenderTarget2D");
static_assert(sizeof(SimpleVideoHelper_ShareRenderTarget2D) == 0x000008, "Wrong size on SimpleVideoHelper_ShareRenderTarget2D");
static_assert(offsetof(SimpleVideoHelper_ShareRenderTarget2D, RenderTarget) == 0x000000, "Member 'SimpleVideoHelper_ShareRenderTarget2D::RenderTarget' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.Open
// 0x0003 (0x0003 - 0x0000)
struct SimpleVideoDecoder_Open final
{
public:
	ESimpleVideoCodec                             Codec;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsynchronous;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoDecoder_Open) == 0x000001, "Wrong alignment on SimpleVideoDecoder_Open");
static_assert(sizeof(SimpleVideoDecoder_Open) == 0x000003, "Wrong size on SimpleVideoDecoder_Open");
static_assert(offsetof(SimpleVideoDecoder_Open, Codec) == 0x000000, "Member 'SimpleVideoDecoder_Open::Codec' has a wrong offset!");
static_assert(offsetof(SimpleVideoDecoder_Open, bAsynchronous) == 0x000001, "Member 'SimpleVideoDecoder_Open::bAsynchronous' has a wrong offset!");
static_assert(offsetof(SimpleVideoDecoder_Open, ReturnValue) == 0x000002, "Member 'SimpleVideoDecoder_Open::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.ReceiveFrame
// 0x0010 (0x0010 - 0x0000)
struct SimpleVideoDecoder_ReceiveFrame final
{
public:
	class UTextureRenderTarget2D*                 Resource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoDecoder_ReceiveFrame) == 0x000008, "Wrong alignment on SimpleVideoDecoder_ReceiveFrame");
static_assert(sizeof(SimpleVideoDecoder_ReceiveFrame) == 0x000010, "Wrong size on SimpleVideoDecoder_ReceiveFrame");
static_assert(offsetof(SimpleVideoDecoder_ReceiveFrame, Resource) == 0x000000, "Member 'SimpleVideoDecoder_ReceiveFrame::Resource' has a wrong offset!");
static_assert(offsetof(SimpleVideoDecoder_ReceiveFrame, ReturnValue) == 0x000008, "Member 'SimpleVideoDecoder_ReceiveFrame::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.SendPacket
// 0x0038 (0x0038 - 0x0000)
struct SimpleVideoDecoder_SendPacket final
{
public:
	struct FSimpleVideoPacket                     Packet;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoDecoder_SendPacket) == 0x000008, "Wrong alignment on SimpleVideoDecoder_SendPacket");
static_assert(sizeof(SimpleVideoDecoder_SendPacket) == 0x000038, "Wrong size on SimpleVideoDecoder_SendPacket");
static_assert(offsetof(SimpleVideoDecoder_SendPacket, Packet) == 0x000000, "Member 'SimpleVideoDecoder_SendPacket::Packet' has a wrong offset!");
static_assert(offsetof(SimpleVideoDecoder_SendPacket, ReturnValue) == 0x000030, "Member 'SimpleVideoDecoder_SendPacket::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.GetCodec
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoDecoder_GetCodec final
{
public:
	ESimpleVideoCodec                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoDecoder_GetCodec) == 0x000001, "Wrong alignment on SimpleVideoDecoder_GetCodec");
static_assert(sizeof(SimpleVideoDecoder_GetCodec) == 0x000001, "Wrong size on SimpleVideoDecoder_GetCodec");
static_assert(offsetof(SimpleVideoDecoder_GetCodec, ReturnValue) == 0x000000, "Member 'SimpleVideoDecoder_GetCodec::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.IsAsync
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoDecoder_IsAsync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoDecoder_IsAsync) == 0x000001, "Wrong alignment on SimpleVideoDecoder_IsAsync");
static_assert(sizeof(SimpleVideoDecoder_IsAsync) == 0x000001, "Wrong size on SimpleVideoDecoder_IsAsync");
static_assert(offsetof(SimpleVideoDecoder_IsAsync, ReturnValue) == 0x000000, "Member 'SimpleVideoDecoder_IsAsync::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoDecoder.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoDecoder_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoDecoder_IsOpen) == 0x000001, "Wrong alignment on SimpleVideoDecoder_IsOpen");
static_assert(sizeof(SimpleVideoDecoder_IsOpen) == 0x000001, "Wrong size on SimpleVideoDecoder_IsOpen");
static_assert(offsetof(SimpleVideoDecoder_IsOpen, ReturnValue) == 0x000000, "Member 'SimpleVideoDecoder_IsOpen::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.Open
// 0x001C (0x001C - 0x0000)
struct SimpleVideoEncoder_Open final
{
public:
	ESimpleVideoCodec                             Codec;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleVideoEncoderConfig              Config;                                            // 0x0004(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAsynchronous;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481F[0x2];                                     // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoEncoder_Open) == 0x000004, "Wrong alignment on SimpleVideoEncoder_Open");
static_assert(sizeof(SimpleVideoEncoder_Open) == 0x00001C, "Wrong size on SimpleVideoEncoder_Open");
static_assert(offsetof(SimpleVideoEncoder_Open, Codec) == 0x000000, "Member 'SimpleVideoEncoder_Open::Codec' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_Open, Config) == 0x000004, "Member 'SimpleVideoEncoder_Open::Config' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_Open, bAsynchronous) == 0x000018, "Member 'SimpleVideoEncoder_Open::bAsynchronous' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_Open, ReturnValue) == 0x000019, "Member 'SimpleVideoEncoder_Open::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.ReceivePacket
// 0x0038 (0x0038 - 0x0000)
struct SimpleVideoEncoder_ReceivePacket final
{
public:
	struct FSimpleVideoPacket                     OutPacket;                                         // 0x0000(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4820[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoEncoder_ReceivePacket) == 0x000008, "Wrong alignment on SimpleVideoEncoder_ReceivePacket");
static_assert(sizeof(SimpleVideoEncoder_ReceivePacket) == 0x000038, "Wrong size on SimpleVideoEncoder_ReceivePacket");
static_assert(offsetof(SimpleVideoEncoder_ReceivePacket, OutPacket) == 0x000000, "Member 'SimpleVideoEncoder_ReceivePacket::OutPacket' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_ReceivePacket, ReturnValue) == 0x000030, "Member 'SimpleVideoEncoder_ReceivePacket::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.ReceivePackets
// 0x0010 (0x0010 - 0x0000)
struct SimpleVideoEncoder_ReceivePackets final
{
public:
	TArray<struct FSimpleVideoPacket>             OutPackets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_ReceivePackets) == 0x000008, "Wrong alignment on SimpleVideoEncoder_ReceivePackets");
static_assert(sizeof(SimpleVideoEncoder_ReceivePackets) == 0x000010, "Wrong size on SimpleVideoEncoder_ReceivePackets");
static_assert(offsetof(SimpleVideoEncoder_ReceivePackets, OutPackets) == 0x000000, "Member 'SimpleVideoEncoder_ReceivePackets::OutPackets' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.SendFrameRenderTarget
// 0x0018 (0x0018 - 0x0000)
struct SimpleVideoEncoder_SendFrameRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Resource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Timestamp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKeyframe;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4821[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoEncoder_SendFrameRenderTarget) == 0x000008, "Wrong alignment on SimpleVideoEncoder_SendFrameRenderTarget");
static_assert(sizeof(SimpleVideoEncoder_SendFrameRenderTarget) == 0x000018, "Wrong size on SimpleVideoEncoder_SendFrameRenderTarget");
static_assert(offsetof(SimpleVideoEncoder_SendFrameRenderTarget, Resource) == 0x000000, "Member 'SimpleVideoEncoder_SendFrameRenderTarget::Resource' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameRenderTarget, Timestamp) == 0x000008, "Member 'SimpleVideoEncoder_SendFrameRenderTarget::Timestamp' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameRenderTarget, bForceKeyframe) == 0x000010, "Member 'SimpleVideoEncoder_SendFrameRenderTarget::bForceKeyframe' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameRenderTarget, ReturnValue) == 0x000011, "Member 'SimpleVideoEncoder_SendFrameRenderTarget::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.SendFrameTexture
// 0x0018 (0x0018 - 0x0000)
struct SimpleVideoEncoder_SendFrameTexture final
{
public:
	class UTexture2D*                             Resource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Timestamp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKeyframe;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4822[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleVideoEncoder_SendFrameTexture) == 0x000008, "Wrong alignment on SimpleVideoEncoder_SendFrameTexture");
static_assert(sizeof(SimpleVideoEncoder_SendFrameTexture) == 0x000018, "Wrong size on SimpleVideoEncoder_SendFrameTexture");
static_assert(offsetof(SimpleVideoEncoder_SendFrameTexture, Resource) == 0x000000, "Member 'SimpleVideoEncoder_SendFrameTexture::Resource' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameTexture, Timestamp) == 0x000008, "Member 'SimpleVideoEncoder_SendFrameTexture::Timestamp' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameTexture, bForceKeyframe) == 0x000010, "Member 'SimpleVideoEncoder_SendFrameTexture::bForceKeyframe' has a wrong offset!");
static_assert(offsetof(SimpleVideoEncoder_SendFrameTexture, ReturnValue) == 0x000011, "Member 'SimpleVideoEncoder_SendFrameTexture::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.SetConfig
// 0x0014 (0x0014 - 0x0000)
struct SimpleVideoEncoder_SetConfig final
{
public:
	struct FSimpleVideoEncoderConfig              NewConfig;                                         // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_SetConfig) == 0x000004, "Wrong alignment on SimpleVideoEncoder_SetConfig");
static_assert(sizeof(SimpleVideoEncoder_SetConfig) == 0x000014, "Wrong size on SimpleVideoEncoder_SetConfig");
static_assert(offsetof(SimpleVideoEncoder_SetConfig, NewConfig) == 0x000000, "Member 'SimpleVideoEncoder_SetConfig::NewConfig' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.GetCodec
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoEncoder_GetCodec final
{
public:
	ESimpleVideoCodec                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_GetCodec) == 0x000001, "Wrong alignment on SimpleVideoEncoder_GetCodec");
static_assert(sizeof(SimpleVideoEncoder_GetCodec) == 0x000001, "Wrong size on SimpleVideoEncoder_GetCodec");
static_assert(offsetof(SimpleVideoEncoder_GetCodec, ReturnValue) == 0x000000, "Member 'SimpleVideoEncoder_GetCodec::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.GetConfig
// 0x0014 (0x0014 - 0x0000)
struct SimpleVideoEncoder_GetConfig final
{
public:
	struct FSimpleVideoEncoderConfig              ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_GetConfig) == 0x000004, "Wrong alignment on SimpleVideoEncoder_GetConfig");
static_assert(sizeof(SimpleVideoEncoder_GetConfig) == 0x000014, "Wrong size on SimpleVideoEncoder_GetConfig");
static_assert(offsetof(SimpleVideoEncoder_GetConfig, ReturnValue) == 0x000000, "Member 'SimpleVideoEncoder_GetConfig::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.IsAsync
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoEncoder_IsAsync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_IsAsync) == 0x000001, "Wrong alignment on SimpleVideoEncoder_IsAsync");
static_assert(sizeof(SimpleVideoEncoder_IsAsync) == 0x000001, "Wrong size on SimpleVideoEncoder_IsAsync");
static_assert(offsetof(SimpleVideoEncoder_IsAsync, ReturnValue) == 0x000000, "Member 'SimpleVideoEncoder_IsAsync::ReturnValue' has a wrong offset!");

// Function AVCodecsCoreRHI.SimpleVideoEncoder.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct SimpleVideoEncoder_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleVideoEncoder_IsOpen) == 0x000001, "Wrong alignment on SimpleVideoEncoder_IsOpen");
static_assert(sizeof(SimpleVideoEncoder_IsOpen) == 0x000001, "Wrong size on SimpleVideoEncoder_IsOpen");
static_assert(offsetof(SimpleVideoEncoder_IsOpen, ReturnValue) == 0x000000, "Member 'SimpleVideoEncoder_IsOpen::ReturnValue' has a wrong offset!");

}

