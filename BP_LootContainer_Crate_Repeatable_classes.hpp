#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootContainer_Crate_Repeatable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_LootContainer_TemplateV2_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LootContainer_Crate_Repeatable.BP_LootContainer_Crate_Repeatable_C
// 0x0050 (0x03B0 - 0x0360)
class ABP_LootContainer_Crate_Repeatable_C final : public ABP_LootContainer_TemplateV2_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LootContainer_Crate_Repeatable_C; // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Military_Lootbox_L;                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Military_Lootbox_L_clip;                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Military_Lootbox_L_lid;                         // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzTableLootChooserComponent*           GzTableLootChooser;                                // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzGridLootSpawnerComponent*            GzGridLootSpawner;                                 // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RepeatableTimerHandler;                            // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ServerEndChestCooldown;                            // 0x03A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AGzGameState*                           Gz_Game_State;                                     // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CacheGzGameState();
	bool CanScanOnAnyDistance();
	void ExecuteUbergraph_BP_LootContainer_Crate_Repeatable(int32 EntryPoint);
	void InitRepeatableTimer();
	void InvalidateRepeatableTimer();
	void OnRep_ServerEndChestCooldown();
	void ReceiveBeginPlay();
	void SetActiveMaterials();
	void SetEndCooldownServerTime();
	void SetInActiveMaterials();
	void SetOpenedMaterials();
	void UpdateRepeatableTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LootContainer_Crate_Repeatable_C">();
	}
	static class ABP_LootContainer_Crate_Repeatable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LootContainer_Crate_Repeatable_C>();
	}
};
static_assert(alignof(ABP_LootContainer_Crate_Repeatable_C) == 0x000008, "Wrong alignment on ABP_LootContainer_Crate_Repeatable_C");
static_assert(sizeof(ABP_LootContainer_Crate_Repeatable_C) == 0x0003B0, "Wrong size on ABP_LootContainer_Crate_Repeatable_C");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, UberGraphFrame_BP_LootContainer_Crate_Repeatable_C) == 0x000360, "Member 'ABP_LootContainer_Crate_Repeatable_C::UberGraphFrame_BP_LootContainer_Crate_Repeatable_C' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, SM_Military_Lootbox_L) == 0x000368, "Member 'ABP_LootContainer_Crate_Repeatable_C::SM_Military_Lootbox_L' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, SM_Military_Lootbox_L_clip) == 0x000370, "Member 'ABP_LootContainer_Crate_Repeatable_C::SM_Military_Lootbox_L_clip' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, SM_Military_Lootbox_L_lid) == 0x000378, "Member 'ABP_LootContainer_Crate_Repeatable_C::SM_Military_Lootbox_L_lid' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, TextRender) == 0x000380, "Member 'ABP_LootContainer_Crate_Repeatable_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, GzTableLootChooser) == 0x000388, "Member 'ABP_LootContainer_Crate_Repeatable_C::GzTableLootChooser' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, GzGridLootSpawner) == 0x000390, "Member 'ABP_LootContainer_Crate_Repeatable_C::GzGridLootSpawner' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, RepeatableTimerHandler) == 0x000398, "Member 'ABP_LootContainer_Crate_Repeatable_C::RepeatableTimerHandler' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, ServerEndChestCooldown) == 0x0003A0, "Member 'ABP_LootContainer_Crate_Repeatable_C::ServerEndChestCooldown' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_Crate_Repeatable_C, Gz_Game_State) == 0x0003A8, "Member 'ABP_LootContainer_Crate_Repeatable_C::Gz_Game_State' has a wrong offset!");

}

