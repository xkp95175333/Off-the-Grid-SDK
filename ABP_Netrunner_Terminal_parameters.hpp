#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Netrunner_Terminal

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_Netrunner_Terminal.ABP_Netrunner_Terminal_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Netrunner_Terminal_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Netrunner_Terminal_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Netrunner_Terminal_C_AnimGraph");
static_assert(sizeof(ABP_Netrunner_Terminal_C_AnimGraph) == 0x000010, "Wrong size on ABP_Netrunner_Terminal_C_AnimGraph");
static_assert(offsetof(ABP_Netrunner_Terminal_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_Netrunner_Terminal_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_Netrunner_Terminal.ABP_Netrunner_Terminal_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Netrunner_Terminal_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Netrunner_Terminal.ABP_Netrunner_Terminal_C.ExecuteUbergraph_ABP_Netrunner_Terminal
// 0x0038 (0x0038 - 0x0000)
struct ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699D[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Netrunner_Terminal_V2_C*            K2Node_DynamicCast_AsBP_Netrunner_Terminal_V2;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699F[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal) == 0x000008, "Wrong alignment on ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal");
static_assert(sizeof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal) == 0x000038, "Wrong size on ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, EntryPoint) == 0x000000, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000008, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, K2Node_Event_DeltaTimeX) == 0x000010, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_GetOwningActor_ReturnValue) == 0x000018, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, K2Node_DynamicCast_AsBP_Netrunner_Terminal_V2) == 0x000020, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::K2Node_DynamicCast_AsBP_Netrunner_Terminal_V2' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_BooleanAND_ReturnValue_1) == 0x000029, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000030, "Member 'ABP_Netrunner_Terminal_C_ExecuteUbergraph_ABP_Netrunner_Terminal::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function ABP_Netrunner_Terminal.ABP_Netrunner_Terminal_C.OnStateEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_Netrunner_Terminal_C_OnStateEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Netrunner_Terminal_C_OnStateEntry) == 0x000008, "Wrong alignment on ABP_Netrunner_Terminal_C_OnStateEntry");
static_assert(sizeof(ABP_Netrunner_Terminal_C_OnStateEntry) == 0x000020, "Wrong size on ABP_Netrunner_Terminal_C_OnStateEntry");
static_assert(offsetof(ABP_Netrunner_Terminal_C_OnStateEntry, Context) == 0x000000, "Member 'ABP_Netrunner_Terminal_C_OnStateEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_OnStateEntry, Node) == 0x000010, "Member 'ABP_Netrunner_Terminal_C_OnStateEntry::Node' has a wrong offset!");

// Function ABP_Netrunner_Terminal.ABP_Netrunner_Terminal_C.OnStateExit
// 0x0020 (0x0020 - 0x0000)
struct ABP_Netrunner_Terminal_C_OnStateExit final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Netrunner_Terminal_C_OnStateExit) == 0x000008, "Wrong alignment on ABP_Netrunner_Terminal_C_OnStateExit");
static_assert(sizeof(ABP_Netrunner_Terminal_C_OnStateExit) == 0x000020, "Wrong size on ABP_Netrunner_Terminal_C_OnStateExit");
static_assert(offsetof(ABP_Netrunner_Terminal_C_OnStateExit, Context) == 0x000000, "Member 'ABP_Netrunner_Terminal_C_OnStateExit::Context' has a wrong offset!");
static_assert(offsetof(ABP_Netrunner_Terminal_C_OnStateExit, Node) == 0x000010, "Member 'ABP_Netrunner_Terminal_C_OnStateExit::Node' has a wrong offset!");

}

