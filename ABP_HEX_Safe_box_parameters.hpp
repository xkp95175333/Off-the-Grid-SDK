#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_HEX_Safe_box

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_HEX_Safe_box_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_HEX_Safe_box_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_AnimGraph");
static_assert(sizeof(ABP_HEX_Safe_box_C_AnimGraph) == 0x000010, "Wrong size on ABP_HEX_Safe_box_C_AnimGraph");
static_assert(offsetof(ABP_HEX_Safe_box_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_HEX_Safe_box_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_HEX_Safe_box_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HEX_Safe_box_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_HEX_Safe_box_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_HEX_Safe_box_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_HEX_Safe_box_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_HEX_Safe_box_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_HEX_Safe_box_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.ExecuteUbergraph_ABP_HEX_Safe_box
// 0x0028 (0x0028 - 0x0000)
struct ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69A5[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_LootContainer_Crate_Hextractor_C*   K2Node_DynamicCast_AsBP_Loot_Container_Crate_Hextractor; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box");
static_assert(sizeof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box) == 0x000028, "Wrong size on ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, EntryPoint) == 0x000000, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue_1) == 0x000007, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue_2) == 0x000009, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, K2Node_Event_DeltaTimeX) == 0x00000C, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_GetOwningActor_ReturnValue) == 0x000010, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, K2Node_DynamicCast_AsBP_Loot_Container_Crate_Hextractor) == 0x000018, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::K2Node_DynamicCast_AsBP_Loot_Container_Crate_Hextractor' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_Not_PreBool_ReturnValue_3) == 0x000021, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue_3) == 0x000023, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue_4) == 0x000025, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box, CallFunc_BooleanAND_ReturnValue_5) == 0x000026, "Member 'ABP_HEX_Safe_box_C_ExecuteUbergraph_ABP_HEX_Safe_box::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.On State Entry 0
// 0x0020 (0x0020 - 0x0000)
struct ABP_HEX_Safe_box_C_On_State_Entry_0 final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_HEX_Safe_box_C_On_State_Entry_0) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_On_State_Entry_0");
static_assert(sizeof(ABP_HEX_Safe_box_C_On_State_Entry_0) == 0x000020, "Wrong size on ABP_HEX_Safe_box_C_On_State_Entry_0");
static_assert(offsetof(ABP_HEX_Safe_box_C_On_State_Entry_0, Context) == 0x000000, "Member 'ABP_HEX_Safe_box_C_On_State_Entry_0::Context' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_On_State_Entry_0, Node) == 0x000010, "Member 'ABP_HEX_Safe_box_C_On_State_Entry_0::Node' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.OnStateEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_HEX_Safe_box_C_OnStateEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_HEX_Safe_box_C_OnStateEntry) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_OnStateEntry");
static_assert(sizeof(ABP_HEX_Safe_box_C_OnStateEntry) == 0x000020, "Wrong size on ABP_HEX_Safe_box_C_OnStateEntry");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateEntry, Context) == 0x000000, "Member 'ABP_HEX_Safe_box_C_OnStateEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateEntry, Node) == 0x000010, "Member 'ABP_HEX_Safe_box_C_OnStateEntry::Node' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.OnStateExit
// 0x0020 (0x0020 - 0x0000)
struct ABP_HEX_Safe_box_C_OnStateExit final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_HEX_Safe_box_C_OnStateExit) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_OnStateExit");
static_assert(sizeof(ABP_HEX_Safe_box_C_OnStateExit) == 0x000020, "Wrong size on ABP_HEX_Safe_box_C_OnStateExit");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateExit, Context) == 0x000000, "Member 'ABP_HEX_Safe_box_C_OnStateExit::Context' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateExit, Node) == 0x000010, "Member 'ABP_HEX_Safe_box_C_OnStateExit::Node' has a wrong offset!");

// Function ABP_HEX_Safe_box.ABP_HEX_Safe_box_C.OnStateExit_0
// 0x0020 (0x0020 - 0x0000)
struct ABP_HEX_Safe_box_C_OnStateExit_0 final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_HEX_Safe_box_C_OnStateExit_0) == 0x000008, "Wrong alignment on ABP_HEX_Safe_box_C_OnStateExit_0");
static_assert(sizeof(ABP_HEX_Safe_box_C_OnStateExit_0) == 0x000020, "Wrong size on ABP_HEX_Safe_box_C_OnStateExit_0");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateExit_0, Context) == 0x000000, "Member 'ABP_HEX_Safe_box_C_OnStateExit_0::Context' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Safe_box_C_OnStateExit_0, Node) == 0x000010, "Member 'ABP_HEX_Safe_box_C_OnStateExit_0::Node' has a wrong offset!");

}

