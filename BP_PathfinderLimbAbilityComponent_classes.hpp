#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PathfinderLimbAbilityComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C
// 0x03C8 (0x04B8 - 0x00F0)
class UBP_PathfinderLimbAbilityComponent_C final : public UGzLimbAbilityComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Launch_Speed;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DB8[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzMultiPartCharacter*                  As_Gz_Multi_Part_Character;                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ProjectileRadius;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DB9[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0128(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FPredictProjectilePathResult           Predict_Result;                                    // 0x0220(0x0140)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_PathfinderPathPreview_C*            PreviewActor;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ProjectileLaunched;                                // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             StartAim;                                          // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             StopAim;                                           // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                LaunchLocation;                                    // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchDirection;                                   // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Slot;                                              // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PreviewPathSpawned;                                // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBA[0x6];                                     // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ChargeTime;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ConsumeCharge;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MaxCharges;                                        // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeTimeMax;                                     // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinVelocity;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxVelocity;                                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargesConsumed;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Passed;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             MaxCharge;                                         // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             StartCharge;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EndCharge;                                         // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsMaxCharge;                                       // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShotMade;                                          // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBB[0x6];                                     // 0x044A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GrenadesFired;                                     // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FActiveGameplayEffectHandle            LockEffectHandle;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UI_ChargeConsumed;                                 // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UI_DetonationAvailable;                            // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UI_OverchargeStarted;                              // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             RemoteActivated;                                   // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PathPreview;                                       // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMultishot;                                   // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBC[0x2];                                     // 0x04AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            RemoteEffectHandle;                                // 0x04AC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateLaunchAndUpdatePreview();
	void CallConsumeCharge();
	void ConsumeCharge__DelegateSignature();
	void DetonationAvailable(bool IsAvailable);
	void EndCharge__DelegateSignature();
	void ExecuteUbergraph_BP_PathfinderLimbAbilityComponent(int32 EntryPoint);
	struct FVector GetLaunchDirection(const struct FVector& Param_LaunchLocation);
	void GetLaunchLocation(struct FVector* Param_LaunchLocation);
	void GetLaunchVelo(struct FVector* LaunchVelocity, struct FVector* Param_LaunchLocation, double* LaunchSpeed);
	void GetPathParams(struct FPredictProjectilePathParams* PredictProjectilePathParams);
	void IsLocal(bool* bIsLocallyControlled);
	void MaxCharge__DelegateSignature();
	void ProjectileLaunched__DelegateSignature(class AActor* ProjectileId);
	void ProjectileLaunched_Event(class AActor* ProjectileId);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoteActivated__DelegateSignature();
	void ResetVariables();
	void SetChargeTime(double A);
	void SpawnPreview();
	void SpawnPreviewActorCharHit();
	void StartAim__DelegateSignature();
	void StartAim_Event();
	void StartCharge__DelegateSignature();
	void StopAim__DelegateSignature();
	void StopAim_Event();
	void UI_ChargeConsumed__DelegateSignature(int32 ChargesLoaded, int32 Param_MaxCharges);
	void UI_DetonationAvailable__DelegateSignature(bool IsDetonationAvailable);
	void UI_OverchargeStarted__DelegateSignature(double OverchargeTimer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PathfinderLimbAbilityComponent_C">();
	}
	static class UBP_PathfinderLimbAbilityComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PathfinderLimbAbilityComponent_C>();
	}
};
static_assert(alignof(UBP_PathfinderLimbAbilityComponent_C) == 0x000008, "Wrong alignment on UBP_PathfinderLimbAbilityComponent_C");
static_assert(sizeof(UBP_PathfinderLimbAbilityComponent_C) == 0x0004B8, "Wrong size on UBP_PathfinderLimbAbilityComponent_C");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_PathfinderLimbAbilityComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, Launch_Speed) == 0x0000F8, "Member 'UBP_PathfinderLimbAbilityComponent_C::Launch_Speed' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, As_Gz_Multi_Part_Character) == 0x000100, "Member 'UBP_PathfinderLimbAbilityComponent_C::As_Gz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ProjectileRadius) == 0x000108, "Member 'UBP_PathfinderLimbAbilityComponent_C::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, TargetLocation) == 0x000110, "Member 'UBP_PathfinderLimbAbilityComponent_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, HitResult) == 0x000128, "Member 'UBP_PathfinderLimbAbilityComponent_C::HitResult' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, Predict_Result) == 0x000220, "Member 'UBP_PathfinderLimbAbilityComponent_C::Predict_Result' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, PreviewActor) == 0x000360, "Member 'UBP_PathfinderLimbAbilityComponent_C::PreviewActor' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ProjectileLaunched) == 0x000368, "Member 'UBP_PathfinderLimbAbilityComponent_C::ProjectileLaunched' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, StartAim) == 0x000378, "Member 'UBP_PathfinderLimbAbilityComponent_C::StartAim' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, StopAim) == 0x000388, "Member 'UBP_PathfinderLimbAbilityComponent_C::StopAim' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, LaunchLocation) == 0x000398, "Member 'UBP_PathfinderLimbAbilityComponent_C::LaunchLocation' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, LaunchDirection) == 0x0003B0, "Member 'UBP_PathfinderLimbAbilityComponent_C::LaunchDirection' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, Slot) == 0x0003C8, "Member 'UBP_PathfinderLimbAbilityComponent_C::Slot' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, PreviewPathSpawned) == 0x0003C9, "Member 'UBP_PathfinderLimbAbilityComponent_C::PreviewPathSpawned' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ChargeTime) == 0x0003D0, "Member 'UBP_PathfinderLimbAbilityComponent_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ConsumeCharge) == 0x0003D8, "Member 'UBP_PathfinderLimbAbilityComponent_C::ConsumeCharge' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, MaxCharges) == 0x0003E8, "Member 'UBP_PathfinderLimbAbilityComponent_C::MaxCharges' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ChargeTimeMax) == 0x0003F0, "Member 'UBP_PathfinderLimbAbilityComponent_C::ChargeTimeMax' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, MinVelocity) == 0x0003F8, "Member 'UBP_PathfinderLimbAbilityComponent_C::MinVelocity' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, MaxVelocity) == 0x000400, "Member 'UBP_PathfinderLimbAbilityComponent_C::MaxVelocity' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ChargesConsumed) == 0x000408, "Member 'UBP_PathfinderLimbAbilityComponent_C::ChargesConsumed' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, Time_Passed) == 0x000410, "Member 'UBP_PathfinderLimbAbilityComponent_C::Time_Passed' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, MaxCharge) == 0x000418, "Member 'UBP_PathfinderLimbAbilityComponent_C::MaxCharge' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, StartCharge) == 0x000428, "Member 'UBP_PathfinderLimbAbilityComponent_C::StartCharge' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, EndCharge) == 0x000438, "Member 'UBP_PathfinderLimbAbilityComponent_C::EndCharge' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, IsMaxCharge) == 0x000448, "Member 'UBP_PathfinderLimbAbilityComponent_C::IsMaxCharge' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, ShotMade) == 0x000449, "Member 'UBP_PathfinderLimbAbilityComponent_C::ShotMade' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, GrenadesFired) == 0x000450, "Member 'UBP_PathfinderLimbAbilityComponent_C::GrenadesFired' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, LockEffectHandle) == 0x000460, "Member 'UBP_PathfinderLimbAbilityComponent_C::LockEffectHandle' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, UI_ChargeConsumed) == 0x000468, "Member 'UBP_PathfinderLimbAbilityComponent_C::UI_ChargeConsumed' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, UI_DetonationAvailable) == 0x000478, "Member 'UBP_PathfinderLimbAbilityComponent_C::UI_DetonationAvailable' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, UI_OverchargeStarted) == 0x000488, "Member 'UBP_PathfinderLimbAbilityComponent_C::UI_OverchargeStarted' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, RemoteActivated) == 0x000498, "Member 'UBP_PathfinderLimbAbilityComponent_C::RemoteActivated' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, PathPreview) == 0x0004A8, "Member 'UBP_PathfinderLimbAbilityComponent_C::PathPreview' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, EnableMultishot) == 0x0004A9, "Member 'UBP_PathfinderLimbAbilityComponent_C::EnableMultishot' has a wrong offset!");
static_assert(offsetof(UBP_PathfinderLimbAbilityComponent_C, RemoteEffectHandle) == 0x0004AC, "Member 'UBP_PathfinderLimbAbilityComponent_C::RemoteEffectHandle' has a wrong offset!");

}

