#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Jetpack_VerE

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "G01_structs.hpp"
#include "InputJetpackControl_VerD_E_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_UpdateSidewaysBend
// 0x00C8 (0x00C8 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5851[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5852[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BendAccumulated_ImplicitCast;   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5853[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BendAccumulated_ImplicitCast_1; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5854[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_2;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BendAccumulated_ImplicitCast_2; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend) == 0x0000C8, "Wrong size on ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::Node' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000038, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000039, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000059, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_BooleanOR_ReturnValue) == 0x00005A, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000068, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000070, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, K2Node_VariableSet_BendAccumulated_ImplicitCast) == 0x000078, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::K2Node_VariableSet_BendAccumulated_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000080, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000088, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, K2Node_VariableSet_BendAccumulated_ImplicitCast_1) == 0x000090, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::K2Node_VariableSet_BendAccumulated_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000098, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Add_DoubleDouble_A_ImplicitCast_2) == 0x0000A0, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Add_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Abs_A_ImplicitCast) == 0x0000A8, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0000B0, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x0000B8, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend, K2Node_VariableSet_BendAccumulated_ImplicitCast_2) == 0x0000C0, "Member 'ABP_Jetpack_VerE_C_SF_UpdateSidewaysBend::K2Node_VariableSet_BendAccumulated_ImplicitCast_2' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_Update_SetAnimOnBreakFree
// 0x0048 (0x0048 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5855[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree) == 0x000048, "Wrong size on ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree::Node' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree, CallFunc_SetSequence_ReturnValue) == 0x000038, "Member 'ABP_Jetpack_VerE_C_SF_Update_SetAnimOnBreakFree::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_Update_GetLastLeaningDirectot
// 0x0040 (0x0040 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5856[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5857[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot) == 0x000040, "Wrong size on ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::Node' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, Temp_bool_Variable) == 0x000020, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, Temp_name_Variable) == 0x000024, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, Temp_name_Variable_1) == 0x00002C, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000034, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot, K2Node_Select_Default) == 0x000038, "Member 'ABP_Jetpack_VerE_C_SF_Update_GetLastLeaningDirectot::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_Setup_SetWavyData
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_Setup_SetWavyData final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_Setup_SetWavyData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_Setup_SetWavyData");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_Setup_SetWavyData) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_Setup_SetWavyData");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Setup_SetWavyData, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_Setup_SetWavyData::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Setup_SetWavyData, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_Setup_SetWavyData::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_Setup_OverrideWavyData
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_Setup_OverrideWavyData::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_EnableLimbSway
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_EnableLimbSway final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_EnableLimbSway) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_EnableLimbSway");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_EnableLimbSway) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_EnableLimbSway");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_EnableLimbSway, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_EnableLimbSway::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_EnableLimbSway, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_EnableLimbSway::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_DisableLimbSway
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_DisableLimbSway final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_DisableLimbSway) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_DisableLimbSway");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_DisableLimbSway) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_DisableLimbSway");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_DisableLimbSway, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_DisableLimbSway::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_DisableLimbSway, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_DisableLimbSway::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_ControlRigEnable
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_ControlRigEnable final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_ControlRigEnable) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_ControlRigEnable");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_ControlRigEnable) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_ControlRigEnable");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_ControlRigEnable, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_ControlRigEnable::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_ControlRigEnable, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_ControlRigEnable::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.SF_ControlRigDisable
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_SF_ControlRigDisable final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_SF_ControlRigDisable) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_SF_ControlRigDisable");
static_assert(sizeof(ABP_Jetpack_VerE_C_SF_ControlRigDisable) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_SF_ControlRigDisable");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_ControlRigDisable, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_SF_ControlRigDisable::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_SF_ControlRigDisable, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_SF_ControlRigDisable::Node' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.OnInitialUpdate
// 0x0068 (0x0068 - 0x0000)
struct ABP_Jetpack_VerE_C_OnInitialUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5858[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5859[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0058(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_OnInitialUpdate) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_OnInitialUpdate");
static_assert(sizeof(ABP_Jetpack_VerE_C_OnInitialUpdate) == 0x000068, "Wrong size on ABP_Jetpack_VerE_C_OnInitialUpdate");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::Node' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, Temp_bool_Variable) == 0x000020, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, Temp_object_Variable) == 0x000040, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, Temp_object_Variable_1) == 0x000048, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, K2Node_Select_Default) == 0x000050, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnInitialUpdate, CallFunc_SetSequence_ReturnValue) == 0x000058, "Member 'ABP_Jetpack_VerE_C_OnInitialUpdate::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.OnBecomeRelevant
// 0x0058 (0x0058 - 0x0000)
struct ABP_Jetpack_VerE_C_OnBecomeRelevant final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585A[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_Array_Random_OutItem;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585B[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_OnBecomeRelevant) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_OnBecomeRelevant");
static_assert(sizeof(ABP_Jetpack_VerE_C_OnBecomeRelevant) == 0x000058, "Wrong size on ABP_Jetpack_VerE_C_OnBecomeRelevant");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, Context) == 0x000000, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::Context' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, Node) == 0x000010, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::Node' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, CallFunc_Array_Random_OutItem) == 0x000038, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, CallFunc_Array_Random_OutIndex) == 0x000040, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_OnBecomeRelevant, CallFunc_SetSequence_ReturnValue) == 0x000048, "Member 'ABP_Jetpack_VerE_C_OnBecomeRelevant::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_NPC_CoverState");
static_assert(sizeof(ABP_Jetpack_VerE_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_NPC_CoverState");
static_assert(offsetof(ABP_Jetpack_VerE_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_Limbless_State");
static_assert(sizeof(ABP_Jetpack_VerE_C_Limbless_State) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_Limbless_State");
static_assert(offsetof(ABP_Jetpack_VerE_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_Jetpack_VerE_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_KneeSlide_State");
static_assert(sizeof(ABP_Jetpack_VerE_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_KneeSlide_State");
static_assert(offsetof(ABP_Jetpack_VerE_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_Jetpack_VerE_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetOwnerMovements
// 0x0018 (0x0018 - 0x0000)
struct ABP_Jetpack_VerE_C_GetOwnerMovements final
{
public:
	class UGzCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzCharacterMovementComponent*          K2Node_DynamicCast_AsGz_Character_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetOwnerMovements) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetOwnerMovements");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetOwnerMovements) == 0x000018, "Wrong size on ABP_Jetpack_VerE_C_GetOwnerMovements");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetOwnerMovements, ReturnValue) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetOwnerMovements::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetOwnerMovements, K2Node_DynamicCast_AsGz_Character_Movement_Component) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetOwnerMovements::K2Node_DynamicCast_AsGz_Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetOwnerMovements, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetOwnerMovements::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetNormalizeData
// 0x0038 (0x0038 - 0x0000)
struct ABP_Jetpack_VerE_C_GetNormalizeData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_Value_ImplicitCast;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetNormalizeData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetNormalizeData");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetNormalizeData) == 0x000038, "Wrong size on ABP_Jetpack_VerE_C_GetNormalizeData");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, DeltaTime) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_NormalizeToRange_ReturnValue) == 0x000018, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_NormalizeToRange_ReturnValue_1) == 0x000020, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_NormalizeToRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_Abs_A_ImplicitCast) == 0x000028, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetNormalizeData, CallFunc_NormalizeToRange_Value_ImplicitCast) == 0x000030, "Member 'ABP_Jetpack_VerE_C_GetNormalizeData::CallFunc_NormalizeToRange_Value_ImplicitCast' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetMainThreadSafeAnimation
// 0x0018 (0x0018 - 0x0000)
struct ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation) == 0x000018, "Wrong size on ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation, ReturnValue) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation, K2Node_DynamicCast_AsABP_Human) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetMainThreadSafeAnimation::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetJetpackStatsData
// 0x0130 (0x0130 - 0x0000)
struct ABP_Jetpack_VerE_C_GetJetpackStatsData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585E[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585F[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5860[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5861[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5862[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_5;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5863[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_6;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_1;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_2;      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5864[0x5];                                     // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast;    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LimbsSpreadAlpha_ImplicitCast;  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5865[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TurbulenceStrengthAlpha_ImplicitCast; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5866[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LimbsSwayAlpha_ImplicitCast;    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetJetpackStatsData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetJetpackStatsData");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetJetpackStatsData) == 0x000130, "Wrong size on ABP_Jetpack_VerE_C_GetJetpackStatsData");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, DeltaTime) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, Temp_real_Variable) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_VSizeXY_ReturnValue) == 0x000028, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000040, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000058, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_SafeDivide_ReturnValue) == 0x000060, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_VSize_ReturnValue_1) == 0x000070, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000078, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_SafeDivide_ReturnValue_1) == 0x000080, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_FClamp_ReturnValue_1) == 0x000090, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000098, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x0000A0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_BooleanAND_ReturnValue_1) == 0x0000A8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Abs_ReturnValue_1) == 0x0000B0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_5) == 0x0000C0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_ReturnValue_6) == 0x0000D0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_FClamp_ReturnValue_2) == 0x0000F0, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_NotEqual_DoubleDouble_ReturnValue_1) == 0x0000F8, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_NotEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_NotEqual_DoubleDouble_ReturnValue_2) == 0x0000F9, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_NotEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_BooleanOR_ReturnValue) == 0x0000FA, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_InRange_FloatFloat_Value_ImplicitCast) == 0x000100, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_InRange_FloatFloat_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, K2Node_VariableSet_LimbsSpreadAlpha_ImplicitCast) == 0x000108, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::K2Node_VariableSet_LimbsSpreadAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000110, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, K2Node_VariableSet_TurbulenceStrengthAlpha_ImplicitCast) == 0x000118, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::K2Node_VariableSet_TurbulenceStrengthAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000120, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetJetpackStatsData, K2Node_VariableSet_LimbsSwayAlpha_ImplicitCast) == 0x000128, "Member 'ABP_Jetpack_VerE_C_GetJetpackStatsData::K2Node_VariableSet_LimbsSwayAlpha_ImplicitCast' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetHit
// 0x00D8 (0x00D8 - 0x0000)
struct ABP_Jetpack_VerE_C_GetHit final
{
public:
	TMap<EGzCharacterDamageAreaType, struct FHitDirectionInfo> TargetMap;                                         // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Hit;                                               // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5867[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hit_Force;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EGzCharacterDamageAreaType>            CallFunc_Map_Keys_Keys;                            // 0x0060(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzCharacterDamageAreaType                    CallFunc_Array_Get_Item;                           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5868[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitDirectionInfo                      CallFunc_Map_Find_Value;                           // 0x0080(0x0030)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5869[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586A[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586B[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetHit) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetHit");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetHit) == 0x0000D8, "Wrong size on ABP_Jetpack_VerE_C_GetHit");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, TargetMap) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetHit::TargetMap' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, Hit) == 0x000050, "Member 'ABP_Jetpack_VerE_C_GetHit::Hit' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, Hit_Force) == 0x000058, "Member 'ABP_Jetpack_VerE_C_GetHit::Hit_Force' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Map_Keys_Keys) == 0x000060, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, Temp_int_Array_Index_Variable) == 0x000070, "Member 'ABP_Jetpack_VerE_C_GetHit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Array_Get_Item) == 0x000078, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Map_Find_Value) == 0x000080, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Map_Find_ReturnValue) == 0x0000B0, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'ABP_Jetpack_VerE_C_GetHit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_VSize_ReturnValue) == 0x0000B8, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetHit, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'ABP_Jetpack_VerE_C_GetHit::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetControlData
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Jetpack_VerE_C_GetControlData final
{
public:
	double                                        CallFunc_BreakVector_X;                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586C[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586D[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586E[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AimYaw_ImplicitCast;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AimYaw_ImplicitCast_1;          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AimYaw_ImplicitCast_2;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetControlData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetControlData");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetControlData) == 0x0000C0, "Wrong size on ABP_Jetpack_VerE_C_GetControlData");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakVector_X) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakVector_Y) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakVector_Z) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_NormalizeToRange_ReturnValue) == 0x000020, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Lerp_ReturnValue) == 0x000028, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_ComposeRotators_ReturnValue) == 0x000030, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000048, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakRotator_Roll) == 0x000060, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakRotator_Pitch) == 0x000064, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_BreakRotator_Yaw) == 0x000068, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_FClamp_ReturnValue) == 0x000070, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000078, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000090, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000091, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000098, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_Abs_A_ImplicitCast) == 0x0000A0, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, CallFunc_FClamp_Value_ImplicitCast) == 0x0000A8, "Member 'ABP_Jetpack_VerE_C_GetControlData::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, K2Node_VariableSet_AimYaw_ImplicitCast) == 0x0000B0, "Member 'ABP_Jetpack_VerE_C_GetControlData::K2Node_VariableSet_AimYaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, K2Node_VariableSet_AimYaw_ImplicitCast_1) == 0x0000B4, "Member 'ABP_Jetpack_VerE_C_GetControlData::K2Node_VariableSet_AimYaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetControlData, K2Node_VariableSet_AimYaw_ImplicitCast_2) == 0x0000B8, "Member 'ABP_Jetpack_VerE_C_GetControlData::K2Node_VariableSet_AimYaw_ImplicitCast_2' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GetCharacterData
// 0x0018 (0x0018 - 0x0000)
struct ABP_Jetpack_VerE_C_GetCharacterData final
{
public:
	class AGzPlayerCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GetCharacterData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GetCharacterData");
static_assert(sizeof(ABP_Jetpack_VerE_C_GetCharacterData) == 0x000018, "Wrong size on ABP_Jetpack_VerE_C_GetCharacterData");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetCharacterData, ReturnValue) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GetCharacterData::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetCharacterData, K2Node_DynamicCast_AsGz_Player_Character) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GetCharacterData::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GetCharacterData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GetCharacterData::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.GereneratePhysicalData
// 0x01E0 (0x01E0 - 0x0000)
struct ABP_Jetpack_VerE_C_GereneratePhysicalData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5870[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_4;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   Temp_byte_Variable_2;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5871[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   CallFunc_DetectInputPress_ReturnValue;             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5872[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_3;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_4;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_7;                       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_8;                       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_9;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_5;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue_1;           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_10;                      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_6;                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_11;                      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_12;                      // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   CallFunc_DetectInputPress_ReturnValue_1;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5873[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_Select_Default_2;                           // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_FallingLeanAngle_ImplicitCast;  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5874[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_GereneratePhysicalData) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_GereneratePhysicalData");
static_assert(sizeof(ABP_Jetpack_VerE_C_GereneratePhysicalData) == 0x0001E0, "Wrong size on ABP_Jetpack_VerE_C_GereneratePhysicalData");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, DeltaTime) == 0x000000, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable) == 0x000008, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_byte_Variable) == 0x000010, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_1) == 0x000018, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_2) == 0x000020, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_3) == 0x000028, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_byte_Variable_1) == 0x000030, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_4) == 0x000038, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_5) == 0x000040, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_6) == 0x000048, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue) == 0x000050, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_7) == 0x000058, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_real_Variable_8) == 0x000060, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, Temp_byte_Variable_2) == 0x000068, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000070, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_1) == 0x000080, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_NormalizeToRange_ReturnValue) == 0x000090, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000098, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_FClamp_ReturnValue) == 0x0000A0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_1) == 0x0000A8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000B0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_FClamp_ReturnValue_1) == 0x0000B8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_2) == 0x0000C0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_2) == 0x0000C8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_DetectInputPress_ReturnValue) == 0x0000D0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_DetectInputPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_3) == 0x0000D8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, K2Node_Select_Default) == 0x0000E0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, K2Node_Select_Default_1) == 0x0000E8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_FInterpTo_ReturnValue) == 0x0000F0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_4) == 0x0000F8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_5) == 0x000100, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_3) == 0x000108, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_6) == 0x000110, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_4) == 0x000118, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_7) == 0x000120, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_8) == 0x000128, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_9) == 0x000130, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_5) == 0x000138, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_FClamp_ReturnValue_2) == 0x000140, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_NormalizeToRange_ReturnValue_1) == 0x000148, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_NormalizeToRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000150, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_10) == 0x000158, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_ReturnValue_6) == 0x000160, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_11) == 0x000168, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_ReturnValue_12) == 0x000170, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_DetectInputPress_ReturnValue_1) == 0x000178, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_DetectInputPress_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_MakeRotator_ReturnValue) == 0x000180, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, K2Node_Select_Default_2) == 0x000198, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_FInterpTo_ReturnValue_1) == 0x0001A0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, K2Node_VariableSet_FallingLeanAngle_ImplicitCast) == 0x0001A8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::K2Node_VariableSet_FallingLeanAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0001B0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_A_ImplicitCast) == 0x0001B8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Lerp_Alpha_ImplicitCast) == 0x0001C0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_A_ImplicitCast) == 0x0001C8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0001D0, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_GereneratePhysicalData, CallFunc_Abs_A_ImplicitCast_1) == 0x0001D8, "Member 'ABP_Jetpack_VerE_C_GereneratePhysicalData::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBodyAdditives");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBodyAdditives");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_StopState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_StopState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_StartState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_StartState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_PivotState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_PivotState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_IdleState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_IdleState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_FallLandState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_FallLandState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_CycleState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_CycleState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        Param_AimYaw;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimPitch;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_Aiming");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_Jetpack_VerE_C_FullBody_Aiming");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_Aiming, Param_AimYaw) == 0x000010, "Member 'ABP_Jetpack_VerE_C_FullBody_Aiming::Param_AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_Aiming, AimPitch) == 0x000018, "Member 'ABP_Jetpack_VerE_C_FullBody_Aiming::AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_Jetpack_VerE_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.ExecuteUbergraph_ABP_Jetpack_VerE
// 0x0070 (0x0070 - 0x0000)
struct ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5875[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHit_Hit;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5876[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_3;         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5877[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5878[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5879[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_4;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_5;         // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_587A[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE");
static_assert(sizeof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE) == 0x000070, "Wrong size on ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, EntryPoint) == 0x000000, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000004, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000005, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_GetHit_Hit) == 0x000021, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_GetHit_Hit' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000022, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x000024, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_BooleanAND_ReturnValue_1) == 0x000025, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_GetCurveValue_ReturnValue) == 0x000028, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00002E, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_GetCurveValue_ReturnValue_1) == 0x000030, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_BooleanAND_ReturnValue_2) == 0x000034, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_MakeRotator_ReturnValue_1) == 0x000038, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_BooleanOR_ReturnValue) == 0x000050, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_GetCurveValue_ReturnValue_2) == 0x000054, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue_4) == 0x000059, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_InRange_FloatFloat_ReturnValue_5) == 0x00005A, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_InRange_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'ABP_Jetpack_VerE_C_ExecuteUbergraph_ABP_Jetpack_VerE::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.DetectInputPress
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_DetectInputPress final
{
public:
	double                                        Input;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputJetpackControl_VerD_E                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_DetectInputPress) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_DetectInputPress");
static_assert(sizeof(ABP_Jetpack_VerE_C_DetectInputPress) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_DetectInputPress");
static_assert(offsetof(ABP_Jetpack_VerE_C_DetectInputPress, Input) == 0x000000, "Member 'ABP_Jetpack_VerE_C_DetectInputPress::Input' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_DetectInputPress, ReturnValue) == 0x000008, "Member 'ABP_Jetpack_VerE_C_DetectInputPress::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_DetectInputPress, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000009, "Member 'ABP_Jetpack_VerE_C_DetectInputPress::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_DetectInputPress, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000A, "Member 'ABP_Jetpack_VerE_C_DetectInputPress::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_Jetpack_VerE_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_Jetpack_VerE_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.Debug
// 0x0530 (0x0530 - 0x0000)
struct ABP_Jetpack_VerE_C_Debug final
{
public:
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0000(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0090(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x00D8(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0120(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0168(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x01B0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x01F8(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x0240(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0288(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x02D0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_11;           // 0x0318(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_12;           // 0x0360(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_13;           // 0x03A8(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_14;           // 0x03F0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_15;           // 0x0438(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_16;           // 0x0480(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_17;           // 0x04C8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0510(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0520(0x0010)()
};
static_assert(alignof(ABP_Jetpack_VerE_C_Debug) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_Debug");
static_assert(sizeof(ABP_Jetpack_VerE_C_Debug) == 0x000530, "Wrong size on ABP_Jetpack_VerE_C_Debug");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData) == 0x000000, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_2) == 0x000090, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_3) == 0x0000D8, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_4) == 0x000120, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_5) == 0x000168, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_6) == 0x0001B0, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_7) == 0x0001F8, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_8) == 0x000240, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_9) == 0x000288, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_10) == 0x0002D0, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_11) == 0x000318, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_11' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_12) == 0x000360, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_12' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_13) == 0x0003A8, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_13' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_14) == 0x0003F0, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_14' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_15) == 0x000438, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_15' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_16) == 0x000480, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_16' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeStruct_FormatArgumentData_17) == 0x0004C8, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeStruct_FormatArgumentData_17' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, K2Node_MakeArray_Array) == 0x000510, "Member 'ABP_Jetpack_VerE_C_Debug::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Debug, CallFunc_Format_ReturnValue) == 0x000520, "Member 'ABP_Jetpack_VerE_C_Debug::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_Jetpack_VerE_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_Jetpack_VerE_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_Jetpack_VerE_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_Jetpack_VerE_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_Jetpack_VerE_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_Jetpack_VerE_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_Jetpack_VerE_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_Jetpack_VerE_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_Jetpack_VerE_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.BlueprintThreadSafeUpdateAnimation
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_587B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetNormalizeData_DeltaTime_ImplicitCast;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GereneratePhysicalData_DeltaTime_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetJetpackStatsData_DeltaTime_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetNormalizeData_DeltaTime_ImplicitCast) == 0x000008, "Member 'ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetNormalizeData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GereneratePhysicalData_DeltaTime_ImplicitCast) == 0x000010, "Member 'ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GereneratePhysicalData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetJetpackStatsData_DeltaTime_ImplicitCast) == 0x000018, "Member 'ABP_Jetpack_VerE_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetJetpackStatsData_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Jetpack_VerE_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_AnimGraph");
static_assert(sizeof(ABP_Jetpack_VerE_C_AnimGraph) == 0x000010, "Wrong size on ABP_Jetpack_VerE_C_AnimGraph");
static_assert(offsetof(ABP_Jetpack_VerE_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_Jetpack_VerE_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_Jetpack_VerE.ABP_Jetpack_VerE_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_Jetpack_VerE_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Jetpack_VerE_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_Jetpack_VerE_C_Aiming_Correction");
static_assert(sizeof(ABP_Jetpack_VerE_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_Jetpack_VerE_C_Aiming_Correction");
static_assert(offsetof(ABP_Jetpack_VerE_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_Jetpack_VerE_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_VerE_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_Jetpack_VerE_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

}

