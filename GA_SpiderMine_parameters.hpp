#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpiderMine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_SpiderMine.GA_SpiderMine_C.ExecuteUbergraph_GA_SpiderMine
// 0x0008 (0x0008 - 0x0000)
struct GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine) == 0x000004, "Wrong alignment on GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine");
static_assert(sizeof(GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine) == 0x000008, "Wrong size on GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine");
static_assert(offsetof(GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine, EntryPoint) == 0x000000, "Member 'GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine, K2Node_Event_bWasCancelled) == 0x000004, "Member 'GA_SpiderMine_C_ExecuteUbergraph_GA_SpiderMine::K2Node_Event_bWasCancelled' has a wrong offset!");

// Function GA_SpiderMine.GA_SpiderMine_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_SpiderMine_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_SpiderMine_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_SpiderMine_C_K2_OnEndAbility");
static_assert(sizeof(GA_SpiderMine_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_SpiderMine_C_K2_OnEndAbility");
static_assert(offsetof(GA_SpiderMine_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_SpiderMine_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_SpiderMine.GA_SpiderMine_C.SpawnMine
// 0x0100 (0x0100 - 0x0000)
struct GA_SpiderMine_C_SpawnMine final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGzSpiderMine_SpawnInfo                SpawnInfo;                                         // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_60DB[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzSpiderMine*                          ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzSpiderMine_PreviewComponent*         K2Node_DynamicCast_AsGz_Spider_Mine_Preview_Component; // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60DC[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SpiderMine_C*                       CallFunc_FinishSpawningActor_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x00A0(0x0048)(ContainsInstancedReference)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60DD[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetDoublePropertyByName_Value_ImplicitCast; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_SpiderMine_C_SpawnMine) == 0x000010, "Wrong alignment on GA_SpiderMine_C_SpawnMine");
static_assert(sizeof(GA_SpiderMine_C_SpawnMine) == 0x000100, "Wrong size on GA_SpiderMine_C_SpawnMine");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, Transform) == 0x000000, "Member 'GA_SpiderMine_C_SpawnMine::Transform' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, SpawnInfo) == 0x000060, "Member 'GA_SpiderMine_C_SpawnMine::SpawnInfo' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, ReturnValue) == 0x000068, "Member 'GA_SpiderMine_C_SpawnMine::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000070, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000078, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x000080, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, K2Node_DynamicCast_AsGz_Spider_Mine_Preview_Component) == 0x000088, "Member 'GA_SpiderMine_C_SpawnMine::K2Node_DynamicCast_AsGz_Spider_Mine_Preview_Component' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'GA_SpiderMine_C_SpawnMine::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_FinishSpawningActor_ReturnValue) == 0x000098, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_GetActorInfo_ReturnValue) == 0x0000A0, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x0000E8, "Member 'GA_SpiderMine_C_SpawnMine::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, K2Node_DynamicCast_bSuccess_1) == 0x0000F0, "Member 'GA_SpiderMine_C_SpawnMine::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_SpiderMine_C_SpawnMine, CallFunc_SetDoublePropertyByName_Value_ImplicitCast) == 0x0000F8, "Member 'GA_SpiderMine_C_SpawnMine::CallFunc_SetDoublePropertyByName_Value_ImplicitCast' has a wrong offset!");

}

