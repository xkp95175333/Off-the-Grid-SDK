#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaStore_structs.hpp"
#include "XsollaUtils_structs.hpp"
#include "XsollaSettings_structs.hpp"


namespace SDK::Params
{

// Function XsollaStore.XsollaStoreBrowserWrapper.ExecuteBrowserClosed
// 0x0001 (0x0001 - 0x0000)
struct XsollaStoreBrowserWrapper_ExecuteBrowserClosed final
{
public:
	bool                                          bIsManually;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreBrowserWrapper_ExecuteBrowserClosed) == 0x000001, "Wrong alignment on XsollaStoreBrowserWrapper_ExecuteBrowserClosed");
static_assert(sizeof(XsollaStoreBrowserWrapper_ExecuteBrowserClosed) == 0x000001, "Wrong size on XsollaStoreBrowserWrapper_ExecuteBrowserClosed");
static_assert(offsetof(XsollaStoreBrowserWrapper_ExecuteBrowserClosed, bIsManually) == 0x000000, "Member 'XsollaStoreBrowserWrapper_ExecuteBrowserClosed::bIsManually' has a wrong offset!");

// Function XsollaStore.XsollaStoreBrowserWrapper.LoadUrl
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreBrowserWrapper_LoadUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreBrowserWrapper_LoadUrl) == 0x000008, "Wrong alignment on XsollaStoreBrowserWrapper_LoadUrl");
static_assert(sizeof(XsollaStoreBrowserWrapper_LoadUrl) == 0x000010, "Wrong size on XsollaStoreBrowserWrapper_LoadUrl");
static_assert(offsetof(XsollaStoreBrowserWrapper_LoadUrl, URL) == 0x000000, "Member 'XsollaStoreBrowserWrapper_LoadUrl::URL' has a wrong offset!");

// Function XsollaStore.XsollaStoreLibrary.Equal_StoreCartStoreCart
// 0x00B8 (0x00B8 - 0x0000)
struct XsollaStoreLibrary_Equal_StoreCartStoreCart final
{
public:
	struct FStoreCart                             A;                                                 // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FStoreCart                             B;                                                 // 0x0058(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_286D[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreLibrary_Equal_StoreCartStoreCart) == 0x000008, "Wrong alignment on XsollaStoreLibrary_Equal_StoreCartStoreCart");
static_assert(sizeof(XsollaStoreLibrary_Equal_StoreCartStoreCart) == 0x0000B8, "Wrong size on XsollaStoreLibrary_Equal_StoreCartStoreCart");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, A) == 0x000000, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::A' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, B) == 0x000058, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::B' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, ReturnValue) == 0x0000B0, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreLibrary.FormatPrice
// 0x0028 (0x0028 - 0x0000)
struct XsollaStoreLibrary_FormatPrice final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_286E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreLibrary_FormatPrice) == 0x000008, "Wrong alignment on XsollaStoreLibrary_FormatPrice");
static_assert(sizeof(XsollaStoreLibrary_FormatPrice) == 0x000028, "Wrong size on XsollaStoreLibrary_FormatPrice");
static_assert(offsetof(XsollaStoreLibrary_FormatPrice, Amount) == 0x000000, "Member 'XsollaStoreLibrary_FormatPrice::Amount' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_FormatPrice, Currency) == 0x000008, "Member 'XsollaStoreLibrary_FormatPrice::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_FormatPrice, ReturnValue) == 0x000018, "Member 'XsollaStoreLibrary_FormatPrice::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreLibrary.GetCurrencyLibrary
// 0x0008 (0x0008 - 0x0000)
struct XsollaStoreLibrary_GetCurrencyLibrary final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreLibrary_GetCurrencyLibrary) == 0x000008, "Wrong alignment on XsollaStoreLibrary_GetCurrencyLibrary");
static_assert(sizeof(XsollaStoreLibrary_GetCurrencyLibrary) == 0x000008, "Wrong size on XsollaStoreLibrary_GetCurrencyLibrary");
static_assert(offsetof(XsollaStoreLibrary_GetCurrencyLibrary, ReturnValue) == 0x000000, "Member 'XsollaStoreLibrary_GetCurrencyLibrary::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.AddToCart
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_AddToCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0044(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2873[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_AddToCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_AddToCart");
static_assert(sizeof(XsollaStoreSubsystem_AddToCart) == 0x000058, "Wrong size on XsollaStoreSubsystem_AddToCart");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_AddToCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_AddToCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, ItemSKU) == 0x000020, "Member 'XsollaStoreSubsystem_AddToCart::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, Quantity) == 0x000030, "Member 'XsollaStoreSubsystem_AddToCart::Quantity' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, SuccessCallback) == 0x000034, "Member 'XsollaStoreSubsystem_AddToCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, ErrorCallback) == 0x000044, "Member 'XsollaStoreSubsystem_AddToCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.BuyItemWithVirtualCurrency
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_BuyItemWithVirtualCurrency final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySKU;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     Platform;                                          // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2874[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0044(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2875[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_BuyItemWithVirtualCurrency");
static_assert(sizeof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency) == 0x000058, "Wrong size on XsollaStoreSubsystem_BuyItemWithVirtualCurrency");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, CurrencySKU) == 0x000020, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::CurrencySKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, Platform) == 0x000030, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::Platform' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, SuccessCallback) == 0x000034, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, ErrorCallback) == 0x000044, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.BuyVirtualOrFreeItemCallback
// 0x0004 (0x0004 - 0x0000)
struct XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback final
{
public:
	int32                                         InOrderId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback) == 0x000004, "Wrong alignment on XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback");
static_assert(sizeof(XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback) == 0x000004, "Wrong size on XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback");
static_assert(offsetof(XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback, InOrderId) == 0x000000, "Member 'XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback::InOrderId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CancelSubscription
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_CancelSubscription final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionId;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2876[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_CancelSubscription) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CancelSubscription");
static_assert(sizeof(XsollaStoreSubsystem_CancelSubscription) == 0x000038, "Wrong size on XsollaStoreSubsystem_CancelSubscription");
static_assert(offsetof(XsollaStoreSubsystem_CancelSubscription, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_CancelSubscription::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CancelSubscription, SubscriptionId) == 0x000010, "Member 'XsollaStoreSubsystem_CancelSubscription::SubscriptionId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CancelSubscription, SuccessCallback) == 0x000014, "Member 'XsollaStoreSubsystem_CancelSubscription::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CancelSubscription, ErrorCallback) == 0x000024, "Member 'XsollaStoreSubsystem_CancelSubscription::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CheckOrder
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_CheckOrder final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus, const struct FXsollaOrderContent& OrderContent)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2877[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_CheckOrder) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CheckOrder");
static_assert(sizeof(XsollaStoreSubsystem_CheckOrder) == 0x000038, "Wrong size on XsollaStoreSubsystem_CheckOrder");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_CheckOrder::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, OrderId) == 0x000010, "Member 'XsollaStoreSubsystem_CheckOrder::OrderId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, SuccessCallback) == 0x000014, "Member 'XsollaStoreSubsystem_CheckOrder::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, ErrorCallback) == 0x000024, "Member 'XsollaStoreSubsystem_CheckOrder::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CheckPendingOrder
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_CheckPendingOrder final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUserInvolvedToPayment;                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2878[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_CheckPendingOrder) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CheckPendingOrder");
static_assert(sizeof(XsollaStoreSubsystem_CheckPendingOrder) == 0x000038, "Wrong size on XsollaStoreSubsystem_CheckPendingOrder");
static_assert(offsetof(XsollaStoreSubsystem_CheckPendingOrder, AccessToken) == 0x000000, "Member 'XsollaStoreSubsystem_CheckPendingOrder::AccessToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckPendingOrder, OrderId) == 0x000010, "Member 'XsollaStoreSubsystem_CheckPendingOrder::OrderId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckPendingOrder, SuccessCallback) == 0x000014, "Member 'XsollaStoreSubsystem_CheckPendingOrder::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckPendingOrder, ErrorCallback) == 0x000024, "Member 'XsollaStoreSubsystem_CheckPendingOrder::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckPendingOrder, bIsUserInvolvedToPayment) == 0x000034, "Member 'XsollaStoreSubsystem_CheckPendingOrder::bIsUserInvolvedToPayment' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.ClearCart
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_ClearCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_ClearCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_ClearCart");
static_assert(sizeof(XsollaStoreSubsystem_ClearCart) == 0x000040, "Wrong size on XsollaStoreSubsystem_ClearCart");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_ClearCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_ClearCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_ClearCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_ClearCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CreateOrderWithFreeCart
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_CreateOrderWithFreeCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_CreateOrderWithFreeCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CreateOrderWithFreeCart");
static_assert(sizeof(XsollaStoreSubsystem_CreateOrderWithFreeCart) == 0x000040, "Wrong size on XsollaStoreSubsystem_CreateOrderWithFreeCart");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithFreeCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_CreateOrderWithFreeCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithFreeCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_CreateOrderWithFreeCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithFreeCart, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_CreateOrderWithFreeCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithFreeCart, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_CreateOrderWithFreeCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CreateOrderWithSpecifiedFreeItem
// 0x0048 (0x0048 - 0x0000)
struct XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2879[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem");
static_assert(sizeof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem) == 0x000048, "Wrong size on XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem, Quantity) == 0x000040, "Member 'XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem::Quantity' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FetchCartPaymentToken
// 0x00D0 (0x00D0 - 0x0000)
struct XsollaStoreSubsystem_FetchCartPaymentToken final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaParameters                      CustomParameters;                                  // 0x0050(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& AccessToken, int32 OrderId)> SuccessCallback;                                   // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalId;                                        // 0x00C0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FetchCartPaymentToken) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FetchCartPaymentToken");
static_assert(sizeof(XsollaStoreSubsystem_FetchCartPaymentToken) == 0x0000D0, "Wrong size on XsollaStoreSubsystem_FetchCartPaymentToken");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Currency) == 0x000020, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Country) == 0x000030, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Locale) == 0x000040, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, CustomParameters) == 0x000050, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::CustomParameters' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, SuccessCallback) == 0x0000A0, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, ErrorCallback) == 0x0000B0, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, ExternalId) == 0x0000C0, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::ExternalId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FetchPaymentToken
// 0x00D8 (0x00D8 - 0x0000)
struct XsollaStoreSubsystem_FetchPaymentToken final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaParameters                      CustomParameters;                                  // 0x0050(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& AccessToken, int32 OrderId)> SuccessCallback;                                   // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00C0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287A[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalId;                                        // 0x00C8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FetchPaymentToken) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FetchPaymentToken");
static_assert(sizeof(XsollaStoreSubsystem_FetchPaymentToken) == 0x0000D8, "Wrong size on XsollaStoreSubsystem_FetchPaymentToken");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_FetchPaymentToken::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_FetchPaymentToken::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Currency) == 0x000020, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Country) == 0x000030, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Locale) == 0x000040, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, CustomParameters) == 0x000050, "Member 'XsollaStoreSubsystem_FetchPaymentToken::CustomParameters' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, SuccessCallback) == 0x0000A0, "Member 'XsollaStoreSubsystem_FetchPaymentToken::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, ErrorCallback) == 0x0000B0, "Member 'XsollaStoreSubsystem_FetchPaymentToken::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Quantity) == 0x0000C0, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Quantity' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, ExternalId) == 0x0000C8, "Member 'XsollaStoreSubsystem_FetchPaymentToken::ExternalId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FetchTokenCallback
// 0x0018 (0x0018 - 0x0000)
struct XsollaStoreSubsystem_FetchTokenCallback final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOrderId;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_FetchTokenCallback) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FetchTokenCallback");
static_assert(sizeof(XsollaStoreSubsystem_FetchTokenCallback) == 0x000018, "Wrong size on XsollaStoreSubsystem_FetchTokenCallback");
static_assert(offsetof(XsollaStoreSubsystem_FetchTokenCallback, AccessToken) == 0x000000, "Member 'XsollaStoreSubsystem_FetchTokenCallback::AccessToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchTokenCallback, InOrderId) == 0x000010, "Member 'XsollaStoreSubsystem_FetchTokenCallback::InOrderId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FillCartById
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_FillCartById final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStoreCartItem>                 Items;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FillCartById) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FillCartById");
static_assert(sizeof(XsollaStoreSubsystem_FillCartById) == 0x000050, "Wrong size on XsollaStoreSubsystem_FillCartById");
static_assert(offsetof(XsollaStoreSubsystem_FillCartById, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_FillCartById::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FillCartById, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_FillCartById::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FillCartById, Items) == 0x000020, "Member 'XsollaStoreSubsystem_FillCartById::Items' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FillCartById, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_FillCartById::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FillCartById, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_FillCartById::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetAllItemsList
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_GetAllItemsList final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreItemsList& ItemsList)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetAllItemsList) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetAllItemsList");
static_assert(sizeof(XsollaStoreSubsystem_GetAllItemsList) == 0x000040, "Wrong size on XsollaStoreSubsystem_GetAllItemsList");
static_assert(offsetof(XsollaStoreSubsystem_GetAllItemsList, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetAllItemsList::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetAllItemsList, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetAllItemsList::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetAllItemsList, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetAllItemsList::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetAllItemsList, AuthToken) == 0x000030, "Member 'XsollaStoreSubsystem_GetAllItemsList::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetBundles
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetBundles final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreListOfBundles& ListOfBundles)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetBundles) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetBundles");
static_assert(sizeof(XsollaStoreSubsystem_GetBundles) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetBundles");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetBundles::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetBundles::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, AdditionalFields) == 0x000020, "Member 'XsollaStoreSubsystem_GetBundles::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetBundles::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetBundles::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, Limit) == 0x000050, "Member 'XsollaStoreSubsystem_GetBundles::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, Offset) == 0x000054, "Member 'XsollaStoreSubsystem_GetBundles::Offset' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetBundles, AuthToken) == 0x000058, "Member 'XsollaStoreSubsystem_GetBundles::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetDRMList
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_GetDRMList final
{
public:
	TDelegate<void(const struct FStoreDRMList& DRMList)> SuccessCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetDRMList) == 0x000004, "Wrong alignment on XsollaStoreSubsystem_GetDRMList");
static_assert(sizeof(XsollaStoreSubsystem_GetDRMList) == 0x000020, "Wrong size on XsollaStoreSubsystem_GetDRMList");
static_assert(offsetof(XsollaStoreSubsystem_GetDRMList, SuccessCallback) == 0x000000, "Member 'XsollaStoreSubsystem_GetDRMList::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetDRMList, ErrorCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetDRMList::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetGameItem
// 0x0060 (0x0060 - 0x0000)
struct XsollaStoreSubsystem_GetGameItem final
{
public:
	class FString                                 GameSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGameItem& Game)>       SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetGameItem) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetGameItem");
static_assert(sizeof(XsollaStoreSubsystem_GetGameItem) == 0x000060, "Wrong size on XsollaStoreSubsystem_GetGameItem");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, GameSKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetGameItem::GameSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetGameItem::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetGameItem::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetGameItem::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetGameItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameItem, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetGameItem::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetGameKeyItem
// 0x0060 (0x0060 - 0x0000)
struct XsollaStoreSubsystem_GetGameKeyItem final
{
public:
	class FString                                 ItemSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGameKeyItem& GameKey)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetGameKeyItem) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetGameKeyItem");
static_assert(sizeof(XsollaStoreSubsystem_GetGameKeyItem) == 0x000060, "Wrong size on XsollaStoreSubsystem_GetGameKeyItem");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, ItemSKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetGameKeyItem::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetGameKeyItem::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetGameKeyItem::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetGameKeyItem::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetGameKeyItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeyItem, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetGameKeyItem::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetGameKeysListBySpecifiedGroup
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup final
{
public:
	class FString                                 ExternalId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreGameKeysList& GameKeysList)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup");
static_assert(sizeof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, ExternalId) == 0x000000, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::ExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, Limit) == 0x000060, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup, Offset) == 0x000064, "Member 'XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetGamesList
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_GetGamesList final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FStoreGamesData& GamesData)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetGamesList) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetGamesList");
static_assert(sizeof(XsollaStoreSubsystem_GetGamesList) == 0x000058, "Wrong size on XsollaStoreSubsystem_GetGamesList");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetGamesList::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetGamesList::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, AdditionalFields) == 0x000020, "Member 'XsollaStoreSubsystem_GetGamesList::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetGamesList::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetGamesList::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, Limit) == 0x000050, "Member 'XsollaStoreSubsystem_GetGamesList::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesList, Offset) == 0x000054, "Member 'XsollaStoreSubsystem_GetGamesList::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetGamesListBySpecifiedGroup
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetGamesListBySpecifiedGroup final
{
public:
	class FString                                 ExternalId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreGamesList& GamesList)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetGamesListBySpecifiedGroup");
static_assert(sizeof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetGamesListBySpecifiedGroup");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, ExternalId) == 0x000000, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::ExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, Limit) == 0x000060, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetGamesListBySpecifiedGroup, Offset) == 0x000064, "Member 'XsollaStoreSubsystem_GetGamesListBySpecifiedGroup::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetItemGroups
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_GetItemGroups final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<struct FXsollaItemGroup>& ItemGroups)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetItemGroups) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetItemGroups");
static_assert(sizeof(XsollaStoreSubsystem_GetItemGroups) == 0x000038, "Wrong size on XsollaStoreSubsystem_GetItemGroups");
static_assert(offsetof(XsollaStoreSubsystem_GetItemGroups, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetItemGroups::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemGroups, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetItemGroups::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemGroups, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetItemGroups::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemGroups, Limit) == 0x000030, "Member 'XsollaStoreSubsystem_GetItemGroups::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemGroups, Offset) == 0x000034, "Member 'XsollaStoreSubsystem_GetItemGroups::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetItemsListBySpecifiedGroup
// 0x0078 (0x0078 - 0x0000)
struct XsollaStoreSubsystem_GetItemsListBySpecifiedGroup final
{
public:
	class FString                                 ExternalId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreItemsList& ItemsList)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetItemsListBySpecifiedGroup");
static_assert(sizeof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup) == 0x000078, "Wrong size on XsollaStoreSubsystem_GetItemsListBySpecifiedGroup");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, ExternalId) == 0x000000, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::ExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, Limit) == 0x000060, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, Offset) == 0x000064, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::Offset' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsListBySpecifiedGroup, AuthToken) == 0x000068, "Member 'XsollaStoreSubsystem_GetItemsListBySpecifiedGroup::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetOwnedGames
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_GetOwnedGames final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FOwnedGamesList& GamesList)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0044(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSandbox;                                        // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287C[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_GetOwnedGames) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetOwnedGames");
static_assert(sizeof(XsollaStoreSubsystem_GetOwnedGames) == 0x000050, "Wrong size on XsollaStoreSubsystem_GetOwnedGames");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetOwnedGames::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, AdditionalFields) == 0x000010, "Member 'XsollaStoreSubsystem_GetOwnedGames::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetOwnedGames::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetOwnedGames::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, Limit) == 0x000040, "Member 'XsollaStoreSubsystem_GetOwnedGames::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, Offset) == 0x000044, "Member 'XsollaStoreSubsystem_GetOwnedGames::Offset' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetOwnedGames, bIsSandbox) == 0x000048, "Member 'XsollaStoreSubsystem_GetOwnedGames::bIsSandbox' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetPromocodeRewards
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_GetPromocodeRewards final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PromocodeCode;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStorePromocodeRewardData& RewardsData)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetPromocodeRewards) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetPromocodeRewards");
static_assert(sizeof(XsollaStoreSubsystem_GetPromocodeRewards) == 0x000040, "Wrong size on XsollaStoreSubsystem_GetPromocodeRewards");
static_assert(offsetof(XsollaStoreSubsystem_GetPromocodeRewards, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetPromocodeRewards::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetPromocodeRewards, PromocodeCode) == 0x000010, "Member 'XsollaStoreSubsystem_GetPromocodeRewards::PromocodeCode' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetPromocodeRewards, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetPromocodeRewards::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetPromocodeRewards, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetPromocodeRewards::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSpecifiedBundle
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_GetSpecifiedBundle final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FStoreBundle& Bundle)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSpecifiedBundle) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSpecifiedBundle");
static_assert(sizeof(XsollaStoreSubsystem_GetSpecifiedBundle) == 0x000040, "Wrong size on XsollaStoreSubsystem_GetSpecifiedBundle");
static_assert(offsetof(XsollaStoreSubsystem_GetSpecifiedBundle, Sku) == 0x000000, "Member 'XsollaStoreSubsystem_GetSpecifiedBundle::Sku' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSpecifiedBundle, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetSpecifiedBundle::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSpecifiedBundle, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetSpecifiedBundle::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSpecifiedBundle, AuthToken) == 0x000030, "Member 'XsollaStoreSubsystem_GetSpecifiedBundle::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionDetails
// 0x0048 (0x0048 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionDetails final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionId;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Locale;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FSubscriptionDetails& SubscriptionDetails)> SuccessCallback;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionDetails) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionDetails");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionDetails) == 0x000048, "Wrong size on XsollaStoreSubsystem_GetSubscriptionDetails");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionDetails, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionDetails::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionDetails, SubscriptionId) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionDetails::SubscriptionId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionDetails, Locale) == 0x000018, "Member 'XsollaStoreSubsystem_GetSubscriptionDetails::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionDetails, SuccessCallback) == 0x000028, "Member 'XsollaStoreSubsystem_GetSubscriptionDetails::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionDetails, ErrorCallback) == 0x000038, "Member 'XsollaStoreSubsystem_GetSubscriptionDetails::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionManagementUrl
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionManagementUrl final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& LinkToPaystation)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionManagementUrl) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionManagementUrl");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionManagementUrl) == 0x000040, "Wrong size on XsollaStoreSubsystem_GetSubscriptionManagementUrl");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionManagementUrl, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionManagementUrl::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionManagementUrl, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionManagementUrl::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionManagementUrl, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetSubscriptionManagementUrl::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionManagementUrl, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetSubscriptionManagementUrl::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPlans
// 0x0078 (0x0078 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionPlans final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PlanId;                                            // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PlanExternalId;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)> SuccessCallback;                                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0074(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionPlans) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionPlans");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionPlans) == 0x000078, "Wrong size on XsollaStoreSubsystem_GetSubscriptionPlans");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, PlanId) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::PlanId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, PlanExternalId) == 0x000020, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::PlanExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, Country) == 0x000030, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, Locale) == 0x000040, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, SuccessCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, ErrorCallback) == 0x000060, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, Limit) == 0x000070, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPlans, Offset) == 0x000074, "Member 'XsollaStoreSubsystem_GetSubscriptionPlans::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPublicPlans
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionPublicPlans final
{
public:
	TArray<int32>                                 PlanId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PlanExternalId;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionPublicPlans) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionPublicPlans");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionPublicPlans) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetSubscriptionPublicPlans");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, PlanId) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::PlanId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, PlanExternalId) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::PlanExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, Locale) == 0x000030, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, Limit) == 0x000060, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPublicPlans, Offset) == 0x000064, "Member 'XsollaStoreSubsystem_GetSubscriptionPublicPlans::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPurchaseUrl
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionPurchaseUrl final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlanExternalId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& LinkToPaystation)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionPurchaseUrl");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl) == 0x000050, "Wrong size on XsollaStoreSubsystem_GetSubscriptionPurchaseUrl");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionPurchaseUrl::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl, PlanExternalId) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionPurchaseUrl::PlanExternalId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetSubscriptionPurchaseUrl::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetSubscriptionPurchaseUrl::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionPurchaseUrl, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetSubscriptionPurchaseUrl::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionRenewalUrl
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptionRenewalUrl final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionId;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& LinkToPaystation)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287E[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptionRenewalUrl");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl) == 0x000038, "Wrong size on XsollaStoreSubsystem_GetSubscriptionRenewalUrl");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptionRenewalUrl::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl, SubscriptionId) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptionRenewalUrl::SubscriptionId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl, SuccessCallback) == 0x000014, "Member 'XsollaStoreSubsystem_GetSubscriptionRenewalUrl::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptionRenewalUrl, ErrorCallback) == 0x000024, "Member 'XsollaStoreSubsystem_GetSubscriptionRenewalUrl::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptions
// 0x0048 (0x0048 - 0x0000)
struct XsollaStoreSubsystem_GetSubscriptions final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSubscriptionsList& SubscriptionsList)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0044(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetSubscriptions) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetSubscriptions");
static_assert(sizeof(XsollaStoreSubsystem_GetSubscriptions) == 0x000048, "Wrong size on XsollaStoreSubsystem_GetSubscriptions");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_GetSubscriptions::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetSubscriptions::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetSubscriptions::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetSubscriptions::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, Limit) == 0x000040, "Member 'XsollaStoreSubsystem_GetSubscriptions::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetSubscriptions, Offset) == 0x000044, "Member 'XsollaStoreSubsystem_GetSubscriptions::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencies
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencies final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrencyData& VirtualCurrencyData)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencies) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencies");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencies) == 0x000058, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencies");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, AdditionalFields) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, Limit) == 0x000050, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencies, Offset) == 0x000054, "Member 'XsollaStoreSubsystem_GetVirtualCurrencies::Offset' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrency
// 0x0060 (0x0060 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrency final
{
public:
	class FString                                 CurrencySKU;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrency& Currency)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrency) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrency");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrency) == 0x000060, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrency");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, CurrencySKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::CurrencySKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackage
// 0x0060 (0x0060 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyPackage final
{
public:
	class FString                                 PackageSKU;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)> SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyPackage) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyPackage");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyPackage) == 0x000060, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyPackage");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, PackageSKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::PackageSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, Locale) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, Country) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, AdditionalFields) == 0x000030, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackages
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyPackages final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrencyPackagesData& Data)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyPackages) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyPackages");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyPackages) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyPackages");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, AdditionalFields) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, Limit) == 0x000050, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, Offset) == 0x000054, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::Offset' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, AuthToken) == 0x000058, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItems
// 0x0068 (0x0068 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualItems final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalFields;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FStoreItemsData& ItemsData)> SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthToken;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualItems) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualItems");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualItems) == 0x000068, "Wrong size on XsollaStoreSubsystem_GetVirtualItems");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualItems::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, Country) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualItems::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, AdditionalFields) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualItems::AdditionalFields' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_GetVirtualItems::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_GetVirtualItems::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, Limit) == 0x000050, "Member 'XsollaStoreSubsystem_GetVirtualItems::Limit' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, Offset) == 0x000054, "Member 'XsollaStoreSubsystem_GetVirtualItems::Offset' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, AuthToken) == 0x000058, "Member 'XsollaStoreSubsystem_GetVirtualItems::AuthToken' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.Initialize
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_Initialize final
{
public:
	class FString                                 InProjectId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_Initialize) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_Initialize");
static_assert(sizeof(XsollaStoreSubsystem_Initialize) == 0x000010, "Wrong size on XsollaStoreSubsystem_Initialize");
static_assert(offsetof(XsollaStoreSubsystem_Initialize, InProjectId) == 0x000000, "Member 'XsollaStoreSubsystem_Initialize::InProjectId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.LaunchPaymentConsole
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_LaunchPaymentConsole final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderId;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccessToken;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bIsManually)>             BrowserClosedCallback;                             // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_LaunchPaymentConsole) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_LaunchPaymentConsole");
static_assert(sizeof(XsollaStoreSubsystem_LaunchPaymentConsole) == 0x000050, "Wrong size on XsollaStoreSubsystem_LaunchPaymentConsole");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, WorldContextObject) == 0x000000, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, OrderId) == 0x000008, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::OrderId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, AccessToken) == 0x000010, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::AccessToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, BrowserClosedCallback) == 0x000040, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::BrowserClosedCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.PurchaseCurrencyPackage
// 0x0248 (0x0248 - 0x0000)
struct XsollaStoreSubsystem_PurchaseCurrencyPackage final
{
public:
	struct FVirtualCurrencyPackage                CurrencyPackage;                                   // 0x0000(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FXsollaPaymentTokenRequestPayload      PaymentTokenRequestPayload;                        // 0x0198(0x0090)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0228(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0238(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_PurchaseCurrencyPackage) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_PurchaseCurrencyPackage");
static_assert(sizeof(XsollaStoreSubsystem_PurchaseCurrencyPackage) == 0x000248, "Wrong size on XsollaStoreSubsystem_PurchaseCurrencyPackage");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseCurrencyPackage, CurrencyPackage) == 0x000000, "Member 'XsollaStoreSubsystem_PurchaseCurrencyPackage::CurrencyPackage' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseCurrencyPackage, PaymentTokenRequestPayload) == 0x000198, "Member 'XsollaStoreSubsystem_PurchaseCurrencyPackage::PaymentTokenRequestPayload' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseCurrencyPackage, SuccessCallback) == 0x000228, "Member 'XsollaStoreSubsystem_PurchaseCurrencyPackage::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseCurrencyPackage, ErrorCallback) == 0x000238, "Member 'XsollaStoreSubsystem_PurchaseCurrencyPackage::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.PurchaseStoreItem
// 0x0240 (0x0240 - 0x0000)
struct XsollaStoreSubsystem_PurchaseStoreItem final
{
public:
	struct FStoreItem                             StoreItem;                                         // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FXsollaPaymentTokenRequestPayload      PaymentTokenRequestPayload;                        // 0x0190(0x0090)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0220(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0230(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_PurchaseStoreItem) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_PurchaseStoreItem");
static_assert(sizeof(XsollaStoreSubsystem_PurchaseStoreItem) == 0x000240, "Wrong size on XsollaStoreSubsystem_PurchaseStoreItem");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseStoreItem, StoreItem) == 0x000000, "Member 'XsollaStoreSubsystem_PurchaseStoreItem::StoreItem' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseStoreItem, PaymentTokenRequestPayload) == 0x000190, "Member 'XsollaStoreSubsystem_PurchaseStoreItem::PaymentTokenRequestPayload' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseStoreItem, SuccessCallback) == 0x000220, "Member 'XsollaStoreSubsystem_PurchaseStoreItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_PurchaseStoreItem, ErrorCallback) == 0x000230, "Member 'XsollaStoreSubsystem_PurchaseStoreItem::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.RedeemGameCodeByClient
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_RedeemGameCodeByClient final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_RedeemGameCodeByClient) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_RedeemGameCodeByClient");
static_assert(sizeof(XsollaStoreSubsystem_RedeemGameCodeByClient) == 0x000040, "Wrong size on XsollaStoreSubsystem_RedeemGameCodeByClient");
static_assert(offsetof(XsollaStoreSubsystem_RedeemGameCodeByClient, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_RedeemGameCodeByClient::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemGameCodeByClient, Code) == 0x000010, "Member 'XsollaStoreSubsystem_RedeemGameCodeByClient::Code' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemGameCodeByClient, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_RedeemGameCodeByClient::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemGameCodeByClient, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_RedeemGameCodeByClient::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.RedeemPromocode
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_RedeemPromocode final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PromocodeCode;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_RedeemPromocode) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_RedeemPromocode");
static_assert(sizeof(XsollaStoreSubsystem_RedeemPromocode) == 0x000040, "Wrong size on XsollaStoreSubsystem_RedeemPromocode");
static_assert(offsetof(XsollaStoreSubsystem_RedeemPromocode, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_RedeemPromocode::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemPromocode, PromocodeCode) == 0x000010, "Member 'XsollaStoreSubsystem_RedeemPromocode::PromocodeCode' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemPromocode, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_RedeemPromocode::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RedeemPromocode, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_RedeemPromocode::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.RemoveFromCart
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_RemoveFromCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_RemoveFromCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_RemoveFromCart");
static_assert(sizeof(XsollaStoreSubsystem_RemoveFromCart) == 0x000050, "Wrong size on XsollaStoreSubsystem_RemoveFromCart");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_RemoveFromCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_RemoveFromCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, ItemSKU) == 0x000020, "Member 'XsollaStoreSubsystem_RemoveFromCart::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_RemoveFromCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_RemoveFromCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.RemovePromocodeFromCart
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_RemovePromocodeFromCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_RemovePromocodeFromCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_RemovePromocodeFromCart");
static_assert(sizeof(XsollaStoreSubsystem_RemovePromocodeFromCart) == 0x000030, "Wrong size on XsollaStoreSubsystem_RemovePromocodeFromCart");
static_assert(offsetof(XsollaStoreSubsystem_RemovePromocodeFromCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_RemovePromocodeFromCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemovePromocodeFromCart, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_RemovePromocodeFromCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemovePromocodeFromCart, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_RemovePromocodeFromCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateCart
// 0x0060 (0x0060 - 0x0000)
struct XsollaStoreSubsystem_UpdateCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_UpdateCart");
static_assert(sizeof(XsollaStoreSubsystem_UpdateCart) == 0x000060, "Wrong size on XsollaStoreSubsystem_UpdateCart");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, Currency) == 0x000020, "Member 'XsollaStoreSubsystem_UpdateCart::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, Locale) == 0x000030, "Member 'XsollaStoreSubsystem_UpdateCart::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, SuccessCallback) == 0x000040, "Member 'XsollaStoreSubsystem_UpdateCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, ErrorCallback) == 0x000050, "Member 'XsollaStoreSubsystem_UpdateCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FindItemBySku
// 0x01A8 (0x01A8 - 0x0000)
struct XsollaStoreSubsystem_FindItemBySku final
{
public:
	class FString                                 ItemSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFound;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2880[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStoreItem                             ReturnValue;                                       // 0x0018(0x0190)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FindItemBySku) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FindItemBySku");
static_assert(sizeof(XsollaStoreSubsystem_FindItemBySku) == 0x0001A8, "Wrong size on XsollaStoreSubsystem_FindItemBySku");
static_assert(offsetof(XsollaStoreSubsystem_FindItemBySku, ItemSKU) == 0x000000, "Member 'XsollaStoreSubsystem_FindItemBySku::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FindItemBySku, bHasFound) == 0x000010, "Member 'XsollaStoreSubsystem_FindItemBySku::bHasFound' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FindItemBySku, ReturnValue) == 0x000018, "Member 'XsollaStoreSubsystem_FindItemBySku::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FindVirtualCurrencyPackageBySku
// 0x01B0 (0x01B0 - 0x0000)
struct XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku final
{
public:
	class FString                                 ItemSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFound;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2881[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVirtualCurrencyPackage                ReturnValue;                                       // 0x0018(0x0198)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku");
static_assert(sizeof(XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku) == 0x0001B0, "Wrong size on XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku");
static_assert(offsetof(XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku, ItemSKU) == 0x000000, "Member 'XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku, bHasFound) == 0x000010, "Member 'XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku::bHasFound' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku, ReturnValue) == 0x000018, "Member 'XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetCart
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_GetCart final
{
public:
	struct FStoreCart                             ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetCart");
static_assert(sizeof(XsollaStoreSubsystem_GetCart) == 0x000058, "Wrong size on XsollaStoreSubsystem_GetCart");
static_assert(offsetof(XsollaStoreSubsystem_GetCart, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetCart::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetItemName
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_GetItemName final
{
public:
	class FString                                 ItemSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetItemName) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetItemName");
static_assert(sizeof(XsollaStoreSubsystem_GetItemName) == 0x000020, "Wrong size on XsollaStoreSubsystem_GetItemName");
static_assert(offsetof(XsollaStoreSubsystem_GetItemName, ItemSKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetItemName::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetItemName, ReturnValue) == 0x000010, "Member 'XsollaStoreSubsystem_GetItemName::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetItemsData
// 0x0070 (0x0070 - 0x0000)
struct XsollaStoreSubsystem_GetItemsData final
{
public:
	struct FStoreItemsData                        ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetItemsData) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetItemsData");
static_assert(sizeof(XsollaStoreSubsystem_GetItemsData) == 0x000070, "Wrong size on XsollaStoreSubsystem_GetItemsData");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsData, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetItemsData::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetPendingPaystationUrl
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetPendingPaystationUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetPendingPaystationUrl) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetPendingPaystationUrl");
static_assert(sizeof(XsollaStoreSubsystem_GetPendingPaystationUrl) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetPendingPaystationUrl");
static_assert(offsetof(XsollaStoreSubsystem_GetPendingPaystationUrl, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetPendingPaystationUrl::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItemsWithoutGroup
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualItemsWithoutGroup final
{
public:
	TArray<struct FStoreItem>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualItemsWithoutGroup");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetVirtualItemsWithoutGroup");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualItemsWithoutGroup::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.IsItemInCart
// 0x0018 (0x0018 - 0x0000)
struct XsollaStoreSubsystem_IsItemInCart final
{
public:
	class FString                                 ItemSKU;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2882[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_IsItemInCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_IsItemInCart");
static_assert(sizeof(XsollaStoreSubsystem_IsItemInCart) == 0x000018, "Wrong size on XsollaStoreSubsystem_IsItemInCart");
static_assert(offsetof(XsollaStoreSubsystem_IsItemInCart, ItemSKU) == 0x000000, "Member 'XsollaStoreSubsystem_IsItemInCart::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_IsItemInCart, ReturnValue) == 0x000010, "Member 'XsollaStoreSubsystem_IsItemInCart::ReturnValue' has a wrong offset!");

}

