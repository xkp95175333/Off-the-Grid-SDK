#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Zipline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_Zipline_structs.hpp"
#include "ControlRig_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Zipline.ABP_Zipline_C
// 0x1AC0 (0x2370 - 0x08B0)
class UABP_Zipline_C final : public UGzAbilityAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Zipline::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x08B8(0x0014)(HasGetValueTypeHash)
	uint8                                         Pad_11C5[0x4];                                     // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x08D0(0x0008)()
	struct FAnimSubsystemInstance_NodeRelevancy   AnimBlueprintExtension_NodeRelevancy;              // 0x08D8(0x00A8)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0980(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_21;                             // 0x0988(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_20;                             // 0x09A8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_19;                             // 0x09C8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_18;                             // 0x09E8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_17;                             // 0x0A08(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x0A28(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_16;                             // 0x0AE0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_15;                             // 0x0B00(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_14;                             // 0x0B20(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_13;                             // 0x0B40(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_12;                             // 0x0B60(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_11;                             // 0x0B80(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_10;                             // 0x0BA0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_9;                              // 0x0BC0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_8;                              // 0x0BE0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_7;                              // 0x0C00(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x0C20(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_6;                              // 0x0CD8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_5;                              // 0x0CF8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_4;                              // 0x0D18(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_3;                              // 0x0D38(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x0D58(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0D78(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0D98(0x0028)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x0DC0(0x0118)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0ED8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0F20(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F40(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0F88(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0FA8(0x00C8)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x1070(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x1540(0x0440)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x1980(0x00B0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x1A30(0x0070)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1AA0(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1B68(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x1C30(0x0070)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1CA0(0x0020)()
	int32                                         K2Node_PropertyAccess_63;                          // 0x1CC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C6[0x4];                                     // 0x1CC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_62;                          // 0x1CC8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_61;                          // 0x1CE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_60;                          // 0x1CE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C7[0x3];                                     // 0x1CE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_PropertyAccess_59;                          // 0x1CE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_58;                          // 0x1CEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C8[0x3];                                     // 0x1CED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_57;                          // 0x1CF0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_56;                          // 0x1D08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C9[0x7];                                     // 0x1D09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_55;                          // 0x1D10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_54;                          // 0x1D28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_53;                          // 0x1D2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_IsMovingUp_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D2D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CA[0x2];                                     // 0x1D2E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_Velocity_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D30(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_DotProduct_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Hand_Pole_IK_L_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D50(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_bHasLostLeftArm_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_SelectZiplineType_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D69(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CB[0x6];                                     // 0x1D6A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               __CustomProperty_PlayerAdditiveRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         __CustomProperty_BodyAimDirection_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CC[0x4];                                     // 0x1D8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1D98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CD[0x4];                                     // 0x1D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_Hand_Pole_IK_R_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1DA0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_PlayerModifyTransition_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1DB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               __CustomProperty_PlayerRootRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49; // 0x1DD0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_PropertyAccess_52;                          // 0x1DE8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGzZiplineMovementRuntimeData          K2Node_PropertyAccess_51;                          // 0x1E00(0x0058)(NoDestructor)
	class AGzZipline*                             K2Node_PropertyAccess_50;                          // 0x1E58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_49;                          // 0x1E60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_48;                          // 0x1E64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_47;                          // 0x1E68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CE[0x7];                                     // 0x1E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_46;                          // 0x1E70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_PropertyAccess_45;                          // 0x1E88(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_PropertyAccess_44;                          // 0x1E90(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_PropertyAccess_43;                          // 0x1EB0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_PropertyAccess_42;                          // 0x1F10(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_PropertyAccess_41;                          // 0x1F30(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_40;                          // 0x1F90(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_39;                          // 0x1FA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_38;                          // 0x1FA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_37;                          // 0x1FAA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11CF[0x1];                                     // 0x1FAB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_PropertyAccess_36;                          // 0x1FAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_35;                          // 0x1FB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_34;                          // 0x1FB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D0[0x3];                                     // 0x1FB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_PropertyAccess_33;                          // 0x1FB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_32;                          // 0x1FBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_31;                          // 0x1FBD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D1[0x2];                                     // 0x1FBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_PropertyAccess_30;                          // 0x1FC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_PropertyAccess_29;                          // 0x1FC8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_PropertyAccess_28;                          // 0x1FE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_PropertyAccess_27;                          // 0x1FF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_26;                          // 0x2010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_25;                          // 0x2028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_24;                          // 0x2040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_23;                          // 0x2058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_22;                          // 0x2070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_21;                          // 0x2088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_20;                          // 0x20A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_19;                          // 0x20B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_18;                          // 0x20C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AGzZipline*                             K2Node_PropertyAccess_17;                          // 0x20C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzZiplineMovementRuntimeData          K2Node_PropertyAccess_16;                          // 0x20D0(0x0058)(NoDestructor)
	bool                                          K2Node_PropertyAccess_15;                          // 0x2128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D2[0x7];                                     // 0x2129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzZiplineMovementRuntimeData          K2Node_PropertyAccess_14;                          // 0x2130(0x0058)(NoDestructor)
	int32                                         K2Node_PropertyAccess_13;                          // 0x2188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_12;                          // 0x218C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_11;                          // 0x2190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_10;                          // 0x2194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_9;                           // 0x2198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D3[0x3];                                     // 0x2199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_PropertyAccess_8;                           // 0x219C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_7;                           // 0x21A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_6;                           // 0x21A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_PropertyAccess_5;                           // 0x21A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_4;                           // 0x21AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D4[0x3];                                     // 0x21AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzZipline*                             K2Node_PropertyAccess_3;                           // 0x21B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_PropertyAccess_2;                           // 0x21B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          K2Node_PropertyAccess_1;                           // 0x21C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 K2Node_PropertyAccess;                             // 0x21C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         AimPitch;                                          // 0x21D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D5[0x4];                                     // 0x21D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimYaw;                                            // 0x21D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Z__Yaw_;                                  // 0x21E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovingUpOrDown;                                  // 0x21E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D6[0x3];                                     // 0x21E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Start_Horizontal_Move_L;                           // 0x21E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Start_Verticle_Move_Up_L;                          // 0x21F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Start_Verticle_Move_Down_L;                        // 0x21F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Horizontal_Move_L;                           // 0x2200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Verticle_Move_Up_L;                          // 0x2208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Verticle_Move_Down_L;                        // 0x2210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ReadyToLockRotation;                               // 0x2218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D7[0x7];                                     // 0x2219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Body_Rotation;                                     // 0x2220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Hand_TargetPoint;                                  // 0x2238(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hand_PoleVector_R;                                 // 0x2250(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VerticalTransition;                                // 0x2268(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Edit_Position_Vertical_Up;                         // 0x2280(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Edit_Position_Vertical_Down;                       // 0x2298(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Edit_Position_Horizontal;                          // 0x22B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Modify_Player_Transition;                          // 0x22C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Modify_Player_Rotation;                            // 0x22E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Modify_Player_Additive;                            // 0x22F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Additive_Body_Aiming_Alpha;                        // 0x2310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Additive_Body_Aiming_Direction;                    // 0x2318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveLockRotation;                                // 0x231C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Verticle_Move_Up_R;                          // 0x2320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Verticle_Move_Down_R;                        // 0x2328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Cycle_Horizontal_Move_R;                           // 0x2330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Start_Horizontal_Move_R;                           // 0x2338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Start_Verticle_Move_Up_R;                          // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Start_Verticle_Move_Down_R;                        // 0x2348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hand_PoleVector_L;                                 // 0x2350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateZiplineStart(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SetupZiplineLoop(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void NPC_CoverState(struct FPoseLink* Param_NPC_CoverState);
	void Limbless_State(struct FPoseLink* Param_Limbless_State);
	void KneeSlide_State(struct FPoseLink* Param_KneeSlide_State);
	bool IsVerticalZipline();
	void GetZiplineDataAndLogic();
	struct FGzZiplineMovementRuntimeData GetZiplineData();
	struct FVector GetVerticalDirection();
	struct FTransform GetSpine05Data();
	struct FVector GetPoleVectorForHandIK_R();
	struct FVector GetPoleVectorForHandIK_L();
	float GetPlayerFacingVerticalZiplineDirection();
	class UGzCharacterMovementComponent* GetOwnerMovements();
	struct FTransform GetLowerarmData();
	void GetLocationOnZipline(struct FVector* Location);
	struct FVector GetHorizontalDirection();
	void GetHandRotation(double* HandRotation);
	class AGzPlayerCharacter* GetGzCharacter();
	class AGzZipline* GetCurrentZipline();
	class UABP_Human_C* GetAnimBPHuman();
	void FullBodyAdditives(struct FPoseLink* Param_FullBodyAdditives);
	void FullBody_StopState(struct FPoseLink* Param_FullBody_StopState);
	void FullBody_StartState(struct FPoseLink* Param_FullBody_StartState);
	void FullBody_PivotState(struct FPoseLink* Param_FullBody_PivotState);
	void FullBody_JumpStartState(struct FPoseLink* Param_FullBody_JumpStartState);
	void FullBody_JumpStartLoopState(struct FPoseLink* Param_FullBody_JumpStartLoopState);
	void FullBody_JumpApexState(struct FPoseLink* Param_FullBody_JumpApexState);
	void FullBody_IdleState(struct FPoseLink* Param_FullBody_IdleState);
	void FullBody_FallLoopState(struct FPoseLink* Param_FullBody_FallLoopState);
	void FullBody_FallLandState(struct FPoseLink* Param_FullBody_FallLandState);
	void FullBody_CycleState(struct FPoseLink* Param_FullBody_CycleState);
	void FullBody_AnimAbility(struct FPoseLink* Param_FullBody_AnimAbility);
	void FullBody_Aiming(const struct FPoseLink& PreAimPose, double Param_AimYaw, double Param_AimPitch, struct FPoseLink* Param_FullBody_Aiming);
	void ExecuteUbergraph_ABP_Zipline(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_RotateRootBone_85928F1A415B74D7A2458EA3C0F2B781();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_ControlRig_1AA7C92E4BD6ADDF9D649C8C6C94CD49();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_BlendSpacePlayer_4F1D2B4D463A3B060FFC10A3D1F168B8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_BlendSpacePlayer_45B6A2BA4E334BCB304AB9BD353D2DBE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_ApplyAdditive_66C3B7A94BB0EA202C6DF59062B6A4FC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Zipline_AnimGraphNode_ApplyAdditive_4418A28F4504E69D172A2EBE0FF071CF();
	void DebugData(bool Enable_);
	void DamagedBody_IdleState(struct FPoseLink* Param_DamagedBody_IdleState);
	void DamagedBody_ExitState(struct FPoseLink* Param_DamagedBody_ExitState);
	void DamagedBody_EnterState(struct FPoseLink* Param_DamagedBody_EnterState);
	void DamagedBody_CycleState(struct FPoseLink* Param_DamagedBody_CycleState);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void Aiming_Correction(const struct FPoseLink& Aim_pose, struct FPoseLink* Param_Aiming_Correction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Zipline_C">();
	}
	static class UABP_Zipline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Zipline_C>();
	}
};
static_assert(alignof(UABP_Zipline_C) == 0x000010, "Wrong alignment on UABP_Zipline_C");
static_assert(sizeof(UABP_Zipline_C) == 0x002370, "Wrong size on UABP_Zipline_C");
static_assert(offsetof(UABP_Zipline_C, UberGraphFrame) == 0x0008B0, "Member 'UABP_Zipline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __AnimBlueprintMutables) == 0x0008B8, "Member 'UABP_Zipline_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimBlueprintExtension_PropertyAccess) == 0x0008D0, "Member 'UABP_Zipline_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimBlueprintExtension_NodeRelevancy) == 0x0008D8, "Member 'UABP_Zipline_C::AnimBlueprintExtension_NodeRelevancy' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimBlueprintExtension_Base) == 0x000980, "Member 'UABP_Zipline_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_21) == 0x000988, "Member 'UABP_Zipline_C::AnimGraphNode_Root_21' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_20) == 0x0009A8, "Member 'UABP_Zipline_C::AnimGraphNode_Root_20' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_19) == 0x0009C8, "Member 'UABP_Zipline_C::AnimGraphNode_Root_19' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_18) == 0x0009E8, "Member 'UABP_Zipline_C::AnimGraphNode_Root_18' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_17) == 0x000A08, "Member 'UABP_Zipline_C::AnimGraphNode_Root_17' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_LinkedInputPose_1) == 0x000A28, "Member 'UABP_Zipline_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_16) == 0x000AE0, "Member 'UABP_Zipline_C::AnimGraphNode_Root_16' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_15) == 0x000B00, "Member 'UABP_Zipline_C::AnimGraphNode_Root_15' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_14) == 0x000B20, "Member 'UABP_Zipline_C::AnimGraphNode_Root_14' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_13) == 0x000B40, "Member 'UABP_Zipline_C::AnimGraphNode_Root_13' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_12) == 0x000B60, "Member 'UABP_Zipline_C::AnimGraphNode_Root_12' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_11) == 0x000B80, "Member 'UABP_Zipline_C::AnimGraphNode_Root_11' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_10) == 0x000BA0, "Member 'UABP_Zipline_C::AnimGraphNode_Root_10' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_9) == 0x000BC0, "Member 'UABP_Zipline_C::AnimGraphNode_Root_9' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_8) == 0x000BE0, "Member 'UABP_Zipline_C::AnimGraphNode_Root_8' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_7) == 0x000C00, "Member 'UABP_Zipline_C::AnimGraphNode_Root_7' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_LinkedInputPose) == 0x000C20, "Member 'UABP_Zipline_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_6) == 0x000CD8, "Member 'UABP_Zipline_C::AnimGraphNode_Root_6' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_5) == 0x000CF8, "Member 'UABP_Zipline_C::AnimGraphNode_Root_5' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_4) == 0x000D18, "Member 'UABP_Zipline_C::AnimGraphNode_Root_4' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_3) == 0x000D38, "Member 'UABP_Zipline_C::AnimGraphNode_Root_3' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_2) == 0x000D58, "Member 'UABP_Zipline_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root_1) == 0x000D78, "Member 'UABP_Zipline_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_TransitionResult) == 0x000D98, "Member 'UABP_Zipline_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x000DC0, "Member 'UABP_Zipline_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_SequencePlayer_1) == 0x000ED8, "Member 'UABP_Zipline_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_StateResult_1) == 0x000F20, "Member 'UABP_Zipline_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_SequencePlayer) == 0x000F40, "Member 'UABP_Zipline_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_StateResult) == 0x000F88, "Member 'UABP_Zipline_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_StateMachine) == 0x000FA8, "Member 'UABP_Zipline_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_ControlRig) == 0x001070, "Member 'UABP_Zipline_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Inertialization) == 0x001540, "Member 'UABP_Zipline_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_RotateRootBone) == 0x001980, "Member 'UABP_Zipline_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_BlendSpacePlayer_1) == 0x001A30, "Member 'UABP_Zipline_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_ApplyAdditive_1) == 0x001AA0, "Member 'UABP_Zipline_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_ApplyAdditive) == 0x001B68, "Member 'UABP_Zipline_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_BlendSpacePlayer) == 0x001C30, "Member 'UABP_Zipline_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AnimGraphNode_Root) == 0x001CA0, "Member 'UABP_Zipline_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_63) == 0x001CC0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_63' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_62) == 0x001CC8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_62' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_61) == 0x001CE0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_61' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_60) == 0x001CE4, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_60' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_59) == 0x001CE8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_59' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_58) == 0x001CEC, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_58' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_57) == 0x001CF0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_57' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_56) == 0x001D08, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_56' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_55) == 0x001D10, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_55' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_54) == 0x001D28, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_54' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_53) == 0x001D2C, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_53' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_IsMovingUp_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D2D, "Member 'UABP_Zipline_C::__CustomProperty_IsMovingUp_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_Velocity_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D30, "Member 'UABP_Zipline_C::__CustomProperty_Velocity_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_DotProduct_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D48, "Member 'UABP_Zipline_C::__CustomProperty_DotProduct_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_Hand_Pole_IK_L_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D50, "Member 'UABP_Zipline_C::__CustomProperty_Hand_Pole_IK_L_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_bHasLostLeftArm_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D68, "Member 'UABP_Zipline_C::__CustomProperty_bHasLostLeftArm_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_SelectZiplineType_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D69, "Member 'UABP_Zipline_C::__CustomProperty_SelectZiplineType_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_PlayerAdditiveRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D70, "Member 'UABP_Zipline_C::__CustomProperty_PlayerAdditiveRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_BodyAimDirection_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D88, "Member 'UABP_Zipline_C::__CustomProperty_BodyAimDirection_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D90, "Member 'UABP_Zipline_C::__CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001D98, "Member 'UABP_Zipline_C::__CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_Hand_Pole_IK_R_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001DA0, "Member 'UABP_Zipline_C::__CustomProperty_Hand_Pole_IK_R_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_PlayerModifyTransition_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001DB8, "Member 'UABP_Zipline_C::__CustomProperty_PlayerModifyTransition_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, __CustomProperty_PlayerRootRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49) == 0x001DD0, "Member 'UABP_Zipline_C::__CustomProperty_PlayerRootRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_52) == 0x001DE8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_52' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_51) == 0x001E00, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_51' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_50) == 0x001E58, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_50' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_49) == 0x001E60, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_49' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_48) == 0x001E64, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_48' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_47) == 0x001E68, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_47' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_46) == 0x001E70, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_46' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_45) == 0x001E88, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_45' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_44) == 0x001E90, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_44' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_43) == 0x001EB0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_43' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_42) == 0x001F10, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_42' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_41) == 0x001F30, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_41' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_40) == 0x001F90, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_40' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_39) == 0x001FA8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_39' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_38) == 0x001FA9, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_38' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_37) == 0x001FAA, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_37' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_36) == 0x001FAC, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_36' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_35) == 0x001FB0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_35' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_34) == 0x001FB4, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_34' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_33) == 0x001FB8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_33' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_32) == 0x001FBC, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_32' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_31) == 0x001FBD, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_31' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_30) == 0x001FC0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_30' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_29) == 0x001FC8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_29' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_28) == 0x001FE0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_28' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_27) == 0x001FF8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_27' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_26) == 0x002010, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_26' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_25) == 0x002028, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_25' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_24) == 0x002040, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_24' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_23) == 0x002058, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_23' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_22) == 0x002070, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_22' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_21) == 0x002088, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_21' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_20) == 0x0020A0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_20' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_19) == 0x0020B8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_19' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_18) == 0x0020C0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_18' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_17) == 0x0020C8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_17' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_16) == 0x0020D0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_16' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_15) == 0x002128, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_15' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_14) == 0x002130, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_14' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_13) == 0x002188, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_13' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_12) == 0x00218C, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_12' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_11) == 0x002190, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_11' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_10) == 0x002194, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_10' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_9) == 0x002198, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_8) == 0x00219C, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_7) == 0x0021A0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_6) == 0x0021A4, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_5) == 0x0021A8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_4) == 0x0021AC, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_3) == 0x0021B0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_2) == 0x0021B8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess_1) == 0x0021C0, "Member 'UABP_Zipline_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, K2Node_PropertyAccess) == 0x0021C8, "Member 'UABP_Zipline_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AimPitch) == 0x0021D0, "Member 'UABP_Zipline_C::AimPitch' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, AimYaw) == 0x0021D8, "Member 'UABP_Zipline_C::AimYaw' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Rotation_Z__Yaw_) == 0x0021E0, "Member 'UABP_Zipline_C::Rotation_Z__Yaw_' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, IsMovingUpOrDown) == 0x0021E4, "Member 'UABP_Zipline_C::IsMovingUpOrDown' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Horizontal_Move_L) == 0x0021E8, "Member 'UABP_Zipline_C::Start_Horizontal_Move_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Verticle_Move_Up_L) == 0x0021F0, "Member 'UABP_Zipline_C::Start_Verticle_Move_Up_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Verticle_Move_Down_L) == 0x0021F8, "Member 'UABP_Zipline_C::Start_Verticle_Move_Down_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Horizontal_Move_L) == 0x002200, "Member 'UABP_Zipline_C::Cycle_Horizontal_Move_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Verticle_Move_Up_L) == 0x002208, "Member 'UABP_Zipline_C::Cycle_Verticle_Move_Up_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Verticle_Move_Down_L) == 0x002210, "Member 'UABP_Zipline_C::Cycle_Verticle_Move_Down_L' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, ReadyToLockRotation) == 0x002218, "Member 'UABP_Zipline_C::ReadyToLockRotation' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Body_Rotation) == 0x002220, "Member 'UABP_Zipline_C::Body_Rotation' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Hand_TargetPoint) == 0x002238, "Member 'UABP_Zipline_C::Hand_TargetPoint' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Hand_PoleVector_R) == 0x002250, "Member 'UABP_Zipline_C::Hand_PoleVector_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, VerticalTransition) == 0x002268, "Member 'UABP_Zipline_C::VerticalTransition' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Edit_Position_Vertical_Up) == 0x002280, "Member 'UABP_Zipline_C::Edit_Position_Vertical_Up' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Edit_Position_Vertical_Down) == 0x002298, "Member 'UABP_Zipline_C::Edit_Position_Vertical_Down' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Edit_Position_Horizontal) == 0x0022B0, "Member 'UABP_Zipline_C::Edit_Position_Horizontal' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Modify_Player_Transition) == 0x0022C8, "Member 'UABP_Zipline_C::Modify_Player_Transition' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Modify_Player_Rotation) == 0x0022E0, "Member 'UABP_Zipline_C::Modify_Player_Rotation' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Modify_Player_Additive) == 0x0022F8, "Member 'UABP_Zipline_C::Modify_Player_Additive' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Additive_Body_Aiming_Alpha) == 0x002310, "Member 'UABP_Zipline_C::Additive_Body_Aiming_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Additive_Body_Aiming_Direction) == 0x002318, "Member 'UABP_Zipline_C::Additive_Body_Aiming_Direction' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, ActiveLockRotation) == 0x00231C, "Member 'UABP_Zipline_C::ActiveLockRotation' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Verticle_Move_Up_R) == 0x002320, "Member 'UABP_Zipline_C::Cycle_Verticle_Move_Up_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Verticle_Move_Down_R) == 0x002328, "Member 'UABP_Zipline_C::Cycle_Verticle_Move_Down_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Cycle_Horizontal_Move_R) == 0x002330, "Member 'UABP_Zipline_C::Cycle_Horizontal_Move_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Horizontal_Move_R) == 0x002338, "Member 'UABP_Zipline_C::Start_Horizontal_Move_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Verticle_Move_Up_R) == 0x002340, "Member 'UABP_Zipline_C::Start_Verticle_Move_Up_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Start_Verticle_Move_Down_R) == 0x002348, "Member 'UABP_Zipline_C::Start_Verticle_Move_Down_R' has a wrong offset!");
static_assert(offsetof(UABP_Zipline_C, Hand_PoleVector_L) == 0x002350, "Member 'UABP_Zipline_C::Hand_PoleVector_L' has a wrong offset!");

}

