#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_NPCintoVehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_NPCintoVehicle.BTTask_NPCintoVehicle_C
// 0x0018 (0x00C0 - 0x00A8)
class UBTTask_NPCintoVehicle_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EGzVehicleSeatType                            Seat;                                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InVehicle;                                         // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E24[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzVehicle*                             VehicleRef;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void Find_the_Seat(class AGzVehicle* Vehicle, bool* PlaceFound);
	void ExecuteUbergraph_BTTask_NPCintoVehicle(int32 EntryPoint);
	void Available_seats_in_vehicle(class AActor* Target, bool* Empty_seats);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_NPCintoVehicle_C">();
	}
	static class UBTTask_NPCintoVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_NPCintoVehicle_C>();
	}
};
static_assert(alignof(UBTTask_NPCintoVehicle_C) == 0x000008, "Wrong alignment on UBTTask_NPCintoVehicle_C");
static_assert(sizeof(UBTTask_NPCintoVehicle_C) == 0x0000C0, "Wrong size on UBTTask_NPCintoVehicle_C");
static_assert(offsetof(UBTTask_NPCintoVehicle_C, UberGraphFrame) == 0x0000A8, "Member 'UBTTask_NPCintoVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTTask_NPCintoVehicle_C, Seat) == 0x0000B0, "Member 'UBTTask_NPCintoVehicle_C::Seat' has a wrong offset!");
static_assert(offsetof(UBTTask_NPCintoVehicle_C, InVehicle) == 0x0000B1, "Member 'UBTTask_NPCintoVehicle_C::InVehicle' has a wrong offset!");
static_assert(offsetof(UBTTask_NPCintoVehicle_C, VehicleRef) == 0x0000B8, "Member 'UBTTask_NPCintoVehicle_C::VehicleRef' has a wrong offset!");

}

