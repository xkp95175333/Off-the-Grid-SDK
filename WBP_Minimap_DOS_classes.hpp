#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Minimap_DOS

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Minimap_DOS.WBP_Minimap_DOS_C
// 0x0080 (0x03C0 - 0x0340)
class UWBP_Minimap_DOS_C final : public UGzHUDComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Divider_Image;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           Kills_GzText;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Map_Size_CanvasPanel;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NoiseCA_Image;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           Quads_GzText;                                      // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           RegionName_GzText;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SquadsAlive_Image;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Minimap_C*                         WBP_Minimap;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_StageTimer_C*                      WBP_StageTimer;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateDataHandler;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RegionNameLayer;                                   // 0x039C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E0E[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefaultMapName;                                    // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           UpdateRegionHandler;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_Minimap_DOS(int32 EntryPoint);
	void IsPreMatchActiveted(bool* Activeted);
	void OnViewTargetChanged(class APawn* ViewTarget);
	void SetFontStyle(const class FText& Text, class FText* Result);
	void UpdateData();
	void UpdateDisplayZoneName();
	void UpdateOnComebackArena(class AGzPlayerState* PlayerState);
	void UpdateSquadsAlive();
	void UpdateStats();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Minimap_DOS_C">();
	}
	static class UWBP_Minimap_DOS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Minimap_DOS_C>();
	}
};
static_assert(alignof(UWBP_Minimap_DOS_C) == 0x000008, "Wrong alignment on UWBP_Minimap_DOS_C");
static_assert(sizeof(UWBP_Minimap_DOS_C) == 0x0003C0, "Wrong size on UWBP_Minimap_DOS_C");
static_assert(offsetof(UWBP_Minimap_DOS_C, UberGraphFrame) == 0x000340, "Member 'UWBP_Minimap_DOS_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, Divider_Image) == 0x000348, "Member 'UWBP_Minimap_DOS_C::Divider_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, Kills_GzText) == 0x000350, "Member 'UWBP_Minimap_DOS_C::Kills_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, Map_Size_CanvasPanel) == 0x000358, "Member 'UWBP_Minimap_DOS_C::Map_Size_CanvasPanel' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, NoiseCA_Image) == 0x000360, "Member 'UWBP_Minimap_DOS_C::NoiseCA_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, Quads_GzText) == 0x000368, "Member 'UWBP_Minimap_DOS_C::Quads_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, RegionName_GzText) == 0x000370, "Member 'UWBP_Minimap_DOS_C::RegionName_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, SquadsAlive_Image) == 0x000378, "Member 'UWBP_Minimap_DOS_C::SquadsAlive_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, WBP_Minimap) == 0x000380, "Member 'UWBP_Minimap_DOS_C::WBP_Minimap' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, WBP_StageTimer) == 0x000388, "Member 'UWBP_Minimap_DOS_C::WBP_StageTimer' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, UpdateDataHandler) == 0x000390, "Member 'UWBP_Minimap_DOS_C::UpdateDataHandler' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, PlayerId) == 0x000398, "Member 'UWBP_Minimap_DOS_C::PlayerId' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, RegionNameLayer) == 0x00039C, "Member 'UWBP_Minimap_DOS_C::RegionNameLayer' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, DefaultMapName) == 0x0003A8, "Member 'UWBP_Minimap_DOS_C::DefaultMapName' has a wrong offset!");
static_assert(offsetof(UWBP_Minimap_DOS_C, UpdateRegionHandler) == 0x0003B8, "Member 'UWBP_Minimap_DOS_C::UpdateRegionHandler' has a wrong offset!");

}

