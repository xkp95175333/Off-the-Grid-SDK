#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_HEX_Safe_box

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_HEX_Safe_box.ABP_HEX_Safe_box_C
// 0x0560 (0x08D0 - 0x0370)
class UABP_HEX_Safe_box_C final : public UAnimInstance
{
public:
	uint8                                         Pad_69A4[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x03D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x03F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0420(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0448(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0470(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0498(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x04C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x04E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0510(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0538(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0580(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x05A0(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x05E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0600(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0648(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0668(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x06B0(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x06D0(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0710(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0730(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0778(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0798(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x07D8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x07F8(0x00C8)()
	bool                                          IsActive;                                          // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpen;                                            // 0x08C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocallyActive;                                   // 0x08C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocallyOpen;                                     // 0x08C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayAnimation;                                  // 0x08C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Safe_box_AnimGraphNode_TransitionResult_07ABC4304D51EB257519F18BA3F1A936();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Safe_box_AnimGraphNode_TransitionResult_C3664563450B3EC789A285BC4C744064();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Safe_box_AnimGraphNode_TransitionResult_C696475E40E6035A9C75B3A6C914347F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Safe_box_AnimGraphNode_TransitionResult_D10C1F6F4AC5F43A042B5B82845CEE98();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Safe_box_AnimGraphNode_TransitionResult_DC0BE99C6A491FDE26F27B96DC099342();
	void ExecuteUbergraph_ABP_HEX_Safe_box(int32 EntryPoint);
	void On_State_Entry_0(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateExit(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateExit_0(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_HEX_Safe_box_C">();
	}
	static class UABP_HEX_Safe_box_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_HEX_Safe_box_C>();
	}
};
static_assert(alignof(UABP_HEX_Safe_box_C) == 0x000010, "Wrong alignment on UABP_HEX_Safe_box_C");
static_assert(sizeof(UABP_HEX_Safe_box_C) == 0x0008D0, "Wrong size on UABP_HEX_Safe_box_C");
static_assert(offsetof(UABP_HEX_Safe_box_C, UberGraphFrame) == 0x000370, "Member 'UABP_HEX_Safe_box_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_HEX_Safe_box_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_HEX_Safe_box_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_9) == 0x0003A8, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_8) == 0x0003D0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_7) == 0x0003F8, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_6) == 0x000420, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_5) == 0x000448, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_4) == 0x000470, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_3) == 0x000498, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_2) == 0x0004C0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult_1) == 0x0004E8, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_TransitionResult) == 0x000510, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequencePlayer_3) == 0x000538, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_6) == 0x000580, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequenceEvaluator_2) == 0x0005A0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_5) == 0x0005E0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequencePlayer_2) == 0x000600, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_4) == 0x000648, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequencePlayer_1) == 0x000668, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_3) == 0x0006B0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequenceEvaluator_1) == 0x0006D0, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_2) == 0x000710, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequencePlayer) == 0x000730, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult_1) == 0x000778, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_SequenceEvaluator) == 0x000798, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateResult) == 0x0007D8, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, AnimGraphNode_StateMachine) == 0x0007F8, "Member 'UABP_HEX_Safe_box_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, IsActive) == 0x0008C0, "Member 'UABP_HEX_Safe_box_C::IsActive' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, IsOpen) == 0x0008C1, "Member 'UABP_HEX_Safe_box_C::IsOpen' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, IsLocallyActive) == 0x0008C2, "Member 'UABP_HEX_Safe_box_C::IsLocallyActive' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, IsLocallyOpen) == 0x0008C3, "Member 'UABP_HEX_Safe_box_C::IsLocallyOpen' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Safe_box_C, CanPlayAnimation) == 0x0008C4, "Member 'UABP_HEX_Safe_box_C::CanPlayAnimation' has a wrong offset!");

}

