#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CohtmlPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CohtmlPlugin_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class CohtmlPlugin.CohtmlAssetReferencer
// 0x0000 (0x0028 - 0x0028)
class UCohtmlAssetReferencer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAssetReferencer">();
	}
	static class UCohtmlAssetReferencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAssetReferencer>();
	}
};
static_assert(alignof(UCohtmlAssetReferencer) == 0x000008, "Wrong alignment on UCohtmlAssetReferencer");
static_assert(sizeof(UCohtmlAssetReferencer) == 0x000028, "Wrong size on UCohtmlAssetReferencer");

// Class CohtmlPlugin.CohtmlAtlasContainedTextures
// 0x0050 (0x0078 - 0x0028)
class UCohtmlAtlasContainedTextures final : public UObject
{
public:
	TSet<class UTexture2D*>                       Textures;                                          // 0x0028(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAtlasContainedTextures">();
	}
	static class UCohtmlAtlasContainedTextures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAtlasContainedTextures>();
	}
};
static_assert(alignof(UCohtmlAtlasContainedTextures) == 0x000008, "Wrong alignment on UCohtmlAtlasContainedTextures");
static_assert(sizeof(UCohtmlAtlasContainedTextures) == 0x000078, "Wrong size on UCohtmlAtlasContainedTextures");
static_assert(offsetof(UCohtmlAtlasContainedTextures, Textures) == 0x000028, "Member 'UCohtmlAtlasContainedTextures::Textures' has a wrong offset!");

// Class CohtmlPlugin.CohtmlTextureAtlasDetails
// 0x0050 (0x0078 - 0x0028)
class UCohtmlTextureAtlasDetails final : public UObject
{
public:
	class FString                                 AtlasPath;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PixelFormat;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2405[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AtlasLocation;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAtlasWidth;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAtlasHeight;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTextureWidth;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTextureHeight;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlTextureAtlasDetails">();
	}
	static class UCohtmlTextureAtlasDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlTextureAtlasDetails>();
	}
};
static_assert(alignof(UCohtmlTextureAtlasDetails) == 0x000008, "Wrong alignment on UCohtmlTextureAtlasDetails");
static_assert(sizeof(UCohtmlTextureAtlasDetails) == 0x000078, "Wrong size on UCohtmlTextureAtlasDetails");
static_assert(offsetof(UCohtmlTextureAtlasDetails, AtlasPath) == 0x000028, "Member 'UCohtmlTextureAtlasDetails::AtlasPath' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, Width) == 0x000038, "Member 'UCohtmlTextureAtlasDetails::Width' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, Height) == 0x00003C, "Member 'UCohtmlTextureAtlasDetails::Height' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, PixelFormat) == 0x000040, "Member 'UCohtmlTextureAtlasDetails::PixelFormat' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, CompressionSettings) == 0x000050, "Member 'UCohtmlTextureAtlasDetails::CompressionSettings' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, AtlasLocation) == 0x000058, "Member 'UCohtmlTextureAtlasDetails::AtlasLocation' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxAtlasWidth) == 0x000068, "Member 'UCohtmlTextureAtlasDetails::MaxAtlasWidth' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxAtlasHeight) == 0x00006C, "Member 'UCohtmlTextureAtlasDetails::MaxAtlasHeight' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxTextureWidth) == 0x000070, "Member 'UCohtmlTextureAtlasDetails::MaxTextureWidth' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxTextureHeight) == 0x000074, "Member 'UCohtmlTextureAtlasDetails::MaxTextureHeight' has a wrong offset!");

// Class CohtmlPlugin.CohtmlAudioWrapper
// 0x0440 (0x0468 - 0x0028)
class UCohtmlAudioWrapper final : public UObject
{
public:
	class UObject*                                Owner;                                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, struct FCohtmlSound>              Sounds;                                            // 0x0030(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PendingSoundIdsToRemove;                           // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2406[0x3D8];                                   // 0x0090(0x03D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAudioWrapper">();
	}
	static class UCohtmlAudioWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAudioWrapper>();
	}
};
static_assert(alignof(UCohtmlAudioWrapper) == 0x000008, "Wrong alignment on UCohtmlAudioWrapper");
static_assert(sizeof(UCohtmlAudioWrapper) == 0x000468, "Wrong size on UCohtmlAudioWrapper");
static_assert(offsetof(UCohtmlAudioWrapper, Owner) == 0x000028, "Member 'UCohtmlAudioWrapper::Owner' has a wrong offset!");
static_assert(offsetof(UCohtmlAudioWrapper, Sounds) == 0x000030, "Member 'UCohtmlAudioWrapper::Sounds' has a wrong offset!");
static_assert(offsetof(UCohtmlAudioWrapper, PendingSoundIdsToRemove) == 0x000080, "Member 'UCohtmlAudioWrapper::PendingSoundIdsToRemove' has a wrong offset!");

// Class CohtmlPlugin.CohtmlBaseComponent
// 0x0148 (0x01F0 - 0x00A8)
class UCohtmlBaseComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             ReadyForBindings;                                  // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BindingsReleased;                                  // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ScriptingReady;                                    // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ScriptContextCreated;                              // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DOMBuilt;                                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FinishLoad;                                        // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& URL)>     OnNavigateTo;                                      // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     PreloadedTextures;                                 // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableComplexCSSSupport;                          // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2407[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Texture;                                           // 0x0140(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayedUpdate;                                    // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteCommandProcessingWithLayout;               // 0x014B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSurfacePartitioning;                           // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunAdvanceConcurrently;                           // 0x014D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlTickGroup                              TickGroup;                                         // 0x014E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2408[0x31];                                    // 0x014F(0x0031)(Fixing Size After Last Property [ Dumper-7 ])
	class UMultithreadAwareCompositorWrapper*     CohCompositorWrapper;                              // 0x0180(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCohtmlAudioWrapper*                    AudioWrapper;                                      // 0x0188(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCohCustomMaterialDrawer*               CohCustomMaterialDrawer;                           // 0x0190(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2409[0x58];                                    // 0x0198(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPreloadedTexture(class UTexture2D* Param_Texture);
	void BeginDebugFrameSave();
	void CreateDataModelFromObject(const class FString& Param_Name, class UObject* Model);
	void CreateDataModelFromStruct(const class FString& Param_Name, const TFieldPath<struct FStructProperty> Struct);
	class UCohtmlJSEvent* CreateJSEvent();
	void DebugSaveNextFrame();
	void EnableDelayedUpdate(bool bEnabled);
	void EnableRendering(bool bEnabled);
	void EndDebugFrameSave();
	bool EnsureMeshData(ECohtmlComponentMeshInit MeshInitialization);
	void Load(const class FString& Path);
	void PreloadTextureAsync(const class FString& AssetPath);
	void PreloadTextureSync(const class FString& AssetPath);
	void RegisterForEvent(const class FString& JSEventName, TDelegate<void()> Delegate);
	void Reload();
	void RemoveAllPreloadedTextures();
	void RemoveDataModelFromObject(class UObject* Model);
	bool RemovePreloadedTexture(class UTexture2D* Param_Texture);
	bool RemovePreloadedTextureFromPath(const class FString& AssetPath);
	void Resize(int32 Width, int32 Height);
	void ResizeRenderTarget(int32 Width, int32 Height);
	void SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings);
	void ShowPaintRects(bool Show);

	bool HasRequestedView() const;
	bool IsReadyForBindings() const;
	bool IsReadyToCreateView() const;
	void RemoveDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const;
	void SynchronizeModels() const;
	void TriggerJSEvent(const class FString& Param_Name, class UCohtmlJSEvent* EventData) const;
	void UpdateWholeDataModelFromObject(class UObject* Model) const;
	void UpdateWholeDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlBaseComponent">();
	}
	static class UCohtmlBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlBaseComponent>();
	}
};
static_assert(alignof(UCohtmlBaseComponent) == 0x000008, "Wrong alignment on UCohtmlBaseComponent");
static_assert(sizeof(UCohtmlBaseComponent) == 0x0001F0, "Wrong size on UCohtmlBaseComponent");
static_assert(offsetof(UCohtmlBaseComponent, ReadyForBindings) == 0x0000A8, "Member 'UCohtmlBaseComponent::ReadyForBindings' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, BindingsReleased) == 0x0000B8, "Member 'UCohtmlBaseComponent::BindingsReleased' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, ScriptingReady) == 0x0000C8, "Member 'UCohtmlBaseComponent::ScriptingReady' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, ScriptContextCreated) == 0x0000D8, "Member 'UCohtmlBaseComponent::ScriptContextCreated' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, DOMBuilt) == 0x0000E8, "Member 'UCohtmlBaseComponent::DOMBuilt' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, FinishLoad) == 0x0000F8, "Member 'UCohtmlBaseComponent::FinishLoad' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, LoadFailed) == 0x000108, "Member 'UCohtmlBaseComponent::LoadFailed' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, OnNavigateTo) == 0x000118, "Member 'UCohtmlBaseComponent::OnNavigateTo' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, PreloadedTextures) == 0x000128, "Member 'UCohtmlBaseComponent::PreloadedTextures' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bEnableComplexCSSSupport) == 0x000138, "Member 'UCohtmlBaseComponent::bEnableComplexCSSSupport' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, Texture) == 0x000140, "Member 'UCohtmlBaseComponent::Texture' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, Filter) == 0x000148, "Member 'UCohtmlBaseComponent::Filter' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bReceiveInput) == 0x000149, "Member 'UCohtmlBaseComponent::bReceiveInput' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bDelayedUpdate) == 0x00014A, "Member 'UCohtmlBaseComponent::bDelayedUpdate' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bExecuteCommandProcessingWithLayout) == 0x00014B, "Member 'UCohtmlBaseComponent::bExecuteCommandProcessingWithLayout' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bUseSurfacePartitioning) == 0x00014C, "Member 'UCohtmlBaseComponent::bUseSurfacePartitioning' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bRunAdvanceConcurrently) == 0x00014D, "Member 'UCohtmlBaseComponent::bRunAdvanceConcurrently' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, TickGroup) == 0x00014E, "Member 'UCohtmlBaseComponent::TickGroup' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, CohCompositorWrapper) == 0x000180, "Member 'UCohtmlBaseComponent::CohCompositorWrapper' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, AudioWrapper) == 0x000188, "Member 'UCohtmlBaseComponent::AudioWrapper' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, CohCustomMaterialDrawer) == 0x000190, "Member 'UCohtmlBaseComponent::CohCustomMaterialDrawer' has a wrong offset!");

// Class CohtmlPlugin.CohtmlBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCohtmlBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddArray(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg, int32 ArrayType);
	static void AddArrayOfStructs(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg);
	static void AddBool(class UCohtmlJSEvent* JSEvent, bool Arg);
	static void AddByte(class UCohtmlJSEvent* JSEvent, uint8 Arg);
	static void AddFloat(class UCohtmlJSEvent* JSEvent, float Arg);
	static void AddInt32(class UCohtmlJSEvent* JSEvent, int32 Arg);
	static void AddObject(class UCohtmlJSEvent* JSEvent, class UObject* Arg);
	static void AddString(class UCohtmlJSEvent* JSEvent, const class FString& Arg);
	static void AddStructArg(class UCohtmlJSEvent* JSEvent, const TFieldPath<struct FStructProperty> Arg);
	static class UCohtmlJSEvent* CreateJSEvent(class UObject* WorldContextObject);
	static void TriggerJSEvent(class UCohtmlBaseComponent* Component, const class FString& EventName, class UCohtmlJSEvent* JSEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlBlueprintFunctionLibrary">();
	}
	static class UCohtmlBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UCohtmlBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UCohtmlBlueprintFunctionLibrary");
static_assert(sizeof(UCohtmlBlueprintFunctionLibrary) == 0x000028, "Wrong size on UCohtmlBlueprintFunctionLibrary");

// Class CohtmlPlugin.CohtmlComponent
// 0x0038 (0x0228 - 0x01F0)
class UCohtmlComponent final : public UCohtmlBaseComponent
{
public:
	class FString                                 URL;                                               // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualTexture;                                     // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2411[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrimitiveName;                                     // 0x020C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2412[0x14];                                    // 0x0214(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlComponent">();
	}
	static class UCohtmlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlComponent>();
	}
};
static_assert(alignof(UCohtmlComponent) == 0x000008, "Wrong alignment on UCohtmlComponent");
static_assert(sizeof(UCohtmlComponent) == 0x000228, "Wrong size on UCohtmlComponent");
static_assert(offsetof(UCohtmlComponent, URL) == 0x0001F0, "Member 'UCohtmlComponent::URL' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, Width) == 0x000200, "Member 'UCohtmlComponent::Width' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, Height) == 0x000204, "Member 'UCohtmlComponent::Height' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, ManualTexture) == 0x000208, "Member 'UCohtmlComponent::ManualTexture' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, PrimitiveName) == 0x00020C, "Member 'UCohtmlComponent::PrimitiveName' has a wrong offset!");

// Class CohtmlPlugin.CohtmlEventHelpers
// 0x0000 (0x0028 - 0x0028)
class UCohtmlEventHelpers final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlEventHelpers">();
	}
	static class UCohtmlEventHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlEventHelpers>();
	}
};
static_assert(alignof(UCohtmlEventHelpers) == 0x000008, "Wrong alignment on UCohtmlEventHelpers");
static_assert(sizeof(UCohtmlEventHelpers) == 0x000028, "Wrong size on UCohtmlEventHelpers");

// Class CohtmlPlugin.CohtmlGameHUD
// 0x00B8 (0x0448 - 0x0390)
class ACohtmlGameHUD final : public AHUD
{
public:
	class UCohtmlHUD*                             CohtmlHUD;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2413[0xB0];                                    // 0x0398(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupView(const class FString& PageUrl, bool bEnableComplexCSSSupport, bool bDelayedUpdate, bool bReceiveInput, bool bExecuteCommandProcessingWithLayout, bool bUseSurfacePartitioning, bool bRunAdvanceConcurrently);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlGameHUD">();
	}
	static class ACohtmlGameHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlGameHUD>();
	}
};
static_assert(alignof(ACohtmlGameHUD) == 0x000008, "Wrong alignment on ACohtmlGameHUD");
static_assert(sizeof(ACohtmlGameHUD) == 0x000448, "Wrong size on ACohtmlGameHUD");
static_assert(offsetof(ACohtmlGameHUD, CohtmlHUD) == 0x000390, "Member 'ACohtmlGameHUD::CohtmlHUD' has a wrong offset!");

// Class CohtmlPlugin.HUDSurfacePartitioningCompositor
// 0x01D0 (0x01F8 - 0x0028)
class UHUDSurfacePartitioningCompositor final : public UObject
{
public:
	uint8                                         Pad_2415[0x128];                                   // 0x0028(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	class UCohtmlHUD*                             HUD;                                               // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FHudCompositorCachedMaterial> CachedHudMaterials;                                // 0x0158(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, bool>                     VisibilityMap;                                     // 0x01A8(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDSurfacePartitioningCompositor">();
	}
	static class UHUDSurfacePartitioningCompositor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDSurfacePartitioningCompositor>();
	}
};
static_assert(alignof(UHUDSurfacePartitioningCompositor) == 0x000008, "Wrong alignment on UHUDSurfacePartitioningCompositor");
static_assert(sizeof(UHUDSurfacePartitioningCompositor) == 0x0001F8, "Wrong size on UHUDSurfacePartitioningCompositor");
static_assert(offsetof(UHUDSurfacePartitioningCompositor, HUD) == 0x000150, "Member 'UHUDSurfacePartitioningCompositor::HUD' has a wrong offset!");
static_assert(offsetof(UHUDSurfacePartitioningCompositor, CachedHudMaterials) == 0x000158, "Member 'UHUDSurfacePartitioningCompositor::CachedHudMaterials' has a wrong offset!");
static_assert(offsetof(UHUDSurfacePartitioningCompositor, VisibilityMap) == 0x0001A8, "Member 'UHUDSurfacePartitioningCompositor::VisibilityMap' has a wrong offset!");

// Class CohtmlPlugin.CohtmlHUD
// 0x0038 (0x0228 - 0x01F0)
class UCohtmlHUD final : public UCohtmlBaseComponent
{
public:
	struct FSoftObjectPath                        HUDMaterialName;                                   // 0x01F0(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              HUDMaterial;                                       // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               HUDMaterialInstance;                               // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2416[0x8];                                     // 0x0220(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlHUD">();
	}
	static class UCohtmlHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlHUD>();
	}
};
static_assert(alignof(UCohtmlHUD) == 0x000008, "Wrong alignment on UCohtmlHUD");
static_assert(sizeof(UCohtmlHUD) == 0x000228, "Wrong size on UCohtmlHUD");
static_assert(offsetof(UCohtmlHUD, HUDMaterialName) == 0x0001F0, "Member 'UCohtmlHUD::HUDMaterialName' has a wrong offset!");
static_assert(offsetof(UCohtmlHUD, HUDMaterial) == 0x000210, "Member 'UCohtmlHUD::HUDMaterial' has a wrong offset!");
static_assert(offsetof(UCohtmlHUD, HUDMaterialInstance) == 0x000218, "Member 'UCohtmlHUD::HUDMaterialInstance' has a wrong offset!");

// Class CohtmlPlugin.CohtmlInputActor
// 0x0068 (0x0308 - 0x02A0)
class ACohtmlInputActor final : public AActor
{
public:
	FMulticastInlineDelegateProperty_             OnCohtmlInputActorMouseButtonDown;                 // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCohtmlInputActorMouseButtonUp;                   // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCohtmlInputActorKeyDown;                         // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCohtmlInputActorKeyUp;                           // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCohtmlInputActorFocusChanged;                    // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2417[0x18];                                    // 0x02F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AlwaysAcceptMouseInput(bool bAccept);
	void Initialize(ECollisionChannel CollisionChannel, ETextureAddress AddressMode, ECohtmlInputWidgetRaycastQuality RaycastQuality, int32 UVChannel);
	void SetCohtmlInputFocus(bool FocusUI);
	void SetCohtmlViewFocus(class UCohtmlBaseComponent* NewFocusedView);
	void SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation);
	void SetLineTraceMode(ECohtmlInputWidgetLineTraceMode Mode);
	void SetupInput(class UCohtmlBaseComponent* CohtmlHUD, ECollisionChannel CollisionChannel, ETextureAddress AddressMode, ECohtmlInputWidgetRaycastQuality RaycastQuality, int32 UVChannel, bool bFocusUI, bool bAlwaysAcceptMouseInput);
	void ToggleCohtmlInputFocus();

	ECohtmlInputPropagationBehaviour GetInputPropagationBehaviour() const;
	bool IsCohtmlFocused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlInputActor">();
	}
	static class ACohtmlInputActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlInputActor>();
	}
};
static_assert(alignof(ACohtmlInputActor) == 0x000008, "Wrong alignment on ACohtmlInputActor");
static_assert(sizeof(ACohtmlInputActor) == 0x000308, "Wrong size on ACohtmlInputActor");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorMouseButtonDown) == 0x0002A0, "Member 'ACohtmlInputActor::OnCohtmlInputActorMouseButtonDown' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorMouseButtonUp) == 0x0002B0, "Member 'ACohtmlInputActor::OnCohtmlInputActorMouseButtonUp' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorKeyDown) == 0x0002C0, "Member 'ACohtmlInputActor::OnCohtmlInputActorKeyDown' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorKeyUp) == 0x0002D0, "Member 'ACohtmlInputActor::OnCohtmlInputActorKeyUp' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorFocusChanged) == 0x0002E0, "Member 'ACohtmlInputActor::OnCohtmlInputActorFocusChanged' has a wrong offset!");

// Class CohtmlPlugin.CohtmlJSEvent
// 0x0090 (0x00B8 - 0x0028)
class UCohtmlJSEvent final : public UObject
{
public:
	uint8                                         Pad_241B[0x80];                                    // 0x0028(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStruct*>                        StructTypes;                                       // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	void AddArray(const TArray<int32>& Array);
	void AddBool(bool B);
	void AddByte(uint8 byte);
	void AddFloat(float Fl);
	void AddInt32(int32 Integer);
	void AddName(const class FName& Param_Name);
	void AddObject(class UObject* Object);
	void AddString(const class FString& Str);
	void AddStructArg(const TFieldPath<struct FStructProperty> Arg);
	void AddText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlJSEvent">();
	}
	static class UCohtmlJSEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlJSEvent>();
	}
};
static_assert(alignof(UCohtmlJSEvent) == 0x000008, "Wrong alignment on UCohtmlJSEvent");
static_assert(sizeof(UCohtmlJSEvent) == 0x0000B8, "Wrong size on UCohtmlJSEvent");
static_assert(offsetof(UCohtmlJSEvent, StructTypes) == 0x0000A8, "Member 'UCohtmlJSEvent::StructTypes' has a wrong offset!");

// Class CohtmlPlugin.CohtmlSettings
// 0x00A8 (0x00D0 - 0x0028)
class UCohtmlSettings final : public UObject
{
public:
	bool                                          EnableLiveReload;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDirectoryPath>                 LiveReloadWatchedDirectories;                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         DevToolsPort;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLocalization;                                // 0x0044(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableBreakIterator;                               // 0x0045(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandleInputOnHTMLBody;                             // 0x0046(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241D[0x1];                                     // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InputTransparentCssClasses;                        // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         InputTransparentCssClassesWithChildren;            // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          AlwaysHandleMouseWheelEvents;                      // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetDefaultVKTextLayoutToAlphaNumeric;              // 0x0069(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241E[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollDelta;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowWarningsOnScreen;                              // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlSettingsSeverity                       LogSeverity;                                       // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableThreadUsageLogging;                         // 0x0072(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectTitleSafeZone;                             // 0x0073(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectLetterboxing;                              // 0x0074(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadStreamingTexturesImmediately;                 // 0x0075(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryLoadUTexturesFromRawImages;                    // 0x0076(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlLinearSpaceRenderingPipeline           LinearSpaceRenderingPipeline;                      // 0x0077(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ImageExtensions;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0088(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureGroup                                 TextureGroup;                                      // 0x0089(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSaveImportedTextures;                         // 0x008A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickWhileGameIsPaused;                             // 0x008B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLowerCaseNamesForAutoExposedProperties;        // 0x008C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlMSAA                                   MSAA;                                              // 0x008D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241F[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSingleFormatFallbacks>         FallbacksForAllFormats;                            // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 DefaultStyleFontFamily;                            // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsynchronousResourceRequestCalls;                  // 0x00B0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticallyPackageNewAtlases;                   // 0x00B1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInputPreprocessor;                             // 0x00B2(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2420[0x5];                                     // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FResourceHostPair>              ResourceHostMapping;                               // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bConfigureForCustomEffectsAndCompositorAPI;        // 0x00C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2421[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlSettings">();
	}
	static class UCohtmlSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlSettings>();
	}
};
static_assert(alignof(UCohtmlSettings) == 0x000008, "Wrong alignment on UCohtmlSettings");
static_assert(sizeof(UCohtmlSettings) == 0x0000D0, "Wrong size on UCohtmlSettings");
static_assert(offsetof(UCohtmlSettings, EnableLiveReload) == 0x000028, "Member 'UCohtmlSettings::EnableLiveReload' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, LiveReloadWatchedDirectories) == 0x000030, "Member 'UCohtmlSettings::LiveReloadWatchedDirectories' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, DevToolsPort) == 0x000040, "Member 'UCohtmlSettings::DevToolsPort' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, EnableLocalization) == 0x000044, "Member 'UCohtmlSettings::EnableLocalization' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, EnableBreakIterator) == 0x000045, "Member 'UCohtmlSettings::EnableBreakIterator' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, HandleInputOnHTMLBody) == 0x000046, "Member 'UCohtmlSettings::HandleInputOnHTMLBody' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, InputTransparentCssClasses) == 0x000048, "Member 'UCohtmlSettings::InputTransparentCssClasses' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, InputTransparentCssClassesWithChildren) == 0x000058, "Member 'UCohtmlSettings::InputTransparentCssClassesWithChildren' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, AlwaysHandleMouseWheelEvents) == 0x000068, "Member 'UCohtmlSettings::AlwaysHandleMouseWheelEvents' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, SetDefaultVKTextLayoutToAlphaNumeric) == 0x000069, "Member 'UCohtmlSettings::SetDefaultVKTextLayoutToAlphaNumeric' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ScrollDelta) == 0x00006C, "Member 'UCohtmlSettings::ScrollDelta' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ShowWarningsOnScreen) == 0x000070, "Member 'UCohtmlSettings::ShowWarningsOnScreen' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, LogSeverity) == 0x000071, "Member 'UCohtmlSettings::LogSeverity' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bEnableThreadUsageLogging) == 0x000072, "Member 'UCohtmlSettings::bEnableThreadUsageLogging' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bRespectTitleSafeZone) == 0x000073, "Member 'UCohtmlSettings::bRespectTitleSafeZone' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bRespectLetterboxing) == 0x000074, "Member 'UCohtmlSettings::bRespectLetterboxing' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bLoadStreamingTexturesImmediately) == 0x000075, "Member 'UCohtmlSettings::bLoadStreamingTexturesImmediately' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bTryLoadUTexturesFromRawImages) == 0x000076, "Member 'UCohtmlSettings::bTryLoadUTexturesFromRawImages' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, LinearSpaceRenderingPipeline) == 0x000077, "Member 'UCohtmlSettings::LinearSpaceRenderingPipeline' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ImageExtensions) == 0x000078, "Member 'UCohtmlSettings::ImageExtensions' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, CompressionSettings) == 0x000088, "Member 'UCohtmlSettings::CompressionSettings' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, TextureGroup) == 0x000089, "Member 'UCohtmlSettings::TextureGroup' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bAutoSaveImportedTextures) == 0x00008A, "Member 'UCohtmlSettings::bAutoSaveImportedTextures' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, TickWhileGameIsPaused) == 0x00008B, "Member 'UCohtmlSettings::TickWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bUseLowerCaseNamesForAutoExposedProperties) == 0x00008C, "Member 'UCohtmlSettings::bUseLowerCaseNamesForAutoExposedProperties' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, MSAA) == 0x00008D, "Member 'UCohtmlSettings::MSAA' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, FallbacksForAllFormats) == 0x000090, "Member 'UCohtmlSettings::FallbacksForAllFormats' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, DefaultStyleFontFamily) == 0x0000A0, "Member 'UCohtmlSettings::DefaultStyleFontFamily' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, AsynchronousResourceRequestCalls) == 0x0000B0, "Member 'UCohtmlSettings::AsynchronousResourceRequestCalls' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bAutomaticallyPackageNewAtlases) == 0x0000B1, "Member 'UCohtmlSettings::bAutomaticallyPackageNewAtlases' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bUseInputPreprocessor) == 0x0000B2, "Member 'UCohtmlSettings::bUseInputPreprocessor' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ResourceHostMapping) == 0x0000B8, "Member 'UCohtmlSettings::ResourceHostMapping' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bConfigureForCustomEffectsAndCompositorAPI) == 0x0000C8, "Member 'UCohtmlSettings::bConfigureForCustomEffectsAndCompositorAPI' has a wrong offset!");

// Class CohtmlPlugin.CohtmlSystem
// 0x0040 (0x02E0 - 0x02A0)
class ACohtmlSystem final : public AActor
{
public:
	uint8                                         Pad_2422[0x40];                                    // 0x02A0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlSystem">();
	}
	static class ACohtmlSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlSystem>();
	}
};
static_assert(alignof(ACohtmlSystem) == 0x000008, "Wrong alignment on ACohtmlSystem");
static_assert(sizeof(ACohtmlSystem) == 0x0002E0, "Wrong size on ACohtmlSystem");

// Class CohtmlPlugin.CohtmlSystemEngineSubsystem
// 0x0030 (0x0060 - 0x0030)
class UCohtmlSystemEngineSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_2423[0x30];                                    // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlSystemEngineSubsystem">();
	}
	static class UCohtmlSystemEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlSystemEngineSubsystem>();
	}
};
static_assert(alignof(UCohtmlSystemEngineSubsystem) == 0x000008, "Wrong alignment on UCohtmlSystemEngineSubsystem");
static_assert(sizeof(UCohtmlSystemEngineSubsystem) == 0x000060, "Wrong size on UCohtmlSystemEngineSubsystem");

// Class CohtmlPlugin.WidgetSurfacePartitioningCompositor
// 0x01D0 (0x01F8 - 0x0028)
class UWidgetSurfacePartitioningCompositor final : public UObject
{
public:
	uint8                                         Pad_2424[0x130];                                   // 0x0028(0x0130)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FWidgetDrawData>   CachedWidgetMaterials;                             // 0x0158(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, bool>                     VisibilityMap;                                     // 0x01A8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSurfacePartitioningCompositor">();
	}
	static class UWidgetSurfacePartitioningCompositor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSurfacePartitioningCompositor>();
	}
};
static_assert(alignof(UWidgetSurfacePartitioningCompositor) == 0x000008, "Wrong alignment on UWidgetSurfacePartitioningCompositor");
static_assert(sizeof(UWidgetSurfacePartitioningCompositor) == 0x0001F8, "Wrong size on UWidgetSurfacePartitioningCompositor");
static_assert(offsetof(UWidgetSurfacePartitioningCompositor, CachedWidgetMaterials) == 0x000158, "Member 'UWidgetSurfacePartitioningCompositor::CachedWidgetMaterials' has a wrong offset!");
static_assert(offsetof(UWidgetSurfacePartitioningCompositor, VisibilityMap) == 0x0001A8, "Member 'UWidgetSurfacePartitioningCompositor::VisibilityMap' has a wrong offset!");

// Class CohtmlPlugin.CohtmlWidget
// 0x01A8 (0x0320 - 0x0178)
class UCohtmlWidget : public UWidget
{
public:
	uint8                                         Pad_2425[0x18];                                    // 0x0178(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0190(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCohtmlWidgetTickFunction              WidgetTick;                                        // 0x0198(0x0030)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ReadyForBindings;                                  // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BindingsReleased;                                  // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ScriptingReady;                                    // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ScriptContextCreated;                              // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DOMBuilt;                                          // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FinishLoad;                                        // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& URL)>     OnNavigateTo;                                      // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableComplexCSSSupport;                          // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x024A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlInputPropagationBehaviour              InputPropagationBehaviour;                         // 0x024B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSurfacePartitioning;                           // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunAdvanceConcurrently;                           // 0x024D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlTickGroup                              TickGroup;                                         // 0x024E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2426[0x1];                                     // 0x024F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     PreloadedTextures;                                 // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCohtmlAudioWrapper*                    AudioWrapper;                                      // 0x0260(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2427[0x88];                                    // 0x0268(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class UMultithreadAwareCompositorWrapper*     CohCompositorWrapper;                              // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2428[0x18];                                    // 0x02F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddPreloadedTexture(class UTexture2D* Texture);
	void CreateDataModelFromObject(const class FString& Param_Name, class UObject* Model);
	void CreateDataModelFromStruct(const class FString& Param_Name, const TFieldPath<struct FStructProperty> Struct);
	class UCohtmlJSEvent* CreateJSEvent();
	void Load(const class FString& Path);
	void PreloadTextureAsync(const class FString& AssetPath);
	void PreloadTextureSync(const class FString& AssetPath);
	void Reload();
	void RemoveAllPreloadedTextures();
	void RemoveDataModelFromObject(class UObject* Model);
	bool RemovePreloadedTexture(class UTexture2D* Texture);
	bool RemovePreloadedTextureFromPath(const class FString& AssetPath);
	void SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation);
	void SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings);
	void ShowPaintRects(bool Show);

	ECohtmlInputPropagationBehaviour GetInputPropagationBehaviour() const;
	class UTextureRenderTarget2D* GetRenderTexture() const;
	bool HasRequestedView() const;
	bool IsReadyForBindings() const;
	bool IsReadyToCreateView() const;
	void RemoveDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const;
	void SynchronizeModels() const;
	void TriggerJSEvent(const class FString& Param_Name, class UCohtmlJSEvent* EventData) const;
	void UpdateWholeDataModelFromObject(class UObject* Model) const;
	void UpdateWholeDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlWidget">();
	}
	static class UCohtmlWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlWidget>();
	}
};
static_assert(alignof(UCohtmlWidget) == 0x000008, "Wrong alignment on UCohtmlWidget");
static_assert(sizeof(UCohtmlWidget) == 0x000320, "Wrong size on UCohtmlWidget");
static_assert(offsetof(UCohtmlWidget, Owner) == 0x000190, "Member 'UCohtmlWidget::Owner' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, WidgetTick) == 0x000198, "Member 'UCohtmlWidget::WidgetTick' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, ReadyForBindings) == 0x0001C8, "Member 'UCohtmlWidget::ReadyForBindings' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, BindingsReleased) == 0x0001D8, "Member 'UCohtmlWidget::BindingsReleased' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, ScriptingReady) == 0x0001E8, "Member 'UCohtmlWidget::ScriptingReady' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, ScriptContextCreated) == 0x0001F8, "Member 'UCohtmlWidget::ScriptContextCreated' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, DOMBuilt) == 0x000208, "Member 'UCohtmlWidget::DOMBuilt' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, FinishLoad) == 0x000218, "Member 'UCohtmlWidget::FinishLoad' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, LoadFailed) == 0x000228, "Member 'UCohtmlWidget::LoadFailed' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, OnNavigateTo) == 0x000238, "Member 'UCohtmlWidget::OnNavigateTo' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bEnableComplexCSSSupport) == 0x000248, "Member 'UCohtmlWidget::bEnableComplexCSSSupport' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, Filter) == 0x000249, "Member 'UCohtmlWidget::Filter' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bReceiveInput) == 0x00024A, "Member 'UCohtmlWidget::bReceiveInput' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, InputPropagationBehaviour) == 0x00024B, "Member 'UCohtmlWidget::InputPropagationBehaviour' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bUseSurfacePartitioning) == 0x00024C, "Member 'UCohtmlWidget::bUseSurfacePartitioning' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bRunAdvanceConcurrently) == 0x00024D, "Member 'UCohtmlWidget::bRunAdvanceConcurrently' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, TickGroup) == 0x00024E, "Member 'UCohtmlWidget::TickGroup' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, PreloadedTextures) == 0x000250, "Member 'UCohtmlWidget::PreloadedTextures' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, AudioWrapper) == 0x000260, "Member 'UCohtmlWidget::AudioWrapper' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, CohCompositorWrapper) == 0x0002F0, "Member 'UCohtmlWidget::CohCompositorWrapper' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, URL) == 0x000310, "Member 'UCohtmlWidget::URL' has a wrong offset!");

// Class CohtmlPlugin.CohCustomMaterialDrawer
// 0x0258 (0x0300 - 0x00A8)
class alignas(0x10) UCohCustomMaterialDrawer final : public UActorComponent
{
public:
	uint8                                         Pad_242B[0x148];                                   // 0x00A8(0x0148)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, struct FArrayWrapper_CustomMaterialRenderData> RenderDataInfosMap;                                // 0x01F0(0x0050)(NativeAccessSpecifierPrivate)
	struct FArrayWrapper_CustomMaterialRenderData AddRemoveMaterialTasks;                            // 0x0240(0x0010)(NativeAccessSpecifierPrivate)
	TMap<uint32, struct FCustomEffectDrawData>    ElementIdToDrawDataMap_GameThread;                 // 0x0250(0x0050)(NativeAccessSpecifierPrivate)
	TMap<uint32, struct FCustomEffectDrawData>    ElementIdToDrawDataMap_RenderThread;               // 0x02A0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_242C[0x10];                                    // 0x02F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohCustomMaterialDrawer">();
	}
	static class UCohCustomMaterialDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohCustomMaterialDrawer>();
	}
};
static_assert(alignof(UCohCustomMaterialDrawer) == 0x000010, "Wrong alignment on UCohCustomMaterialDrawer");
static_assert(sizeof(UCohCustomMaterialDrawer) == 0x000300, "Wrong size on UCohCustomMaterialDrawer");
static_assert(offsetof(UCohCustomMaterialDrawer, RenderDataInfosMap) == 0x0001F0, "Member 'UCohCustomMaterialDrawer::RenderDataInfosMap' has a wrong offset!");
static_assert(offsetof(UCohCustomMaterialDrawer, AddRemoveMaterialTasks) == 0x000240, "Member 'UCohCustomMaterialDrawer::AddRemoveMaterialTasks' has a wrong offset!");
static_assert(offsetof(UCohCustomMaterialDrawer, ElementIdToDrawDataMap_GameThread) == 0x000250, "Member 'UCohCustomMaterialDrawer::ElementIdToDrawDataMap_GameThread' has a wrong offset!");
static_assert(offsetof(UCohCustomMaterialDrawer, ElementIdToDrawDataMap_RenderThread) == 0x0002A0, "Member 'UCohCustomMaterialDrawer::ElementIdToDrawDataMap_RenderThread' has a wrong offset!");

// Class CohtmlPlugin.MultithreadAwareCompositorWrapper
// 0x0148 (0x0170 - 0x0028)
class alignas(0x10) UMultithreadAwareCompositorWrapper final : public UObject
{
public:
	uint8                                         Pad_242D[0x140];                                   // 0x0028(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CompositorObject;                                  // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultithreadAwareCompositorWrapper">();
	}
	static class UMultithreadAwareCompositorWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultithreadAwareCompositorWrapper>();
	}
};
static_assert(alignof(UMultithreadAwareCompositorWrapper) == 0x000010, "Wrong alignment on UMultithreadAwareCompositorWrapper");
static_assert(sizeof(UMultithreadAwareCompositorWrapper) == 0x000170, "Wrong size on UMultithreadAwareCompositorWrapper");
static_assert(offsetof(UMultithreadAwareCompositorWrapper, CompositorObject) == 0x000168, "Member 'UMultithreadAwareCompositorWrapper::CompositorObject' has a wrong offset!");

// Class CohtmlPlugin.CohCompositor
// 0x0190 (0x0238 - 0x00A8)
class UCohCompositor final : public UActorComponent
{
public:
	uint8                                         Pad_242E[0x178];                                   // 0x00A8(0x0178)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              DefaultMaterialClass;                              // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_242F[0x10];                                    // 0x0228(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohCompositor">();
	}
	static class UCohCompositor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohCompositor>();
	}
};
static_assert(alignof(UCohCompositor) == 0x000008, "Wrong alignment on UCohCompositor");
static_assert(sizeof(UCohCompositor) == 0x000238, "Wrong size on UCohCompositor");
static_assert(offsetof(UCohCompositor, DefaultMaterialClass) == 0x000220, "Member 'UCohCompositor::DefaultMaterialClass' has a wrong offset!");

}

