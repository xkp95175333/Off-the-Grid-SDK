#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VPUtilities

#include "Basic.hpp"

#include "VPUtilities_classes.hpp"
#include "VPUtilities_parameters.hpp"


namespace SDK
{

// Function VPUtilities.VPContextMenuProvider.OnCreateContextMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVPContextMenuProvider::OnCreateContextMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPContextMenuProvider", "OnCreateContextMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPInteraction.OnActorDroppedFromCarry
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVPInteraction::OnActorDroppedFromCarry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPInteraction", "OnActorDroppedFromCarry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPInteraction.OnActorDroppedFromTransform
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVPInteraction::OnActorDroppedFromTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPInteraction", "OnActorDroppedFromTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPInteraction.OnActorSelectedForTransform
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVPInteraction::OnActorSelectedForTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPInteraction", "OnActorSelectedForTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetAsset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAssetData                       AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPAssetThumbnailWrapperWidget::SetAsset(const struct FAssetData& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "SetAsset");

	Params::VPAssetThumbnailWrapperWidget_SetAsset Parms{};

	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetAssetByObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPAssetThumbnailWrapperWidget::SetAssetByObject(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "SetAssetByObject");

	Params::VPAssetThumbnailWrapperWidget_SetAssetByObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetDisplayMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAssetThumbnailDisplayMode              Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPAssetThumbnailWrapperWidget::SetDisplayMode(EAssetThumbnailDisplayMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "SetDisplayMode");

	Params::VPAssetThumbnailWrapperWidget_SetDisplayMode Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetEditorThumbnailResolution
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        NewResolution                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPAssetThumbnailWrapperWidget::SetEditorThumbnailResolution(const struct FIntPoint& NewResolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "SetEditorThumbnailResolution");

	Params::VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution Parms{};

	Parms.NewResolution = std::move(NewResolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetFallbackBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      NewFallbackBrush                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVPAssetThumbnailWrapperWidget::SetFallbackBrush(const struct FSlateBrush& NewFallbackBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "SetFallbackBrush");

	Params::VPAssetThumbnailWrapperWidget_SetFallbackBrush Parms{};

	Parms.NewFallbackBrush = std::move(NewFallbackBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetEditorAssetWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UVPAssetThumbnailWrapperWidget::GetEditorAssetWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "GetEditorAssetWidget");

	Params::VPAssetThumbnailWrapperWidget_GetEditorAssetWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetEditorThumbnailResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UVPAssetThumbnailWrapperWidget::GetEditorThumbnailResolution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "GetEditorThumbnailResolution");

	Params::VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetFallbackBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UVPAssetThumbnailWrapperWidget::GetFallbackBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPAssetThumbnailWrapperWidget", "GetFallbackBrush");

	Params::VPAssetThumbnailWrapperWidget_GetFallbackBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.EditorDeleteSelectedObjects
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::EditorDeleteSelectedObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "EditorDeleteSelectedObjects");

	Params::VPBlueprintLibrary_EditorDeleteSelectedObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.EditorDuplicate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::EditorDuplicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "EditorDuplicate");

	Params::VPBlueprintLibrary_EditorDuplicate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.EditorRedo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::EditorRedo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "EditorRedo");

	Params::VPBlueprintLibrary_EditorRedo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.EditorUndo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::EditorUndo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "EditorUndo");

	Params::VPBlueprintLibrary_EditorUndo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetEditorViewportTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVPBlueprintLibrary::GetEditorViewportTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetEditorViewportTransform");

	Params::VPBlueprintLibrary_GetEditorViewportTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetEditorVRHeadTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVPBlueprintLibrary::GetEditorVRHeadTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetEditorVRHeadTransform");

	Params::VPBlueprintLibrary_GetEditorVRHeadTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetEditorVRRoomTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVPBlueprintLibrary::GetEditorVRRoomTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetEditorVRRoomTransform");

	Params::VPBlueprintLibrary_GetEditorVRRoomTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetEditorWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UVPBlueprintLibrary::GetEditorWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetEditorWorld");

	Params::VPBlueprintLibrary_GetEditorWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetLeftInteractorLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVPBlueprintLibrary::GetLeftInteractorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetLeftInteractorLocation");

	Params::VPBlueprintLibrary_GetLeftInteractorLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetVirtualProductionRole
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UVPBlueprintLibrary::GetVirtualProductionRole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetVirtualProductionRole");

	Params::VPBlueprintLibrary_GetVirtualProductionRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.GetVREditorLaserHoverLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVPBlueprintLibrary::GetVREditorLaserHoverLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "GetVREditorLaserHoverLocation");

	Params::VPBlueprintLibrary_GetVREditorLaserHoverLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.IsVREditorModeActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::IsVREditorModeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "IsVREditorModeActive");

	Params::VPBlueprintLibrary_IsVREditorModeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.JumpToBookmarkInLevelEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVPBookmark*                      BookMark                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPBlueprintLibrary::JumpToBookmarkInLevelEditor(const class UVPBookmark* BookMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "JumpToBookmarkInLevelEditor");

	Params::VPBlueprintLibrary_JumpToBookmarkInLevelEditor Parms{};

	Parms.BookMark = BookMark;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.Refresh3DEditorViewport
// (Final, Native, Static, Public, BlueprintCallable)

void UVPBlueprintLibrary::Refresh3DEditorViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "Refresh3DEditorViewport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBlueprintLibrary.SetGrabSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPBlueprintLibrary::SetGrabSpeed(const float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "SetGrabSpeed");

	Params::VPBlueprintLibrary_SetGrabSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBlueprintLibrary.SpawnBookmarkAtCurrentLevelEditorPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVPBookmarkCreationContext       CreationContext                                        (ConstParm, Parm, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlattenRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVPBlueprintLibrary::SpawnBookmarkAtCurrentLevelEditorPosition(const TSubclassOf<class AActor> ActorClass, const struct FVPBookmarkCreationContext& CreationContext, const struct FVector& Offset, const bool bFlattenRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "SpawnBookmarkAtCurrentLevelEditorPosition");

	Params::VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition Parms{};

	Parms.ActorClass = ActorClass;
	Parms.CreationContext = std::move(CreationContext);
	Parms.Offset = std::move(Offset);
	Parms.bFlattenRotation = bFlattenRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.SpawnVPTickableActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AVPViewportTickableActorBase>ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AVPViewportTickableActorBase*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPViewportTickableActorBase* UVPBlueprintLibrary::SpawnVPTickableActor(class UObject* ContextObject, const TSubclassOf<class AVPViewportTickableActorBase> ActorClass, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "SpawnVPTickableActor");

	Params::VPBlueprintLibrary_SpawnVPTickableActor Parms{};

	Parms.ContextObject = ContextObject;
	Parms.ActorClass = ActorClass;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPBlueprintLibrary.VPBookmarkSplineMeshIndicatorDisable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USplineMeshComponent*             SplineMesh                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPBlueprintLibrary::VPBookmarkSplineMeshIndicatorDisable(class USplineMeshComponent* SplineMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "VPBookmarkSplineMeshIndicatorDisable");

	Params::VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable Parms{};

	Parms.SplineMesh = SplineMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBlueprintLibrary.VPBookmarkSplineMeshIndicatorSetStartAndEnd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USplineMeshComponent*             SplineMesh                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPBlueprintLibrary::VPBookmarkSplineMeshIndicatorSetStartAndEnd(class USplineMeshComponent* SplineMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPBlueprintLibrary", "VPBookmarkSplineMeshIndicatorSetStartAndEnd");

	Params::VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd Parms{};

	Parms.SplineMesh = SplineMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPViewportTickableActorBase.EditorDestroyed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AVPViewportTickableActorBase::EditorDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPViewportTickableActorBase", "EditorDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPViewportTickableActorBase.EditorLockLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSetLockLocation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPViewportTickableActorBase::EditorLockLocation(bool bSetLockLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPViewportTickableActorBase", "EditorLockLocation");

	Params::VPViewportTickableActorBase_EditorLockLocation Parms{};

	Parms.bSetLockLocation = bSetLockLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPViewportTickableActorBase.EditorTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPViewportTickableActorBase::EditorTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPViewportTickableActorBase", "EditorTick");

	Params::VPViewportTickableActorBase_EditorTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.GenerateBookmarkName_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::GenerateBookmarkName_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "GenerateBookmarkName_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.HideBookmarkSplineMeshIndicator_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::HideBookmarkSplineMeshIndicator_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "HideBookmarkSplineMeshIndicator_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.OnActorDroppedFromCarry_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::OnActorDroppedFromCarry_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "OnActorDroppedFromCarry_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.OnActorDroppedFromTransform_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::OnActorDroppedFromTransform_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "OnActorDroppedFromTransform_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.OnActorSelectedForTransform_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::OnActorSelectedForTransform_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "OnActorSelectedForTransform_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.OnBookmarkActivation_Implementation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVPBookmark*                      BookMark                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActivate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPBookmarkActor::OnBookmarkActivation_Implementation(class UVPBookmark* BookMark, bool bActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "OnBookmarkActivation_Implementation");

	Params::VPBookmarkActor_OnBookmarkActivation_Implementation Parms{};

	Parms.BookMark = BookMark;
	Parms.bActivate = bActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.OnBookmarkChanged_Implementation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVPBookmark*                      BookMark                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPBookmarkActor::OnBookmarkChanged_Implementation(class UVPBookmark* BookMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "OnBookmarkChanged_Implementation");

	Params::VPBookmarkActor_OnBookmarkChanged_Implementation Parms{};

	Parms.BookMark = BookMark;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.UpdateBookmarkColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPBookmarkActor::UpdateBookmarkColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "UpdateBookmarkColor");

	Params::VPBookmarkActor_UpdateBookmarkColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPBookmarkActor.UpdateBookmarkSplineMeshIndicator_Implementation
// (Final, Native, Public, BlueprintCallable)

void AVPBookmarkActor::UpdateBookmarkSplineMeshIndicator_Implementation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPBookmarkActor", "UpdateBookmarkSplineMeshIndicator_Implementation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RigTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVPCameraRigSpawnParams          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ACameraRig_Rail*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraRig_Rail* UVPCameraBlueprintLibrary::SpawnCameraRigFromActors(class UObject* WorldContextObject, const struct FTransform& RigTransform, const TArray<class AActor*>& Actors, const struct FVPCameraRigSpawnParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPCameraBlueprintLibrary", "SpawnCameraRigFromActors");

	Params::VPCameraBlueprintLibrary_SpawnCameraRigFromActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RigTransform = std::move(RigTransform);
	Parms.Actors = std::move(Actors);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromPoints
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RigTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Points                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVPCameraRigSpawnParams          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ACameraRig_Rail*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraRig_Rail* UVPCameraBlueprintLibrary::SpawnCameraRigFromPoints(class UObject* WorldContextObject, const struct FTransform& RigTransform, const TArray<struct FVector>& Points, const struct FVPCameraRigSpawnParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPCameraBlueprintLibrary", "SpawnCameraRigFromPoints");

	Params::VPCameraBlueprintLibrary_SpawnCameraRigFromPoints Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RigTransform = std::move(RigTransform);
	Parms.Points = std::move(Points);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromSelectedActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RigTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVPCameraRigSpawnParams          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ACameraRig_Rail*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraRig_Rail* UVPCameraBlueprintLibrary::SpawnCameraRigFromSelectedActors(class UObject* WorldContextObject, const struct FTransform& RigTransform, const struct FVPCameraRigSpawnParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPCameraBlueprintLibrary", "SpawnCameraRigFromSelectedActors");

	Params::VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RigTransform = std::move(RigTransform);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPCameraBlueprintLibrary.SpawnDollyTrackFromPoints
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               Points                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ESplinePointType                        InterpType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACameraRig_Rail*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraRig_Rail* UVPCameraBlueprintLibrary::SpawnDollyTrackFromPoints(class UObject* WorldContextObject, const TArray<struct FTransform>& Points, ESplinePointType InterpType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPCameraBlueprintLibrary", "SpawnDollyTrackFromPoints");

	Params::VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Points = std::move(Points);
	Parms.InterpType = InterpType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPCameraBlueprintLibrary.SpawnDollyTrackFromPointsSmooth
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               Points                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ESplinePointType                        InterpType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACameraRig_Rail*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraRig_Rail* UVPCameraBlueprintLibrary::SpawnDollyTrackFromPointsSmooth(class UObject* WorldContextObject, const TArray<struct FTransform>& Points, ESplinePointType InterpType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPCameraBlueprintLibrary", "SpawnDollyTrackFromPointsSmooth");

	Params::VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Points = std::move(Points);
	Parms.InterpType = InterpType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.FullScreenUserWidgetActor.GetUserWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AFullScreenUserWidgetActor::GetUserWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FullScreenUserWidgetActor", "GetUserWidget");

	Params::FullScreenUserWidgetActor_GetUserWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPGameMode.GetRootActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVPRootActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPRootActor* AVPGameMode::GetRootActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPGameMode", "GetRootActor");

	Params::VPGameMode_GetRootActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPUtilities.VPRenderingBlueprintLibrary.GenerateSceneViewExtensionIsActiveFunctorForViewportType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSceneViewExtensionIsActiveFunctorOutIsActiveFunction                                    (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bPIE                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSIE                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEditorActive                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGamePrimary                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPRenderingBlueprintLibrary::GenerateSceneViewExtensionIsActiveFunctorForViewportType(struct FSceneViewExtensionIsActiveFunctor* OutIsActiveFunction, bool bPIE, bool bSIE, bool bEditorActive, bool bGamePrimary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPRenderingBlueprintLibrary", "GenerateSceneViewExtensionIsActiveFunctorForViewportType");

	Params::VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType Parms{};

	Parms.bPIE = bPIE;
	Parms.bSIE = bSIE;
	Parms.bEditorActive = bEditorActive;
	Parms.bGamePrimary = bGamePrimary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIsActiveFunction != nullptr)
		*OutIsActiveFunction = std::move(Parms.OutIsActiveFunction);
}


// Function VPUtilities.VPRootActor.GetCineCameraActor
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ACineCameraActor*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACineCameraActor* AVPRootActor::GetCineCameraActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPRootActor", "GetCineCameraActor");

	Params::VPRootActor_GetCineCameraActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

