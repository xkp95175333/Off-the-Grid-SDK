#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DomeGadget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DomeGadget.BP_DomeGadget_C
// 0x0058 (0x0358 - 0x0300)
class ABP_DomeGadget_C final : public AGzDamageableActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGzMarkerComponent*                     GzMarker;                                          // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gadget;                                            // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_DomeShield_C*                       DomeShield;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  OwningCharacter;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnGadgeHealthUpdate_Dispatcher;                    // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_DomeShield_BodyPartAbilityData_C*   GadgetBodyPartAbilityData;                         // 0x0340(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Gadget_Lifespan;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gadget_Max_Health;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnDeath(bool HasDeathHitPoint, const struct FVector& DeathHitPoint);
	void BP_OnHealthChange(float Health);
	void CreateDestroyFX();
	void CreateDetonationFX();
	void DetonateShield();
	void ExecuteUbergraph_BP_DomeGadget(int32 EntryPoint);
	void Init_Gadget_Health_and_Lifespan();
	void OnGadgeHealthUpdate_Dispatcher__DelegateSignature();
	void OnShieldDestroyed(class AActor* DestroyedActor);
	void OnShieldDying();
	void ReceiveBeginPlay();
	void SetOwningCharacter();
	void SpawnDomeShield();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DomeGadget_C">();
	}
	static class ABP_DomeGadget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DomeGadget_C>();
	}
};
static_assert(alignof(ABP_DomeGadget_C) == 0x000008, "Wrong alignment on ABP_DomeGadget_C");
static_assert(sizeof(ABP_DomeGadget_C) == 0x000358, "Wrong size on ABP_DomeGadget_C");
static_assert(offsetof(ABP_DomeGadget_C, UberGraphFrame) == 0x000300, "Member 'ABP_DomeGadget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, GzMarker) == 0x000308, "Member 'ABP_DomeGadget_C::GzMarker' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, Gadget) == 0x000310, "Member 'ABP_DomeGadget_C::Gadget' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, Root) == 0x000318, "Member 'ABP_DomeGadget_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, DomeShield) == 0x000320, "Member 'ABP_DomeGadget_C::DomeShield' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, OwningCharacter) == 0x000328, "Member 'ABP_DomeGadget_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, OnGadgeHealthUpdate_Dispatcher) == 0x000330, "Member 'ABP_DomeGadget_C::OnGadgeHealthUpdate_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, GadgetBodyPartAbilityData) == 0x000340, "Member 'ABP_DomeGadget_C::GadgetBodyPartAbilityData' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, Gadget_Lifespan) == 0x000348, "Member 'ABP_DomeGadget_C::Gadget_Lifespan' has a wrong offset!");
static_assert(offsetof(ABP_DomeGadget_C, Gadget_Max_Health) == 0x000350, "Member 'ABP_DomeGadget_C::Gadget_Max_Health' has a wrong offset!");

}

