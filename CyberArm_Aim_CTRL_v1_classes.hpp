#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CyberArm_Aim_CTRL_v1

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass CyberArm_Aim_CTRL_v1.CyberArm_Aim_CTRL_v1_C
// 0x0060 (0x0B08 - 0x0AA8)
class UCyberArm_Aim_CTRL_v1_C final : public UControlRig
{
public:
	struct FVector                                AimPoint;                                          // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kinetic_Right;                                     // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kinetic_Left;                                      // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D19[0x6];                                     // 0x0ACA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Yaw;                                               // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Spine_bones;                                       // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Spine_weight;                                      // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Grapple_Right;                                     // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Gpapple_Left;                                      // 0x0B01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CyberArm_Aim_CTRL_v1_C">();
	}
	static class UCyberArm_Aim_CTRL_v1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCyberArm_Aim_CTRL_v1_C>();
	}
};
static_assert(alignof(UCyberArm_Aim_CTRL_v1_C) == 0x000008, "Wrong alignment on UCyberArm_Aim_CTRL_v1_C");
static_assert(sizeof(UCyberArm_Aim_CTRL_v1_C) == 0x000B08, "Wrong size on UCyberArm_Aim_CTRL_v1_C");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, AimPoint) == 0x000AA8, "Member 'UCyberArm_Aim_CTRL_v1_C::AimPoint' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Distance) == 0x000AC0, "Member 'UCyberArm_Aim_CTRL_v1_C::Distance' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Kinetic_Right) == 0x000AC8, "Member 'UCyberArm_Aim_CTRL_v1_C::Kinetic_Right' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Kinetic_Left) == 0x000AC9, "Member 'UCyberArm_Aim_CTRL_v1_C::Kinetic_Left' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Yaw) == 0x000AD0, "Member 'UCyberArm_Aim_CTRL_v1_C::Yaw' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Pitch) == 0x000AD8, "Member 'UCyberArm_Aim_CTRL_v1_C::Pitch' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Spine_bones) == 0x000AE0, "Member 'UCyberArm_Aim_CTRL_v1_C::Spine_bones' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Spine_weight) == 0x000AF0, "Member 'UCyberArm_Aim_CTRL_v1_C::Spine_weight' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Grapple_Right) == 0x000B00, "Member 'UCyberArm_Aim_CTRL_v1_C::Grapple_Right' has a wrong offset!");
static_assert(offsetof(UCyberArm_Aim_CTRL_v1_C, Gpapple_Left) == 0x000B01, "Member 'UCyberArm_Aim_CTRL_v1_C::Gpapple_Left' has a wrong offset!");

}

