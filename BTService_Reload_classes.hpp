#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_Reload

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTService_Reload.BTService_Reload_C
// 0x0038 (0x00D0 - 0x0098)
class UBTService_Reload_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         ReloadingTimeInCombatIfTargetInvisible;            // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6677[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 TargetVisible;                                     // 0x00A8(0x0028)(Edit, BlueprintVisible)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void OnFail_07FEFFC245F67282B4458EA0C452ABC6();
	void OnEnd_07FEFFC245F67282B4458EA0C452ABC6();
	void OnCancel_07FEFFC245F67282B4458EA0C452ABC6();
	void Get_Ammo_in_Clip(class APawn* Pawn, int32* BulletsInClip);
	void ExecuteUbergraph_BTService_Reload(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTService_Reload_C">();
	}
	static class UBTService_Reload_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_Reload_C>();
	}
};
static_assert(alignof(UBTService_Reload_C) == 0x000008, "Wrong alignment on UBTService_Reload_C");
static_assert(sizeof(UBTService_Reload_C) == 0x0000D0, "Wrong size on UBTService_Reload_C");
static_assert(offsetof(UBTService_Reload_C, UberGraphFrame) == 0x000098, "Member 'UBTService_Reload_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTService_Reload_C, ReloadingTimeInCombatIfTargetInvisible) == 0x0000A0, "Member 'UBTService_Reload_C::ReloadingTimeInCombatIfTargetInvisible' has a wrong offset!");
static_assert(offsetof(UBTService_Reload_C, TargetVisible) == 0x0000A8, "Member 'UBTService_Reload_C::TargetVisible' has a wrong offset!");

}

