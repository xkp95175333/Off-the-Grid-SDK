#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CohtmlPlugin

#include "Basic.hpp"

#include "CohtmlPlugin_classes.hpp"
#include "CohtmlPlugin_parameters.hpp"


namespace SDK
{

// Function CohtmlPlugin.CohtmlBaseComponent.AddPreloadedTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Param_Texture                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::AddPreloadedTexture(class UTexture2D* Param_Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "AddPreloadedTexture");

	Params::CohtmlBaseComponent_AddPreloadedTexture Parms{};

	Parms.Param_Texture = Param_Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.BeginDebugFrameSave
// (Final, Native, Public, BlueprintCallable)

void UCohtmlBaseComponent::BeginDebugFrameSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "BeginDebugFrameSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.CreateDataModelFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::CreateDataModelFromObject(const class FString& Param_Name, class UObject* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "CreateDataModelFromObject");

	Params::CohtmlBaseComponent_CreateDataModelFromObject Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.CreateDataModelFromStruct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::CreateDataModelFromStruct(const class FString& Param_Name, const TFieldPath<struct FStructProperty> Struct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "CreateDataModelFromStruct");

	Params::CohtmlBaseComponent_CreateDataModelFromStruct Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.CreateJSEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCohtmlJSEvent* UCohtmlBaseComponent::CreateJSEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "CreateJSEvent");

	Params::CohtmlBaseComponent_CreateJSEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.DebugSaveNextFrame
// (Final, Native, Public, BlueprintCallable)

void UCohtmlBaseComponent::DebugSaveNextFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "DebugSaveNextFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.EnableDelayedUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::EnableDelayedUpdate(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "EnableDelayedUpdate");

	Params::CohtmlBaseComponent_EnableDelayedUpdate Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.EnableRendering
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::EnableRendering(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "EnableRendering");

	Params::CohtmlBaseComponent_EnableRendering Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.EndDebugFrameSave
// (Final, Native, Public, BlueprintCallable)

void UCohtmlBaseComponent::EndDebugFrameSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "EndDebugFrameSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.EnsureMeshData
// (Native, Public, BlueprintCallable)
// Parameters:
// ECohtmlComponentMeshInit                MeshInitialization                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::EnsureMeshData(ECohtmlComponentMeshInit MeshInitialization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "EnsureMeshData");

	Params::CohtmlBaseComponent_EnsureMeshData Parms{};

	Parms.MeshInitialization = MeshInitialization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.Load
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::Load(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "Load");

	Params::CohtmlBaseComponent_Load Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.PreloadTextureAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::PreloadTextureAsync(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "PreloadTextureAsync");

	Params::CohtmlBaseComponent_PreloadTextureAsync Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.PreloadTextureSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::PreloadTextureSync(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "PreloadTextureSync");

	Params::CohtmlBaseComponent_PreloadTextureSync Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RegisterForEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           JSEventName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::RegisterForEvent(const class FString& JSEventName, TDelegate<void()> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RegisterForEvent");

	Params::CohtmlBaseComponent_RegisterForEvent Parms{};

	Parms.JSEventName = std::move(JSEventName);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.Reload
// (Final, Native, Public, BlueprintCallable)

void UCohtmlBaseComponent::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RemoveAllPreloadedTextures
// (Final, Native, Public, BlueprintCallable)

void UCohtmlBaseComponent::RemoveAllPreloadedTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RemoveAllPreloadedTextures");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RemoveDataModelFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::RemoveDataModelFromObject(class UObject* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RemoveDataModelFromObject");

	Params::CohtmlBaseComponent_RemoveDataModelFromObject Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RemovePreloadedTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Param_Texture                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::RemovePreloadedTexture(class UTexture2D* Param_Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RemovePreloadedTexture");

	Params::CohtmlBaseComponent_RemovePreloadedTexture Parms{};

	Parms.Param_Texture = Param_Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RemovePreloadedTextureFromPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::RemovePreloadedTextureFromPath(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RemovePreloadedTextureFromPath");

	Params::CohtmlBaseComponent_RemovePreloadedTextureFromPath Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.Resize
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::Resize(int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "Resize");

	Params::CohtmlBaseComponent_Resize Parms{};

	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.ResizeRenderTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::ResizeRenderTarget(int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "ResizeRenderTarget");

	Params::CohtmlBaseComponent_ResizeRenderTarget Parms{};

	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.SetSoundAttenuation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSoundAttenuationSettings        Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "SetSoundAttenuation");

	Params::CohtmlBaseComponent_SetSoundAttenuation Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.ShowPaintRects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::ShowPaintRects(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "ShowPaintRects");

	Params::CohtmlBaseComponent_ShowPaintRects Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.HasRequestedView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::HasRequestedView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "HasRequestedView");

	Params::CohtmlBaseComponent_HasRequestedView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.IsReadyForBindings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::IsReadyForBindings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "IsReadyForBindings");

	Params::CohtmlBaseComponent_IsReadyForBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.IsReadyToCreateView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlBaseComponent::IsReadyToCreateView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "IsReadyToCreateView");

	Params::CohtmlBaseComponent_IsReadyToCreateView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBaseComponent.RemoveDataModelFromStruct
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::RemoveDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "RemoveDataModelFromStruct");

	Params::CohtmlBaseComponent_RemoveDataModelFromStruct Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.SynchronizeModels
// (Final, Native, Public, BlueprintCallable, Const)

void UCohtmlBaseComponent::SynchronizeModels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "SynchronizeModels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.TriggerJSEvent
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCohtmlJSEvent*                   EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::TriggerJSEvent(const class FString& Param_Name, class UCohtmlJSEvent* EventData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "TriggerJSEvent");

	Params::CohtmlBaseComponent_TriggerJSEvent Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.UpdateWholeDataModelFromObject
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::UpdateWholeDataModelFromObject(class UObject* Model) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "UpdateWholeDataModelFromObject");

	Params::CohtmlBaseComponent_UpdateWholeDataModelFromObject Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBaseComponent.UpdateWholeDataModelFromStruct
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBaseComponent::UpdateWholeDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlBaseComponent", "UpdateWholeDataModelFromStruct");

	Params::CohtmlBaseComponent_UpdateWholeDataModelFromStruct Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Arg                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ArrayType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddArray(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg, int32 ArrayType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddArray");

	Params::CohtmlBlueprintFunctionLibrary_AddArray Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = std::move(Arg);
	Parms.ArrayType = ArrayType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddArrayOfStructs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Arg                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddArrayOfStructs(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddArrayOfStructs");

	Params::CohtmlBlueprintFunctionLibrary_AddArrayOfStructs Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddBool(class UCohtmlJSEvent* JSEvent, bool Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddBool");

	Params::CohtmlBlueprintFunctionLibrary_AddBool Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddByte(class UCohtmlJSEvent* JSEvent, uint8 Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddByte");

	Params::CohtmlBlueprintFunctionLibrary_AddByte Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddFloat(class UCohtmlJSEvent* JSEvent, float Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddFloat");

	Params::CohtmlBlueprintFunctionLibrary_AddFloat Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddInt32(class UCohtmlJSEvent* JSEvent, int32 Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddInt32");

	Params::CohtmlBlueprintFunctionLibrary_AddInt32 Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Arg                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddObject(class UCohtmlJSEvent* JSEvent, class UObject* Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddObject");

	Params::CohtmlBlueprintFunctionLibrary_AddObject Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Arg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddString(class UCohtmlJSEvent* JSEvent, const class FString& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddString");

	Params::CohtmlBlueprintFunctionLibrary_AddString Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddStructArg
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FStructProperty>      Arg                                                    (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::AddStructArg(class UCohtmlJSEvent* JSEvent, const TFieldPath<struct FStructProperty> Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "AddStructArg");

	Params::CohtmlBlueprintFunctionLibrary_AddStructArg Parms{};

	Parms.JSEvent = JSEvent;
	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.CreateJSEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCohtmlJSEvent*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCohtmlJSEvent* UCohtmlBlueprintFunctionLibrary::CreateJSEvent(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "CreateJSEvent");

	Params::CohtmlBlueprintFunctionLibrary_CreateJSEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.TriggerJSEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCohtmlBaseComponent*             Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCohtmlJSEvent*                   JSEvent                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlBlueprintFunctionLibrary::TriggerJSEvent(class UCohtmlBaseComponent* Component, const class FString& EventName, class UCohtmlJSEvent* JSEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CohtmlBlueprintFunctionLibrary", "TriggerJSEvent");

	Params::CohtmlBlueprintFunctionLibrary_TriggerJSEvent Parms{};

	Parms.Component = Component;
	Parms.EventName = std::move(EventName);
	Parms.JSEvent = JSEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlGameHUD.SetupView
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PageUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableComplexCSSSupport                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDelayedUpdate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReceiveInput                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteCommandProcessingWithLayout                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSurfacePartitioning                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRunAdvanceConcurrently                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlGameHUD::SetupView(const class FString& PageUrl, bool bEnableComplexCSSSupport, bool bDelayedUpdate, bool bReceiveInput, bool bExecuteCommandProcessingWithLayout, bool bUseSurfacePartitioning, bool bRunAdvanceConcurrently)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlGameHUD", "SetupView");

	Params::CohtmlGameHUD_SetupView Parms{};

	Parms.PageUrl = std::move(PageUrl);
	Parms.bEnableComplexCSSSupport = bEnableComplexCSSSupport;
	Parms.bDelayedUpdate = bDelayedUpdate;
	Parms.bReceiveInput = bReceiveInput;
	Parms.bExecuteCommandProcessingWithLayout = bExecuteCommandProcessingWithLayout;
	Parms.bUseSurfacePartitioning = bUseSurfacePartitioning;
	Parms.bRunAdvanceConcurrently = bRunAdvanceConcurrently;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.AlwaysAcceptMouseInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAccept                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::AlwaysAcceptMouseInput(bool bAccept)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "AlwaysAcceptMouseInput");

	Params::CohtmlInputActor_AlwaysAcceptMouseInput Parms{};

	Parms.bAccept = bAccept;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureAddress                         AddressMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECohtmlInputWidgetRaycastQuality        RaycastQuality                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::Initialize(ECollisionChannel CollisionChannel, ETextureAddress AddressMode, ECohtmlInputWidgetRaycastQuality RaycastQuality, int32 UVChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "Initialize");

	Params::CohtmlInputActor_Initialize Parms{};

	Parms.CollisionChannel = CollisionChannel;
	Parms.AddressMode = AddressMode;
	Parms.RaycastQuality = RaycastQuality;
	Parms.UVChannel = UVChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.SetCohtmlInputFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    FocusUI                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::SetCohtmlInputFocus(bool FocusUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "SetCohtmlInputFocus");

	Params::CohtmlInputActor_SetCohtmlInputFocus Parms{};

	Parms.FocusUI = FocusUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.SetCohtmlViewFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCohtmlBaseComponent*             NewFocusedView                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::SetCohtmlViewFocus(class UCohtmlBaseComponent* NewFocusedView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "SetCohtmlViewFocus");

	Params::CohtmlInputActor_SetCohtmlViewFocus Parms{};

	Parms.NewFocusedView = NewFocusedView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.SetInputPropagationBehaviour
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECohtmlInputPropagationBehaviour        Propagation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "SetInputPropagationBehaviour");

	Params::CohtmlInputActor_SetInputPropagationBehaviour Parms{};

	Parms.Propagation = Propagation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.SetLineTraceMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECohtmlInputWidgetLineTraceMode         Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::SetLineTraceMode(ECohtmlInputWidgetLineTraceMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "SetLineTraceMode");

	Params::CohtmlInputActor_SetLineTraceMode Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.SetupInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCohtmlBaseComponent*             CohtmlHUD                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureAddress                         AddressMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECohtmlInputWidgetRaycastQuality        RaycastQuality                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFocusUI                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysAcceptMouseInput                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACohtmlInputActor::SetupInput(class UCohtmlBaseComponent* CohtmlHUD, ECollisionChannel CollisionChannel, ETextureAddress AddressMode, ECohtmlInputWidgetRaycastQuality RaycastQuality, int32 UVChannel, bool bFocusUI, bool bAlwaysAcceptMouseInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "SetupInput");

	Params::CohtmlInputActor_SetupInput Parms{};

	Parms.CohtmlHUD = CohtmlHUD;
	Parms.CollisionChannel = CollisionChannel;
	Parms.AddressMode = AddressMode;
	Parms.RaycastQuality = RaycastQuality;
	Parms.UVChannel = UVChannel;
	Parms.bFocusUI = bFocusUI;
	Parms.bAlwaysAcceptMouseInput = bAlwaysAcceptMouseInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.ToggleCohtmlInputFocus
// (Final, Native, Public, BlueprintCallable)

void ACohtmlInputActor::ToggleCohtmlInputFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "ToggleCohtmlInputFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlInputActor.GetInputPropagationBehaviour
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECohtmlInputPropagationBehaviour        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECohtmlInputPropagationBehaviour ACohtmlInputActor::GetInputPropagationBehaviour() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "GetInputPropagationBehaviour");

	Params::CohtmlInputActor_GetInputPropagationBehaviour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlInputActor.IsCohtmlFocused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACohtmlInputActor::IsCohtmlFocused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlInputActor", "IsCohtmlFocused");

	Params::CohtmlInputActor_IsCohtmlFocused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           Array                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddArray(const TArray<int32>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddArray");

	Params::CohtmlJSEvent_AddArray Parms{};

	Parms.Array = std::move(Array);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddBool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddBool(bool B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddBool");

	Params::CohtmlJSEvent_AddBool Parms{};

	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddByte
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   byte                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddByte(uint8 byte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddByte");

	Params::CohtmlJSEvent_AddByte Parms{};

	Parms.byte = byte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddFloat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Fl                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddFloat(float Fl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddFloat");

	Params::CohtmlJSEvent_AddFloat Parms{};

	Parms.Fl = Fl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddInt32
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Integer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddInt32(int32 Integer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddInt32");

	Params::CohtmlJSEvent_AddInt32 Parms{};

	Parms.Integer = Integer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddName(const class FName& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddName");

	Params::CohtmlJSEvent_AddName Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddObject(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddObject");

	Params::CohtmlJSEvent_AddObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddString(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddString");

	Params::CohtmlJSEvent_AddString Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddStructArg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TFieldPath<struct FStructProperty>      Arg                                                    (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddStructArg(const TFieldPath<struct FStructProperty> Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddStructArg");

	Params::CohtmlJSEvent_AddStructArg Parms{};

	Parms.Arg = Arg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlJSEvent.AddText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCohtmlJSEvent::AddText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlJSEvent", "AddText");

	Params::CohtmlJSEvent_AddText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.AddPreloadedTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::AddPreloadedTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "AddPreloadedTexture");

	Params::CohtmlWidget_AddPreloadedTexture Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.CreateDataModelFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::CreateDataModelFromObject(const class FString& Param_Name, class UObject* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "CreateDataModelFromObject");

	Params::CohtmlWidget_CreateDataModelFromObject Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.CreateDataModelFromStruct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::CreateDataModelFromStruct(const class FString& Param_Name, const TFieldPath<struct FStructProperty> Struct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "CreateDataModelFromStruct");

	Params::CohtmlWidget_CreateDataModelFromStruct Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.CreateJSEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCohtmlJSEvent*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCohtmlJSEvent* UCohtmlWidget::CreateJSEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "CreateJSEvent");

	Params::CohtmlWidget_CreateJSEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.Load
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::Load(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "Load");

	Params::CohtmlWidget_Load Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.PreloadTextureAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::PreloadTextureAsync(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "PreloadTextureAsync");

	Params::CohtmlWidget_PreloadTextureAsync Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.PreloadTextureSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::PreloadTextureSync(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "PreloadTextureSync");

	Params::CohtmlWidget_PreloadTextureSync Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.Reload
// (Final, Native, Public, BlueprintCallable)

void UCohtmlWidget::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.RemoveAllPreloadedTextures
// (Final, Native, Public, BlueprintCallable)

void UCohtmlWidget::RemoveAllPreloadedTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "RemoveAllPreloadedTextures");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.RemoveDataModelFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::RemoveDataModelFromObject(class UObject* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "RemoveDataModelFromObject");

	Params::CohtmlWidget_RemoveDataModelFromObject Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.RemovePreloadedTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlWidget::RemovePreloadedTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "RemovePreloadedTexture");

	Params::CohtmlWidget_RemovePreloadedTexture Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.RemovePreloadedTextureFromPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlWidget::RemovePreloadedTextureFromPath(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "RemovePreloadedTextureFromPath");

	Params::CohtmlWidget_RemovePreloadedTextureFromPath Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.SetInputPropagationBehaviour
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECohtmlInputPropagationBehaviour        Propagation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "SetInputPropagationBehaviour");

	Params::CohtmlWidget_SetInputPropagationBehaviour Parms{};

	Parms.Propagation = Propagation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.SetSoundAttenuation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSoundAttenuationSettings        Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCohtmlWidget::SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "SetSoundAttenuation");

	Params::CohtmlWidget_SetSoundAttenuation Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.ShowPaintRects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::ShowPaintRects(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "ShowPaintRects");

	Params::CohtmlWidget_ShowPaintRects Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.GetInputPropagationBehaviour
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECohtmlInputPropagationBehaviour        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECohtmlInputPropagationBehaviour UCohtmlWidget::GetInputPropagationBehaviour() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "GetInputPropagationBehaviour");

	Params::CohtmlWidget_GetInputPropagationBehaviour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.GetRenderTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UCohtmlWidget::GetRenderTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "GetRenderTexture");

	Params::CohtmlWidget_GetRenderTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.HasRequestedView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlWidget::HasRequestedView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "HasRequestedView");

	Params::CohtmlWidget_HasRequestedView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.IsReadyForBindings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlWidget::IsReadyForBindings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "IsReadyForBindings");

	Params::CohtmlWidget_IsReadyForBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.IsReadyToCreateView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCohtmlWidget::IsReadyToCreateView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "IsReadyToCreateView");

	Params::CohtmlWidget_IsReadyToCreateView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CohtmlPlugin.CohtmlWidget.RemoveDataModelFromStruct
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::RemoveDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "RemoveDataModelFromStruct");

	Params::CohtmlWidget_RemoveDataModelFromStruct Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.SynchronizeModels
// (Final, Native, Public, BlueprintCallable, Const)

void UCohtmlWidget::SynchronizeModels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "SynchronizeModels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.TriggerJSEvent
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCohtmlJSEvent*                   EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::TriggerJSEvent(const class FString& Param_Name, class UCohtmlJSEvent* EventData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "TriggerJSEvent");

	Params::CohtmlWidget_TriggerJSEvent Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.UpdateWholeDataModelFromObject
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                          Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::UpdateWholeDataModelFromObject(class UObject* Model) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "UpdateWholeDataModelFromObject");

	Params::CohtmlWidget_UpdateWholeDataModelFromObject Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CohtmlPlugin.CohtmlWidget.UpdateWholeDataModelFromStruct
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TFieldPath<struct FStructProperty>      Struct                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCohtmlWidget::UpdateWholeDataModelFromStruct(const TFieldPath<struct FStructProperty> Struct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CohtmlWidget", "UpdateWholeDataModelFromStruct");

	Params::CohtmlWidget_UpdateWholeDataModelFromStruct Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

