#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Lighting_Utility

#include "Basic.hpp"

#include "BPFL_Lighting_Utility_classes.hpp"
#include "BPFL_Lighting_Utility_parameters.hpp"


namespace SDK
{

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create Bulb Mesh
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Self_Reference                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      Bulb_Mesh                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Bulb_Light_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Bulb_Light_Rotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Bulb_Mesh_Offset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Bulb_Mesh_Rotation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Bulb_Mesh_Scale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Bulb_Mesh_Reference                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Create_Bulb_Mesh(class UObject* Self_Reference, class UStaticMesh* Bulb_Mesh, const struct FVector& Bulb_Light_Location, const struct FRotator& Bulb_Light_Rotation, const struct FVector& Bulb_Mesh_Offset, const struct FRotator& Bulb_Mesh_Rotation, const struct FVector& Bulb_Mesh_Scale, class UObject* __WorldContext, class UPrimitiveComponent** Bulb_Mesh_Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Create Bulb Mesh");

	Params::BPFL_Lighting_Utility_C_Create_Bulb_Mesh Parms{};

	Parms.Self_Reference = Self_Reference;
	Parms.Bulb_Mesh = Bulb_Mesh;
	Parms.Bulb_Light_Location = std::move(Bulb_Light_Location);
	Parms.Bulb_Light_Rotation = std::move(Bulb_Light_Rotation);
	Parms.Bulb_Mesh_Offset = std::move(Bulb_Mesh_Offset);
	Parms.Bulb_Mesh_Rotation = std::move(Bulb_Mesh_Rotation);
	Parms.Bulb_Mesh_Scale = std::move(Bulb_Mesh_Scale);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Bulb_Mesh_Reference != nullptr)
		*Bulb_Mesh_Reference = Parms.Bulb_Mesh_Reference;
}


// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create LED Diode Mesh
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Self_Reference                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      LED_Diode_Mesh                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_X_Duplications                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  X_Spacing                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Y_Duplications                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y_Spacing                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              LED_Didoe_Mesh_Reference                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Create_LED_Diode_Mesh(class UObject* Self_Reference, class UStaticMesh* LED_Diode_Mesh, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, int32 Number_of_X_Duplications, double X_Spacing, int32 Number_of_Y_Duplications, double Y_Spacing, class UObject* __WorldContext, class UPrimitiveComponent** LED_Didoe_Mesh_Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Create LED Diode Mesh");

	Params::BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh Parms{};

	Parms.Self_Reference = Self_Reference;
	Parms.LED_Diode_Mesh = LED_Diode_Mesh;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.Number_of_X_Duplications = Number_of_X_Duplications;
	Parms.X_Spacing = X_Spacing;
	Parms.Number_of_Y_Duplications = Number_of_Y_Duplications;
	Parms.Y_Spacing = Y_Spacing;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LED_Didoe_Mesh_Reference != nullptr)
		*LED_Didoe_Mesh_Reference = Parms.LED_Didoe_Mesh_Reference;
}


// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create Light Component
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Self_Reference                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Light_Type                            Light_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Light_Location                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Light_Rotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USpotLightComponent*              Spot_Light_Reference                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPointLightComponent*             Point_Light_Reference                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class URectLightComponent*              Rect_Light_Reference                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Create_Light_Component(class UObject* Self_Reference, E_Light_Type Light_Type, const struct FVector& Light_Location, const struct FRotator& Light_Rotation, class UObject* __WorldContext, class USpotLightComponent** Spot_Light_Reference, class UPointLightComponent** Point_Light_Reference, class URectLightComponent** Rect_Light_Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Create Light Component");

	Params::BPFL_Lighting_Utility_C_Create_Light_Component Parms{};

	Parms.Self_Reference = Self_Reference;
	Parms.Light_Type = Light_Type;
	Parms.Light_Location = std::move(Light_Location);
	Parms.Light_Rotation = std::move(Light_Rotation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Spot_Light_Reference != nullptr)
		*Spot_Light_Reference = Parms.Spot_Light_Reference;

	if (Point_Light_Reference != nullptr)
		*Point_Light_Reference = Parms.Point_Light_Reference;

	if (Rect_Light_Reference != nullptr)
		*Rect_Light_Reference = Parms.Rect_Light_Reference;
}


// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Point Light Settings
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPointLightComponent*             Point_Light                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Intensity                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Intensity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Colour                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Preset_Colour                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Attenuation_Radius                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Attenuation_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Attenuation_Radius                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Casting_Start_Distance                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Soft_Source_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Length                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Temperature                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Preset_Kelvin_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Kelvin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Temperature                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Shadows                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Indirect_Lighting_Intensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Volumetric_Scattering_Intensity                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Inverse_Squared_Falloff                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Falloff_Exponent                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Inverse_Exposure_Blend                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Specular_Scale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Bias                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Scale_Bias                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Volumetric_Shadows                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Draw_Distance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Distance_Fade_Range                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Light_Function_Material                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Light_Function_Scale                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Function_Fade_Distance                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Disabled_Brightness                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureLightProfile*             IES_Texture                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_IES_Intensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  IES_Intensity_Scale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Final_Intensity_Output                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Final_Colour_Output                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Point_Light_Settings(class UPointLightComponent* Point_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Scale_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Point Light Settings");

	Params::BPFL_Lighting_Utility_C_Point_Light_Settings Parms{};

	Parms.Point_Light = Point_Light;
	Parms.Override_Preset_Intensity = Override_Preset_Intensity;
	Parms.Intensity = Intensity;
	Parms.Preset_Intensity = Preset_Intensity;
	Parms.Override_Preset_Colour = Override_Preset_Colour;
	Parms.Colour = std::move(Colour);
	Parms.Preset_Colour = std::move(Preset_Colour);
	Parms.Override_Attenuation_Radius = Override_Attenuation_Radius;
	Parms.Attenuation_Radius = Attenuation_Radius;
	Parms.Preset_Attenuation_Radius = Preset_Attenuation_Radius;
	Parms.Shadow_Casting_Start_Distance = Shadow_Casting_Start_Distance;
	Parms.Source_Radius = Source_Radius;
	Parms.Soft_Source_Radius = Soft_Source_Radius;
	Parms.Source_Length = Source_Length;
	Parms.Use_Temperature = Use_Temperature;
	Parms.Use_Preset_Kelvin_ = Use_Preset_Kelvin_;
	Parms.Preset_Kelvin = Preset_Kelvin;
	Parms.Temperature = Temperature;
	Parms.Cast_Shadows = Cast_Shadows;
	Parms.Indirect_Lighting_Intensity = Indirect_Lighting_Intensity;
	Parms.Volumetric_Scattering_Intensity = Volumetric_Scattering_Intensity;
	Parms.Use_Inverse_Squared_Falloff = Use_Inverse_Squared_Falloff;
	Parms.Light_Falloff_Exponent = Light_Falloff_Exponent;
	Parms.Inverse_Exposure_Blend = Inverse_Exposure_Blend;
	Parms.Specular_Scale = Specular_Scale;
	Parms.Shadow_Bias = Shadow_Bias;
	Parms.Shadow_Scale_Bias = Shadow_Scale_Bias;
	Parms.Lighting_Channel_0 = Lighting_Channel_0;
	Parms.Lighting_Channel_1 = Lighting_Channel_1;
	Parms.Lighting_Channel_2 = Lighting_Channel_2;
	Parms.Cast_Volumetric_Shadows = Cast_Volumetric_Shadows;
	Parms.Max_Draw_Distance = Max_Draw_Distance;
	Parms.Max_Distance_Fade_Range = Max_Distance_Fade_Range;
	Parms.Light_Function_Material = Light_Function_Material;
	Parms.Light_Function_Scale = std::move(Light_Function_Scale);
	Parms.Light_Function_Fade_Distance = Light_Function_Fade_Distance;
	Parms.Disabled_Brightness = Disabled_Brightness;
	Parms.IES_Texture = IES_Texture;
	Parms.Use_IES_Intensity = Use_IES_Intensity;
	Parms.IES_Intensity_Scale = IES_Intensity_Scale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Final_Intensity_Output != nullptr)
		*Final_Intensity_Output = Parms.Final_Intensity_Output;

	if (Final_Colour_Output != nullptr)
		*Final_Colour_Output = std::move(Parms.Final_Colour_Output);
}


// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Rect Light Settings
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URectLightComponent*              Rect_Light                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Intensity                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Intensity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Colour                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Preset_Colour                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Attenuation_Radius                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Attenuation_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Attenuation_Radius                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Casting_Start_Distance                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Width                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Height                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Barn_Door_Angle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Barn_Door_Length                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Source_Texture                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Temperature                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Preset_Kelvin_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Kelvin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Temperature                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Shadows                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Indirect_Lighting_Intensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Volumetric_Scattering_Intensity                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Volumetric_Shadows                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Draw_Distance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Distance_Fade_Range                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Light_Function_Material                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Light_Function_Scale                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Function_Fade_Distance                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Disabled_Brightness                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureLightProfile*             IES_Texture                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_IES_Intensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  IES_Intensity_Scale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Final_Intensity_Output                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Final_Colour_Output                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Rect_Light_Settings(class URectLightComponent* Rect_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Width, double Source_Height, double Barn_Door_Angle, double Barn_Door_Length, class UTexture* Source_Texture, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Rect Light Settings");

	Params::BPFL_Lighting_Utility_C_Rect_Light_Settings Parms{};

	Parms.Rect_Light = Rect_Light;
	Parms.Override_Preset_Intensity = Override_Preset_Intensity;
	Parms.Intensity = Intensity;
	Parms.Preset_Intensity = Preset_Intensity;
	Parms.Override_Preset_Colour = Override_Preset_Colour;
	Parms.Colour = std::move(Colour);
	Parms.Preset_Colour = std::move(Preset_Colour);
	Parms.Override_Attenuation_Radius = Override_Attenuation_Radius;
	Parms.Attenuation_Radius = Attenuation_Radius;
	Parms.Preset_Attenuation_Radius = Preset_Attenuation_Radius;
	Parms.Shadow_Casting_Start_Distance = Shadow_Casting_Start_Distance;
	Parms.Source_Width = Source_Width;
	Parms.Source_Height = Source_Height;
	Parms.Barn_Door_Angle = Barn_Door_Angle;
	Parms.Barn_Door_Length = Barn_Door_Length;
	Parms.Source_Texture = Source_Texture;
	Parms.Use_Temperature = Use_Temperature;
	Parms.Use_Preset_Kelvin_ = Use_Preset_Kelvin_;
	Parms.Preset_Kelvin = Preset_Kelvin;
	Parms.Temperature = Temperature;
	Parms.Cast_Shadows = Cast_Shadows;
	Parms.Indirect_Lighting_Intensity = Indirect_Lighting_Intensity;
	Parms.Volumetric_Scattering_Intensity = Volumetric_Scattering_Intensity;
	Parms.Lighting_Channel_0 = Lighting_Channel_0;
	Parms.Lighting_Channel_1 = Lighting_Channel_1;
	Parms.Lighting_Channel_2 = Lighting_Channel_2;
	Parms.Cast_Volumetric_Shadows = Cast_Volumetric_Shadows;
	Parms.Max_Draw_Distance = Max_Draw_Distance;
	Parms.Max_Distance_Fade_Range = Max_Distance_Fade_Range;
	Parms.Light_Function_Material = Light_Function_Material;
	Parms.Light_Function_Scale = std::move(Light_Function_Scale);
	Parms.Light_Function_Fade_Distance = Light_Function_Fade_Distance;
	Parms.Disabled_Brightness = Disabled_Brightness;
	Parms.IES_Texture = IES_Texture;
	Parms.Use_IES_Intensity = Use_IES_Intensity;
	Parms.IES_Intensity_Scale = IES_Intensity_Scale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Final_Intensity_Output != nullptr)
		*Final_Intensity_Output = Parms.Final_Intensity_Output;

	if (Final_Colour_Output != nullptr)
		*Final_Colour_Output = std::move(Parms.Final_Colour_Output);
}


// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Spot Light Settings
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpotLightComponent*              Spot_Light                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Intensity                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Intensity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Preset_Colour                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Preset_Colour                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override_Attenuation_Radius                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Attenuation_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Attenuation_Radius                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Inner_Cone_Angle                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Outer_Cone_Angle                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Casting_Start_Distance                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Soft_Source_Radius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Source_Length                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Temperature                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Preset_Kelvin_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Preset_Kelvin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Temperature                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Shadows                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Indirect_Lighting_Intensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Volumetric_Scattering_Intensity                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Inverse_Squared_Falloff                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Falloff_Exponent                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Inverse_Exposure_Blend                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Specular_Scale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Bias                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Shadow_Slope_Bias                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lighting_Channel_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cast_Volumetric_Shadows                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Draw_Distance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Distance_Fade_Range                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Light_Function_Material                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Light_Function_Scale                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Light_Function_Fade_Distance                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Disabled_Brightness                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureLightProfile*             IES_Texture                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_IES_Intensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  IES_Intensity_Scale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Final_Intensity_Output                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Final_Colour_Output                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Lighting_Utility_C::Spot_Light_Settings(class USpotLightComponent* Spot_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Inner_Cone_Angle, double Outer_Cone_Angle, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Slope_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Lighting_Utility_C", "Spot Light Settings");

	Params::BPFL_Lighting_Utility_C_Spot_Light_Settings Parms{};

	Parms.Spot_Light = Spot_Light;
	Parms.Override_Preset_Intensity = Override_Preset_Intensity;
	Parms.Intensity = Intensity;
	Parms.Preset_Intensity = Preset_Intensity;
	Parms.Override_Preset_Colour = Override_Preset_Colour;
	Parms.Colour = std::move(Colour);
	Parms.Preset_Colour = std::move(Preset_Colour);
	Parms.Override_Attenuation_Radius = Override_Attenuation_Radius;
	Parms.Attenuation_Radius = Attenuation_Radius;
	Parms.Preset_Attenuation_Radius = Preset_Attenuation_Radius;
	Parms.Inner_Cone_Angle = Inner_Cone_Angle;
	Parms.Outer_Cone_Angle = Outer_Cone_Angle;
	Parms.Shadow_Casting_Start_Distance = Shadow_Casting_Start_Distance;
	Parms.Source_Radius = Source_Radius;
	Parms.Soft_Source_Radius = Soft_Source_Radius;
	Parms.Source_Length = Source_Length;
	Parms.Use_Temperature = Use_Temperature;
	Parms.Use_Preset_Kelvin_ = Use_Preset_Kelvin_;
	Parms.Preset_Kelvin = Preset_Kelvin;
	Parms.Temperature = Temperature;
	Parms.Cast_Shadows = Cast_Shadows;
	Parms.Indirect_Lighting_Intensity = Indirect_Lighting_Intensity;
	Parms.Volumetric_Scattering_Intensity = Volumetric_Scattering_Intensity;
	Parms.Use_Inverse_Squared_Falloff = Use_Inverse_Squared_Falloff;
	Parms.Light_Falloff_Exponent = Light_Falloff_Exponent;
	Parms.Inverse_Exposure_Blend = Inverse_Exposure_Blend;
	Parms.Specular_Scale = Specular_Scale;
	Parms.Shadow_Bias = Shadow_Bias;
	Parms.Shadow_Slope_Bias = Shadow_Slope_Bias;
	Parms.Lighting_Channel_0 = Lighting_Channel_0;
	Parms.Lighting_Channel_1 = Lighting_Channel_1;
	Parms.Lighting_Channel_2 = Lighting_Channel_2;
	Parms.Cast_Volumetric_Shadows = Cast_Volumetric_Shadows;
	Parms.Max_Draw_Distance = Max_Draw_Distance;
	Parms.Max_Distance_Fade_Range = Max_Distance_Fade_Range;
	Parms.Light_Function_Material = Light_Function_Material;
	Parms.Light_Function_Scale = std::move(Light_Function_Scale);
	Parms.Light_Function_Fade_Distance = Light_Function_Fade_Distance;
	Parms.Disabled_Brightness = Disabled_Brightness;
	Parms.IES_Texture = IES_Texture;
	Parms.Use_IES_Intensity = Use_IES_Intensity;
	Parms.IES_Intensity_Scale = IES_Intensity_Scale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Final_Intensity_Output != nullptr)
		*Final_Intensity_Output = Parms.Final_Intensity_Output;

	if (Final_Colour_Output != nullptr)
		*Final_Colour_Output = std::move(Parms.Final_Colour_Output);
}

}

