#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_Limb_LimbType

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "G01_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Tooltip_Limb_LimbType.WBP_Tooltip_Limb_LimbType_C
// 0x0038 (0x0318 - 0x02E0)
class UWBP_Tooltip_Limb_LimbType_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 LimbType_Image;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              ImageSize;                                         // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           DefaultTint;                                       // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               bodymat;                                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Tooltip_Limb_LimbType(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void RefreshColorToDefault();
	void SetColor(const struct FLinearColor& Tint);
	void SetLimbType(EGzLimbType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Tooltip_Limb_LimbType_C">();
	}
	static class UWBP_Tooltip_Limb_LimbType_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Tooltip_Limb_LimbType_C>();
	}
};
static_assert(alignof(UWBP_Tooltip_Limb_LimbType_C) == 0x000008, "Wrong alignment on UWBP_Tooltip_Limb_LimbType_C");
static_assert(sizeof(UWBP_Tooltip_Limb_LimbType_C) == 0x000318, "Wrong size on UWBP_Tooltip_Limb_LimbType_C");
static_assert(offsetof(UWBP_Tooltip_Limb_LimbType_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Tooltip_Limb_LimbType_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_LimbType_C, LimbType_Image) == 0x0002E8, "Member 'UWBP_Tooltip_Limb_LimbType_C::LimbType_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_LimbType_C, ImageSize) == 0x0002F0, "Member 'UWBP_Tooltip_Limb_LimbType_C::ImageSize' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_LimbType_C, DefaultTint) == 0x000300, "Member 'UWBP_Tooltip_Limb_LimbType_C::DefaultTint' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_LimbType_C, bodymat) == 0x000310, "Member 'UWBP_Tooltip_Limb_LimbType_C::bodymat' has a wrong offset!");

}

