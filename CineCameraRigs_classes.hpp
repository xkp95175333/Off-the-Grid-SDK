#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CineCameraRigs

#include "Basic.hpp"

#include "AnimationCore_structs.hpp"
#include "CinematicCamera_classes.hpp"
#include "Engine_classes.hpp"
#include "CineCameraRigs_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class CineCameraRigs.CineCameraAttachMount
// 0x0058 (0x02F8 - 0x02A0)
class ACineCameraAttachMount final : public AActor
{
public:
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x02A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocket;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransformFilter                       TransformFilter;                                   // 0x02D0(0x0009)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_478C[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    SpringArmComponent;                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLocationLag;                                // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLag;                                // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478D[0x2];                                     // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationLagSpeed;                                  // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationLagSpeed;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478E[0x4];                                     // 0x02F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTickableParentConstraint* GetConstraint();
	void ResetLocationOffset();
	void ResetRotationOffset();
	void SetEnableLocationLag(bool bEnabled);
	void SetEnableRotationLag(bool bEnabled);
	void SetLocationLagSpeed(float Speed);
	void SetRotationLagSpeed(float Speed);
	void SetTransformFilter(const struct FTransformFilter& InFilter);
	void ZeroRoll();
	void ZeroTilt();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineCameraAttachMount">();
	}
	static class ACineCameraAttachMount* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACineCameraAttachMount>();
	}
};
static_assert(alignof(ACineCameraAttachMount) == 0x000008, "Wrong alignment on ACineCameraAttachMount");
static_assert(sizeof(ACineCameraAttachMount) == 0x0002F8, "Wrong size on ACineCameraAttachMount");
static_assert(offsetof(ACineCameraAttachMount, TargetActor) == 0x0002A0, "Member 'ACineCameraAttachMount::TargetActor' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, TargetSocket) == 0x0002C8, "Member 'ACineCameraAttachMount::TargetSocket' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, TransformFilter) == 0x0002D0, "Member 'ACineCameraAttachMount::TransformFilter' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, SpringArmComponent) == 0x0002E0, "Member 'ACineCameraAttachMount::SpringArmComponent' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, bEnableLocationLag) == 0x0002E8, "Member 'ACineCameraAttachMount::bEnableLocationLag' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, bEnableRotationLag) == 0x0002E9, "Member 'ACineCameraAttachMount::bEnableRotationLag' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, LocationLagSpeed) == 0x0002EC, "Member 'ACineCameraAttachMount::LocationLagSpeed' has a wrong offset!");
static_assert(offsetof(ACineCameraAttachMount, RotationLagSpeed) == 0x0002F0, "Member 'ACineCameraAttachMount::RotationLagSpeed' has a wrong offset!");

// Class CineCameraRigs.CineCameraRigRail
// 0x0060 (0x0320 - 0x02C0)
class ACineCameraRigRail final : public ACameraRig_Rail
{
public:
	bool                                          bUseAbsolutePosition;                              // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478F[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbsolutePositionOnRail;                            // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePointRotation;                                 // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4790[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SplineMeshMaterial;                                // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       SplineMeshMIDs;                                    // 0x02D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTexture2D*                             SplineMeshTexture;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplaySpeedHeatmap;                              // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4791[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpeedSampleCountPerSegment;                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachLocationX;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachLocationY;                                  // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachLocationZ;                                  // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachRotationX;                                  // 0x02FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachRotationY;                                  // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachRotationZ;                                  // 0x02FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritFocalLength;                               // 0x02FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritAperture;                                  // 0x02FF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritFocusDistance;                             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECineCameraRigRailDriveMode                   DriveMode;                                         // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4792[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlay;                                             // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompensateTimeScale;                              // 0x030B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4793[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCineSplineComponent*                   CineSplineComponent;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4794[0x8];                                     // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsSequencerDriven();
	void SetDisplaySpeedHeatmap(bool bEnable);
	void SetDriveMode(ECineCameraRigRailDriveMode InMode);
	void SetSplineMeshMaterial(class UMaterialInterface* InMaterial);
	void SetSplineMeshTexture(class UTexture2D* InTexture);

	class UCineSplineComponent* GetCineSplineComponent() const;
	struct FVector GetVelocityAtPosition(const float InPosition, const float Delta) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineCameraRigRail">();
	}
	static class ACineCameraRigRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACineCameraRigRail>();
	}
};
static_assert(alignof(ACineCameraRigRail) == 0x000008, "Wrong alignment on ACineCameraRigRail");
static_assert(sizeof(ACineCameraRigRail) == 0x000320, "Wrong size on ACineCameraRigRail");
static_assert(offsetof(ACineCameraRigRail, bUseAbsolutePosition) == 0x0002C0, "Member 'ACineCameraRigRail::bUseAbsolutePosition' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, AbsolutePositionOnRail) == 0x0002C4, "Member 'ACineCameraRigRail::AbsolutePositionOnRail' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bUsePointRotation) == 0x0002C8, "Member 'ACineCameraRigRail::bUsePointRotation' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, SplineMeshMaterial) == 0x0002D0, "Member 'ACineCameraRigRail::SplineMeshMaterial' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, SplineMeshMIDs) == 0x0002D8, "Member 'ACineCameraRigRail::SplineMeshMIDs' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, SplineMeshTexture) == 0x0002E8, "Member 'ACineCameraRigRail::SplineMeshTexture' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bDisplaySpeedHeatmap) == 0x0002F0, "Member 'ACineCameraRigRail::bDisplaySpeedHeatmap' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, SpeedSampleCountPerSegment) == 0x0002F4, "Member 'ACineCameraRigRail::SpeedSampleCountPerSegment' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachLocationX) == 0x0002F8, "Member 'ACineCameraRigRail::bAttachLocationX' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachLocationY) == 0x0002F9, "Member 'ACineCameraRigRail::bAttachLocationY' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachLocationZ) == 0x0002FA, "Member 'ACineCameraRigRail::bAttachLocationZ' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachRotationX) == 0x0002FB, "Member 'ACineCameraRigRail::bAttachRotationX' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachRotationY) == 0x0002FC, "Member 'ACineCameraRigRail::bAttachRotationY' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bAttachRotationZ) == 0x0002FD, "Member 'ACineCameraRigRail::bAttachRotationZ' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bInheritFocalLength) == 0x0002FE, "Member 'ACineCameraRigRail::bInheritFocalLength' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bInheritAperture) == 0x0002FF, "Member 'ACineCameraRigRail::bInheritAperture' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bInheritFocusDistance) == 0x000300, "Member 'ACineCameraRigRail::bInheritFocusDistance' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, DriveMode) == 0x000301, "Member 'ACineCameraRigRail::DriveMode' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, Speed) == 0x000304, "Member 'ACineCameraRigRail::Speed' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bPlay) == 0x000308, "Member 'ACineCameraRigRail::bPlay' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bReverse) == 0x000309, "Member 'ACineCameraRigRail::bReverse' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bLoop) == 0x00030A, "Member 'ACineCameraRigRail::bLoop' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, bCompensateTimeScale) == 0x00030B, "Member 'ACineCameraRigRail::bCompensateTimeScale' has a wrong offset!");
static_assert(offsetof(ACineCameraRigRail, CineSplineComponent) == 0x000310, "Member 'ACineCameraRigRail::CineSplineComponent' has a wrong offset!");

// Class CineCameraRigs.CineCameraRigRailHelpers
// 0x0000 (0x0028 - 0x0028)
class UCineCameraRigRailHelpers final : public UBlueprintFunctionLibrary
{
public:
	static void CreateOrUpdateSplineHeatmapTexture(class UTexture2D*& Texture, const TArray<float>& DataValues, const float LowValue, const float AverageValue, const float HighValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineCameraRigRailHelpers">();
	}
	static class UCineCameraRigRailHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCineCameraRigRailHelpers>();
	}
};
static_assert(alignof(UCineCameraRigRailHelpers) == 0x000008, "Wrong alignment on UCineCameraRigRailHelpers");
static_assert(sizeof(UCineCameraRigRailHelpers) == 0x000028, "Wrong size on UCineCameraRigRailHelpers");

// Class CineCameraRigs.CineCameraRigRailSettings
// 0x0078 (0x00A0 - 0x0028)
class UCineCameraRigRailSettings final : public UObject
{
public:
	TSoftObjectPtr<class UMaterialInterface>      DefaultSplineMeshMaterial;                         // 0x0028(0x0028)(Edit, BlueprintVisible, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DefaultSplineMeshTexture;                          // 0x0050(0x0028)(Edit, BlueprintVisible, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SpeedModeSplineMeshTexture;                        // 0x0078(0x0028)(Edit, BlueprintVisible, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineCameraRigRailSettings">();
	}
	static class UCineCameraRigRailSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCineCameraRigRailSettings>();
	}
};
static_assert(alignof(UCineCameraRigRailSettings) == 0x000008, "Wrong alignment on UCineCameraRigRailSettings");
static_assert(sizeof(UCineCameraRigRailSettings) == 0x0000A0, "Wrong size on UCineCameraRigRailSettings");
static_assert(offsetof(UCineCameraRigRailSettings, DefaultSplineMeshMaterial) == 0x000028, "Member 'UCineCameraRigRailSettings::DefaultSplineMeshMaterial' has a wrong offset!");
static_assert(offsetof(UCineCameraRigRailSettings, DefaultSplineMeshTexture) == 0x000050, "Member 'UCineCameraRigRailSettings::DefaultSplineMeshTexture' has a wrong offset!");
static_assert(offsetof(UCineCameraRigRailSettings, SpeedModeSplineMeshTexture) == 0x000078, "Member 'UCineCameraRigRailSettings::SpeedModeSplineMeshTexture' has a wrong offset!");

// Class CineCameraRigs.CineSplineComponent
// 0x0060 (0x0680 - 0x0620)
class UCineSplineComponent final : public USplineComponent
{
public:
	struct FCineSplineCurveDefaults               CameraSplineDefaults;                              // 0x0620(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UCineSplineMetadata*                    CineSplineMetadata;                                // 0x0650(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4796[0x18];                                    // 0x0658(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSplineEdited_BP;                                 // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddSplineDataAtPosition(const float InPosition, const struct FCineSplinePointData& InPointData);
	void OnSplineEdited_BP__DelegateSignature();
	void SetAbsolutePositionAtSplinePoint(const int32 PointIndex, const float Value);
	void SetApertureAtSplinePoint(const int32 PointIndex, const float Value);
	void SetFocalLengthAtSplinePoint(const int32 PointIndex, const float Value);
	void SetFocusDistanceAtSplinePoint(const int32 PointIndex, const float Value);
	void SetPointRotationAtSplinePoint(const int32 PointIndex, const struct FQuat& Value);
	void UpdateSplineDataAtIndex(const int32 InIndex, const struct FCineSplinePointData& InPointData);

	bool FindSplineDataAtPosition(const float InPosition, int32* OutIndex, const float Tolerance) const;
	float GetInputKeyAtPosition(const float InPosition) const;
	struct FQuat GetPointRotationAtSplineInputKey(float InKey) const;
	struct FQuat GetPointRotationAtSplinePoint(int32 Param_Index) const;
	float GetPositionAtInputKey(const float InKey) const;
	struct FCineSplinePointData GetSplineDataAtPosition(const float InPosition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineSplineComponent">();
	}
	static class UCineSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCineSplineComponent>();
	}
};
static_assert(alignof(UCineSplineComponent) == 0x000010, "Wrong alignment on UCineSplineComponent");
static_assert(sizeof(UCineSplineComponent) == 0x000680, "Wrong size on UCineSplineComponent");
static_assert(offsetof(UCineSplineComponent, CameraSplineDefaults) == 0x000620, "Member 'UCineSplineComponent::CameraSplineDefaults' has a wrong offset!");
static_assert(offsetof(UCineSplineComponent, CineSplineMetadata) == 0x000650, "Member 'UCineSplineComponent::CineSplineMetadata' has a wrong offset!");
static_assert(offsetof(UCineSplineComponent, OnSplineEdited_BP) == 0x000670, "Member 'UCineSplineComponent::OnSplineEdited_BP' has a wrong offset!");

// Class CineCameraRigs.CineSplineMetadata
// 0x0078 (0x00A0 - 0x0028)
class UCineSplineMetadata final : public USplineMetadata
{
public:
	struct FInterpCurveFloat                      AbsolutePosition;                                  // 0x0028(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      FocalLength;                                       // 0x0040(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      Aperture;                                          // 0x0058(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      FocusDistance;                                     // 0x0070(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                       PointRotation;                                     // 0x0088(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CineSplineMetadata">();
	}
	static class UCineSplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCineSplineMetadata>();
	}
};
static_assert(alignof(UCineSplineMetadata) == 0x000008, "Wrong alignment on UCineSplineMetadata");
static_assert(sizeof(UCineSplineMetadata) == 0x0000A0, "Wrong size on UCineSplineMetadata");
static_assert(offsetof(UCineSplineMetadata, AbsolutePosition) == 0x000028, "Member 'UCineSplineMetadata::AbsolutePosition' has a wrong offset!");
static_assert(offsetof(UCineSplineMetadata, FocalLength) == 0x000040, "Member 'UCineSplineMetadata::FocalLength' has a wrong offset!");
static_assert(offsetof(UCineSplineMetadata, Aperture) == 0x000058, "Member 'UCineSplineMetadata::Aperture' has a wrong offset!");
static_assert(offsetof(UCineSplineMetadata, FocusDistance) == 0x000070, "Member 'UCineSplineMetadata::FocusDistance' has a wrong offset!");
static_assert(offsetof(UCineSplineMetadata, PointRotation) == 0x000088, "Member 'UCineSplineMetadata::PointRotation' has a wrong offset!");

}

