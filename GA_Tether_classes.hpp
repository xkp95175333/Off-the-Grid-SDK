#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Tether

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "E_TetherLimbState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Tether.GA_Tether_C
// 0x0280 (0x0930 - 0x06B0)
class UGA_Tether_C final : public UGzGA_Tether
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MaxTetherNB;                                       // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_642E[0x4];                                     // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxPlacementDistance;                              // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinLinkLength;                                     // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxLinkLength;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normal_Extrude_Distance;                           // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Slow_Percentage;                                   // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_TetherPreviewComponent_C*           BP_TetherPreviewComponent;                         // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTagShotFirstTether;                           // 0x06F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTagShotBothTethers;                           // 0x06F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTagReloading;                                 // 0x0700(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         WaitForReloadAnimTimeout;                          // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TetherLimbState                             TetherLimbState;                                   // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_642F[0x3];                                     // 0x070D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             FirstLocationData;                                 // 0x0710(0x00F8)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             SecondLocationData;                                // 0x0808(0x00F8)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UClass*                                 ShotFirstEffectClass;                              // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShotBothEffectClass;                               // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReloadingEffectClass;                              // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          WasActive;                                         // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAboutToEnd;                                      // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6430[0x6];                                     // 0x091A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ShootMontage;                                      // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEffectRemoved* WaitForReloadTimeoutTask;                          // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AttachTetherEnd(class ABP_TetherEnd_C* TetherEnd, class AActor* NewParentActor);
	void Cleanup();
	void EndAbilityWithAnimation2();
	void ExecuteUbergraph_GA_Tether(int32 EntryPoint);
	void InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void Is_Ready_for_Activation(bool* IsReady);
	void IsConnectionInRange(const struct FVector& SecondLoc, bool* IsInRange);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnFirstTetherDestroyed(class AActor* Actor);
	void OnInput_D14B7F4C4D598791F38945977E2101BE(float Time);
	void OnInput_E8D253064B776D67B7A1BC9EB2357C8D(float Time);
	void OnMinEnergyToActivate();
	void OnPress_F433E94F412BE92286AAC4A0BA0EE9F2(float TimeWaited);
	void OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void OnSync_504D112546105D94288574B1E74C3182();
	void OnSync_876DAF2444F59F960AA602951E8FC452();
	void OnSync_A2EBBA8C4B7FED1D7A19F79895825415();
	void OnSync_C89DE3464958C6AB22FA25ABAFD1031B();
	void OnSync_EF77DDDA4835FE0381B428A88A3906F1();
	void OnSync_F4C8E2C14C3D162AF14567930434676B();
	void PlayClientFX();
	void ReActivateAbility();
	void ReadAbilityConfig();
	void ServerResetTetherState();
	void ServerSetTetherIdle();
	void SetStateTags(E_TetherLimbState NewState);
	void SpawnTetherEnd(const struct FHitResult& TargetData);
	void StartReload();
	void TryShootFirstTether();
	void ValidateData(bool IsFirstLocation, const struct FHitResult& LocationData, bool* IsValid);
	void ValidData_4968DB334667353756CA7AAF491F500E(const struct FGameplayAbilityTargetDataHandle& Data);
	void ValidData_768E5ACD4202708381A696B7CA3A5A76(const struct FGameplayAbilityTargetDataHandle& Data);
	void WaitEndAbility();
	void WaitForReloadTimeout(const struct FActiveGameplayEffectHandle& EffectHandle);
	void WaitForSecondInput();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Tether_C">();
	}
	static class UGA_Tether_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Tether_C>();
	}
};
static_assert(alignof(UGA_Tether_C) == 0x000008, "Wrong alignment on UGA_Tether_C");
static_assert(sizeof(UGA_Tether_C) == 0x000930, "Wrong size on UGA_Tether_C");
static_assert(offsetof(UGA_Tether_C, UberGraphFrame) == 0x0006B0, "Member 'UGA_Tether_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, MaxTetherNB) == 0x0006B8, "Member 'UGA_Tether_C::MaxTetherNB' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, MaxPlacementDistance) == 0x0006C0, "Member 'UGA_Tether_C::MaxPlacementDistance' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, MinLinkLength) == 0x0006C8, "Member 'UGA_Tether_C::MinLinkLength' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, MaxLinkLength) == 0x0006D0, "Member 'UGA_Tether_C::MaxLinkLength' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, Normal_Extrude_Distance) == 0x0006D8, "Member 'UGA_Tether_C::Normal_Extrude_Distance' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, Slow_Percentage) == 0x0006E0, "Member 'UGA_Tether_C::Slow_Percentage' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, Damage) == 0x0006E4, "Member 'UGA_Tether_C::Damage' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, BP_TetherPreviewComponent) == 0x0006E8, "Member 'UGA_Tether_C::BP_TetherPreviewComponent' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, StateTagShotFirstTether) == 0x0006F0, "Member 'UGA_Tether_C::StateTagShotFirstTether' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, StateTagShotBothTethers) == 0x0006F8, "Member 'UGA_Tether_C::StateTagShotBothTethers' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, StateTagReloading) == 0x000700, "Member 'UGA_Tether_C::StateTagReloading' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, WaitForReloadAnimTimeout) == 0x000708, "Member 'UGA_Tether_C::WaitForReloadAnimTimeout' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, TetherLimbState) == 0x00070C, "Member 'UGA_Tether_C::TetherLimbState' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, FirstLocationData) == 0x000710, "Member 'UGA_Tether_C::FirstLocationData' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, SecondLocationData) == 0x000808, "Member 'UGA_Tether_C::SecondLocationData' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, ShotFirstEffectClass) == 0x000900, "Member 'UGA_Tether_C::ShotFirstEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, ShotBothEffectClass) == 0x000908, "Member 'UGA_Tether_C::ShotBothEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, ReloadingEffectClass) == 0x000910, "Member 'UGA_Tether_C::ReloadingEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, WasActive) == 0x000918, "Member 'UGA_Tether_C::WasActive' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, IsAboutToEnd) == 0x000919, "Member 'UGA_Tether_C::IsAboutToEnd' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, ShootMontage) == 0x000920, "Member 'UGA_Tether_C::ShootMontage' has a wrong offset!");
static_assert(offsetof(UGA_Tether_C, WaitForReloadTimeoutTask) == 0x000928, "Member 'UGA_Tether_C::WaitForReloadTimeoutTask' has a wrong offset!");

}

