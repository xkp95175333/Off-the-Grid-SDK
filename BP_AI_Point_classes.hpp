#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AI_Point

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AI_Point.BP_AI_Point_C
// 0x0020 (0x02C0 - 0x02A0)
class ABP_AI_Point_C : public AActor
{
public:
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    PointIcon;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateSpline(class AActor* NextPoint);
	void UpdateArrow(class AActor* NextPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AI_Point_C">();
	}
	static class ABP_AI_Point_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AI_Point_C>();
	}
};
static_assert(alignof(ABP_AI_Point_C) == 0x000008, "Wrong alignment on ABP_AI_Point_C");
static_assert(sizeof(ABP_AI_Point_C) == 0x0002C0, "Wrong size on ABP_AI_Point_C");
static_assert(offsetof(ABP_AI_Point_C, Arrow) == 0x0002A0, "Member 'ABP_AI_Point_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AI_Point_C, Spline) == 0x0002A8, "Member 'ABP_AI_Point_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_AI_Point_C, PointIcon) == 0x0002B0, "Member 'ABP_AI_Point_C::PointIcon' has a wrong offset!");
static_assert(offsetof(ABP_AI_Point_C, Sphere) == 0x0002B8, "Member 'ABP_AI_Point_C::Sphere' has a wrong offset!");

}

