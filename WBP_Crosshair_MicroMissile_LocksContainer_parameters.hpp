#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_MicroMissile_LocksContainer

#include "Basic.hpp"

#include "G01_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer
// 0x0028 (0x0028 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_SpawnEntry_Entry;                         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B3[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B4[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B5[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer) == 0x000028, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, CallFunc_SpawnEntry_Entry) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::CallFunc_SpawnEntry_Entry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, K2Node_Event_IsDesignTime) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, Temp_int_Variable) == 0x00001C, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.Initialize
// 0x0038 (0x0038 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize final
{
public:
	int32                                         InMaxLocksCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeToLockOn;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LockOnDuration;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_SpawnEntry_Entry;                         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInitialized_bIsInitialized;             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B7[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize) == 0x000038, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, InMaxLocksCount) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::InMaxLocksCount' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, TimeToLockOn) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::TimeToLockOn' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, LockOnDuration) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::LockOnDuration' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_SpawnEntry_Entry) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_SpawnEntry_Entry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_IsInitialized_bIsInitialized) == 0x000025, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_IsInitialized_bIsInitialized' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, Temp_int_Variable) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockingStatusChanged
// 0x0138 (0x0138 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_GetEntry_OutEntry;                        // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B8[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_OnLockOnStatusChanged_Progress_ImplicitCast; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged) == 0x000138, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged, TargetData) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged::TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged, CallFunc_GetEntry_OutEntry) == 0x000120, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged::CallFunc_GetEntry_OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged, CallFunc_IsValid_ReturnValue) == 0x000128, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged, CallFunc_OnLockOnStatusChanged_Progress_ImplicitCast) == 0x000130, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged::CallFunc_OnLockOnStatusChanged_Progress_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockInterrupted
// 0x0138 (0x0138 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B9[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_GetEntry_OutEntry;                        // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted) == 0x000138, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted, TargetData) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted::TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted, CallFunc_Map_Remove_ReturnValue) == 0x000120, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted, CallFunc_GetEntry_OutEntry) == 0x000128, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted::CallFunc_GetEntry_OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockSucceed
// 0x0130 (0x0130 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_GetEntry_OutEntry;                        // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed) == 0x000130, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed, TargetData) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed::TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed, CallFunc_GetEntry_OutEntry) == 0x000120, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed::CallFunc_GetEntry_OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed, CallFunc_IsValid_ReturnValue) == 0x000128, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyTargetingStopped
// 0x0048 (0x0048 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGzTargetableComponent*>         CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BB[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzTargetableComponent*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BC[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_GetEntry_OutEntry;                        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped) == 0x000048, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_Array_Get_Item) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_GetEntry_OutEntry) == 0x000038, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_GetEntry_OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyTargetingStopped::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct) == 0x000001, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.SpawnEntry
// 0x0028 (0x0028 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry final
{
public:
	double                                        InTimeToLockOn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InLockOnDuration;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_Lock_C*     Entry;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry) == 0x000028, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry, InTimeToLockOn) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry::InTimeToLockOn' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry, InLockOnDuration) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry::InLockOnDuration' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry, Entry) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry::Entry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry, CallFunc_Create_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.StartLockOnTarget
// 0x0138 (0x0138 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_FindFreeIndex_OutIndex;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BD[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Crosshair_MicroMissile_Lock_C*     CallFunc_GetEntry_OutEntry;                        // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget) == 0x000138, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, TargetData) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, CallFunc_FindFreeIndex_OutIndex) == 0x000120, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::CallFunc_FindFreeIndex_OutIndex' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, CallFunc_GetEntry_OutEntry) == 0x000128, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::CallFunc_GetEntry_OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000130, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, CallFunc_IsValid_ReturnValue) == 0x000131, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget, CallFunc_Map_Contains_ReturnValue) == 0x000132, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.FindFreeIndex
// 0x0030 (0x0030 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex final
{
public:
	int32                                         OutIndex;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BE[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x0018(0x0010)(ReferenceParm)
	bool                                          CallFunc_Map_IsEmpty_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex) == 0x000030, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, OutIndex) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::OutIndex' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, Temp_int_Variable) == 0x000004, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_GetChildrenCount_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_Map_Values_Values) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_Map_IsEmpty_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_Map_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex, CallFunc_Array_Contains_ReturnValue) == 0x000029, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.GetEntry
// 0x0030 (0x0030 - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry final
{
public:
	class UGzTargetableComponent*                 TargetableComp;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_Lock_C*     OutEntry;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_Lock_C*     K2Node_DynamicCast_AsWBP_Crosshair_Micro_Missile_Lock; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry) == 0x000030, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, TargetableComp) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::TargetableComp' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, OutEntry) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::OutEntry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, CallFunc_Map_Find_Value) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, CallFunc_Map_Find_ReturnValue) == 0x000014, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, CallFunc_GetChildAt_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, K2Node_DynamicCast_AsWBP_Crosshair_Micro_Missile_Lock) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::K2Node_DynamicCast_AsWBP_Crosshair_Micro_Missile_Lock' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.IsInitialized
// 0x000C (0x000C - 0x0000)
struct WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized final
{
public:
	bool                                          bIsInitialized;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized) == 0x000004, "Wrong alignment on WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized");
static_assert(sizeof(WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized) == 0x00000C, "Wrong size on WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized, bIsInitialized) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized::bIsInitialized' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized, CallFunc_GetChildrenCount_ReturnValue) == 0x000004, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

