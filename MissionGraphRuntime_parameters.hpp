#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MissionGraphRuntime

#include "Basic.hpp"

#include "MissionGraphRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function MissionGraphRuntime.MissionObject.CollectResourceRefsBP
// 0x0010 (0x0010 - 0x0000)
struct MissionObject_CollectResourceRefsBP final
{
public:
	TArray<struct FMissionResourceRef>            OutReferences;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObject_CollectResourceRefsBP) == 0x000008, "Wrong alignment on MissionObject_CollectResourceRefsBP");
static_assert(sizeof(MissionObject_CollectResourceRefsBP) == 0x000010, "Wrong size on MissionObject_CollectResourceRefsBP");
static_assert(offsetof(MissionObject_CollectResourceRefsBP, OutReferences) == 0x000000, "Member 'MissionObject_CollectResourceRefsBP::OutReferences' has a wrong offset!");

// Function MissionGraphRuntime.MissionObject.GetMissionChecked
// 0x0008 (0x0008 - 0x0000)
struct MissionObject_GetMissionChecked final
{
public:
	class AMission*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObject_GetMissionChecked) == 0x000008, "Wrong alignment on MissionObject_GetMissionChecked");
static_assert(sizeof(MissionObject_GetMissionChecked) == 0x000008, "Wrong size on MissionObject_GetMissionChecked");
static_assert(offsetof(MissionObject_GetMissionChecked, ReturnValue) == 0x000000, "Member 'MissionObject_GetMissionChecked::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObject.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct MissionObject_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObject_HasAuthority) == 0x000001, "Wrong alignment on MissionObject_HasAuthority");
static_assert(sizeof(MissionObject_HasAuthority) == 0x000001, "Wrong size on MissionObject_HasAuthority");
static_assert(offsetof(MissionObject_HasAuthority, ReturnValue) == 0x000000, "Member 'MissionObject_HasAuthority::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObject.HasParticipant
// 0x0008 (0x0008 - 0x0000)
struct MissionObject_HasParticipant final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27F1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionObject_HasParticipant) == 0x000004, "Wrong alignment on MissionObject_HasParticipant");
static_assert(sizeof(MissionObject_HasParticipant) == 0x000008, "Wrong size on MissionObject_HasParticipant");
static_assert(offsetof(MissionObject_HasParticipant, PlayerId) == 0x000000, "Member 'MissionObject_HasParticipant::PlayerId' has a wrong offset!");
static_assert(offsetof(MissionObject_HasParticipant, ReturnValue) == 0x000004, "Member 'MissionObject_HasParticipant::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.ExtendTimer
// 0x0004 (0x0004 - 0x0000)
struct MissionObjective_ExtendTimer final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_ExtendTimer) == 0x000004, "Wrong alignment on MissionObjective_ExtendTimer");
static_assert(sizeof(MissionObjective_ExtendTimer) == 0x000004, "Wrong size on MissionObjective_ExtendTimer");
static_assert(offsetof(MissionObjective_ExtendTimer, Duration) == 0x000000, "Member 'MissionObjective_ExtendTimer::Duration' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetActions
// 0x0010 (0x0010 - 0x0000)
struct MissionObjective_GetActions final
{
public:
	TArray<class UMissionAction*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetActions) == 0x000008, "Wrong alignment on MissionObjective_GetActions");
static_assert(sizeof(MissionObjective_GetActions) == 0x000010, "Wrong size on MissionObjective_GetActions");
static_assert(offsetof(MissionObjective_GetActions, ReturnValue) == 0x000000, "Member 'MissionObjective_GetActions::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetBlockedHudText
// 0x0010 (0x0010 - 0x0000)
struct MissionObjective_GetBlockedHudText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetBlockedHudText) == 0x000008, "Wrong alignment on MissionObjective_GetBlockedHudText");
static_assert(sizeof(MissionObjective_GetBlockedHudText) == 0x000010, "Wrong size on MissionObjective_GetBlockedHudText");
static_assert(offsetof(MissionObjective_GetBlockedHudText, ReturnValue) == 0x000000, "Member 'MissionObjective_GetBlockedHudText::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetHudText
// 0x0010 (0x0010 - 0x0000)
struct MissionObjective_GetHudText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetHudText) == 0x000008, "Wrong alignment on MissionObjective_GetHudText");
static_assert(sizeof(MissionObjective_GetHudText) == 0x000010, "Wrong size on MissionObjective_GetHudText");
static_assert(offsetof(MissionObjective_GetHudText, ReturnValue) == 0x000000, "Member 'MissionObjective_GetHudText::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetRewardsIcon
// 0x0028 (0x0028 - 0x0000)
struct MissionObjective_GetRewardsIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetRewardsIcon) == 0x000008, "Wrong alignment on MissionObjective_GetRewardsIcon");
static_assert(sizeof(MissionObjective_GetRewardsIcon) == 0x000028, "Wrong size on MissionObjective_GetRewardsIcon");
static_assert(offsetof(MissionObjective_GetRewardsIcon, ReturnValue) == 0x000000, "Member 'MissionObjective_GetRewardsIcon::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetRewardsShortText
// 0x0010 (0x0010 - 0x0000)
struct MissionObjective_GetRewardsShortText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetRewardsShortText) == 0x000008, "Wrong alignment on MissionObjective_GetRewardsShortText");
static_assert(sizeof(MissionObjective_GetRewardsShortText) == 0x000010, "Wrong size on MissionObjective_GetRewardsShortText");
static_assert(offsetof(MissionObjective_GetRewardsShortText, ReturnValue) == 0x000000, "Member 'MissionObjective_GetRewardsShortText::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_OnRep_State final
{
public:
	EMissionObjectiveState                        PrevState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_OnRep_State) == 0x000001, "Wrong alignment on MissionObjective_OnRep_State");
static_assert(sizeof(MissionObjective_OnRep_State) == 0x000001, "Wrong size on MissionObjective_OnRep_State");
static_assert(offsetof(MissionObjective_OnRep_State, PrevState) == 0x000000, "Member 'MissionObjective_OnRep_State::PrevState' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.TrySetState
// 0x000C (0x000C - 0x0000)
struct MissionObjective_TrySetState final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27F8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ResultTag;                                         // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_TrySetState) == 0x000004, "Wrong alignment on MissionObjective_TrySetState");
static_assert(sizeof(MissionObjective_TrySetState) == 0x00000C, "Wrong size on MissionObjective_TrySetState");
static_assert(offsetof(MissionObjective_TrySetState, bSuccessful) == 0x000000, "Member 'MissionObjective_TrySetState::bSuccessful' has a wrong offset!");
static_assert(offsetof(MissionObjective_TrySetState, ResultTag) == 0x000004, "Member 'MissionObjective_TrySetState::ResultTag' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetConditionEvaluationType
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_GetConditionEvaluationType final
{
public:
	EConditionEvaluationType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetConditionEvaluationType) == 0x000001, "Wrong alignment on MissionObjective_GetConditionEvaluationType");
static_assert(sizeof(MissionObjective_GetConditionEvaluationType) == 0x000001, "Wrong size on MissionObjective_GetConditionEvaluationType");
static_assert(offsetof(MissionObjective_GetConditionEvaluationType, ReturnValue) == 0x000000, "Member 'MissionObjective_GetConditionEvaluationType::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetConditionState
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_GetConditionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetConditionState) == 0x000001, "Wrong alignment on MissionObjective_GetConditionState");
static_assert(sizeof(MissionObjective_GetConditionState) == 0x000001, "Wrong size on MissionObjective_GetConditionState");
static_assert(offsetof(MissionObjective_GetConditionState, ReturnValue) == 0x000000, "Member 'MissionObjective_GetConditionState::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetObjectiveScope
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_GetObjectiveScope final
{
public:
	EMissionObjectiveScope                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetObjectiveScope) == 0x000001, "Wrong alignment on MissionObjective_GetObjectiveScope");
static_assert(sizeof(MissionObjective_GetObjectiveScope) == 0x000001, "Wrong size on MissionObjective_GetObjectiveScope");
static_assert(offsetof(MissionObjective_GetObjectiveScope, ReturnValue) == 0x000000, "Member 'MissionObjective_GetObjectiveScope::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetState
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_GetState final
{
public:
	EMissionObjectiveState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetState) == 0x000001, "Wrong alignment on MissionObjective_GetState");
static_assert(sizeof(MissionObjective_GetState) == 0x000001, "Wrong size on MissionObjective_GetState");
static_assert(offsetof(MissionObjective_GetState, ReturnValue) == 0x000000, "Member 'MissionObjective_GetState::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetStateTag
// 0x0008 (0x0008 - 0x0000)
struct MissionObjective_GetStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetStateTag) == 0x000004, "Wrong alignment on MissionObjective_GetStateTag");
static_assert(sizeof(MissionObjective_GetStateTag) == 0x000008, "Wrong size on MissionObjective_GetStateTag");
static_assert(offsetof(MissionObjective_GetStateTag, ReturnValue) == 0x000000, "Member 'MissionObjective_GetStateTag::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.GetTimeDuration
// 0x0004 (0x0004 - 0x0000)
struct MissionObjective_GetTimeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_GetTimeDuration) == 0x000004, "Wrong alignment on MissionObjective_GetTimeDuration");
static_assert(sizeof(MissionObjective_GetTimeDuration) == 0x000004, "Wrong size on MissionObjective_GetTimeDuration");
static_assert(offsetof(MissionObjective_GetTimeDuration, ReturnValue) == 0x000000, "Member 'MissionObjective_GetTimeDuration::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.IsBonusObjective
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_IsBonusObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_IsBonusObjective) == 0x000001, "Wrong alignment on MissionObjective_IsBonusObjective");
static_assert(sizeof(MissionObjective_IsBonusObjective) == 0x000001, "Wrong size on MissionObjective_IsBonusObjective");
static_assert(offsetof(MissionObjective_IsBonusObjective, ReturnValue) == 0x000000, "Member 'MissionObjective_IsBonusObjective::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective.IsTimed
// 0x0001 (0x0001 - 0x0000)
struct MissionObjective_IsTimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_IsTimed) == 0x000001, "Wrong alignment on MissionObjective_IsTimed");
static_assert(sizeof(MissionObjective_IsTimed) == 0x000001, "Wrong size on MissionObjective_IsTimed");
static_assert(offsetof(MissionObjective_IsTimed, ReturnValue) == 0x000000, "Member 'MissionObjective_IsTimed::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.GameplayObjective.AddProgress
// 0x0004 (0x0004 - 0x0000)
struct GameplayObjective_AddProgress final
{
public:
	float                                         ProgressAmount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayObjective_AddProgress) == 0x000004, "Wrong alignment on GameplayObjective_AddProgress");
static_assert(sizeof(GameplayObjective_AddProgress) == 0x000004, "Wrong size on GameplayObjective_AddProgress");
static_assert(offsetof(GameplayObjective_AddProgress, ProgressAmount) == 0x000000, "Member 'GameplayObjective_AddProgress::ProgressAmount' has a wrong offset!");

// Function MissionGraphRuntime.GameplayObjective.SetMaxProgress
// 0x0004 (0x0004 - 0x0000)
struct GameplayObjective_SetMaxProgress final
{
public:
	float                                         NewMaxProgress;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayObjective_SetMaxProgress) == 0x000004, "Wrong alignment on GameplayObjective_SetMaxProgress");
static_assert(sizeof(GameplayObjective_SetMaxProgress) == 0x000004, "Wrong size on GameplayObjective_SetMaxProgress");
static_assert(offsetof(GameplayObjective_SetMaxProgress, NewMaxProgress) == 0x000000, "Member 'GameplayObjective_SetMaxProgress::NewMaxProgress' has a wrong offset!");

// Function MissionGraphRuntime.GameplayObjective.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct GameplayObjective_SetProgress final
{
public:
	float                                         ProgressAmount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayObjective_SetProgress) == 0x000004, "Wrong alignment on GameplayObjective_SetProgress");
static_assert(sizeof(GameplayObjective_SetProgress) == 0x000004, "Wrong size on GameplayObjective_SetProgress");
static_assert(offsetof(GameplayObjective_SetProgress, ProgressAmount) == 0x000000, "Member 'GameplayObjective_SetProgress::ProgressAmount' has a wrong offset!");

// Function MissionGraphRuntime.GameplayObjective.SetRewardTier
// 0x0004 (0x0004 - 0x0000)
struct GameplayObjective_SetRewardTier final
{
public:
	int32                                         NewRewardTier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayObjective_SetRewardTier) == 0x000004, "Wrong alignment on GameplayObjective_SetRewardTier");
static_assert(sizeof(GameplayObjective_SetRewardTier) == 0x000004, "Wrong size on GameplayObjective_SetRewardTier");
static_assert(offsetof(GameplayObjective_SetRewardTier, NewRewardTier) == 0x000000, "Member 'GameplayObjective_SetRewardTier::NewRewardTier' has a wrong offset!");

// Function MissionGraphRuntime.GameplayObjective.GetRewardTier
// 0x0004 (0x0004 - 0x0000)
struct GameplayObjective_GetRewardTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayObjective_GetRewardTier) == 0x000004, "Wrong alignment on GameplayObjective_GetRewardTier");
static_assert(sizeof(GameplayObjective_GetRewardTier) == 0x000004, "Wrong size on GameplayObjective_GetRewardTier");
static_assert(offsetof(GameplayObjective_GetRewardTier, ReturnValue) == 0x000000, "Member 'GameplayObjective_GetRewardTier::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetActionWithName
// 0x0018 (0x0018 - 0x0000)
struct Mission_GetActionWithName final
{
public:
	class FName                                   ObjectiveName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionAction*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetActionWithName) == 0x000008, "Wrong alignment on Mission_GetActionWithName");
static_assert(sizeof(Mission_GetActionWithName) == 0x000018, "Wrong size on Mission_GetActionWithName");
static_assert(offsetof(Mission_GetActionWithName, ObjectiveName) == 0x000000, "Member 'Mission_GetActionWithName::ObjectiveName' has a wrong offset!");
static_assert(offsetof(Mission_GetActionWithName, ActionName) == 0x000008, "Member 'Mission_GetActionWithName::ActionName' has a wrong offset!");
static_assert(offsetof(Mission_GetActionWithName, ReturnValue) == 0x000010, "Member 'Mission_GetActionWithName::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetObjectiveWithName
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetObjectiveWithName final
{
public:
	class FName                                   ObjectiveName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetObjectiveWithName) == 0x000008, "Wrong alignment on Mission_GetObjectiveWithName");
static_assert(sizeof(Mission_GetObjectiveWithName) == 0x000010, "Wrong size on Mission_GetObjectiveWithName");
static_assert(offsetof(Mission_GetObjectiveWithName, ObjectiveName) == 0x000000, "Member 'Mission_GetObjectiveWithName::ObjectiveName' has a wrong offset!");
static_assert(offsetof(Mission_GetObjectiveWithName, ReturnValue) == 0x000008, "Member 'Mission_GetObjectiveWithName::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.CollectResourceRefsBP
// 0x0010 (0x0010 - 0x0000)
struct Mission_CollectResourceRefsBP final
{
public:
	TArray<struct FMissionResourceRef>            OutReferences;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_CollectResourceRefsBP) == 0x000008, "Wrong alignment on Mission_CollectResourceRefsBP");
static_assert(sizeof(Mission_CollectResourceRefsBP) == 0x000010, "Wrong size on Mission_CollectResourceRefsBP");
static_assert(offsetof(Mission_CollectResourceRefsBP, OutReferences) == 0x000000, "Member 'Mission_CollectResourceRefsBP::OutReferences' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetMissionDuration
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetMissionDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetMissionDuration) == 0x000004, "Wrong alignment on Mission_GetMissionDuration");
static_assert(sizeof(Mission_GetMissionDuration) == 0x000004, "Wrong size on Mission_GetMissionDuration");
static_assert(offsetof(Mission_GetMissionDuration, ReturnValue) == 0x000000, "Member 'Mission_GetMissionDuration::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetParticipants
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetParticipants final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetParticipants) == 0x000008, "Wrong alignment on Mission_GetParticipants");
static_assert(sizeof(Mission_GetParticipants) == 0x000010, "Wrong size on Mission_GetParticipants");
static_assert(offsetof(Mission_GetParticipants, ReturnValue) == 0x000000, "Member 'Mission_GetParticipants::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetRootObjective
// 0x0008 (0x0008 - 0x0000)
struct Mission_GetRootObjective final
{
public:
	class UMissionObjective*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetRootObjective) == 0x000008, "Wrong alignment on Mission_GetRootObjective");
static_assert(sizeof(Mission_GetRootObjective) == 0x000008, "Wrong size on Mission_GetRootObjective");
static_assert(offsetof(Mission_GetRootObjective, ReturnValue) == 0x000000, "Member 'Mission_GetRootObjective::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.GetRuntimeContext
// 0x0008 (0x0008 - 0x0000)
struct Mission_GetRuntimeContext final
{
public:
	class UMissionRuntimeContext*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetRuntimeContext) == 0x000008, "Wrong alignment on Mission_GetRuntimeContext");
static_assert(sizeof(Mission_GetRuntimeContext) == 0x000008, "Wrong size on Mission_GetRuntimeContext");
static_assert(offsetof(Mission_GetRuntimeContext, ReturnValue) == 0x000000, "Member 'Mission_GetRuntimeContext::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.Mission.HasParticipant
// 0x0008 (0x0008 - 0x0000)
struct Mission_HasParticipant final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27FC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_HasParticipant) == 0x000004, "Wrong alignment on Mission_HasParticipant");
static_assert(sizeof(Mission_HasParticipant) == 0x000008, "Wrong size on Mission_HasParticipant");
static_assert(offsetof(Mission_HasParticipant, PlayerId) == 0x000000, "Member 'Mission_HasParticipant::PlayerId' has a wrong offset!");
static_assert(offsetof(Mission_HasParticipant, ReturnValue) == 0x000004, "Member 'Mission_HasParticipant::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionAction.SetParentState
// 0x000C (0x000C - 0x0000)
struct MissionAction_SetParentState final
{
public:
	EMissionObjectiveState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27FF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StateTag;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionAction_SetParentState) == 0x000004, "Wrong alignment on MissionAction_SetParentState");
static_assert(sizeof(MissionAction_SetParentState) == 0x00000C, "Wrong size on MissionAction_SetParentState");
static_assert(offsetof(MissionAction_SetParentState, NewState) == 0x000000, "Member 'MissionAction_SetParentState::NewState' has a wrong offset!");
static_assert(offsetof(MissionAction_SetParentState, StateTag) == 0x000004, "Member 'MissionAction_SetParentState::StateTag' has a wrong offset!");

// Function MissionGraphRuntime.MissionAction.GetNextAction
// 0x0008 (0x0008 - 0x0000)
struct MissionAction_GetNextAction final
{
public:
	class UMissionAction*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionAction_GetNextAction) == 0x000008, "Wrong alignment on MissionAction_GetNextAction");
static_assert(sizeof(MissionAction_GetNextAction) == 0x000008, "Wrong size on MissionAction_GetNextAction");
static_assert(offsetof(MissionAction_GetNextAction, ReturnValue) == 0x000000, "Member 'MissionAction_GetNextAction::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionCondition.SetState
// 0x0001 (0x0001 - 0x0000)
struct MissionCondition_SetState final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionCondition_SetState) == 0x000001, "Wrong alignment on MissionCondition_SetState");
static_assert(sizeof(MissionCondition_SetState) == 0x000001, "Wrong size on MissionCondition_SetState");
static_assert(offsetof(MissionCondition_SetState, bNewState) == 0x000000, "Member 'MissionCondition_SetState::bNewState' has a wrong offset!");

// Function MissionGraphRuntime.MissionExtension.Initialize
// 0x0008 (0x0008 - 0x0000)
struct MissionExtension_Initialize final
{
public:
	class UMissionObjective*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionExtension_Initialize) == 0x000008, "Wrong alignment on MissionExtension_Initialize");
static_assert(sizeof(MissionExtension_Initialize) == 0x000008, "Wrong size on MissionExtension_Initialize");
static_assert(offsetof(MissionExtension_Initialize, Owner) == 0x000000, "Member 'MissionExtension_Initialize::Owner' has a wrong offset!");

// Function MissionGraphRuntime.MissionExtension.OnObjectiveStateChanged
// 0x0010 (0x0010 - 0x0000)
struct MissionExtension_OnObjectiveStateChanged final
{
public:
	class UMissionObjective*                      Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionObjectiveState                        OldState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionObjectiveState                        NewState;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2804[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionExtension_OnObjectiveStateChanged) == 0x000008, "Wrong alignment on MissionExtension_OnObjectiveStateChanged");
static_assert(sizeof(MissionExtension_OnObjectiveStateChanged) == 0x000010, "Wrong size on MissionExtension_OnObjectiveStateChanged");
static_assert(offsetof(MissionExtension_OnObjectiveStateChanged, Objective) == 0x000000, "Member 'MissionExtension_OnObjectiveStateChanged::Objective' has a wrong offset!");
static_assert(offsetof(MissionExtension_OnObjectiveStateChanged, OldState) == 0x000008, "Member 'MissionExtension_OnObjectiveStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(MissionExtension_OnObjectiveStateChanged, NewState) == 0x000009, "Member 'MissionExtension_OnObjectiveStateChanged::NewState' has a wrong offset!");

// Function MissionGraphRuntime.MissionExtensionContext.GetExtensionContext
// 0x0010 (0x0010 - 0x0000)
struct MissionExtensionContext_GetExtensionContext final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionExtensionContext_GetExtensionContext) == 0x000008, "Wrong alignment on MissionExtensionContext_GetExtensionContext");
static_assert(sizeof(MissionExtensionContext_GetExtensionContext) == 0x000010, "Wrong size on MissionExtensionContext_GetExtensionContext");
static_assert(offsetof(MissionExtensionContext_GetExtensionContext, ReturnValue) == 0x000000, "Member 'MissionExtensionContext_GetExtensionContext::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective_Composition.GetChildObjectives
// 0x0010 (0x0010 - 0x0000)
struct MissionObjective_Composition_GetChildObjectives final
{
public:
	TArray<class UMissionObjective*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_Composition_GetChildObjectives) == 0x000008, "Wrong alignment on MissionObjective_Composition_GetChildObjectives");
static_assert(sizeof(MissionObjective_Composition_GetChildObjectives) == 0x000010, "Wrong size on MissionObjective_Composition_GetChildObjectives");
static_assert(offsetof(MissionObjective_Composition_GetChildObjectives, ReturnValue) == 0x000000, "Member 'MissionObjective_Composition_GetChildObjectives::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective_ActivateOnFail.GetCurrentObjectiveIndex
// 0x0004 (0x0004 - 0x0000)
struct MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex) == 0x000004, "Wrong alignment on MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex");
static_assert(sizeof(MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex) == 0x000004, "Wrong size on MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex");
static_assert(offsetof(MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex, ReturnValue) == 0x000000, "Member 'MissionObjective_ActivateOnFail_GetCurrentObjectiveIndex::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective_Sequence.GetCurrentObjective
// 0x0008 (0x0008 - 0x0000)
struct MissionObjective_Sequence_GetCurrentObjective final
{
public:
	class UMissionObjective*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_Sequence_GetCurrentObjective) == 0x000008, "Wrong alignment on MissionObjective_Sequence_GetCurrentObjective");
static_assert(sizeof(MissionObjective_Sequence_GetCurrentObjective) == 0x000008, "Wrong size on MissionObjective_Sequence_GetCurrentObjective");
static_assert(offsetof(MissionObjective_Sequence_GetCurrentObjective, ReturnValue) == 0x000000, "Member 'MissionObjective_Sequence_GetCurrentObjective::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionObjective_Sequence.GetCurrentObjectiveIndex
// 0x0004 (0x0004 - 0x0000)
struct MissionObjective_Sequence_GetCurrentObjectiveIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjective_Sequence_GetCurrentObjectiveIndex) == 0x000004, "Wrong alignment on MissionObjective_Sequence_GetCurrentObjectiveIndex");
static_assert(sizeof(MissionObjective_Sequence_GetCurrentObjectiveIndex) == 0x000004, "Wrong size on MissionObjective_Sequence_GetCurrentObjectiveIndex");
static_assert(offsetof(MissionObjective_Sequence_GetCurrentObjectiveIndex, ReturnValue) == 0x000000, "Member 'MissionObjective_Sequence_GetCurrentObjectiveIndex::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.AddDependency
// 0x0008 (0x0008 - 0x0000)
struct MissionResourceComponent_AddDependency final
{
public:
	class UMissionResourceComponent*              Resource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_AddDependency) == 0x000008, "Wrong alignment on MissionResourceComponent_AddDependency");
static_assert(sizeof(MissionResourceComponent_AddDependency) == 0x000008, "Wrong size on MissionResourceComponent_AddDependency");
static_assert(offsetof(MissionResourceComponent_AddDependency, Resource) == 0x000000, "Member 'MissionResourceComponent_AddDependency::Resource' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.Reserve
// 0x0008 (0x0008 - 0x0000)
struct MissionResourceComponent_Reserve final
{
public:
	class UObject*                                ReservedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_Reserve) == 0x000008, "Wrong alignment on MissionResourceComponent_Reserve");
static_assert(sizeof(MissionResourceComponent_Reserve) == 0x000008, "Wrong size on MissionResourceComponent_Reserve");
static_assert(offsetof(MissionResourceComponent_Reserve, ReservedBy) == 0x000000, "Member 'MissionResourceComponent_Reserve::ReservedBy' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.SetIsAvailable
// 0x0001 (0x0001 - 0x0000)
struct MissionResourceComponent_SetIsAvailable final
{
public:
	bool                                          bNewIsAvailable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_SetIsAvailable) == 0x000001, "Wrong alignment on MissionResourceComponent_SetIsAvailable");
static_assert(sizeof(MissionResourceComponent_SetIsAvailable) == 0x000001, "Wrong size on MissionResourceComponent_SetIsAvailable");
static_assert(offsetof(MissionResourceComponent_SetIsAvailable, bNewIsAvailable) == 0x000000, "Member 'MissionResourceComponent_SetIsAvailable::bNewIsAvailable' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.StartPendingDestroy
// 0x0004 (0x0004 - 0x0000)
struct MissionResourceComponent_StartPendingDestroy final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_StartPendingDestroy) == 0x000004, "Wrong alignment on MissionResourceComponent_StartPendingDestroy");
static_assert(sizeof(MissionResourceComponent_StartPendingDestroy) == 0x000004, "Wrong size on MissionResourceComponent_StartPendingDestroy");
static_assert(offsetof(MissionResourceComponent_StartPendingDestroy, Delay) == 0x000000, "Member 'MissionResourceComponent_StartPendingDestroy::Delay' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.Unreserve
// 0x0008 (0x0008 - 0x0000)
struct MissionResourceComponent_Unreserve final
{
public:
	class UObject*                                ReservedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_Unreserve) == 0x000008, "Wrong alignment on MissionResourceComponent_Unreserve");
static_assert(sizeof(MissionResourceComponent_Unreserve) == 0x000008, "Wrong size on MissionResourceComponent_Unreserve");
static_assert(offsetof(MissionResourceComponent_Unreserve, ReservedBy) == 0x000000, "Member 'MissionResourceComponent_Unreserve::ReservedBy' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.IsAvailable
// 0x0001 (0x0001 - 0x0000)
struct MissionResourceComponent_IsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_IsAvailable) == 0x000001, "Wrong alignment on MissionResourceComponent_IsAvailable");
static_assert(sizeof(MissionResourceComponent_IsAvailable) == 0x000001, "Wrong size on MissionResourceComponent_IsAvailable");
static_assert(offsetof(MissionResourceComponent_IsAvailable, ReturnValue) == 0x000000, "Member 'MissionResourceComponent_IsAvailable::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceComponent.IsReserved
// 0x0001 (0x0001 - 0x0000)
struct MissionResourceComponent_IsReserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceComponent_IsReserved) == 0x000001, "Wrong alignment on MissionResourceComponent_IsReserved");
static_assert(sizeof(MissionResourceComponent_IsReserved) == 0x000001, "Wrong size on MissionResourceComponent_IsReserved");
static_assert(offsetof(MissionResourceComponent_IsReserved, ReturnValue) == 0x000000, "Member 'MissionResourceComponent_IsReserved::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceFunctionLibrary.MakeSoftResourceRef
// 0x0050 (0x0050 - 0x0000)
struct MissionResourceFunctionLibrary_MakeSoftResourceRef final
{
public:
	TSoftObjectPtr<class AActor>                  Reference;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionResourceRef                    ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceFunctionLibrary_MakeSoftResourceRef) == 0x000008, "Wrong alignment on MissionResourceFunctionLibrary_MakeSoftResourceRef");
static_assert(sizeof(MissionResourceFunctionLibrary_MakeSoftResourceRef) == 0x000050, "Wrong size on MissionResourceFunctionLibrary_MakeSoftResourceRef");
static_assert(offsetof(MissionResourceFunctionLibrary_MakeSoftResourceRef, Reference) == 0x000000, "Member 'MissionResourceFunctionLibrary_MakeSoftResourceRef::Reference' has a wrong offset!");
static_assert(offsetof(MissionResourceFunctionLibrary_MakeSoftResourceRef, ReturnValue) == 0x000028, "Member 'MissionResourceFunctionLibrary_MakeSoftResourceRef::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceFunctionLibrary.MakeTagResourceRef
// 0x0030 (0x0030 - 0x0000)
struct MissionResourceFunctionLibrary_MakeTagResourceRef final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionResourceRef                    ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceFunctionLibrary_MakeTagResourceRef) == 0x000008, "Wrong alignment on MissionResourceFunctionLibrary_MakeTagResourceRef");
static_assert(sizeof(MissionResourceFunctionLibrary_MakeTagResourceRef) == 0x000030, "Wrong size on MissionResourceFunctionLibrary_MakeTagResourceRef");
static_assert(offsetof(MissionResourceFunctionLibrary_MakeTagResourceRef, Tag) == 0x000000, "Member 'MissionResourceFunctionLibrary_MakeTagResourceRef::Tag' has a wrong offset!");
static_assert(offsetof(MissionResourceFunctionLibrary_MakeTagResourceRef, ReturnValue) == 0x000008, "Member 'MissionResourceFunctionLibrary_MakeTagResourceRef::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceSubsystem.GetResourcesByRange
// 0x0048 (0x0048 - 0x0000)
struct MissionResourceSubsystem_GetResourcesByRange final
{
public:
	class AActor*                                 DistanceFrom;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ResourceTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionRadialFilter                   RadialFilter;                                      // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionResourceSubsystem_GetResourcesByRange) == 0x000008, "Wrong alignment on MissionResourceSubsystem_GetResourcesByRange");
static_assert(sizeof(MissionResourceSubsystem_GetResourcesByRange) == 0x000048, "Wrong size on MissionResourceSubsystem_GetResourcesByRange");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, DistanceFrom) == 0x000000, "Member 'MissionResourceSubsystem_GetResourcesByRange::DistanceFrom' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, ResourceTag) == 0x000008, "Member 'MissionResourceSubsystem_GetResourcesByRange::ResourceTag' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, MinDistance) == 0x000010, "Member 'MissionResourceSubsystem_GetResourcesByRange::MinDistance' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, MaxDistance) == 0x000014, "Member 'MissionResourceSubsystem_GetResourcesByRange::MaxDistance' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, RadialFilter) == 0x000018, "Member 'MissionResourceSubsystem_GetResourcesByRange::RadialFilter' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetResourcesByRange, ReturnValue) == 0x000038, "Member 'MissionResourceSubsystem_GetResourcesByRange::ReturnValue' has a wrong offset!");

// Function MissionGraphRuntime.MissionResourceSubsystem.GetAvailableResourcesExact
// 0x0020 (0x0020 - 0x0000)
struct MissionResourceSubsystem_GetAvailableResourcesExact final
{
public:
	struct FGameplayTag                           ResourceTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMissionResourceComponent*>      Resources;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         UnavailableCount;                                  // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionResourceSubsystem_GetAvailableResourcesExact) == 0x000008, "Wrong alignment on MissionResourceSubsystem_GetAvailableResourcesExact");
static_assert(sizeof(MissionResourceSubsystem_GetAvailableResourcesExact) == 0x000020, "Wrong size on MissionResourceSubsystem_GetAvailableResourcesExact");
static_assert(offsetof(MissionResourceSubsystem_GetAvailableResourcesExact, ResourceTag) == 0x000000, "Member 'MissionResourceSubsystem_GetAvailableResourcesExact::ResourceTag' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetAvailableResourcesExact, Resources) == 0x000008, "Member 'MissionResourceSubsystem_GetAvailableResourcesExact::Resources' has a wrong offset!");
static_assert(offsetof(MissionResourceSubsystem_GetAvailableResourcesExact, UnavailableCount) == 0x000018, "Member 'MissionResourceSubsystem_GetAvailableResourcesExact::UnavailableCount' has a wrong offset!");

}

