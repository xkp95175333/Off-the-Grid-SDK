#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NPCName

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_NPCName.WBP_NPCName_C
// 0x00B8 (0x0450 - 0x0398)
class UWBP_NPCName_C final : public UGzViewportMarkerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       NewAnimation;                                      // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 NPCAttitude_Image;                                 // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           NPCName_Text;                                      // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           NPCName_VerticalBox;                               // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGzCharacter*                           AssignedCharacter;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ETeamAttitude                                 PlayerAttitude;                                    // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57A2[0x7];                                     // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzAIInfo*                              GzAIInfoRef;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         NpcId;                                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57A3[0x4];                                     // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBillboardComponent*                    BillboardComponent;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FriendlyNameColor;                                 // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NeutralNameColor;                                  // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HostileNameColor;                                  // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NeutralIdentifier;                                 // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   HostileIdentifier;                                 // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FriendlyIdentifier;                                // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Update_NPC_Name_Color();
	void Update_Team_Attitude(bool ForceUpdate);
	void Update_NPC_Name();
	void Update_Outline_Border();
	void SetNPCId(int32 NPC_Id);
	void Update_NPC_Indicator_Visibility();
	void OnUpdate();
	void GetTeamAttitude(ETeamAttitude* TeamAttitude);
	void GetRelativeLocalPlayerState(class APlayerState** OutPlayerState);
	void GetAiInfo(class AGzAIInfo** OutAIInfo);
	void ExecuteUbergraph_WBP_NPCName(int32 EntryPoint);
	void Destruct();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_NPCName_C">();
	}
	static class UWBP_NPCName_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_NPCName_C>();
	}
};
static_assert(alignof(UWBP_NPCName_C) == 0x000008, "Wrong alignment on UWBP_NPCName_C");
static_assert(sizeof(UWBP_NPCName_C) == 0x000450, "Wrong size on UWBP_NPCName_C");
static_assert(offsetof(UWBP_NPCName_C, UberGraphFrame) == 0x000398, "Member 'UWBP_NPCName_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NewAnimation) == 0x0003A0, "Member 'UWBP_NPCName_C::NewAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NPCAttitude_Image) == 0x0003A8, "Member 'UWBP_NPCName_C::NPCAttitude_Image' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NPCName_Text) == 0x0003B0, "Member 'UWBP_NPCName_C::NPCName_Text' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NPCName_VerticalBox) == 0x0003B8, "Member 'UWBP_NPCName_C::NPCName_VerticalBox' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, AssignedCharacter) == 0x0003C0, "Member 'UWBP_NPCName_C::AssignedCharacter' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, PlayerAttitude) == 0x0003C8, "Member 'UWBP_NPCName_C::PlayerAttitude' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, GzAIInfoRef) == 0x0003D0, "Member 'UWBP_NPCName_C::GzAIInfoRef' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NpcId) == 0x0003D8, "Member 'UWBP_NPCName_C::NpcId' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, BillboardComponent) == 0x0003E0, "Member 'UWBP_NPCName_C::BillboardComponent' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, FriendlyNameColor) == 0x0003E8, "Member 'UWBP_NPCName_C::FriendlyNameColor' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NeutralNameColor) == 0x0003F8, "Member 'UWBP_NPCName_C::NeutralNameColor' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, HostileNameColor) == 0x000408, "Member 'UWBP_NPCName_C::HostileNameColor' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, NeutralIdentifier) == 0x000418, "Member 'UWBP_NPCName_C::NeutralIdentifier' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, HostileIdentifier) == 0x000428, "Member 'UWBP_NPCName_C::HostileIdentifier' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, FriendlyIdentifier) == 0x000438, "Member 'UWBP_NPCName_C::FriendlyIdentifier' has a wrong offset!");
static_assert(offsetof(UWBP_NPCName_C, TimerHandle) == 0x000448, "Member 'UWBP_NPCName_C::TimerHandle' has a wrong offset!");

}

