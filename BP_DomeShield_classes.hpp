#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DomeShield

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_classes.hpp"
#include "AIModule_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DomeShield.BP_DomeShield_C
// 0x01B8 (0x04B8 - 0x0300)
class ABP_DomeShield_C final : public AGzDomeShield
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       DetonationSphere;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShieldMesh;                                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ShrinkTimeline_Scale_Multiplier_8F8B6976461157B6A6CCA18D18D2DE3D; // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ShrinkTimeline__Direction_8F8B6976461157B6A6CCA18D18D2DE3D; // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1347[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ShrinkTimeline;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Shield_Scale_Increase_Multiplier_Scale_Multiplier_FDF5E1D745AA00740CFF1E955B9D0A64; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Shield_Scale_Increase_Multiplier__Direction_FDF5E1D745AA00740CFF1E955B9D0A64; // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1348[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Shield_Scale_Increase_Multiplier;                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ShieldSize;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shield_Concussion_Duration;                        // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1349[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShieldHorizontalImpulse;                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShieldVerticalImpulse;                             // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Friendly_Fire;                               // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134A[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0368(0x00F8)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               ShieldMaterialDynamicInstance;                     // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ShieldMaterial;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      ShieldColorCurve;                                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  OwningCharacter;                                   // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DomeGadget_C*                       OwningGadget;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           MarkerState;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnShieldDying_Dispatcher;                          // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsGettingDestroyed;                                // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134B[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      ImpactColorCurve;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DomeShield_BodyPartAbilityData_C*   ShieldBodyPartAbilityData;                         // 0x04B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnShieldDying_Dispatcher__DelegateSignature();
	void ApplyShieldDetonationEffects(const struct FHitResult& Param_HitResult);
	void BndEvt__BP_DomeShield_DetonationSphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BP_OnDeath(bool HasDeathHitPoint, const struct FVector& DeathHitPoint);
	void BP_OnHealthChange(float Health);
	struct FVector CalculateShieldDetonationImpulse(class AActor* HitActor);
	void CalculateShieldDomeRadius(float* ShieldRadius);
	void DestroyShield();
	void DetonateShield();
	void DetonationFX();
	void ExecuteUbergraph_BP_DomeShield(int32 EntryPoint);
	void GetHealthPercentage(double* HealthPercentage);
	struct FLinearColor GetImpactColor();
	struct FLinearColor GetShieldColor();
	void InitMaterial();
	void InitShieldHealth(double MaxHealth);
	void Multicast_DestroyShield();
	void Multicast_DetonateShield();
	void OnGadgetDestroyed(class AActor* DestroyedActor);
	void ReceiveBeginPlay();
	void ScaleShield(double Multiplier, double Param_ShieldSize);
	void SetOwningGadgetAndCharacter();
	void Shield_Scale_Increase_Multiplier__FinishedFunc();
	void Shield_Scale_Increase_Multiplier__UpdateFunc();
	void ShrinkTimeline__FinishedFunc();
	void ShrinkTimeline__UpdateFunc();
	void SpawnBulletImpactVFX(const struct FVector& HitLocation, const struct FRotator& HitRotation);
	void UpdateShieldColor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DomeShield_C">();
	}
	static class ABP_DomeShield_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DomeShield_C>();
	}
};
static_assert(alignof(ABP_DomeShield_C) == 0x000008, "Wrong alignment on ABP_DomeShield_C");
static_assert(sizeof(ABP_DomeShield_C) == 0x0004B8, "Wrong size on ABP_DomeShield_C");
static_assert(offsetof(ABP_DomeShield_C, UberGraphFrame) == 0x000300, "Member 'ABP_DomeShield_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, DetonationSphere) == 0x000308, "Member 'ABP_DomeShield_C::DetonationSphere' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldMesh) == 0x000310, "Member 'ABP_DomeShield_C::ShieldMesh' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Scene) == 0x000318, "Member 'ABP_DomeShield_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShrinkTimeline_Scale_Multiplier_8F8B6976461157B6A6CCA18D18D2DE3D) == 0x000320, "Member 'ABP_DomeShield_C::ShrinkTimeline_Scale_Multiplier_8F8B6976461157B6A6CCA18D18D2DE3D' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShrinkTimeline__Direction_8F8B6976461157B6A6CCA18D18D2DE3D) == 0x000324, "Member 'ABP_DomeShield_C::ShrinkTimeline__Direction_8F8B6976461157B6A6CCA18D18D2DE3D' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShrinkTimeline) == 0x000328, "Member 'ABP_DomeShield_C::ShrinkTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Shield_Scale_Increase_Multiplier_Scale_Multiplier_FDF5E1D745AA00740CFF1E955B9D0A64) == 0x000330, "Member 'ABP_DomeShield_C::Shield_Scale_Increase_Multiplier_Scale_Multiplier_FDF5E1D745AA00740CFF1E955B9D0A64' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Shield_Scale_Increase_Multiplier__Direction_FDF5E1D745AA00740CFF1E955B9D0A64) == 0x000334, "Member 'ABP_DomeShield_C::Shield_Scale_Increase_Multiplier__Direction_FDF5E1D745AA00740CFF1E955B9D0A64' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Shield_Scale_Increase_Multiplier) == 0x000338, "Member 'ABP_DomeShield_C::Shield_Scale_Increase_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldSize) == 0x000340, "Member 'ABP_DomeShield_C::ShieldSize' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Shield_Concussion_Duration) == 0x000348, "Member 'ABP_DomeShield_C::Shield_Concussion_Duration' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldHorizontalImpulse) == 0x000350, "Member 'ABP_DomeShield_C::ShieldHorizontalImpulse' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldVerticalImpulse) == 0x000358, "Member 'ABP_DomeShield_C::ShieldVerticalImpulse' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, Allow_Friendly_Fire) == 0x000360, "Member 'ABP_DomeShield_C::Allow_Friendly_Fire' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, HitResult) == 0x000368, "Member 'ABP_DomeShield_C::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldMaterialDynamicInstance) == 0x000460, "Member 'ABP_DomeShield_C::ShieldMaterialDynamicInstance' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldMaterial) == 0x000468, "Member 'ABP_DomeShield_C::ShieldMaterial' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldColorCurve) == 0x000470, "Member 'ABP_DomeShield_C::ShieldColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, OwningCharacter) == 0x000478, "Member 'ABP_DomeShield_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, OwningGadget) == 0x000480, "Member 'ABP_DomeShield_C::OwningGadget' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, MarkerState) == 0x000488, "Member 'ABP_DomeShield_C::MarkerState' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, OnShieldDying_Dispatcher) == 0x000490, "Member 'ABP_DomeShield_C::OnShieldDying_Dispatcher' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, IsGettingDestroyed) == 0x0004A0, "Member 'ABP_DomeShield_C::IsGettingDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ImpactColorCurve) == 0x0004A8, "Member 'ABP_DomeShield_C::ImpactColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_DomeShield_C, ShieldBodyPartAbilityData) == 0x0004B0, "Member 'ABP_DomeShield_C::ShieldBodyPartAbilityData' has a wrong offset!");

}

