#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Zipline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function ABP_Zipline.ABP_Zipline_C.UpdateZiplineStart
// 0x0098 (0x0098 - 0x0000)
struct ABP_Zipline_C_UpdateZiplineStart final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D9[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DA[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DB[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DC[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DD[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_4;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0088(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_UpdateZiplineStart) == 0x000008, "Wrong alignment on ABP_Zipline_C_UpdateZiplineStart");
static_assert(sizeof(ABP_Zipline_C_UpdateZiplineStart) == 0x000098, "Wrong size on ABP_Zipline_C_UpdateZiplineStart");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Context) == 0x000000, "Member 'ABP_Zipline_C_UpdateZiplineStart::Context' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Node) == 0x000010, "Member 'ABP_Zipline_C_UpdateZiplineStart::Node' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Temp_bool_Variable) == 0x000020, "Member 'ABP_Zipline_C_UpdateZiplineStart::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Temp_bool_Variable_1) == 0x000039, "Member 'ABP_Zipline_C_UpdateZiplineStart::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Temp_bool_Variable_2) == 0x00003A, "Member 'ABP_Zipline_C_UpdateZiplineStart::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Temp_bool_Variable_3) == 0x00003B, "Member 'ABP_Zipline_C_UpdateZiplineStart::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, Temp_bool_Variable_4) == 0x00003C, "Member 'ABP_Zipline_C_UpdateZiplineStart::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000044, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000048, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00004C, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x000050, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_BooleanOR_ReturnValue) == 0x000054, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000055, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x000058, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x00005C, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_BooleanOR_ReturnValue_1) == 0x00005D, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, K2Node_Select_Default) == 0x000060, "Member 'ABP_Zipline_C_UpdateZiplineStart::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, K2Node_Select_Default_1) == 0x000068, "Member 'ABP_Zipline_C_UpdateZiplineStart::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, K2Node_Select_Default_2) == 0x000070, "Member 'ABP_Zipline_C_UpdateZiplineStart::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, K2Node_Select_Default_3) == 0x000078, "Member 'ABP_Zipline_C_UpdateZiplineStart::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, K2Node_Select_Default_4) == 0x000080, "Member 'ABP_Zipline_C_UpdateZiplineStart::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_UpdateZiplineStart, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000088, "Member 'ABP_Zipline_C_UpdateZiplineStart::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.SetupZiplineLoop
// 0x0098 (0x0098 - 0x0000)
struct ABP_Zipline_C_SetupZiplineLoop final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DF[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E0[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E1[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E2[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E3[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_4;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0088(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_SetupZiplineLoop) == 0x000008, "Wrong alignment on ABP_Zipline_C_SetupZiplineLoop");
static_assert(sizeof(ABP_Zipline_C_SetupZiplineLoop) == 0x000098, "Wrong size on ABP_Zipline_C_SetupZiplineLoop");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Context) == 0x000000, "Member 'ABP_Zipline_C_SetupZiplineLoop::Context' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Node) == 0x000010, "Member 'ABP_Zipline_C_SetupZiplineLoop::Node' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Temp_bool_Variable) == 0x000020, "Member 'ABP_Zipline_C_SetupZiplineLoop::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Temp_bool_Variable_1) == 0x000039, "Member 'ABP_Zipline_C_SetupZiplineLoop::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Temp_bool_Variable_2) == 0x00003A, "Member 'ABP_Zipline_C_SetupZiplineLoop::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Temp_bool_Variable_3) == 0x00003B, "Member 'ABP_Zipline_C_SetupZiplineLoop::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, Temp_bool_Variable_4) == 0x00003C, "Member 'ABP_Zipline_C_SetupZiplineLoop::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000044, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000048, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00004C, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x000050, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_BooleanOR_ReturnValue) == 0x000054, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000055, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x000058, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x00005C, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_BooleanOR_ReturnValue_1) == 0x00005D, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, K2Node_Select_Default) == 0x000060, "Member 'ABP_Zipline_C_SetupZiplineLoop::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, K2Node_Select_Default_1) == 0x000068, "Member 'ABP_Zipline_C_SetupZiplineLoop::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, K2Node_Select_Default_2) == 0x000070, "Member 'ABP_Zipline_C_SetupZiplineLoop::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, K2Node_Select_Default_3) == 0x000078, "Member 'ABP_Zipline_C_SetupZiplineLoop::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, K2Node_Select_Default_4) == 0x000080, "Member 'ABP_Zipline_C_SetupZiplineLoop::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_SetupZiplineLoop, CallFunc_SetSequence_ReturnValue) == 0x000088, "Member 'ABP_Zipline_C_SetupZiplineLoop::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_Zipline_C_NPC_CoverState");
static_assert(sizeof(ABP_Zipline_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_Zipline_C_NPC_CoverState");
static_assert(offsetof(ABP_Zipline_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_Zipline_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_Zipline_C_Limbless_State");
static_assert(sizeof(ABP_Zipline_C_Limbless_State) == 0x000010, "Wrong size on ABP_Zipline_C_Limbless_State");
static_assert(offsetof(ABP_Zipline_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_Zipline_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_Zipline_C_KneeSlide_State");
static_assert(sizeof(ABP_Zipline_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_Zipline_C_KneeSlide_State");
static_assert(offsetof(ABP_Zipline_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_Zipline_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.IsVerticalZipline
// 0x0003 (0x0003 - 0x0000)
struct ABP_Zipline_C_IsVerticalZipline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVertical_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_IsVerticalZipline) == 0x000001, "Wrong alignment on ABP_Zipline_C_IsVerticalZipline");
static_assert(sizeof(ABP_Zipline_C_IsVerticalZipline) == 0x000003, "Wrong size on ABP_Zipline_C_IsVerticalZipline");
static_assert(offsetof(ABP_Zipline_C_IsVerticalZipline, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_IsVerticalZipline::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_IsVerticalZipline, CallFunc_IsVertical_ReturnValue) == 0x000001, "Member 'ABP_Zipline_C_IsVerticalZipline::CallFunc_IsVertical_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_IsVerticalZipline, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'ABP_Zipline_C_IsVerticalZipline::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetZiplineDataAndLogic
// 0x01C0 (0x01C0 - 0x0000)
struct ABP_Zipline_C_GetZiplineDataAndLogic final
{
public:
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E6[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E7[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E8[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerFacingVerticalZiplineDirection_ReturnValue; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default;                             // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E9[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPoleVectorForHandIK_L_ReturnValue;     // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPoleVectorForHandIK_R_ReturnValue;     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVerticalDirection_ReturnValue;         // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHorizontalDirection_ReturnValue;       // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast_1;             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_Value_ImplicitCast;      // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_2;           // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_3;           // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetZiplineDataAndLogic) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetZiplineDataAndLogic");
static_assert(sizeof(ABP_Zipline_C_GetZiplineDataAndLogic) == 0x0001C0, "Wrong size on ABP_Zipline_C_GetZiplineDataAndLogic");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_NormalizeToRange_ReturnValue) == 0x000008, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectInt_ReturnValue) == 0x000054, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_NormalizeToRange_ReturnValue_1) == 0x000058, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_NormalizeToRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Abs_ReturnValue_1) == 0x000060, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetCurveValue_ReturnValue) == 0x000068, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_ReturnValue_1) == 0x000070, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_ReturnValue_2) == 0x000088, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, Temp_bool_Variable) == 0x0000A0, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetPlayerFacingVerticalZiplineDirection_ReturnValue) == 0x0000A4, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetPlayerFacingVerticalZiplineDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A8, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, K2Node_Select_Default) == 0x0000B0, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_ReturnValue_3) == 0x0000C8, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, Temp_bool_Variable_1) == 0x0000E0, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetPoleVectorForHandIK_L_ReturnValue) == 0x0000E8, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetPoleVectorForHandIK_L_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetPoleVectorForHandIK_R_ReturnValue) == 0x000100, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetPoleVectorForHandIK_R_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetVerticalDirection_ReturnValue) == 0x000118, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetVerticalDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_GetHorizontalDirection_ReturnValue) == 0x000130, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_GetHorizontalDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectVector_ReturnValue) == 0x000148, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_ReturnValue_2) == 0x000160, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, K2Node_Select_Default_1) == 0x000168, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_B_ImplicitCast) == 0x000180, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000188, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x00018C, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_B_ImplicitCast_1) == 0x000190, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_NormalizeToRange_Value_ImplicitCast) == 0x000198, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_NormalizeToRange_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0001A0, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x0001A8, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_Yaw_ImplicitCast_2) == 0x0001AC, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_Yaw_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_SelectFloat_A_ImplicitCast) == 0x0001B0, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetZiplineDataAndLogic, CallFunc_MakeRotator_Yaw_ImplicitCast_3) == 0x0001B8, "Member 'ABP_Zipline_C_GetZiplineDataAndLogic::CallFunc_MakeRotator_Yaw_ImplicitCast_3' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetZiplineData
// 0x0058 (0x0058 - 0x0000)
struct ABP_Zipline_C_GetZiplineData final
{
public:
	struct FGzZiplineMovementRuntimeData          ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_GetZiplineData) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetZiplineData");
static_assert(sizeof(ABP_Zipline_C_GetZiplineData) == 0x000058, "Wrong size on ABP_Zipline_C_GetZiplineData");
static_assert(offsetof(ABP_Zipline_C_GetZiplineData, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetZiplineData::ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetVerticalDirection
// 0x0120 (0x0120 - 0x0000)
struct ABP_Zipline_C_GetVerticalDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetVerticalDirection) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetVerticalDirection");
static_assert(sizeof(ABP_Zipline_C_GetVerticalDirection) == 0x000120, "Wrong size on ABP_Zipline_C_GetVerticalDirection");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetVerticalDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_X) == 0x000018, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_Y) == 0x000020, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_Z) == 0x000028, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_X_1) == 0x000030, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_Y_1) == 0x000038, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_BreakVector_Z_1) == 0x000040, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_SelectFloat_ReturnValue_1) == 0x000050, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_SelectFloat_ReturnValue_2) == 0x000088, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000090, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0000A8, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetVerticalDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000108, "Member 'ABP_Zipline_C_GetVerticalDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetSpine05Data
// 0x00D0 (0x00D0 - 0x0000)
struct ABP_Zipline_C_GetSpine05Data final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetSpine05Data) == 0x000010, "Wrong alignment on ABP_Zipline_C_GetSpine05Data");
static_assert(sizeof(ABP_Zipline_C_GetSpine05Data) == 0x0000D0, "Wrong size on ABP_Zipline_C_GetSpine05Data");
static_assert(offsetof(ABP_Zipline_C_GetSpine05Data, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetSpine05Data::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetSpine05Data, CallFunc_GetBoneTransform_ReturnValue) == 0x000060, "Member 'ABP_Zipline_C_GetSpine05Data::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetSpine05Data, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'ABP_Zipline_C_GetSpine05Data::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetPoleVectorForHandIK_R
// 0x0150 (0x0150 - 0x0000)
struct ABP_Zipline_C_GetPoleVectorForHandIK_R final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetPoleVectorForHandIK_R) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetPoleVectorForHandIK_R");
static_assert(sizeof(ABP_Zipline_C_GetPoleVectorForHandIK_R) == 0x000150, "Wrong size on ABP_Zipline_C_GetPoleVectorForHandIK_R");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000030, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_BreakTransform_Location) == 0x000048, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_BreakTransform_Rotation) == 0x000060, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Quat_Rotator_ReturnValue) == 0x000090, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_GetForwardVector_ReturnValue) == 0x0000A8, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_GetForwardVector_ReturnValue_1) == 0x0000C0, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D8, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_R, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000138, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_R::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetPoleVectorForHandIK_L
// 0x0150 (0x0150 - 0x0000)
struct ABP_Zipline_C_GetPoleVectorForHandIK_L final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetPoleVectorForHandIK_L) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetPoleVectorForHandIK_L");
static_assert(sizeof(ABP_Zipline_C_GetPoleVectorForHandIK_L) == 0x000150, "Wrong size on ABP_Zipline_C_GetPoleVectorForHandIK_L");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000030, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_BreakTransform_Location) == 0x000048, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_BreakTransform_Rotation) == 0x000060, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Quat_Rotator_ReturnValue) == 0x000090, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_GetForwardVector_ReturnValue) == 0x0000A8, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_GetForwardVector_ReturnValue_1) == 0x0000C0, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D8, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPoleVectorForHandIK_L, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000138, "Member 'ABP_Zipline_C_GetPoleVectorForHandIK_L::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetPlayerFacingVerticalZiplineDirection
// 0x0120 (0x0120 - 0x0000)
struct ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11EA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x0010(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11EB[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue_1;   // 0x0050(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11EC[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue_2;   // 0x0090(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Multiply_QuatQuat_ReturnValue;            // 0x00B0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Multiply_QuatQuat_ReturnValue_1;          // 0x00D0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection) == 0x000010, "Wrong alignment on ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection");
static_assert(sizeof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection) == 0x000120, "Wrong size on ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x000010, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Conv_RotatorToQuaternion_ReturnValue_1) == 0x000050, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Conv_RotatorToQuaternion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_NegateRotator_ReturnValue) == 0x000070, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Conv_RotatorToQuaternion_ReturnValue_2) == 0x000090, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Conv_RotatorToQuaternion_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Multiply_QuatQuat_ReturnValue) == 0x0000B0, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Multiply_QuatQuat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Multiply_QuatQuat_ReturnValue_1) == 0x0000D0, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Multiply_QuatQuat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_Quat_Rotator_ReturnValue) == 0x0000F0, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_BreakRotator_Roll) == 0x000108, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_BreakRotator_Pitch) == 0x00010C, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_BreakRotator_Yaw) == 0x000110, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000114, "Member 'ABP_Zipline_C_GetPlayerFacingVerticalZiplineDirection::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetOwnerMovements
// 0x0018 (0x0018 - 0x0000)
struct ABP_Zipline_C_GetOwnerMovements final
{
public:
	class UGzCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzCharacterMovementComponent*          K2Node_DynamicCast_AsGz_Character_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetOwnerMovements) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetOwnerMovements");
static_assert(sizeof(ABP_Zipline_C_GetOwnerMovements) == 0x000018, "Wrong size on ABP_Zipline_C_GetOwnerMovements");
static_assert(offsetof(ABP_Zipline_C_GetOwnerMovements, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetOwnerMovements::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetOwnerMovements, K2Node_DynamicCast_AsGz_Character_Movement_Component) == 0x000008, "Member 'ABP_Zipline_C_GetOwnerMovements::K2Node_DynamicCast_AsGz_Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetOwnerMovements, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Zipline_C_GetOwnerMovements::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetLowerarmData
// 0x00D0 (0x00D0 - 0x0000)
struct ABP_Zipline_C_GetLowerarmData final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetLowerarmData) == 0x000010, "Wrong alignment on ABP_Zipline_C_GetLowerarmData");
static_assert(sizeof(ABP_Zipline_C_GetLowerarmData) == 0x0000D0, "Wrong size on ABP_Zipline_C_GetLowerarmData");
static_assert(offsetof(ABP_Zipline_C_GetLowerarmData, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetLowerarmData::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetLowerarmData, CallFunc_GetBoneTransform_ReturnValue) == 0x000060, "Member 'ABP_Zipline_C_GetLowerarmData::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetLowerarmData, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'ABP_Zipline_C_GetLowerarmData::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetLocationOnZipline
// 0x0050 (0x0050 - 0x0000)
struct ABP_Zipline_C_GetLocationOnZipline final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11ED[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtMovementAlongZiplineProgressOnSpline_ReturnValue; // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetLocationOnZipline) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetLocationOnZipline");
static_assert(sizeof(ABP_Zipline_C_GetLocationOnZipline) == 0x000050, "Wrong size on ABP_Zipline_C_GetLocationOnZipline");
static_assert(offsetof(ABP_Zipline_C_GetLocationOnZipline, Location) == 0x000000, "Member 'ABP_Zipline_C_GetLocationOnZipline::Location' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetLocationOnZipline, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_GetLocationOnZipline::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetLocationOnZipline, CallFunc_GetLocationAtMovementAlongZiplineProgressOnSpline_ReturnValue) == 0x000020, "Member 'ABP_Zipline_C_GetLocationOnZipline::CallFunc_GetLocationAtMovementAlongZiplineProgressOnSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetLocationOnZipline, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'ABP_Zipline_C_GetLocationOnZipline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetHorizontalDirection
// 0x0108 (0x0108 - 0x0000)
struct ABP_Zipline_C_GetHorizontalDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11EE[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetHorizontalDirection) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetHorizontalDirection");
static_assert(sizeof(ABP_Zipline_C_GetHorizontalDirection) == 0x000108, "Wrong size on ABP_Zipline_C_GetHorizontalDirection");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetHorizontalDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_BreakVector_X) == 0x000018, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_BreakVector_Y) == 0x000020, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_BreakVector_Z) == 0x000028, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000058, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_CalculateDirection_ReturnValue) == 0x000070, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000074, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_SelectFloat_ReturnValue_1) == 0x000080, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000088, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000B8, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000D0, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E8, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHorizontalDirection, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000100, "Member 'ABP_Zipline_C_GetHorizontalDirection::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetHandRotation
// 0x0158 (0x0158 - 0x0000)
struct ABP_Zipline_C_GetHandRotation final
{
public:
	double                                        HandRotation;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11EF[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_3;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F1[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F2[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F3[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F4[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F5[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_6;                              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F6[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_3;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_4;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetHandRotation) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetHandRotation");
static_assert(sizeof(ABP_Zipline_C_GetHandRotation) == 0x000158, "Wrong size on ABP_Zipline_C_GetHandRotation");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, HandRotation) == 0x000000, "Member 'ABP_Zipline_C_GetHandRotation::HandRotation' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable) == 0x000008, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_1) == 0x000010, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_MakeLiteralInt_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_bool_Variable) == 0x00001C, "Member 'ABP_Zipline_C_GetHandRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001D, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_2) == 0x000020, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_bool_Variable_1) == 0x000028, "Member 'ABP_Zipline_C_GetHandRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_3) == 0x000030, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_4) == 0x000038, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_X) == 0x000040, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_Y) == 0x000048, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_Z) == 0x000050, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000059, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Normal_ReturnValue) == 0x000060, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, K2Node_Select_Default) == 0x000078, "Member 'ABP_Zipline_C_GetHandRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_X_1) == 0x000080, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_Y_1) == 0x000088, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_BreakVector_Z_1) == 0x000090, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Normal_ReturnValue_1) == 0x000098, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_bool_Variable_2) == 0x0000C8, "Member 'ABP_Zipline_C_GetHandRotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000D0, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_MapRangeClamped_ReturnValue) == 0x0000D8, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, K2Node_Select_Default_1) == 0x0000E0, "Member 'ABP_Zipline_C_GetHandRotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_bool_Variable_3) == 0x0000F8, "Member 'ABP_Zipline_C_GetHandRotation::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, K2Node_Select_Default_2) == 0x000100, "Member 'ABP_Zipline_C_GetHandRotation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000108, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000110, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000118, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_5) == 0x000120, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000128, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_real_Variable_6) == 0x000130, "Member 'ABP_Zipline_C_GetHandRotation::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, Temp_bool_Variable_4) == 0x000138, "Member 'ABP_Zipline_C_GetHandRotation::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, K2Node_Select_Default_3) == 0x000140, "Member 'ABP_Zipline_C_GetHandRotation::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000148, "Member 'ABP_Zipline_C_GetHandRotation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetHandRotation, K2Node_Select_Default_4) == 0x000150, "Member 'ABP_Zipline_C_GetHandRotation::K2Node_Select_Default_4' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetGzCharacter
// 0x0018 (0x0018 - 0x0000)
struct ABP_Zipline_C_GetGzCharacter final
{
public:
	class AGzPlayerCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetGzCharacter) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetGzCharacter");
static_assert(sizeof(ABP_Zipline_C_GetGzCharacter) == 0x000018, "Wrong size on ABP_Zipline_C_GetGzCharacter");
static_assert(offsetof(ABP_Zipline_C_GetGzCharacter, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetGzCharacter::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetGzCharacter, K2Node_DynamicCast_AsGz_Player_Character) == 0x000008, "Member 'ABP_Zipline_C_GetGzCharacter::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetGzCharacter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Zipline_C_GetGzCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetCurrentZipline
// 0x0008 (0x0008 - 0x0000)
struct ABP_Zipline_C_GetCurrentZipline final
{
public:
	class AGzZipline*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetCurrentZipline) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetCurrentZipline");
static_assert(sizeof(ABP_Zipline_C_GetCurrentZipline) == 0x000008, "Wrong size on ABP_Zipline_C_GetCurrentZipline");
static_assert(offsetof(ABP_Zipline_C_GetCurrentZipline, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetCurrentZipline::ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.GetAnimBPHuman
// 0x0018 (0x0018 - 0x0000)
struct ABP_Zipline_C_GetAnimBPHuman final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_GetAnimBPHuman) == 0x000008, "Wrong alignment on ABP_Zipline_C_GetAnimBPHuman");
static_assert(sizeof(ABP_Zipline_C_GetAnimBPHuman) == 0x000018, "Wrong size on ABP_Zipline_C_GetAnimBPHuman");
static_assert(offsetof(ABP_Zipline_C_GetAnimBPHuman, ReturnValue) == 0x000000, "Member 'ABP_Zipline_C_GetAnimBPHuman::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetAnimBPHuman, K2Node_DynamicCast_AsABP_Human) == 0x000008, "Member 'ABP_Zipline_C_GetAnimBPHuman::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_GetAnimBPHuman, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Zipline_C_GetAnimBPHuman::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBodyAdditives");
static_assert(sizeof(ABP_Zipline_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_Zipline_C_FullBodyAdditives");
static_assert(offsetof(ABP_Zipline_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_Zipline_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_StopState");
static_assert(sizeof(ABP_Zipline_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_StopState");
static_assert(offsetof(ABP_Zipline_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_StartState");
static_assert(sizeof(ABP_Zipline_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_StartState");
static_assert(offsetof(ABP_Zipline_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_PivotState");
static_assert(sizeof(ABP_Zipline_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_PivotState");
static_assert(offsetof(ABP_Zipline_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_Zipline_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_Zipline_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_Zipline_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_Zipline_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_Zipline_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_Zipline_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_IdleState");
static_assert(sizeof(ABP_Zipline_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_IdleState");
static_assert(offsetof(ABP_Zipline_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_Zipline_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_Zipline_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_FallLandState");
static_assert(sizeof(ABP_Zipline_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_FallLandState");
static_assert(offsetof(ABP_Zipline_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_CycleState");
static_assert(sizeof(ABP_Zipline_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_CycleState");
static_assert(offsetof(ABP_Zipline_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_Zipline_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_Zipline_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_Zipline_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_Zipline_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_Zipline_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_Zipline_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        Param_AimYaw;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AimPitch;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_Zipline_C_FullBody_Aiming");
static_assert(sizeof(ABP_Zipline_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_Zipline_C_FullBody_Aiming");
static_assert(offsetof(ABP_Zipline_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_Zipline_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_FullBody_Aiming, Param_AimYaw) == 0x000010, "Member 'ABP_Zipline_C_FullBody_Aiming::Param_AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_FullBody_Aiming, Param_AimPitch) == 0x000018, "Member 'ABP_Zipline_C_FullBody_Aiming::Param_AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_Zipline_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.ExecuteUbergraph_ABP_Zipline
// 0x0090 (0x0090 - 0x0000)
struct ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F8[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetHandRotation_HandRotation;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F9[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FA[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_1;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FB[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FC[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet___CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FD[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet___CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_1_ImplicitCast; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_2_ImplicitCast; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast;         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_1;       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline) == 0x000008, "Wrong alignment on ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline");
static_assert(sizeof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline) == 0x000090, "Wrong size on ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, EntryPoint) == 0x000000, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, Temp_real_Variable) == 0x000004, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_MakeLiteralInt_ReturnValue) == 0x000008, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_GetHandRotation_HandRotation) == 0x000020, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_GetHandRotation_HandRotation' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_Select_Default) == 0x000034, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_VSize_ReturnValue_1) == 0x000038, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000044, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000048, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_Not_PreBool_ReturnValue_1) == 0x000049, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_Not_PreBool_ReturnValue_2) == 0x00004A, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BooleanAND_ReturnValue) == 0x00004B, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BooleanAND_ReturnValue_1) == 0x00004C, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000050, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_Conv_BoolToDouble_ReturnValue_1) == 0x000058, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_Conv_BoolToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x000060, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000064, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x000068, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x00006C, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, CallFunc_BooleanOR_ReturnValue) == 0x00006D, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_VariableSet___CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast) == 0x000070, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_VariableSet___CustomProperty_BodyAimAlpha_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_VariableSet___CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast) == 0x000078, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_VariableSet___CustomProperty_ActiveLockRotation_1AA7C92E4BD6ADDF9D649C8C6C94CD49_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_StructMemberSet___FloatProperty_1_ImplicitCast) == 0x000080, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_StructMemberSet___FloatProperty_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_StructMemberSet___FloatProperty_2_ImplicitCast) == 0x000084, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_StructMemberSet___FloatProperty_2_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_StructMemberSet_Alpha_ImplicitCast) == 0x000088, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_StructMemberSet_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline, K2Node_StructMemberSet_Alpha_ImplicitCast_1) == 0x00008C, "Member 'ABP_Zipline_C_ExecuteUbergraph_ABP_Zipline::K2Node_StructMemberSet_Alpha_ImplicitCast_1' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.DebugData
// 0x0280 (0x0280 - 0x0000)
struct ABP_Zipline_C_DebugData final
{
public:
	bool                                          Enable_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0050(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0098(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0100(0x0010)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0110(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0120(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0168(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x01B0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x01C0(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11FF[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0218(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0260(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0270(0x0010)()
};
static_assert(alignof(ABP_Zipline_C_DebugData) == 0x000008, "Wrong alignment on ABP_Zipline_C_DebugData");
static_assert(sizeof(ABP_Zipline_C_DebugData) == 0x000280, "Wrong size on ABP_Zipline_C_DebugData");
static_assert(offsetof(ABP_Zipline_C_DebugData, Enable_) == 0x000000, "Member 'ABP_Zipline_C_DebugData::Enable_' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_1) == 0x000050, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_2) == 0x000098, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000E0, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x0000F0, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_StringToText_ReturnValue) == 0x000100, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000110, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_3) == 0x000120, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_4) == 0x000168, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_BoolToText_ReturnValue) == 0x0001B0, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_5) == 0x0001C0, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000208, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000210, "Member 'ABP_Zipline_C_DebugData::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeStruct_FormatArgumentData_6) == 0x000218, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, K2Node_MakeArray_Array) == 0x000260, "Member 'ABP_Zipline_C_DebugData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_DebugData, CallFunc_Format_ReturnValue) == 0x000270, "Member 'ABP_Zipline_C_DebugData::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_Zipline_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_Zipline_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_Zipline_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_Zipline_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_Zipline_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_Zipline_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_Zipline_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_Zipline_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_Zipline_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_Zipline_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_Zipline_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_Zipline_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_Zipline_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_Zipline_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_Zipline_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_Zipline_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_Zipline_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_Zipline_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_Zipline_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_Zipline_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Zipline_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Zipline_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Zipline_C_AnimGraph");
static_assert(sizeof(ABP_Zipline_C_AnimGraph) == 0x000010, "Wrong size on ABP_Zipline_C_AnimGraph");
static_assert(offsetof(ABP_Zipline_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_Zipline_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_Zipline.ABP_Zipline_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_Zipline_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Zipline_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_Zipline_C_Aiming_Correction");
static_assert(sizeof(ABP_Zipline_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_Zipline_C_Aiming_Correction");
static_assert(offsetof(ABP_Zipline_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_Zipline_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_Zipline_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_Zipline_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

}

