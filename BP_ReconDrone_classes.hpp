#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReconDrone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReconDrone.BP_ReconDrone_C
// 0x00C0 (0x0540 - 0x0480)
class ABP_ReconDrone_C final : public AGzReconDrone
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0480(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Model;                                             // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Drone_RandomLocationComponent_C*    BP_Drone_RandomLocationComponent;                  // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     MarkerComponent;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_DroneArm_Propulsion;                            // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStreamableComponent*                 GzStreamable;                                      // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTargetLocation;                                 // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlySpeed;                                          // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x04C8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAkAudioEvent*                          DroneLounchAudio;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnemyDrone;                                       // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A09[0x3];                                     // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           RevealedDebuffForEnemy;                            // 0x04EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A0A[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnScanStateChanged;                                // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bStarted;                                          // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A0B[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerCharacter_C*>          CachedActors;                                      // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerCharacter_C*>          AllActors;                                         // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           TimerUpdateRevealedActors;                         // 0x0530(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerGetAllActors;                                 // 0x0538(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnScanStateChanged__DelegateSignature(double StartAngle, double RotationSpeedAnglePerSecond);
	bool CheckDistRadar(class AActor* Self2);
	void Destroy_OnMatchStarted();
	void DestroyFX();
	void ExecuteUbergraph_BP_ReconDrone(int32 EntryPoint);
	void HandleDestroyReason();
	void ProcessInfoForAnimation();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Tags_for_Enemy(class AGzMultiPartCharacter* InputPin, bool* NewParam);
	void Remove_Tags_for_Enemy(class AGzMultiPartCharacter* InputPin);
	void UpdateForEnemy();
	void UpdatePool();
	void UpdateRevealedActors();
	void UpdateScaned();
	void Vector_1D_Max(double Vector, double B, double* Max);

	EGzDefilerTargetType GetDefilerTargetType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReconDrone_C">();
	}
	static class ABP_ReconDrone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ReconDrone_C>();
	}
};
static_assert(alignof(ABP_ReconDrone_C) == 0x000008, "Wrong alignment on ABP_ReconDrone_C");
static_assert(sizeof(ABP_ReconDrone_C) == 0x000540, "Wrong size on ABP_ReconDrone_C");
static_assert(offsetof(ABP_ReconDrone_C, UberGraphFrame) == 0x000480, "Member 'ABP_ReconDrone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, Model) == 0x000488, "Member 'ABP_ReconDrone_C::Model' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, BP_Drone_RandomLocationComponent) == 0x000490, "Member 'ABP_ReconDrone_C::BP_Drone_RandomLocationComponent' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, MarkerComponent) == 0x000498, "Member 'ABP_ReconDrone_C::MarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, NS_DroneArm_Propulsion) == 0x0004A0, "Member 'ABP_ReconDrone_C::NS_DroneArm_Propulsion' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, Sphere) == 0x0004A8, "Member 'ABP_ReconDrone_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, GzStreamable) == 0x0004B0, "Member 'ABP_ReconDrone_C::GzStreamable' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, MaxTargetLocation) == 0x0004B8, "Member 'ABP_ReconDrone_C::MaxTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, FlySpeed) == 0x0004C0, "Member 'ABP_ReconDrone_C::FlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, TargetLocation) == 0x0004C8, "Member 'ABP_ReconDrone_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, DroneLounchAudio) == 0x0004E0, "Member 'ABP_ReconDrone_C::DroneLounchAudio' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, bEnemyDrone) == 0x0004E8, "Member 'ABP_ReconDrone_C::bEnemyDrone' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, RevealedDebuffForEnemy) == 0x0004EC, "Member 'ABP_ReconDrone_C::RevealedDebuffForEnemy' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, OnScanStateChanged) == 0x0004F8, "Member 'ABP_ReconDrone_C::OnScanStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, bStarted) == 0x000508, "Member 'ABP_ReconDrone_C::bStarted' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, CachedActors) == 0x000510, "Member 'ABP_ReconDrone_C::CachedActors' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, AllActors) == 0x000520, "Member 'ABP_ReconDrone_C::AllActors' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, TimerUpdateRevealedActors) == 0x000530, "Member 'ABP_ReconDrone_C::TimerUpdateRevealedActors' has a wrong offset!");
static_assert(offsetof(ABP_ReconDrone_C, TimerGetAllActors) == 0x000538, "Member 'ABP_ReconDrone_C::TimerGetAllActors' has a wrong offset!");

}

