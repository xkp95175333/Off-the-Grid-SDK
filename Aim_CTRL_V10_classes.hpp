#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Aim_CTRL_V10

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass Aim_CTRL_V10.Aim_CTRL_V10_C
// 0x03E8 (0x0E90 - 0x0AA8)
class UAim_CTRL_V10_C final : public UControlRig
{
public:
	struct FVector                                AimTransform;                                      // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAim;                                             // 0x0AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightArm;                                          // 0x0AC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightShoulder;                                     // 0x0AC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftArm;                                           // 0x0AC3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalViewTarget;                                 // 0x0AC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5738[0x3];                                     // 0x0AC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetAimWithoutCorrection;                        // 0x0AC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartDistance;                                     // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinimalDistance;                                   // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Stand;                                   // 0x0AF0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Laim_Stand;                                   // 0x0B50(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Stand;                                   // 0x0BB0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Raim_Stand;                                   // 0x0C10(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Crouch;                                  // 0x0C70(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Laim_Crouch;                                  // 0x0CD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Crouch;                                  // 0x0D30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Raim_Crouch;                                  // 0x0D90(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouch;                                          // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftShoulder;                                      // 0x0DF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5739[0x6];                                     // 0x0DF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pitch;                                             // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_573A[0x8];                                     // 0x0E08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0E10(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKneeSlide;                                       // 0x0E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLegless;                                         // 0x0E71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pistol;                                            // 0x0E72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_573B[0x5];                                     // 0x0E73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Component_Aim_Location;                            // 0x0E78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Aim_CTRL_V10_C">();
	}
	static class UAim_CTRL_V10_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAim_CTRL_V10_C>();
	}
};
static_assert(alignof(UAim_CTRL_V10_C) == 0x000010, "Wrong alignment on UAim_CTRL_V10_C");
static_assert(sizeof(UAim_CTRL_V10_C) == 0x000E90, "Wrong size on UAim_CTRL_V10_C");
static_assert(offsetof(UAim_CTRL_V10_C, AimTransform) == 0x000AA8, "Member 'UAim_CTRL_V10_C::AimTransform' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, IsAim) == 0x000AC0, "Member 'UAim_CTRL_V10_C::IsAim' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, RightArm) == 0x000AC1, "Member 'UAim_CTRL_V10_C::RightArm' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, RightShoulder) == 0x000AC2, "Member 'UAim_CTRL_V10_C::RightShoulder' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, LeftArm) == 0x000AC3, "Member 'UAim_CTRL_V10_C::LeftArm' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, IsLocalViewTarget) == 0x000AC4, "Member 'UAim_CTRL_V10_C::IsLocalViewTarget' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, TargetAimWithoutCorrection) == 0x000AC8, "Member 'UAim_CTRL_V10_C::TargetAimWithoutCorrection' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, StartDistance) == 0x000AE0, "Member 'UAim_CTRL_V10_C::StartDistance' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, MinimalDistance) == 0x000AE8, "Member 'UAim_CTRL_V10_C::MinimalDistance' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Rarm_Raim_Stand) == 0x000AF0, "Member 'UAim_CTRL_V10_C::Rarm_Raim_Stand' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Rarm_Laim_Stand) == 0x000B50, "Member 'UAim_CTRL_V10_C::Rarm_Laim_Stand' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Larm_Laim_Stand) == 0x000BB0, "Member 'UAim_CTRL_V10_C::Larm_Laim_Stand' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Larm_Raim_Stand) == 0x000C10, "Member 'UAim_CTRL_V10_C::Larm_Raim_Stand' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Rarm_Raim_Crouch) == 0x000C70, "Member 'UAim_CTRL_V10_C::Rarm_Raim_Crouch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Rarm_Laim_Crouch) == 0x000CD0, "Member 'UAim_CTRL_V10_C::Rarm_Laim_Crouch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Larm_Laim_Crouch) == 0x000D30, "Member 'UAim_CTRL_V10_C::Larm_Laim_Crouch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Larm_Raim_Crouch) == 0x000D90, "Member 'UAim_CTRL_V10_C::Larm_Raim_Crouch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, IsCrouch) == 0x000DF0, "Member 'UAim_CTRL_V10_C::IsCrouch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, LeftShoulder) == 0x000DF1, "Member 'UAim_CTRL_V10_C::LeftShoulder' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Pitch) == 0x000DF8, "Member 'UAim_CTRL_V10_C::Pitch' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Yaw) == 0x000E00, "Member 'UAim_CTRL_V10_C::Yaw' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Transform) == 0x000E10, "Member 'UAim_CTRL_V10_C::Transform' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, IsKneeSlide) == 0x000E70, "Member 'UAim_CTRL_V10_C::IsKneeSlide' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, IsLegless) == 0x000E71, "Member 'UAim_CTRL_V10_C::IsLegless' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Pistol) == 0x000E72, "Member 'UAim_CTRL_V10_C::Pistol' has a wrong offset!");
static_assert(offsetof(UAim_CTRL_V10_C, Component_Aim_Location) == 0x000E78, "Member 'UAim_CTRL_V10_C::Component_Aim_Location' has a wrong offset!");

}

