#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TetherEnd_Preview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.ExecuteUbergraph_BP_TetherEnd_Preview
// 0x0004 (0x0004 - 0x0000)
struct BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview) == 0x000004, "Wrong alignment on BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview");
static_assert(sizeof(BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview) == 0x000004, "Wrong size on BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview");
static_assert(offsetof(BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview, EntryPoint) == 0x000000, "Member 'BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview::EntryPoint' has a wrong offset!");

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.SetupMaterials
// 0x0010 (0x0010 - 0x0000)
struct BP_TetherEnd_Preview_C_SetupMaterials final
{
public:
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TetherEnd_Preview_C_SetupMaterials) == 0x000008, "Wrong alignment on BP_TetherEnd_Preview_C_SetupMaterials");
static_assert(sizeof(BP_TetherEnd_Preview_C_SetupMaterials) == 0x000010, "Wrong size on BP_TetherEnd_Preview_C_SetupMaterials");
static_assert(offsetof(BP_TetherEnd_Preview_C_SetupMaterials, CallFunc_GetMaterial_ReturnValue) == 0x000000, "Member 'BP_TetherEnd_Preview_C_SetupMaterials::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_SetupMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_TetherEnd_Preview_C_SetupMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateColors
// 0x0018 (0x0018 - 0x0000)
struct BP_TetherEnd_Preview_C_UpdateColors final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TetherEnd_Preview_C_UpdateColors) == 0x000008, "Wrong alignment on BP_TetherEnd_Preview_C_UpdateColors");
static_assert(sizeof(BP_TetherEnd_Preview_C_UpdateColors) == 0x000018, "Wrong size on BP_TetherEnd_Preview_C_UpdateColors");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateColors, IsValid) == 0x000000, "Member 'BP_TetherEnd_Preview_C_UpdateColors::IsValid' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateColors, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_TetherEnd_Preview_C_UpdateColors::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateColors, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000010, "Member 'BP_TetherEnd_Preview_C_UpdateColors::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateLaserTransform
// 0x0270 (0x0270 - 0x0000)
struct BP_TetherEnd_Preview_C_UpdateLaserTransform final
{
public:
	EGzLimbType                                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5060[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5061[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5062[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzLimbComponent*                       CallFunc_GetLoadedLimbComponent_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5063[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5064[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0170(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_TetherEnd_Preview_C_UpdateLaserTransform) == 0x000010, "Wrong alignment on BP_TetherEnd_Preview_C_UpdateLaserTransform");
static_assert(sizeof(BP_TetherEnd_Preview_C_UpdateLaserTransform) == 0x000270, "Wrong size on BP_TetherEnd_Preview_C_UpdateLaserTransform");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, Type) == 0x000000, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::Type' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, Temp_name_Variable) == 0x000004, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, Temp_name_Variable_1) == 0x00000C, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, Temp_name_Variable_2) == 0x000014, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, Temp_byte_Variable) == 0x00001C, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, K2Node_Select_Default) == 0x000020, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000060, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_GetLoadedLimbComponent_ReturnValue) == 0x000070, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_GetLoadedLimbComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_GetSocketLocation_ReturnValue) == 0x000078, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_VSize_ReturnValue) == 0x0000B0, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_Normal_ReturnValue) == 0x0000B8, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_MakeRotFromZ_ReturnValue) == 0x0000D8, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_MakeVector_ReturnValue) == 0x0000F0, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateLaserTransform, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000170, "Member 'BP_TetherEnd_Preview_C_UpdateLaserTransform::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateSphere
// 0x0158 (0x0158 - 0x0000)
struct BP_TetherEnd_Preview_C_UpdateSphere final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5065[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   LimbType;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5066[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0058(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TetherEnd_Preview_C_UpdateSphere) == 0x000008, "Wrong alignment on BP_TetherEnd_Preview_C_UpdateSphere");
static_assert(sizeof(BP_TetherEnd_Preview_C_UpdateSphere) == 0x000158, "Wrong size on BP_TetherEnd_Preview_C_UpdateSphere");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, IsValid) == 0x000000, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::IsValid' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, Location) == 0x000008, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::Location' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, Normal) == 0x000020, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::Normal' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, LimbType) == 0x000038, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::LimbType' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000040, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000058, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_TetherEnd_Preview_C_UpdateSphere, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000150, "Member 'BP_TetherEnd_Preview_C_UpdateSphere::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

}

