#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_Grapple_R

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "ABP_CLA_Grapple_R_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ControlRig_structs.hpp"
#include "G01_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CLA_Grapple_R.ABP_CLA_Grapple_R_C
// 0x0C30 (0x0FA0 - 0x0370)
class UABP_CLA_Grapple_R_C final : public UAnimInstance
{
public:
	uint8                                         Pad_6909[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_CLA_Grapple_R::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0390(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x03B0(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0880(0x00F0)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x0970(0x0158)(ContainsInstancedReference)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0AC8(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0B10(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0B60(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0B88(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0BB0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0BF8(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x0C18(0x0040)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0C58(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0D20(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0D68(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0D88(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0DD0(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0DF0(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0E30(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0E50(0x00C8)()
	class UAnimInstance*                          K2Node_PropertyAccess_9;                           // 0x0F18(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzLimbTypeFlags                              K2Node_PropertyAccess_8;                           // 0x0F20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_7;                           // 0x0F21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_6;                           // 0x0F22(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_5;                           // 0x0F23(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_4;                           // 0x0F24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_690A[0x3];                                     // 0x0F25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_3;                           // 0x0F28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_ShouldSetTransform_C0EB4AD5426949935CC88484C429E0CD; // 0x0F40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_690B[0x7];                                     // 0x0F41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_Grapple_Target_C0EB4AD5426949935CC88484C429E0CD; // 0x0F48(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_2;                           // 0x0F60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           K2Node_PropertyAccess_1;                           // 0x0F61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbTypeFlags                              K2Node_PropertyAccess;                             // 0x0F62(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_690C[0x5];                                     // 0x0F63(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LOD_count;                                         // 0x0F68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Mat_count_Graple;                                  // 0x0F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Grapple_Material_ID;                               // 0x0F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hand_Material_ID;                                  // 0x0F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzGrappleHookState                           PreviousGrappleHookState;                          // 0x0F90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_HideGrapple();
	void AnimNotify_ShowGraple();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_ApplyAdditive_3F43B2E249A36AD353098C969AD8804E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_ControlRig_C0EB4AD5426949935CC88484C429E0CD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_SequencePlayer_82AE75B2409EB846B382348B9EF1FA91();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_TransitionResult_03978574454E988E1ADF378727ECD461();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_TransitionResult_99792B5B4DB7B0B5BD26F7AE70CA114E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CLA_Grapple_R_AnimGraphNode_TransitionResult_F1E44BB84DB29D16F48DABB73A6D5CE6();
	void ExecuteUbergraph_ABP_CLA_Grapple_R(int32 EntryPoint);
	class AGzPlayerCharacter* GetCharacterData();
	class UABP_Human_C* GetMainThreadSafeAnimation();
	void SetGrappleHookVisible(bool IsVisible);
	void SwapHandWithGrappleHook(bool Reversed);
	void SwitchToSkeletalGrappleHook();
	void SwitchToStaticGrappleHook();
	void UnHideMaterialSlots(TArray<int32>& LODs, TArray<int32>& Materials);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CLA_Grapple_R_C">();
	}
	static class UABP_CLA_Grapple_R_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CLA_Grapple_R_C>();
	}
};
static_assert(alignof(UABP_CLA_Grapple_R_C) == 0x000010, "Wrong alignment on UABP_CLA_Grapple_R_C");
static_assert(sizeof(UABP_CLA_Grapple_R_C) == 0x000FA0, "Wrong size on UABP_CLA_Grapple_R_C");
static_assert(offsetof(UABP_CLA_Grapple_R_C, UberGraphFrame) == 0x000370, "Member 'UABP_CLA_Grapple_R_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_CLA_Grapple_R_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UABP_CLA_Grapple_R_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UABP_CLA_Grapple_R_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_Root) == 0x000390, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_ControlRig) == 0x0003B0, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_LayeredBoneBlend) == 0x000880, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_CopyPoseFromMesh) == 0x000970, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_Slot) == 0x000AC8, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_TransitionResult_3) == 0x000B10, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_TransitionResult_2) == 0x000B38, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_TransitionResult_1) == 0x000B60, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_TransitionResult) == 0x000B88, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_SequencePlayer_2) == 0x000BB0, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_StateResult_3) == 0x000BF8, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_SequenceEvaluator_1) == 0x000C18, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_ApplyAdditive) == 0x000C58, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_SequencePlayer_1) == 0x000D20, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_StateResult_2) == 0x000D68, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_SequencePlayer) == 0x000D88, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_StateResult_1) == 0x000DD0, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_SequenceEvaluator) == 0x000DF0, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_StateResult) == 0x000E30, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, AnimGraphNode_StateMachine) == 0x000E50, "Member 'UABP_CLA_Grapple_R_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_9) == 0x000F18, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_8) == 0x000F20, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_7) == 0x000F21, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_6) == 0x000F22, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_5) == 0x000F23, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_4) == 0x000F24, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_3) == 0x000F28, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, __CustomProperty_ShouldSetTransform_C0EB4AD5426949935CC88484C429E0CD) == 0x000F40, "Member 'UABP_CLA_Grapple_R_C::__CustomProperty_ShouldSetTransform_C0EB4AD5426949935CC88484C429E0CD' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, __CustomProperty_Grapple_Target_C0EB4AD5426949935CC88484C429E0CD) == 0x000F48, "Member 'UABP_CLA_Grapple_R_C::__CustomProperty_Grapple_Target_C0EB4AD5426949935CC88484C429E0CD' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_2) == 0x000F60, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess_1) == 0x000F61, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, K2Node_PropertyAccess) == 0x000F62, "Member 'UABP_CLA_Grapple_R_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, LOD_count) == 0x000F68, "Member 'UABP_CLA_Grapple_R_C::LOD_count' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, Mat_count_Graple) == 0x000F78, "Member 'UABP_CLA_Grapple_R_C::Mat_count_Graple' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, Grapple_Material_ID) == 0x000F88, "Member 'UABP_CLA_Grapple_R_C::Grapple_Material_ID' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, Hand_Material_ID) == 0x000F8C, "Member 'UABP_CLA_Grapple_R_C::Hand_Material_ID' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Grapple_R_C, PreviousGrappleHookState) == 0x000F90, "Member 'UABP_CLA_Grapple_R_C::PreviousGrappleHookState' has a wrong offset!");

}

