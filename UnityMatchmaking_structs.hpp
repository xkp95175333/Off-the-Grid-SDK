#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnityMatchmaking

#include "Basic.hpp"


namespace SDK
{

// Enum UnityMatchmaking.EUnityTicketStatus
// NumValues: 0x0006
enum class EUnityTicketStatus : uint8
{
	Invalid                                  = 0,
	Timeout                                  = 1,
	Failed                                   = 2,
	InProgress                               = 3,
	Found                                    = 4,
	EUnityTicketStatus_MAX                   = 5,
};

// ScriptStruct UnityMatchmaking.UnityTicketStatusResult
// 0x0040 (0x0040 - 0x0000)
struct FUnityTicketStatusResult final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnityTicketStatus                            Status;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2431[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ip;                                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2432[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnityTicketStatusResult) == 0x000008, "Wrong alignment on FUnityTicketStatusResult");
static_assert(sizeof(FUnityTicketStatusResult) == 0x000040, "Wrong size on FUnityTicketStatusResult");
static_assert(offsetof(FUnityTicketStatusResult, Message) == 0x000000, "Member 'FUnityTicketStatusResult::Message' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusResult, Status) == 0x000010, "Member 'FUnityTicketStatusResult::Status' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusResult, Ip) == 0x000018, "Member 'FUnityTicketStatusResult::Ip' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusResult, Port) == 0x000028, "Member 'FUnityTicketStatusResult::Port' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusResult, MatchID) == 0x000030, "Member 'FUnityTicketStatusResult::MatchID' has a wrong offset!");

// ScriptStruct UnityMatchmaking.GzQosServerInfo
// 0x0030 (0x0030 - 0x0000)
struct FGzQosServerInfo final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LocationId;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2433[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ipv4;                                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Port;                                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2434[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGzQosServerInfo) == 0x000008, "Wrong alignment on FGzQosServerInfo");
static_assert(sizeof(FGzQosServerInfo) == 0x000030, "Wrong size on FGzQosServerInfo");
static_assert(offsetof(FGzQosServerInfo, RegionId) == 0x000000, "Member 'FGzQosServerInfo::RegionId' has a wrong offset!");
static_assert(offsetof(FGzQosServerInfo, LocationId) == 0x000010, "Member 'FGzQosServerInfo::LocationId' has a wrong offset!");
static_assert(offsetof(FGzQosServerInfo, Ipv4) == 0x000018, "Member 'FGzQosServerInfo::Ipv4' has a wrong offset!");
static_assert(offsetof(FGzQosServerInfo, Port) == 0x000028, "Member 'FGzQosServerInfo::Port' has a wrong offset!");

// ScriptStruct UnityMatchmaking.UnityTicketStatusError
// 0x0038 (0x0038 - 0x0000)
struct FUnityTicketStatusError final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2435[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Detail;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnityTicketStatusError) == 0x000008, "Wrong alignment on FUnityTicketStatusError");
static_assert(sizeof(FUnityTicketStatusError) == 0x000038, "Wrong size on FUnityTicketStatusError");
static_assert(offsetof(FUnityTicketStatusError, ErrorCode) == 0x000000, "Member 'FUnityTicketStatusError::ErrorCode' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusError, Type) == 0x000008, "Member 'FUnityTicketStatusError::Type' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusError, Title) == 0x000018, "Member 'FUnityTicketStatusError::Title' has a wrong offset!");
static_assert(offsetof(FUnityTicketStatusError, Detail) == 0x000028, "Member 'FUnityTicketStatusError::Detail' has a wrong offset!");

// ScriptStruct UnityMatchmaking.GzQosServerDiscoveryResult
// 0x0010 (0x0010 - 0x0000)
struct FGzQosServerDiscoveryResult final
{
public:
	TArray<struct FGzQosServerInfo>               Servers;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGzQosServerDiscoveryResult) == 0x000008, "Wrong alignment on FGzQosServerDiscoveryResult");
static_assert(sizeof(FGzQosServerDiscoveryResult) == 0x000010, "Wrong size on FGzQosServerDiscoveryResult");
static_assert(offsetof(FGzQosServerDiscoveryResult, Servers) == 0x000000, "Member 'FGzQosServerDiscoveryResult::Servers' has a wrong offset!");

// ScriptStruct UnityMatchmaking.GzUnityPingResult
// 0x0018 (0x0018 - 0x0000)
struct FGzUnityPingResult final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Latency;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PacketLoss;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGzUnityPingResult) == 0x000008, "Wrong alignment on FGzUnityPingResult");
static_assert(sizeof(FGzUnityPingResult) == 0x000018, "Wrong size on FGzUnityPingResult");
static_assert(offsetof(FGzUnityPingResult, RegionId) == 0x000000, "Member 'FGzUnityPingResult::RegionId' has a wrong offset!");
static_assert(offsetof(FGzUnityPingResult, Latency) == 0x000010, "Member 'FGzUnityPingResult::Latency' has a wrong offset!");
static_assert(offsetof(FGzUnityPingResult, PacketLoss) == 0x000014, "Member 'FGzUnityPingResult::PacketLoss' has a wrong offset!");

}

