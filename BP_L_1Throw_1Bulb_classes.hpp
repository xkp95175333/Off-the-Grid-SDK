#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_L_1Throw_1Bulb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_Main_Throw_Light_01_Settings_structs.hpp"
#include "S_LED_Diode_01_structs.hpp"
#include "S_Bulb_Light_01_Settings_structs.hpp"
#include "S_Light_Presets_structs.hpp"
#include "S_Light_Fitting_Mesh_Settings_structs.hpp"
#include "S_Bulb_01_Settings_structs.hpp"
#include "S_Bulb_Light_01_Emissive_Settings_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_L_1Throw_1Bulb.BP_L_1Throw_1Bulb_C
// 0x06C0 (0x0960 - 0x02A0)
class ABP_L_1Throw_1Bulb_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6962[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Light_Fitting_Mesh_Settings         Light_Fitting_Mesh_Settings;                       // 0x02C0(0x0120)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_Bulb_01_Settings                    Bulb_01_Settings;                                  // 0x03E0(0x00F0)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_LED_Diode_01                        LED_Diode_Settings;                                // 0x04D0(0x0070)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_Bulb_Light_01_Emissive_Settings     Bulb_01_Emissive_Settings;                         // 0x0540(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Bulb_Light_01_Settings              Bulb_Light_01_Settings;                            // 0x0560(0x0140)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_Main_Throw_Light_01_Settings        Main_Throw_Light_01_Settings;                      // 0x06A0(0x01E0)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_Light_Presets                       Light_Presets;                                     // 0x0880(0x0003)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6963[0x5];                                     // 0x0883(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Prop_Mesh_Ref;                                     // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Lumen_Int;                                   // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Emissive_Int;                                // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Final_Colour;                                      // 0x08A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LockedProp;                                        // 0x08B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LockedAnchor;                                      // 0x08D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreProp;                                           // 0x08E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreAnchor;                                         // 0x0900(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        PrevSplinePoint0;                                  // 0x0918(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        PrevSplinePoint1;                                  // 0x0928(0x0010)(Edit, BlueprintVisible)
	bool                                          FirstRun;                                          // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6964[0x7];                                     // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineLocation;                                    // 0x0940(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddSuspensionCable();
	void CalculateSuspensionDefaultPos();
	void ExecuteUbergraph_BP_L_1Throw_1Bulb(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_L_1Throw_1Bulb_C">();
	}
	static class ABP_L_1Throw_1Bulb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_L_1Throw_1Bulb_C>();
	}
};
static_assert(alignof(ABP_L_1Throw_1Bulb_C) == 0x000010, "Wrong alignment on ABP_L_1Throw_1Bulb_C");
static_assert(sizeof(ABP_L_1Throw_1Bulb_C) == 0x000960, "Wrong size on ABP_L_1Throw_1Bulb_C");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_L_1Throw_1Bulb_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Spline) == 0x0002A8, "Member 'ABP_L_1Throw_1Bulb_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_L_1Throw_1Bulb_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Light_Fitting_Mesh_Settings) == 0x0002C0, "Member 'ABP_L_1Throw_1Bulb_C::Light_Fitting_Mesh_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Bulb_01_Settings) == 0x0003E0, "Member 'ABP_L_1Throw_1Bulb_C::Bulb_01_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, LED_Diode_Settings) == 0x0004D0, "Member 'ABP_L_1Throw_1Bulb_C::LED_Diode_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Bulb_01_Emissive_Settings) == 0x000540, "Member 'ABP_L_1Throw_1Bulb_C::Bulb_01_Emissive_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Bulb_Light_01_Settings) == 0x000560, "Member 'ABP_L_1Throw_1Bulb_C::Bulb_Light_01_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Main_Throw_Light_01_Settings) == 0x0006A0, "Member 'ABP_L_1Throw_1Bulb_C::Main_Throw_Light_01_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Light_Presets) == 0x000880, "Member 'ABP_L_1Throw_1Bulb_C::Light_Presets' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Prop_Mesh_Ref) == 0x000888, "Member 'ABP_L_1Throw_1Bulb_C::Prop_Mesh_Ref' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Final_Lumen_Int) == 0x000890, "Member 'ABP_L_1Throw_1Bulb_C::Final_Lumen_Int' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Final_Emissive_Int) == 0x000898, "Member 'ABP_L_1Throw_1Bulb_C::Final_Emissive_Int' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, Final_Colour) == 0x0008A0, "Member 'ABP_L_1Throw_1Bulb_C::Final_Colour' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, LockedProp) == 0x0008B8, "Member 'ABP_L_1Throw_1Bulb_C::LockedProp' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, LockedAnchor) == 0x0008D0, "Member 'ABP_L_1Throw_1Bulb_C::LockedAnchor' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, PreProp) == 0x0008E8, "Member 'ABP_L_1Throw_1Bulb_C::PreProp' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, PreAnchor) == 0x000900, "Member 'ABP_L_1Throw_1Bulb_C::PreAnchor' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, PrevSplinePoint0) == 0x000918, "Member 'ABP_L_1Throw_1Bulb_C::PrevSplinePoint0' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, PrevSplinePoint1) == 0x000928, "Member 'ABP_L_1Throw_1Bulb_C::PrevSplinePoint1' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, FirstRun) == 0x000938, "Member 'ABP_L_1Throw_1Bulb_C::FirstRun' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_1Bulb_C, SplineLocation) == 0x000940, "Member 'ABP_L_1Throw_1Bulb_C::SplineLocation' has a wrong offset!");

}

