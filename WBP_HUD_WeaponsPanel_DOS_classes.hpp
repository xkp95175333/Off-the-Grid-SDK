#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUD_WeaponsPanel_DOS

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HUD_WeaponsPanel_DOS.WBP_HUD_WeaponsPanel_DOS_C
// 0x0060 (0x03A0 - 0x0340)
class UWBP_HUD_WeaponsPanel_DOS_C final : public UGzHUDComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_HUD_SelectedWeaponItem_DOS_C*      WBP_HUD_SelectedWeaponItem_DOS;                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_WeaponItem_DOS_C*              WBP_HUD_WeaponItem_DOS_0;                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_WeaponItem_DOS_C*              WBP_HUD_WeaponItem_DOS_1;                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_WeaponItem_DOS_C*              WBP_HUD_WeaponItem_DOS_2;                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         WeaponSlot_HorizontalBox;                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWBP_HUD_WeaponItem_DOS_C*>      WeaponPocketWidget;                                // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_HUD_WeaponItem_DOS_C*              SelectedSlot;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGzInvPocketId                         SelectedPocketId;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzWeaponActor*                         SelectedWeaponActor;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskGameplayTagAddedRemoved*    SwitchArmTask;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateBlockSlotsState(bool bLocked);
	void BindToAmmoChange();
	void CheckIfLimbIsActive(bool* HasLimbActive);
	void Destruct();
	void ExecuteUbergraph_WBP_HUD_WeaponsPanel_DOS(int32 EntryPoint);
	void GetChangedPocket(const struct FGzInvPocketId& ChangedPocketId, class UWBP_HUD_WeaponItem_DOS_C** Array_Element);
	class UGzCombatComponent* GetCombatComponent();
	void GetDesiredOrEquippedPocket(bool* Desired, struct FGzInvPocketId* Pocket);
	void Is_Valid_Weapon(const struct FGzInvPocketId& PocketId, bool* bValid);
	void ListenBlock(class AGzCharacter* Character);
	void OnInitialized();
	void OnInputMethodChanged(ECommonInputType bNewInputType);
	void OnInventoryChanged(EGzInvChangeEvent State, const struct FGzInvItem& Item);
	void OnOperableObjectChanged(class UGzOperableObjectComponent* OperableObjectComponent);
	void OnWeaponPocketChanged(const struct FGzInvPocketId& InPocketId);
	void ReceiveBindEvents(class APawn* NewViewTarget);
	void ReceiveUnbindEvents(class APawn* OldViewTarget);
	void Update_Selected_Slot(const struct FGzInvPocketId& ChangedPocketId);
	void UpdateActionInputOnController(const struct FGzInvPocketId& ChangedPocketId);
	void UpdateClipAmmoAmount(int32 ClipAmount);
	void VisualsForTheSelectionPockets(bool ClearOldSelection);
	void WeaponChanged(const struct FGzInvPocketId& PocketId, class AGzWeaponActor* WeaponActor);
	void WeaponChangeSkipAFrame(const struct FGzInvPocketId& PocketId, class AGzWeaponActor* WeaponActor);
	void WeaponPocketChangeWaitToUpdate(const struct FGzInvPocketId& PocketId);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HUD_WeaponsPanel_DOS_C">();
	}
	static class UWBP_HUD_WeaponsPanel_DOS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HUD_WeaponsPanel_DOS_C>();
	}
};
static_assert(alignof(UWBP_HUD_WeaponsPanel_DOS_C) == 0x000008, "Wrong alignment on UWBP_HUD_WeaponsPanel_DOS_C");
static_assert(sizeof(UWBP_HUD_WeaponsPanel_DOS_C) == 0x0003A0, "Wrong size on UWBP_HUD_WeaponsPanel_DOS_C");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, UberGraphFrame) == 0x000340, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WBP_HUD_SelectedWeaponItem_DOS) == 0x000348, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WBP_HUD_SelectedWeaponItem_DOS' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WBP_HUD_WeaponItem_DOS_0) == 0x000350, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WBP_HUD_WeaponItem_DOS_0' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WBP_HUD_WeaponItem_DOS_1) == 0x000358, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WBP_HUD_WeaponItem_DOS_1' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WBP_HUD_WeaponItem_DOS_2) == 0x000360, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WBP_HUD_WeaponItem_DOS_2' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WeaponSlot_HorizontalBox) == 0x000368, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WeaponSlot_HorizontalBox' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, WeaponPocketWidget) == 0x000370, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::WeaponPocketWidget' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, SelectedSlot) == 0x000380, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::SelectedSlot' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, SelectedPocketId) == 0x000388, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::SelectedPocketId' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, SelectedWeaponActor) == 0x000390, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::SelectedWeaponActor' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_WeaponsPanel_DOS_C, SwitchArmTask) == 0x000398, "Member 'UWBP_HUD_WeaponsPanel_DOS_C::SwitchArmTask' has a wrong offset!");

}

