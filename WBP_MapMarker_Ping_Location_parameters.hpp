#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapMarker_Ping_Location

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_PingContent_structs.hpp"


namespace SDK::Params
{

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.ExecuteUbergraph_WBP_MapMarker_Ping_Location
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AED[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0008(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetItemPingIcon_ValidItem;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AEE[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AGzPlayerState* PlayerState, struct FGzPingData& PingData, bool bAgree)> K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            K2Node_CustomEvent_PingData;                       // 0x0088(0x0060)(ConstParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAgree;                         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location) == 0x0000F0, "Wrong size on WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, EntryPoint) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, CallFunc_GetPingData_ReturnValue) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, CallFunc_SetItemPingIcon_ValidItem) == 0x000069, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::CallFunc_SetItemPingIcon_ValidItem' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, CallFunc_SelectInt_ReturnValue) == 0x00006C, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, K2Node_CustomEvent_PlayerState) == 0x000080, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, K2Node_CustomEvent_PingData) == 0x000088, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::K2Node_CustomEvent_PingData' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location, K2Node_CustomEvent_bAgree) == 0x0000E8, "Member 'WBP_MapMarker_Ping_Location_C_ExecuteUbergraph_WBP_MapMarker_Ping_Location::K2Node_CustomEvent_bAgree' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.OnPingAgreementChanged
// 0x0070 (0x0070 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            PingData;                                          // 0x0008(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bAgree;                                            // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged) == 0x000070, "Wrong size on WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged, PlayerState) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged, PingData) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged::PingData' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged, bAgree) == 0x000068, "Member 'WBP_MapMarker_Ping_Location_C_OnPingAgreementChanged::bAgree' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.SetBackgroundColor
// 0x0080 (0x0080 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_SetBackgroundColor final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0008(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AEF[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_SetBackgroundColor");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor) == 0x000080, "Wrong size on WBP_MapMarker_Ping_Location_C_SetBackgroundColor");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_SetBackgroundColor::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor, CallFunc_GetPingData_ReturnValue) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_SetBackgroundColor::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000068, "Member 'WBP_MapMarker_Ping_Location_C_SetBackgroundColor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetBackgroundColor, CallFunc_SelectColor_ReturnValue) == 0x00006C, "Member 'WBP_MapMarker_Ping_Location_C_SetBackgroundColor::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.SetItemPingIcon
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_SetItemPingIcon final
{
public:
	class UObject*                                ItemObject;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidItem;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF0[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzWeaponPickable*                      K2Node_DynamicCast_AsGz_Weapon_Pickable;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF1[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzWeaponInvItem                       CallFunc_GetWeaponItem_ReturnValue;                // 0x0020(0x0050)(ConstParm)
	class AGzPickableBase*                        K2Node_DynamicCast_AsGz_Pickable_Base;             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF2[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 CallFunc_GetRarity_ReturnValue;                    // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF3[0x1];                                     // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF4[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzLimbPickable*                        K2Node_DynamicCast_AsGz_Limb_Pickable;             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   CallFunc_GetLimbType_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF5[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue_1;                // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetLimbIdentifier_ReturnValue;            // 0x00B8(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	EGzItemRarity                                 CallFunc_GetRarity_ReturnValue_1;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_2; // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF6[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue_1;             // 0x00E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_SetItemPingIcon");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon) == 0x0000F8, "Wrong size on WBP_MapMarker_Ping_Location_C_SetItemPingIcon");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, ItemObject) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::ItemObject' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, ValidItem) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::ValidItem' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_AsGz_Weapon_Pickable) == 0x000010, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_AsGz_Weapon_Pickable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetWeaponItem_ReturnValue) == 0x000020, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetWeaponItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_AsGz_Pickable_Base) == 0x000070, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_AsGz_Pickable_Base' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetItemData_ReturnValue) == 0x000080, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000088, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000089, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetRarity_ReturnValue) == 0x00008A, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetRarityColor_ReturnValue) == 0x00008C, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_AsGz_Limb_Pickable) == 0x0000A0, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_AsGz_Limb_Pickable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetLimbType_ReturnValue) == 0x0000A9, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetLimbType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetItemData_ReturnValue_1) == 0x0000B0, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetItemData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetLimbIdentifier_ReturnValue) == 0x0000B8, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetLimbIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetRarity_ReturnValue_1) == 0x0000E0, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetRarity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_IsValidSoftObjectReference_ReturnValue_2) == 0x0000E1, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_IsValidSoftObjectReference_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetItemPingIcon, CallFunc_GetRarityColor_ReturnValue_1) == 0x0000E4, "Member 'WBP_MapMarker_Ping_Location_C_SetItemPingIcon::CallFunc_GetRarityColor_ReturnValue_1' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.SetPingIcon
// 0x01C8 (0x01C8 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_SetPingIcon final
{
public:
	struct FGameplayTagContainer                  EnemyTags;                                         // 0x0000(0x0020)(Edit, BlueprintVisible)
	struct FS_PingContent                         FoundPingTypeData;                                 // 0x0020(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF7[0x2];                                     // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_3;                              // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzPingTarget                                 Temp_byte_Variable;                                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF8[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x00B8(0x0060)(HasGetValueTypeHash)
	class AGzPlayerState*                         K2Node_DynamicCast_AsGz_Player_State;              // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AF9[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIndexInTeam_OutputPin;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Map_Find_Value;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFA[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetTeammateColorFromIndex_OutPlayerColor; // 0x0134(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x014C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFB[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0160(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_SetPingIcon) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_SetPingIcon");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_SetPingIcon) == 0x0001C8, "Wrong size on WBP_MapMarker_Ping_Location_C_SetPingIcon");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, EnemyTags) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::EnemyTags' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, FoundPingTypeData) == 0x000020, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::FoundPingTypeData' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable) == 0x000080, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable_1) == 0x000088, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable_2) == 0x000090, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000098, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_MatchesAnyTags_ReturnValue) == 0x000099, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable_3) == 0x00009C, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable_4) == 0x0000A4, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_name_Variable_5) == 0x0000AC, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, Temp_byte_Variable) == 0x0000B4, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_GetPingData_ReturnValue) == 0x0000B8, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, K2Node_DynamicCast_AsGz_Player_State) == 0x000118, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::K2Node_DynamicCast_AsGz_Player_State' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_GetIndexInTeam_OutputPin) == 0x000124, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_GetIndexInTeam_OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_Map_Find_Value) == 0x000128, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_Map_Find_ReturnValue) == 0x000130, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_GetTeammateColorFromIndex_OutPlayerColor) == 0x000134, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_GetTeammateColorFromIndex_OutPlayerColor' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, K2Node_Select_Default) == 0x000144, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_SelectColor_ReturnValue) == 0x00014C, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_GetDataTableRowFromName_OutRow) == 0x000160, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_SetPingIcon, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001C0, "Member 'WBP_MapMarker_Ping_Location_C_SetPingIcon::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.ShowItemDibs
// 0x0098 (0x0098 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_ShowItemDibs final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0010(0x0060)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFD[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFE[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         K2Node_DynamicCast_AsGz_Player_State;              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_ShowItemDibs) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_ShowItemDibs");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_ShowItemDibs) == 0x000098, "Wrong size on WBP_MapMarker_Ping_Location_C_ShowItemDibs");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_GetPingData_ReturnValue) == 0x000010, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_Array_Get_Item) == 0x000078, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000081, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, K2Node_DynamicCast_AsGz_Player_State) == 0x000088, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::K2Node_DynamicCast_AsGz_Player_State' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ShowItemDibs, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'WBP_MapMarker_Ping_Location_C_ShowItemDibs::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_MapMarker_Ping_Location.WBP_MapMarker_Ping_Location_C.ToggleItemDibsForPlayer
// 0x0090 (0x0090 - 0x0000)
struct WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Agree;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AFF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0010(0x0060)(HasGetValueTypeHash)
	int32                                         CallFunc_GetIndexInTeam_OutputPin;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B00[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         K2Node_DynamicCast_AsGz_Player_State;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B01[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIndexInTeam_OutputPin_1;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer) == 0x000008, "Wrong alignment on WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer");
static_assert(sizeof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer) == 0x000090, "Wrong size on WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, PlayerState) == 0x000000, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, Agree) == 0x000008, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::Agree' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, CallFunc_GetPingData_ReturnValue) == 0x000010, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, CallFunc_GetIndexInTeam_OutputPin) == 0x000070, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::CallFunc_GetIndexInTeam_OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, K2Node_DynamicCast_AsGz_Player_State) == 0x000078, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::K2Node_DynamicCast_AsGz_Player_State' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, CallFunc_GetIndexInTeam_OutputPin_1) == 0x000084, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::CallFunc_GetIndexInTeam_OutputPin_1' has a wrong offset!");
static_assert(offsetof(WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000088, "Member 'WBP_MapMarker_Ping_Location_C_ToggleItemDibsForPlayer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

}

