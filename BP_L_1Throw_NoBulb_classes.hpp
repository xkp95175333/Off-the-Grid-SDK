#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_L_1Throw_NoBulb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_Light_Presets_structs.hpp"
#include "S_Light_01_Emissive_Settings_structs.hpp"
#include "S_Prop_Mesh_01_structs.hpp"
#include "S_Light_01_Settings_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_L_1Throw_NoBulb.BP_L_1Throw_NoBulb_C
// 0x03B0 (0x0650 - 0x02A0)
class ABP_L_1Throw_NoBulb_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A18[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Prop_Mesh_01                        Prop_Mesh_01;                                      // 0x02C0(0x0120)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_Light_01_Emissive_Settings          Light_01_Emissive_Settings;                        // 0x03E0(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Light_01_Settings                   Light_01_Settings;                                 // 0x03F8(0x0178)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_Light_Presets                       Light_Presets;                                     // 0x0570(0x0003)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A19[0x5];                                     // 0x0573(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Preset_Kelvin;                                     // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Lumen_Int;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Emissive_Int;                                // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Final_Colour;                                      // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Mesh_Ref_;                                    // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LockedAnchor;                                      // 0x05B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LockedProp;                                        // 0x05C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        PrevSplinePoint0;                                  // 0x05E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        PrevSplinePoint1;                                  // 0x05F0(0x0010)(Edit, BlueprintVisible)
	struct FVector                                PreAnchor;                                         // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreProp;                                           // 0x0618(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineLocation;                                    // 0x0630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddSuspensionCable();
	void CalculateSuspensionDefaultPos();
	void ExecuteUbergraph_BP_L_1Throw_NoBulb(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_L_1Throw_NoBulb_C">();
	}
	static class ABP_L_1Throw_NoBulb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_L_1Throw_NoBulb_C>();
	}
};
static_assert(alignof(ABP_L_1Throw_NoBulb_C) == 0x000010, "Wrong alignment on ABP_L_1Throw_NoBulb_C");
static_assert(sizeof(ABP_L_1Throw_NoBulb_C) == 0x000650, "Wrong size on ABP_L_1Throw_NoBulb_C");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_L_1Throw_NoBulb_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Spline) == 0x0002A8, "Member 'ABP_L_1Throw_NoBulb_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_L_1Throw_NoBulb_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Prop_Mesh_01) == 0x0002C0, "Member 'ABP_L_1Throw_NoBulb_C::Prop_Mesh_01' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Light_01_Emissive_Settings) == 0x0003E0, "Member 'ABP_L_1Throw_NoBulb_C::Light_01_Emissive_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Light_01_Settings) == 0x0003F8, "Member 'ABP_L_1Throw_NoBulb_C::Light_01_Settings' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Light_Presets) == 0x000570, "Member 'ABP_L_1Throw_NoBulb_C::Light_Presets' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Preset_Kelvin) == 0x000578, "Member 'ABP_L_1Throw_NoBulb_C::Preset_Kelvin' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Final_Lumen_Int) == 0x000580, "Member 'ABP_L_1Throw_NoBulb_C::Final_Lumen_Int' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Final_Emissive_Int) == 0x000588, "Member 'ABP_L_1Throw_NoBulb_C::Final_Emissive_Int' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Final_Colour) == 0x000590, "Member 'ABP_L_1Throw_NoBulb_C::Final_Colour' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, Prop_Mesh_Ref_) == 0x0005A8, "Member 'ABP_L_1Throw_NoBulb_C::Prop_Mesh_Ref_' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, LockedAnchor) == 0x0005B0, "Member 'ABP_L_1Throw_NoBulb_C::LockedAnchor' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, LockedProp) == 0x0005C8, "Member 'ABP_L_1Throw_NoBulb_C::LockedProp' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, PrevSplinePoint0) == 0x0005E0, "Member 'ABP_L_1Throw_NoBulb_C::PrevSplinePoint0' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, PrevSplinePoint1) == 0x0005F0, "Member 'ABP_L_1Throw_NoBulb_C::PrevSplinePoint1' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, PreAnchor) == 0x000600, "Member 'ABP_L_1Throw_NoBulb_C::PreAnchor' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, PreProp) == 0x000618, "Member 'ABP_L_1Throw_NoBulb_C::PreProp' has a wrong offset!");
static_assert(offsetof(ABP_L_1Throw_NoBulb_C, SplineLocation) == 0x000630, "Member 'ABP_L_1Throw_NoBulb_C::SplineLocation' has a wrong offset!");

}

