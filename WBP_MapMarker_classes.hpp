#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapMarker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_MarkerPingPadding_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MapMarker.WBP_MapMarker_C
// 0x0168 (0x0508 - 0x03A0)
class UWBP_MapMarker_C : public UGzMapMarkerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_FadeOutFast;                                  // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeOutSlow;                                  // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Show;                                         // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Progress;                                     // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Highlight;                                    // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Highlight_Image;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           HoverText_GzText;                                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MarkerLarge_Image;                                 // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MarkerSmall_Image;                                 // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OpportunityBackplate_Image;                        // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OpportunitySpecialBorder_Image;                    // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress_Image;                                    // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress_Image_Dashed;                             // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressBackground_Image;                          // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressBackground_Image_Dashed;                   // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ProgressImage_Switcher;                            // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Size_WidgetSwitcher;                               // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Marker_PingFeedback_C*             WBP_Marker_PingFeedback;                           // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             MarkerIcon_Large;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultColor;                                      // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ColorOnHighlight;                                  // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeSizeOnZoom;                                  // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A49[0x6];                                     // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZoomSwitch;                                        // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MarkerIcon_Small;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBePinged;                                       // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           PingSize;                                          // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisplayed;                                       // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsPinged;                                          // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsHighlighted;                                     // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          InProgress;                                        // 0x0485(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4A[0x2];                                     // 0x0486(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ProgressState;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecialOpportunity;                              // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4B[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SpecialBorderColor;                                // 0x0494(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4C[0x4];                                     // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MarkerName;                                        // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ScaleOnHoverFactor;                                // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4D[0x4];                                     // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MarkerNameOffset;                                  // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UUserWidgetExtension>       HighlightAnimExtensionClass;                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTagContainer                  OffScreenTags;                                     // 0x04D8(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FLinearColor                           InactiveColor;                                     // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustMissionMarker(bool IsSpecial);
	void CheckOffScreenTags(const struct FGameplayTagContainer& TagContainer);
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_MapMarker(int32 EntryPoint);
	void On_Marker_States_Changed(class UGzMarkerComponent* Param_MarkerComponent, const struct FGameplayTagContainer& States);
	void OnMapZoomChanged(float NewZoom);
	void OnMapZoomed(float NewZoom);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void SetDefaultVisibility();
	void SetProgress(float Percent__0Minus1_);
	void ShowProgress(bool Show, bool Dashed);
	void UpdateMarkerName(const class FText& Param_MarkerName);
	void UpdateMarkerScale();
	void VisualizeDesigner();

	ESlateVisibility GetShowVisibility() const;
	bool K2_ShouldShow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MapMarker_C">();
	}
	static class UWBP_MapMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MapMarker_C>();
	}
};
static_assert(alignof(UWBP_MapMarker_C) == 0x000008, "Wrong alignment on UWBP_MapMarker_C");
static_assert(sizeof(UWBP_MapMarker_C) == 0x000508, "Wrong size on UWBP_MapMarker_C");
static_assert(offsetof(UWBP_MapMarker_C, UberGraphFrame) == 0x0003A0, "Member 'UWBP_MapMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_FadeOutFast) == 0x0003A8, "Member 'UWBP_MapMarker_C::Anim_FadeOutFast' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_FadeOutSlow) == 0x0003B0, "Member 'UWBP_MapMarker_C::Anim_FadeOutSlow' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_Show) == 0x0003B8, "Member 'UWBP_MapMarker_C::Anim_Show' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_FadeOut) == 0x0003C0, "Member 'UWBP_MapMarker_C::Anim_FadeOut' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_Progress) == 0x0003C8, "Member 'UWBP_MapMarker_C::Anim_Progress' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Anim_Highlight) == 0x0003D0, "Member 'UWBP_MapMarker_C::Anim_Highlight' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Highlight_Image) == 0x0003D8, "Member 'UWBP_MapMarker_C::Highlight_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, HoverText_GzText) == 0x0003E0, "Member 'UWBP_MapMarker_C::HoverText_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerLarge_Image) == 0x0003E8, "Member 'UWBP_MapMarker_C::MarkerLarge_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerSmall_Image) == 0x0003F0, "Member 'UWBP_MapMarker_C::MarkerSmall_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, OpportunityBackplate_Image) == 0x0003F8, "Member 'UWBP_MapMarker_C::OpportunityBackplate_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, OpportunitySpecialBorder_Image) == 0x000400, "Member 'UWBP_MapMarker_C::OpportunitySpecialBorder_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Progress_Image) == 0x000408, "Member 'UWBP_MapMarker_C::Progress_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Progress_Image_Dashed) == 0x000410, "Member 'UWBP_MapMarker_C::Progress_Image_Dashed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ProgressBackground_Image) == 0x000418, "Member 'UWBP_MapMarker_C::ProgressBackground_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ProgressBackground_Image_Dashed) == 0x000420, "Member 'UWBP_MapMarker_C::ProgressBackground_Image_Dashed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ProgressImage_Switcher) == 0x000428, "Member 'UWBP_MapMarker_C::ProgressImage_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, Size_WidgetSwitcher) == 0x000430, "Member 'UWBP_MapMarker_C::Size_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, WBP_Marker_PingFeedback) == 0x000438, "Member 'UWBP_MapMarker_C::WBP_Marker_PingFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerIcon_Large) == 0x000440, "Member 'UWBP_MapMarker_C::MarkerIcon_Large' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, DefaultColor) == 0x000448, "Member 'UWBP_MapMarker_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, HighlightColor) == 0x000458, "Member 'UWBP_MapMarker_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ColorOnHighlight) == 0x000468, "Member 'UWBP_MapMarker_C::ColorOnHighlight' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ChangeSizeOnZoom) == 0x000469, "Member 'UWBP_MapMarker_C::ChangeSizeOnZoom' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ZoomSwitch) == 0x000470, "Member 'UWBP_MapMarker_C::ZoomSwitch' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerIcon_Small) == 0x000478, "Member 'UWBP_MapMarker_C::MarkerIcon_Small' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, CanBePinged) == 0x000480, "Member 'UWBP_MapMarker_C::CanBePinged' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, PingSize) == 0x000481, "Member 'UWBP_MapMarker_C::PingSize' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, IsDisplayed) == 0x000482, "Member 'UWBP_MapMarker_C::IsDisplayed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, IsPinged) == 0x000483, "Member 'UWBP_MapMarker_C::IsPinged' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, IsHighlighted) == 0x000484, "Member 'UWBP_MapMarker_C::IsHighlighted' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, InProgress) == 0x000485, "Member 'UWBP_MapMarker_C::InProgress' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ProgressState) == 0x000488, "Member 'UWBP_MapMarker_C::ProgressState' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, IsSpecialOpportunity) == 0x000490, "Member 'UWBP_MapMarker_C::IsSpecialOpportunity' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, SpecialBorderColor) == 0x000494, "Member 'UWBP_MapMarker_C::SpecialBorderColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerName) == 0x0004A8, "Member 'UWBP_MapMarker_C::MarkerName' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, ScaleOnHoverFactor) == 0x0004B8, "Member 'UWBP_MapMarker_C::ScaleOnHoverFactor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, MarkerNameOffset) == 0x0004C0, "Member 'UWBP_MapMarker_C::MarkerNameOffset' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, HighlightAnimExtensionClass) == 0x0004D0, "Member 'UWBP_MapMarker_C::HighlightAnimExtensionClass' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, OffScreenTags) == 0x0004D8, "Member 'UWBP_MapMarker_C::OffScreenTags' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_C, InactiveColor) == 0x0004F8, "Member 'UWBP_MapMarker_C::InactiveColor' has a wrong offset!");

}

