#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HEX_Extractor

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HEX_Extractor.BP_HEX_Extractor_C
// 0x0270 (0x0618 - 0x03A8)
class ABP_HEX_Extractor_C final : public AGzItemExtractor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          SideCollisionForThePlayer5;                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideCollisionForThePlayer4;                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideCollisionForThePlayer3;                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ScreenCollisionForThePlayer;                       // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CenterCollisionForThePlayer;                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_Base;                             // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_MonitorMain;                      // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_Monitor_R;                        // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_Monitor_L;                        // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_DoorRight;                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_DoorLeft;                         // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_DoorBack;                         // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Extractor_Inside_T;                         // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzWidgetComponent*                     GzWidgetLeft;                                      // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideCollisionForThePlayer1;                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideCollisionForThePlayer;                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideCollisionForThePlayer2;                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzWidgetComponent*                     GzWidgetRight;                                     // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzWidgetComponent*                     GzWidgetCenter;                                    // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Terminal;                                          // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          LoadoutDropRestrictionVolume;                      // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CelebrationNiagara2;                               // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CelebrationNiagara1;                               // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStaticAkComponent*                   GzStaticAk;                                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzGridLootSpawnerComponent*            GzGridLootSpawner;                                 // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CubeMesh;                                          // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlayerLocation;                                    // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InteractableMesh;                                  // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     MarkerComponent;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzHexExtractorMenu*                    Menu;                                              // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ExtractionProgressTimeClient;                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXAntenna;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        HackingProgressMultiplierBP;                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ProgressSpeed;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AnimationCheckTimer;                               // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Activation_Ak_Event;                               // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Extracting;                                        // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ExtractionCompleted;                               // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ExtractionCanceled;                                // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ExtractionPauseChanged;                            // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         FeedbackPlayingId;                                 // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C82[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ScreenSoundAkEvent;                                // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenSoundPlayingId;                              // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C83[0x4];                                     // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGzPlayerCharacter*>             PlayersNextToTerminal;                             // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bTerminalOpened;                                   // 0x0540(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C84[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_HEX_DiegeticWidget_Parent_C*> ThreeDWidgets;                                     // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UGzItemData*                            CurrentHEX;                                        // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ExtractionHacked;                                  // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGzPingVoiceLineData                   HackingPingVoiceLineData;                          // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FGzPingVoiceLineData                   ExtractingPingVoiceLineData;                       // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FGzPingVoiceLineData                   IdleTerminalPingVoiceLineData;                     // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UMaterialInstanceDynamic*               MeshDynamicMaterial;                               // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DissolvePauseColor;                                // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DissolveHackColor;                                 // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DissolveExtractColor;                              // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeInitialValue;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeFinalValue;                                    // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzSessionGameModeSettings*             GameModeSettings;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InteractedActor;                                   // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EndExtractionTimer;                                // 0x05F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ProgressMarkerState;                               // 0x0600(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckForCloseEnemyTimer;                           // 0x0608(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FinishTerminalAnimationHandler;                    // 0x0610(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateWidgets();
	void UpdatePauseStateClient();
	void UpdateOpenedState();
	void UpdateMeshDynamicMaterial();
	void UpdateInteractableComponentActiveState();
	void UpdateHexMeshVisibilityFromCurrentHex();
	void UpdateHexMeshVisibility();
	void UpdateHexInsideWidgetsState(class UGzItemData* ItemData);
	void UpdateExtractionTimerForUnpausedExtraction();
	void UpdateExtractionTimerForStartedExtraction();
	void UpdateExtractionTimerForRestoredExtraction();
	void UpdateExtractionTimerForPausedExtraction();
	void UpdateExtractionTimerForHackedExtraction();
	void UpdateExtractionTimerForEndedExtraction();
	void UpdateExtractionStateClient();
	void UpdateExtractionProgressTime(double DeltaTime);
	void UpdateDynamicMaterialColor();
	void UpdateDiegeticWidgetExtractionState();
	void UnpauseExtraction();
	void UnbindEventsOnExtractionEnded();
	void TrySyncExtractionProgressForHackingState();
	void TrySyncExtractionProgressForExtractingState();
	void SyncExtractionProgressTimeClient();
	void StoreDiegeticWidgetVariables();
	void StopScreenSound();
	void StopFeedback();
	void StartHexInsertionAnimation(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void StartExtraction(class AGzPlayerState* ExtractingPlayer, class UGzItemData* Hex);
	void Show3DWidgets(bool bShow, double Delay);
	void Show3DWidget(bool bShow, class UGzWidgetComponent* Widget);
	void SetupState();
	void SetUnpausedState();
	void SetPausedState();
	void RestoreItemExtraction();
	void ReceiveZoneOverloadSwitched(bool bInOverloadZone);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveActiveStateChanged(bool bNewActive);
	void ProcessUserInputBasedInteraction();
	void ProcessInteractionForLocalPlayer(class UGzInteractableComponent* Interactable);
	void ProcessInteractionForAuthority(class UGzInteractableComponent* Interactable);
	void ProcessAutoInsertInteraction();
	void PrepareUpdateExtractionStateClient();
	void PrepareRestoreItemExtraction();
	void PrepareHackItemExtraction();
	void PlayScreenSound();
	void PlayFeedback();
	void PauseExtraction();
	void OnStartItemExtraction(class AGzPlayerState* Player, class UGzItemData* ItemData);
	void OnRestoreItemExtraction();
	void OnRep_bTerminalOpened();
	void OnPauseChanged();
	void OnInteractionCanceled(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void OnHexConfirmed(class UGzItemData* Hex);
	void OnHackItemExtraction();
	void OnExtractorMenuWidgetCreated(class UGzNavigationWidget* NavigationWidget);
	void OnExtractionStateChanged();
	void OnExtractionEnded();
	void OnCompleteItemExtraction();
	void OnCancelItemExtraction();
	void IsNoneState(bool* bNoneState);
	void IsLocalPlayerExtracting(bool* Value);
	bool IsHackingInteraction();
	void IsExtractionPaused(bool* bPaused);
	void InitGameModeSettings();
	void InitBindings();
	void HasSelectedItem(class APlayerState* PlayerState, class UGzItemData* ItemData, bool* bHasItem);
	void HandleInteraction(class AActor* InteractedBy, class UGzInteractableComponent* Interactable);
	void HackItemExtraction();
	void GetTotalExtractionTime(double* NewParam);
	void GetServerTimeWhenStateChanged(double* ExtractionProgressWhenStateChanged);
	void GetRemainedTimeForHackedExtraction(double* RemainedTime);
	void GetRemainedTimeForExtraction(double* RemainedTime);
	void GetProgressSpeed(double* NewParam);
	void GetExtractionProgressWhenStateChanged(double* ExtractionProgressWhenStateChanged);
	void GetCurrentHexItemData(class UGzItemData** CurrentHexItemData);
	void Finish_Terminal_Animation();
	void ExtractionPauseChanged__DelegateSignature();
	void ExecuteUbergraph_BP_HEX_Extractor(int32 EntryPoint);
	void EndExtraction();
	void DispatchAnimationFinishToServer();
	void DeactivateHackingState();
	void CompleteInteraction();
	void CloseActiveWidget();
	void CheckForCloseEnemy();
	void CheckAnimationEnd();
	void BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void AddHexMeshToTerminal(EGzItemRarity Rarity);
	void AddExtractionWidget(class APlayerController* OwningPlayer);
	void ActivateHackingState();
	void ActivateCelebrationNiagara();
	void Extracting__DelegateSignature();
	void ExtractionHacked__DelegateSignature();
	void ExtractionCompleted__DelegateSignature();
	void ExtractionCanceled__DelegateSignature();

	void IsHackingState(bool* Value) const;
	void IsFriendlyExtraction(int32 InstigatorPlayerID, bool* Result) const;
	void IsExtractingState(bool* Value) const;
	void IsATeammate(class APlayerState* PlayerState, bool* bTeammate) const;
	const struct FGzPingVoiceLineData GetPingVoiceLineData() const;
	TArray<struct FTransform> GetLocalHexItemTransforms() const;
	bool GetCurrentInteractionInfo(const class AGzCharacter* InteractedBy, const TArray<struct FGzInteractionInfo>& InteractionInfoArray, struct FGameplayTag* OutInteractionTag, struct FGzInteractionData* OutInteractionData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HEX_Extractor_C">();
	}
	static class ABP_HEX_Extractor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HEX_Extractor_C>();
	}
};
static_assert(alignof(ABP_HEX_Extractor_C) == 0x000008, "Wrong alignment on ABP_HEX_Extractor_C");
static_assert(sizeof(ABP_HEX_Extractor_C) == 0x000618, "Wrong size on ABP_HEX_Extractor_C");
static_assert(offsetof(ABP_HEX_Extractor_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_HEX_Extractor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer5) == 0x0003B0, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer5' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer4) == 0x0003B8, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer4' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer3) == 0x0003C0, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer3' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ScreenCollisionForThePlayer) == 0x0003C8, "Member 'ABP_HEX_Extractor_C::ScreenCollisionForThePlayer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CenterCollisionForThePlayer) == 0x0003D0, "Member 'ABP_HEX_Extractor_C::CenterCollisionForThePlayer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_Base) == 0x0003D8, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_Base' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_MonitorMain) == 0x0003E0, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_MonitorMain' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_Monitor_R) == 0x0003E8, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_Monitor_R' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_Monitor_L) == 0x0003F0, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_Monitor_L' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_DoorRight) == 0x0003F8, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_DoorRight' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_DoorLeft) == 0x000400, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_DoorLeft' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_DoorBack) == 0x000408, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_DoorBack' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SM_HEX_Extractor_Inside_T) == 0x000410, "Member 'ABP_HEX_Extractor_C::SM_HEX_Extractor_Inside_T' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GzWidgetLeft) == 0x000418, "Member 'ABP_HEX_Extractor_C::GzWidgetLeft' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer1) == 0x000420, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer1' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer) == 0x000428, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, SideCollisionForThePlayer2) == 0x000430, "Member 'ABP_HEX_Extractor_C::SideCollisionForThePlayer2' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GzWidgetRight) == 0x000438, "Member 'ABP_HEX_Extractor_C::GzWidgetRight' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GzWidgetCenter) == 0x000440, "Member 'ABP_HEX_Extractor_C::GzWidgetCenter' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, Terminal) == 0x000448, "Member 'ABP_HEX_Extractor_C::Terminal' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, LoadoutDropRestrictionVolume) == 0x000450, "Member 'ABP_HEX_Extractor_C::LoadoutDropRestrictionVolume' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CelebrationNiagara2) == 0x000458, "Member 'ABP_HEX_Extractor_C::CelebrationNiagara2' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CelebrationNiagara1) == 0x000460, "Member 'ABP_HEX_Extractor_C::CelebrationNiagara1' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GzStaticAk) == 0x000468, "Member 'ABP_HEX_Extractor_C::GzStaticAk' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GzGridLootSpawner) == 0x000470, "Member 'ABP_HEX_Extractor_C::GzGridLootSpawner' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CubeMesh) == 0x000478, "Member 'ABP_HEX_Extractor_C::CubeMesh' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, PlayerLocation) == 0x000480, "Member 'ABP_HEX_Extractor_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, Sphere) == 0x000488, "Member 'ABP_HEX_Extractor_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, InteractableMesh) == 0x000490, "Member 'ABP_HEX_Extractor_C::InteractableMesh' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, MarkerComponent) == 0x000498, "Member 'ABP_HEX_Extractor_C::MarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, Menu) == 0x0004A0, "Member 'ABP_HEX_Extractor_C::Menu' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractionProgressTimeClient) == 0x0004A8, "Member 'ABP_HEX_Extractor_C::ExtractionProgressTimeClient' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, VFXAntenna) == 0x0004B0, "Member 'ABP_HEX_Extractor_C::VFXAntenna' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, HackingProgressMultiplierBP) == 0x0004B8, "Member 'ABP_HEX_Extractor_C::HackingProgressMultiplierBP' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ProgressSpeed) == 0x0004C0, "Member 'ABP_HEX_Extractor_C::ProgressSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, AnimationCheckTimer) == 0x0004C8, "Member 'ABP_HEX_Extractor_C::AnimationCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, Activation_Ak_Event) == 0x0004D0, "Member 'ABP_HEX_Extractor_C::Activation_Ak_Event' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, Extracting) == 0x0004D8, "Member 'ABP_HEX_Extractor_C::Extracting' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractionCompleted) == 0x0004E8, "Member 'ABP_HEX_Extractor_C::ExtractionCompleted' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractionCanceled) == 0x0004F8, "Member 'ABP_HEX_Extractor_C::ExtractionCanceled' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractionPauseChanged) == 0x000508, "Member 'ABP_HEX_Extractor_C::ExtractionPauseChanged' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, FeedbackPlayingId) == 0x000518, "Member 'ABP_HEX_Extractor_C::FeedbackPlayingId' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ScreenSoundAkEvent) == 0x000520, "Member 'ABP_HEX_Extractor_C::ScreenSoundAkEvent' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ScreenSoundPlayingId) == 0x000528, "Member 'ABP_HEX_Extractor_C::ScreenSoundPlayingId' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, PlayersNextToTerminal) == 0x000530, "Member 'ABP_HEX_Extractor_C::PlayersNextToTerminal' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, bTerminalOpened) == 0x000540, "Member 'ABP_HEX_Extractor_C::bTerminalOpened' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ThreeDWidgets) == 0x000548, "Member 'ABP_HEX_Extractor_C::ThreeDWidgets' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CurrentHEX) == 0x000558, "Member 'ABP_HEX_Extractor_C::CurrentHEX' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractionHacked) == 0x000560, "Member 'ABP_HEX_Extractor_C::ExtractionHacked' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, HackingPingVoiceLineData) == 0x000570, "Member 'ABP_HEX_Extractor_C::HackingPingVoiceLineData' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ExtractingPingVoiceLineData) == 0x000580, "Member 'ABP_HEX_Extractor_C::ExtractingPingVoiceLineData' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, IdleTerminalPingVoiceLineData) == 0x000590, "Member 'ABP_HEX_Extractor_C::IdleTerminalPingVoiceLineData' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, MeshDynamicMaterial) == 0x0005A0, "Member 'ABP_HEX_Extractor_C::MeshDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, DissolvePauseColor) == 0x0005A8, "Member 'ABP_HEX_Extractor_C::DissolvePauseColor' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, DissolveHackColor) == 0x0005B8, "Member 'ABP_HEX_Extractor_C::DissolveHackColor' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, DissolveExtractColor) == 0x0005C8, "Member 'ABP_HEX_Extractor_C::DissolveExtractColor' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, FadeInitialValue) == 0x0005D8, "Member 'ABP_HEX_Extractor_C::FadeInitialValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, FadeFinalValue) == 0x0005E0, "Member 'ABP_HEX_Extractor_C::FadeFinalValue' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, GameModeSettings) == 0x0005E8, "Member 'ABP_HEX_Extractor_C::GameModeSettings' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, InteractedActor) == 0x0005F0, "Member 'ABP_HEX_Extractor_C::InteractedActor' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, EndExtractionTimer) == 0x0005F8, "Member 'ABP_HEX_Extractor_C::EndExtractionTimer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, ProgressMarkerState) == 0x000600, "Member 'ABP_HEX_Extractor_C::ProgressMarkerState' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, CheckForCloseEnemyTimer) == 0x000608, "Member 'ABP_HEX_Extractor_C::CheckForCloseEnemyTimer' has a wrong offset!");
static_assert(offsetof(ABP_HEX_Extractor_C, FinishTerminalAnimationHandler) == 0x000610, "Member 'ABP_HEX_Extractor_C::FinishTerminalAnimationHandler' has a wrong offset!");

}

