#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MissionExt_TimerSound

#include "Basic.hpp"

#include "BP_MissionExt_TimerSound_classes.hpp"
#include "BP_MissionExt_TimerSound_parameters.hpp"


namespace SDK
{

// Function BP_MissionExt_TimerSound.BP_MissionExt_TimerSound_C.PlayCountdownSound
// (BlueprintCallable, BlueprintEvent)

void UBP_MissionExt_TimerSound_C::PlayCountdownSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionExt_TimerSound_C", "PlayCountdownSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MissionExt_TimerSound.BP_MissionExt_TimerSound_C.OnObjectiveStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMissionObjective*                Objective                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EMissionObjectiveState                  OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMissionObjectiveState                  NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MissionExt_TimerSound_C::OnObjectiveStateChanged(class UMissionObjective* Objective, EMissionObjectiveState OldState, EMissionObjectiveState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionExt_TimerSound_C", "OnObjectiveStateChanged");

	Params::BP_MissionExt_TimerSound_C_OnObjectiveStateChanged Parms{};

	Parms.Objective = Objective;
	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MissionExt_TimerSound.BP_MissionExt_TimerSound_C.ObjectiveTerminalStateCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMissionObjectiveState                  ObjectiveState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MissionExt_TimerSound_C::ObjectiveTerminalStateCheck(EMissionObjectiveState ObjectiveState, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionExt_TimerSound_C", "ObjectiveTerminalStateCheck");

	Params::BP_MissionExt_TimerSound_C_ObjectiveTerminalStateCheck Parms{};

	Parms.ObjectiveState = ObjectiveState;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_MissionExt_TimerSound.BP_MissionExt_TimerSound_C.MinuteSignal
// (BlueprintCallable, BlueprintEvent)

void UBP_MissionExt_TimerSound_C::MinuteSignal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionExt_TimerSound_C", "MinuteSignal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MissionExt_TimerSound.BP_MissionExt_TimerSound_C.ExecuteUbergraph_BP_MissionExt_TimerSound
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MissionExt_TimerSound_C::ExecuteUbergraph_BP_MissionExt_TimerSound(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionExt_TimerSound_C", "ExecuteUbergraph_BP_MissionExt_TimerSound");

	Params::BP_MissionExt_TimerSound_C_ExecuteUbergraph_BP_MissionExt_TimerSound Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

