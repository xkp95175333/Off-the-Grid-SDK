#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Item

#include "Basic.hpp"

#include "AnimStruct_StanceTransitions_structs.hpp"
#include "Engine_structs.hpp"
#include "Anim_ItemType_structs.hpp"
#include "G01_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimStruct_AimingCorrection_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "AnimStruct_ArmedStates_structs.hpp"


namespace SDK::Params
{

// Function ABP_Item.ABP_Item_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_Item_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_Item_C_Aiming_Correction");
static_assert(sizeof(ABP_Item_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_Item_C_Aiming_Correction");
static_assert(offsetof(ABP_Item_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_Item_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_Item_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Item_C_AnimGraph");
static_assert(sizeof(ABP_Item_C_AnimGraph) == 0x000010, "Wrong size on ABP_Item_C_AnimGraph");
static_assert(offsetof(ABP_Item_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_Item_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.BlueprintThreadSafeUpdateAnimation
// 0x0028 (0x0028 - 0x0000)
struct ABP_Item_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F61[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F62[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Update_Blend_Weight_Data_DeltaTime_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateJumpFallData_DeltaTime_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_Item_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation) == 0x000028, "Wrong size on ABP_Item_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Item_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_BlueprintThreadSafeUpdateAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'ABP_Item_C_BlueprintThreadSafeUpdateAnimation::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Update_Blend_Weight_Data_DeltaTime_ImplicitCast) == 0x000018, "Member 'ABP_Item_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Update_Blend_Weight_Data_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateJumpFallData_DeltaTime_ImplicitCast) == 0x000020, "Member 'ABP_Item_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateJumpFallData_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.CanPlayIdleBreak
// 0x0250 (0x0250 - 0x0000)
struct ABP_Item_C_CanPlayIdleBreak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F63[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F64[0x3];                                     // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0246(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0247(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_CanPlayIdleBreak) == 0x000008, "Wrong alignment on ABP_Item_C_CanPlayIdleBreak");
static_assert(sizeof(ABP_Item_C_CanPlayIdleBreak) == 0x000250, "Wrong size on ABP_Item_C_CanPlayIdleBreak");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, ReturnValue) == 0x000000, "Member 'ABP_Item_C_CanPlayIdleBreak::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_Array_Length_ReturnValue) == 0x000230, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_Greater_IntInt_ReturnValue) == 0x000234, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000238, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_GetAnimStance_ReturnValue) == 0x000240, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000241, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue) == 0x000242, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue_1) == 0x000243, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue_2) == 0x000244, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue_3) == 0x000245, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue_4) == 0x000246, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanOR_ReturnValue_5) == 0x000247, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_Not_PreBool_ReturnValue) == 0x000248, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_CanPlayIdleBreak, CallFunc_BooleanAND_ReturnValue) == 0x000249, "Member 'ABP_Item_C_CanPlayIdleBreak::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.ChooseIdleBreakDelayTime
// 0x0260 (0x0260 - 0x0000)
struct ABP_Item_C_ChooseIdleBreakDelayTime final
{
public:
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0008(0x0218)(NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F65[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_ChooseIdleBreakDelayTime) == 0x000008, "Wrong alignment on ABP_Item_C_ChooseIdleBreakDelayTime");
static_assert(sizeof(ABP_Item_C_ChooseIdleBreakDelayTime) == 0x000260, "Wrong size on ABP_Item_C_ChooseIdleBreakDelayTime");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000000, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_GetAnimCache_ReturnValue) == 0x000008, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_BreakVector_X) == 0x000220, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_BreakVector_Y) == 0x000228, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_BreakVector_Z) == 0x000230, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000238, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_Abs_ReturnValue) == 0x000240, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_FTrunc_ReturnValue) == 0x000248, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_Percent_IntInt_ReturnValue) == 0x00024C, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_Add_IntInt_ReturnValue) == 0x000250, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ChooseIdleBreakDelayTime, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000258, "Member 'ABP_Item_C_ChooseIdleBreakDelayTime::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_Item_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_Item_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_Item_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_Item_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_Item_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_Item_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_Item_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_Item_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_Item_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_Item_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_Item_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_Item_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_Item_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_Item_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_Item_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_Item_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_Item_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_Item_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_Item_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_Item_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.DebugLeftHandGrip
// 0x0470 (0x0470 - 0x0000)
struct ABP_Item_C_DebugLeftHandGrip final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F66[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0010(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0448(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0458(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_DebugLeftHandGrip) == 0x000008, "Wrong alignment on ABP_Item_C_DebugLeftHandGrip");
static_assert(sizeof(ABP_Item_C_DebugLeftHandGrip) == 0x000470, "Wrong size on ABP_Item_C_DebugLeftHandGrip");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, Debug) == 0x000000, "Member 'ABP_Item_C_DebugLeftHandGrip::Debug' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_GetAnimCache_ReturnValue) == 0x000010, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000228, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000448, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, CallFunc_Concat_StrStr_ReturnValue) == 0x000458, "Member 'ABP_Item_C_DebugLeftHandGrip::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_DebugLeftHandGrip, K2Node_SwitchEnum_CmpSuccess) == 0x000468, "Member 'ABP_Item_C_DebugLeftHandGrip::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.ExecuteUbergraph_ABP_Item
// 0x5A20 (0x5A20 - 0x0000)
struct ABP_Item_C_ExecuteUbergraph_ABP_Item final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F67[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0448(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x0450(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0668(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x0678(0x0218)(NoDestructor)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0891(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x0892(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0893(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F68[0x4];                                     // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x0898(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F69[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_4;               // 0x08A8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x0AC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0AC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6A[0x7];                                     // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_5;               // 0x0AD0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6;    // 0x0CE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0CF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_6;               // 0x0CF8(0x0218)(NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0F10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0F18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6B[0x7];                                     // 0x0F19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7;    // 0x0F20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0F28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6C[0x7];                                     // 0x0F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_7;               // 0x0F30(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x1148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_1;                // 0x1149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6D[0x6];                                     // 0x114A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8;    // 0x1150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x1158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6E[0x7];                                     // 0x1159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_8;               // 0x1160(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9;    // 0x1378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_9;               // 0x1380(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x1598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6F[0x7];                                     // 0x1599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10;   // 0x15A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11;   // 0x15A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_10;              // 0x15B0(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_11;              // 0x17C8(0x0218)(NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x19E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x19E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x19F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F70[0x7];                                     // 0x19F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_12;   // 0x19F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_12;              // 0x1A00(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x1C18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F71[0x3];                                     // 0x1C19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x1C1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x1C20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x1C21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x1C22(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x1C23(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x1C24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x1C25(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F72[0x2];                                     // 0x1C26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_13;   // 0x1C28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_13;              // 0x1C30(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_14;   // 0x1E48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_14;              // 0x1E50(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x2068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F73[0x7];                                     // 0x2069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x2070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_15;   // 0x2078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x2080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F74[0x7];                                     // 0x2081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_15;              // 0x2088(0x0218)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x22A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F75[0x7];                                     // 0x22A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x22A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x22B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F76[0x4];                                     // 0x22B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_16;   // 0x22B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x22C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F77[0x7];                                     // 0x22C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_16;              // 0x22C8(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x24E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F78[0x7];                                     // 0x24E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_17;   // 0x24E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_17;              // 0x24F0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_18;   // 0x2708(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_18;              // 0x2710(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x2928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x2929(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F79[0x6];                                     // 0x292A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_19;   // 0x2930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_20;   // 0x2938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_19;              // 0x2940(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_20;              // 0x2B58(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_21;   // 0x2D70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x2D78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7A[0x7];                                     // 0x2D79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_21;              // 0x2D80(0x0218)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x2F98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7B[0x7];                                     // 0x2F99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_22;   // 0x2FA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_23;   // 0x2FA8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_22;              // 0x2FB0(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_23;              // 0x31C8(0x0218)(NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x33E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetJumpLean_Lean;                         // 0x33E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x3400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x3404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x3408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x340C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7C[0x3];                                     // 0x340D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x3410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7D[0x4];                                     // 0x3414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_24;   // 0x3418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_25;   // 0x3420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_24;              // 0x3428(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_25;              // 0x3640(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x3858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x3859(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7E[0x6];                                     // 0x385A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_26;   // 0x3860(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x3868(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingPerpendicularToInitialPivotNative_ReturnValue; // 0x386C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x386D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7F[0x2];                                     // 0x386E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x3870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x3878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x3879(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_2;                // 0x387A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x387B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x387C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x387D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F80[0x2];                                     // 0x387E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_27;   // 0x3880(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x3888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F81[0x7];                                     // 0x3889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_26;              // 0x3890(0x0218)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x3AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x3AAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x3AAD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x3AAE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x3AAF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_4;             // 0x3AB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x3AB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x3AB5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F82[0x2];                                     // 0x3AB6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_5;             // 0x3AB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F83[0x4];                                     // 0x3ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_FindTransform_Transform;                  // 0x3AC0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x3B20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x3B21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x3B22(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F84[0x5];                                     // 0x3B23(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_28;   // 0x3B28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_27;              // 0x3B30(0x0218)(NoDestructor)
	bool                                          CallFunc_GetAimCorrection_AimCorrection;           // 0x3D48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x3D49(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F85[0x2];                                     // 0x3D4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_6;             // 0x3D4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x3D50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F86[0x7];                                     // 0x3D51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_29;   // 0x3D58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x3D60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x3D61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F87[0x6];                                     // 0x3D62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_30;   // 0x3D68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x3D70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F88[0x7];                                     // 0x3D71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_28;              // 0x3D78(0x0218)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_7;             // 0x3F90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x3F94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x3F95(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x3F96(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_3;                // 0x3F97(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x3F98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x3F99(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F89[0x6];                                     // 0x3F9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_31;   // 0x3FA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_29;              // 0x3FA8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_32;   // 0x41C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_30;              // 0x41C8(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x43E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x43E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x43E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8A[0x5];                                     // 0x43E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x43E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x43F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_4;                // 0x43F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8B[0x7];                                     // 0x43F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_33;   // 0x4400(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_31;              // 0x4408(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_34;   // 0x4620(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x4628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x4629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_14;       // 0x462A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8C[0x5];                                     // 0x462B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_1;          // 0x4630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x4638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8D[0x7];                                     // 0x4639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x4640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_2;          // 0x4648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x4650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_5;                // 0x4658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8E[0x7];                                     // 0x4659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_35;   // 0x4660(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_32;              // 0x4668(0x0218)(NoDestructor)
	double                                        K2Node_Select_Default;                             // 0x4880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x4888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x4890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8F[0x7];                                     // 0x4891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_3;          // 0x4898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x48A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_6;                // 0x48A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F90[0x6];                                     // 0x48A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_36;   // 0x48A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x48B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x48B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_7;                // 0x48B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F91[0x6];                                     // 0x48BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_4;          // 0x48C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_37;   // 0x48C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_33;              // 0x48D0(0x0218)(NoDestructor)
	bool                                          CallFunc_GetMirrorState_IsMirror_8;                // 0x4AE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F92[0x7];                                     // 0x4AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_5;          // 0x4AF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x4AF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x4AF9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x4AFA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x4AFB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x4AFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F93[0x3];                                     // 0x4AFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_38;   // 0x4B00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_34;              // 0x4B08(0x0218)(NoDestructor)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x4D20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x4D28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x4D29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x4D2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F94[0x5];                                     // 0x4D2B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_39;   // 0x4D30(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_35;              // 0x4D38(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_40;   // 0x4F50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_36;              // 0x4F58(0x0218)(NoDestructor)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_6;          // 0x5170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x5178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x5179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F95[0x2];                                     // 0x517A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x517C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x5180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F96[0x7];                                     // 0x5181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_41;   // 0x5188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_37;              // 0x5190(0x0218)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_8;             // 0x53A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x53AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x53AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F97[0x2];                                     // 0x53AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetJumpLean_Lean_1;                       // 0x53B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_Select_Default_2;                           // 0x53C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_9;                // 0x53D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x53D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F98[0x6];                                     // 0x53D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_7;          // 0x53D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_3;                           // 0x53E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayIdleBreak_ReturnValue;             // 0x53E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x53E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F99[0x6];                                     // 0x53EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetJumpLean_Lean_2;                       // 0x53F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_9;             // 0x5408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x540C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_9;          // 0x540D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x540E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9A[0x1];                                     // 0x540F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_4;                           // 0x5410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x5418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x5419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_10;               // 0x541A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x541B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9B[0x4];                                     // 0x541C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_8;          // 0x5420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_9;          // 0x5428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x5430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9C[0x7];                                     // 0x5431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_5;                           // 0x5438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_11;               // 0x5440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9D[0x7];                                     // 0x5441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_10;         // 0x5448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x5450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_12;               // 0x5458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9E[0x7];                                     // 0x5459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_42;   // 0x5460(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_38;              // 0x5468(0x0218)(NoDestructor)
	struct FRotator                               CallFunc_GetJumpLean_Lean_3;                       // 0x5680(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_12;               // 0x5698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror_13;               // 0x5699(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9F[0x6];                                     // 0x569A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x56A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_43;   // 0x56A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x56B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA0[0x7];                                     // 0x56B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_39;              // 0x56B8(0x0218)(NoDestructor)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x58D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x58D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_13;               // 0x58D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA1[0x6];                                     // 0x58DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x58E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x58E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x58F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA2[0x7];                                     // 0x58F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x5900(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x5910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA3[0x7];                                     // 0x5911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x5918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzDefaultCharacterAnimInstance*        K2Node_DynamicCast_AsGz_Default_Character_Anim_Instance; // 0x5920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x5928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA4[0x3];                                     // 0x5929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast;         // 0x592C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x5930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x5938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x5940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_1;       // 0x5948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA5[0x4];                                     // 0x594C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Option_0_ImplicitCast_1;             // 0x5950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x5958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3;   // 0x5960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x5968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x5970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast_2;             // 0x5978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4;   // 0x5980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x5988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast_3;             // 0x5990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5;   // 0x5998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x59A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x59A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x59B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_27_ImplicitCast; // 0x59B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_28_ImplicitCast; // 0x59BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast;              // 0x59C0(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_2;       // 0x59C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_1;            // 0x59C8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_LocomotionAngle_ImplicitCast; // 0x59CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x59D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_3;       // 0x59D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_4;       // 0x59DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_1; // 0x59E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_5;       // 0x59E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_6;       // 0x59E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA6[0x4];                                     // 0x59EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_A_ImplicitCast_2;                     // 0x59F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x59F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_7;       // 0x5A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_2; // 0x5A04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_8;       // 0x5A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_9;       // 0x5A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_3; // 0x5A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_10;      // 0x5A14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_2;            // 0x5A18(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_ExecuteUbergraph_ABP_Item) == 0x000010, "Wrong alignment on ABP_Item_C_ExecuteUbergraph_ABP_Item");
static_assert(sizeof(ABP_Item_C_ExecuteUbergraph_ABP_Item) == 0x005A20, "Wrong size on ABP_Item_C_ExecuteUbergraph_ABP_Item");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, EntryPoint) == 0x000000, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000448, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_2) == 0x000450, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000668, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Dot_VectorVector_ReturnValue) == 0x000670, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_3) == 0x000678, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000890, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000891, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror) == 0x000892, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000893, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x000898, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue) == 0x0008A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_4) == 0x0008A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x000AC0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue) == 0x000AC8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_5) == 0x000AD0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6) == 0x000CE8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000CF0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_6) == 0x000CF8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000F10, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable) == 0x000F18, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7) == 0x000F20, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_1) == 0x000F28, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_7) == 0x000F30, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x001148, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_1) == 0x001149, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8) == 0x001150, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_2) == 0x001158, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_8) == 0x001160, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9) == 0x001378, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_9) == 0x001380, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x001598, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10) == 0x0015A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11) == 0x0015A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_10) == 0x0015B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_11) == 0x0017C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0019E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0019E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_3) == 0x0019F0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_12) == 0x0019F8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_12) == 0x001A00, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_4) == 0x001C18, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetCurveValue_ReturnValue) == 0x001C1C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x001C20, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x001C21, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x001C22, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x001C23, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue) == 0x001C24, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_1) == 0x001C25, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_13) == 0x001C28, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_13) == 0x001C30, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_14) == 0x001E48, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_14) == 0x001E50, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_1) == 0x002068, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_ReturnValue) == 0x002070, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_15) == 0x002078, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x002080, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_15) == 0x002088, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_1) == 0x0022A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0022A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetCurveValue_ReturnValue_1) == 0x0022B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_16) == 0x0022B8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0022C0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_16) == 0x0022C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_2) == 0x0024E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_17) == 0x0024E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_17) == 0x0024F0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_18) == 0x002708, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_18) == 0x002710, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_3) == 0x002928, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_5) == 0x002929, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_19) == 0x002930, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_20) == 0x002938, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_19) == 0x002940, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_20) == 0x002B58, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_21) == 0x002D70, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_4) == 0x002D78, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_21) == 0x002D80, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_2) == 0x002F98, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_22) == 0x002FA0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_23) == 0x002FA8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_22) == 0x002FB0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_23) == 0x0031C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0033E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetJumpLean_Lean) == 0x0033E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetJumpLean_Lean' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue) == 0x003400, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetCurveValue_ReturnValue_2) == 0x003404, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x003408, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00340C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x003410, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_24) == 0x003418, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_25) == 0x003420, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_24) == 0x003428, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_25) == 0x003640, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_5) == 0x003858, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x003859, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_26) == 0x003860, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetCurveValue_ReturnValue_3) == 0x003868, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_IsMovingPerpendicularToInitialPivotNative_ReturnValue) == 0x00386C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_IsMovingPerpendicularToInitialPivotNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_6) == 0x00386D, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x003870, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_3) == 0x003878, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x003879, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_2) == 0x00387A, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_4) == 0x00387B, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_5) == 0x00387C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_7) == 0x00387D, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_27) == 0x003880, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_6) == 0x003888, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_26) == 0x003890, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x003AA8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x003AAC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x003AAD, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x003AAE, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x003AAF, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_4) == 0x003AB0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_2) == 0x003AB4, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x003AB5, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_5) == 0x003AB8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_FindTransform_Transform) == 0x003AC0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_FindTransform_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x003B20, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_3) == 0x003B21, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_4) == 0x003B22, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_28) == 0x003B28, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_27) == 0x003B30, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAimCorrection_AimCorrection) == 0x003D48, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAimCorrection_AimCorrection' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x003D49, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_6) == 0x003D4C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x003D50, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_29) == 0x003D58, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x003D60, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x003D61, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_30) == 0x003D68, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_7) == 0x003D70, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_28) == 0x003D78, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_7) == 0x003F90, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x003F94, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_8) == 0x003F95, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_9) == 0x003F96, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_3) == 0x003F97, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_8) == 0x003F98, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_9) == 0x003F99, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_31) == 0x003FA0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_29) == 0x003FA8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_32) == 0x0041C0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_30) == 0x0041C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x0043E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x0043E1, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x0043E2, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x0043E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0043F0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_4) == 0x0043F8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_33) == 0x004400, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_31) == 0x004408, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_34) == 0x004620, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x004628, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_10) == 0x004629, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_ByteByte_ReturnValue_14) == 0x00462A, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_1) == 0x004630, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_11) == 0x004638, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x004640, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_2) == 0x004648, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x004650, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_5) == 0x004658, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_35) == 0x004660, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_32) == 0x004668, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default) == 0x004880, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_ReturnValue_1) == 0x004888, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x004890, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_3) == 0x004898, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_12) == 0x0048A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_6) == 0x0048A1, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_36) == 0x0048A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default_1) == 0x0048B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x0048B8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_7) == 0x0048B9, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_4) == 0x0048C0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_37) == 0x0048C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_33) == 0x0048D0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_8) == 0x004AE8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_5) == 0x004AF0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x004AF8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x004AF9, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x004AFA, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_5) == 0x004AFB, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_6) == 0x004AFC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_38) == 0x004B00, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_34) == 0x004B08, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_ReturnValue_2) == 0x004D20, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x004D28, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_13) == 0x004D29, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_7) == 0x004D2A, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_39) == 0x004D30, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_35) == 0x004D38, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_40) == 0x004F50, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_36) == 0x004F58, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_6) == 0x005170, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_14) == 0x005178, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_8) == 0x005179, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetCurveValue_ReturnValue_4) == 0x00517C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x005180, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_41) == 0x005188, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_37) == 0x005190, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_8) == 0x0053A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x0053AC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_6) == 0x0053AD, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetJumpLean_Lean_1) == 0x0053B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetJumpLean_Lean_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default_2) == 0x0053C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_9) == 0x0053D0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_7) == 0x0053D1, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_7) == 0x0053D8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default_3) == 0x0053E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_CanPlayIdleBreak_ReturnValue) == 0x0053E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_CanPlayIdleBreak_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_10) == 0x0053E9, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetJumpLean_Lean_2) == 0x0053F0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetJumpLean_Lean_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_MakeLiteralInt_ReturnValue_9) == 0x005408, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_MakeLiteralInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_8) == 0x00540C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_EqualEqual_IntInt_ReturnValue_9) == 0x00540D, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_EqualEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_9) == 0x00540E, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default_4) == 0x005410, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanOR_ReturnValue_10) == 0x005418, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_BooleanAND_ReturnValue_15) == 0x005419, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_10) == 0x00541A, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_11) == 0x00541B, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_8) == 0x005420, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_9) == 0x005428, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, Temp_bool_Variable_9) == 0x005430, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Default_5) == 0x005438, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_11) == 0x005440, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Conv_BoolToDouble_ReturnValue_10) == 0x005448, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Conv_BoolToDouble_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x005450, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_12) == 0x005458, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_42) == 0x005460, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_38) == 0x005468, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetJumpLean_Lean_3) == 0x005680, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetJumpLean_Lean_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_12) == 0x005698, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMirrorState_IsMirror_13) == 0x005699, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMirrorState_IsMirror_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0056A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_43) == 0x0056A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_IsLocallyControlled_ReturnValue) == 0x0056B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimCache_ReturnValue_39) == 0x0056B8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimCache_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x0058D0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_DynamicCast_bSuccess) == 0x0058D8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Not_PreBool_ReturnValue_13) == 0x0058D9, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Not_PreBool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x0058E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0058E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0058F8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x005900, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x005910, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_GetAnimInstance_ReturnValue) == 0x005918, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_DynamicCast_AsGz_Default_Character_Anim_Instance) == 0x005920, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_DynamicCast_AsGz_Default_Character_Anim_Instance' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_DynamicCast_bSuccess_1) == 0x005928, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast) == 0x00592C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Option_0_ImplicitCast) == 0x005930, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x005938, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x005940, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_1) == 0x005948, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Option_0_ImplicitCast_1) == 0x005950, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Option_0_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x005958, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3) == 0x005960, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x005968, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_A_ImplicitCast) == 0x005970, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Option_0_ImplicitCast_2) == 0x005978, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Option_0_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4) == 0x005980, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x005988, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_Select_Option_0_ImplicitCast_3) == 0x005990, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_Select_Option_0_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5) == 0x005998, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x0059A0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0059A8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0059B0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet___FloatProperty_27_ImplicitCast) == 0x0059B8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet___FloatProperty_27_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet___FloatProperty_28_ImplicitCast) == 0x0059BC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet___FloatProperty_28_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Array_Set_Item_ImplicitCast) == 0x0059C0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Array_Set_Item_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_2) == 0x0059C4, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Array_Set_Item_ImplicitCast_1) == 0x0059C8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Array_Set_Item_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_LocomotionAngle_ImplicitCast) == 0x0059CC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_LocomotionAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_A_ImplicitCast_1) == 0x0059D0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_3) == 0x0059D8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_4) == 0x0059DC, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_1) == 0x0059E0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_5) == 0x0059E4, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_6) == 0x0059E8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Abs_A_ImplicitCast_2) == 0x0059F0, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Abs_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x0059F8, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_7) == 0x005A00, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_2) == 0x005A04, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_8) == 0x005A08, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_9) == 0x005A0C, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_3) == 0x005A10, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_LocomotionAngle_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, K2Node_StructMemberSet_Alpha_ImplicitCast_10) == 0x005A14, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::K2Node_StructMemberSet_Alpha_ImplicitCast_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ExecuteUbergraph_ABP_Item, CallFunc_Array_Set_Item_ImplicitCast_2) == 0x005A18, "Member 'ABP_Item_C_ExecuteUbergraph_ABP_Item::CallFunc_Array_Set_Item_ImplicitCast_2' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FindTransform
// 0x0E20 (0x0E20 - 0x0000)
struct ABP_Item_C_FindTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Raim_Stand_Rifle;                             // 0x0060(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Laim_Crouch_Pistol;                           // 0x00C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Laim_Stand_Pistol;                            // 0x0120(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TransformLocal;                                    // 0x0180(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Crouch_Pistol;                           // 0x01E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Stand_Pistol;                            // 0x0240(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Crouch_Pistol;                           // 0x02A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Stand_Pistol;                            // 0x0300(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Crouch_Rifle;                            // 0x0360(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Crouch_Rifle;                            // 0x03C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim_Stand_Rifle;                             // 0x0420(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim_Stand_Rifle;                             // 0x0480(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x04E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA7[0x7];                                     // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x04F0(0x0218)(NoDestructor)
	EAnim_ItemType                                Temp_byte_Variable;                                // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA8[0x7];                                     // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0710(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable_1;                            // 0x0770(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable_2;                            // 0x07D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable_3;                            // 0x0830(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable_4;                            // 0x0890(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable_5;                            // 0x08F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA9[0x7];                                     // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0958(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0960(0x0218)(NoDestructor)
	uint8                                         Pad_5FAA[0x8];                                     // 0x0B78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Select_Aim_Transform_ReturnValue;         // 0x0B80(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Select_Aim_Transform_ReturnValue_1;       // 0x0BE0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default;                             // 0x0C40(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Select_Aim_Transform_ReturnValue_2;       // 0x0CA0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Select_Aim_Transform_ReturnValue_3;       // 0x0D00(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default_1;                           // 0x0D60(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default_2;                           // 0x0DC0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_FindTransform) == 0x000010, "Wrong alignment on ABP_Item_C_FindTransform");
static_assert(sizeof(ABP_Item_C_FindTransform) == 0x000E20, "Wrong size on ABP_Item_C_FindTransform");
static_assert(offsetof(ABP_Item_C_FindTransform, Transform) == 0x000000, "Member 'ABP_Item_C_FindTransform::Transform' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Larm_Raim_Stand_Rifle) == 0x000060, "Member 'ABP_Item_C_FindTransform::Larm_Raim_Stand_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Laim_Crouch_Pistol) == 0x0000C0, "Member 'ABP_Item_C_FindTransform::Rarm_Laim_Crouch_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Laim_Stand_Pistol) == 0x000120, "Member 'ABP_Item_C_FindTransform::Rarm_Laim_Stand_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, TransformLocal) == 0x000180, "Member 'ABP_Item_C_FindTransform::TransformLocal' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Larm_Laim_Crouch_Pistol) == 0x0001E0, "Member 'ABP_Item_C_FindTransform::Larm_Laim_Crouch_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Larm_Laim_Stand_Pistol) == 0x000240, "Member 'ABP_Item_C_FindTransform::Larm_Laim_Stand_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Raim_Crouch_Pistol) == 0x0002A0, "Member 'ABP_Item_C_FindTransform::Rarm_Raim_Crouch_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Raim_Stand_Pistol) == 0x000300, "Member 'ABP_Item_C_FindTransform::Rarm_Raim_Stand_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Raim_Crouch_Rifle) == 0x000360, "Member 'ABP_Item_C_FindTransform::Rarm_Raim_Crouch_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Larm_Laim_Crouch_Rifle) == 0x0003C0, "Member 'ABP_Item_C_FindTransform::Larm_Laim_Crouch_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Larm_Laim_Stand_Rifle) == 0x000420, "Member 'ABP_Item_C_FindTransform::Larm_Laim_Stand_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Rarm_Raim_Stand_Rifle) == 0x000480, "Member 'ABP_Item_C_FindTransform::Rarm_Raim_Stand_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x0004E0, "Member 'ABP_Item_C_FindTransform::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_bool_Variable) == 0x0004E8, "Member 'ABP_Item_C_FindTransform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_GetAnimCache_ReturnValue) == 0x0004F0, "Member 'ABP_Item_C_FindTransform::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_byte_Variable) == 0x000708, "Member 'ABP_Item_C_FindTransform::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable) == 0x000710, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable_1) == 0x000770, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable_2) == 0x0007D0, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable_3) == 0x000830, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable_4) == 0x000890, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_struct_Variable_5) == 0x0008F0, "Member 'ABP_Item_C_FindTransform::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, Temp_bool_Variable_1) == 0x000950, "Member 'ABP_Item_C_FindTransform::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000958, "Member 'ABP_Item_C_FindTransform::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_GetAnimCache_ReturnValue_1) == 0x000960, "Member 'ABP_Item_C_FindTransform::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_Select_Aim_Transform_ReturnValue) == 0x000B80, "Member 'ABP_Item_C_FindTransform::CallFunc_Select_Aim_Transform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_Select_Aim_Transform_ReturnValue_1) == 0x000BE0, "Member 'ABP_Item_C_FindTransform::CallFunc_Select_Aim_Transform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, K2Node_Select_Default) == 0x000C40, "Member 'ABP_Item_C_FindTransform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_Select_Aim_Transform_ReturnValue_2) == 0x000CA0, "Member 'ABP_Item_C_FindTransform::CallFunc_Select_Aim_Transform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, CallFunc_Select_Aim_Transform_ReturnValue_3) == 0x000D00, "Member 'ABP_Item_C_FindTransform::CallFunc_Select_Aim_Transform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, K2Node_Select_Default_1) == 0x000D60, "Member 'ABP_Item_C_FindTransform::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FindTransform, K2Node_Select_Default_2) == 0x000DC0, "Member 'ABP_Item_C_FindTransform::K2Node_Select_Default_2' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_Item_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        Param_AimYaw;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AimPitch;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_Aiming");
static_assert(sizeof(ABP_Item_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_Item_C_FullBody_Aiming");
static_assert(offsetof(ABP_Item_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_Item_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FullBody_Aiming, Param_AimYaw) == 0x000010, "Member 'ABP_Item_C_FullBody_Aiming::Param_AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FullBody_Aiming, Param_AimPitch) == 0x000018, "Member 'ABP_Item_C_FullBody_Aiming::Param_AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_Item_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_Item_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_Item_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_Item_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_Item_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_CycleState");
static_assert(sizeof(ABP_Item_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_CycleState");
static_assert(offsetof(ABP_Item_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_Item_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_FallLandState");
static_assert(sizeof(ABP_Item_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_FallLandState");
static_assert(offsetof(ABP_Item_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_Item_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_Item_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_Item_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_Item_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_IdleState");
static_assert(sizeof(ABP_Item_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_IdleState");
static_assert(offsetof(ABP_Item_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_Item_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_Item_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_Item_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_Item_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_Item_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_Item_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_Item_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_Item_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_Item_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_Item_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_PivotState");
static_assert(sizeof(ABP_Item_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_PivotState");
static_assert(offsetof(ABP_Item_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_Item_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_StartState");
static_assert(sizeof(ABP_Item_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_StartState");
static_assert(offsetof(ABP_Item_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_Item_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_Item_C_FullBody_StopState");
static_assert(sizeof(ABP_Item_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_Item_C_FullBody_StopState");
static_assert(offsetof(ABP_Item_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_Item_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_Item_C_FullBodyAdditives");
static_assert(sizeof(ABP_Item_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_Item_C_FullBodyAdditives");
static_assert(offsetof(ABP_Item_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_Item_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetAimCorrection
// 0x0478 (0x0478 - 0x0000)
struct ABP_Item_C_GetAimCorrection final
{
public:
	bool                                          AimCorrection;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAC[0x6];                                     // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAD[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0248(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAE[0x3];                                     // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAF[0x2];                                     // 0x046A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0473(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetAimCorrection) == 0x000008, "Wrong alignment on ABP_Item_C_GetAimCorrection");
static_assert(sizeof(ABP_Item_C_GetAimCorrection) == 0x000478, "Wrong size on ABP_Item_C_GetAimCorrection");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, AimCorrection) == 0x000000, "Member 'ABP_Item_C_GetAimCorrection::AimCorrection' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetAnimStance_ReturnValue) == 0x000230, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000231, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000238, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_MakeLiteralInt_ReturnValue) == 0x000240, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_GetAnimCache_ReturnValue_1) == 0x000248, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000460, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000464, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_Not_PreBool_ReturnValue) == 0x000468, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000469, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x00046C, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_BooleanOR_ReturnValue) == 0x000470, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000471, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_BooleanOR_ReturnValue_1) == 0x000472, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_BooleanAND_ReturnValue) == 0x000473, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetAimCorrection, CallFunc_BooleanAND_ReturnValue_1) == 0x000474, "Member 'ABP_Item_C_GetAimCorrection::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetDesiredPivotSequence
// 0x02C8 (0x02C8 - 0x0000)
struct ABP_Item_C_GetDesiredPivotSequence final
{
public:
	ECardinalDirectionType                        InDirection;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB2[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0038(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB3[0x6];                                     // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_1;              // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB4[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB5[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetDesiredPivotSequence) == 0x000008, "Wrong alignment on ABP_Item_C_GetDesiredPivotSequence");
static_assert(sizeof(ABP_Item_C_GetDesiredPivotSequence) == 0x0002C8, "Wrong size on ABP_Item_C_GetDesiredPivotSequence");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, InDirection) == 0x000000, "Member 'ABP_Item_C_GetDesiredPivotSequence::InDirection' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, ReturnValue) == 0x000008, "Member 'ABP_Item_C_GetDesiredPivotSequence::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, Temp_byte_Variable) == 0x000010, "Member 'ABP_Item_C_GetDesiredPivotSequence::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000018, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000020, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetAnimStance_ReturnValue) == 0x000028, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, Temp_bool_Variable) == 0x000029, "Member 'ABP_Item_C_GetDesiredPivotSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000030, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetAnimCache_ReturnValue) == 0x000038, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, Temp_bool_Variable_1) == 0x000250, "Member 'ABP_Item_C_GetDesiredPivotSequence::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetMirrorState_IsMirror) == 0x000251, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x000258, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x000260, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000268, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_GetAnimStance_ReturnValue_1) == 0x000270, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_GetAnimStance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x000278, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x000280, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x000288, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x000290, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, Temp_byte_Variable_1) == 0x000298, "Member 'ABP_Item_C_GetDesiredPivotSequence::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x0002A0, "Member 'ABP_Item_C_GetDesiredPivotSequence::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, K2Node_Select_Default) == 0x0002A8, "Member 'ABP_Item_C_GetDesiredPivotSequence::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, K2Node_Select_Default_1) == 0x0002B0, "Member 'ABP_Item_C_GetDesiredPivotSequence::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, K2Node_Select_Default_2) == 0x0002B8, "Member 'ABP_Item_C_GetDesiredPivotSequence::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetDesiredPivotSequence, K2Node_Select_Default_3) == 0x0002C0, "Member 'ABP_Item_C_GetDesiredPivotSequence::K2Node_Select_Default_3' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetJumpLean
// 0x09D0 (0x09D0 - 0x0000)
struct ABP_Item_C_GetJumpLean final
{
public:
	struct FRotator                               Lean;                                              // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0028(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0240(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB6[0x7];                                     // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB7[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB8[0x6];                                     // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_1;          // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_2;          // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB9[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_3;          // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBA[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_4;          // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04E8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x0708(0x0218)(NoDestructor)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBB[0x7];                                     // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_5;          // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue_6;          // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_8;      // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_9;      // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x09A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_10;     // 0x09A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x09B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x09C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x09CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetJumpLean) == 0x000008, "Wrong alignment on ABP_Item_C_GetJumpLean");
static_assert(sizeof(ABP_Item_C_GetJumpLean) == 0x0009D0, "Wrong size on ABP_Item_C_GetJumpLean");
static_assert(offsetof(ABP_Item_C_GetJumpLean, Lean) == 0x000000, "Member 'ABP_Item_C_GetJumpLean::Lean' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000018, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000020, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetAnimCache_ReturnValue) == 0x000028, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetAnimCache_ReturnValue_1) == 0x000240, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000458, "Member 'ABP_Item_C_GetJumpLean::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_X) == 0x000460, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_Y) == 0x000468, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_Z) == 0x000470, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000478, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000480, "Member 'ABP_Item_C_GetJumpLean::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000488, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Not_PreBool_ReturnValue) == 0x000490, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000491, "Member 'ABP_Item_C_GetJumpLean::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_1) == 0x000498, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_2) == 0x0004A0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0004A8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0004B0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_3) == 0x0004B8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0004C0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0004C8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_4) == 0x0004D0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x0004D8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0004E0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004E8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000700, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_GetAnimCache_ReturnValue_3) == 0x000708, "Member 'ABP_Item_C_GetJumpLean::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_X_1) == 0x000920, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_Y_1) == 0x000928, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_BreakVector_Z_1) == 0x000930, "Member 'ABP_Item_C_GetJumpLean::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_MapRangeClamped_ReturnValue) == 0x000938, "Member 'ABP_Item_C_GetJumpLean::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_VSizeXY_ReturnValue) == 0x000940, "Member 'ABP_Item_C_GetJumpLean::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000948, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000950, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000958, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_5) == 0x000960, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Conv_BoolToDouble_ReturnValue_6) == 0x000968, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Conv_BoolToDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000970, "Member 'ABP_Item_C_GetJumpLean::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000978, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000980, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000988, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_8) == 0x000990, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_9) == 0x000998, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0009A0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_Multiply_DoubleDouble_ReturnValue_10) == 0x0009A8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_Multiply_DoubleDouble_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_MakeRotator_ReturnValue) == 0x0009B0, "Member 'ABP_Item_C_GetJumpLean::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0009C8, "Member 'ABP_Item_C_GetJumpLean::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetJumpLean, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0009CC, "Member 'ABP_Item_C_GetJumpLean::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetMainAnimBPThreadSafe
// 0x0020 (0x0020 - 0x0000)
struct ABP_Item_C_GetMainAnimBPThreadSafe final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetDefaultAnimInstance_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetMainAnimBPThreadSafe) == 0x000008, "Wrong alignment on ABP_Item_C_GetMainAnimBPThreadSafe");
static_assert(sizeof(ABP_Item_C_GetMainAnimBPThreadSafe) == 0x000020, "Wrong size on ABP_Item_C_GetMainAnimBPThreadSafe");
static_assert(offsetof(ABP_Item_C_GetMainAnimBPThreadSafe, ReturnValue) == 0x000000, "Member 'ABP_Item_C_GetMainAnimBPThreadSafe::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMainAnimBPThreadSafe, CallFunc_GetDefaultAnimInstance_ReturnValue) == 0x000008, "Member 'ABP_Item_C_GetMainAnimBPThreadSafe::CallFunc_GetDefaultAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMainAnimBPThreadSafe, K2Node_DynamicCast_AsABP_Human) == 0x000010, "Member 'ABP_Item_C_GetMainAnimBPThreadSafe::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMainAnimBPThreadSafe, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_Item_C_GetMainAnimBPThreadSafe::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetMirrorState
// 0x0458 (0x0458 - 0x0000)
struct ABP_Item_C_GetMirrorState final
{
public:
	bool                                          IsMirror;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBD[0x2];                                     // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0453(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetMirrorState) == 0x000008, "Wrong alignment on ABP_Item_C_GetMirrorState");
static_assert(sizeof(ABP_Item_C_GetMirrorState) == 0x000458, "Wrong size on ABP_Item_C_GetMirrorState");
static_assert(offsetof(ABP_Item_C_GetMirrorState, IsMirror) == 0x000000, "Member 'ABP_Item_C_GetMirrorState::IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_GetMirrorState::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_GetMirrorState::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_GetMirrorState::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_GetMirrorState::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_Not_PreBool_ReturnValue) == 0x000448, "Member 'ABP_Item_C_GetMirrorState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000449, "Member 'ABP_Item_C_GetMirrorState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_MakeLiteralInt_ReturnValue) == 0x00044C, "Member 'ABP_Item_C_GetMirrorState::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000450, "Member 'ABP_Item_C_GetMirrorState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000451, "Member 'ABP_Item_C_GetMirrorState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_BooleanAND_ReturnValue) == 0x000452, "Member 'ABP_Item_C_GetMirrorState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_BooleanAND_ReturnValue_1) == 0x000453, "Member 'ABP_Item_C_GetMirrorState::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMirrorState, CallFunc_BooleanOR_ReturnValue) == 0x000454, "Member 'ABP_Item_C_GetMirrorState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetMovementComponent
// 0x0018 (0x0018 - 0x0000)
struct ABP_Item_C_GetMovementComponent final
{
public:
	class UCharacterMovementComponent*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            K2Node_DynamicCast_AsCharacter_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetMovementComponent) == 0x000008, "Wrong alignment on ABP_Item_C_GetMovementComponent");
static_assert(sizeof(ABP_Item_C_GetMovementComponent) == 0x000018, "Wrong size on ABP_Item_C_GetMovementComponent");
static_assert(offsetof(ABP_Item_C_GetMovementComponent, ReturnValue) == 0x000000, "Member 'ABP_Item_C_GetMovementComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMovementComponent, K2Node_DynamicCast_AsCharacter_Movement_Component) == 0x000008, "Member 'ABP_Item_C_GetMovementComponent::K2Node_DynamicCast_AsCharacter_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetMovementComponent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Item_C_GetMovementComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_Item_C_KneeSlide_State");
static_assert(sizeof(ABP_Item_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_Item_C_KneeSlide_State");
static_assert(offsetof(ABP_Item_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_Item_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.Land Recovery Start
// 0x0258 (0x0258 - 0x0000)
struct ABP_Item_C_Land_Recovery_Start final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0028(0x0218)(NoDestructor)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_Land_Recovery_Start) == 0x000008, "Wrong alignment on ABP_Item_C_Land_Recovery_Start");
static_assert(sizeof(ABP_Item_C_Land_Recovery_Start) == 0x000258, "Wrong size on ABP_Item_C_Land_Recovery_Start");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, Context) == 0x000000, "Member 'ABP_Item_C_Land_Recovery_Start::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, Node) == 0x000010, "Member 'ABP_Item_C_Land_Recovery_Start::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_Land_Recovery_Start::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, CallFunc_GetAnimCache_ReturnValue) == 0x000028, "Member 'ABP_Item_C_Land_Recovery_Start::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, CallFunc_MapRangeClamped_ReturnValue) == 0x000240, "Member 'ABP_Item_C_Land_Recovery_Start::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000248, "Member 'ABP_Item_C_Land_Recovery_Start::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Land_Recovery_Start, CallFunc_SelectFloat_ReturnValue) == 0x000250, "Member 'ABP_Item_C_Land_Recovery_Start::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_Item_C_Limbless_State");
static_assert(sizeof(ABP_Item_C_Limbless_State) == 0x000010, "Wrong size on ABP_Item_C_Limbless_State");
static_assert(offsetof(ABP_Item_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_Item_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Item_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_Item_C_NPC_CoverState");
static_assert(sizeof(ABP_Item_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_Item_C_NPC_CoverState");
static_assert(offsetof(ABP_Item_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_Item_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.ProcessIdleBreakTransitionLogic
// 0x0018 (0x0018 - 0x0000)
struct ABP_Item_C_ProcessIdleBreakTransitionLogic final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayIdleBreak_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_ProcessIdleBreakTransitionLogic) == 0x000008, "Wrong alignment on ABP_Item_C_ProcessIdleBreakTransitionLogic");
static_assert(sizeof(ABP_Item_C_ProcessIdleBreakTransitionLogic) == 0x000018, "Wrong size on ABP_Item_C_ProcessIdleBreakTransitionLogic");
static_assert(offsetof(ABP_Item_C_ProcessIdleBreakTransitionLogic, DeltaTime) == 0x000000, "Member 'ABP_Item_C_ProcessIdleBreakTransitionLogic::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ProcessIdleBreakTransitionLogic, CallFunc_CanPlayIdleBreak_ReturnValue) == 0x000008, "Member 'ABP_Item_C_ProcessIdleBreakTransitionLogic::CallFunc_CanPlayIdleBreak_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ProcessIdleBreakTransitionLogic, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_Item_C_ProcessIdleBreakTransitionLogic::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.Select Aim Transform
// 0x07C0 (0x07C0 - 0x0000)
struct ABP_Item_C_Select_Aim_Transform final
{
public:
	struct FTransform                             Rarm_Laim;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Rarm_Raim;                                         // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Laim;                                         // 0x00C0(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Larm_Raim;                                         // 0x0120(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ReturnValue;                                       // 0x0180(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBF[0x2];                                     // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x01F8(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0410(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x062A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC0[0x5];                                     // 0x062B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Select_Default;                             // 0x0630(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC1[0xF];                                     // 0x0691(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Select_Default_1;                           // 0x06A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default_2;                           // 0x0700(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default_3;                           // 0x0760(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_Select_Aim_Transform) == 0x000010, "Wrong alignment on ABP_Item_C_Select_Aim_Transform");
static_assert(sizeof(ABP_Item_C_Select_Aim_Transform) == 0x0007C0, "Wrong size on ABP_Item_C_Select_Aim_Transform");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Rarm_Laim) == 0x000000, "Member 'ABP_Item_C_Select_Aim_Transform::Rarm_Laim' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Rarm_Raim) == 0x000060, "Member 'ABP_Item_C_Select_Aim_Transform::Rarm_Raim' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Larm_Laim) == 0x0000C0, "Member 'ABP_Item_C_Select_Aim_Transform::Larm_Laim' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Larm_Raim) == 0x000120, "Member 'ABP_Item_C_Select_Aim_Transform::Larm_Raim' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, ReturnValue) == 0x000180, "Member 'ABP_Item_C_Select_Aim_Transform::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Temp_bool_Variable) == 0x0001E0, "Member 'ABP_Item_C_Select_Aim_Transform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Temp_bool_Variable_1) == 0x0001E1, "Member 'ABP_Item_C_Select_Aim_Transform::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_MakeLiteralInt_ReturnValue) == 0x0001E4, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x0001E8, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x0001F0, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_GetAnimCache_ReturnValue) == 0x0001F8, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_GetAnimCache_ReturnValue_1) == 0x000410, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000628, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Temp_bool_Variable_2) == 0x000629, "Member 'ABP_Item_C_Select_Aim_Transform::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00062A, "Member 'ABP_Item_C_Select_Aim_Transform::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, K2Node_Select_Default) == 0x000630, "Member 'ABP_Item_C_Select_Aim_Transform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, Temp_bool_Variable_3) == 0x000690, "Member 'ABP_Item_C_Select_Aim_Transform::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, K2Node_Select_Default_1) == 0x0006A0, "Member 'ABP_Item_C_Select_Aim_Transform::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, K2Node_Select_Default_2) == 0x000700, "Member 'ABP_Item_C_Select_Aim_Transform::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Select_Aim_Transform, K2Node_Select_Default_3) == 0x000760, "Member 'ABP_Item_C_Select_Aim_Transform::K2Node_Select_Default_3' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SelectAimCorrectivePose
// 0x04A8 (0x04A8 - 0x0000)
struct ABP_Item_C_SelectAimCorrectivePose final
{
public:
	struct FAnimStruct_AimingCorrection           AnimStruct_AimingCorrection;                       // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC2[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC3[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC4[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0270(0x0218)(NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x048B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC5[0x3];                                     // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0498(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_3;                           // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SelectAimCorrectivePose) == 0x000008, "Wrong alignment on ABP_Item_C_SelectAimCorrectivePose");
static_assert(sizeof(ABP_Item_C_SelectAimCorrectivePose) == 0x0004A8, "Wrong size on ABP_Item_C_SelectAimCorrectivePose");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, AnimStruct_AimingCorrection) == 0x000000, "Member 'ABP_Item_C_SelectAimCorrectivePose::AnimStruct_AimingCorrection' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, ReturnValue) == 0x000020, "Member 'ABP_Item_C_SelectAimCorrectivePose::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_MakeLiteralInt_ReturnValue) == 0x000028, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, Temp_bool_Variable) == 0x00002C, "Member 'ABP_Item_C_SelectAimCorrectivePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000030, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, Temp_bool_Variable_1) == 0x000038, "Member 'ABP_Item_C_SelectAimCorrectivePose::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000258, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, Temp_bool_Variable_2) == 0x00025C, "Member 'ABP_Item_C_SelectAimCorrectivePose::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000260, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, K2Node_Select_Default) == 0x000268, "Member 'ABP_Item_C_SelectAimCorrectivePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_GetAnimCache_ReturnValue_1) == 0x000270, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000488, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000489, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00048A, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, CallFunc_BooleanAND_ReturnValue) == 0x00048B, "Member 'ABP_Item_C_SelectAimCorrectivePose::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, Temp_bool_Variable_3) == 0x00048C, "Member 'ABP_Item_C_SelectAimCorrectivePose::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, K2Node_Select_Default_1) == 0x000490, "Member 'ABP_Item_C_SelectAimCorrectivePose::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, K2Node_Select_Default_2) == 0x000498, "Member 'ABP_Item_C_SelectAimCorrectivePose::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectAimCorrectivePose, K2Node_Select_Default_3) == 0x0004A0, "Member 'ABP_Item_C_SelectAimCorrectivePose::K2Node_Select_Default_3' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SelectDirectionAnimation
// 0x0060 (0x0060 - 0x0000)
struct ABP_Item_C_SelectDirectionAnimation final
{
public:
	ECardinalDirectionType                        Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Forward;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Backward;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Left;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Right;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Mirror;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC7[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC8[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECardinalDirectionType                        Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC9[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SelectDirectionAnimation) == 0x000008, "Wrong alignment on ABP_Item_C_SelectDirectionAnimation");
static_assert(sizeof(ABP_Item_C_SelectDirectionAnimation) == 0x000060, "Wrong size on ABP_Item_C_SelectDirectionAnimation");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Param_Index) == 0x000000, "Member 'ABP_Item_C_SelectDirectionAnimation::Param_Index' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Forward) == 0x000008, "Member 'ABP_Item_C_SelectDirectionAnimation::Forward' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Backward) == 0x000010, "Member 'ABP_Item_C_SelectDirectionAnimation::Backward' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Left) == 0x000018, "Member 'ABP_Item_C_SelectDirectionAnimation::Left' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Right) == 0x000020, "Member 'ABP_Item_C_SelectDirectionAnimation::Right' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Mirror) == 0x000028, "Member 'ABP_Item_C_SelectDirectionAnimation::Mirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, ReturnValue) == 0x000030, "Member 'ABP_Item_C_SelectDirectionAnimation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Temp_bool_Variable) == 0x000038, "Member 'ABP_Item_C_SelectDirectionAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Temp_bool_Variable_1) == 0x000039, "Member 'ABP_Item_C_SelectDirectionAnimation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, K2Node_Select_Default) == 0x000040, "Member 'ABP_Item_C_SelectDirectionAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, K2Node_Select_Default_1) == 0x000048, "Member 'ABP_Item_C_SelectDirectionAnimation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, Temp_byte_Variable) == 0x000050, "Member 'ABP_Item_C_SelectDirectionAnimation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectDirectionAnimation, K2Node_Select_Default_2) == 0x000058, "Member 'ABP_Item_C_SelectDirectionAnimation::K2Node_Select_Default_2' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SelectStanceTransition
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_Item_C_SelectStanceTransition final
{
public:
	struct FAnimStruct_StanceTransitions          Anim_Struct;                                       // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Transition_Animation;                              // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCA[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_2;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCB[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCC[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_3;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCD[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_3;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SelectStanceTransition) == 0x000008, "Wrong alignment on ABP_Item_C_SelectStanceTransition");
static_assert(sizeof(ABP_Item_C_SelectStanceTransition) == 0x0000A0, "Wrong size on ABP_Item_C_SelectStanceTransition");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Anim_Struct) == 0x000000, "Member 'ABP_Item_C_SelectStanceTransition::Anim_Struct' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Transition_Animation) == 0x000048, "Member 'ABP_Item_C_SelectStanceTransition::Transition_Animation' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SelectStanceTransition::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Temp_byte_Variable) == 0x000058, "Member 'ABP_Item_C_SelectStanceTransition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Temp_byte_Variable_1) == 0x000059, "Member 'ABP_Item_C_SelectStanceTransition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, K2Node_Select_Default) == 0x000060, "Member 'ABP_Item_C_SelectStanceTransition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, K2Node_Select_Default_1) == 0x000068, "Member 'ABP_Item_C_SelectStanceTransition::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Temp_byte_Variable_2) == 0x000070, "Member 'ABP_Item_C_SelectStanceTransition::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000078, "Member 'ABP_Item_C_SelectStanceTransition::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, CallFunc_GetAnimStance_ReturnValue) == 0x000080, "Member 'ABP_Item_C_SelectStanceTransition::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, K2Node_Select_Default_2) == 0x000088, "Member 'ABP_Item_C_SelectStanceTransition::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, Temp_byte_Variable_3) == 0x000090, "Member 'ABP_Item_C_SelectStanceTransition::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectStanceTransition, K2Node_Select_Default_3) == 0x000098, "Member 'ABP_Item_C_SelectStanceTransition::K2Node_Select_Default_3' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SelectTurnInPlaceAnimation
// 0x09D0 (0x09D0 - 0x0000)
struct ABP_Item_C_SelectTurnInPlaceAnimation final
{
public:
	double                                        Direction;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0020(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0238(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCE[0x6];                                     // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0458(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0462(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCF[0x5];                                     // 0x0463(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x0470(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_1;              // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD0[0x6];                                     // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_2;                              // 0x048B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD1[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6;    // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_3;                              // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_2;              // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD2[0x6];                                     // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7;    // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_3;              // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD3[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8;    // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04B8(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x06D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x06D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD4[0x5];                                     // 0x06D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9;    // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06E0(0x0218)(NoDestructor)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x08F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x08F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD5[0x6];                                     // 0x08FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD6[0x7];                                     // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0910(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_4;                              // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_5;                              // 0x0919(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD7[0x6];                                     // 0x091A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_3;                           // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0930(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD8[0x7];                                     // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_4;                           // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_5;                           // 0x0940(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimStruct_ArmedStates                K2Node_Select_Default_6;                           // 0x0948(0x0018)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD9[0x7];                                     // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_7;                           // 0x0968(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_8;                           // 0x0970(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDA[0x7];                                     // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_9;                           // 0x0980(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_10;                          // 0x0988(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimStruct_ArmedStates                K2Node_Select_Default_11;                          // 0x0990(0x0018)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_12;                          // 0x09A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_13;                          // 0x09B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_14;                          // 0x09B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_15;                          // 0x09C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_16;                          // 0x09C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SelectTurnInPlaceAnimation) == 0x000008, "Wrong alignment on ABP_Item_C_SelectTurnInPlaceAnimation");
static_assert(sizeof(ABP_Item_C_SelectTurnInPlaceAnimation) == 0x0009D0, "Wrong size on ABP_Item_C_SelectTurnInPlaceAnimation");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Direction) == 0x000000, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Direction' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Result) == 0x000008, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000010, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000018, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimCache_ReturnValue) == 0x000020, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimCache_ReturnValue_1) == 0x000238, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable) == 0x000450, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_1) == 0x000451, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000458, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable) == 0x000460, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimStance_ReturnValue) == 0x000461, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable_1) == 0x000462, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000468, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x000470, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimStance_ReturnValue_1) == 0x000478, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimStance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000479, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x000480, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_2) == 0x000488, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_3) == 0x000489, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00048A, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable_2) == 0x00048B, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6) == 0x000490, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable_3) == 0x000498, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimStance_ReturnValue_2) == 0x000499, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimStance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7) == 0x0004A0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimStance_ReturnValue_3) == 0x0004A8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimStance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8) == 0x0004B0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004B8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_4) == 0x0006D0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_5) == 0x0006D1, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_6) == 0x0006D2, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9) == 0x0006D8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006E0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_GetMirrorState_IsMirror) == 0x0008F8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_7) == 0x0008F9, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default) == 0x000900, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_8) == 0x000908, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_1) == 0x000910, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable_4) == 0x000918, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_byte_Variable_5) == 0x000919, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_2) == 0x000920, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_3) == 0x000928, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_9) == 0x000930, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_4) == 0x000938, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_5) == 0x000940, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_6) == 0x000948, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000960, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_7) == 0x000968, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_8) == 0x000970, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, Temp_bool_Variable_10) == 0x000978, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_9) == 0x000980, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_10) == 0x000988, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_11) == 0x000990, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_12) == 0x0009A8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_13) == 0x0009B0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_13' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_14) == 0x0009B8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_14' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_15) == 0x0009C0, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_15' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SelectTurnInPlaceAnimation, K2Node_Select_Default_16) == 0x0009C8, "Member 'ABP_Item_C_SelectTurnInPlaceAnimation::K2Node_Select_Default_16' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetAimOffset
// 0x0968 (0x0968 - 0x0000)
struct ABP_Item_C_SetAimOffset final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDB[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpacePlayerReference             CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToBlendSpacePlayerPure_Result;     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDC[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDD[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0050(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0270(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x048B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDE[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x0498(0x0218)(NoDestructor)
	EAnimStances                                  Temp_byte_Variable;                                // 0x06B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDF[0x7];                                     // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE0[0x7];                                     // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x06C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimStanceBlendValue_ReturnValue;      // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE1[0x4];                                     // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable_1;                              // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE2[0x7];                                     // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x06E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06F0(0x0218)(NoDestructor)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE3[0x3];                                     // 0x0909(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x090C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   K2Node_Select_Default;                             // 0x0910(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0919(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x091A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE4[0x5];                                     // 0x091B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   K2Node_Select_Default_1;                           // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   K2Node_Select_Default_2;                           // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   K2Node_Select_Default_3;                           // 0x0930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   K2Node_Select_Default_4;                           // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   K2Node_Select_Default_5;                           // 0x0940(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBlendSpacePlayerReference             CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue; // 0x0948(0x0010)(NoDestructor)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBlendSpaceWithInertialBlending_BlendTime_ImplicitCast; // 0x0960(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SetAimOffset) == 0x000008, "Wrong alignment on ABP_Item_C_SetAimOffset");
static_assert(sizeof(ABP_Item_C_SetAimOffset) == 0x000968, "Wrong size on ABP_Item_C_SetAimOffset");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Context) == 0x000000, "Member 'ABP_Item_C_SetAimOffset::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Node) == 0x000010, "Member 'ABP_Item_C_SetAimOffset::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_bool_Variable) == 0x000020, "Member 'ABP_Item_C_SetAimOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer) == 0x000028, "Member 'ABP_Item_C_SetAimOffset::CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_ConvertToBlendSpacePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_SetAimOffset::CallFunc_ConvertToBlendSpacePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_bool_Variable_1) == 0x000048, "Member 'ABP_Item_C_SetAimOffset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimCache_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000268, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimCache_ReturnValue_1) == 0x000270, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000488, "Member 'ABP_Item_C_SetAimOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000489, "Member 'ABP_Item_C_SetAimOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_bool_Variable_2) == 0x00048A, "Member 'ABP_Item_C_SetAimOffset::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_BooleanOR_ReturnValue) == 0x00048B, "Member 'ABP_Item_C_SetAimOffset::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000490, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimCache_ReturnValue_2) == 0x000498, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_byte_Variable) == 0x0006B0, "Member 'ABP_Item_C_SetAimOffset::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x0006B8, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimStance_ReturnValue) == 0x0006C0, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0006C8, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimStanceBlendValue_ReturnValue) == 0x0006D0, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimStanceBlendValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0006D8, "Member 'ABP_Item_C_SetAimOffset::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_byte_Variable_1) == 0x0006E0, "Member 'ABP_Item_C_SetAimOffset::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x0006E8, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006F0, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_GetMirrorState_IsMirror) == 0x000908, "Member 'ABP_Item_C_SetAimOffset::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_MakeLiteralInt_ReturnValue) == 0x00090C, "Member 'ABP_Item_C_SetAimOffset::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default) == 0x000910, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000918, "Member 'ABP_Item_C_SetAimOffset::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_BooleanOR_ReturnValue_1) == 0x000919, "Member 'ABP_Item_C_SetAimOffset::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, Temp_bool_Variable_3) == 0x00091A, "Member 'ABP_Item_C_SetAimOffset::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default_1) == 0x000920, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default_2) == 0x000928, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default_3) == 0x000930, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default_4) == 0x000938, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, K2Node_Select_Default_5) == 0x000940, "Member 'ABP_Item_C_SetAimOffset::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue) == 0x000948, "Member 'ABP_Item_C_SetAimOffset::CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000958, "Member 'ABP_Item_C_SetAimOffset::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetAimOffset, CallFunc_SetBlendSpaceWithInertialBlending_BlendTime_ImplicitCast) == 0x000960, "Member 'ABP_Item_C_SetAimOffset::CallFunc_SetBlendSpaceWithInertialBlending_BlendTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetLimbState
// 0x0260 (0x0260 - 0x0000)
struct ABP_Item_C_SetLimbState final
{
public:
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE6[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0020(0x0218)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_4;             // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_5;             // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0246(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0247(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE7[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_6;             // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE8[0x2];                                     // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_7;             // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_8;             // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x025E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x025F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SetLimbState) == 0x000008, "Wrong alignment on ABP_Item_C_SetLimbState");
static_assert(sizeof(ABP_Item_C_SetLimbState) == 0x000260, "Wrong size on ABP_Item_C_SetLimbState");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue) == 0x000000, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000004, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x000008, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000010, "Member 'ABP_Item_C_SetLimbState::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x000018, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_GetAnimCache_ReturnValue) == 0x000020, "Member 'ABP_Item_C_SetLimbState::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_4) == 0x000238, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_5) == 0x00023C, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000240, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000241, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000242, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000243, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue) == 0x000244, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000245, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue_1) == 0x000246, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000247, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue_2) == 0x000248, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_6) == 0x00024C, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue_3) == 0x000250, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000251, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_7) == 0x000254, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_MakeLiteralInt_ReturnValue_8) == 0x000258, "Member 'ABP_Item_C_SetLimbState::CallFunc_MakeLiteralInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x00025C, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x00025D, "Member 'ABP_Item_C_SetLimbState::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue_4) == 0x00025E, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetLimbState, CallFunc_BooleanOR_ReturnValue_5) == 0x00025F, "Member 'ABP_Item_C_SetLimbState::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpFallLandAnim
// 0x0048 (0x0048 - 0x0000)
struct ABP_Item_C_SetUpFallLandAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE9[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetUpFallLandAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpFallLandAnim");
static_assert(sizeof(ABP_Item_C_SetUpFallLandAnim) == 0x000048, "Wrong size on ABP_Item_C_SetUpFallLandAnim");
static_assert(offsetof(ABP_Item_C_SetUpFallLandAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetUpFallLandAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpFallLandAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetUpFallLandAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpFallLandAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ABP_Item_C_SetUpFallLandAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpFallLandAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ABP_Item_C_SetUpFallLandAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpFallLandAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000038, "Member 'ABP_Item_C_SetUpFallLandAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpIdleBreakAnim
// 0x0068 (0x0068 - 0x0000)
struct ABP_Item_C_SetUpIdleBreakAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEA[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEB[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEC[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0050(0x0010)(NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SetUpIdleBreakAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpIdleBreakAnim");
static_assert(sizeof(ABP_Item_C_SetUpIdleBreakAnim) == 0x000068, "Wrong size on ABP_Item_C_SetUpIdleBreakAnim");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetUpIdleBreakAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetUpIdleBreakAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_Array_Get_Item) == 0x000040, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, Temp_int_Variable) == 0x000048, "Member 'ABP_Item_C_SetUpIdleBreakAnim::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_SetSequence_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleBreakAnim, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000060, "Member 'ABP_Item_C_SetUpIdleBreakAnim::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpIdleState
// 0x0020 (0x0020 - 0x0000)
struct ABP_Item_C_SetUpIdleState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetUpIdleState) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpIdleState");
static_assert(sizeof(ABP_Item_C_SetUpIdleState) == 0x000020, "Wrong size on ABP_Item_C_SetUpIdleState");
static_assert(offsetof(ABP_Item_C_SetUpIdleState, Context) == 0x000000, "Member 'ABP_Item_C_SetUpIdleState::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpIdleState, Node) == 0x000010, "Member 'ABP_Item_C_SetUpIdleState::Node' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetupIdleTransition
// 0x0288 (0x0288 - 0x0000)
struct ABP_Item_C_SetupIdleTransition final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FED[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEE[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0048(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_SelectStanceTransition_Transition_Animation; // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectStanceTransition_Transition_Animation_1; // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0278(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetupIdleTransition) == 0x000008, "Wrong alignment on ABP_Item_C_SetupIdleTransition");
static_assert(sizeof(ABP_Item_C_SetupIdleTransition) == 0x000288, "Wrong size on ABP_Item_C_SetupIdleTransition");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, Context) == 0x000000, "Member 'ABP_Item_C_SetupIdleTransition::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, Node) == 0x000010, "Member 'ABP_Item_C_SetupIdleTransition::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, Temp_bool_Variable) == 0x000020, "Member 'ABP_Item_C_SetupIdleTransition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_GetAnimCache_ReturnValue) == 0x000048, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_SelectStanceTransition_Transition_Animation) == 0x000260, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_SelectStanceTransition_Transition_Animation' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_SelectStanceTransition_Transition_Animation_1) == 0x000268, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_SelectStanceTransition_Transition_Animation_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, K2Node_Select_Default) == 0x000270, "Member 'ABP_Item_C_SetupIdleTransition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupIdleTransition, CallFunc_SetSequence_ReturnValue) == 0x000278, "Member 'ABP_Item_C_SetupIdleTransition::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetupNPC_LeanIn
// 0x0940 (0x0940 - 0x0000)
struct ABP_Item_C_SetupNPC_LeanIn final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UAnimSequence*                          Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEF[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_1;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0050(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeanType                                     Temp_byte_Variable;                                // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF0[0x6];                                     // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_2;                            // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_3;                            // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_4;                            // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0290(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04B0(0x0218)(NoDestructor)
	ELeanType                                     Temp_byte_Variable_1;                              // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF1[0x7];                                     // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x06D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06E0(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_Array_Get_Item_1;                         // 0x08F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_2;                         // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0908(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_3;                         // 0x0910(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_4;                         // 0x0918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0930(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetupNPC_LeanIn) == 0x000008, "Wrong alignment on ABP_Item_C_SetupNPC_LeanIn");
static_assert(sizeof(ABP_Item_C_SetupNPC_LeanIn) == 0x000940, "Wrong size on ABP_Item_C_SetupNPC_LeanIn");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Context) == 0x000000, "Member 'ABP_Item_C_SetupNPC_LeanIn::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Node) == 0x000010, "Member 'ABP_Item_C_SetupNPC_LeanIn::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_object_Variable) == 0x000020, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_object_Variable_1) == 0x000040, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000048, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetAnimCache_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_bool_Variable) == 0x000268, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_byte_Variable) == 0x000269, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_object_Variable_2) == 0x000270, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_object_Variable_3) == 0x000278, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_object_Variable_4) == 0x000280, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000288, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetAnimCache_ReturnValue_1) == 0x000290, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x0004A8, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004B0, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, Temp_byte_Variable_1) == 0x0006C8, "Member 'ABP_Item_C_SetupNPC_LeanIn::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x0006D0, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_Array_Get_Item) == 0x0006D8, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006E0, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_Array_Get_Item_1) == 0x0008F8, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_Array_Get_Item_2) == 0x000900, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, K2Node_Select_Default) == 0x000908, "Member 'ABP_Item_C_SetupNPC_LeanIn::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_Array_Get_Item_3) == 0x000910, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_Array_Get_Item_4) == 0x000918, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, K2Node_Select_Default_1) == 0x000920, "Member 'ABP_Item_C_SetupNPC_LeanIn::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, K2Node_Select_Default_2) == 0x000928, "Member 'ABP_Item_C_SetupNPC_LeanIn::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanIn, CallFunc_SetSequence_ReturnValue) == 0x000930, "Member 'ABP_Item_C_SetupNPC_LeanIn::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetupNPC_LeanOut
// 0x02E0 (0x02E0 - 0x0000)
struct ABP_Item_C_SetupNPC_LeanOut final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UAnimSequence*                          Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF2[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_1;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeanType                                     Temp_byte_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF3[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_3;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_4;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0070(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_1;                         // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_2;                         // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_3;                         // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_4;                         // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ELeanType                                     Temp_byte_Variable_1;                              // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF4[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x02D0(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetupNPC_LeanOut) == 0x000008, "Wrong alignment on ABP_Item_C_SetupNPC_LeanOut");
static_assert(sizeof(ABP_Item_C_SetupNPC_LeanOut) == 0x0002E0, "Wrong size on ABP_Item_C_SetupNPC_LeanOut");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Context) == 0x000000, "Member 'ABP_Item_C_SetupNPC_LeanOut::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Node) == 0x000010, "Member 'ABP_Item_C_SetupNPC_LeanOut::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_object_Variable) == 0x000020, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_object_Variable_1) == 0x000040, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_bool_Variable) == 0x000048, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_byte_Variable) == 0x000049, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_object_Variable_2) == 0x000050, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_object_Variable_3) == 0x000058, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_object_Variable_4) == 0x000060, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000068, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_GetAnimCache_ReturnValue) == 0x000070, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_Array_Get_Item) == 0x000288, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_Array_Get_Item_1) == 0x000290, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_Array_Get_Item_2) == 0x000298, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_Array_Get_Item_3) == 0x0002A0, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_Array_Get_Item_4) == 0x0002A8, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, Temp_byte_Variable_1) == 0x0002B0, "Member 'ABP_Item_C_SetupNPC_LeanOut::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, K2Node_Select_Default) == 0x0002B8, "Member 'ABP_Item_C_SetupNPC_LeanOut::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, K2Node_Select_Default_1) == 0x0002C0, "Member 'ABP_Item_C_SetupNPC_LeanOut::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, K2Node_Select_Default_2) == 0x0002C8, "Member 'ABP_Item_C_SetupNPC_LeanOut::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupNPC_LeanOut, CallFunc_SetSequence_ReturnValue) == 0x0002D0, "Member 'ABP_Item_C_SetupNPC_LeanOut::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpPivotAnim
// 0x04A8 (0x04A8 - 0x0000)
struct ABP_Item_C_SetUpPivotAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0030(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0250(0x0218)(NoDestructor)
	class UAnimSequenceBase*                      CallFunc_GetDesiredPivotSequence_ReturnValue;      // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0470(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF5[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0488(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0498(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetUpPivotAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpPivotAnim");
static_assert(sizeof(ABP_Item_C_SetUpPivotAnim) == 0x0004A8, "Wrong size on ABP_Item_C_SetUpPivotAnim");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetUpPivotAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetUpPivotAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000028, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000030, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000248, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000250, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_GetDesiredPivotSequence_ReturnValue) == 0x000468, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_GetDesiredPivotSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000470, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000480, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_SetSequence_ReturnValue) == 0x000488, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpPivotAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000498, "Member 'ABP_Item_C_SetUpPivotAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpStartAnim
// 0x0960 (0x0960 - 0x0000)
struct ABP_Item_C_SetUpStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF6[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF7[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF8[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0058(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF9[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0280(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0498(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04A0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06C0(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFA[0x6];                                     // 0x08DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x08E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x08F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x08F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x0908(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFB[0x7];                                     // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x0918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0940(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0950(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetUpStartAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpStartAnim");
static_assert(sizeof(ABP_Item_C_SetUpStartAnim) == 0x000960, "Wrong size on ABP_Item_C_SetUpStartAnim");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetUpStartAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetUpStartAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Temp_byte_Variable) == 0x000020, "Member 'ABP_Item_C_SetUpStartAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000048, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000058, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Temp_bool_Variable) == 0x000270, "Member 'ABP_Item_C_SetUpStartAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000278, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000280, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000498, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004A0, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0006B8, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006C0, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Temp_bool_Variable_1) == 0x0008D8, "Member 'ABP_Item_C_SetUpStartAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_GetMirrorState_IsMirror) == 0x0008D9, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x0008E0, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x0008E8, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x0008F0, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x0008F8, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x000900, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x000908, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, Temp_byte_Variable_1) == 0x000910, "Member 'ABP_Item_C_SetUpStartAnim::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x000918, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, K2Node_Select_Default) == 0x000920, "Member 'ABP_Item_C_SetUpStartAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, K2Node_Select_Default_1) == 0x000928, "Member 'ABP_Item_C_SetUpStartAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, K2Node_Select_Default_2) == 0x000930, "Member 'ABP_Item_C_SetUpStartAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, K2Node_Select_Default_3) == 0x000938, "Member 'ABP_Item_C_SetUpStartAnim::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SetSequence_ReturnValue) == 0x000940, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStartAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000950, "Member 'ABP_Item_C_SetUpStartAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpStopAnim
// 0x0980 (0x0980 - 0x0000)
struct ABP_Item_C_SetUpStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFC[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFD[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFE[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0058(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFF[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0280(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0498(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04A0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06C0(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6000[0x6];                                     // 0x08DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x08E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x08F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x08F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x0908(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6001[0x7];                                     // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x0918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0920(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0928(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1; // 0x0940(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_1;  // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6002[0x7];                                     // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0958(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_DistanceMatchToTarget_ReturnValue;        // 0x0968(0x0010)(NoDestructor)
	bool                                          CallFunc_ShouldDistanceMatchStop_ReturnValue;      // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SetUpStopAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpStopAnim");
static_assert(sizeof(ABP_Item_C_SetUpStopAnim) == 0x000980, "Wrong size on ABP_Item_C_SetUpStopAnim");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetUpStopAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetUpStopAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Temp_byte_Variable) == 0x000020, "Member 'ABP_Item_C_SetUpStopAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000048, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000050, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000058, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Temp_bool_Variable) == 0x000270, "Member 'ABP_Item_C_SetUpStopAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000278, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000280, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000498, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004A0, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0006B8, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006C0, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Temp_bool_Variable_1) == 0x0008D8, "Member 'ABP_Item_C_SetUpStopAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_GetMirrorState_IsMirror) == 0x0008D9, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x0008E0, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x0008E8, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x0008F0, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x0008F8, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x000900, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x000908, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, Temp_byte_Variable_1) == 0x000910, "Member 'ABP_Item_C_SetUpStopAnim::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x000918, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, K2Node_Select_Default) == 0x000920, "Member 'ABP_Item_C_SetUpStopAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, K2Node_Select_Default_1) == 0x000928, "Member 'ABP_Item_C_SetUpStopAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, K2Node_Select_Default_2) == 0x000930, "Member 'ABP_Item_C_SetUpStopAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, K2Node_Select_Default_3) == 0x000938, "Member 'ABP_Item_C_SetUpStopAnim::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1) == 0x000940, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_1) == 0x000950, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_SetSequence_ReturnValue) == 0x000958, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_DistanceMatchToTarget_ReturnValue) == 0x000968, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_DistanceMatchToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpStopAnim, CallFunc_ShouldDistanceMatchStop_ReturnValue) == 0x000978, "Member 'ABP_Item_C_SetUpStopAnim::CallFunc_ShouldDistanceMatchStop_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetupTurnInPlaceAnim
// 0x0048 (0x0048 - 0x0000)
struct ABP_Item_C_SetupTurnInPlaceAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6003[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetupTurnInPlaceAnim) == 0x000008, "Wrong alignment on ABP_Item_C_SetupTurnInPlaceAnim");
static_assert(sizeof(ABP_Item_C_SetupTurnInPlaceAnim) == 0x000048, "Wrong size on ABP_Item_C_SetupTurnInPlaceAnim");
static_assert(offsetof(ABP_Item_C_SetupTurnInPlaceAnim, Context) == 0x000000, "Member 'ABP_Item_C_SetupTurnInPlaceAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupTurnInPlaceAnim, Node) == 0x000010, "Member 'ABP_Item_C_SetupTurnInPlaceAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ABP_Item_C_SetupTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ABP_Item_C_SetupTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetupTurnInPlaceAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000038, "Member 'ABP_Item_C_SetupTurnInPlaceAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpTurnInPlaceRecoveryState
// 0x0020 (0x0020 - 0x0000)
struct ABP_Item_C_SetUpTurnInPlaceRecoveryState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Item_C_SetUpTurnInPlaceRecoveryState) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpTurnInPlaceRecoveryState");
static_assert(sizeof(ABP_Item_C_SetUpTurnInPlaceRecoveryState) == 0x000020, "Wrong size on ABP_Item_C_SetUpTurnInPlaceRecoveryState");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRecoveryState, Context) == 0x000000, "Member 'ABP_Item_C_SetUpTurnInPlaceRecoveryState::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRecoveryState, Node) == 0x000010, "Member 'ABP_Item_C_SetUpTurnInPlaceRecoveryState::Node' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.SetUpTurnInPlaceRotationState
// 0x0258 (0x0258 - 0x0000)
struct ABP_Item_C_SetUpTurnInPlaceRotationState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0028(0x0218)(NoDestructor)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_A_ImplicitCast;               // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_SetUpTurnInPlaceRotationState) == 0x000008, "Wrong alignment on ABP_Item_C_SetUpTurnInPlaceRotationState");
static_assert(sizeof(ABP_Item_C_SetUpTurnInPlaceRotationState) == 0x000258, "Wrong size on ABP_Item_C_SetUpTurnInPlaceRotationState");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, Context) == 0x000000, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, Node) == 0x000010, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, CallFunc_GetAnimCache_ReturnValue) == 0x000028, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, CallFunc_SignOfFloat_ReturnValue) == 0x000240, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000248, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_SetUpTurnInPlaceRotationState, CallFunc_SignOfFloat_A_ImplicitCast) == 0x000250, "Member 'ABP_Item_C_SetUpTurnInPlaceRotationState::CallFunc_SignOfFloat_A_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.ShouldDistanceMatchStop
// 0x0450 (0x0450 - 0x0000)
struct ABP_Item_C_ShouldDistanceMatchStop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6004[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_ShouldDistanceMatchStop) == 0x000008, "Wrong alignment on ABP_Item_C_ShouldDistanceMatchStop");
static_assert(sizeof(ABP_Item_C_ShouldDistanceMatchStop) == 0x000450, "Wrong size on ABP_Item_C_ShouldDistanceMatchStop");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, ReturnValue) == 0x000000, "Member 'ABP_Item_C_ShouldDistanceMatchStop::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_Not_PreBool_ReturnValue) == 0x000448, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldDistanceMatchStop, CallFunc_BooleanAND_ReturnValue) == 0x000449, "Member 'ABP_Item_C_ShouldDistanceMatchStop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.ShouldEnableFootPlacement
// 0x0248 (0x0248 - 0x0000)
struct ABP_Item_C_ShouldEnableFootPlacement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6005[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6006[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0020(0x0218)(NoDestructor)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6007[0x2];                                     // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_ShouldEnableFootPlacement) == 0x000008, "Wrong alignment on ABP_Item_C_ShouldEnableFootPlacement");
static_assert(sizeof(ABP_Item_C_ShouldEnableFootPlacement) == 0x000248, "Wrong size on ABP_Item_C_ShouldEnableFootPlacement");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, ReturnValue) == 0x000000, "Member 'ABP_Item_C_ShouldEnableFootPlacement::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_GetAnimCache_ReturnValue) == 0x000020, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_GetCurveValue_ReturnValue) == 0x000238, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00023C, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_BooleanAND_ReturnValue) == 0x00023D, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_ShouldEnableFootPlacement, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000240, "Member 'ABP_Item_C_ShouldEnableFootPlacement::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.Update Blend Weight Data
// 0x0F88 (0x0F88 - 0x0000)
struct ABP_Item_C_Update_Blend_Weight_Data final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0018(0x0218)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0450(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6008[0x7];                                     // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x0460(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0678(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x0680(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0898(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6009[0x7];                                     // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x08A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_4;               // 0x08A8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x0AC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_5;               // 0x0AC8(0x0218)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0CE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0CE1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0CE2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600A[0x5];                                     // 0x0CE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6;    // 0x0CE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0CF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0CF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600B[0x7];                                     // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7;    // 0x0D00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0D08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600C[0x7];                                     // 0x0D09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_6;               // 0x0D10(0x0218)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0F28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600D[0x3];                                     // 0x0F29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0F2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0F30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600E[0x7];                                     // 0x0F31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8;    // 0x0F38(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0F40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_1;              // 0x0F48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0F49(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600F[0x6];                                     // 0x0F4A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9;    // 0x0F50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0F58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_2;              // 0x0F59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0F5A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0F5B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0F5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0F5D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0F5E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6010[0x1];                                     // 0x0F5F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0F60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0F68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0F69(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0F6A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6011[0x5];                                     // 0x0F6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0F70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0F78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0F80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_Update_Blend_Weight_Data) == 0x000008, "Wrong alignment on ABP_Item_C_Update_Blend_Weight_Data");
static_assert(sizeof(ABP_Item_C_Update_Blend_Weight_Data) == 0x000F88, "Wrong size on ABP_Item_C_Update_Blend_Weight_Data");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, DeltaTime) == 0x000000, "Member 'ABP_Item_C_Update_Blend_Weight_Data::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000010, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue) == 0x000018, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Abs_ReturnValue) == 0x000448, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000450, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000458, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_2) == 0x000460, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000678, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_3) == 0x000680, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Not_PreBool_ReturnValue) == 0x000898, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0008A0, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_4) == 0x0008A8, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x000AC0, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_5) == 0x000AC8, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Not_PreBool_ReturnValue_1) == 0x000CE0, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanOR_ReturnValue) == 0x000CE1, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanAND_ReturnValue) == 0x000CE2, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6) == 0x000CE8, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_SelectFloat_ReturnValue) == 0x000CF0, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimStance_ReturnValue) == 0x000CF8, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7) == 0x000D00, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000D08, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimCache_ReturnValue_6) == 0x000D10, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimCache_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanAND_ReturnValue_1) == 0x000F28, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetCurveValue_ReturnValue) == 0x000F2C, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000F30, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8) == 0x000F38, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_FInterpTo_ReturnValue) == 0x000F40, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimStance_ReturnValue_1) == 0x000F48, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimStance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000F49, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9) == 0x000F50, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanAND_ReturnValue_2) == 0x000F58, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_GetAnimStance_ReturnValue_2) == 0x000F59, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_GetAnimStance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanAND_ReturnValue_3) == 0x000F5A, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000F5B, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Not_PreBool_ReturnValue_2) == 0x000F5C, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanAND_ReturnValue_4) == 0x000F5D, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanOR_ReturnValue_1) == 0x000F5E, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_FInterpTo_ReturnValue_1) == 0x000F60, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000F68, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanOR_ReturnValue_2) == 0x000F69, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_BooleanOR_ReturnValue_3) == 0x000F6A, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Abs_A_ImplicitCast) == 0x000F70, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000F78, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_Update_Blend_Weight_Data, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000F80, "Member 'ABP_Item_C_Update_Blend_Weight_Data::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateAimCorrection
// 0x0288 (0x0288 - 0x0000)
struct ABP_Item_C_UpdateAimCorrection final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6012[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6013[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectAimCorrectivePose_ReturnValue;      // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectAimCorrectivePose_ReturnValue_1;    // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0278(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateAimCorrection) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateAimCorrection");
static_assert(sizeof(ABP_Item_C_UpdateAimCorrection) == 0x000288, "Wrong size on ABP_Item_C_UpdateAimCorrection");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, Context) == 0x000000, "Member 'ABP_Item_C_UpdateAimCorrection::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, Node) == 0x000010, "Member 'ABP_Item_C_UpdateAimCorrection::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, Temp_bool_Variable) == 0x000258, "Member 'ABP_Item_C_UpdateAimCorrection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_SelectAimCorrectivePose_ReturnValue) == 0x000260, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_SelectAimCorrectivePose_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_SelectAimCorrectivePose_ReturnValue_1) == 0x000268, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_SelectAimCorrectivePose_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, K2Node_Select_Default) == 0x000270, "Member 'ABP_Item_C_UpdateAimCorrection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateAimCorrection, CallFunc_SetSequence_ReturnValue) == 0x000278, "Member 'ABP_Item_C_UpdateAimCorrection::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateArmGripWeight
// 0x0248 (0x0248 - 0x0000)
struct ABP_Item_C_UpdateArmGripWeight final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0028(0x0218)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateArmGripWeight) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateArmGripWeight");
static_assert(sizeof(ABP_Item_C_UpdateArmGripWeight) == 0x000248, "Wrong size on ABP_Item_C_UpdateArmGripWeight");
static_assert(offsetof(ABP_Item_C_UpdateArmGripWeight, Context) == 0x000000, "Member 'ABP_Item_C_UpdateArmGripWeight::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateArmGripWeight, Node) == 0x000010, "Member 'ABP_Item_C_UpdateArmGripWeight::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateArmGripWeight, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateArmGripWeight::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateArmGripWeight, CallFunc_GetAnimCache_ReturnValue) == 0x000028, "Member 'ABP_Item_C_UpdateArmGripWeight::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateArmGripWeight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000240, "Member 'ABP_Item_C_UpdateArmGripWeight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateCycleAnim
// 0x14A0 (0x14A0 - 0x0000)
struct ABP_Item_C_UpdateCycleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6014[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	ECardinalDirectionType                        Temp_byte_Variable;                                // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6015[0x6];                                     // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6016[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0278(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6017[0x7];                                     // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04A0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06C0(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x08D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x08E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6018[0x7];                                     // 0x08E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_4;               // 0x08E8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6;    // 0x0B00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_5;               // 0x0B08(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7;    // 0x0D20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0D28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_6;               // 0x0D30(0x0218)(NoDestructor)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x0F48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6019[0x7];                                     // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8;    // 0x0F50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_2;                              // 0x0F58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0F59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601A[0x6];                                     // 0x0F5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9;    // 0x0F60(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimStanceBlendValue_ReturnValue;      // 0x0F68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601B[0x4];                                     // 0x0F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x0F70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x0F78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10;   // 0x0F80(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_7;               // 0x0F88(0x0218)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer_1; // 0x11A0(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result_1;     // 0x11B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601C[0x7];                                     // 0x11B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x11B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x11C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x11C8(0x0010)(NoDestructor)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x11D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x11E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x11E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x11F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x11F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECardinalDirectionType                        Temp_byte_Variable_3;                              // 0x1200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601D[0x7];                                     // 0x1201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x1208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x1210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_4;                           // 0x1218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x1220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601E[0x7];                                     // 0x1221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue_1; // 0x1228(0x0010)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11;   // 0x1238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_8;               // 0x1240(0x0218)(NoDestructor)
	float                                         CallFunc_GetDeltaTime_ReturnValue;                 // 0x1458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601F[0x4];                                     // 0x145C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x1460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_5;                           // 0x1468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_6;                           // 0x1470(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue_2; // 0x1478(0x0010)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_SetPlayrateToMatchSpeed_ReturnValue;      // 0x1488(0x0010)(NoDestructor)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x1498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateCycleAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateCycleAnim");
static_assert(sizeof(ABP_Item_C_UpdateCycleAnim) == 0x0014A0, "Wrong size on ABP_Item_C_UpdateCycleAnim");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateCycleAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateCycleAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_byte_Variable) == 0x000258, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_byte_Variable_1) == 0x000259, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000260, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000268, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000270, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000278, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000490, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_bool_Variable) == 0x000498, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004A0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0006B8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006C0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x0008D8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_bool_Variable_1) == 0x0008E0, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_4) == 0x0008E8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6) == 0x000B00, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_5) == 0x000B08, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7) == 0x000D20, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectFloat_ReturnValue) == 0x000D28, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_6) == 0x000D30, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMirrorState_IsMirror) == 0x000F48, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8) == 0x000F50, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_byte_Variable_2) == 0x000F58, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000F59, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9) == 0x000F60, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimStanceBlendValue_ReturnValue) == 0x000F68, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimStanceBlendValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x000F70, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x000F78, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10) == 0x000F80, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_7) == 0x000F88, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer_1) == 0x0011A0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_Result_1) == 0x0011B0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_Result_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default) == 0x0011B8, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x0011C0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x0011C8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x0011D8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x0011E0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_1) == 0x0011E8, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x0011F0, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x0011F8, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_byte_Variable_3) == 0x001200, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_2) == 0x001208, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_3) == 0x001210, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_4) == 0x001218, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, Temp_bool_Variable_2) == 0x001220, "Member 'ABP_Item_C_UpdateCycleAnim::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue_1) == 0x001228, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11) == 0x001238, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetAnimCache_ReturnValue_8) == 0x001240, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetAnimCache_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_GetDeltaTime_ReturnValue) == 0x001458, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_GetDeltaTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_FInterpTo_ReturnValue) == 0x001460, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_5) == 0x001468, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, K2Node_Select_Default_6) == 0x001470, "Member 'ABP_Item_C_UpdateCycleAnim::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue_2) == 0x001478, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_SetPlayrateToMatchSpeed_ReturnValue) == 0x001488, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_SetPlayrateToMatchSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateCycleAnim, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x001498, "Member 'ABP_Item_C_UpdateCycleAnim::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateFallLandAnim
// 0x0050 (0x0050 - 0x0000)
struct ABP_Item_C_UpdateFallLandAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6020[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_DistanceMatchToTarget_ReturnValue;        // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateFallLandAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateFallLandAnim");
static_assert(sizeof(ABP_Item_C_UpdateFallLandAnim) == 0x000050, "Wrong size on ABP_Item_C_UpdateFallLandAnim");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateFallLandAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateFallLandAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateFallLandAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_UpdateFallLandAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateFallLandAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateFallLandAnim, CallFunc_DistanceMatchToTarget_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateFallLandAnim::CallFunc_DistanceMatchToTarget_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateHandGripPose
// 0x0278 (0x0278 - 0x0000)
struct ABP_Item_C_UpdateHandGripPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6021[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6022[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0268(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateHandGripPose) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateHandGripPose");
static_assert(sizeof(ABP_Item_C_UpdateHandGripPose) == 0x000278, "Wrong size on ABP_Item_C_UpdateHandGripPose");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, Context) == 0x000000, "Member 'ABP_Item_C_UpdateHandGripPose::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, Node) == 0x000010, "Member 'ABP_Item_C_UpdateHandGripPose::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_Map_Find_Value) == 0x000258, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_Map_Find_ReturnValue) == 0x000260, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHandGripPose, CallFunc_SetSequence_ReturnValue) == 0x000268, "Member 'ABP_Item_C_UpdateHandGripPose::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateHipFireRaiseWeaponPose
// 0x02A8 (0x02A8 - 0x0000)
struct ABP_Item_C_UpdateHipFireRaiseWeaponPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6023[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6024[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6025[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6026[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value_1;                         // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6027[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0298(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateHipFireRaiseWeaponPose) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateHipFireRaiseWeaponPose");
static_assert(sizeof(ABP_Item_C_UpdateHipFireRaiseWeaponPose) == 0x0002A8, "Wrong size on ABP_Item_C_UpdateHipFireRaiseWeaponPose");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, Context) == 0x000000, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, Node) == 0x000010, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, Temp_bool_Variable) == 0x000258, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000260, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_GetAnimStance_ReturnValue) == 0x000268, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_Map_Find_Value) == 0x000270, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_Map_Find_ReturnValue) == 0x000278, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_Map_Find_Value_1) == 0x000280, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_Map_Find_ReturnValue_1) == 0x000288, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, K2Node_Select_Default) == 0x000290, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateHipFireRaiseWeaponPose, CallFunc_SetSequence_ReturnValue) == 0x000298, "Member 'ABP_Item_C_UpdateHipFireRaiseWeaponPose::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateIdleAnim
// 0x04F8 (0x04F8 - 0x0000)
struct ABP_Item_C_UpdateIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6028[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6029[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602A[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0050(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602B[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value_1;                         // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602C[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0298(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimStanceBlendValue_ReturnValue;      // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x04BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602D[0x3];                                     // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x04C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x04D0(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602E[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x04E8(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateIdleAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateIdleAnim");
static_assert(sizeof(ABP_Item_C_UpdateIdleAnim) == 0x0004F8, "Wrong size on ABP_Item_C_UpdateIdleAnim");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateIdleAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateIdleAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, Temp_bool_Variable) == 0x000028, "Member 'ABP_Item_C_UpdateIdleAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000030, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000039, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000040, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, Temp_bool_Variable_1) == 0x000048, "Member 'ABP_Item_C_UpdateIdleAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000050, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_Map_Find_Value) == 0x000268, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_Map_Find_ReturnValue) == 0x000270, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_Map_Find_Value_1) == 0x000278, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_Map_Find_ReturnValue_1) == 0x000280, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000288, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, K2Node_Select_Default) == 0x000290, "Member 'ABP_Item_C_UpdateIdleAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000298, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0004B0, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_GetAnimStanceBlendValue_ReturnValue) == 0x0004B8, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_GetAnimStanceBlendValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, Temp_bool_Variable_2) == 0x0004BC, "Member 'ABP_Item_C_UpdateIdleAnim::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, K2Node_Select_Default_1) == 0x0004C0, "Member 'ABP_Item_C_UpdateIdleAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, K2Node_Select_Default_2) == 0x0004C8, "Member 'ABP_Item_C_UpdateIdleAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x0004D0, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x0004E0, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x0004E8, "Member 'ABP_Item_C_UpdateIdleAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateIdleState
// 0x0048 (0x0048 - 0x0000)
struct ABP_Item_C_UpdateIdleState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FAnimationStateResultReference         CallFunc_ConvertToAnimationStateResultPure_AnimationState; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToAnimationStateResultPure_Result; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602F[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDeltaTime_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateBlendingOut_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6030[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ProcessIdleBreakTransitionLogic_DeltaTime_ImplicitCast; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateIdleState) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateIdleState");
static_assert(sizeof(ABP_Item_C_UpdateIdleState) == 0x000048, "Wrong size on ABP_Item_C_UpdateIdleState");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, Context) == 0x000000, "Member 'ABP_Item_C_UpdateIdleState::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, Node) == 0x000010, "Member 'ABP_Item_C_UpdateIdleState::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, CallFunc_ConvertToAnimationStateResultPure_AnimationState) == 0x000020, "Member 'ABP_Item_C_UpdateIdleState::CallFunc_ConvertToAnimationStateResultPure_AnimationState' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, CallFunc_ConvertToAnimationStateResultPure_Result) == 0x000030, "Member 'ABP_Item_C_UpdateIdleState::CallFunc_ConvertToAnimationStateResultPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, CallFunc_GetDeltaTime_ReturnValue) == 0x000034, "Member 'ABP_Item_C_UpdateIdleState::CallFunc_GetDeltaTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, CallFunc_IsStateBlendingOut_ReturnValue) == 0x000038, "Member 'ABP_Item_C_UpdateIdleState::CallFunc_IsStateBlendingOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleState, CallFunc_ProcessIdleBreakTransitionLogic_DeltaTime_ImplicitCast) == 0x000040, "Member 'ABP_Item_C_UpdateIdleState::CallFunc_ProcessIdleBreakTransitionLogic_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateIdleTransition
// 0x0288 (0x0288 - 0x0000)
struct ABP_Item_C_UpdateIdleTransition final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6031[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6032[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0048(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_SelectStanceTransition_Transition_Animation; // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectStanceTransition_Transition_Animation_1; // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0278(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateIdleTransition) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateIdleTransition");
static_assert(sizeof(ABP_Item_C_UpdateIdleTransition) == 0x000288, "Wrong size on ABP_Item_C_UpdateIdleTransition");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, Context) == 0x000000, "Member 'ABP_Item_C_UpdateIdleTransition::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, Node) == 0x000010, "Member 'ABP_Item_C_UpdateIdleTransition::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, Temp_bool_Variable) == 0x000020, "Member 'ABP_Item_C_UpdateIdleTransition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_GetAnimCache_ReturnValue) == 0x000048, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_SelectStanceTransition_Transition_Animation) == 0x000260, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_SelectStanceTransition_Transition_Animation' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_SelectStanceTransition_Transition_Animation_1) == 0x000268, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_SelectStanceTransition_Transition_Animation_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, K2Node_Select_Default) == 0x000270, "Member 'ABP_Item_C_UpdateIdleTransition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateIdleTransition, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000278, "Member 'ABP_Item_C_UpdateIdleTransition::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateJumpFallData
// 0x0450 (0x0450 - 0x0000)
struct ABP_Item_C_UpdateJumpFallData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0010(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0230(0x0218)(NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateJumpFallData) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateJumpFallData");
static_assert(sizeof(ABP_Item_C_UpdateJumpFallData) == 0x000450, "Wrong size on ABP_Item_C_UpdateJumpFallData");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, DeltaTime) == 0x000000, "Member 'ABP_Item_C_UpdateJumpFallData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_Item_C_UpdateJumpFallData::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, CallFunc_GetAnimCache_ReturnValue) == 0x000010, "Member 'ABP_Item_C_UpdateJumpFallData::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000228, "Member 'ABP_Item_C_UpdateJumpFallData::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, CallFunc_GetAnimCache_ReturnValue_1) == 0x000230, "Member 'ABP_Item_C_UpdateJumpFallData::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateJumpFallData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000448, "Member 'ABP_Item_C_UpdateJumpFallData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateKneeSlideCycle
// 0x0270 (0x0270 - 0x0000)
struct ABP_Item_C_UpdateKneeSlideCycle final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6033[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0258(0x0010)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateKneeSlideCycle) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateKneeSlideCycle");
static_assert(sizeof(ABP_Item_C_UpdateKneeSlideCycle) == 0x000270, "Wrong size on ABP_Item_C_UpdateKneeSlideCycle");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, Context) == 0x000000, "Member 'ABP_Item_C_UpdateKneeSlideCycle::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, Node) == 0x000010, "Member 'ABP_Item_C_UpdateKneeSlideCycle::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000258, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_MakeLiteralInt_ReturnValue) == 0x000268, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideCycle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00026C, "Member 'ABP_Item_C_UpdateKneeSlideCycle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateKneeSlideEnd
// 0x0270 (0x0270 - 0x0000)
struct ABP_Item_C_UpdateKneeSlideEnd final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6034[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0040(0x0218)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0258(0x0010)(NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateKneeSlideEnd) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateKneeSlideEnd");
static_assert(sizeof(ABP_Item_C_UpdateKneeSlideEnd) == 0x000270, "Wrong size on ABP_Item_C_UpdateKneeSlideEnd");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, Context) == 0x000000, "Member 'ABP_Item_C_UpdateKneeSlideEnd::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, Node) == 0x000010, "Member 'ABP_Item_C_UpdateKneeSlideEnd::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_GetAnimCache_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000258, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_MakeLiteralInt_ReturnValue) == 0x000268, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideEnd, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00026C, "Member 'ABP_Item_C_UpdateKneeSlideEnd::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateKneeSlideStart
// 0x0278 (0x0278 - 0x0000)
struct ABP_Item_C_UpdateKneeSlideStart final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6035[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6036[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0048(0x0218)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0260(0x0010)(NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateKneeSlideStart) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateKneeSlideStart");
static_assert(sizeof(ABP_Item_C_UpdateKneeSlideStart) == 0x000278, "Wrong size on ABP_Item_C_UpdateKneeSlideStart");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, Context) == 0x000000, "Member 'ABP_Item_C_UpdateKneeSlideStart::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, Node) == 0x000010, "Member 'ABP_Item_C_UpdateKneeSlideStart::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_MakeLiteralInt_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_GetAnimCache_ReturnValue) == 0x000048, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000260, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateKneeSlideStart, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000270, "Member 'ABP_Item_C_UpdateKneeSlideStart::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateMainABPIdleNative
// 0x0028 (0x0028 - 0x0000)
struct ABP_Item_C_UpdateMainABPIdleNative final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateMainABPIdleNative) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateMainABPIdleNative");
static_assert(sizeof(ABP_Item_C_UpdateMainABPIdleNative) == 0x000028, "Wrong size on ABP_Item_C_UpdateMainABPIdleNative");
static_assert(offsetof(ABP_Item_C_UpdateMainABPIdleNative, Context) == 0x000000, "Member 'ABP_Item_C_UpdateMainABPIdleNative::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateMainABPIdleNative, Node) == 0x000010, "Member 'ABP_Item_C_UpdateMainABPIdleNative::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateMainABPIdleNative, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateMainABPIdleNative::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateNPC_CoverIdle
// 0x0278 (0x0278 - 0x0000)
struct ABP_Item_C_UpdateNPC_CoverIdle final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6037[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6038[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0048(0x0218)(NoDestructor)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0268(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateNPC_CoverIdle) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateNPC_CoverIdle");
static_assert(sizeof(ABP_Item_C_UpdateNPC_CoverIdle) == 0x000278, "Wrong size on ABP_Item_C_UpdateNPC_CoverIdle");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, Context) == 0x000000, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, Node) == 0x000010, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, Temp_bool_Variable) == 0x000020, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, CallFunc_GetAnimCache_ReturnValue) == 0x000048, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, K2Node_Select_Default) == 0x000260, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_CoverIdle, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000268, "Member 'ABP_Item_C_UpdateNPC_CoverIdle::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateNPC_LeanIdle
// 0x02E0 (0x02E0 - 0x0000)
struct ABP_Item_C_UpdateNPC_LeanIdle final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UAnimSequence*                          Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6039[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_1;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeanType                                     Temp_byte_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603A[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_3;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_4;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0070(0x0218)(NoDestructor)
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_1;                         // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_2;                         // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_3;                         // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_Array_Get_Item_4;                         // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ELeanType                                     Temp_byte_Variable_1;                              // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603B[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x02D0(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateNPC_LeanIdle) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateNPC_LeanIdle");
static_assert(sizeof(ABP_Item_C_UpdateNPC_LeanIdle) == 0x0002E0, "Wrong size on ABP_Item_C_UpdateNPC_LeanIdle");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Context) == 0x000000, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Node) == 0x000010, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_object_Variable) == 0x000020, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_object_Variable_1) == 0x000040, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_bool_Variable) == 0x000048, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_byte_Variable) == 0x000049, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_object_Variable_2) == 0x000050, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_object_Variable_3) == 0x000058, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_object_Variable_4) == 0x000060, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000068, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_GetAnimCache_ReturnValue) == 0x000070, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_Array_Get_Item) == 0x000288, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_Array_Get_Item_1) == 0x000290, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_Array_Get_Item_2) == 0x000298, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_Array_Get_Item_3) == 0x0002A0, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_Array_Get_Item_4) == 0x0002A8, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, Temp_byte_Variable_1) == 0x0002B0, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, K2Node_Select_Default) == 0x0002B8, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, K2Node_Select_Default_1) == 0x0002C0, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, K2Node_Select_Default_2) == 0x0002C8, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateNPC_LeanIdle, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x0002D0, "Member 'ABP_Item_C_UpdateNPC_LeanIdle::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdatePivotAnim
// 0x0C00 (0x0C00 - 0x0000)
struct ABP_Item_C_UpdatePivotAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UAnimSequenceBase*                      NewDesiredSequence;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      NewPivotSequence;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor)
	double                                        ExplicitTime;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0050(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603C[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0068(0x0218)(NoDestructor)
	struct FVector                                CallFunc_PredictGroundMovementPivotLocation_ReturnValue; // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CallFunc_GetSequence_ReturnValue;                  // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x02B0(0x0218)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x04C8(0x0010)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04E0(0x0218)(NoDestructor)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x06F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0700(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603D[0x7];                                     // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0738(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAccumulatedTime_ReturnValue;           // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603E[0x4];                                     // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1; // 0x0750(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_1;  // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603F[0x7];                                     // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0768(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x0770(0x0218)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_AdvanceTimeByDistanceMatching_ReturnValue; // 0x0988(0x0010)(NoDestructor)
	class UAnimSequenceBase*                      CallFunc_GetDesiredPivotSequence_ReturnValue;      // 0x0998(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2; // 0x09A0(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_2;  // 0x09B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6040[0x7];                                     // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x09B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_DistanceMatchToTarget_ReturnValue;        // 0x09C0(0x0010)(NoDestructor)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_4;               // 0x09D0(0x0218)(NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0BE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6041[0x3];                                     // 0x0BE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PredictGroundMovementPivotLocation_GroundFriction_ImplicitCast; // 0x0BEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast; // 0x0BF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6042[0x4];                                     // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ExplicitTime_ImplicitCast;      // 0x0BF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdatePivotAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdatePivotAnim");
static_assert(sizeof(ABP_Item_C_UpdatePivotAnim) == 0x000C00, "Wrong size on ABP_Item_C_UpdatePivotAnim");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdatePivotAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdatePivotAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, NewDesiredSequence) == 0x000020, "Member 'ABP_Item_C_UpdatePivotAnim::NewDesiredSequence' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, NewPivotSequence) == 0x000028, "Member 'ABP_Item_C_UpdatePivotAnim::NewPivotSequence' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, SequenceEvaluator) == 0x000030, "Member 'ABP_Item_C_UpdatePivotAnim::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, ExplicitTime) == 0x000040, "Member 'ABP_Item_C_UpdatePivotAnim::ExplicitTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000048, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000050, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000060, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000068, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_PredictGroundMovementPivotLocation_ReturnValue) == 0x000280, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_PredictGroundMovementPivotLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_VSizeXY_ReturnValue) == 0x000298, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetSequence_ReturnValue) == 0x0002A0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x0002A8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x0002B0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x0004C8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x0004D8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004E0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_Dot_VectorVector_ReturnValue) == 0x0006F8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000700, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000708, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000710, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_MapRangeClamped_ReturnValue) == 0x000718, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_BreakVector2D_X) == 0x000720, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_BreakVector2D_Y) == 0x000728, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_Lerp_ReturnValue) == 0x000730, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_MakeVector2D_ReturnValue) == 0x000738, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAccumulatedTime_ReturnValue) == 0x000748, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAccumulatedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1) == 0x000750, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_1) == 0x000760, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000768, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAnimCache_ReturnValue_3) == 0x000770, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_AdvanceTimeByDistanceMatching_ReturnValue) == 0x000988, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_AdvanceTimeByDistanceMatching_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetDesiredPivotSequence_ReturnValue) == 0x000998, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetDesiredPivotSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2) == 0x0009A0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_2) == 0x0009B0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0009B8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_DistanceMatchToTarget_ReturnValue) == 0x0009C0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_DistanceMatchToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_GetAnimCache_ReturnValue_4) == 0x0009D0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_GetAnimCache_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000BE8, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_PredictGroundMovementPivotLocation_GroundFriction_ImplicitCast) == 0x000BEC, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_PredictGroundMovementPivotLocation_GroundFriction_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast) == 0x000BF0, "Member 'ABP_Item_C_UpdatePivotAnim::CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdatePivotAnim, K2Node_VariableSet_ExplicitTime_ImplicitCast) == 0x000BF8, "Member 'ABP_Item_C_UpdatePivotAnim::K2Node_VariableSet_ExplicitTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateSkelControlData
// 0x0040 (0x0040 - 0x0000)
struct ABP_Item_C_UpdateSkelControlData final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateSkelControlData) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateSkelControlData");
static_assert(sizeof(ABP_Item_C_UpdateSkelControlData) == 0x000040, "Wrong size on ABP_Item_C_UpdateSkelControlData");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_FClamp_ReturnValue_1) == 0x000028, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000030, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateSkelControlData, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000038, "Member 'ABP_Item_C_UpdateSkelControlData::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateStartAnim
// 0x0BE8 (0x0BE8 - 0x0000)
struct ABP_Item_C_UpdateStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	double                                        ExplicitTime;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0030(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6043[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0048(0x0218)(NoDestructor)
	float                                         CallFunc_GetAccumulatedTime_ReturnValue;           // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6044[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0270(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0488(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x0490(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x06A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_3;               // 0x06B0(0x0218)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6045[0x7];                                     // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x08D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_4;               // 0x08D8(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5;    // 0x0AF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x0AF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0AF9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6046[0x6];                                     // 0x0AFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x0B00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x0B08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x0B10(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable;                                // 0x0B18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6047[0x7];                                     // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6;    // 0x0B20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimStanceBlendValue_ReturnValue;      // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6048[0x4];                                     // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0B30(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0B38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6049[0x7];                                     // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x0B40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7;    // 0x0B48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue_1;              // 0x0B50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0B51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604A[0x6];                                     // 0x0B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x0B58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x0B60(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x0B68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0B70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0B78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0B80(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0B88(0x0010)(NoDestructor)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0B98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0BA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0BA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0BB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0BB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0BC0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_AdvanceTimeByDistanceMatching_ReturnValue; // 0x0BD0(0x0010)(NoDestructor)
	double                                        K2Node_VariableSet_ExplicitTime_ImplicitCast;      // 0x0BE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateStartAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateStartAnim");
static_assert(sizeof(ABP_Item_C_UpdateStartAnim) == 0x000BE8, "Wrong size on ABP_Item_C_UpdateStartAnim");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateStartAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateStartAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, ExplicitTime) == 0x000020, "Member 'ABP_Item_C_UpdateStartAnim::ExplicitTime' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000028, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000030, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000040, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000048, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAccumulatedTime_ReturnValue) == 0x000260, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAccumulatedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Temp_bool_Variable) == 0x000264, "Member 'ABP_Item_C_UpdateStartAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000268, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000270, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000488, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x000490, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x0006A8, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimCache_ReturnValue_3) == 0x0006B0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimCache_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Temp_bool_Variable_1) == 0x0008C8, "Member 'ABP_Item_C_UpdateStartAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x0008D0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimCache_ReturnValue_4) == 0x0008D8, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimCache_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5) == 0x000AF0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMirrorState_IsMirror) == 0x000AF8, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000AF9, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x000B00, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x000B08, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x000B10, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Temp_byte_Variable) == 0x000B18, "Member 'ABP_Item_C_UpdateStartAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6) == 0x000B20, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimStanceBlendValue_ReturnValue) == 0x000B28, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimStanceBlendValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, K2Node_Select_Default) == 0x000B30, "Member 'ABP_Item_C_UpdateStartAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, Temp_byte_Variable_1) == 0x000B38, "Member 'ABP_Item_C_UpdateStartAnim::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x000B40, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7) == 0x000B48, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_GetAnimStance_ReturnValue_1) == 0x000B50, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_GetAnimStance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000B51, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x000B58, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x000B60, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x000B68, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, K2Node_Select_Default_1) == 0x000B70, "Member 'ABP_Item_C_UpdateStartAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, K2Node_Select_Default_2) == 0x000B78, "Member 'ABP_Item_C_UpdateStartAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, K2Node_Select_Default_3) == 0x000B80, "Member 'ABP_Item_C_UpdateStartAnim::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000B88, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000B98, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_MapRangeClamped_ReturnValue) == 0x000BA0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_BreakVector2D_X) == 0x000BA8, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_BreakVector2D_Y) == 0x000BB0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_Lerp_ReturnValue) == 0x000BB8, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_MakeVector2D_ReturnValue) == 0x000BC0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, CallFunc_AdvanceTimeByDistanceMatching_ReturnValue) == 0x000BD0, "Member 'ABP_Item_C_UpdateStartAnim::CallFunc_AdvanceTimeByDistanceMatching_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStartAnim, K2Node_VariableSet_ExplicitTime_ImplicitCast) == 0x000BE0, "Member 'ABP_Item_C_UpdateStartAnim::K2Node_VariableSet_ExplicitTime_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateStopAnim
// 0x07A8 (0x07A8 - 0x0000)
struct ABP_Item_C_UpdateStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	double                                        DistanceToMatch;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyDistanceMatching;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0038(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  CallFunc_GetAnimStance_ReturnValue;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604C[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1;    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604D[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0060(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2;    // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_1;               // 0x0280(0x0218)(NoDestructor)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3;    // 0x0498(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604E[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue_2;               // 0x04A8(0x0218)(NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable;                                // 0x06C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMirrorState_IsMirror;                  // 0x06C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604F[0x5];                                     // 0x06C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue;     // 0x06C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_1;   // 0x06D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_2;   // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_3;   // 0x06E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_4;   // 0x06E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_5;   // 0x06F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldDistanceMatchStop_ReturnValue;      // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6050[0x7];                                     // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectDirectionAnimation_ReturnValue_6;   // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0708(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPredictedStopDistance_ReturnValue;     // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1; // 0x0718(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_1;  // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStances                                  Temp_byte_Variable_1;                              // 0x0729(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6051[0x6];                                     // 0x072A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0730(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2; // 0x0738(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_2;  // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6052[0x7];                                     // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0750(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_DistanceMatchToTarget_ReturnValue;        // 0x0758(0x0010)(NoDestructor)
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x0768(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4;    // 0x0770(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_AdvanceTime_ReturnValue;                  // 0x0778(0x0010)(NoDestructor)
	float                                         CallFunc_GetAnimStanceBlendValue_ReturnValue;      // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6053[0x4];                                     // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0790(0x0010)(NoDestructor)
	float                                         CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast; // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateStopAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateStopAnim");
static_assert(sizeof(ABP_Item_C_UpdateStopAnim) == 0x0007A8, "Wrong size on ABP_Item_C_UpdateStopAnim");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateStopAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateStopAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, DistanceToMatch) == 0x000020, "Member 'ABP_Item_C_UpdateStopAnim::DistanceToMatch' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, ApplyDistanceMatching) == 0x000028, "Member 'ABP_Item_C_UpdateStopAnim::ApplyDistanceMatching' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue) == 0x000030, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000038, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000048, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetAnimStance_ReturnValue) == 0x000049, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetAnimStance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1) == 0x000050, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Temp_bool_Variable) == 0x000058, "Member 'ABP_Item_C_UpdateStopAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetAnimCache_ReturnValue) == 0x000060, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2) == 0x000278, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetAnimCache_ReturnValue_1) == 0x000280, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetAnimCache_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3) == 0x000498, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Temp_bool_Variable_1) == 0x0004A0, "Member 'ABP_Item_C_UpdateStopAnim::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetAnimCache_ReturnValue_2) == 0x0004A8, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetAnimCache_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0006C0, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Temp_byte_Variable) == 0x0006C1, "Member 'ABP_Item_C_UpdateStopAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMirrorState_IsMirror) == 0x0006C2, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMirrorState_IsMirror' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue) == 0x0006C8, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_1) == 0x0006D0, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_2) == 0x0006D8, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_3) == 0x0006E0, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_4) == 0x0006E8, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_5) == 0x0006F0, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ShouldDistanceMatchStop_ReturnValue) == 0x0006F8, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ShouldDistanceMatchStop_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SelectDirectionAnimation_ReturnValue_6) == 0x000700, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SelectDirectionAnimation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, K2Node_Select_Default) == 0x000708, "Member 'ABP_Item_C_UpdateStopAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetPredictedStopDistance_ReturnValue) == 0x000710, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetPredictedStopDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1) == 0x000718, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_1) == 0x000728, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, Temp_byte_Variable_1) == 0x000729, "Member 'ABP_Item_C_UpdateStopAnim::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, K2Node_Select_Default_1) == 0x000730, "Member 'ABP_Item_C_UpdateStopAnim::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2) == 0x000738, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_2) == 0x000748, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, K2Node_Select_Default_2) == 0x000750, "Member 'ABP_Item_C_UpdateStopAnim::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_DistanceMatchToTarget_ReturnValue) == 0x000758, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_DistanceMatchToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, K2Node_Select_Default_3) == 0x000768, "Member 'ABP_Item_C_UpdateStopAnim::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4) == 0x000770, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetMainAnimBPThreadSafe_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_AdvanceTime_ReturnValue) == 0x000778, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_AdvanceTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_GetAnimStanceBlendValue_ReturnValue) == 0x000788, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_GetAnimStanceBlendValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000790, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateStopAnim, CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast) == 0x0007A0, "Member 'ABP_Item_C_UpdateStopAnim::CallFunc_DistanceMatchToTarget_DistanceToTarget_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateTurnInPlaceAnim
// 0x0098 (0x0098 - 0x0000)
struct ABP_Item_C_UpdateTurnInPlaceAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UAnimSequence*                          NewTurnInPlaceAnim;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6054[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDeltaTime_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0040(0x0010)(NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1; // 0x0058(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result_1;  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6055[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectTurnInPlaceAnimation_Result;        // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0078(0x0010)(NoDestructor)
	float                                         CallFunc_SetExplicitTime_Time_ImplicitCast;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6056[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_UpdateTurnInPlaceAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateTurnInPlaceAnim");
static_assert(sizeof(ABP_Item_C_UpdateTurnInPlaceAnim) == 0x000098, "Wrong size on ABP_Item_C_UpdateTurnInPlaceAnim");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, NewTurnInPlaceAnim) == 0x000020, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::NewTurnInPlaceAnim' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_GetDeltaTime_ReturnValue) == 0x00003C, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_GetDeltaTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1) == 0x000058, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result_1) == 0x000068, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result_1' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_SelectTurnInPlaceAnimation_Result) == 0x000070, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_SelectTurnInPlaceAnimation_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000078, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_SetExplicitTime_Time_ImplicitCast) == 0x000088, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_SetExplicitTime_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceAnim, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'ABP_Item_C_UpdateTurnInPlaceAnim::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.UpdateTurnInPlaceRecoveryAnim
// 0x0050 (0x0050 - 0x0000)
struct ABP_Item_C_UpdateTurnInPlaceRecoveryAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6057[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_SelectTurnInPlaceAnimation_Result;        // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim) == 0x000008, "Wrong alignment on ABP_Item_C_UpdateTurnInPlaceRecoveryAnim");
static_assert(sizeof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim) == 0x000050, "Wrong size on ABP_Item_C_UpdateTurnInPlaceRecoveryAnim");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, Context) == 0x000000, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, Node) == 0x000010, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, CallFunc_SelectTurnInPlaceAnimation_Result) == 0x000038, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::CallFunc_SelectTurnInPlaceAnimation_Result' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_UpdateTurnInPlaceRecoveryAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ABP_Item_C_UpdateTurnInPlaceRecoveryAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_Item.ABP_Item_C.GetPredictedStopDistance
// 0x0028 (0x0028 - 0x0000)
struct ABP_Item_C_GetPredictedStopDistance final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_PredictGroundMovementStopLocation_ReturnValue; // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Item_C_GetPredictedStopDistance) == 0x000008, "Wrong alignment on ABP_Item_C_GetPredictedStopDistance");
static_assert(sizeof(ABP_Item_C_GetPredictedStopDistance) == 0x000028, "Wrong size on ABP_Item_C_GetPredictedStopDistance");
static_assert(offsetof(ABP_Item_C_GetPredictedStopDistance, ReturnValue) == 0x000000, "Member 'ABP_Item_C_GetPredictedStopDistance::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetPredictedStopDistance, CallFunc_PredictGroundMovementStopLocation_ReturnValue) == 0x000008, "Member 'ABP_Item_C_GetPredictedStopDistance::CallFunc_PredictGroundMovementStopLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Item_C_GetPredictedStopDistance, CallFunc_VSizeXY_ReturnValue) == 0x000020, "Member 'ABP_Item_C_GetPredictedStopDistance::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");

}

