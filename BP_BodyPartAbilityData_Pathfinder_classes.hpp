#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BodyPartAbilityData_Pathfinder

#include "Basic.hpp"

#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BodyPartAbilityData_Pathfinder.BP_BodyPartAbilityData_Pathfinder_C
// 0x0060 (0x00E0 - 0x0080)
class UBP_BodyPartAbilityData_Pathfinder_C final : public UGzBodyPartAbilityData
{
public:
	class UClass*                                 GrenadeType;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMultishot;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B94[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GrenadeLifetime;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LifetimeTriggerOnProjectileStop;                   // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargeableSpeed;                                   // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B95[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LaunchSpeedMax;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchSpeedMin;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MultishotChargeTime;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadAngle;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OverchargeDuration;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverchargeEnabled;                                 // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B96[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondaryEffectRadius;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewPath;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BodyPartAbilityData_Pathfinder_C">();
	}
	static class UBP_BodyPartAbilityData_Pathfinder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BodyPartAbilityData_Pathfinder_C>();
	}
};
static_assert(alignof(UBP_BodyPartAbilityData_Pathfinder_C) == 0x000008, "Wrong alignment on UBP_BodyPartAbilityData_Pathfinder_C");
static_assert(sizeof(UBP_BodyPartAbilityData_Pathfinder_C) == 0x0000E0, "Wrong size on UBP_BodyPartAbilityData_Pathfinder_C");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, GrenadeType) == 0x000080, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::GrenadeType' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, EnableMultishot) == 0x000088, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::EnableMultishot' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, GrenadeLifetime) == 0x000090, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::GrenadeLifetime' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, LifetimeTriggerOnProjectileStop) == 0x000098, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::LifetimeTriggerOnProjectileStop' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, ChargeableSpeed) == 0x000099, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::ChargeableSpeed' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, LaunchSpeedMax) == 0x0000A0, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::LaunchSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, LaunchSpeedMin) == 0x0000A8, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::LaunchSpeedMin' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, MultishotChargeTime) == 0x0000B0, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::MultishotChargeTime' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, SpreadAngle) == 0x0000B8, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::SpreadAngle' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, OverchargeDuration) == 0x0000C0, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::OverchargeDuration' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, OverchargeEnabled) == 0x0000C8, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::OverchargeEnabled' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, SecondaryEffectRadius) == 0x0000D0, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::SecondaryEffectRadius' has a wrong offset!");
static_assert(offsetof(UBP_BodyPartAbilityData_Pathfinder_C, PreviewPath) == 0x0000D8, "Member 'UBP_BodyPartAbilityData_Pathfinder_C::PreviewPath' has a wrong offset!");

}

