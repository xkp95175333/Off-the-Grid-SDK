#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_classes.hpp"
#include "EBaseDoorTypes_structs.hpp"
#include "EBaseDoorStyles_structs.hpp"
#include "EBaseDoorStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SBaseDoorStyles_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Door.BP_Door_C
// 0x0168 (0x0450 - 0x02E8)
class ABP_Door_C final : public AGzDoorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRenderOpenBack;                                // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderOpen;                                    // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Door_Lock;                                      // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Door_Left;                                      // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Door_Right;                                     // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AINavModifier;                                     // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Component_Triggerable_C*            BP_Component_Triggerable;                          // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DoorFrame;                                      // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          NotPlayerDrivable;                                 // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoubleDoor;                                        // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertMovement;                                    // 0x0332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69AF[0x5];                                     // 0x0333(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InterpExponent;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OpenDoorPercentage;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          OpenSound;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          CloseSound;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DoorOwnerRef;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_React;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBaseDoorTypes                                DoorType;                                          // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBaseDoorStates                               DoorState;                                         // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69B0[0x5];                                     // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LD_Initial_Loc;                                    // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RD_Initial_Loc;                                    // 0x0380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBaseDoorStyles                               DefaultDouble;                                     // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBaseDoorStyles                               DefaultSingle;                                     // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69B1[0x6];                                     // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSBaseDoorStyles                       Out_RowDouble;                                     // 0x03A0(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSBaseDoorStyles                       Out_RowSingle;                                     // 0x03E8(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DoorSpeed;                                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DoorStyle;                                         // 0x0438(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          IsOpenAtStartLevelDesign;                          // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_BaseDoor_BP_Component_Triggerable_K2Node_ComponentBoundEvent_3_Triggered__DelegateSignature();
	void BndEvt__BP_BaseDoor_V02_InteractableComponent_K2Node_ComponentBoundEvent_0_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void Enable_Right_Door(bool IsEnable);
	void ExecuteUbergraph_BP_Door(int32 EntryPoint);
	void GetDoorSizeX(class UStaticMesh* StaticMesh, double* SizeX);
	void OpenTriggerShouldReact(class AActor* OverlappedActor, bool* ShouldReact);
	void PostSoundEvent();
	void ReceiveBeginPlay();
	void ReceiveDynamicStateChanged(bool bOpening);
	void ReceiveLockedStateChanged(bool bNewLocked);
	void ReceiveStaticStateChanged(bool bOpened);
	void ReceiveTick(float DeltaSeconds);
	void Set_Door_Position_X(class UStaticMeshComponent* Self3, bool bOpposite_);
	void SetDoorPositions(class UStaticMeshComponent* DoorComponent, bool Invert, double Alpha);
	void SetDoorPositionYMiddle(class UStaticMeshComponent* Param_SM_Door_Right, bool Invert);
	void SetInteractableMeshes(const TArray<class UMeshComponent*>& NewItems);
	bool ShouldReactToOverlappedActor(class AActor* Actor);
	void ToogleAvailability();
	void UpdatedDoorPosition(float OpenProgress);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Door_C">();
	}
	static class ABP_Door_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Door_C>();
	}
};
static_assert(alignof(ABP_Door_C) == 0x000008, "Wrong alignment on ABP_Door_C");
static_assert(sizeof(ABP_Door_C) == 0x000450, "Wrong size on ABP_Door_C");
static_assert(offsetof(ABP_Door_C, UberGraphFrame) == 0x0002E8, "Member 'ABP_Door_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TextRenderOpenBack) == 0x0002F0, "Member 'ABP_Door_C::TextRenderOpenBack' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TextRenderOpen) == 0x0002F8, "Member 'ABP_Door_C::TextRenderOpen' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SM_Door_Lock) == 0x000300, "Member 'ABP_Door_C::SM_Door_Lock' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SM_Door_Left) == 0x000308, "Member 'ABP_Door_C::SM_Door_Left' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SM_Door_Right) == 0x000310, "Member 'ABP_Door_C::SM_Door_Right' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AINavModifier) == 0x000318, "Member 'ABP_Door_C::AINavModifier' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, BP_Component_Triggerable) == 0x000320, "Member 'ABP_Door_C::BP_Component_Triggerable' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SM_DoorFrame) == 0x000328, "Member 'ABP_Door_C::SM_DoorFrame' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, NotPlayerDrivable) == 0x000330, "Member 'ABP_Door_C::NotPlayerDrivable' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoubleDoor) == 0x000331, "Member 'ABP_Door_C::DoubleDoor' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, InvertMovement) == 0x000332, "Member 'ABP_Door_C::InvertMovement' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, InterpExponent) == 0x000338, "Member 'ABP_Door_C::InterpExponent' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OpenDoorPercentage) == 0x000340, "Member 'ABP_Door_C::OpenDoorPercentage' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OpenSound) == 0x000348, "Member 'ABP_Door_C::OpenSound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, CloseSound) == 0x000350, "Member 'ABP_Door_C::CloseSound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorOwnerRef) == 0x000358, "Member 'ABP_Door_C::DoorOwnerRef' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Should_React) == 0x000360, "Member 'ABP_Door_C::Should_React' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorType) == 0x000361, "Member 'ABP_Door_C::DoorType' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorState) == 0x000362, "Member 'ABP_Door_C::DoorState' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, LD_Initial_Loc) == 0x000368, "Member 'ABP_Door_C::LD_Initial_Loc' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, RD_Initial_Loc) == 0x000380, "Member 'ABP_Door_C::RD_Initial_Loc' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DefaultDouble) == 0x000398, "Member 'ABP_Door_C::DefaultDouble' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DefaultSingle) == 0x000399, "Member 'ABP_Door_C::DefaultSingle' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Out_RowDouble) == 0x0003A0, "Member 'ABP_Door_C::Out_RowDouble' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Out_RowSingle) == 0x0003E8, "Member 'ABP_Door_C::Out_RowSingle' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorSpeed) == 0x000430, "Member 'ABP_Door_C::DoorSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorStyle) == 0x000438, "Member 'ABP_Door_C::DoorStyle' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, IsOpenAtStartLevelDesign) == 0x000448, "Member 'ABP_Door_C::IsOpenAtStartLevelDesign' has a wrong offset!");

}

