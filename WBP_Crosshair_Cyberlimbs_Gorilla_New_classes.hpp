#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_Gorilla_New

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Crosshair_Cyberlimbs_Gorilla_New.WBP_Crosshair_Cyberlimbs_Gorilla_New_C
// 0x00A8 (0x0398 - 0x02F0)
class UWBP_Crosshair_Cyberlimbs_Gorilla_New_C final : public UGzLimbCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OnChargeReleased;                                  // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 AimImage;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonNumericTextBlock*                Counter_CNumText;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_Progress_Image;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GorillaChargeProgress_Image;                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               GorillaChargeProgress_SizeBox;                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           HitState_Text;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_123;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_InputAction_C*           WBP_Crosshair_InputAction;                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInstanceCharge;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzGA_GorillaArm*                       CachedLimbAbility;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Charge_Progress;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzGorillaArmComponent*                 LimbAbilityComponent;                              // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   HoldToChargeText;                                  // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ReleaseChargeText;                                 // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   NoHitText;                                         // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGzLimbType                                   Limb_Type;                                         // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Gorilla_New(int32 EntryPoint);
	void OnChargeEnded();
	void OnChargeStarted();
	void OnInitialized();
	void OnLimbActivated(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData);
	void OnLimbActivationEnded(EGzLimbType LimbType);
	void OnMaxCharge();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UdpateValue(float CurrentValue, float MaxValue);
	void UpdateDistanceTooltip(bool bIsHit);
	void UpdateTooltip();
	void UpdateTooltipText(bool bChargeInProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Crosshair_Cyberlimbs_Gorilla_New_C">();
	}
	static class UWBP_Crosshair_Cyberlimbs_Gorilla_New_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Crosshair_Cyberlimbs_Gorilla_New_C>();
	}
};
static_assert(alignof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C) == 0x000008, "Wrong alignment on UWBP_Crosshair_Cyberlimbs_Gorilla_New_C");
static_assert(sizeof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C) == 0x000398, "Wrong size on UWBP_Crosshair_Cyberlimbs_Gorilla_New_C");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, OnChargeReleased) == 0x0002F8, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::OnChargeReleased' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, AimImage) == 0x000300, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::AimImage' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, Counter_CNumText) == 0x000308, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::Counter_CNumText' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, Gauge_Progress_Image) == 0x000310, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::Gauge_Progress_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, GorillaChargeProgress_Image) == 0x000318, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::GorillaChargeProgress_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, GorillaChargeProgress_SizeBox) == 0x000320, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::GorillaChargeProgress_SizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, HitState_Text) == 0x000328, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::HitState_Text' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, Overlay_123) == 0x000330, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::Overlay_123' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, WBP_Crosshair_InputAction) == 0x000338, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::WBP_Crosshair_InputAction' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, MaterialInstanceCharge) == 0x000340, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::MaterialInstanceCharge' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, CachedLimbAbility) == 0x000348, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::CachedLimbAbility' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, Charge_Progress) == 0x000350, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::Charge_Progress' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, LimbAbilityComponent) == 0x000358, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::LimbAbilityComponent' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, HoldToChargeText) == 0x000360, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::HoldToChargeText' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, ReleaseChargeText) == 0x000370, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::ReleaseChargeText' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, NoHitText) == 0x000380, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::NoHitText' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Gorilla_New_C, Limb_Type) == 0x000390, "Member 'UWBP_Crosshair_Cyberlimbs_Gorilla_New_C::Limb_Type' has a wrong offset!");

}

