#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedThirdPersonCamera

#include "Basic.hpp"

#include "AdvancedThirdPersonCamera_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AdvancedThirdPersonCamera.ATPCArrowDebugActor.PickActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCArrowDebugActor_PickActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCArrowDebugActor_PickActor) == 0x000008, "Wrong alignment on ATPCArrowDebugActor_PickActor");
static_assert(sizeof(ATPCArrowDebugActor_PickActor) == 0x000008, "Wrong size on ATPCArrowDebugActor_PickActor");
static_assert(offsetof(ATPCArrowDebugActor_PickActor, Actor) == 0x000000, "Member 'ATPCArrowDebugActor_PickActor::Actor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.K2_OnEnterCameraMode
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraBaseObject_K2_OnEnterCameraMode final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_K2_OnEnterCameraMode) == 0x000001, "Wrong alignment on ATPCCameraBaseObject_K2_OnEnterCameraMode");
static_assert(sizeof(ATPCCameraBaseObject_K2_OnEnterCameraMode) == 0x000001, "Wrong size on ATPCCameraBaseObject_K2_OnEnterCameraMode");
static_assert(offsetof(ATPCCameraBaseObject_K2_OnEnterCameraMode, bWithInterpolation) == 0x000000, "Member 'ATPCCameraBaseObject_K2_OnEnterCameraMode::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.K2_Tick
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraBaseObject_K2_Tick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_K2_Tick) == 0x000004, "Wrong alignment on ATPCCameraBaseObject_K2_Tick");
static_assert(sizeof(ATPCCameraBaseObject_K2_Tick) == 0x000004, "Wrong size on ATPCCameraBaseObject_K2_Tick");
static_assert(offsetof(ATPCCameraBaseObject_K2_Tick, DeltaSeconds) == 0x000000, "Member 'ATPCCameraBaseObject_K2_Tick::DeltaSeconds' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.K2_Validate
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraBaseObject_K2_Validate final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_K2_Validate) == 0x000001, "Wrong alignment on ATPCCameraBaseObject_K2_Validate");
static_assert(sizeof(ATPCCameraBaseObject_K2_Validate) == 0x000001, "Wrong size on ATPCCameraBaseObject_K2_Validate");
static_assert(offsetof(ATPCCameraBaseObject_K2_Validate, bWithInterpolation) == 0x000000, "Member 'ATPCCameraBaseObject_K2_Validate::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.Validate
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraBaseObject_Validate final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_Validate) == 0x000001, "Wrong alignment on ATPCCameraBaseObject_Validate");
static_assert(sizeof(ATPCCameraBaseObject_Validate) == 0x000001, "Wrong size on ATPCCameraBaseObject_Validate");
static_assert(offsetof(ATPCCameraBaseObject_Validate, bWithInterpolation) == 0x000000, "Member 'ATPCCameraBaseObject_Validate::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraBaseObject_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_GetOwningActor) == 0x000008, "Wrong alignment on ATPCCameraBaseObject_GetOwningActor");
static_assert(sizeof(ATPCCameraBaseObject_GetOwningActor) == 0x000008, "Wrong size on ATPCCameraBaseObject_GetOwningActor");
static_assert(offsetof(ATPCCameraBaseObject_GetOwningActor, ReturnValue) == 0x000000, "Member 'ATPCCameraBaseObject_GetOwningActor::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.GetOwningCamera
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraBaseObject_GetOwningCamera final
{
public:
	class UATPCCameraComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_GetOwningCamera) == 0x000008, "Wrong alignment on ATPCCameraBaseObject_GetOwningCamera");
static_assert(sizeof(ATPCCameraBaseObject_GetOwningCamera) == 0x000008, "Wrong size on ATPCCameraBaseObject_GetOwningCamera");
static_assert(offsetof(ATPCCameraBaseObject_GetOwningCamera, ReturnValue) == 0x000000, "Member 'ATPCCameraBaseObject_GetOwningCamera::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraBaseObject_GetOwningPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_GetOwningPawn) == 0x000008, "Wrong alignment on ATPCCameraBaseObject_GetOwningPawn");
static_assert(sizeof(ATPCCameraBaseObject_GetOwningPawn) == 0x000008, "Wrong size on ATPCCameraBaseObject_GetOwningPawn");
static_assert(offsetof(ATPCCameraBaseObject_GetOwningPawn, ReturnValue) == 0x000000, "Member 'ATPCCameraBaseObject_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.GetPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraBaseObject_GetPlayerCameraManager final
{
public:
	class APlayerCameraManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_GetPlayerCameraManager) == 0x000008, "Wrong alignment on ATPCCameraBaseObject_GetPlayerCameraManager");
static_assert(sizeof(ATPCCameraBaseObject_GetPlayerCameraManager) == 0x000008, "Wrong size on ATPCCameraBaseObject_GetPlayerCameraManager");
static_assert(offsetof(ATPCCameraBaseObject_GetPlayerCameraManager, ReturnValue) == 0x000000, "Member 'ATPCCameraBaseObject_GetPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraBaseObject.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraBaseObject_GetPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraBaseObject_GetPlayerController) == 0x000008, "Wrong alignment on ATPCCameraBaseObject_GetPlayerController");
static_assert(sizeof(ATPCCameraBaseObject_GetPlayerController) == 0x000008, "Wrong size on ATPCCameraBaseObject_GetPlayerController");
static_assert(offsetof(ATPCCameraBaseObject_GetPlayerController, ReturnValue) == 0x000000, "Member 'ATPCCameraBaseObject_GetPlayerController::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.AddCameraMode
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraComponent_AddCameraMode final
{
public:
	struct FGameplayTag                           CameraModeName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UATPCCameraModeDataAsset*               CameraMode;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_AddCameraMode) == 0x000008, "Wrong alignment on ATPCCameraComponent_AddCameraMode");
static_assert(sizeof(ATPCCameraComponent_AddCameraMode) == 0x000010, "Wrong size on ATPCCameraComponent_AddCameraMode");
static_assert(offsetof(ATPCCameraComponent_AddCameraMode, CameraModeName) == 0x000000, "Member 'ATPCCameraComponent_AddCameraMode::CameraModeName' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_AddCameraMode, CameraMode) == 0x000008, "Member 'ATPCCameraComponent_AddCameraMode::CameraMode' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraMode
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraComponent_GetCameraMode final
{
public:
	struct FGameplayTag                           CameraModeName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UATPCCameraModeDataAsset*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraMode) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraMode");
static_assert(sizeof(ATPCCameraComponent_GetCameraMode) == 0x000010, "Wrong size on ATPCCameraComponent_GetCameraMode");
static_assert(offsetof(ATPCCameraComponent_GetCameraMode, CameraModeName) == 0x000000, "Member 'ATPCCameraComponent_GetCameraMode::CameraModeName' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_GetCameraMode, ReturnValue) == 0x000008, "Member 'ATPCCameraComponent_GetCameraMode::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCurrentCameraMode
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCurrentCameraMode final
{
public:
	class UATPCCameraModeDataAsset*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCurrentCameraMode) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCurrentCameraMode");
static_assert(sizeof(ATPCCameraComponent_GetCurrentCameraMode) == 0x000008, "Wrong size on ATPCCameraComponent_GetCurrentCameraMode");
static_assert(offsetof(ATPCCameraComponent_GetCurrentCameraMode, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCurrentCameraMode::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.RemoveCameraMode
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_RemoveCameraMode final
{
public:
	struct FGameplayTag                           CameraModeName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_RemoveCameraMode) == 0x000004, "Wrong alignment on ATPCCameraComponent_RemoveCameraMode");
static_assert(sizeof(ATPCCameraComponent_RemoveCameraMode) == 0x000008, "Wrong size on ATPCCameraComponent_RemoveCameraMode");
static_assert(offsetof(ATPCCameraComponent_RemoveCameraMode, CameraModeName) == 0x000000, "Member 'ATPCCameraComponent_RemoveCameraMode::CameraModeName' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.ResetCustomCameraMode
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraComponent_ResetCustomCameraMode final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_ResetCustomCameraMode) == 0x000001, "Wrong alignment on ATPCCameraComponent_ResetCustomCameraMode");
static_assert(sizeof(ATPCCameraComponent_ResetCustomCameraMode) == 0x000001, "Wrong size on ATPCCameraComponent_ResetCustomCameraMode");
static_assert(offsetof(ATPCCameraComponent_ResetCustomCameraMode, bWithInterpolation) == 0x000000, "Member 'ATPCCameraComponent_ResetCustomCameraMode::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.SetCameraDistance
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_SetCameraDistance final
{
public:
	float                                         NewDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolate;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDA[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraComponent_SetCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraComponent_SetCameraDistance");
static_assert(sizeof(ATPCCameraComponent_SetCameraDistance) == 0x000008, "Wrong size on ATPCCameraComponent_SetCameraDistance");
static_assert(offsetof(ATPCCameraComponent_SetCameraDistance, NewDistance) == 0x000000, "Member 'ATPCCameraComponent_SetCameraDistance::NewDistance' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_SetCameraDistance, bInterpolate) == 0x000004, "Member 'ATPCCameraComponent_SetCameraDistance::bInterpolate' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.SetCameraMode
// 0x000C (0x000C - 0x0000)
struct ATPCCameraComponent_SetCameraMode final
{
public:
	struct FGameplayTag                           CameraModeTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterpolation;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDB[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraComponent_SetCameraMode) == 0x000004, "Wrong alignment on ATPCCameraComponent_SetCameraMode");
static_assert(sizeof(ATPCCameraComponent_SetCameraMode) == 0x00000C, "Wrong size on ATPCCameraComponent_SetCameraMode");
static_assert(offsetof(ATPCCameraComponent_SetCameraMode, CameraModeTag) == 0x000000, "Member 'ATPCCameraComponent_SetCameraMode::CameraModeTag' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_SetCameraMode, bWithInterpolation) == 0x000008, "Member 'ATPCCameraComponent_SetCameraMode::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.SetCustomCameraMode
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraComponent_SetCustomCameraMode final
{
public:
	class UATPCCameraModeDataAsset*               CameraMode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterpolation;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraComponent_SetCustomCameraMode) == 0x000008, "Wrong alignment on ATPCCameraComponent_SetCustomCameraMode");
static_assert(sizeof(ATPCCameraComponent_SetCustomCameraMode) == 0x000010, "Wrong size on ATPCCameraComponent_SetCustomCameraMode");
static_assert(offsetof(ATPCCameraComponent_SetCustomCameraMode, CameraMode) == 0x000000, "Member 'ATPCCameraComponent_SetCustomCameraMode::CameraMode' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_SetCustomCameraMode, bWithInterpolation) == 0x000008, "Member 'ATPCCameraComponent_SetCustomCameraMode::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.ValidateComponents
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraComponent_ValidateComponents final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_ValidateComponents) == 0x000001, "Wrong alignment on ATPCCameraComponent_ValidateComponents");
static_assert(sizeof(ATPCCameraComponent_ValidateComponents) == 0x000001, "Wrong size on ATPCCameraComponent_ValidateComponents");
static_assert(offsetof(ATPCCameraComponent_ValidateComponents, bWithInterpolation) == 0x000000, "Member 'ATPCCameraComponent_ValidateComponents::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.CanSetCameraMode
// 0x000C (0x000C - 0x0000)
struct ATPCCameraComponent_CanSetCameraMode final
{
public:
	struct FGameplayTag                           CameraModeTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDD[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraComponent_CanSetCameraMode) == 0x000004, "Wrong alignment on ATPCCameraComponent_CanSetCameraMode");
static_assert(sizeof(ATPCCameraComponent_CanSetCameraMode) == 0x00000C, "Wrong size on ATPCCameraComponent_CanSetCameraMode");
static_assert(offsetof(ATPCCameraComponent_CanSetCameraMode, CameraModeTag) == 0x000000, "Member 'ATPCCameraComponent_CanSetCameraMode::CameraModeTag' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_CanSetCameraMode, ReturnValue) == 0x000008, "Member 'ATPCCameraComponent_CanSetCameraMode::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.FindOverlapCameraVolume
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_FindOverlapCameraVolume final
{
public:
	class AATPCCameraVolume*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_FindOverlapCameraVolume) == 0x000008, "Wrong alignment on ATPCCameraComponent_FindOverlapCameraVolume");
static_assert(sizeof(ATPCCameraComponent_FindOverlapCameraVolume) == 0x000008, "Wrong size on ATPCCameraComponent_FindOverlapCameraVolume");
static_assert(offsetof(ATPCCameraComponent_FindOverlapCameraVolume, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_FindOverlapCameraVolume::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraComponent_GetCameraDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraComponent_GetCameraDistance");
static_assert(sizeof(ATPCCameraComponent_GetCameraDistance) == 0x000004, "Wrong size on ATPCCameraComponent_GetCameraDistance");
static_assert(offsetof(ATPCCameraComponent_GetCameraDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraFadingObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraFadingObject final
{
public:
	class UATPCCameraFadingObject*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraFadingObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraFadingObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraFadingObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraFadingObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraFadingObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraFadingObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraFollowTerrainObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraFollowTerrainObject final
{
public:
	class UATPCCameraFollowTerrainObject*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraFollowTerrainObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraFollowTerrainObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraFollowTerrainObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraFollowTerrainObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraFollowTerrainObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraFollowTerrainObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraFOVObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraFOVObject final
{
public:
	class UATPCCameraFOVObject*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraFOVObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraFOVObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraFOVObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraFOVObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraFOVObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraFOVObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraComponent_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraLocation) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraLocation");
static_assert(sizeof(ATPCCameraComponent_GetCameraLocation) == 0x000018, "Wrong size on ATPCCameraComponent_GetCameraLocation");
static_assert(offsetof(ATPCCameraComponent_GetCameraLocation, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraLocationObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraLocationObject final
{
public:
	class UATPCCameraLocationObject*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraLocationObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraLocationObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraLocationObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraLocationObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraLocationObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraLocationObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraLockOnTargetObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraLockOnTargetObject final
{
public:
	class UATPCCameraLockOnTargetObject*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraLockOnTargetObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraLockOnTargetObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraLockOnTargetObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraLockOnTargetObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraLockOnTargetObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraLockOnTargetObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraModeTagFromOverlapCameraVolume
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume) == 0x000004, "Wrong alignment on ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume");
static_assert(sizeof(ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume");
static_assert(offsetof(ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraModeTagFromOverlapCameraVolume::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraComponent_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraRotation) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraRotation");
static_assert(sizeof(ATPCCameraComponent_GetCameraRotation) == 0x000018, "Wrong size on ATPCCameraComponent_GetCameraRotation");
static_assert(offsetof(ATPCCameraComponent_GetCameraRotation, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCameraShakesObject
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCameraShakesObject final
{
public:
	class UATPCCameraShakesObject*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCameraShakesObject) == 0x000008, "Wrong alignment on ATPCCameraComponent_GetCameraShakesObject");
static_assert(sizeof(ATPCCameraComponent_GetCameraShakesObject) == 0x000008, "Wrong size on ATPCCameraComponent_GetCameraShakesObject");
static_assert(offsetof(ATPCCameraComponent_GetCameraShakesObject, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCameraShakesObject::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetCurrentCameraModeTag
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetCurrentCameraModeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetCurrentCameraModeTag) == 0x000004, "Wrong alignment on ATPCCameraComponent_GetCurrentCameraModeTag");
static_assert(sizeof(ATPCCameraComponent_GetCurrentCameraModeTag) == 0x000008, "Wrong size on ATPCCameraComponent_GetCurrentCameraModeTag");
static_assert(offsetof(ATPCCameraComponent_GetCurrentCameraModeTag, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetCurrentCameraModeTag::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetDesiredCameraModeTag
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetDesiredCameraModeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetDesiredCameraModeTag) == 0x000004, "Wrong alignment on ATPCCameraComponent_GetDesiredCameraModeTag");
static_assert(sizeof(ATPCCameraComponent_GetDesiredCameraModeTag) == 0x000008, "Wrong size on ATPCCameraComponent_GetDesiredCameraModeTag");
static_assert(offsetof(ATPCCameraComponent_GetDesiredCameraModeTag, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetDesiredCameraModeTag::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.GetInitialCameraModeTag
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraComponent_GetInitialCameraModeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_GetInitialCameraModeTag) == 0x000004, "Wrong alignment on ATPCCameraComponent_GetInitialCameraModeTag");
static_assert(sizeof(ATPCCameraComponent_GetInitialCameraModeTag) == 0x000008, "Wrong size on ATPCCameraComponent_GetInitialCameraModeTag");
static_assert(offsetof(ATPCCameraComponent_GetInitialCameraModeTag, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_GetInitialCameraModeTag::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.HasCameraMode
// 0x000C (0x000C - 0x0000)
struct ATPCCameraComponent_HasCameraMode final
{
public:
	struct FGameplayTag                           CameraModeName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDE[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraComponent_HasCameraMode) == 0x000004, "Wrong alignment on ATPCCameraComponent_HasCameraMode");
static_assert(sizeof(ATPCCameraComponent_HasCameraMode) == 0x00000C, "Wrong size on ATPCCameraComponent_HasCameraMode");
static_assert(offsetof(ATPCCameraComponent_HasCameraMode, CameraModeName) == 0x000000, "Member 'ATPCCameraComponent_HasCameraMode::CameraModeName' has a wrong offset!");
static_assert(offsetof(ATPCCameraComponent_HasCameraMode, ReturnValue) == 0x000008, "Member 'ATPCCameraComponent_HasCameraMode::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraComponent.IsSetCustomCameraMode
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraComponent_IsSetCustomCameraMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraComponent_IsSetCustomCameraMode) == 0x000001, "Wrong alignment on ATPCCameraComponent_IsSetCustomCameraMode");
static_assert(sizeof(ATPCCameraComponent_IsSetCustomCameraMode) == 0x000001, "Wrong size on ATPCCameraComponent_IsSetCustomCameraMode");
static_assert(offsetof(ATPCCameraComponent_IsSetCustomCameraMode, ReturnValue) == 0x000000, "Member 'ATPCCameraComponent_IsSetCustomCameraMode::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFadingObject.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraFadingObject_AddIgnoredActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFadingObject_AddIgnoredActor) == 0x000008, "Wrong alignment on ATPCCameraFadingObject_AddIgnoredActor");
static_assert(sizeof(ATPCCameraFadingObject_AddIgnoredActor) == 0x000008, "Wrong size on ATPCCameraFadingObject_AddIgnoredActor");
static_assert(offsetof(ATPCCameraFadingObject_AddIgnoredActor, Actor) == 0x000000, "Member 'ATPCCameraFadingObject_AddIgnoredActor::Actor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFadingObject.AddManualFadeActor
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraFadingObject_AddManualFadeActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithCustomTime;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomFadeOutTime;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFadingObject_AddManualFadeActor) == 0x000008, "Wrong alignment on ATPCCameraFadingObject_AddManualFadeActor");
static_assert(sizeof(ATPCCameraFadingObject_AddManualFadeActor) == 0x000010, "Wrong size on ATPCCameraFadingObject_AddManualFadeActor");
static_assert(offsetof(ATPCCameraFadingObject_AddManualFadeActor, Actor) == 0x000000, "Member 'ATPCCameraFadingObject_AddManualFadeActor::Actor' has a wrong offset!");
static_assert(offsetof(ATPCCameraFadingObject_AddManualFadeActor, bWithCustomTime) == 0x000008, "Member 'ATPCCameraFadingObject_AddManualFadeActor::bWithCustomTime' has a wrong offset!");
static_assert(offsetof(ATPCCameraFadingObject_AddManualFadeActor, CustomFadeOutTime) == 0x00000C, "Member 'ATPCCameraFadingObject_AddManualFadeActor::CustomFadeOutTime' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFadingObject.RemoveIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraFadingObject_RemoveIgnoredActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFadingObject_RemoveIgnoredActor) == 0x000008, "Wrong alignment on ATPCCameraFadingObject_RemoveIgnoredActor");
static_assert(sizeof(ATPCCameraFadingObject_RemoveIgnoredActor) == 0x000008, "Wrong size on ATPCCameraFadingObject_RemoveIgnoredActor");
static_assert(offsetof(ATPCCameraFadingObject_RemoveIgnoredActor, Actor) == 0x000000, "Member 'ATPCCameraFadingObject_RemoveIgnoredActor::Actor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFadingObject.RemoveManualFadeActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraFadingObject_RemoveManualFadeActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFadingObject_RemoveManualFadeActor) == 0x000008, "Wrong alignment on ATPCCameraFadingObject_RemoveManualFadeActor");
static_assert(sizeof(ATPCCameraFadingObject_RemoveManualFadeActor) == 0x000008, "Wrong size on ATPCCameraFadingObject_RemoveManualFadeActor");
static_assert(offsetof(ATPCCameraFadingObject_RemoveManualFadeActor, Actor) == 0x000000, "Member 'ATPCCameraFadingObject_RemoveManualFadeActor::Actor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.GetOverrideFOV
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraFOVObject_GetOverrideFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFOVObject_GetOverrideFOV) == 0x000004, "Wrong alignment on ATPCCameraFOVObject_GetOverrideFOV");
static_assert(sizeof(ATPCCameraFOVObject_GetOverrideFOV) == 0x000004, "Wrong size on ATPCCameraFOVObject_GetOverrideFOV");
static_assert(offsetof(ATPCCameraFOVObject_GetOverrideFOV, ReturnValue) == 0x000000, "Member 'ATPCCameraFOVObject_GetOverrideFOV::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.ResetOverrideFOV
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraFOVObject_ResetOverrideFOV final
{
public:
	bool                                          bWithInterp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFOVObject_ResetOverrideFOV) == 0x000001, "Wrong alignment on ATPCCameraFOVObject_ResetOverrideFOV");
static_assert(sizeof(ATPCCameraFOVObject_ResetOverrideFOV) == 0x000001, "Wrong size on ATPCCameraFOVObject_ResetOverrideFOV");
static_assert(offsetof(ATPCCameraFOVObject_ResetOverrideFOV, bWithInterp) == 0x000000, "Member 'ATPCCameraFOVObject_ResetOverrideFOV::bWithInterp' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.SetOverrideFOV
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraFOVObject_SetOverrideFOV final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterp;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraFOVObject_SetOverrideFOV) == 0x000004, "Wrong alignment on ATPCCameraFOVObject_SetOverrideFOV");
static_assert(sizeof(ATPCCameraFOVObject_SetOverrideFOV) == 0x000008, "Wrong size on ATPCCameraFOVObject_SetOverrideFOV");
static_assert(offsetof(ATPCCameraFOVObject_SetOverrideFOV, NewFOV) == 0x000000, "Member 'ATPCCameraFOVObject_SetOverrideFOV::NewFOV' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_SetOverrideFOV, bWithInterp) == 0x000004, "Member 'ATPCCameraFOVObject_SetOverrideFOV::bWithInterp' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.GetCurrentFOV
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraFOVObject_GetCurrentFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFOVObject_GetCurrentFOV) == 0x000004, "Wrong alignment on ATPCCameraFOVObject_GetCurrentFOV");
static_assert(sizeof(ATPCCameraFOVObject_GetCurrentFOV) == 0x000004, "Wrong size on ATPCCameraFOVObject_GetCurrentFOV");
static_assert(offsetof(ATPCCameraFOVObject_GetCurrentFOV, ReturnValue) == 0x000000, "Member 'ATPCCameraFOVObject_GetCurrentFOV::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.GetInterpFOV
// 0x000C (0x000C - 0x0000)
struct ATPCCameraFOVObject_GetInterpFOV final
{
public:
	float                                         InFOV;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFOVObject_GetInterpFOV) == 0x000004, "Wrong alignment on ATPCCameraFOVObject_GetInterpFOV");
static_assert(sizeof(ATPCCameraFOVObject_GetInterpFOV) == 0x00000C, "Wrong size on ATPCCameraFOVObject_GetInterpFOV");
static_assert(offsetof(ATPCCameraFOVObject_GetInterpFOV, InFOV) == 0x000000, "Member 'ATPCCameraFOVObject_GetInterpFOV::InFOV' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_GetInterpFOV, InDeltaTime) == 0x000004, "Member 'ATPCCameraFOVObject_GetInterpFOV::InDeltaTime' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_GetInterpFOV, ReturnValue) == 0x000008, "Member 'ATPCCameraFOVObject_GetInterpFOV::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.GetTargetFOV
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraFOVObject_GetTargetFOV final
{
public:
	const class APlayerCameraManager*             InCameraManager;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWithInterpolation;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDeltaTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraFOVObject_GetTargetFOV) == 0x000008, "Wrong alignment on ATPCCameraFOVObject_GetTargetFOV");
static_assert(sizeof(ATPCCameraFOVObject_GetTargetFOV) == 0x000018, "Wrong size on ATPCCameraFOVObject_GetTargetFOV");
static_assert(offsetof(ATPCCameraFOVObject_GetTargetFOV, InCameraManager) == 0x000000, "Member 'ATPCCameraFOVObject_GetTargetFOV::InCameraManager' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_GetTargetFOV, bInWithInterpolation) == 0x000008, "Member 'ATPCCameraFOVObject_GetTargetFOV::bInWithInterpolation' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_GetTargetFOV, InDeltaTime) == 0x00000C, "Member 'ATPCCameraFOVObject_GetTargetFOV::InDeltaTime' has a wrong offset!");
static_assert(offsetof(ATPCCameraFOVObject_GetTargetFOV, ReturnValue) == 0x000010, "Member 'ATPCCameraFOVObject_GetTargetFOV::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraFOVObject.IsOverrideFOV
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraFOVObject_IsOverrideFOV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraFOVObject_IsOverrideFOV) == 0x000001, "Wrong alignment on ATPCCameraFOVObject_IsOverrideFOV");
static_assert(sizeof(ATPCCameraFOVObject_IsOverrideFOV) == 0x000001, "Wrong size on ATPCCameraFOVObject_IsOverrideFOV");
static_assert(offsetof(ATPCCameraFOVObject_IsOverrideFOV, ReturnValue) == 0x000000, "Member 'ATPCCameraFOVObject_IsOverrideFOV::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.AttachCameraToComponent
// 0x0030 (0x0030 - 0x0000)
struct ATPCCameraLocationObject_AttachCameraToComponent final
{
public:
	class USceneComponent*                        ParentComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterp;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_AttachCameraToComponent) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_AttachCameraToComponent");
static_assert(sizeof(ATPCCameraLocationObject_AttachCameraToComponent) == 0x000030, "Wrong size on ATPCCameraLocationObject_AttachCameraToComponent");
static_assert(offsetof(ATPCCameraLocationObject_AttachCameraToComponent, ParentComponent) == 0x000000, "Member 'ATPCCameraLocationObject_AttachCameraToComponent::ParentComponent' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_AttachCameraToComponent, RelativeLocation) == 0x000008, "Member 'ATPCCameraLocationObject_AttachCameraToComponent::RelativeLocation' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_AttachCameraToComponent, SocketName) == 0x000020, "Member 'ATPCCameraLocationObject_AttachCameraToComponent::SocketName' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_AttachCameraToComponent, bWithInterp) == 0x000028, "Member 'ATPCCameraLocationObject_AttachCameraToComponent::bWithInterp' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_AttachCameraToComponent, InterpSpeed) == 0x00002C, "Member 'ATPCCameraLocationObject_AttachCameraToComponent::InterpSpeed' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.ResetCustomSocketOffset
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_ResetCustomSocketOffset final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_ResetCustomSocketOffset) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_ResetCustomSocketOffset");
static_assert(sizeof(ATPCCameraLocationObject_ResetCustomSocketOffset) == 0x000001, "Wrong size on ATPCCameraLocationObject_ResetCustomSocketOffset");
static_assert(offsetof(ATPCCameraLocationObject_ResetCustomSocketOffset, bWithInterpolation) == 0x000000, "Member 'ATPCCameraLocationObject_ResetCustomSocketOffset::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.ResetCustomTargetOffset
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_ResetCustomTargetOffset final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_ResetCustomTargetOffset) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_ResetCustomTargetOffset");
static_assert(sizeof(ATPCCameraLocationObject_ResetCustomTargetOffset) == 0x000001, "Wrong size on ATPCCameraLocationObject_ResetCustomTargetOffset");
static_assert(offsetof(ATPCCameraLocationObject_ResetCustomTargetOffset, bWithInterpolation) == 0x000000, "Member 'ATPCCameraLocationObject_ResetCustomTargetOffset::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.ResetOverrideCameraDistance
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_ResetOverrideCameraDistance final
{
public:
	bool                                          bWithInterpolation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_ResetOverrideCameraDistance) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_ResetOverrideCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_ResetOverrideCameraDistance) == 0x000001, "Wrong size on ATPCCameraLocationObject_ResetOverrideCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_ResetOverrideCameraDistance, bWithInterpolation) == 0x000000, "Member 'ATPCCameraLocationObject_ResetOverrideCameraDistance::bWithInterpolation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetCameraDistance
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraLocationObject_SetCameraDistance final
{
public:
	float                                         NewDist;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolate;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEA[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraLocationObject_SetCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_SetCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_SetCameraDistance) == 0x000008, "Wrong size on ATPCCameraLocationObject_SetCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_SetCameraDistance, NewDist) == 0x000000, "Member 'ATPCCameraLocationObject_SetCameraDistance::NewDist' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetCameraDistance, bInterpolate) == 0x000004, "Member 'ATPCCameraLocationObject_SetCameraDistance::bInterpolate' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetCustomSocketOffset
// 0x0020 (0x0020 - 0x0000)
struct ATPCCameraLocationObject_SetCustomSocketOffset final
{
public:
	struct FVector                                NewSocketOffset;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterpolation;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEB[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetCustomSocketOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_SetCustomSocketOffset");
static_assert(sizeof(ATPCCameraLocationObject_SetCustomSocketOffset) == 0x000020, "Wrong size on ATPCCameraLocationObject_SetCustomSocketOffset");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomSocketOffset, NewSocketOffset) == 0x000000, "Member 'ATPCCameraLocationObject_SetCustomSocketOffset::NewSocketOffset' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomSocketOffset, bWithInterpolation) == 0x000018, "Member 'ATPCCameraLocationObject_SetCustomSocketOffset::bWithInterpolation' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomSocketOffset, InterpSpeed) == 0x00001C, "Member 'ATPCCameraLocationObject_SetCustomSocketOffset::InterpSpeed' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetCustomTargetOffset
// 0x0020 (0x0020 - 0x0000)
struct ATPCCameraLocationObject_SetCustomTargetOffset final
{
public:
	struct FVector                                NewTargetOffset;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterpolation;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetCustomTargetOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_SetCustomTargetOffset");
static_assert(sizeof(ATPCCameraLocationObject_SetCustomTargetOffset) == 0x000020, "Wrong size on ATPCCameraLocationObject_SetCustomTargetOffset");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomTargetOffset, NewTargetOffset) == 0x000000, "Member 'ATPCCameraLocationObject_SetCustomTargetOffset::NewTargetOffset' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomTargetOffset, bWithInterpolation) == 0x000018, "Member 'ATPCCameraLocationObject_SetCustomTargetOffset::bWithInterpolation' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetCustomTargetOffset, InterpSpeed) == 0x00001C, "Member 'ATPCCameraLocationObject_SetCustomTargetOffset::InterpSpeed' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetOverrideCameraDistance
// 0x000C (0x000C - 0x0000)
struct ATPCCameraLocationObject_SetOverrideCameraDistance final
{
public:
	float                                         NewOverrideDistance;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithInterpolation;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EED[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetOverrideCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_SetOverrideCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_SetOverrideCameraDistance) == 0x00000C, "Wrong size on ATPCCameraLocationObject_SetOverrideCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideCameraDistance, NewOverrideDistance) == 0x000000, "Member 'ATPCCameraLocationObject_SetOverrideCameraDistance::NewOverrideDistance' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideCameraDistance, bWithInterpolation) == 0x000004, "Member 'ATPCCameraLocationObject_SetOverrideCameraDistance::bWithInterpolation' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideCameraDistance, InterpSpeed) == 0x000008, "Member 'ATPCCameraLocationObject_SetOverrideCameraDistance::InterpSpeed' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetOverrideCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_SetOverrideCameraLocation final
{
public:
	struct FVector                                NewOverrideLocation;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetOverrideCameraLocation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_SetOverrideCameraLocation");
static_assert(sizeof(ATPCCameraLocationObject_SetOverrideCameraLocation) == 0x000018, "Wrong size on ATPCCameraLocationObject_SetOverrideCameraLocation");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideCameraLocation, NewOverrideLocation) == 0x000000, "Member 'ATPCCameraLocationObject_SetOverrideCameraLocation::NewOverrideLocation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetOverrideCameraRotation
// 0x0020 (0x0020 - 0x0000)
struct ATPCCameraLocationObject_SetOverrideCameraRotation final
{
public:
	struct FATPCOverrideCameraRotation            NewOverrideRotation;                               // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetOverrideCameraRotation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_SetOverrideCameraRotation");
static_assert(sizeof(ATPCCameraLocationObject_SetOverrideCameraRotation) == 0x000020, "Wrong size on ATPCCameraLocationObject_SetOverrideCameraRotation");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideCameraRotation, NewOverrideRotation) == 0x000000, "Member 'ATPCCameraLocationObject_SetOverrideCameraRotation::NewOverrideRotation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetOverrideOffsetCameraRotationSettings
// 0x001C (0x001C - 0x0000)
struct ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings final
{
public:
	struct FATPCRotationOffsetSettings            Settings;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWithInterp;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEE[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings");
static_assert(sizeof(ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings) == 0x00001C, "Wrong size on ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings, Settings) == 0x000000, "Member 'ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings::Settings' has a wrong offset!");
static_assert(offsetof(ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings, bWithInterp) == 0x000018, "Member 'ATPCCameraLocationObject_SetOverrideOffsetCameraRotationSettings::bWithInterp' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.SetViewRotation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_SetViewRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_SetViewRotation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_SetViewRotation");
static_assert(sizeof(ATPCCameraLocationObject_SetViewRotation) == 0x000018, "Wrong size on ATPCCameraLocationObject_SetViewRotation");
static_assert(offsetof(ATPCCameraLocationObject_SetViewRotation, Rotation) == 0x000000, "Member 'ATPCCameraLocationObject_SetViewRotation::Rotation' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetAllSocketOffsets
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetAllSocketOffsets final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetAllSocketOffsets) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetAllSocketOffsets");
static_assert(sizeof(ATPCCameraLocationObject_GetAllSocketOffsets) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetAllSocketOffsets");
static_assert(offsetof(ATPCCameraLocationObject_GetAllSocketOffsets, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetAllSocketOffsets::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraLocationObject_GetCameraDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_GetCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_GetCameraDistance) == 0x000004, "Wrong size on ATPCCameraLocationObject_GetCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_GetCameraDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCameraDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCameraLocation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetCameraLocation");
static_assert(sizeof(ATPCCameraLocationObject_GetCameraLocation) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetCameraLocation");
static_assert(offsetof(ATPCCameraLocationObject_GetCameraLocation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCameraRotation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetCameraRotation");
static_assert(sizeof(ATPCCameraLocationObject_GetCameraRotation) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetCameraRotation");
static_assert(offsetof(ATPCCameraLocationObject_GetCameraRotation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCameraTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraLocationObject_GetCameraTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCameraTargetDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_GetCameraTargetDistance");
static_assert(sizeof(ATPCCameraLocationObject_GetCameraTargetDistance) == 0x000004, "Wrong size on ATPCCameraLocationObject_GetCameraTargetDistance");
static_assert(offsetof(ATPCCameraLocationObject_GetCameraTargetDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCameraTargetDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCustomSocketOffset
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetCustomSocketOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCustomSocketOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetCustomSocketOffset");
static_assert(sizeof(ATPCCameraLocationObject_GetCustomSocketOffset) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetCustomSocketOffset");
static_assert(offsetof(ATPCCameraLocationObject_GetCustomSocketOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCustomSocketOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetCustomTargetOffset
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetCustomTargetOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetCustomTargetOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetCustomTargetOffset");
static_assert(sizeof(ATPCCameraLocationObject_GetCustomTargetOffset) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetCustomTargetOffset");
static_assert(offsetof(ATPCCameraLocationObject_GetCustomTargetOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetCustomTargetOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetOverrideCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraLocationObject_GetOverrideCameraDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetOverrideCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_GetOverrideCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_GetOverrideCameraDistance) == 0x000004, "Wrong size on ATPCCameraLocationObject_GetOverrideCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_GetOverrideCameraDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetOverrideCameraDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetOverrideCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetOverrideCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetOverrideCameraLocation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetOverrideCameraLocation");
static_assert(sizeof(ATPCCameraLocationObject_GetOverrideCameraLocation) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetOverrideCameraLocation");
static_assert(offsetof(ATPCCameraLocationObject_GetOverrideCameraLocation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetOverrideCameraLocation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetOverrideCameraRotation
// 0x0020 (0x0020 - 0x0000)
struct ATPCCameraLocationObject_GetOverrideCameraRotation final
{
public:
	struct FATPCOverrideCameraRotation            ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetOverrideCameraRotation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetOverrideCameraRotation");
static_assert(sizeof(ATPCCameraLocationObject_GetOverrideCameraRotation) == 0x000020, "Wrong size on ATPCCameraLocationObject_GetOverrideCameraRotation");
static_assert(offsetof(ATPCCameraLocationObject_GetOverrideCameraRotation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetOverrideCameraRotation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetOverrideOffsetCameraRotationSettings
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings final
{
public:
	struct FATPCRotationOffsetSettings            ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings");
static_assert(sizeof(ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings");
static_assert(offsetof(ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetOverrideOffsetCameraRotationSettings::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetRealCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct ATPCCameraLocationObject_GetRealCameraDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetRealCameraDistance) == 0x000004, "Wrong alignment on ATPCCameraLocationObject_GetRealCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_GetRealCameraDistance) == 0x000004, "Wrong size on ATPCCameraLocationObject_GetRealCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_GetRealCameraDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetRealCameraDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetSocketOffset
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetSocketOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetSocketOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetSocketOffset");
static_assert(sizeof(ATPCCameraLocationObject_GetSocketOffset) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetSocketOffset");
static_assert(offsetof(ATPCCameraLocationObject_GetSocketOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetSocketOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetTargetOffset
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetTargetOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetTargetOffset) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetTargetOffset");
static_assert(sizeof(ATPCCameraLocationObject_GetTargetOffset) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetTargetOffset");
static_assert(offsetof(ATPCCameraLocationObject_GetTargetOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetTargetOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.GetViewRotation
// 0x0018 (0x0018 - 0x0000)
struct ATPCCameraLocationObject_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_GetViewRotation) == 0x000008, "Wrong alignment on ATPCCameraLocationObject_GetViewRotation");
static_assert(sizeof(ATPCCameraLocationObject_GetViewRotation) == 0x000018, "Wrong size on ATPCCameraLocationObject_GetViewRotation");
static_assert(offsetof(ATPCCameraLocationObject_GetViewRotation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_GetViewRotation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.HasCustomSocketOffset
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_HasCustomSocketOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_HasCustomSocketOffset) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_HasCustomSocketOffset");
static_assert(sizeof(ATPCCameraLocationObject_HasCustomSocketOffset) == 0x000001, "Wrong size on ATPCCameraLocationObject_HasCustomSocketOffset");
static_assert(offsetof(ATPCCameraLocationObject_HasCustomSocketOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_HasCustomSocketOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.HasCustomTargetOffset
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_HasCustomTargetOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_HasCustomTargetOffset) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_HasCustomTargetOffset");
static_assert(sizeof(ATPCCameraLocationObject_HasCustomTargetOffset) == 0x000001, "Wrong size on ATPCCameraLocationObject_HasCustomTargetOffset");
static_assert(offsetof(ATPCCameraLocationObject_HasCustomTargetOffset, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_HasCustomTargetOffset::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.IsOverrideCameraDistance
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_IsOverrideCameraDistance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_IsOverrideCameraDistance) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_IsOverrideCameraDistance");
static_assert(sizeof(ATPCCameraLocationObject_IsOverrideCameraDistance) == 0x000001, "Wrong size on ATPCCameraLocationObject_IsOverrideCameraDistance");
static_assert(offsetof(ATPCCameraLocationObject_IsOverrideCameraDistance, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_IsOverrideCameraDistance::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.IsOverrideCameraLocation
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_IsOverrideCameraLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_IsOverrideCameraLocation) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_IsOverrideCameraLocation");
static_assert(sizeof(ATPCCameraLocationObject_IsOverrideCameraLocation) == 0x000001, "Wrong size on ATPCCameraLocationObject_IsOverrideCameraLocation");
static_assert(offsetof(ATPCCameraLocationObject_IsOverrideCameraLocation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_IsOverrideCameraLocation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.IsOverrideCameraRotation
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_IsOverrideCameraRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_IsOverrideCameraRotation) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_IsOverrideCameraRotation");
static_assert(sizeof(ATPCCameraLocationObject_IsOverrideCameraRotation) == 0x000001, "Wrong size on ATPCCameraLocationObject_IsOverrideCameraRotation");
static_assert(offsetof(ATPCCameraLocationObject_IsOverrideCameraRotation, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_IsOverrideCameraRotation::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLocationObject.IsOverrideCameraRotationSettings
// 0x0001 (0x0001 - 0x0000)
struct ATPCCameraLocationObject_IsOverrideCameraRotationSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLocationObject_IsOverrideCameraRotationSettings) == 0x000001, "Wrong alignment on ATPCCameraLocationObject_IsOverrideCameraRotationSettings");
static_assert(sizeof(ATPCCameraLocationObject_IsOverrideCameraRotationSettings) == 0x000001, "Wrong size on ATPCCameraLocationObject_IsOverrideCameraRotationSettings");
static_assert(offsetof(ATPCCameraLocationObject_IsOverrideCameraRotationSettings, ReturnValue) == 0x000000, "Member 'ATPCCameraLocationObject_IsOverrideCameraRotationSettings::ReturnValue' has a wrong offset!");

// DelegateFunction AdvancedThirdPersonCamera.ATPCCameraLockOnTargetObject.OnTargetChangeDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature");
static_assert(sizeof(ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature) == 0x000008, "Wrong size on ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature");
static_assert(offsetof(ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature, NewTarget) == 0x000000, "Member 'ATPCCameraLockOnTargetObject_OnTargetChangeDelegate__DelegateSignature::NewTarget' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLockOnTargetObject.SetTargetActor
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraLockOnTargetObject_SetTargetActor final
{
public:
	class AActor*                                 NewTargetActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraLockOnTargetObject_SetTargetActor) == 0x000008, "Wrong alignment on ATPCCameraLockOnTargetObject_SetTargetActor");
static_assert(sizeof(ATPCCameraLockOnTargetObject_SetTargetActor) == 0x000010, "Wrong size on ATPCCameraLockOnTargetObject_SetTargetActor");
static_assert(offsetof(ATPCCameraLockOnTargetObject_SetTargetActor, NewTargetActor) == 0x000000, "Member 'ATPCCameraLockOnTargetObject_SetTargetActor::NewTargetActor' has a wrong offset!");
static_assert(offsetof(ATPCCameraLockOnTargetObject_SetTargetActor, ReturnValue) == 0x000008, "Member 'ATPCCameraLockOnTargetObject_SetTargetActor::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLockOnTargetObject.SetTargetActorWithResetTimer
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer final
{
public:
	class AActor*                                 NewTargetActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetResetTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF2[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer) == 0x000008, "Wrong alignment on ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer");
static_assert(sizeof(ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer) == 0x000010, "Wrong size on ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer");
static_assert(offsetof(ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer, NewTargetActor) == 0x000000, "Member 'ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer::NewTargetActor' has a wrong offset!");
static_assert(offsetof(ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer, TargetResetTime) == 0x000008, "Member 'ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer::TargetResetTime' has a wrong offset!");
static_assert(offsetof(ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer, ReturnValue) == 0x00000C, "Member 'ATPCCameraLockOnTargetObject_SetTargetActorWithResetTimer::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraLockOnTargetObject.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraLockOnTargetObject_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraLockOnTargetObject_GetTargetActor) == 0x000008, "Wrong alignment on ATPCCameraLockOnTargetObject_GetTargetActor");
static_assert(sizeof(ATPCCameraLockOnTargetObject_GetTargetActor) == 0x000008, "Wrong size on ATPCCameraLockOnTargetObject_GetTargetActor");
static_assert(offsetof(ATPCCameraLockOnTargetObject_GetTargetActor, ReturnValue) == 0x000000, "Member 'ATPCCameraLockOnTargetObject_GetTargetActor::ReturnValue' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraModeScript.K2_OnEnterCameraMode
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraModeScript_K2_OnEnterCameraMode final
{
public:
	class UATPCCameraComponent*                   Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraModeScript_K2_OnEnterCameraMode) == 0x000008, "Wrong alignment on ATPCCameraModeScript_K2_OnEnterCameraMode");
static_assert(sizeof(ATPCCameraModeScript_K2_OnEnterCameraMode) == 0x000008, "Wrong size on ATPCCameraModeScript_K2_OnEnterCameraMode");
static_assert(offsetof(ATPCCameraModeScript_K2_OnEnterCameraMode, Camera) == 0x000000, "Member 'ATPCCameraModeScript_K2_OnEnterCameraMode::Camera' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraModeScript.K2_OnExitCameraMode
// 0x0008 (0x0008 - 0x0000)
struct ATPCCameraModeScript_K2_OnExitCameraMode final
{
public:
	class UATPCCameraComponent*                   Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraModeScript_K2_OnExitCameraMode) == 0x000008, "Wrong alignment on ATPCCameraModeScript_K2_OnExitCameraMode");
static_assert(sizeof(ATPCCameraModeScript_K2_OnExitCameraMode) == 0x000008, "Wrong size on ATPCCameraModeScript_K2_OnExitCameraMode");
static_assert(offsetof(ATPCCameraModeScript_K2_OnExitCameraMode, Camera) == 0x000000, "Member 'ATPCCameraModeScript_K2_OnExitCameraMode::Camera' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraModeScript.K2_Tick
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraModeScript_K2_Tick final
{
public:
	class UATPCCameraComponent*                   Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPCCameraModeScript_K2_Tick) == 0x000008, "Wrong alignment on ATPCCameraModeScript_K2_Tick");
static_assert(sizeof(ATPCCameraModeScript_K2_Tick) == 0x000010, "Wrong size on ATPCCameraModeScript_K2_Tick");
static_assert(offsetof(ATPCCameraModeScript_K2_Tick, Camera) == 0x000000, "Member 'ATPCCameraModeScript_K2_Tick::Camera' has a wrong offset!");
static_assert(offsetof(ATPCCameraModeScript_K2_Tick, DeltaSeconds) == 0x000008, "Member 'ATPCCameraModeScript_K2_Tick::DeltaSeconds' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraVolume.OnVolumeBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraVolume_OnVolumeBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraVolume_OnVolumeBeginOverlap) == 0x000008, "Wrong alignment on ATPCCameraVolume_OnVolumeBeginOverlap");
static_assert(sizeof(ATPCCameraVolume_OnVolumeBeginOverlap) == 0x000010, "Wrong size on ATPCCameraVolume_OnVolumeBeginOverlap");
static_assert(offsetof(ATPCCameraVolume_OnVolumeBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATPCCameraVolume_OnVolumeBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPCCameraVolume_OnVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'ATPCCameraVolume_OnVolumeBeginOverlap::OtherActor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCCameraVolume.OnVolumeEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPCCameraVolume_OnVolumeEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCCameraVolume_OnVolumeEndOverlap) == 0x000008, "Wrong alignment on ATPCCameraVolume_OnVolumeEndOverlap");
static_assert(sizeof(ATPCCameraVolume_OnVolumeEndOverlap) == 0x000010, "Wrong size on ATPCCameraVolume_OnVolumeEndOverlap");
static_assert(offsetof(ATPCCameraVolume_OnVolumeEndOverlap, OverlappedActor) == 0x000000, "Member 'ATPCCameraVolume_OnVolumeEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPCCameraVolume_OnVolumeEndOverlap, OtherActor) == 0x000008, "Member 'ATPCCameraVolume_OnVolumeEndOverlap::OtherActor' has a wrong offset!");

// Function AdvancedThirdPersonCamera.ATPCLockOnTargetLocationComponent.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPCLockOnTargetLocationComponent_GetTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPCLockOnTargetLocationComponent_GetTargetLocation) == 0x000008, "Wrong alignment on ATPCLockOnTargetLocationComponent_GetTargetLocation");
static_assert(sizeof(ATPCLockOnTargetLocationComponent_GetTargetLocation) == 0x000018, "Wrong size on ATPCLockOnTargetLocationComponent_GetTargetLocation");
static_assert(offsetof(ATPCLockOnTargetLocationComponent_GetTargetLocation, ReturnValue) == 0x000000, "Member 'ATPCLockOnTargetLocationComponent_GetTargetLocation::ReturnValue' has a wrong offset!");

}

