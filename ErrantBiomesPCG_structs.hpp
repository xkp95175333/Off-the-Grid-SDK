#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ErrantBiomesPCG

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ErrantBiomesPCG.EBiomesPCGMaskDataSource
// NumValues: 0x0006
enum class EBiomesPCGMaskDataSource : uint8
{
	SpeciesGrowth                            = 0,
	SpeciesScale                             = 1,
	SpeciesGroup                             = 2,
	SubBiome                                 = 3,
	SpeciesRotation                          = 4,
	EBiomesPCGMaskDataSource_MAX             = 5,
};

// Enum ErrantBiomesPCG.EBiomesPCGLimit
// NumValues: 0x0004
enum class EBiomesPCGLimit : uint32
{
	CreateAll                                = 0,
	AllowList                                = 1,
	BlockList                                = 2,
	EBiomesPCGLimit_MAX                      = 3,
};

// ScriptStruct ErrantBiomesPCG.BiomesPCGMaskData
// 0x0010 (0x0010 - 0x0000)
struct FBiomesPCGMaskData final
{
public:
	TArray<uint8>                                 MaskData;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesPCGMaskData) == 0x000008, "Wrong alignment on FBiomesPCGMaskData");
static_assert(sizeof(FBiomesPCGMaskData) == 0x000010, "Wrong size on FBiomesPCGMaskData");
static_assert(offsetof(FBiomesPCGMaskData, MaskData) == 0x000000, "Member 'FBiomesPCGMaskData::MaskData' has a wrong offset!");

// ScriptStruct ErrantBiomesPCG.BiomesPCGMaskSource
// 0x0028 (0x0028 - 0x0000)
struct FBiomesPCGMaskSource final
{
public:
	struct FSoftObjectPath                        SourceAsset;                                       // 0x0000(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBiomesPCGMaskDataSource                      MaskDataSource;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomesPCGMaskSource) == 0x000008, "Wrong alignment on FBiomesPCGMaskSource");
static_assert(sizeof(FBiomesPCGMaskSource) == 0x000028, "Wrong size on FBiomesPCGMaskSource");
static_assert(offsetof(FBiomesPCGMaskSource, SourceAsset) == 0x000000, "Member 'FBiomesPCGMaskSource::SourceAsset' has a wrong offset!");
static_assert(offsetof(FBiomesPCGMaskSource, MaskDataSource) == 0x000020, "Member 'FBiomesPCGMaskSource::MaskDataSource' has a wrong offset!");

// ScriptStruct ErrantBiomesPCG.BiomesPCGSpeciesPointsData
// 0x0030 (0x0030 - 0x0000)
struct FBiomesPCGSpeciesPointsData final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Indices;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                Assets;                                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesPCGSpeciesPointsData) == 0x000008, "Wrong alignment on FBiomesPCGSpeciesPointsData");
static_assert(sizeof(FBiomesPCGSpeciesPointsData) == 0x000030, "Wrong size on FBiomesPCGSpeciesPointsData");
static_assert(offsetof(FBiomesPCGSpeciesPointsData, Transforms) == 0x000000, "Member 'FBiomesPCGSpeciesPointsData::Transforms' has a wrong offset!");
static_assert(offsetof(FBiomesPCGSpeciesPointsData, Indices) == 0x000010, "Member 'FBiomesPCGSpeciesPointsData::Indices' has a wrong offset!");
static_assert(offsetof(FBiomesPCGSpeciesPointsData, Assets) == 0x000020, "Member 'FBiomesPCGSpeciesPointsData::Assets' has a wrong offset!");

}

