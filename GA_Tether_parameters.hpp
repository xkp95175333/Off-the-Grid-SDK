#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Tether

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "E_TetherLimbState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_Tether.GA_Tether_C.AttachTetherEnd
// 0x0018 (0x0018 - 0x0000)
struct GA_Tether_C_AttachTetherEnd final
{
public:
	class ABP_TetherEnd_C*                        TetherEnd;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NewParentActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_AttachTetherEnd) == 0x000008, "Wrong alignment on GA_Tether_C_AttachTetherEnd");
static_assert(sizeof(GA_Tether_C_AttachTetherEnd) == 0x000018, "Wrong size on GA_Tether_C_AttachTetherEnd");
static_assert(offsetof(GA_Tether_C_AttachTetherEnd, TetherEnd) == 0x000000, "Member 'GA_Tether_C_AttachTetherEnd::TetherEnd' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_AttachTetherEnd, NewParentActor) == 0x000008, "Member 'GA_Tether_C_AttachTetherEnd::NewParentActor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_AttachTetherEnd, CallFunc_K2_AttachToActor_ReturnValue) == 0x000010, "Member 'GA_Tether_C_AttachTetherEnd::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.Cleanup
// 0x001C (0x001C - 0x0000)
struct GA_Tether_C_Cleanup final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6431[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_Cleanup) == 0x000004, "Wrong alignment on GA_Tether_C_Cleanup");
static_assert(sizeof(GA_Tether_C_Cleanup) == 0x00001C, "Wrong size on GA_Tether_C_Cleanup");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_Tether_C_Cleanup::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_Tether_C_Cleanup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'GA_Tether_C_Cleanup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_IsValid_ReturnValue_1) == 0x000015, "Member 'GA_Tether_C_Cleanup::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_IsValid_ReturnValue_2) == 0x000016, "Member 'GA_Tether_C_Cleanup::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'GA_Tether_C_Cleanup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Cleanup, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'GA_Tether_C_Cleanup::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.ExecuteUbergraph_GA_Tether
// 0x0A20 (0x0A20 - 0x0000)
struct GA_Tether_C_ExecuteUbergraph_GA_Tether final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6432[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Time)>                   K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6433[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Time_1;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6434[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAT_WaitCustomInputPress*             CallFunc_WaitCustomInputPress_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6435[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6436[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data_1;                         // 0x0050(0x0028)(ConstParm)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable;                              // 0x0078(0x0028)()
	class UGzAT_ServerWaitForTargetData*          CallFunc_ServerWaitForClientTargetData_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6437[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultFromTargetData_ReturnValue;   // 0x00B0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data;                           // 0x01A8(0x0028)(ConstParm)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x01D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable_1;                            // 0x01E0(0x0028)()
	class UGzAT_ServerWaitForTargetData*          CallFunc_ServerWaitForClientTargetData_ReturnValue_1; // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6438[0x7];                                     // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultFromTargetData_ReturnValue_1; // 0x0218(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_CustomEvent_Time;                           // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Time)>                   K2Node_CreateDelegate_OutputDelegate_3;            // 0x0314(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzAT_WaitCustomInputPress*             CallFunc_WaitCustomInputPress_ReturnValue_1;       // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6439[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0334(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643A[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_1;                // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidateData_IsValid;                     // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643B[0x2];                                     // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0354(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643C[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_2;                // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     K2Node_MakeArray_Array;                            // 0x0370(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayAbilityTargetDataHandle       CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue; // 0x0380(0x0028)()
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643D[0x3];                                     // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x03AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643E[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_3;                // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     K2Node_MakeArray_Array_1;                          // 0x03C8(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayAbilityTargetDataHandle       CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue_1; // 0x03D8(0x0028)()
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidateData_IsValid_1;                   // 0x0401(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_643F[0x2];                                     // 0x0402(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x0404(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6440[0x4];                                     // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_4;                // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x0420(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6441[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectRemovalInfo             K2Node_CustomEvent_GameplayEffectRemovalInfo_1;    // 0x0438(0x0028)(ConstParm)
	struct FGameplayEffectRemovalInfo             K2Node_CustomEvent_GameplayEffectRemovalInfo;      // 0x0460(0x0028)(ConstParm)
	TDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> K2Node_CreateDelegate_OutputDelegate_9;            // 0x0488(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectRemovalInfo             Temp_struct_Variable_2;                            // 0x0498(0x0028)()
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_1;            // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x04C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Ready_for_Activation_IsReady;          // 0x04C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6442[0x4];                                     // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x04C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitInputPress*            CallFunc_WaitInputPress_ReturnValue;               // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6443[0x3];                                     // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_2;                              // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_2;            // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_3;            // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6444[0x2];                                     // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_TimeWaited;                     // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SpawnTetherLink_ReturnValue;              // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6445[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetFirstLocationData_LocationData;        // 0x04F8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void(float TimeWaited)>             K2Node_CreateDelegate_OutputDelegate_10;           // 0x05F0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6446[0x2];                                     // 0x0602(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6447[0x4];                                     // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0610(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0628(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0640(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0658(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0670(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0678(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0680(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6448[0x4];                                     // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x06A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetSecondLocationData_LocationData;       // 0x06D8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x07D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x07D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6449[0x2];                                     // 0x07D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644A[0x4];                                     // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x07E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x07F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0810(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0828(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0840(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0848(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0850(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0868(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x086C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644B[0x4];                                     // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0878(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0890(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x08A8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_11;           // 0x09A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_4;            // 0x09B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x09B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644C[0x6];                                     // 0x09B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x09B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x09C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_5;            // 0x09C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x09CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_6;            // 0x09CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644D[0x4];                                     // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_5;                // 0x09D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644E[0x3];                                     // 0x09D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            K2Node_CustomEvent_EffectHandle;                   // 0x09DC(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_7;            // 0x09E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644F[0x3];                                     // 0x09E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectRemoved* CallFunc_WaitForGameplayEffectRemoved_ReturnValue; // 0x09E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6450[0x7];                                     // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x09F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_TetherPreviewComponent_C*           K2Node_DynamicCast_AsBP_Tether_Preview_Component;  // 0x0A00(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0A09(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6451[0x2];                                     // 0x0A0A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_12;           // 0x0A0C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_ExecuteUbergraph_GA_Tether) == 0x000008, "Wrong alignment on GA_Tether_C_ExecuteUbergraph_GA_Tether");
static_assert(sizeof(GA_Tether_C_ExecuteUbergraph_GA_Tether) == 0x000A20, "Wrong size on GA_Tether_C_ExecuteUbergraph_GA_Tether");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, EntryPoint) == 0x000000, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue) == 0x000008, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_Time_1) == 0x000024, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_Time_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_real_Variable) == 0x000028, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitCustomInputPress_ReturnValue) == 0x000030, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitCustomInputPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_1) == 0x00003C, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_Data_1) == 0x000050, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_Data_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_struct_Variable) == 0x000078, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_ServerWaitForClientTargetData_ReturnValue) == 0x0000A0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_ServerWaitForClientTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_2) == 0x0000A8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_GetHitResultFromTargetData_ReturnValue) == 0x0000B0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_GetHitResultFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_Data) == 0x0001A8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_Data' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001D0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_struct_Variable_1) == 0x0001E0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_ServerWaitForClientTargetData_ReturnValue_1) == 0x000208, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_ServerWaitForClientTargetData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_3) == 0x000210, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_GetHitResultFromTargetData_ReturnValue_1) == 0x000218, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_GetHitResultFromTargetData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_Time) == 0x000310, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_3) == 0x000314, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_real_Variable_1) == 0x000324, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitCustomInputPress_ReturnValue_1) == 0x000328, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitCustomInputPress_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_4) == 0x000330, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_4) == 0x000334, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue_1) == 0x000348, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_ValidateData_IsValid) == 0x000350, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_ValidateData_IsValid' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_5) == 0x000351, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_5) == 0x000354, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue_2) == 0x000368, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_MakeArray_Array) == 0x000370, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue) == 0x000380, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_6) == 0x0003A8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_6) == 0x0003AC, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue_3) == 0x0003C0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_MakeArray_Array_1) == 0x0003C8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue_1) == 0x0003D8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_7) == 0x000400, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_ValidateData_IsValid_1) == 0x000401, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_ValidateData_IsValid_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_7) == 0x000404, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue_4) == 0x000418, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_8) == 0x000420, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_8) == 0x000430, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_GameplayEffectRemovalInfo_1) == 0x000438, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_GameplayEffectRemovalInfo_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_GameplayEffectRemovalInfo) == 0x000460, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_GameplayEffectRemovalInfo' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_9) == 0x000488, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_struct_Variable_2) == 0x000498, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue) == 0x0004C0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_1) == 0x0004C1, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_CommitAbility_ReturnValue) == 0x0004C2, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_Is_Ready_for_Activation_IsReady) == 0x0004C3, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_Is_Ready_for_Activation_IsReady' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x0004C8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitInputPress_ReturnValue) == 0x0004D0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitInputPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_Actor) == 0x0004D8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_9) == 0x0004E0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, Temp_real_Variable_2) == 0x0004E4, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_2) == 0x0004E8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_3) == 0x0004E9, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_TimeWaited) == 0x0004EC, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_TimeWaited' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_SpawnTetherLink_ReturnValue) == 0x0004F0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_SpawnTetherLink_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_GetFirstLocationData_LocationData) == 0x0004F8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_GetFirstLocationData_LocationData' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_10) == 0x0005F0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_bBlockingHit) == 0x000600, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_bInitialOverlap) == 0x000601, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Time) == 0x000604, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Distance) == 0x000608, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Location) == 0x000610, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ImpactPoint) == 0x000628, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Normal) == 0x000640, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ImpactNormal) == 0x000658, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_PhysMat) == 0x000670, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitActor) == 0x000678, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitComponent) == 0x000680, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitBoneName) == 0x000688, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_BoneName) == 0x000690, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitItem) == 0x000698, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ElementIndex) == 0x00069C, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_FaceIndex) == 0x0006A0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_TraceStart) == 0x0006A8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_TraceEnd) == 0x0006C0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_GetSecondLocationData_LocationData) == 0x0006D8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_GetSecondLocationData_LocationData' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0007D0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0007D1, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Time_1) == 0x0007D4, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Distance_1) == 0x0007D8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Location_1) == 0x0007E0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0007F8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_Normal_1) == 0x000810, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000828, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_PhysMat_1) == 0x000840, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitActor_1) == 0x000848, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitComponent_1) == 0x000850, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitBoneName_1) == 0x000858, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_BoneName_1) == 0x000860, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_HitItem_1) == 0x000868, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_ElementIndex_1) == 0x00086C, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_FaceIndex_1) == 0x000870, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_TraceStart_1) == 0x000878, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BreakHitResult_TraceEnd_1) == 0x000890, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_MakeHitResult_ReturnValue) == 0x0008A8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_11) == 0x0009A0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_4) == 0x0009B0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_Event_bWasCancelled) == 0x0009B1, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0009B8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0009C8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_5) == 0x0009C9, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_Not_PreBool_ReturnValue) == 0x0009CA, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_6) == 0x0009CB, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitNetSync_ReturnValue_5) == 0x0009D0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitNetSync_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_10) == 0x0009D8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CustomEvent_EffectHandle) == 0x0009DC, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CustomEvent_EffectHandle' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_K2_HasAuthority_ReturnValue_7) == 0x0009E4, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_K2_HasAuthority_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_WaitForGameplayEffectRemoved_ReturnValue) == 0x0009E8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_WaitForGameplayEffectRemoved_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_11) == 0x0009F0, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x0009F8, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_DynamicCast_AsBP_Tether_Preview_Component) == 0x000A00, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_DynamicCast_AsBP_Tether_Preview_Component' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_DynamicCast_bSuccess) == 0x000A08, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, CallFunc_IsValid_ReturnValue_12) == 0x000A09, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ExecuteUbergraph_GA_Tether, K2Node_CreateDelegate_OutputDelegate_12) == 0x000A0C, "Member 'GA_Tether_C_ExecuteUbergraph_GA_Tether::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3
// 0x0028 (0x0028 - 0x0000)
struct GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3 final
{
public:
	struct FGameplayEffectRemovalInfo             GameplayEffectRemovalInfo;                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3) == 0x000008, "Wrong alignment on GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3");
static_assert(sizeof(GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3) == 0x000028, "Wrong size on GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3");
static_assert(offsetof(GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3, GameplayEffectRemovalInfo) == 0x000000, "Member 'GA_Tether_C_InvalidHandle_44ECFADA4796A39F7F5D51BD0EC565A3::GameplayEffectRemovalInfo' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.Is Ready for Activation
// 0x0058 (0x0058 - 0x0000)
struct GA_Tether_C_Is_Ready_for_Activation final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6452[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromArray_ReturnValue; // 0x0020(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_Is_Ready_for_Activation) == 0x000008, "Wrong alignment on GA_Tether_C_Is_Ready_for_Activation");
static_assert(sizeof(GA_Tether_C_Is_Ready_for_Activation) == 0x000058, "Wrong size on GA_Tether_C_Is_Ready_for_Activation");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, IsReady) == 0x000000, "Member 'GA_Tether_C_Is_Ready_for_Activation::IsReady' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_Tether_C_Is_Ready_for_Activation::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, K2Node_MakeArray_Array) == 0x000010, "Member 'GA_Tether_C_Is_Ready_for_Activation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, CallFunc_MakeGameplayTagContainerFromArray_ReturnValue) == 0x000020, "Member 'GA_Tether_C_Is_Ready_for_Activation::CallFunc_MakeGameplayTagContainerFromArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000040, "Member 'GA_Tether_C_Is_Ready_for_Activation::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000050, "Member 'GA_Tether_C_Is_Ready_for_Activation::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_Is_Ready_for_Activation, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'GA_Tether_C_Is_Ready_for_Activation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.IsConnectionInRange
// 0x0110 (0x0110 - 0x0000)
struct GA_Tether_C_IsConnectionInRange final
{
public:
	struct FVector                                SecondLoc;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInRange;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6453[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6454[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6455[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_1;                     // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_IsConnectionInRange) == 0x000008, "Wrong alignment on GA_Tether_C_IsConnectionInRange");
static_assert(sizeof(GA_Tether_C_IsConnectionInRange) == 0x000110, "Wrong size on GA_Tether_C_IsConnectionInRange");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, SecondLoc) == 0x000000, "Member 'GA_Tether_C_IsConnectionInRange::SecondLoc' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, IsInRange) == 0x000018, "Member 'GA_Tether_C_IsConnectionInRange::IsInRange' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_bBlockingHit) == 0x000019, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_bInitialOverlap) == 0x00001A, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_Time) == 0x00001C, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_Distance) == 0x000020, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_Location) == 0x000028, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_ImpactPoint) == 0x000040, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_Normal) == 0x000058, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_ImpactNormal) == 0x000070, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_PhysMat) == 0x000088, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_HitActor) == 0x000090, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_HitComponent) == 0x000098, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_HitBoneName) == 0x0000A0, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_BoneName) == 0x0000A8, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_HitItem) == 0x0000B0, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_ElementIndex) == 0x0000B4, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_FaceIndex) == 0x0000B8, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_TraceStart) == 0x0000C0, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BreakHitResult_TraceEnd) == 0x0000D8, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_Square_ReturnValue) == 0x0000F0, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x0000F8, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_Square_ReturnValue_1) == 0x000100, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000108, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000109, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_IsConnectionInRange, CallFunc_BooleanAND_ReturnValue) == 0x00010A, "Member 'GA_Tether_C_IsConnectionInRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Tether_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Tether_C_K2_OnEndAbility");
static_assert(sizeof(GA_Tether_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Tether_C_K2_OnEndAbility");
static_assert(offsetof(GA_Tether_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Tether_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.OnFirstTetherDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GA_Tether_C_OnFirstTetherDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_OnFirstTetherDestroyed) == 0x000008, "Wrong alignment on GA_Tether_C_OnFirstTetherDestroyed");
static_assert(sizeof(GA_Tether_C_OnFirstTetherDestroyed) == 0x000008, "Wrong size on GA_Tether_C_OnFirstTetherDestroyed");
static_assert(offsetof(GA_Tether_C_OnFirstTetherDestroyed, Actor) == 0x000000, "Member 'GA_Tether_C_OnFirstTetherDestroyed::Actor' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.OnInput_D14B7F4C4D598791F38945977E2101BE
// 0x0004 (0x0004 - 0x0000)
struct GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE) == 0x000004, "Wrong alignment on GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE");
static_assert(sizeof(GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE) == 0x000004, "Wrong size on GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE");
static_assert(offsetof(GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE, Time) == 0x000000, "Member 'GA_Tether_C_OnInput_D14B7F4C4D598791F38945977E2101BE::Time' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.OnInput_E8D253064B776D67B7A1BC9EB2357C8D
// 0x0004 (0x0004 - 0x0000)
struct GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D) == 0x000004, "Wrong alignment on GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D");
static_assert(sizeof(GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D) == 0x000004, "Wrong size on GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D");
static_assert(offsetof(GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D, Time) == 0x000000, "Member 'GA_Tether_C_OnInput_E8D253064B776D67B7A1BC9EB2357C8D::Time' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.OnPress_F433E94F412BE92286AAC4A0BA0EE9F2
// 0x0004 (0x0004 - 0x0000)
struct GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2 final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2) == 0x000004, "Wrong alignment on GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2");
static_assert(sizeof(GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2) == 0x000004, "Wrong size on GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2");
static_assert(offsetof(GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2, TimeWaited) == 0x000000, "Member 'GA_Tether_C_OnPress_F433E94F412BE92286AAC4A0BA0EE9F2::TimeWaited' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3
// 0x0028 (0x0028 - 0x0000)
struct GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3 final
{
public:
	struct FGameplayEffectRemovalInfo             GameplayEffectRemovalInfo;                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3) == 0x000008, "Wrong alignment on GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3");
static_assert(sizeof(GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3) == 0x000028, "Wrong size on GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3");
static_assert(offsetof(GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3, GameplayEffectRemovalInfo) == 0x000000, "Member 'GA_Tether_C_OnRemoved_44ECFADA4796A39F7F5D51BD0EC565A3::GameplayEffectRemovalInfo' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.PlayClientFX
// 0x0110 (0x0110 - 0x0000)
struct GA_Tether_C_PlayClientFX final
{
public:
	EGzLimbType                                   Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6456[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6457[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLimbSocketWorldLocation_ReturnValue;   // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6458[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0090(0x0048)(ContainsInstancedReference)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_2; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULegacyCameraShake*                     CallFunc_StartLegacyCameraShake_ReturnValue;       // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventAtLocation_ReturnValue;          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_PlayClientFX) == 0x000008, "Wrong alignment on GA_Tether_C_PlayClientFX");
static_assert(sizeof(GA_Tether_C_PlayClientFX) == 0x000110, "Wrong size on GA_Tether_C_PlayClientFX");
static_assert(offsetof(GA_Tether_C_PlayClientFX, Temp_byte_Variable) == 0x000000, "Member 'GA_Tether_C_PlayClientFX::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, Temp_name_Variable) == 0x000004, "Member 'GA_Tether_C_PlayClientFX::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, Temp_name_Variable_1) == 0x00000C, "Member 'GA_Tether_C_PlayClientFX::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, Temp_name_Variable_2) == 0x000014, "Member 'GA_Tether_C_PlayClientFX::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, K2Node_Select_Default) == 0x00001C, "Member 'GA_Tether_C_PlayClientFX::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetLimbSocketWorldLocation_ReturnValue) == 0x000028, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetLimbSocketWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000040, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x000048, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetActorForwardVector_ReturnValue) == 0x000050, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000068, "Member 'GA_Tether_C_PlayClientFX::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'GA_Tether_C_PlayClientFX::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000078, "Member 'GA_Tether_C_PlayClientFX::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetActorInfo_ReturnValue) == 0x000090, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0000D8, "Member 'GA_Tether_C_PlayClientFX::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_2) == 0x0000E0, "Member 'GA_Tether_C_PlayClientFX::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E8, "Member 'GA_Tether_C_PlayClientFX::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_StartLegacyCameraShake_ReturnValue) == 0x000100, "Member 'GA_Tether_C_PlayClientFX::CallFunc_StartLegacyCameraShake_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_PlayClientFX, CallFunc_PostEventAtLocation_ReturnValue) == 0x000108, "Member 'GA_Tether_C_PlayClientFX::CallFunc_PostEventAtLocation_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.ReadAbilityConfig
// 0x0030 (0x0030 - 0x0000)
struct GA_Tether_C_ReadAbilityConfig final
{
public:
	class UGzBodyPartAbilityData*                 CallFunc_BP_GetAbilityData_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartAbilityData_Tether*          K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Tether; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6459[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_MaxLinkLength_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MinLinkLength_ImplicitCast;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxPlacementDistance_ImplicitCast; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_ReadAbilityConfig) == 0x000008, "Wrong alignment on GA_Tether_C_ReadAbilityConfig");
static_assert(sizeof(GA_Tether_C_ReadAbilityConfig) == 0x000030, "Wrong size on GA_Tether_C_ReadAbilityConfig");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, CallFunc_BP_GetAbilityData_ReturnValue) == 0x000000, "Member 'GA_Tether_C_ReadAbilityConfig::CallFunc_BP_GetAbilityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Tether) == 0x000008, "Member 'GA_Tether_C_ReadAbilityConfig::K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Tether' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'GA_Tether_C_ReadAbilityConfig::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, K2Node_VariableSet_MaxLinkLength_ImplicitCast) == 0x000018, "Member 'GA_Tether_C_ReadAbilityConfig::K2Node_VariableSet_MaxLinkLength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, K2Node_VariableSet_MinLinkLength_ImplicitCast) == 0x000020, "Member 'GA_Tether_C_ReadAbilityConfig::K2Node_VariableSet_MinLinkLength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ReadAbilityConfig, K2Node_VariableSet_MaxPlacementDistance_ImplicitCast) == 0x000028, "Member 'GA_Tether_C_ReadAbilityConfig::K2Node_VariableSet_MaxPlacementDistance_ImplicitCast' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.SetStateTags
// 0x00A8 (0x00A8 - 0x0000)
struct GA_Tether_C_SetStateTags final
{
public:
	E_TetherLimbState                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TetherLimbState                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_1;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645B[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue; // 0x0020(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue_1; // 0x0040(0x0020)()
	TArray<struct FGameplayTag>                   K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ConstParm, ReferenceParm)
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromArray_ReturnValue; // 0x0070(0x0020)()
	TSubclassOf<class UGameplayEffect>            K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645C[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x009C(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_SetStateTags) == 0x000008, "Wrong alignment on GA_Tether_C_SetStateTags");
static_assert(sizeof(GA_Tether_C_SetStateTags) == 0x0000A8, "Wrong size on GA_Tether_C_SetStateTags");
static_assert(offsetof(GA_Tether_C_SetStateTags, NewState) == 0x000000, "Member 'GA_Tether_C_SetStateTags::NewState' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, Temp_byte_Variable) == 0x000001, "Member 'GA_Tether_C_SetStateTags::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, Temp_class_Variable) == 0x000008, "Member 'GA_Tether_C_SetStateTags::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, Temp_class_Variable_1) == 0x000010, "Member 'GA_Tether_C_SetStateTags::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'GA_Tether_C_SetStateTags::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'GA_Tether_C_SetStateTags::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue) == 0x000020, "Member 'GA_Tether_C_SetStateTags::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue_1) == 0x000040, "Member 'GA_Tether_C_SetStateTags::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, K2Node_MakeArray_Array) == 0x000060, "Member 'GA_Tether_C_SetStateTags::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_MakeGameplayTagContainerFromArray_ReturnValue) == 0x000070, "Member 'GA_Tether_C_SetStateTags::CallFunc_MakeGameplayTagContainerFromArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, K2Node_Select_Default) == 0x000090, "Member 'GA_Tether_C_SetStateTags::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_K2_HasAuthority_ReturnValue) == 0x000098, "Member 'GA_Tether_C_SetStateTags::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SetStateTags, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x00009C, "Member 'GA_Tether_C_SetStateTags::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.SpawnTetherEnd
// 0x0290 (0x0290 - 0x0000)
struct GA_Tether_C_SpawnTetherEnd final
{
public:
	struct FHitResult                             TargetData;                                        // 0x0000(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645D[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645E[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_645F[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TetherEnd_C*                        K2Node_DynamicCast_AsBP_Tether_End;                // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6460[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzCharacter*                           CallFunc_GetOwningCharacter_ReturnValue;           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TetherEnd_C*                        K2Node_DynamicCast_AsBP_Tether_End_1;              // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6461[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0200(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6462[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0220(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TetherEnd_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_SpawnTetherEnd) == 0x000010, "Wrong alignment on GA_Tether_C_SpawnTetherEnd");
static_assert(sizeof(GA_Tether_C_SpawnTetherEnd) == 0x000290, "Wrong size on GA_Tether_C_SpawnTetherEnd");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, TargetData) == 0x000000, "Member 'GA_Tether_C_SpawnTetherEnd::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F8, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000F9, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_Location) == 0x000108, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_Normal) == 0x000138, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_BoneName) == 0x000188, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_ElementIndex) == 0x000194, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_FaceIndex) == 0x000198, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BreakHitResult_TraceEnd) == 0x0001B8, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, K2Node_DynamicCast_AsBP_Tether_End) == 0x0001D0, "Member 'GA_Tether_C_SpawnTetherEnd::K2Node_DynamicCast_AsBP_Tether_End' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, K2Node_DynamicCast_bSuccess) == 0x0001D8, "Member 'GA_Tether_C_SpawnTetherEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_IsValid_ReturnValue) == 0x0001D9, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_GetOwningCharacter_ReturnValue) == 0x0001E0, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_GetOwningCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, K2Node_DynamicCast_AsBP_Tether_End_1) == 0x0001E8, "Member 'GA_Tether_C_SpawnTetherEnd::K2Node_DynamicCast_AsBP_Tether_End_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'GA_Tether_C_SpawnTetherEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x0001F8, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, K2Node_CreateDelegate_OutputDelegate) == 0x000200, "Member 'GA_Tether_C_SpawnTetherEnd::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000210, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_GetTransform_ReturnValue) == 0x000220, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000280, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_SpawnTetherEnd, CallFunc_FinishSpawningActor_ReturnValue) == 0x000288, "Member 'GA_Tether_C_SpawnTetherEnd::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.ValidateData
// 0x03A0 (0x03A0 - 0x0000)
struct GA_Tether_C_ValidateData final
{
public:
	bool                                          IsFirstLocation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6463[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LocationData;                                      // 0x0008(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsValid;                                           // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6464[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6465[0x2];                                     // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6466[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6467[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6468[0x6];                                     // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConnectionInRange_IsInRange;            // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6469[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_646A[0x6];                                     // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Square_ReturnValue;                       // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_646B[0x1];                                     // 0x02AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_646C[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0328(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_646D[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_646E[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x039A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x039B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_ValidateData) == 0x000008, "Wrong alignment on GA_Tether_C_ValidateData");
static_assert(sizeof(GA_Tether_C_ValidateData) == 0x0003A0, "Wrong size on GA_Tether_C_ValidateData");
static_assert(offsetof(GA_Tether_C_ValidateData, IsFirstLocation) == 0x000000, "Member 'GA_Tether_C_ValidateData::IsFirstLocation' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, LocationData) == 0x000008, "Member 'GA_Tether_C_ValidateData::LocationData' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, IsValid) == 0x000100, "Member 'GA_Tether_C_ValidateData::IsValid' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000108, "Member 'GA_Tether_C_ValidateData::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_bBlockingHit) == 0x000110, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_bInitialOverlap) == 0x000111, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Time) == 0x000114, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Distance) == 0x000118, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Location) == 0x000120, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ImpactPoint) == 0x000138, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Normal) == 0x000150, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ImpactNormal) == 0x000168, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_PhysMat) == 0x000180, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitActor) == 0x000188, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitComponent) == 0x000190, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitBoneName) == 0x000198, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_BoneName) == 0x0001A0, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitItem) == 0x0001A8, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ElementIndex) == 0x0001AC, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_FaceIndex) == 0x0001B0, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_TraceStart) == 0x0001B8, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_TraceEnd) == 0x0001D0, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, K2Node_DynamicCast_AsPawn) == 0x0001E8, "Member 'GA_Tether_C_ValidateData::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'GA_Tether_C_ValidateData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_IsValid_ReturnValue) == 0x0001F1, "Member 'GA_Tether_C_ValidateData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001F8, "Member 'GA_Tether_C_ValidateData::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_GetControlRotation_ReturnValue) == 0x000210, "Member 'GA_Tether_C_ValidateData::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000228, "Member 'GA_Tether_C_ValidateData::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_GetForwardVector_ReturnValue) == 0x000240, "Member 'GA_Tether_C_ValidateData::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000258, "Member 'GA_Tether_C_ValidateData::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_IsConnectionInRange_IsInRange) == 0x000270, "Member 'GA_Tether_C_ValidateData::CallFunc_IsConnectionInRange_IsInRange' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Normal_ReturnValue) == 0x000278, "Member 'GA_Tether_C_ValidateData::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Dot_VectorVector_ReturnValue) == 0x000290, "Member 'GA_Tether_C_ValidateData::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000298, "Member 'GA_Tether_C_ValidateData::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BooleanAND_ReturnValue) == 0x000299, "Member 'GA_Tether_C_ValidateData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Square_ReturnValue) == 0x0002A0, "Member 'GA_Tether_C_ValidateData::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BooleanAND_ReturnValue_1) == 0x0002A8, "Member 'GA_Tether_C_ValidateData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002A9, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002AA, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Time_1) == 0x0002AC, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Distance_1) == 0x0002B0, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Location_1) == 0x0002B8, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0002D0, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_Normal_1) == 0x0002E8, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000300, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_PhysMat_1) == 0x000318, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitActor_1) == 0x000320, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitComponent_1) == 0x000328, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitBoneName_1) == 0x000330, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_BoneName_1) == 0x000338, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_HitItem_1) == 0x000340, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_ElementIndex_1) == 0x000344, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_FaceIndex_1) == 0x000348, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_TraceStart_1) == 0x000350, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BreakHitResult_TraceEnd_1) == 0x000368, "Member 'GA_Tether_C_ValidateData::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_IsValid_ReturnValue_1) == 0x000380, "Member 'GA_Tether_C_ValidateData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000388, "Member 'GA_Tether_C_ValidateData::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000390, "Member 'GA_Tether_C_ValidateData::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000398, "Member 'GA_Tether_C_ValidateData::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000399, "Member 'GA_Tether_C_ValidateData::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BooleanAND_ReturnValue_2) == 0x00039A, "Member 'GA_Tether_C_ValidateData::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Tether_C_ValidateData, CallFunc_BooleanAND_ReturnValue_3) == 0x00039B, "Member 'GA_Tether_C_ValidateData::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.ValidData_4968DB334667353756CA7AAF491F500E
// 0x0028 (0x0028 - 0x0000)
struct GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E) == 0x000008, "Wrong alignment on GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E");
static_assert(sizeof(GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E) == 0x000028, "Wrong size on GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E");
static_assert(offsetof(GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E, Data) == 0x000000, "Member 'GA_Tether_C_ValidData_4968DB334667353756CA7AAF491F500E::Data' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.ValidData_768E5ACD4202708381A696B7CA3A5A76
// 0x0028 (0x0028 - 0x0000)
struct GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76) == 0x000008, "Wrong alignment on GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76");
static_assert(sizeof(GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76) == 0x000028, "Wrong size on GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76");
static_assert(offsetof(GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76, Data) == 0x000000, "Member 'GA_Tether_C_ValidData_768E5ACD4202708381A696B7CA3A5A76::Data' has a wrong offset!");

// Function GA_Tether.GA_Tether_C.WaitForReloadTimeout
// 0x0008 (0x0008 - 0x0000)
struct GA_Tether_C_WaitForReloadTimeout final
{
public:
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Tether_C_WaitForReloadTimeout) == 0x000004, "Wrong alignment on GA_Tether_C_WaitForReloadTimeout");
static_assert(sizeof(GA_Tether_C_WaitForReloadTimeout) == 0x000008, "Wrong size on GA_Tether_C_WaitForReloadTimeout");
static_assert(offsetof(GA_Tether_C_WaitForReloadTimeout, EffectHandle) == 0x000000, "Member 'GA_Tether_C_WaitForReloadTimeout::EffectHandle' has a wrong offset!");

}

