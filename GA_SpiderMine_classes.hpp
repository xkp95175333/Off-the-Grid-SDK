#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpiderMine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_classes.hpp"
#include "E_TetherLimbState_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SpiderMine.GA_SpiderMine_C
// 0x0050 (0x0708 - 0x06B8)
class UGA_SpiderMine_C : public UGzGA_SpiderMine
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAbilityTask_WaitGameplayEffectRemoved* WaitForReloadTimeoutTask;                          // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_TetherLimbState                             TetherLimbState;                                   // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60D9[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StateTagShotFirstTether;                           // 0x06CC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTagShotBothTethers;                           // 0x06D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StateTagReloading;                                 // 0x06DC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60DA[0x4];                                     // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReloadingEffectClass;                              // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShotBothEffectClass;                               // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShotFirstEffectClass;                              // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShotFirst;                                         // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnGiveAbility();
	void ExecuteUbergraph_GA_SpiderMine(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void ReActivateAbility();
	class AGzSpiderMine* SpawnMine(const struct FTransform& Transform, const struct FGzSpiderMine_SpawnInfo& SpawnInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SpiderMine_C">();
	}
	static class UGA_SpiderMine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SpiderMine_C>();
	}
};
static_assert(alignof(UGA_SpiderMine_C) == 0x000008, "Wrong alignment on UGA_SpiderMine_C");
static_assert(sizeof(UGA_SpiderMine_C) == 0x000708, "Wrong size on UGA_SpiderMine_C");
static_assert(offsetof(UGA_SpiderMine_C, UberGraphFrame) == 0x0006B8, "Member 'UGA_SpiderMine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, WaitForReloadTimeoutTask) == 0x0006C0, "Member 'UGA_SpiderMine_C::WaitForReloadTimeoutTask' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, TetherLimbState) == 0x0006C8, "Member 'UGA_SpiderMine_C::TetherLimbState' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, StateTagShotFirstTether) == 0x0006CC, "Member 'UGA_SpiderMine_C::StateTagShotFirstTether' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, StateTagShotBothTethers) == 0x0006D4, "Member 'UGA_SpiderMine_C::StateTagShotBothTethers' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, StateTagReloading) == 0x0006DC, "Member 'UGA_SpiderMine_C::StateTagReloading' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, ReloadingEffectClass) == 0x0006E8, "Member 'UGA_SpiderMine_C::ReloadingEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, ShotBothEffectClass) == 0x0006F0, "Member 'UGA_SpiderMine_C::ShotBothEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, ShotFirstEffectClass) == 0x0006F8, "Member 'UGA_SpiderMine_C::ShotFirstEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_SpiderMine_C, ShotFirst) == 0x000700, "Member 'UGA_SpiderMine_C::ShotFirst' has a wrong offset!");

}

