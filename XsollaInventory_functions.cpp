#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaInventory

#include "Basic.hpp"

#include "XsollaInventory_classes.hpp"
#include "XsollaInventory_parameters.hpp"


namespace SDK
{

// Function XsollaInventory.XsollaInventorySubsystem.ConsumeInventoryItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InstanceId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EXsollaPublishingPlatform               Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::ConsumeInventoryItem(const class FString& AuthToken, const class FString& ItemSKU, const int32 Quantity, const class FString& InstanceId, const EXsollaPublishingPlatform Platform, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "ConsumeInventoryItem");

	Params::XsollaInventorySubsystem_ConsumeInventoryItem Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Quantity = Quantity;
	Parms.InstanceId = std::move(InstanceId);
	Parms.Platform = Platform;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.GetCouponRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CouponCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInventoryCouponRewardData& RewardsData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::GetCouponRewards(const class FString& AuthToken, const class FString& CouponCode, const TDelegate<void(const struct FInventoryCouponRewardData& RewardsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "GetCouponRewards");

	Params::XsollaInventorySubsystem_GetCouponRewards Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CouponCode = std::move(CouponCode);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.GetInventory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EXsollaPublishingPlatform               Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FInventoryItemsData& InventoryData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::GetInventory(const class FString& AuthToken, const EXsollaPublishingPlatform Platform, const TDelegate<void(struct FInventoryItemsData& InventoryData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "GetInventory");

	Params::XsollaInventorySubsystem_GetInventory Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Platform = Platform;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.GetTimeLimitedItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EXsollaPublishingPlatform               Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FTimeLimitedItemsData& TimeLimitedItemsData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::GetTimeLimitedItems(const class FString& AuthToken, const EXsollaPublishingPlatform Platform, const TDelegate<void(struct FTimeLimitedItemsData& TimeLimitedItemsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "GetTimeLimitedItems");

	Params::XsollaInventorySubsystem_GetTimeLimitedItems Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Platform = Platform;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.GetVirtualCurrencyBalance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EXsollaPublishingPlatform               Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrencyBalanceData& CurrencyBalanceData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::GetVirtualCurrencyBalance(const class FString& AuthToken, const EXsollaPublishingPlatform Platform, const TDelegate<void(struct FVirtualCurrencyBalanceData& CurrencyBalanceData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "GetVirtualCurrencyBalance");

	Params::XsollaInventorySubsystem_GetVirtualCurrencyBalance Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Platform = Platform;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InProjectId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::Initialize(const class FString& InProjectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "Initialize");

	Params::XsollaInventorySubsystem_Initialize Parms{};

	Parms.InProjectId = std::move(InProjectId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaInventory.XsollaInventorySubsystem.RedeemCoupon
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CouponCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInventoryRedeemedCouponData& RewardData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaInventorySubsystem::RedeemCoupon(const class FString& AuthToken, const class FString& CouponCode, const TDelegate<void(const struct FInventoryRedeemedCouponData& RewardData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaInventorySubsystem", "RedeemCoupon");

	Params::XsollaInventorySubsystem_RedeemCoupon Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CouponCode = std::move(CouponCode);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

