#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CineCameraRigs

#include "Basic.hpp"

#include "AnimationCore_structs.hpp"
#include "CineCameraRigs_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CineCameraRigs.CineCameraAttachMount.GetConstraint
// 0x0008 (0x0008 - 0x0000)
struct CineCameraAttachMount_GetConstraint final
{
public:
	class UTickableParentConstraint*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_GetConstraint) == 0x000008, "Wrong alignment on CineCameraAttachMount_GetConstraint");
static_assert(sizeof(CineCameraAttachMount_GetConstraint) == 0x000008, "Wrong size on CineCameraAttachMount_GetConstraint");
static_assert(offsetof(CineCameraAttachMount_GetConstraint, ReturnValue) == 0x000000, "Member 'CineCameraAttachMount_GetConstraint::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineCameraAttachMount.SetEnableLocationLag
// 0x0001 (0x0001 - 0x0000)
struct CineCameraAttachMount_SetEnableLocationLag final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_SetEnableLocationLag) == 0x000001, "Wrong alignment on CineCameraAttachMount_SetEnableLocationLag");
static_assert(sizeof(CineCameraAttachMount_SetEnableLocationLag) == 0x000001, "Wrong size on CineCameraAttachMount_SetEnableLocationLag");
static_assert(offsetof(CineCameraAttachMount_SetEnableLocationLag, bEnabled) == 0x000000, "Member 'CineCameraAttachMount_SetEnableLocationLag::bEnabled' has a wrong offset!");

// Function CineCameraRigs.CineCameraAttachMount.SetEnableRotationLag
// 0x0001 (0x0001 - 0x0000)
struct CineCameraAttachMount_SetEnableRotationLag final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_SetEnableRotationLag) == 0x000001, "Wrong alignment on CineCameraAttachMount_SetEnableRotationLag");
static_assert(sizeof(CineCameraAttachMount_SetEnableRotationLag) == 0x000001, "Wrong size on CineCameraAttachMount_SetEnableRotationLag");
static_assert(offsetof(CineCameraAttachMount_SetEnableRotationLag, bEnabled) == 0x000000, "Member 'CineCameraAttachMount_SetEnableRotationLag::bEnabled' has a wrong offset!");

// Function CineCameraRigs.CineCameraAttachMount.SetLocationLagSpeed
// 0x0004 (0x0004 - 0x0000)
struct CineCameraAttachMount_SetLocationLagSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_SetLocationLagSpeed) == 0x000004, "Wrong alignment on CineCameraAttachMount_SetLocationLagSpeed");
static_assert(sizeof(CineCameraAttachMount_SetLocationLagSpeed) == 0x000004, "Wrong size on CineCameraAttachMount_SetLocationLagSpeed");
static_assert(offsetof(CineCameraAttachMount_SetLocationLagSpeed, Speed) == 0x000000, "Member 'CineCameraAttachMount_SetLocationLagSpeed::Speed' has a wrong offset!");

// Function CineCameraRigs.CineCameraAttachMount.SetRotationLagSpeed
// 0x0004 (0x0004 - 0x0000)
struct CineCameraAttachMount_SetRotationLagSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_SetRotationLagSpeed) == 0x000004, "Wrong alignment on CineCameraAttachMount_SetRotationLagSpeed");
static_assert(sizeof(CineCameraAttachMount_SetRotationLagSpeed) == 0x000004, "Wrong size on CineCameraAttachMount_SetRotationLagSpeed");
static_assert(offsetof(CineCameraAttachMount_SetRotationLagSpeed, Speed) == 0x000000, "Member 'CineCameraAttachMount_SetRotationLagSpeed::Speed' has a wrong offset!");

// Function CineCameraRigs.CineCameraAttachMount.SetTransformFilter
// 0x0009 (0x0009 - 0x0000)
struct CineCameraAttachMount_SetTransformFilter final
{
public:
	struct FTransformFilter                       InFilter;                                          // 0x0000(0x0009)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraAttachMount_SetTransformFilter) == 0x000001, "Wrong alignment on CineCameraAttachMount_SetTransformFilter");
static_assert(sizeof(CineCameraAttachMount_SetTransformFilter) == 0x000009, "Wrong size on CineCameraAttachMount_SetTransformFilter");
static_assert(offsetof(CineCameraAttachMount_SetTransformFilter, InFilter) == 0x000000, "Member 'CineCameraAttachMount_SetTransformFilter::InFilter' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.IsSequencerDriven
// 0x0001 (0x0001 - 0x0000)
struct CineCameraRigRail_IsSequencerDriven final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_IsSequencerDriven) == 0x000001, "Wrong alignment on CineCameraRigRail_IsSequencerDriven");
static_assert(sizeof(CineCameraRigRail_IsSequencerDriven) == 0x000001, "Wrong size on CineCameraRigRail_IsSequencerDriven");
static_assert(offsetof(CineCameraRigRail_IsSequencerDriven, ReturnValue) == 0x000000, "Member 'CineCameraRigRail_IsSequencerDriven::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.SetDisplaySpeedHeatmap
// 0x0001 (0x0001 - 0x0000)
struct CineCameraRigRail_SetDisplaySpeedHeatmap final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_SetDisplaySpeedHeatmap) == 0x000001, "Wrong alignment on CineCameraRigRail_SetDisplaySpeedHeatmap");
static_assert(sizeof(CineCameraRigRail_SetDisplaySpeedHeatmap) == 0x000001, "Wrong size on CineCameraRigRail_SetDisplaySpeedHeatmap");
static_assert(offsetof(CineCameraRigRail_SetDisplaySpeedHeatmap, bEnable) == 0x000000, "Member 'CineCameraRigRail_SetDisplaySpeedHeatmap::bEnable' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.SetDriveMode
// 0x0001 (0x0001 - 0x0000)
struct CineCameraRigRail_SetDriveMode final
{
public:
	ECineCameraRigRailDriveMode                   InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_SetDriveMode) == 0x000001, "Wrong alignment on CineCameraRigRail_SetDriveMode");
static_assert(sizeof(CineCameraRigRail_SetDriveMode) == 0x000001, "Wrong size on CineCameraRigRail_SetDriveMode");
static_assert(offsetof(CineCameraRigRail_SetDriveMode, InMode) == 0x000000, "Member 'CineCameraRigRail_SetDriveMode::InMode' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.SetSplineMeshMaterial
// 0x0008 (0x0008 - 0x0000)
struct CineCameraRigRail_SetSplineMeshMaterial final
{
public:
	class UMaterialInterface*                     InMaterial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_SetSplineMeshMaterial) == 0x000008, "Wrong alignment on CineCameraRigRail_SetSplineMeshMaterial");
static_assert(sizeof(CineCameraRigRail_SetSplineMeshMaterial) == 0x000008, "Wrong size on CineCameraRigRail_SetSplineMeshMaterial");
static_assert(offsetof(CineCameraRigRail_SetSplineMeshMaterial, InMaterial) == 0x000000, "Member 'CineCameraRigRail_SetSplineMeshMaterial::InMaterial' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.SetSplineMeshTexture
// 0x0008 (0x0008 - 0x0000)
struct CineCameraRigRail_SetSplineMeshTexture final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_SetSplineMeshTexture) == 0x000008, "Wrong alignment on CineCameraRigRail_SetSplineMeshTexture");
static_assert(sizeof(CineCameraRigRail_SetSplineMeshTexture) == 0x000008, "Wrong size on CineCameraRigRail_SetSplineMeshTexture");
static_assert(offsetof(CineCameraRigRail_SetSplineMeshTexture, InTexture) == 0x000000, "Member 'CineCameraRigRail_SetSplineMeshTexture::InTexture' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.GetCineSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct CineCameraRigRail_GetCineSplineComponent final
{
public:
	class UCineSplineComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_GetCineSplineComponent) == 0x000008, "Wrong alignment on CineCameraRigRail_GetCineSplineComponent");
static_assert(sizeof(CineCameraRigRail_GetCineSplineComponent) == 0x000008, "Wrong size on CineCameraRigRail_GetCineSplineComponent");
static_assert(offsetof(CineCameraRigRail_GetCineSplineComponent, ReturnValue) == 0x000000, "Member 'CineCameraRigRail_GetCineSplineComponent::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRail.GetVelocityAtPosition
// 0x0020 (0x0020 - 0x0000)
struct CineCameraRigRail_GetVelocityAtPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineCameraRigRail_GetVelocityAtPosition) == 0x000008, "Wrong alignment on CineCameraRigRail_GetVelocityAtPosition");
static_assert(sizeof(CineCameraRigRail_GetVelocityAtPosition) == 0x000020, "Wrong size on CineCameraRigRail_GetVelocityAtPosition");
static_assert(offsetof(CineCameraRigRail_GetVelocityAtPosition, InPosition) == 0x000000, "Member 'CineCameraRigRail_GetVelocityAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(CineCameraRigRail_GetVelocityAtPosition, Delta) == 0x000004, "Member 'CineCameraRigRail_GetVelocityAtPosition::Delta' has a wrong offset!");
static_assert(offsetof(CineCameraRigRail_GetVelocityAtPosition, ReturnValue) == 0x000008, "Member 'CineCameraRigRail_GetVelocityAtPosition::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineCameraRigRailHelpers.CreateOrUpdateSplineHeatmapTexture
// 0x0028 (0x0028 - 0x0000)
struct CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DataValues;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         LowValue;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageValue;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighValue;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4795[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture) == 0x000008, "Wrong alignment on CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture");
static_assert(sizeof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture) == 0x000028, "Wrong size on CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture");
static_assert(offsetof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture, Texture) == 0x000000, "Member 'CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture::Texture' has a wrong offset!");
static_assert(offsetof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture, DataValues) == 0x000008, "Member 'CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture::DataValues' has a wrong offset!");
static_assert(offsetof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture, LowValue) == 0x000018, "Member 'CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture::LowValue' has a wrong offset!");
static_assert(offsetof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture, AverageValue) == 0x00001C, "Member 'CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture::AverageValue' has a wrong offset!");
static_assert(offsetof(CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture, HighValue) == 0x000020, "Member 'CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture::HighValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.AddSplineDataAtPosition
// 0x0048 (0x0048 - 0x0000)
struct CineSplineComponent_AddSplineDataAtPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4797[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCineSplinePointData                   InPointData;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_AddSplineDataAtPosition) == 0x000008, "Wrong alignment on CineSplineComponent_AddSplineDataAtPosition");
static_assert(sizeof(CineSplineComponent_AddSplineDataAtPosition) == 0x000048, "Wrong size on CineSplineComponent_AddSplineDataAtPosition");
static_assert(offsetof(CineSplineComponent_AddSplineDataAtPosition, InPosition) == 0x000000, "Member 'CineSplineComponent_AddSplineDataAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_AddSplineDataAtPosition, InPointData) == 0x000008, "Member 'CineSplineComponent_AddSplineDataAtPosition::InPointData' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.SetAbsolutePositionAtSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_SetAbsolutePositionAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_SetAbsolutePositionAtSplinePoint) == 0x000004, "Wrong alignment on CineSplineComponent_SetAbsolutePositionAtSplinePoint");
static_assert(sizeof(CineSplineComponent_SetAbsolutePositionAtSplinePoint) == 0x000008, "Wrong size on CineSplineComponent_SetAbsolutePositionAtSplinePoint");
static_assert(offsetof(CineSplineComponent_SetAbsolutePositionAtSplinePoint, PointIndex) == 0x000000, "Member 'CineSplineComponent_SetAbsolutePositionAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_SetAbsolutePositionAtSplinePoint, Value) == 0x000004, "Member 'CineSplineComponent_SetAbsolutePositionAtSplinePoint::Value' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.SetApertureAtSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_SetApertureAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_SetApertureAtSplinePoint) == 0x000004, "Wrong alignment on CineSplineComponent_SetApertureAtSplinePoint");
static_assert(sizeof(CineSplineComponent_SetApertureAtSplinePoint) == 0x000008, "Wrong size on CineSplineComponent_SetApertureAtSplinePoint");
static_assert(offsetof(CineSplineComponent_SetApertureAtSplinePoint, PointIndex) == 0x000000, "Member 'CineSplineComponent_SetApertureAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_SetApertureAtSplinePoint, Value) == 0x000004, "Member 'CineSplineComponent_SetApertureAtSplinePoint::Value' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.SetFocalLengthAtSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_SetFocalLengthAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_SetFocalLengthAtSplinePoint) == 0x000004, "Wrong alignment on CineSplineComponent_SetFocalLengthAtSplinePoint");
static_assert(sizeof(CineSplineComponent_SetFocalLengthAtSplinePoint) == 0x000008, "Wrong size on CineSplineComponent_SetFocalLengthAtSplinePoint");
static_assert(offsetof(CineSplineComponent_SetFocalLengthAtSplinePoint, PointIndex) == 0x000000, "Member 'CineSplineComponent_SetFocalLengthAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_SetFocalLengthAtSplinePoint, Value) == 0x000004, "Member 'CineSplineComponent_SetFocalLengthAtSplinePoint::Value' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.SetFocusDistanceAtSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_SetFocusDistanceAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_SetFocusDistanceAtSplinePoint) == 0x000004, "Wrong alignment on CineSplineComponent_SetFocusDistanceAtSplinePoint");
static_assert(sizeof(CineSplineComponent_SetFocusDistanceAtSplinePoint) == 0x000008, "Wrong size on CineSplineComponent_SetFocusDistanceAtSplinePoint");
static_assert(offsetof(CineSplineComponent_SetFocusDistanceAtSplinePoint, PointIndex) == 0x000000, "Member 'CineSplineComponent_SetFocusDistanceAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_SetFocusDistanceAtSplinePoint, Value) == 0x000004, "Member 'CineSplineComponent_SetFocusDistanceAtSplinePoint::Value' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.SetPointRotationAtSplinePoint
// 0x0030 (0x0030 - 0x0000)
struct CineSplineComponent_SetPointRotationAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4798[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_SetPointRotationAtSplinePoint) == 0x000010, "Wrong alignment on CineSplineComponent_SetPointRotationAtSplinePoint");
static_assert(sizeof(CineSplineComponent_SetPointRotationAtSplinePoint) == 0x000030, "Wrong size on CineSplineComponent_SetPointRotationAtSplinePoint");
static_assert(offsetof(CineSplineComponent_SetPointRotationAtSplinePoint, PointIndex) == 0x000000, "Member 'CineSplineComponent_SetPointRotationAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_SetPointRotationAtSplinePoint, Value) == 0x000010, "Member 'CineSplineComponent_SetPointRotationAtSplinePoint::Value' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.UpdateSplineDataAtIndex
// 0x0048 (0x0048 - 0x0000)
struct CineSplineComponent_UpdateSplineDataAtIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4799[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCineSplinePointData                   InPointData;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_UpdateSplineDataAtIndex) == 0x000008, "Wrong alignment on CineSplineComponent_UpdateSplineDataAtIndex");
static_assert(sizeof(CineSplineComponent_UpdateSplineDataAtIndex) == 0x000048, "Wrong size on CineSplineComponent_UpdateSplineDataAtIndex");
static_assert(offsetof(CineSplineComponent_UpdateSplineDataAtIndex, InIndex) == 0x000000, "Member 'CineSplineComponent_UpdateSplineDataAtIndex::InIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_UpdateSplineDataAtIndex, InPointData) == 0x000008, "Member 'CineSplineComponent_UpdateSplineDataAtIndex::InPointData' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.FindSplineDataAtPosition
// 0x0010 (0x0010 - 0x0000)
struct CineSplineComponent_FindSplineDataAtPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479A[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CineSplineComponent_FindSplineDataAtPosition) == 0x000004, "Wrong alignment on CineSplineComponent_FindSplineDataAtPosition");
static_assert(sizeof(CineSplineComponent_FindSplineDataAtPosition) == 0x000010, "Wrong size on CineSplineComponent_FindSplineDataAtPosition");
static_assert(offsetof(CineSplineComponent_FindSplineDataAtPosition, InPosition) == 0x000000, "Member 'CineSplineComponent_FindSplineDataAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_FindSplineDataAtPosition, OutIndex) == 0x000004, "Member 'CineSplineComponent_FindSplineDataAtPosition::OutIndex' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_FindSplineDataAtPosition, Tolerance) == 0x000008, "Member 'CineSplineComponent_FindSplineDataAtPosition::Tolerance' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_FindSplineDataAtPosition, ReturnValue) == 0x00000C, "Member 'CineSplineComponent_FindSplineDataAtPosition::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.GetInputKeyAtPosition
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_GetInputKeyAtPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_GetInputKeyAtPosition) == 0x000004, "Wrong alignment on CineSplineComponent_GetInputKeyAtPosition");
static_assert(sizeof(CineSplineComponent_GetInputKeyAtPosition) == 0x000008, "Wrong size on CineSplineComponent_GetInputKeyAtPosition");
static_assert(offsetof(CineSplineComponent_GetInputKeyAtPosition, InPosition) == 0x000000, "Member 'CineSplineComponent_GetInputKeyAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_GetInputKeyAtPosition, ReturnValue) == 0x000004, "Member 'CineSplineComponent_GetInputKeyAtPosition::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.GetPointRotationAtSplineInputKey
// 0x0030 (0x0030 - 0x0000)
struct CineSplineComponent_GetPointRotationAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479B[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_GetPointRotationAtSplineInputKey) == 0x000010, "Wrong alignment on CineSplineComponent_GetPointRotationAtSplineInputKey");
static_assert(sizeof(CineSplineComponent_GetPointRotationAtSplineInputKey) == 0x000030, "Wrong size on CineSplineComponent_GetPointRotationAtSplineInputKey");
static_assert(offsetof(CineSplineComponent_GetPointRotationAtSplineInputKey, InKey) == 0x000000, "Member 'CineSplineComponent_GetPointRotationAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_GetPointRotationAtSplineInputKey, ReturnValue) == 0x000010, "Member 'CineSplineComponent_GetPointRotationAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.GetPointRotationAtSplinePoint
// 0x0030 (0x0030 - 0x0000)
struct CineSplineComponent_GetPointRotationAtSplinePoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479C[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_GetPointRotationAtSplinePoint) == 0x000010, "Wrong alignment on CineSplineComponent_GetPointRotationAtSplinePoint");
static_assert(sizeof(CineSplineComponent_GetPointRotationAtSplinePoint) == 0x000030, "Wrong size on CineSplineComponent_GetPointRotationAtSplinePoint");
static_assert(offsetof(CineSplineComponent_GetPointRotationAtSplinePoint, Param_Index) == 0x000000, "Member 'CineSplineComponent_GetPointRotationAtSplinePoint::Param_Index' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_GetPointRotationAtSplinePoint, ReturnValue) == 0x000010, "Member 'CineSplineComponent_GetPointRotationAtSplinePoint::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.GetPositionAtInputKey
// 0x0008 (0x0008 - 0x0000)
struct CineSplineComponent_GetPositionAtInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_GetPositionAtInputKey) == 0x000004, "Wrong alignment on CineSplineComponent_GetPositionAtInputKey");
static_assert(sizeof(CineSplineComponent_GetPositionAtInputKey) == 0x000008, "Wrong size on CineSplineComponent_GetPositionAtInputKey");
static_assert(offsetof(CineSplineComponent_GetPositionAtInputKey, InKey) == 0x000000, "Member 'CineSplineComponent_GetPositionAtInputKey::InKey' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_GetPositionAtInputKey, ReturnValue) == 0x000004, "Member 'CineSplineComponent_GetPositionAtInputKey::ReturnValue' has a wrong offset!");

// Function CineCameraRigs.CineSplineComponent.GetSplineDataAtPosition
// 0x0048 (0x0048 - 0x0000)
struct CineSplineComponent_GetSplineDataAtPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCineSplinePointData                   ReturnValue;                                       // 0x0008(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CineSplineComponent_GetSplineDataAtPosition) == 0x000008, "Wrong alignment on CineSplineComponent_GetSplineDataAtPosition");
static_assert(sizeof(CineSplineComponent_GetSplineDataAtPosition) == 0x000048, "Wrong size on CineSplineComponent_GetSplineDataAtPosition");
static_assert(offsetof(CineSplineComponent_GetSplineDataAtPosition, InPosition) == 0x000000, "Member 'CineSplineComponent_GetSplineDataAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(CineSplineComponent_GetSplineDataAtPosition, ReturnValue) == 0x000008, "Member 'CineSplineComponent_GetSplineDataAtPosition::ReturnValue' has a wrong offset!");

}

