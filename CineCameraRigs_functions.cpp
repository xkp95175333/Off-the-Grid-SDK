#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CineCameraRigs

#include "Basic.hpp"

#include "CineCameraRigs_classes.hpp"
#include "CineCameraRigs_parameters.hpp"


namespace SDK
{

// Function CineCameraRigs.CineCameraAttachMount.GetConstraint
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTickableParentConstraint*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTickableParentConstraint* ACineCameraAttachMount::GetConstraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "GetConstraint");

	Params::CineCameraAttachMount_GetConstraint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineCameraAttachMount.ResetLocationOffset
// (Final, Native, Public, BlueprintCallable)

void ACineCameraAttachMount::ResetLocationOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "ResetLocationOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.ResetRotationOffset
// (Final, Native, Public, BlueprintCallable)

void ACineCameraAttachMount::ResetRotationOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "ResetRotationOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.SetEnableLocationLag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraAttachMount::SetEnableLocationLag(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "SetEnableLocationLag");

	Params::CineCameraAttachMount_SetEnableLocationLag Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.SetEnableRotationLag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraAttachMount::SetEnableRotationLag(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "SetEnableRotationLag");

	Params::CineCameraAttachMount_SetEnableRotationLag Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.SetLocationLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraAttachMount::SetLocationLagSpeed(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "SetLocationLagSpeed");

	Params::CineCameraAttachMount_SetLocationLagSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.SetRotationLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraAttachMount::SetRotationLagSpeed(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "SetRotationLagSpeed");

	Params::CineCameraAttachMount_SetRotationLagSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.SetTransformFilter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTransformFilter                 InFilter                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACineCameraAttachMount::SetTransformFilter(const struct FTransformFilter& InFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "SetTransformFilter");

	Params::CineCameraAttachMount_SetTransformFilter Parms{};

	Parms.InFilter = std::move(InFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.ZeroRoll
// (Final, Native, Public, BlueprintCallable)

void ACineCameraAttachMount::ZeroRoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "ZeroRoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraAttachMount.ZeroTilt
// (Final, Native, Public, BlueprintCallable)

void ACineCameraAttachMount::ZeroTilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraAttachMount", "ZeroTilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraRigRail.IsSequencerDriven
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACineCameraRigRail::IsSequencerDriven()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "IsSequencerDriven");

	Params::CineCameraRigRail_IsSequencerDriven Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineCameraRigRail.SetDisplaySpeedHeatmap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraRigRail::SetDisplaySpeedHeatmap(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "SetDisplaySpeedHeatmap");

	Params::CineCameraRigRail_SetDisplaySpeedHeatmap Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraRigRail.SetDriveMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECineCameraRigRailDriveMode             InMode                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraRigRail::SetDriveMode(ECineCameraRigRailDriveMode InMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "SetDriveMode");

	Params::CineCameraRigRail_SetDriveMode Parms{};

	Parms.InMode = InMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraRigRail.SetSplineMeshMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               InMaterial                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraRigRail::SetSplineMeshMaterial(class UMaterialInterface* InMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "SetSplineMeshMaterial");

	Params::CineCameraRigRail_SetSplineMeshMaterial Parms{};

	Parms.InMaterial = InMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraRigRail.SetSplineMeshTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       InTexture                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACineCameraRigRail::SetSplineMeshTexture(class UTexture2D* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "SetSplineMeshTexture");

	Params::CineCameraRigRail_SetSplineMeshTexture Parms{};

	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineCameraRigRail.GetCineSplineComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCineSplineComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCineSplineComponent* ACineCameraRigRail::GetCineSplineComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "GetCineSplineComponent");

	Params::CineCameraRigRail_GetCineSplineComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineCameraRigRail.GetVelocityAtPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delta                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ACineCameraRigRail::GetVelocityAtPosition(const float InPosition, const float Delta) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineCameraRigRail", "GetVelocityAtPosition");

	Params::CineCameraRigRail_GetVelocityAtPosition Parms{};

	Parms.InPosition = InPosition;
	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineCameraRigRailHelpers.CreateOrUpdateSplineHeatmapTexture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           DataValues                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   LowValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AverageValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HighValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineCameraRigRailHelpers::CreateOrUpdateSplineHeatmapTexture(class UTexture2D*& Texture, const TArray<float>& DataValues, const float LowValue, const float AverageValue, const float HighValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CineCameraRigRailHelpers", "CreateOrUpdateSplineHeatmapTexture");

	Params::CineCameraRigRailHelpers_CreateOrUpdateSplineHeatmapTexture Parms{};

	Parms.Texture = Texture;
	Parms.DataValues = std::move(DataValues);
	Parms.LowValue = LowValue;
	Parms.AverageValue = AverageValue;
	Parms.HighValue = HighValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Texture = Parms.Texture;
}


// Function CineCameraRigs.CineSplineComponent.AddSplineDataAtPosition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   InPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCineSplinePointData             InPointData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCineSplineComponent::AddSplineDataAtPosition(const float InPosition, const struct FCineSplinePointData& InPointData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "AddSplineDataAtPosition");

	Params::CineSplineComponent_AddSplineDataAtPosition Parms{};

	Parms.InPosition = InPosition;
	Parms.InPointData = std::move(InPointData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction CineCameraRigs.CineSplineComponent.OnSplineEdited_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UCineSplineComponent::OnSplineEdited_BP__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "OnSplineEdited_BP__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CineCameraRigs.CineSplineComponent.SetAbsolutePositionAtSplinePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineSplineComponent::SetAbsolutePositionAtSplinePoint(const int32 PointIndex, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "SetAbsolutePositionAtSplinePoint");

	Params::CineSplineComponent_SetAbsolutePositionAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.SetApertureAtSplinePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineSplineComponent::SetApertureAtSplinePoint(const int32 PointIndex, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "SetApertureAtSplinePoint");

	Params::CineSplineComponent_SetApertureAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.SetFocalLengthAtSplinePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineSplineComponent::SetFocalLengthAtSplinePoint(const int32 PointIndex, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "SetFocalLengthAtSplinePoint");

	Params::CineSplineComponent_SetFocalLengthAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.SetFocusDistanceAtSplinePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineSplineComponent::SetFocusDistanceAtSplinePoint(const int32 PointIndex, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "SetFocusDistanceAtSplinePoint");

	Params::CineSplineComponent_SetFocusDistanceAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.SetPointRotationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            Value                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCineSplineComponent::SetPointRotationAtSplinePoint(const int32 PointIndex, const struct FQuat& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "SetPointRotationAtSplinePoint");

	Params::CineSplineComponent_SetPointRotationAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.UpdateSplineDataAtIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCineSplinePointData             InPointData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCineSplineComponent::UpdateSplineDataAtIndex(const int32 InIndex, const struct FCineSplinePointData& InPointData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "UpdateSplineDataAtIndex");

	Params::CineSplineComponent_UpdateSplineDataAtIndex Parms{};

	Parms.InIndex = InIndex;
	Parms.InPointData = std::move(InPointData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CineCameraRigs.CineSplineComponent.FindSplineDataAtPosition
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCineSplineComponent::FindSplineDataAtPosition(const float InPosition, int32* OutIndex, const float Tolerance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "FindSplineDataAtPosition");

	Params::CineSplineComponent_FindSplineDataAtPosition Parms{};

	Parms.InPosition = InPosition;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndex != nullptr)
		*OutIndex = Parms.OutIndex;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineSplineComponent.GetInputKeyAtPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCineSplineComponent::GetInputKeyAtPosition(const float InPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "GetInputKeyAtPosition");

	Params::CineSplineComponent_GetInputKeyAtPosition Parms{};

	Parms.InPosition = InPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineSplineComponent.GetPointRotationAtSplineInputKey
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InKey                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UCineSplineComponent::GetPointRotationAtSplineInputKey(float InKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "GetPointRotationAtSplineInputKey");

	Params::CineSplineComponent_GetPointRotationAtSplineInputKey Parms{};

	Parms.InKey = InKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineSplineComponent.GetPointRotationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UCineSplineComponent::GetPointRotationAtSplinePoint(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "GetPointRotationAtSplinePoint");

	Params::CineSplineComponent_GetPointRotationAtSplinePoint Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineSplineComponent.GetPositionAtInputKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InKey                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCineSplineComponent::GetPositionAtInputKey(const float InKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "GetPositionAtInputKey");

	Params::CineSplineComponent_GetPositionAtInputKey Parms{};

	Parms.InKey = InKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CineCameraRigs.CineSplineComponent.GetSplineDataAtPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCineSplinePointData             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCineSplinePointData UCineSplineComponent::GetSplineDataAtPosition(const float InPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CineSplineComponent", "GetSplineDataAtPosition");

	Params::CineSplineComponent_GetSplineDataAtPosition Parms{};

	Parms.InPosition = InPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

