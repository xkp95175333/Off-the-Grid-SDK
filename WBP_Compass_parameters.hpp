#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Compass

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_Compass.WBP_Compass_C.ExecuteUbergraph_WBP_Compass
// 0x0068 (0x0068 - 0x0000)
struct WBP_Compass_C_ExecuteUbergraph_WBP_Compass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8A[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzPlayerMarkersHolderComponent*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8B[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass) == 0x000008, "Wrong alignment on WBP_Compass_C_ExecuteUbergraph_WBP_Compass");
static_assert(sizeof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass) == 0x000068, "Wrong size on WBP_Compass_C_ExecuteUbergraph_WBP_Compass");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, EntryPoint) == 0x000000, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, CallFunc_GetOwningPlayer_ReturnValue) == 0x000040, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, K2Node_Event_IsDesignTime) == 0x000048, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, CallFunc_GetComponentByClass_ReturnValue) == 0x000050, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_ExecuteUbergraph_WBP_Compass, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000060, "Member 'WBP_Compass_C_ExecuteUbergraph_WBP_Compass::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.GetCompassScrollPosition
// 0x0050 (0x0050 - 0x0000)
struct WBP_Compass_C_GetCompassScrollPosition final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWidgetPixelToAngleRatio_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_GetCompassScrollPosition) == 0x000008, "Wrong alignment on WBP_Compass_C_GetCompassScrollPosition");
static_assert(sizeof(WBP_Compass_C_GetCompassScrollPosition) == 0x000050, "Wrong size on WBP_Compass_C_GetCompassScrollPosition");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, A) == 0x000000, "Member 'WBP_Compass_C_GetCompassScrollPosition::A' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, ReturnValue) == 0x000008, "Member 'WBP_Compass_C_GetCompassScrollPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_GetWidgetPixelToAngleRatio_ReturnValue) == 0x000010, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_GetWidgetPixelToAngleRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassScrollPosition, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'WBP_Compass_C_GetCompassScrollPosition::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.GetCompassSpacePosition
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_Compass_C_GetCompassSpacePosition final
{
public:
	struct FVector                                ViewDirection;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     MarkerComp;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWidgetPixelToAngleRatio_ReturnValue;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetViewTarget_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8C[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSignedAngle_ReturnValue;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8D[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RadiansToDegrees_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RadiansToDegrees_A_ImplicitCast;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_GetCompassSpacePosition) == 0x000008, "Wrong alignment on WBP_Compass_C_GetCompassSpacePosition");
static_assert(sizeof(WBP_Compass_C_GetCompassSpacePosition) == 0x0000E0, "Wrong size on WBP_Compass_C_GetCompassSpacePosition");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, ViewDirection) == 0x000000, "Member 'WBP_Compass_C_GetCompassSpacePosition::ViewDirection' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, MarkerComp) == 0x000018, "Member 'WBP_Compass_C_GetCompassSpacePosition::MarkerComp' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, ReturnValue) == 0x000020, "Member 'WBP_Compass_C_GetCompassSpacePosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_GetWidgetPixelToAngleRatio_ReturnValue) == 0x000028, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_GetWidgetPixelToAngleRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000048, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_GetViewTarget_ReturnValue) == 0x000058, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000068, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x0000A0, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_GetSignedAngle_ReturnValue) == 0x0000B0, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_GetSignedAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_RadiansToDegrees_ReturnValue) == 0x0000B8, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_RadiansToDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000D0, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetCompassSpacePosition, CallFunc_RadiansToDegrees_A_ImplicitCast) == 0x0000D8, "Member 'WBP_Compass_C_GetCompassSpacePosition::CallFunc_RadiansToDegrees_A_ImplicitCast' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.GetViewTargetCamera
// 0x0018 (0x0018 - 0x0000)
struct WBP_Compass_C_GetViewTargetCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetViewTarget_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_GetViewTargetCamera) == 0x000008, "Wrong alignment on WBP_Compass_C_GetViewTargetCamera");
static_assert(sizeof(WBP_Compass_C_GetViewTargetCamera) == 0x000018, "Wrong size on WBP_Compass_C_GetViewTargetCamera");
static_assert(offsetof(WBP_Compass_C_GetViewTargetCamera, ReturnValue) == 0x000000, "Member 'WBP_Compass_C_GetViewTargetCamera::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetViewTargetCamera, CallFunc_GetViewTarget_ReturnValue) == 0x000008, "Member 'WBP_Compass_C_GetViewTargetCamera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetViewTargetCamera, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'WBP_Compass_C_GetViewTargetCamera::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.GetWidgetPixelToAngleRatio
// 0x0068 (0x0068 - 0x0000)
struct WBP_Compass_C_GetWidgetPixelToAngleRatio final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0008(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_GetWidgetPixelToAngleRatio) == 0x000008, "Wrong alignment on WBP_Compass_C_GetWidgetPixelToAngleRatio");
static_assert(sizeof(WBP_Compass_C_GetWidgetPixelToAngleRatio) == 0x000068, "Wrong size on WBP_Compass_C_GetWidgetPixelToAngleRatio");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, ReturnValue) == 0x000000, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, CallFunc_GetCachedGeometry_ReturnValue) == 0x000008, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, CallFunc_GetLocalSize_ReturnValue) == 0x000040, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, CallFunc_BreakVector2D_X) == 0x000050, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, CallFunc_BreakVector2D_Y) == 0x000058, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_GetWidgetPixelToAngleRatio, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'WBP_Compass_C_GetWidgetPixelToAngleRatio::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Compass_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Compass_C_PreConstruct");
static_assert(sizeof(WBP_Compass_C_PreConstruct) == 0x000001, "Wrong size on WBP_Compass_C_PreConstruct");
static_assert(offsetof(WBP_Compass_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Compass_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Compass_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_Tick) == 0x000004, "Wrong alignment on WBP_Compass_C_Tick");
static_assert(sizeof(WBP_Compass_C_Tick) == 0x00003C, "Wrong size on WBP_Compass_C_Tick");
static_assert(offsetof(WBP_Compass_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Compass_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Compass_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Compass.WBP_Compass_C.Update Compass
// 0x0058 (0x0058 - 0x0000)
struct WBP_Compass_C_Update_Compass final
{
public:
	float                                         CurrentAzimuth;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetOwningPlayerCameraManager_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_WorldRotationToAzimuth_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D90[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_FFloor64_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_Int64ToText_ReturnValue;             // 0x0040(0x0010)()
	double                                        CallFunc_FFloor64_A_ImplicitCast;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_C_Update_Compass) == 0x000008, "Wrong alignment on WBP_Compass_C_Update_Compass");
static_assert(sizeof(WBP_Compass_C_Update_Compass) == 0x000058, "Wrong size on WBP_Compass_C_Update_Compass");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CurrentAzimuth) == 0x000000, "Member 'WBP_Compass_C_Update_Compass::CurrentAzimuth' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_GetOwningPlayerCameraManager_ReturnValue) == 0x000008, "Member 'WBP_Compass_C_Update_Compass::CallFunc_GetOwningPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Compass_C_Update_Compass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_GetCameraRotation_ReturnValue) == 0x000018, "Member 'WBP_Compass_C_Update_Compass::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_WorldRotationToAzimuth_ReturnValue) == 0x000030, "Member 'WBP_Compass_C_Update_Compass::CallFunc_WorldRotationToAzimuth_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_FFloor64_ReturnValue) == 0x000038, "Member 'WBP_Compass_C_Update_Compass::CallFunc_FFloor64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_Conv_Int64ToText_ReturnValue) == 0x000040, "Member 'WBP_Compass_C_Update_Compass::CallFunc_Conv_Int64ToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_C_Update_Compass, CallFunc_FFloor64_A_ImplicitCast) == 0x000050, "Member 'WBP_Compass_C_Update_Compass::CallFunc_FFloor64_A_ImplicitCast' has a wrong offset!");

}

