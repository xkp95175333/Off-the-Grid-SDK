#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCamCore

#include "Basic.hpp"

#include "EnhancedInput_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VCamCore.EVCamTargetViewportID
// NumValues: 0x0006
enum class EVCamTargetViewportID : uint8
{
	Viewport1                                = 0,
	Viewport2                                = 1,
	Viewport3                                = 2,
	Viewport4                                = 3,
	Count                                    = 4,
	EVCamTargetViewportID_MAX                = 5,
};

// Enum VCamCore.EConnectionUpdateResult
// NumValues: 0x0003
enum class EConnectionUpdateResult : uint8
{
	DidUpdateConnections                     = 0,
	NoConnectionsUpdated                     = 1,
	EConnectionUpdateResult_MAX              = 2,
};

// Enum VCamCore.EVCamInputLoggingMode
// NumValues: 0x0005
enum class EVCamInputLoggingMode : uint8
{
	None                                     = 0,
	OnlyConsumable                           = 1,
	OnlyGamepad                              = 2,
	All                                      = 3,
	EVCamInputLoggingMode_MAX                = 4,
};

// Enum VCamCore.EVCamInputMode
// NumValues: 0x0005
enum class EVCamInputMode : uint8
{
	ConsumeIfUsed                            = 0,
	ConsumeDevice                            = 1,
	DoNotConsume                             = 2,
	Ignore                                   = 3,
	EVCamInputMode_MAX                       = 4,
};

// ScriptStruct VCamCore.WidgetSnapshot
// 0x0018 (0x0018 - 0x0000)
struct FWidgetSnapshot final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SavedBinaryData;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetSnapshot) == 0x000008, "Wrong alignment on FWidgetSnapshot");
static_assert(sizeof(FWidgetSnapshot) == 0x000018, "Wrong size on FWidgetSnapshot");
static_assert(offsetof(FWidgetSnapshot, WidgetClass) == 0x000000, "Member 'FWidgetSnapshot::WidgetClass' has a wrong offset!");
static_assert(offsetof(FWidgetSnapshot, SavedBinaryData) == 0x000008, "Member 'FWidgetSnapshot::SavedBinaryData' has a wrong offset!");

// ScriptStruct VCamCore.WidgetTreeSnapshot
// 0x0058 (0x0058 - 0x0000)
struct FWidgetTreeSnapshot final
{
public:
	class FName                                   RootWidget;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FWidgetSnapshot>     WidgetSnapshots;                                   // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetTreeSnapshot) == 0x000008, "Wrong alignment on FWidgetTreeSnapshot");
static_assert(sizeof(FWidgetTreeSnapshot) == 0x000058, "Wrong size on FWidgetTreeSnapshot");
static_assert(offsetof(FWidgetTreeSnapshot, RootWidget) == 0x000000, "Member 'FWidgetTreeSnapshot::RootWidget' has a wrong offset!");
static_assert(offsetof(FWidgetTreeSnapshot, WidgetSnapshots) == 0x000008, "Member 'FWidgetTreeSnapshot::WidgetSnapshots' has a wrong offset!");

// ScriptStruct VCamCore.VCamViewportLockState
// 0x000C (0x000C - 0x0000)
struct FVCamViewportLockState final
{
public:
	bool                                          bLockViewportToCamera;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasLockedToViewport;                              // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Backup_ViewTarget;                                 // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamViewportLockState) == 0x000004, "Wrong alignment on FVCamViewportLockState");
static_assert(sizeof(FVCamViewportLockState) == 0x00000C, "Wrong size on FVCamViewportLockState");
static_assert(offsetof(FVCamViewportLockState, bLockViewportToCamera) == 0x000000, "Member 'FVCamViewportLockState::bLockViewportToCamera' has a wrong offset!");
static_assert(offsetof(FVCamViewportLockState, bWasLockedToViewport) == 0x000001, "Member 'FVCamViewportLockState::bWasLockedToViewport' has a wrong offset!");
static_assert(offsetof(FVCamViewportLockState, Backup_ViewTarget) == 0x000004, "Member 'FVCamViewportLockState::Backup_ViewTarget' has a wrong offset!");

// ScriptStruct VCamCore.VCamConnectionTargetSettings
// 0x0010 (0x0010 - 0x0000)
struct FVCamConnectionTargetSettings final
{
public:
	class FName                                   TargetModifierName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetConnectionPoint;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamConnectionTargetSettings) == 0x000004, "Wrong alignment on FVCamConnectionTargetSettings");
static_assert(sizeof(FVCamConnectionTargetSettings) == 0x000010, "Wrong size on FVCamConnectionTargetSettings");
static_assert(offsetof(FVCamConnectionTargetSettings, TargetModifierName) == 0x000000, "Member 'FVCamConnectionTargetSettings::TargetModifierName' has a wrong offset!");
static_assert(offsetof(FVCamConnectionTargetSettings, TargetConnectionPoint) == 0x000008, "Member 'FVCamConnectionTargetSettings::TargetConnectionPoint' has a wrong offset!");

// ScriptStruct VCamCore.VCamConnection
// 0x0048 (0x0048 - 0x0000)
struct FVCamConnection final
{
public:
	TArray<TSubclassOf<class IInterface>>         RequiredInterfaces;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class IInterface>>         OptionalInterfaces;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bRequiresInputAction;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionValueType                         ActionType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManuallyConfigureConnection;                      // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAB[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCamConnectionTargetSettings          ConnectionTargetSettings;                          // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAC[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           ConnectedAction;                                   // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifier*                          ConnectedModifier;                                 // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamConnection) == 0x000008, "Wrong alignment on FVCamConnection");
static_assert(sizeof(FVCamConnection) == 0x000048, "Wrong size on FVCamConnection");
static_assert(offsetof(FVCamConnection, RequiredInterfaces) == 0x000000, "Member 'FVCamConnection::RequiredInterfaces' has a wrong offset!");
static_assert(offsetof(FVCamConnection, OptionalInterfaces) == 0x000010, "Member 'FVCamConnection::OptionalInterfaces' has a wrong offset!");
static_assert(offsetof(FVCamConnection, bRequiresInputAction) == 0x000020, "Member 'FVCamConnection::bRequiresInputAction' has a wrong offset!");
static_assert(offsetof(FVCamConnection, ActionType) == 0x000021, "Member 'FVCamConnection::ActionType' has a wrong offset!");
static_assert(offsetof(FVCamConnection, bManuallyConfigureConnection) == 0x000022, "Member 'FVCamConnection::bManuallyConfigureConnection' has a wrong offset!");
static_assert(offsetof(FVCamConnection, ConnectionTargetSettings) == 0x000024, "Member 'FVCamConnection::ConnectionTargetSettings' has a wrong offset!");
static_assert(offsetof(FVCamConnection, ConnectedAction) == 0x000038, "Member 'FVCamConnection::ConnectedAction' has a wrong offset!");
static_assert(offsetof(FVCamConnection, ConnectedModifier) == 0x000040, "Member 'FVCamConnection::ConnectedModifier' has a wrong offset!");

// ScriptStruct VCamCore.DeterminePlayerControllersTargetPolicyParams
// 0x0018 (0x0018 - 0x0000)
struct FDeterminePlayerControllersTargetPolicyParams
{
public:
	class UVCamOutputProviderBase*                OutputProvider;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCineCameraComponent*                   CameraToAffect;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsActive;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeterminePlayerControllersTargetPolicyParams) == 0x000008, "Wrong alignment on FDeterminePlayerControllersTargetPolicyParams");
static_assert(sizeof(FDeterminePlayerControllersTargetPolicyParams) == 0x000018, "Wrong size on FDeterminePlayerControllersTargetPolicyParams");
static_assert(offsetof(FDeterminePlayerControllersTargetPolicyParams, OutputProvider) == 0x000000, "Member 'FDeterminePlayerControllersTargetPolicyParams::OutputProvider' has a wrong offset!");
static_assert(offsetof(FDeterminePlayerControllersTargetPolicyParams, CameraToAffect) == 0x000008, "Member 'FDeterminePlayerControllersTargetPolicyParams::CameraToAffect' has a wrong offset!");
static_assert(offsetof(FDeterminePlayerControllersTargetPolicyParams, bNewIsActive) == 0x000010, "Member 'FDeterminePlayerControllersTargetPolicyParams::bNewIsActive' has a wrong offset!");

// ScriptStruct VCamCore.UpdateViewTargetPolicyParams
// 0x0010 (0x0028 - 0x0018)
struct FUpdateViewTargetPolicyParams final : public FDeterminePlayerControllersTargetPolicyParams
{
public:
	TArray<class APlayerController*>              PlayerControllers;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateViewTargetPolicyParams) == 0x000008, "Wrong alignment on FUpdateViewTargetPolicyParams");
static_assert(sizeof(FUpdateViewTargetPolicyParams) == 0x000028, "Wrong size on FUpdateViewTargetPolicyParams");
static_assert(offsetof(FUpdateViewTargetPolicyParams, PlayerControllers) == 0x000018, "Member 'FUpdateViewTargetPolicyParams::PlayerControllers' has a wrong offset!");

// ScriptStruct VCamCore.VCamReceiveOutputProviderData
// 0x0008 (0x0008 - 0x0000)
struct FVCamReceiveOutputProviderData final
{
public:
	class UVCamOutputProviderBase*                OutputProvider;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamReceiveOutputProviderData) == 0x000008, "Wrong alignment on FVCamReceiveOutputProviderData");
static_assert(sizeof(FVCamReceiveOutputProviderData) == 0x000008, "Wrong size on FVCamReceiveOutputProviderData");
static_assert(offsetof(FVCamReceiveOutputProviderData, OutputProvider) == 0x000000, "Member 'FVCamReceiveOutputProviderData::OutputProvider' has a wrong offset!");

// ScriptStruct VCamCore.ModifierStackEntry
// 0x0018 (0x0018 - 0x0000)
struct FModifierStackEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCamModifier*                          GeneratedModifier;                                 // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModifierStackEntry) == 0x000008, "Wrong alignment on FModifierStackEntry");
static_assert(sizeof(FModifierStackEntry) == 0x000018, "Wrong size on FModifierStackEntry");
static_assert(offsetof(FModifierStackEntry, Name) == 0x000000, "Member 'FModifierStackEntry::Name' has a wrong offset!");
static_assert(offsetof(FModifierStackEntry, bEnabled) == 0x000008, "Member 'FModifierStackEntry::bEnabled' has a wrong offset!");
static_assert(offsetof(FModifierStackEntry, GeneratedModifier) == 0x000010, "Member 'FModifierStackEntry::GeneratedModifier' has a wrong offset!");

// ScriptStruct VCamCore.VCamComponentInstanceData
// 0x0028 (0x00E0 - 0x00B8)
struct FVCamComponentInstanceData final : public FSceneComponentInstanceData
{
public:
	uint8                                         Pad_1DAF[0x28];                                    // 0x00B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVCamComponentInstanceData) == 0x000008, "Wrong alignment on FVCamComponentInstanceData");
static_assert(sizeof(FVCamComponentInstanceData) == 0x0000E0, "Wrong size on FVCamComponentInstanceData");

// ScriptStruct VCamCore.VCamInputDeviceID
// 0x0004 (0x0004 - 0x0000)
struct FVCamInputDeviceID final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamInputDeviceID) == 0x000004, "Wrong alignment on FVCamInputDeviceID");
static_assert(sizeof(FVCamInputDeviceID) == 0x000004, "Wrong size on FVCamInputDeviceID");
static_assert(offsetof(FVCamInputDeviceID, DeviceID) == 0x000000, "Member 'FVCamInputDeviceID::DeviceID' has a wrong offset!");

// ScriptStruct VCamCore.VCamInputDeviceConfig
// 0x0020 (0x0020 - 0x0000)
struct FVCamInputDeviceConfig final
{
public:
	bool                                          bAllowAllInputDevices;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVCamInputDeviceID>             AllowedInputDeviceIds;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EVCamInputMode                                InputMode;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVCamInputLoggingMode                         LoggingMode;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB1[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVCamInputDeviceConfig) == 0x000008, "Wrong alignment on FVCamInputDeviceConfig");
static_assert(sizeof(FVCamInputDeviceConfig) == 0x000020, "Wrong size on FVCamInputDeviceConfig");
static_assert(offsetof(FVCamInputDeviceConfig, bAllowAllInputDevices) == 0x000000, "Member 'FVCamInputDeviceConfig::bAllowAllInputDevices' has a wrong offset!");
static_assert(offsetof(FVCamInputDeviceConfig, AllowedInputDeviceIds) == 0x000008, "Member 'FVCamInputDeviceConfig::AllowedInputDeviceIds' has a wrong offset!");
static_assert(offsetof(FVCamInputDeviceConfig, InputMode) == 0x000018, "Member 'FVCamInputDeviceConfig::InputMode' has a wrong offset!");
static_assert(offsetof(FVCamInputDeviceConfig, LoggingMode) == 0x000019, "Member 'FVCamInputDeviceConfig::LoggingMode' has a wrong offset!");

// ScriptStruct VCamCore.VCamInputProfile
// 0x0050 (0x0050 - 0x0000)
struct FVCamInputProfile final
{
public:
	TMap<class FName, struct FKey>                MappableKeyOverrides;                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamInputProfile) == 0x000008, "Wrong alignment on FVCamInputProfile");
static_assert(sizeof(FVCamInputProfile) == 0x000050, "Wrong size on FVCamInputProfile");
static_assert(offsetof(FVCamInputProfile, MappableKeyOverrides) == 0x000000, "Member 'FVCamInputProfile::MappableKeyOverrides' has a wrong offset!");

// ScriptStruct VCamCore.VCamModifierConnectionPoint
// 0x0008 (0x0008 - 0x0000)
struct FVCamModifierConnectionPoint final
{
public:
	class UInputAction*                           AssociatedAction;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamModifierConnectionPoint) == 0x000008, "Wrong alignment on FVCamModifierConnectionPoint");
static_assert(sizeof(FVCamModifierConnectionPoint) == 0x000008, "Wrong size on FVCamModifierConnectionPoint");
static_assert(offsetof(FVCamModifierConnectionPoint, AssociatedAction) == 0x000000, "Member 'FVCamModifierConnectionPoint::AssociatedAction' has a wrong offset!");

// ScriptStruct VCamCore.MultiUserVCamCameraFocusData
// 0x0040 (0x0040 - 0x0000)
struct FMultiUserVCamCameraFocusData final
{
public:
	float                                         ManualFocusDistance;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusSmoothingInterpSpeed;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmoothFocusChanges;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActorToTrack;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeOffset;                                    // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraFocusMethod                            FocusMethod;                                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB3[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserVCamCameraFocusData) == 0x000008, "Wrong alignment on FMultiUserVCamCameraFocusData");
static_assert(sizeof(FMultiUserVCamCameraFocusData) == 0x000040, "Wrong size on FMultiUserVCamCameraFocusData");
static_assert(offsetof(FMultiUserVCamCameraFocusData, ManualFocusDistance) == 0x000000, "Member 'FMultiUserVCamCameraFocusData::ManualFocusDistance' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraFocusData, FocusSmoothingInterpSpeed) == 0x000004, "Member 'FMultiUserVCamCameraFocusData::FocusSmoothingInterpSpeed' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraFocusData, bSmoothFocusChanges) == 0x000008, "Member 'FMultiUserVCamCameraFocusData::bSmoothFocusChanges' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraFocusData, ActorToTrack) == 0x000010, "Member 'FMultiUserVCamCameraFocusData::ActorToTrack' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraFocusData, RelativeOffset) == 0x000020, "Member 'FMultiUserVCamCameraFocusData::RelativeOffset' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraFocusData, FocusMethod) == 0x000038, "Member 'FMultiUserVCamCameraFocusData::FocusMethod' has a wrong offset!");

// ScriptStruct VCamCore.MultiUserVCamCameraData
// 0x00E0 (0x00E0 - 0x0000)
struct FMultiUserVCamCameraData final
{
public:
	struct FVector                                CameraActorLocation;                               // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraActorRotation;                               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CameraComponentLocation;                           // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraComponentRotation;                           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMultiUserVCamCameraFocusData          FocusSettings;                                     // 0x0068(0x0040)(NativeAccessSpecifierPublic)
	struct FCameraLensSettings                    LensSettings;                                      // 0x00A8(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraFilmbackSettings                FilmbackSettings;                                  // 0x00C4(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_NearClipPlane : 1;                       // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CameraISO : 1;                           // 0x00D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DB4[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomNearClipPlane;                               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraISO;                                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureBias;                                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserVCamCameraData) == 0x000008, "Wrong alignment on FMultiUserVCamCameraData");
static_assert(sizeof(FMultiUserVCamCameraData) == 0x0000E0, "Wrong size on FMultiUserVCamCameraData");
static_assert(offsetof(FMultiUserVCamCameraData, CameraActorLocation) == 0x000000, "Member 'FMultiUserVCamCameraData::CameraActorLocation' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CameraActorRotation) == 0x000018, "Member 'FMultiUserVCamCameraData::CameraActorRotation' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CameraComponentLocation) == 0x000030, "Member 'FMultiUserVCamCameraData::CameraComponentLocation' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CameraComponentRotation) == 0x000048, "Member 'FMultiUserVCamCameraData::CameraComponentRotation' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CurrentAperture) == 0x000060, "Member 'FMultiUserVCamCameraData::CurrentAperture' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CurrentFocalLength) == 0x000064, "Member 'FMultiUserVCamCameraData::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, FocusSettings) == 0x000068, "Member 'FMultiUserVCamCameraData::FocusSettings' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, LensSettings) == 0x0000A8, "Member 'FMultiUserVCamCameraData::LensSettings' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, FilmbackSettings) == 0x0000C4, "Member 'FMultiUserVCamCameraData::FilmbackSettings' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CustomNearClipPlane) == 0x0000D4, "Member 'FMultiUserVCamCameraData::CustomNearClipPlane' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, CameraISO) == 0x0000D8, "Member 'FMultiUserVCamCameraData::CameraISO' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraData, AutoExposureBias) == 0x0000DC, "Member 'FMultiUserVCamCameraData::AutoExposureBias' has a wrong offset!");

// ScriptStruct VCamCore.MultiUserVCamCameraComponentEvent
// 0x00F0 (0x00F0 - 0x0000)
struct FMultiUserVCamCameraComponentEvent final
{
public:
	class FString                                 TrackingName;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMultiUserVCamCameraData               CameraData;                                        // 0x0010(0x00E0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserVCamCameraComponentEvent) == 0x000008, "Wrong alignment on FMultiUserVCamCameraComponentEvent");
static_assert(sizeof(FMultiUserVCamCameraComponentEvent) == 0x0000F0, "Wrong size on FMultiUserVCamCameraComponentEvent");
static_assert(offsetof(FMultiUserVCamCameraComponentEvent, TrackingName) == 0x000000, "Member 'FMultiUserVCamCameraComponentEvent::TrackingName' has a wrong offset!");
static_assert(offsetof(FMultiUserVCamCameraComponentEvent, CameraData) == 0x000010, "Member 'FMultiUserVCamCameraComponentEvent::CameraData' has a wrong offset!");

// ScriptStruct VCamCore.VCamViewportLocker
// 0x0050 (0x0050 - 0x0000)
struct FVCamViewportLocker final
{
public:
	TMap<EVCamTargetViewportID, struct FVCamViewportLockState> Locks;                                             // 0x0000(0x0050)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamViewportLocker) == 0x000008, "Wrong alignment on FVCamViewportLocker");
static_assert(sizeof(FVCamViewportLocker) == 0x000050, "Wrong size on FVCamViewportLocker");
static_assert(offsetof(FVCamViewportLocker, Locks) == 0x000000, "Member 'FVCamViewportLocker::Locks' has a wrong offset!");

// ScriptStruct VCamCore.ChildWidgetReference
// 0x0028 (0x0028 - 0x0000)
struct FChildWidgetReference
{
public:
	TSoftObjectPtr<class UWidget>                 Template;                                          // 0x0000(0x0028)(Edit, ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChildWidgetReference) == 0x000008, "Wrong alignment on FChildWidgetReference");
static_assert(sizeof(FChildWidgetReference) == 0x000028, "Wrong size on FChildWidgetReference");
static_assert(offsetof(FChildWidgetReference, Template) == 0x000000, "Member 'FChildWidgetReference::Template' has a wrong offset!");

// ScriptStruct VCamCore.VCamChildWidgetReference
// 0x0000 (0x0028 - 0x0028)
struct FVCamChildWidgetReference final : public FChildWidgetReference
{
};
static_assert(alignof(FVCamChildWidgetReference) == 0x000008, "Wrong alignment on FVCamChildWidgetReference");
static_assert(sizeof(FVCamChildWidgetReference) == 0x000028, "Wrong size on FVCamChildWidgetReference");

// ScriptStruct VCamCore.WidgetConnectionConfig
// 0x0078 (0x0078 - 0x0000)
struct FWidgetConnectionConfig final
{
public:
	struct FVCamChildWidgetReference              Widget;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVCamConnectionTargetSettings> ConnectionTargets;                                 // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetConnectionConfig) == 0x000008, "Wrong alignment on FWidgetConnectionConfig");
static_assert(sizeof(FWidgetConnectionConfig) == 0x000078, "Wrong size on FWidgetConnectionConfig");
static_assert(offsetof(FWidgetConnectionConfig, Widget) == 0x000000, "Member 'FWidgetConnectionConfig::Widget' has a wrong offset!");
static_assert(offsetof(FWidgetConnectionConfig, ConnectionTargets) == 0x000028, "Member 'FWidgetConnectionConfig::ConnectionTargets' has a wrong offset!");

// ScriptStruct VCamCore.VCamWidgetConnectionState
// 0x0010 (0x0010 - 0x0000)
struct FVCamWidgetConnectionState final
{
public:
	TArray<struct FWidgetConnectionConfig>        WidgetConfigs;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVCamWidgetConnectionState) == 0x000008, "Wrong alignment on FVCamWidgetConnectionState");
static_assert(sizeof(FVCamWidgetConnectionState) == 0x000010, "Wrong size on FVCamWidgetConnectionState");
static_assert(offsetof(FVCamWidgetConnectionState, WidgetConfigs) == 0x000000, "Member 'FVCamWidgetConnectionState::WidgetConfigs' has a wrong offset!");

}

