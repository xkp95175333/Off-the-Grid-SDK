#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyNavGate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_FlyGateState_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkyNavGate.BP_SkyNavGate_C
// 0x0138 (0x03D8 - 0x02A0)
class ABP_SkyNavGate_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineMeshComponent*                   SplineMesh_Zipline;                                // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMissionResourceComponent*              MissionResource;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     GzMarker;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStreamableComponent*                 GzStreamable;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   SplineMesh_Trajectory;                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GatePlane;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         AssignedSplinePoint;                               // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5C0E[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerFlyThrough;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         TotalSplinePoints;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_FlyGateState                                FlyGateState;                                      // 0x030C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsZiplineMarker;                                   // 0x030D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C0F[0x2];                                     // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GateLoc_Prev;                                      // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplinePointLoc_Prev;                               // 0x0328(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplinePointLoc_Self;                               // 0x0340(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmptyBoolForValuesUpdate;                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C10[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplinePointTangent_Prev;                           // 0x0360(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplinePointTangent_Self;                           // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActiveStateScale;                                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VisibleStateScale;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C11[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnGateConsumed;                                    // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              ZiplineMatScaleXY;                                 // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnGateConsumptionStarted;                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void UserConstructionScript();
	void UpdateDebugGateText();
	void SetZiplineVisualsVisibility(bool Visible);
	void SetZiplineEffectToGate(const struct FVector& ZiplineStartRouteLoc);
	void SetVisualElements_CLIENT(E_FlyGateState GateLocalState);
	void ReceiveBeginPlay();
	void OnPlayerFlyThrough__DelegateSignature(int32 FlyGateSplinePoint, int32 PlayerId);
	void OnGateConsumptionStarted__DelegateSignature(double Duration);
	void OnGateConsumed__DelegateSignature(class ABP_SkyNavGate_C* GateRef);
	void GetLocalPlayerID(int32* PlayerId);
	void FirstGateMarkerVisibility_CO(bool NewVisibility);
	void ExecuteUbergraph_BP_SkyNavGate(int32 EntryPoint);
	void ConstructTrajectory(bool IsZiplineStart);
	void BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature(class UMissionResourceComponent* Resource);
	void BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature(class UMissionResourceComponent* Resource, float Duration);
	void BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkyNavGate_C">();
	}
	static class ABP_SkyNavGate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkyNavGate_C>();
	}
};
static_assert(alignof(ABP_SkyNavGate_C) == 0x000008, "Wrong alignment on ABP_SkyNavGate_C");
static_assert(sizeof(ABP_SkyNavGate_C) == 0x0003D8, "Wrong size on ABP_SkyNavGate_C");
static_assert(offsetof(ABP_SkyNavGate_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_SkyNavGate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplineMesh_Zipline) == 0x0002A8, "Member 'ABP_SkyNavGate_C::SplineMesh_Zipline' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, MissionResource) == 0x0002B0, "Member 'ABP_SkyNavGate_C::MissionResource' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, GzMarker) == 0x0002B8, "Member 'ABP_SkyNavGate_C::GzMarker' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, GzStreamable) == 0x0002C0, "Member 'ABP_SkyNavGate_C::GzStreamable' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplineMesh_Trajectory) == 0x0002C8, "Member 'ABP_SkyNavGate_C::SplineMesh_Trajectory' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, TextRender) == 0x0002D0, "Member 'ABP_SkyNavGate_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, Box) == 0x0002D8, "Member 'ABP_SkyNavGate_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, GatePlane) == 0x0002E0, "Member 'ABP_SkyNavGate_C::GatePlane' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_SkyNavGate_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, AssignedSplinePoint) == 0x0002F0, "Member 'ABP_SkyNavGate_C::AssignedSplinePoint' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, OnPlayerFlyThrough) == 0x0002F8, "Member 'ABP_SkyNavGate_C::OnPlayerFlyThrough' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, TotalSplinePoints) == 0x000308, "Member 'ABP_SkyNavGate_C::TotalSplinePoints' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, FlyGateState) == 0x00030C, "Member 'ABP_SkyNavGate_C::FlyGateState' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, IsZiplineMarker) == 0x00030D, "Member 'ABP_SkyNavGate_C::IsZiplineMarker' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, GateLoc_Prev) == 0x000310, "Member 'ABP_SkyNavGate_C::GateLoc_Prev' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplinePointLoc_Prev) == 0x000328, "Member 'ABP_SkyNavGate_C::SplinePointLoc_Prev' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplinePointLoc_Self) == 0x000340, "Member 'ABP_SkyNavGate_C::SplinePointLoc_Self' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, EmptyBoolForValuesUpdate) == 0x000358, "Member 'ABP_SkyNavGate_C::EmptyBoolForValuesUpdate' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplinePointTangent_Prev) == 0x000360, "Member 'ABP_SkyNavGate_C::SplinePointTangent_Prev' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, SplinePointTangent_Self) == 0x000378, "Member 'ABP_SkyNavGate_C::SplinePointTangent_Self' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, ActiveStateScale) == 0x000390, "Member 'ABP_SkyNavGate_C::ActiveStateScale' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, VisibleStateScale) == 0x000398, "Member 'ABP_SkyNavGate_C::VisibleStateScale' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, IsInitialized) == 0x0003A0, "Member 'ABP_SkyNavGate_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, OnGateConsumed) == 0x0003A8, "Member 'ABP_SkyNavGate_C::OnGateConsumed' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, ZiplineMatScaleXY) == 0x0003B8, "Member 'ABP_SkyNavGate_C::ZiplineMatScaleXY' has a wrong offset!");
static_assert(offsetof(ABP_SkyNavGate_C, OnGateConsumptionStarted) == 0x0003C8, "Member 'ABP_SkyNavGate_C::OnGateConsumptionStarted' has a wrong offset!");

}

