#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InventoryBaseElement

#include "Basic.hpp"

#include "WBP_InventoryBaseElement_classes.hpp"
#include "WBP_InventoryBaseElement_parameters.hpp"


namespace SDK
{

// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_InventoryBaseElement_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.ExecuteUbergraph_WBP_InventoryBaseElement
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_InventoryBaseElement_C::ExecuteUbergraph_WBP_InventoryBaseElement(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "ExecuteUbergraph_WBP_InventoryBaseElement");

	Params::WBP_InventoryBaseElement_C_ExecuteUbergraph_WBP_InventoryBaseElement Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.OnInitSuccess
// (BlueprintCallable, BlueprintEvent)

void UWBP_InventoryBaseElement_C::OnInitSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "OnInitSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.OnInventoryChanged
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzInvChangeEvent                       State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGzInvItem                       Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_InventoryBaseElement_C::OnInventoryChanged(EGzInvChangeEvent State, const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "OnInventoryChanged");

	Params::WBP_InventoryBaseElement_C_OnInventoryChanged Parms{};

	Parms.State = State;
	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.OnItemUpdated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGzItemData*                      Param_Item_Data                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_InventoryBaseElement_C::OnItemUpdated(class UGzItemData* Param_Item_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "OnItemUpdated");

	Params::WBP_InventoryBaseElement_C_OnItemUpdated Parms{};

	Parms.Param_Item_Data = Param_Item_Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_InventoryBaseElement.WBP_InventoryBaseElement_C.TryInitInventoryElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInitSuccessful                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_InventoryBaseElement_C::TryInitInventoryElement(bool* bInitSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_InventoryBaseElement_C", "TryInitInventoryElement");

	Params::WBP_InventoryBaseElement_C_TryInitInventoryElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInitSuccessful != nullptr)
		*bInitSuccessful = Parms.bInitSuccessful;
}

}

