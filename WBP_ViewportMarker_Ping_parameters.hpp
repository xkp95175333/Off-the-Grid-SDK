#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ViewportMarker_Ping

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "G01_structs.hpp"
#include "S_PingContent_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.CheckDisagree
// 0x0020 (0x0020 - 0x0000)
struct WBP_ViewportMarker_Ping_C_CheckDisagree final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Agree;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_CheckDisagree) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_CheckDisagree");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_CheckDisagree) == 0x000020, "Wrong size on WBP_ViewportMarker_Ping_C_CheckDisagree");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDisagree, PlayerState) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_CheckDisagree::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDisagree, Agree) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_CheckDisagree::Agree' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDisagree, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_CheckDisagree::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDisagree, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_CheckDisagree::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.CheckDistanceVisibility
// 0x0070 (0x0070 - 0x0000)
struct WBP_ViewportMarker_Ping_C_CheckDistanceVisibility final
{
public:
	bool                                          ShouldShow;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0008(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_CheckDistanceVisibility");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility) == 0x000070, "Wrong size on WBP_ViewportMarker_Ping_C_CheckDistanceVisibility");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, ShouldShow) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::ShouldShow' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, CallFunc_GetPingData_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000069, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckDistanceVisibility, K2Node_Select_Default) == 0x00006A, "Member 'WBP_ViewportMarker_Ping_C_CheckDistanceVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.CheckEnemyPing
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_ViewportMarker_Ping_C_CheckEnemyPing final
{
public:
	bool                                          EnemyDetected;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5180[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5181[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGzPlayerState*>                 CallFunc_FindTeammates_ReturnValue;                // 0x0080(0x0010)(ReferenceParm)
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzNonPlayerCharacter*                  K2Node_DynamicCast_AsGz_Non_Player_Character;      // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_CheckEnemyPing) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_CheckEnemyPing");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_CheckEnemyPing) == 0x0000A8, "Wrong size on WBP_ViewportMarker_Ping_C_CheckEnemyPing");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, EnemyDetected) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::EnemyDetected' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, K2Node_DynamicCast_AsGz_Player_Character) == 0x000070, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, CallFunc_FindTeammates_ReturnValue) == 0x000080, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::CallFunc_FindTeammates_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000090, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, K2Node_DynamicCast_AsGz_Non_Player_Character) == 0x000098, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::K2Node_DynamicCast_AsGz_Non_Player_Character' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_CheckEnemyPing, CallFunc_Array_Contains_ReturnValue) == 0x0000A1, "Member 'WBP_ViewportMarker_Ping_C_CheckEnemyPing::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.ExecuteUbergraph_WBP_ViewportMarker_Ping
// 0x0098 (0x0098 - 0x0000)
struct WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5182[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Distance;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AGzPlayerState* PlayerState, struct FGzPingData& PingData, bool bAgree)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5183[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            K2Node_CustomEvent_PingData;                       // 0x0028(0x0060)(ConstParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAgree;                         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItem_IsItem;                            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsFocused;                           // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5184[0x5];                                     // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateDistance_Distance_ImplicitCast;     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping) == 0x000098, "Wrong size on WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, EntryPoint) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_Event_Distance) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_Event_Distance' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_CustomEvent_PlayerState) == 0x000020, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_CustomEvent_PingData) == 0x000028, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_CustomEvent_PingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_CustomEvent_bAgree) == 0x000088, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_CustomEvent_bAgree' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, CallFunc_IsItem_IsItem) == 0x000089, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::CallFunc_IsItem_IsItem' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, K2Node_Event_bIsFocused) == 0x00008A, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::K2Node_Event_bIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping, CallFunc_UpdateDistance_Distance_ImplicitCast) == 0x000090, "Member 'WBP_ViewportMarker_Ping_C_ExecuteUbergraph_WBP_ViewportMarker_Ping::CallFunc_UpdateDistance_Distance_ImplicitCast' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.GetIndexInTeam
// 0x0048 (0x0048 - 0x0000)
struct WBP_ViewportMarker_Ping_C_GetIndexInTeam final
{
public:
	class AGzTeam*                                Team;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OutputPin;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5185[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGzTeamMember>                  CallFunc_GetTeamMembers_ReturnValue;               // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGzTeamMember                          CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5186[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5187[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_GetIndexInTeam) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_GetIndexInTeam");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_GetIndexInTeam) == 0x000048, "Wrong size on WBP_ViewportMarker_Ping_C_GetIndexInTeam");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, Team) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::Team' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, PlayerState) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, OutputPin) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_GetTeamMembers_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetIndexInTeam, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'WBP_ViewportMarker_Ping_C_GetIndexInTeam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.GetPositiveNegativePrompt
// 0x0120 (0x0120 - 0x0000)
struct WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt final
{
public:
	struct FGzPingData                            GzPingData;                                        // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class FText                                   Ping_Prompts_Cancel;                               // 0x0060(0x0010)(Parm, OutParm)
	class FText                                   Negative;                                          // 0x0070(0x0010)(ConstParm, Parm, OutParm)
	class FText                                   Positive;                                          // 0x0080(0x0010)(ConstParm, Parm, OutParm)
	class FText                                   NoPrompt;                                          // 0x0090(0x0010)(Edit, BlueprintVisible)
	class FText                                   DisagreePrompt;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible)
	class FText                                   AgreePrompt;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible)
	class FText                                   YesPrompt;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible)
	class FText                                   Temp_text_Variable;                                // 0x00D0(0x0010)(ConstParm)
	EGzPingTarget                                 Temp_byte_Variable;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5188[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x00E8(0x0010)(ConstParm)
	EGzPingTarget                                 Temp_byte_Variable_1;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5189[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0100(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default_1;                           // 0x0110(0x0010)(ConstParm)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt) == 0x000120, "Wrong size on WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, GzPingData) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::GzPingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Ping_Prompts_Cancel) == 0x000060, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Ping_Prompts_Cancel' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Negative) == 0x000070, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Negative' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Positive) == 0x000080, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Positive' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, NoPrompt) == 0x000090, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::NoPrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, DisagreePrompt) == 0x0000A0, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::DisagreePrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, AgreePrompt) == 0x0000B0, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::AgreePrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, YesPrompt) == 0x0000C0, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::YesPrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Temp_text_Variable) == 0x0000D0, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Temp_byte_Variable) == 0x0000E0, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Temp_text_Variable_1) == 0x0000E8, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, Temp_byte_Variable_1) == 0x0000F8, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, K2Node_Select_Default) == 0x000100, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt, K2Node_Select_Default_1) == 0x000110, "Member 'WBP_ViewportMarker_Ping_C_GetPositiveNegativePrompt::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.Handle Item Data
// 0x0108 (0x0108 - 0x0000)
struct WBP_ViewportMarker_Ping_C_Handle_Item_Data final
{
public:
	class UObject*                                ObjectRef;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidItem;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            ItemData;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ItemsWithQuality;                                  // 0x0018(0x0020)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518B[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzWeaponPickable*                      K2Node_DynamicCast_AsGz_Weapon_Pickable;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518C[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzWeaponInvItem                       CallFunc_GetWeaponItem_ReturnValue;                // 0x0050(0x0050)(ConstParm)
	class AGzPickableBase*                        K2Node_DynamicCast_AsGz_Pickable_Base;             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518D[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzLimbPickable*                        K2Node_DynamicCast_AsGz_Limb_Pickable;             // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518E[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   CallFunc_GetLimbType_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518F[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetLimbIdentifier_ReturnValue;            // 0x00D0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue_1;                // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_Handle_Item_Data) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_Handle_Item_Data");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_Handle_Item_Data) == 0x000108, "Wrong size on WBP_ViewportMarker_Ping_C_Handle_Item_Data");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, ObjectRef) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::ObjectRef' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, ValidItem) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::ValidItem' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, ItemData) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::ItemData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, ItemsWithQuality) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::ItemsWithQuality' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_AsGz_Weapon_Pickable) == 0x000040, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_AsGz_Weapon_Pickable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_GetWeaponItem_ReturnValue) == 0x000050, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_GetWeaponItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_AsGz_Pickable_Base) == 0x0000A0, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_AsGz_Pickable_Base' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_AsGz_Limb_Pickable) == 0x0000B0, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_AsGz_Limb_Pickable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_GetItemData_ReturnValue) == 0x0000C0, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_GetItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_GetLimbType_ReturnValue) == 0x0000C8, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_GetLimbType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_GetLimbIdentifier_ReturnValue) == 0x0000D0, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_GetLimbIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_GetItemData_ReturnValue_1) == 0x0000F8, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_GetItemData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Handle_Item_Data, CallFunc_MatchesAnyTags_ReturnValue) == 0x000100, "Member 'WBP_ViewportMarker_Ping_C_Handle_Item_Data::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.IsItem
// 0x0030 (0x0030 - 0x0000)
struct WBP_ViewportMarker_Ping_C_IsItem final
{
public:
	bool                                          Param_IsItem;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5190[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5191[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzPingableComponent*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_IsItem) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_IsItem");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_IsItem) == 0x000030, "Wrong size on WBP_ViewportMarker_Ping_C_IsItem");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, Param_IsItem) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_IsItem::Param_IsItem' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_GetAttachParentActor_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_IsValid_ReturnValue_3) == 0x000029, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'WBP_ViewportMarker_Ping_C_IsItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.IsPinged
// 0x0070 (0x0070 - 0x0000)
struct WBP_ViewportMarker_Ping_C_IsPinged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5192[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0008(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_IsPinged) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_IsPinged");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_IsPinged) == 0x000070, "Wrong size on WBP_ViewportMarker_Ping_C_IsPinged");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsPinged, ReturnValue) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_IsPinged::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsPinged, CallFunc_GetPingData_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_IsPinged::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_IsPinged, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_IsPinged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.OnMarkerFocusChangedBP
// 0x0001 (0x0001 - 0x0000)
struct WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP) == 0x000001, "Wrong size on WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP, bIsFocused) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_OnMarkerFocusChangedBP::bIsFocused' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.OnPingAgreementChanged
// 0x0070 (0x0070 - 0x0000)
struct WBP_ViewportMarker_Ping_C_OnPingAgreementChanged final
{
public:
	class AGzPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            Param_PingData;                                    // 0x0008(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bAgree;                                            // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_OnPingAgreementChanged) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_OnPingAgreementChanged");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_OnPingAgreementChanged) == 0x000070, "Wrong size on WBP_ViewportMarker_Ping_C_OnPingAgreementChanged");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_OnPingAgreementChanged, PlayerState) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_OnPingAgreementChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_OnPingAgreementChanged, Param_PingData) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_OnPingAgreementChanged::Param_PingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_OnPingAgreementChanged, bAgree) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_OnPingAgreementChanged::bAgree' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.PromptVisibility
// 0x000A (0x000A - 0x0000)
struct WBP_ViewportMarker_Ping_C_PromptVisibility final
{
public:
	bool                                          IsInFocus;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPinged_ReturnValue;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_PromptVisibility) == 0x000001, "Wrong alignment on WBP_ViewportMarker_Ping_C_PromptVisibility");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_PromptVisibility) == 0x00000A, "Wrong size on WBP_ViewportMarker_Ping_C_PromptVisibility");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, IsInFocus) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::IsInFocus' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, Temp_bool_Variable_1) == 0x000003, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, Temp_byte_Variable_1) == 0x000004, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, Temp_byte_Variable_2) == 0x000005, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, K2Node_Select_Default) == 0x000006, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, CallFunc_IsPinged_ReturnValue) == 0x000007, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::CallFunc_IsPinged_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_PromptVisibility, K2Node_Select_Default_1) == 0x000009, "Member 'WBP_ViewportMarker_Ping_C_PromptVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.Set Background Color
// 0x0020 (0x0020 - 0x0000)
struct WBP_ViewportMarker_Ping_C_Set_Background_Color final
{
public:
	class ULocalPlayer*                           CallFunc_GetOwningLocalPlayer_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5193[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_Set_Background_Color) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_Set_Background_Color");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_Set_Background_Color) == 0x000020, "Wrong size on WBP_ViewportMarker_Ping_C_Set_Background_Color");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Set_Background_Color, CallFunc_GetOwningLocalPlayer_ReturnValue) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_Set_Background_Color::CallFunc_GetOwningLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Set_Background_Color, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_Set_Background_Color::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_Set_Background_Color, CallFunc_SelectColor_ReturnValue) == 0x00000C, "Member 'WBP_ViewportMarker_Ping_C_Set_Background_Color::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.SetItemData
// 0x0020 (0x0020 - 0x0000)
struct WBP_ViewportMarker_Ping_C_SetItemData final
{
public:
	class UGzItemData*                            ItemData;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_SetItemData) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_SetItemData");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_SetItemData) == 0x000020, "Wrong size on WBP_ViewportMarker_Ping_C_SetItemData");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetItemData, ItemData) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_SetItemData::ItemData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetItemData, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_SetItemData::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetItemData, CallFunc_GetRarityColor_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_SetItemData::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.SetPingData
// 0x0140 (0x0140 - 0x0000)
struct WBP_ViewportMarker_Ping_C_SetPingData final
{
public:
	struct FGzPingData                            Param_PingData;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateForPingableMarkerObject_Valid;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEnemyPing_EnemyDetected;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5194[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0068(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5195[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Map_Find_Value;                           // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesDataTableRowExist_ReturnValue;        // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5196[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00D8(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_SetPingData) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_SetPingData");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_SetPingData) == 0x000140, "Wrong size on WBP_ViewportMarker_Ping_C_SetPingData");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, Param_PingData) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::Param_PingData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_UpdateForPingableMarkerObject_Valid) == 0x000060, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_UpdateForPingableMarkerObject_Valid' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_CheckEnemyPing_EnemyDetected) == 0x000061, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_CheckEnemyPing_EnemyDetected' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000C8, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, K2Node_SwitchEnum_CmpSuccess) == 0x0000C9, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_Map_Find_Value) == 0x0000CC, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_Map_Find_ReturnValue) == 0x0000D4, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_DoesDataTableRowExist_ReturnValue) == 0x0000D5, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_DoesDataTableRowExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000D8, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000138, "Member 'WBP_ViewportMarker_Ping_C_SetPingData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.SetPingIcon
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_ViewportMarker_Ping_C_SetPingIcon final
{
public:
	struct FS_PingContent                         PingContent;                                       // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FS_PingContent                         NewLocalVar;                                       // 0x0060(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1; // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5197[0x5];                                     // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzTeam*                                CallFunc_GetTeamFromPlayer_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5198[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIndexInTeam_OutputPin;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTeammateColorFromIndex_OutPlayerColor; // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_SetPingIcon) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_SetPingIcon");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_SetPingIcon) == 0x0000F8, "Wrong size on WBP_ViewportMarker_Ping_C_SetPingIcon");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, PingContent) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::PingContent' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, NewLocalVar) == 0x000060, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue) == 0x0000C0, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1) == 0x0000C1, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_EqualEqual_LinearColorLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_BooleanOR_ReturnValue) == 0x0000C2, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_GetTeamFromPlayer_ReturnValue) == 0x0000C8, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_GetTeamFromPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_GetIndexInTeam_OutputPin) == 0x0000D4, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_GetIndexInTeam_OutputPin' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_GetTeammateColorFromIndex_OutPlayerColor) == 0x0000D8, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_GetTeammateColorFromIndex_OutPlayerColor' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_SetPingIcon, CallFunc_SelectColor_ReturnValue) == 0x0000E8, "Member 'WBP_ViewportMarker_Ping_C_SetPingIcon::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.UpdateDistance
// 0x0088 (0x0088 - 0x0000)
struct WBP_ViewportMarker_Ping_C_UpdateDistance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5199[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0010)()
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_UpdateDistance) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_UpdateDistance");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_UpdateDistance) == 0x000088, "Wrong size on WBP_ViewportMarker_Ping_C_UpdateDistance");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, Distance) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::Distance' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, CallFunc_FTrunc_ReturnValue) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistance, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistance::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.UpdateDistanceToViewTarget
// 0x0004 (0x0004 - 0x0000)
struct WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget) == 0x000004, "Wrong alignment on WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget) == 0x000004, "Wrong size on WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget, Distance) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_UpdateDistanceToViewTarget::Distance' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.UpdateForPingableMarkerObject
// 0x0120 (0x0120 - 0x0000)
struct WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzPingableComponent*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519D[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519E[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PingContent                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00A0(0x0060)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519F[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue_1;       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Handle_Item_Data_ValidItem;               // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject) == 0x000120, "Wrong size on WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, Valid) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::Valid' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetAttachParentActor_ReturnValue) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, K2Node_SwitchEnum_CmpSuccess) == 0x000031, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000098, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000A0, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000100, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetOwner_ReturnValue_1) == 0x000108, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_GetAttachParentActor_ReturnValue_1) == 0x000110, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_GetAttachParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject, CallFunc_Handle_Item_Data_ValidItem) == 0x000118, "Member 'WBP_ViewportMarker_Ping_C_UpdateForPingableMarkerObject::CallFunc_Handle_Item_Data_ValidItem' has a wrong offset!");

// Function WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C.UpdatePromptText
// 0x0110 (0x0110 - 0x0000)
struct WBP_ViewportMarker_Ping_C_UpdatePromptText final
{
public:
	class FText                                   CancelPrompt;                                      // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A0[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0010)()
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A1[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzPingData                            CallFunc_GetPingData_ReturnValue;                  // 0x0038(0x0060)(HasGetValueTypeHash)
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel; // 0x00A0(0x0010)()
	class FText                                   CallFunc_GetPositiveNegativePrompt_Negative;       // 0x00B0(0x0010)()
	class FText                                   CallFunc_GetPositiveNegativePrompt_Positive;       // 0x00C0(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A2[0x5];                                     // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00D8(0x0010)(ConstParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A3[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x00F0(0x0010)(ConstParm)
	class FText                                   K2Node_Select_Default_2;                           // 0x0100(0x0010)()
};
static_assert(alignof(WBP_ViewportMarker_Ping_C_UpdatePromptText) == 0x000008, "Wrong alignment on WBP_ViewportMarker_Ping_C_UpdatePromptText");
static_assert(sizeof(WBP_ViewportMarker_Ping_C_UpdatePromptText) == 0x000110, "Wrong size on WBP_ViewportMarker_Ping_C_UpdatePromptText");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CancelPrompt) == 0x000000, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CancelPrompt' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, Temp_bool_Variable) == 0x000010, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, Temp_text_Variable) == 0x000018, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, Temp_bool_Variable_1) == 0x000028, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, Temp_bool_Variable_2) == 0x000029, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000030, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetPingData_ReturnValue) == 0x000038, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetPingData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000098, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel) == 0x0000A0, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Ping_Prompts_Cancel' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Negative) == 0x0000B0, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Negative' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_GetPositiveNegativePrompt_Positive) == 0x0000C0, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_GetPositiveNegativePrompt_Positive' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_Array_Contains_ReturnValue) == 0x0000D1, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_Not_PreBool_ReturnValue) == 0x0000D2, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, K2Node_Select_Default) == 0x0000D8, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E8, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, K2Node_Select_Default_1) == 0x0000F0, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ViewportMarker_Ping_C_UpdatePromptText, K2Node_Select_Default_2) == 0x000100, "Member 'WBP_ViewportMarker_Ping_C_UpdatePromptText::K2Node_Select_Default_2' has a wrong offset!");

}

