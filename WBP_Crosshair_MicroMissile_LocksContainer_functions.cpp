#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_MicroMissile_LocksContainer

#include "Basic.hpp"

#include "WBP_Crosshair_MicroMissile_LocksContainer_classes.hpp"
#include "WBP_Crosshair_MicroMissile_LocksContainer_parameters.hpp"


namespace SDK
{

// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_LocksContainer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InMaxLocksCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TimeToLockOn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LockOnDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::Initialize(int32 InMaxLocksCount, double TimeToLockOn, double LockOnDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "Initialize");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_Initialize Parms{};

	Parms.InMaxLocksCount = InMaxLocksCount;
	Parms.TimeToLockOn = TimeToLockOn;
	Parms.LockOnDuration = LockOnDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockingStatusChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::NotifyLockingStatusChanged(struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "NotifyLockingStatusChanged");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockingStatusChanged Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);

	TargetData = std::move(Parms.TargetData);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockInterrupted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::NotifyLockInterrupted(struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "NotifyLockInterrupted");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockInterrupted Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);

	TargetData = std::move(Parms.TargetData);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyLockSucceed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::NotifyLockSucceed(struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "NotifyLockSucceed");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_NotifyLockSucceed Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);

	TargetData = std::move(Parms.TargetData);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.NotifyTargetingStopped
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::NotifyTargetingStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "NotifyTargetingStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "PreConstruct");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.ResetContainer
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::ResetContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "ResetContainer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.SpawnEntry
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InTimeToLockOn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InLockOnDuration                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWBP_Crosshair_MicroMissile_Lock_C*Entry                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::SpawnEntry(double InTimeToLockOn, double InLockOnDuration, class UWBP_Crosshair_MicroMissile_Lock_C** Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "SpawnEntry");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_SpawnEntry Parms{};

	Parms.InTimeToLockOn = InTimeToLockOn;
	Parms.InLockOnDuration = InLockOnDuration;

	UObject::ProcessEvent(Func, &Parms);

	if (Entry != nullptr)
		*Entry = Parms.Entry;
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.StartLockOnTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::StartLockOnTarget(struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "StartLockOnTarget");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_StartLockOnTarget Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);

	TargetData = std::move(Parms.TargetData);
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.FindFreeIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   OutIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::FindFreeIndex(int32* OutIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "FindFreeIndex");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_FindFreeIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIndex != nullptr)
		*OutIndex = Parms.OutIndex;
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.GetEntry
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UGzTargetableComponent*           TargetableComp                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UWBP_Crosshair_MicroMissile_Lock_C*OutEntry                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::GetEntry(class UGzTargetableComponent* TargetableComp, class UWBP_Crosshair_MicroMissile_Lock_C** OutEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "GetEntry");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_GetEntry Parms{};

	Parms.TargetableComp = TargetableComp;

	UObject::ProcessEvent(Func, &Parms);

	if (OutEntry != nullptr)
		*OutEntry = Parms.OutEntry;
}


// Function WBP_Crosshair_MicroMissile_LocksContainer.WBP_Crosshair_MicroMissile_LocksContainer_C.IsInitialized
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIsInitialized                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Crosshair_MicroMissile_LocksContainer_C::IsInitialized(bool* bIsInitialized) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Crosshair_MicroMissile_LocksContainer_C", "IsInitialized");

	Params::WBP_Crosshair_MicroMissile_LocksContainer_C_IsInitialized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsInitialized != nullptr)
		*bIsInitialized = Parms.bIsInitialized;
}

}

