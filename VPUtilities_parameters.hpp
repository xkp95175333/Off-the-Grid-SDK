#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VPUtilities

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "VPUtilities_structs.hpp"
#include "VPBookmark_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetAsset
// 0x0068 (0x0068 - 0x0000)
struct VPAssetThumbnailWrapperWidget_SetAsset final
{
public:
	struct FAssetData                             AssetData;                                         // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_SetAsset) == 0x000008, "Wrong alignment on VPAssetThumbnailWrapperWidget_SetAsset");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_SetAsset) == 0x000068, "Wrong size on VPAssetThumbnailWrapperWidget_SetAsset");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_SetAsset, AssetData) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_SetAsset::AssetData' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetAssetByObject
// 0x0008 (0x0008 - 0x0000)
struct VPAssetThumbnailWrapperWidget_SetAssetByObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_SetAssetByObject) == 0x000008, "Wrong alignment on VPAssetThumbnailWrapperWidget_SetAssetByObject");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_SetAssetByObject) == 0x000008, "Wrong size on VPAssetThumbnailWrapperWidget_SetAssetByObject");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_SetAssetByObject, Object) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_SetAssetByObject::Object' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct VPAssetThumbnailWrapperWidget_SetDisplayMode final
{
public:
	EAssetThumbnailDisplayMode                    Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_SetDisplayMode) == 0x000001, "Wrong alignment on VPAssetThumbnailWrapperWidget_SetDisplayMode");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_SetDisplayMode) == 0x000001, "Wrong size on VPAssetThumbnailWrapperWidget_SetDisplayMode");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_SetDisplayMode, Mode) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_SetDisplayMode::Mode' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetEditorThumbnailResolution
// 0x0008 (0x0008 - 0x0000)
struct VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution final
{
public:
	struct FIntPoint                              NewResolution;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution) == 0x000004, "Wrong alignment on VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution) == 0x000008, "Wrong size on VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution, NewResolution) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_SetEditorThumbnailResolution::NewResolution' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.SetFallbackBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VPAssetThumbnailWrapperWidget_SetFallbackBrush final
{
public:
	struct FSlateBrush                            NewFallbackBrush;                                  // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_SetFallbackBrush) == 0x000010, "Wrong alignment on VPAssetThumbnailWrapperWidget_SetFallbackBrush");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_SetFallbackBrush) == 0x0000D0, "Wrong size on VPAssetThumbnailWrapperWidget_SetFallbackBrush");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_SetFallbackBrush, NewFallbackBrush) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_SetFallbackBrush::NewFallbackBrush' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetEditorAssetWidget
// 0x0008 (0x0008 - 0x0000)
struct VPAssetThumbnailWrapperWidget_GetEditorAssetWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_GetEditorAssetWidget) == 0x000008, "Wrong alignment on VPAssetThumbnailWrapperWidget_GetEditorAssetWidget");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_GetEditorAssetWidget) == 0x000008, "Wrong size on VPAssetThumbnailWrapperWidget_GetEditorAssetWidget");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_GetEditorAssetWidget, ReturnValue) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_GetEditorAssetWidget::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetEditorThumbnailResolution
// 0x0008 (0x0008 - 0x0000)
struct VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution) == 0x000004, "Wrong alignment on VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution) == 0x000008, "Wrong size on VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution, ReturnValue) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_GetEditorThumbnailResolution::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPAssetThumbnailWrapperWidget.GetFallbackBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VPAssetThumbnailWrapperWidget_GetFallbackBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPAssetThumbnailWrapperWidget_GetFallbackBrush) == 0x000010, "Wrong alignment on VPAssetThumbnailWrapperWidget_GetFallbackBrush");
static_assert(sizeof(VPAssetThumbnailWrapperWidget_GetFallbackBrush) == 0x0000D0, "Wrong size on VPAssetThumbnailWrapperWidget_GetFallbackBrush");
static_assert(offsetof(VPAssetThumbnailWrapperWidget_GetFallbackBrush, ReturnValue) == 0x000000, "Member 'VPAssetThumbnailWrapperWidget_GetFallbackBrush::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.EditorDeleteSelectedObjects
// 0x0001 (0x0001 - 0x0000)
struct VPBlueprintLibrary_EditorDeleteSelectedObjects final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_EditorDeleteSelectedObjects) == 0x000001, "Wrong alignment on VPBlueprintLibrary_EditorDeleteSelectedObjects");
static_assert(sizeof(VPBlueprintLibrary_EditorDeleteSelectedObjects) == 0x000001, "Wrong size on VPBlueprintLibrary_EditorDeleteSelectedObjects");
static_assert(offsetof(VPBlueprintLibrary_EditorDeleteSelectedObjects, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_EditorDeleteSelectedObjects::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.EditorDuplicate
// 0x0001 (0x0001 - 0x0000)
struct VPBlueprintLibrary_EditorDuplicate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_EditorDuplicate) == 0x000001, "Wrong alignment on VPBlueprintLibrary_EditorDuplicate");
static_assert(sizeof(VPBlueprintLibrary_EditorDuplicate) == 0x000001, "Wrong size on VPBlueprintLibrary_EditorDuplicate");
static_assert(offsetof(VPBlueprintLibrary_EditorDuplicate, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_EditorDuplicate::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.EditorRedo
// 0x0001 (0x0001 - 0x0000)
struct VPBlueprintLibrary_EditorRedo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_EditorRedo) == 0x000001, "Wrong alignment on VPBlueprintLibrary_EditorRedo");
static_assert(sizeof(VPBlueprintLibrary_EditorRedo) == 0x000001, "Wrong size on VPBlueprintLibrary_EditorRedo");
static_assert(offsetof(VPBlueprintLibrary_EditorRedo, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_EditorRedo::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.EditorUndo
// 0x0001 (0x0001 - 0x0000)
struct VPBlueprintLibrary_EditorUndo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_EditorUndo) == 0x000001, "Wrong alignment on VPBlueprintLibrary_EditorUndo");
static_assert(sizeof(VPBlueprintLibrary_EditorUndo) == 0x000001, "Wrong size on VPBlueprintLibrary_EditorUndo");
static_assert(offsetof(VPBlueprintLibrary_EditorUndo, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_EditorUndo::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetEditorViewportTransform
// 0x0060 (0x0060 - 0x0000)
struct VPBlueprintLibrary_GetEditorViewportTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetEditorViewportTransform) == 0x000010, "Wrong alignment on VPBlueprintLibrary_GetEditorViewportTransform");
static_assert(sizeof(VPBlueprintLibrary_GetEditorViewportTransform) == 0x000060, "Wrong size on VPBlueprintLibrary_GetEditorViewportTransform");
static_assert(offsetof(VPBlueprintLibrary_GetEditorViewportTransform, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetEditorViewportTransform::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetEditorVRHeadTransform
// 0x0060 (0x0060 - 0x0000)
struct VPBlueprintLibrary_GetEditorVRHeadTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetEditorVRHeadTransform) == 0x000010, "Wrong alignment on VPBlueprintLibrary_GetEditorVRHeadTransform");
static_assert(sizeof(VPBlueprintLibrary_GetEditorVRHeadTransform) == 0x000060, "Wrong size on VPBlueprintLibrary_GetEditorVRHeadTransform");
static_assert(offsetof(VPBlueprintLibrary_GetEditorVRHeadTransform, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetEditorVRHeadTransform::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetEditorVRRoomTransform
// 0x0060 (0x0060 - 0x0000)
struct VPBlueprintLibrary_GetEditorVRRoomTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetEditorVRRoomTransform) == 0x000010, "Wrong alignment on VPBlueprintLibrary_GetEditorVRRoomTransform");
static_assert(sizeof(VPBlueprintLibrary_GetEditorVRRoomTransform) == 0x000060, "Wrong size on VPBlueprintLibrary_GetEditorVRRoomTransform");
static_assert(offsetof(VPBlueprintLibrary_GetEditorVRRoomTransform, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetEditorVRRoomTransform::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetEditorWorld
// 0x0008 (0x0008 - 0x0000)
struct VPBlueprintLibrary_GetEditorWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetEditorWorld) == 0x000008, "Wrong alignment on VPBlueprintLibrary_GetEditorWorld");
static_assert(sizeof(VPBlueprintLibrary_GetEditorWorld) == 0x000008, "Wrong size on VPBlueprintLibrary_GetEditorWorld");
static_assert(offsetof(VPBlueprintLibrary_GetEditorWorld, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetEditorWorld::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetLeftInteractorLocation
// 0x0018 (0x0018 - 0x0000)
struct VPBlueprintLibrary_GetLeftInteractorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetLeftInteractorLocation) == 0x000008, "Wrong alignment on VPBlueprintLibrary_GetLeftInteractorLocation");
static_assert(sizeof(VPBlueprintLibrary_GetLeftInteractorLocation) == 0x000018, "Wrong size on VPBlueprintLibrary_GetLeftInteractorLocation");
static_assert(offsetof(VPBlueprintLibrary_GetLeftInteractorLocation, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetLeftInteractorLocation::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetVirtualProductionRole
// 0x0020 (0x0020 - 0x0000)
struct VPBlueprintLibrary_GetVirtualProductionRole final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetVirtualProductionRole) == 0x000008, "Wrong alignment on VPBlueprintLibrary_GetVirtualProductionRole");
static_assert(sizeof(VPBlueprintLibrary_GetVirtualProductionRole) == 0x000020, "Wrong size on VPBlueprintLibrary_GetVirtualProductionRole");
static_assert(offsetof(VPBlueprintLibrary_GetVirtualProductionRole, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetVirtualProductionRole::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.GetVREditorLaserHoverLocation
// 0x0018 (0x0018 - 0x0000)
struct VPBlueprintLibrary_GetVREditorLaserHoverLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_GetVREditorLaserHoverLocation) == 0x000008, "Wrong alignment on VPBlueprintLibrary_GetVREditorLaserHoverLocation");
static_assert(sizeof(VPBlueprintLibrary_GetVREditorLaserHoverLocation) == 0x000018, "Wrong size on VPBlueprintLibrary_GetVREditorLaserHoverLocation");
static_assert(offsetof(VPBlueprintLibrary_GetVREditorLaserHoverLocation, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_GetVREditorLaserHoverLocation::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.IsVREditorModeActive
// 0x0001 (0x0001 - 0x0000)
struct VPBlueprintLibrary_IsVREditorModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_IsVREditorModeActive) == 0x000001, "Wrong alignment on VPBlueprintLibrary_IsVREditorModeActive");
static_assert(sizeof(VPBlueprintLibrary_IsVREditorModeActive) == 0x000001, "Wrong size on VPBlueprintLibrary_IsVREditorModeActive");
static_assert(offsetof(VPBlueprintLibrary_IsVREditorModeActive, ReturnValue) == 0x000000, "Member 'VPBlueprintLibrary_IsVREditorModeActive::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.JumpToBookmarkInLevelEditor
// 0x0010 (0x0010 - 0x0000)
struct VPBlueprintLibrary_JumpToBookmarkInLevelEditor final
{
public:
	const class UVPBookmark*                      BookMark;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4714[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPBlueprintLibrary_JumpToBookmarkInLevelEditor) == 0x000008, "Wrong alignment on VPBlueprintLibrary_JumpToBookmarkInLevelEditor");
static_assert(sizeof(VPBlueprintLibrary_JumpToBookmarkInLevelEditor) == 0x000010, "Wrong size on VPBlueprintLibrary_JumpToBookmarkInLevelEditor");
static_assert(offsetof(VPBlueprintLibrary_JumpToBookmarkInLevelEditor, BookMark) == 0x000000, "Member 'VPBlueprintLibrary_JumpToBookmarkInLevelEditor::BookMark' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_JumpToBookmarkInLevelEditor, ReturnValue) == 0x000008, "Member 'VPBlueprintLibrary_JumpToBookmarkInLevelEditor::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.SetGrabSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPBlueprintLibrary_SetGrabSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_SetGrabSpeed) == 0x000004, "Wrong alignment on VPBlueprintLibrary_SetGrabSpeed");
static_assert(sizeof(VPBlueprintLibrary_SetGrabSpeed) == 0x000004, "Wrong size on VPBlueprintLibrary_SetGrabSpeed");
static_assert(offsetof(VPBlueprintLibrary_SetGrabSpeed, Speed) == 0x000000, "Member 'VPBlueprintLibrary_SetGrabSpeed::Speed' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.SpawnBookmarkAtCurrentLevelEditorPosition
// 0x0058 (0x0058 - 0x0000)
struct VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVPBookmarkCreationContext             CreationContext;                                   // 0x0008(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlattenRotation;                                  // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4715[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition) == 0x000008, "Wrong alignment on VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition");
static_assert(sizeof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition) == 0x000058, "Wrong size on VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition");
static_assert(offsetof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition, ActorClass) == 0x000000, "Member 'VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition::ActorClass' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition, CreationContext) == 0x000008, "Member 'VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition::CreationContext' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition, Offset) == 0x000030, "Member 'VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition::Offset' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition, bFlattenRotation) == 0x000048, "Member 'VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition::bFlattenRotation' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition, ReturnValue) == 0x000050, "Member 'VPBlueprintLibrary_SpawnBookmarkAtCurrentLevelEditorPosition::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.SpawnVPTickableActor
// 0x0048 (0x0048 - 0x0000)
struct VPBlueprintLibrary_SpawnVPTickableActor final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AVPViewportTickableActorBase> ActorClass;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AVPViewportTickableActorBase*           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_SpawnVPTickableActor) == 0x000008, "Wrong alignment on VPBlueprintLibrary_SpawnVPTickableActor");
static_assert(sizeof(VPBlueprintLibrary_SpawnVPTickableActor) == 0x000048, "Wrong size on VPBlueprintLibrary_SpawnVPTickableActor");
static_assert(offsetof(VPBlueprintLibrary_SpawnVPTickableActor, ContextObject) == 0x000000, "Member 'VPBlueprintLibrary_SpawnVPTickableActor::ContextObject' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnVPTickableActor, ActorClass) == 0x000008, "Member 'VPBlueprintLibrary_SpawnVPTickableActor::ActorClass' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnVPTickableActor, Location) == 0x000010, "Member 'VPBlueprintLibrary_SpawnVPTickableActor::Location' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnVPTickableActor, Rotation) == 0x000028, "Member 'VPBlueprintLibrary_SpawnVPTickableActor::Rotation' has a wrong offset!");
static_assert(offsetof(VPBlueprintLibrary_SpawnVPTickableActor, ReturnValue) == 0x000040, "Member 'VPBlueprintLibrary_SpawnVPTickableActor::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.VPBookmarkSplineMeshIndicatorDisable
// 0x0008 (0x0008 - 0x0000)
struct VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable final
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable) == 0x000008, "Wrong alignment on VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable");
static_assert(sizeof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable) == 0x000008, "Wrong size on VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable");
static_assert(offsetof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable, SplineMesh) == 0x000000, "Member 'VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorDisable::SplineMesh' has a wrong offset!");

// Function VPUtilities.VPBlueprintLibrary.VPBookmarkSplineMeshIndicatorSetStartAndEnd
// 0x0008 (0x0008 - 0x0000)
struct VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd final
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd) == 0x000008, "Wrong alignment on VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd");
static_assert(sizeof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd) == 0x000008, "Wrong size on VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd");
static_assert(offsetof(VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd, SplineMesh) == 0x000000, "Member 'VPBlueprintLibrary_VPBookmarkSplineMeshIndicatorSetStartAndEnd::SplineMesh' has a wrong offset!");

// Function VPUtilities.VPViewportTickableActorBase.EditorLockLocation
// 0x0001 (0x0001 - 0x0000)
struct VPViewportTickableActorBase_EditorLockLocation final
{
public:
	bool                                          bSetLockLocation;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPViewportTickableActorBase_EditorLockLocation) == 0x000001, "Wrong alignment on VPViewportTickableActorBase_EditorLockLocation");
static_assert(sizeof(VPViewportTickableActorBase_EditorLockLocation) == 0x000001, "Wrong size on VPViewportTickableActorBase_EditorLockLocation");
static_assert(offsetof(VPViewportTickableActorBase_EditorLockLocation, bSetLockLocation) == 0x000000, "Member 'VPViewportTickableActorBase_EditorLockLocation::bSetLockLocation' has a wrong offset!");

// Function VPUtilities.VPViewportTickableActorBase.EditorTick
// 0x0004 (0x0004 - 0x0000)
struct VPViewportTickableActorBase_EditorTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPViewportTickableActorBase_EditorTick) == 0x000004, "Wrong alignment on VPViewportTickableActorBase_EditorTick");
static_assert(sizeof(VPViewportTickableActorBase_EditorTick) == 0x000004, "Wrong size on VPViewportTickableActorBase_EditorTick");
static_assert(offsetof(VPViewportTickableActorBase_EditorTick, DeltaSeconds) == 0x000000, "Member 'VPViewportTickableActorBase_EditorTick::DeltaSeconds' has a wrong offset!");

// Function VPUtilities.VPBookmarkActor.OnBookmarkActivation_Implementation
// 0x0010 (0x0010 - 0x0000)
struct VPBookmarkActor_OnBookmarkActivation_Implementation final
{
public:
	class UVPBookmark*                            BookMark;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPBookmarkActor_OnBookmarkActivation_Implementation) == 0x000008, "Wrong alignment on VPBookmarkActor_OnBookmarkActivation_Implementation");
static_assert(sizeof(VPBookmarkActor_OnBookmarkActivation_Implementation) == 0x000010, "Wrong size on VPBookmarkActor_OnBookmarkActivation_Implementation");
static_assert(offsetof(VPBookmarkActor_OnBookmarkActivation_Implementation, BookMark) == 0x000000, "Member 'VPBookmarkActor_OnBookmarkActivation_Implementation::BookMark' has a wrong offset!");
static_assert(offsetof(VPBookmarkActor_OnBookmarkActivation_Implementation, bActivate) == 0x000008, "Member 'VPBookmarkActor_OnBookmarkActivation_Implementation::bActivate' has a wrong offset!");

// Function VPUtilities.VPBookmarkActor.OnBookmarkChanged_Implementation
// 0x0008 (0x0008 - 0x0000)
struct VPBookmarkActor_OnBookmarkChanged_Implementation final
{
public:
	class UVPBookmark*                            BookMark;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBookmarkActor_OnBookmarkChanged_Implementation) == 0x000008, "Wrong alignment on VPBookmarkActor_OnBookmarkChanged_Implementation");
static_assert(sizeof(VPBookmarkActor_OnBookmarkChanged_Implementation) == 0x000008, "Wrong size on VPBookmarkActor_OnBookmarkChanged_Implementation");
static_assert(offsetof(VPBookmarkActor_OnBookmarkChanged_Implementation, BookMark) == 0x000000, "Member 'VPBookmarkActor_OnBookmarkChanged_Implementation::BookMark' has a wrong offset!");

// Function VPUtilities.VPBookmarkActor.UpdateBookmarkColor
// 0x0010 (0x0010 - 0x0000)
struct VPBookmarkActor_UpdateBookmarkColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPBookmarkActor_UpdateBookmarkColor) == 0x000004, "Wrong alignment on VPBookmarkActor_UpdateBookmarkColor");
static_assert(sizeof(VPBookmarkActor_UpdateBookmarkColor) == 0x000010, "Wrong size on VPBookmarkActor_UpdateBookmarkColor");
static_assert(offsetof(VPBookmarkActor_UpdateBookmarkColor, Color) == 0x000000, "Member 'VPBookmarkActor_UpdateBookmarkColor::Color' has a wrong offset!");

// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromActors
// 0x0090 (0x0090 - 0x0000)
struct VPCameraBlueprintLibrary_SpawnCameraRigFromActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471B[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigTransform;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVPCameraRigSpawnParams                Params_0;                                          // 0x0080(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ACameraRig_Rail*                        ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors) == 0x000010, "Wrong alignment on VPCameraBlueprintLibrary_SpawnCameraRigFromActors");
static_assert(sizeof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors) == 0x000090, "Wrong size on VPCameraBlueprintLibrary_SpawnCameraRigFromActors");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors, WorldContextObject) == 0x000000, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors, RigTransform) == 0x000010, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromActors::RigTransform' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors, Actors) == 0x000070, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromActors::Actors' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors, Params_0) == 0x000080, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromActors::Params_0' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromActors, ReturnValue) == 0x000088, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromActors::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromPoints
// 0x0090 (0x0090 - 0x0000)
struct VPCameraBlueprintLibrary_SpawnCameraRigFromPoints final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471C[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigTransform;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Points;                                            // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVPCameraRigSpawnParams                Params_0;                                          // 0x0080(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ACameraRig_Rail*                        ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints) == 0x000010, "Wrong alignment on VPCameraBlueprintLibrary_SpawnCameraRigFromPoints");
static_assert(sizeof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints) == 0x000090, "Wrong size on VPCameraBlueprintLibrary_SpawnCameraRigFromPoints");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints, WorldContextObject) == 0x000000, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromPoints::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints, RigTransform) == 0x000010, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromPoints::RigTransform' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints, Points) == 0x000070, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromPoints::Points' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints, Params_0) == 0x000080, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromPoints::Params_0' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromPoints, ReturnValue) == 0x000088, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromPoints::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPCameraBlueprintLibrary.SpawnCameraRigFromSelectedActors
// 0x0080 (0x0080 - 0x0000)
struct VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471D[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigTransform;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVPCameraRigSpawnParams                Params_0;                                          // 0x0070(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ACameraRig_Rail*                        ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors) == 0x000010, "Wrong alignment on VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors");
static_assert(sizeof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors) == 0x000080, "Wrong size on VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors, WorldContextObject) == 0x000000, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors, RigTransform) == 0x000010, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors::RigTransform' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors, Params_0) == 0x000070, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors::Params_0' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors, ReturnValue) == 0x000078, "Member 'VPCameraBlueprintLibrary_SpawnCameraRigFromSelectedActors::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPCameraBlueprintLibrary.SpawnDollyTrackFromPoints
// 0x0028 (0x0028 - 0x0000)
struct VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Points;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ESplinePointType                              InterpType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471E[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraRig_Rail*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints) == 0x000008, "Wrong alignment on VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints");
static_assert(sizeof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints) == 0x000028, "Wrong size on VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints, WorldContextObject) == 0x000000, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints, Points) == 0x000008, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints::Points' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints, InterpType) == 0x000018, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints::InterpType' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints, ReturnValue) == 0x000020, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPoints::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPCameraBlueprintLibrary.SpawnDollyTrackFromPointsSmooth
// 0x0028 (0x0028 - 0x0000)
struct VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Points;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ESplinePointType                              InterpType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraRig_Rail*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth) == 0x000008, "Wrong alignment on VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth");
static_assert(sizeof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth) == 0x000028, "Wrong size on VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth, WorldContextObject) == 0x000000, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth, Points) == 0x000008, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth::Points' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth, InterpType) == 0x000018, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth::InterpType' has a wrong offset!");
static_assert(offsetof(VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth, ReturnValue) == 0x000020, "Member 'VPCameraBlueprintLibrary_SpawnDollyTrackFromPointsSmooth::ReturnValue' has a wrong offset!");

// Function VPUtilities.FullScreenUserWidgetActor.GetUserWidget
// 0x0008 (0x0008 - 0x0000)
struct FullScreenUserWidgetActor_GetUserWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FullScreenUserWidgetActor_GetUserWidget) == 0x000008, "Wrong alignment on FullScreenUserWidgetActor_GetUserWidget");
static_assert(sizeof(FullScreenUserWidgetActor_GetUserWidget) == 0x000008, "Wrong size on FullScreenUserWidgetActor_GetUserWidget");
static_assert(offsetof(FullScreenUserWidgetActor_GetUserWidget, ReturnValue) == 0x000000, "Member 'FullScreenUserWidgetActor_GetUserWidget::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPGameMode.GetRootActor
// 0x0008 (0x0008 - 0x0000)
struct VPGameMode_GetRootActor final
{
public:
	class AVPRootActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPGameMode_GetRootActor) == 0x000008, "Wrong alignment on VPGameMode_GetRootActor");
static_assert(sizeof(VPGameMode_GetRootActor) == 0x000008, "Wrong size on VPGameMode_GetRootActor");
static_assert(offsetof(VPGameMode_GetRootActor, ReturnValue) == 0x000000, "Member 'VPGameMode_GetRootActor::ReturnValue' has a wrong offset!");

// Function VPUtilities.VPRenderingBlueprintLibrary.GenerateSceneViewExtensionIsActiveFunctorForViewportType
// 0x0060 (0x0060 - 0x0000)
struct VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType final
{
public:
	struct FSceneViewExtensionIsActiveFunctor     OutIsActiveFunction;                               // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bPIE;                                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSIE;                                              // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditorActive;                                     // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamePrimary;                                      // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4722[0xC];                                     // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType) == 0x000010, "Wrong alignment on VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType");
static_assert(sizeof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType) == 0x000060, "Wrong size on VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType");
static_assert(offsetof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType, OutIsActiveFunction) == 0x000000, "Member 'VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType::OutIsActiveFunction' has a wrong offset!");
static_assert(offsetof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType, bPIE) == 0x000050, "Member 'VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType::bPIE' has a wrong offset!");
static_assert(offsetof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType, bSIE) == 0x000051, "Member 'VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType::bSIE' has a wrong offset!");
static_assert(offsetof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType, bEditorActive) == 0x000052, "Member 'VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType::bEditorActive' has a wrong offset!");
static_assert(offsetof(VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType, bGamePrimary) == 0x000053, "Member 'VPRenderingBlueprintLibrary_GenerateSceneViewExtensionIsActiveFunctorForViewportType::bGamePrimary' has a wrong offset!");

// Function VPUtilities.VPRootActor.GetCineCameraActor
// 0x0008 (0x0008 - 0x0000)
struct VPRootActor_GetCineCameraActor final
{
public:
	class ACineCameraActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPRootActor_GetCineCameraActor) == 0x000008, "Wrong alignment on VPRootActor_GetCineCameraActor");
static_assert(sizeof(VPRootActor_GetCineCameraActor) == 0x000008, "Wrong size on VPRootActor_GetCineCameraActor");
static_assert(offsetof(VPRootActor_GetCineCameraActor, ReturnValue) == 0x000000, "Member 'VPRootActor_GetCineCameraActor::ReturnValue' has a wrong offset!");

}

