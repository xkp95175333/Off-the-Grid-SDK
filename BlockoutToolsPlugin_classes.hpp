#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlockoutToolsPlugin

#include "Basic.hpp"

#include "BlockoutToolsPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class BlockoutToolsPlugin.BlockoutToolsParent
// 0x0088 (0x0328 - 0x02A0)
class ABlockoutToolsParent final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    Billboard;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutGridParent;                                // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               BlockoutGridMID;                                   // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutCurrentMaterial;                           // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           BlockoutMeshComponents;                            // 0x02C8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBlockoutMaterialType                         BlockoutMaterialType;                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D55[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialColor;                             // 0x02DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseGrid;                          // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D56[0x3];                                     // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockoutMaterialGridSize;                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockoutMaterialCheckerLuminance;                  // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseTopColor;                      // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D57[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialTopColor;                          // 0x02FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomMaterial;                                // 0x030C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D58[0x3];                                     // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CustomMaterial;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutCustomMaterial;                            // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutEnableCollisions;                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutCastShadows;                              // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D59[0x6];                                     // 0x0322(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlockoutSetMaterial();
	void RerunConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockoutToolsParent">();
	}
	static class ABlockoutToolsParent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlockoutToolsParent>();
	}
};
static_assert(alignof(ABlockoutToolsParent) == 0x000008, "Wrong alignment on ABlockoutToolsParent");
static_assert(sizeof(ABlockoutToolsParent) == 0x000328, "Wrong size on ABlockoutToolsParent");
static_assert(offsetof(ABlockoutToolsParent, Root) == 0x0002A0, "Member 'ABlockoutToolsParent::Root' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, Billboard) == 0x0002A8, "Member 'ABlockoutToolsParent::Billboard' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutGridParent) == 0x0002B0, "Member 'ABlockoutToolsParent::BlockoutGridParent' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutGridMID) == 0x0002B8, "Member 'ABlockoutToolsParent::BlockoutGridMID' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutCurrentMaterial) == 0x0002C0, "Member 'ABlockoutToolsParent::BlockoutCurrentMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMeshComponents) == 0x0002C8, "Member 'ABlockoutToolsParent::BlockoutMeshComponents' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialType) == 0x0002D8, "Member 'ABlockoutToolsParent::BlockoutMaterialType' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialColor) == 0x0002DC, "Member 'ABlockoutToolsParent::BlockoutMaterialColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutMaterialUseGrid) == 0x0002EC, "Member 'ABlockoutToolsParent::bBlockoutMaterialUseGrid' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialGridSize) == 0x0002F0, "Member 'ABlockoutToolsParent::BlockoutMaterialGridSize' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialCheckerLuminance) == 0x0002F4, "Member 'ABlockoutToolsParent::BlockoutMaterialCheckerLuminance' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutMaterialUseTopColor) == 0x0002F8, "Member 'ABlockoutToolsParent::bBlockoutMaterialUseTopColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialTopColor) == 0x0002FC, "Member 'ABlockoutToolsParent::BlockoutMaterialTopColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bUseCustomMaterial) == 0x00030C, "Member 'ABlockoutToolsParent::bUseCustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, CustomMaterial) == 0x000310, "Member 'ABlockoutToolsParent::CustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutCustomMaterial) == 0x000318, "Member 'ABlockoutToolsParent::BlockoutCustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutEnableCollisions) == 0x000320, "Member 'ABlockoutToolsParent::bBlockoutEnableCollisions' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutCastShadows) == 0x000321, "Member 'ABlockoutToolsParent::bBlockoutCastShadows' has a wrong offset!");

}

