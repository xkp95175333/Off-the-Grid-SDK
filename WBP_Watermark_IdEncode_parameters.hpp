#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Watermark_IdEncode

#include "Basic.hpp"


namespace SDK::Params
{

// Function WBP_Watermark_IdEncode.WBP_Watermark_IdEncode_C.ExecuteUbergraph_WBP_Watermark_IdEncode
// 0x0088 (0x0088 - 0x0000)
struct WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B6F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AGzPlayerController* PlayerController, class AGzPlayerState* PlayerState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B70[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    K2Node_DynamicCast_AsGz_Player_Controller;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B71[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    K2Node_CustomEvent_PlayerController;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B72[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayFabId_ReturnValue;                 // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGzPlayerState*                         K2Node_DynamicCast_AsGz_Player_State;              // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B73[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayFabId_ReturnValue_1;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode) == 0x000008, "Wrong alignment on WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode");
static_assert(sizeof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode) == 0x000088, "Wrong size on WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, EntryPoint) == 0x000000, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_DynamicCast_AsGz_Player_Controller) == 0x000028, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_DynamicCast_AsGz_Player_Controller' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_CustomEvent_PlayerController) == 0x000038, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_CustomEvent_PlayerController' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_CustomEvent_PlayerState) == 0x000040, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_GetPlayFabId_ReturnValue) == 0x000050, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_GetPlayFabId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_DynamicCast_AsGz_Player_State) == 0x000060, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_DynamicCast_AsGz_Player_State' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_IsEmpty_ReturnValue) == 0x000069, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_GetPlayFabId_ReturnValue_1) == 0x000070, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_GetPlayFabId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, CallFunc_IsEmpty_ReturnValue_1) == 0x000080, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::CallFunc_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode, K2Node_Event_IsDesignTime) == 0x000081, "Member 'WBP_Watermark_IdEncode_C_ExecuteUbergraph_WBP_Watermark_IdEncode::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_Watermark_IdEncode.WBP_Watermark_IdEncode_C.On Controller Init
// 0x0010 (0x0010 - 0x0000)
struct WBP_Watermark_IdEncode_C_On_Controller_Init final
{
public:
	class AGzPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Watermark_IdEncode_C_On_Controller_Init) == 0x000008, "Wrong alignment on WBP_Watermark_IdEncode_C_On_Controller_Init");
static_assert(sizeof(WBP_Watermark_IdEncode_C_On_Controller_Init) == 0x000010, "Wrong size on WBP_Watermark_IdEncode_C_On_Controller_Init");
static_assert(offsetof(WBP_Watermark_IdEncode_C_On_Controller_Init, PlayerController) == 0x000000, "Member 'WBP_Watermark_IdEncode_C_On_Controller_Init::PlayerController' has a wrong offset!");
static_assert(offsetof(WBP_Watermark_IdEncode_C_On_Controller_Init, PlayerState) == 0x000008, "Member 'WBP_Watermark_IdEncode_C_On_Controller_Init::PlayerState' has a wrong offset!");

// Function WBP_Watermark_IdEncode.WBP_Watermark_IdEncode_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Watermark_IdEncode_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Watermark_IdEncode_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Watermark_IdEncode_C_PreConstruct");
static_assert(sizeof(WBP_Watermark_IdEncode_C_PreConstruct) == 0x000001, "Wrong size on WBP_Watermark_IdEncode_C_PreConstruct");
static_assert(offsetof(WBP_Watermark_IdEncode_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Watermark_IdEncode_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

