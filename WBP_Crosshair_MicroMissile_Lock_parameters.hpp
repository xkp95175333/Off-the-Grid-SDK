#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_MicroMissile_Lock

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock
// 0x0030 (0x0030 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AE9[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock) == 0x000030, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock, Temp_bool_Variable) == 0x000004, "Member 'WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock, K2Node_Select_Default) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_Lock_C_ExecuteUbergraph_WBP_Crosshair_MicroMissile_Lock::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.OnLockOnStatusChanged
// 0x0060 (0x0060 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged final
{
public:
	bool                                          bNewLocking;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AEA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Progress;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AEB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AEC[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPlaybackSpeed_PlaybackSpeed;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AED[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_1;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AEE[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_0_ImplicitCast;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged) == 0x000060, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, bNewLocking) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::bNewLocking' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, Progress) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::Progress' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, Temp_byte_Variable) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000029, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, Temp_byte_Variable_1) == 0x00002A, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, Temp_bool_Variable) == 0x00002B, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, Temp_bool_Variable_1) == 0x00002C, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_GetPlaybackSpeed_PlaybackSpeed) == 0x000030, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_GetPlaybackSpeed_PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_BooleanAND_ReturnValue_1) == 0x000038, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_BooleanOR_ReturnValue) == 0x000039, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, K2Node_Select_Default) == 0x00003C, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, K2Node_Select_Default_1) == 0x000040, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_PlayAnimation_ReturnValue) == 0x000048, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, K2Node_Select_Option_1_ImplicitCast) == 0x000050, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, K2Node_Select_Option_0_ImplicitCast) == 0x000054, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast) == 0x000058, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnLockOnStatusChanged::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.OnTargetingStopped
// 0x0004 (0x0004 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped final
{
public:
	float                                         CallFunc_PauseAnimation_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped) == 0x000004, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped) == 0x000004, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped, CallFunc_PauseAnimation_ReturnValue) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_OnTargetingStopped::CallFunc_PauseAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.StartLockOnTarget
// 0x0018 (0x0018 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget final
{
public:
	double                                        CallFunc_GetPlaybackSpeed_PlaybackSpeed;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimationForward_PlaybackSpeed_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget) == 0x000018, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget, CallFunc_GetPlaybackSpeed_PlaybackSpeed) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget::CallFunc_GetPlaybackSpeed_PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget, CallFunc_PlayAnimationForward_PlaybackSpeed_ImplicitCast) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_Lock_C_StartLockOnTarget::CallFunc_PlayAnimationForward_PlaybackSpeed_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.UpdateStatus
// 0x0010 (0x0010 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsToContinueTick;                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus) == 0x000010, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus, DeltaTime) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus::DeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus, NeedsToContinueTick) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_Lock_C_UpdateStatus::NeedsToContinueTick' has a wrong offset!");

// Function WBP_Crosshair_MicroMissile_Lock.WBP_Crosshair_MicroMissile_Lock_C.GetPlaybackSpeed
// 0x0028 (0x0028 - 0x0000)
struct WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed final
{
public:
	double                                        PlaybackSpeed;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AEF[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AF0[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed) == 0x000008, "Wrong alignment on WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed");
static_assert(sizeof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed) == 0x000028, "Wrong size on WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, PlaybackSpeed) == 0x000000, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, Temp_bool_Variable) == 0x000008, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000009, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x00000A, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, K2Node_Select_Default) == 0x000010, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_MicroMissile_Lock_C_GetPlaybackSpeed::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

}

