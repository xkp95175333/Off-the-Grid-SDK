#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_MicroMissiles

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C
// 0x0058 (0x0348 - 0x02F0)
class UWBP_Crosshair_Cyberlimbs_MicroMissiles_C final : public UGzLimbCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_Crosshair_LimbCharges_C*           AvailableChargesIndication;                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Crosshair_DumbFire;                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Crosshair_LockFire;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        CrosshairSwitcher;                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_MicroMissile_LocksContainer_C* LocksContainerWidget;                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           NoTarget_Text;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzGA_BaseLimbAbility*                  CachedLimbAbility;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeIndicatorPadding;                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockedOn;                                          // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D8F[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockedTargets;                                     // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   ActivationLimbType;                                // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles(int32 EntryPoint);
	void InitAvailableChargesIndication();
	void InitLocksContainer();
	void OnLimbActivated(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData);
	void OnLimbActivationEnded(EGzLimbType LimbType);
	void OnLockOnInterrupted(const struct FGzMicroMissiles_LockOnTarget& TargetData);
	void OnLockOnStarted(const struct FGzMicroMissiles_LockOnTarget& TargetData);
	void OnLockOnStatusChanged(const struct FGzMicroMissiles_LockOnTarget& TargetData);
	void OnLockSuccess(const struct FGzMicroMissiles_LockOnTarget& TargetData);
	void OnTargetingStopped();
	void SetLockedOnTargets(bool ToAdd);

	void IsUsingLockOnLocation(struct FGzMicroMissiles_LockOnTarget& TargetData, bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Crosshair_Cyberlimbs_MicroMissiles_C">();
	}
	static class UWBP_Crosshair_Cyberlimbs_MicroMissiles_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Crosshair_Cyberlimbs_MicroMissiles_C>();
	}
};
static_assert(alignof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C) == 0x000008, "Wrong alignment on UWBP_Crosshair_Cyberlimbs_MicroMissiles_C");
static_assert(sizeof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C) == 0x000348, "Wrong size on UWBP_Crosshair_Cyberlimbs_MicroMissiles_C");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, AvailableChargesIndication) == 0x0002F8, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::AvailableChargesIndication' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, Crosshair_DumbFire) == 0x000300, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::Crosshair_DumbFire' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, Crosshair_LockFire) == 0x000308, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::Crosshair_LockFire' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, CrosshairSwitcher) == 0x000310, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::CrosshairSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, LocksContainerWidget) == 0x000318, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::LocksContainerWidget' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, NoTarget_Text) == 0x000320, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::NoTarget_Text' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, CachedLimbAbility) == 0x000328, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::CachedLimbAbility' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, ChargeIndicatorPadding) == 0x000330, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::ChargeIndicatorPadding' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, LockedOn) == 0x000338, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::LockedOn' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, LockedTargets) == 0x00033C, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::LockedTargets' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_MicroMissiles_C, ActivationLimbType) == 0x000340, "Member 'UWBP_Crosshair_Cyberlimbs_MicroMissiles_C::ActivationLimbType' has a wrong offset!");

}

