#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaceAlongSpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlaceAlongSpline.BP_PlaceAlongSpline_C
// 0x0080 (0x0320 - 0x02A0)
class ABP_PlaceAlongSpline_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    SplineMesh;                                        // 0x02B0(0x0010)(Edit, BlueprintVisible)
	bool                                          ClosedLoop;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B6B[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNumObjects;                                     // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B6C[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LengthPerMesh;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumObjects;                                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCollision;                                      // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B6D[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Scale_Min;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Max;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlignPitchToSpline;                                // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Randomize_Yaw;                                     // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Off;                                               // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B6E[0x5];                                     // 0x0303(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInstancedStaticMeshComponent*>  InstComponentPerMesh;                              // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          RandomizeMeshSelection;                            // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlaceAlongSpline_C">();
	}
	static class ABP_PlaceAlongSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlaceAlongSpline_C>();
	}
};
static_assert(alignof(ABP_PlaceAlongSpline_C) == 0x000008, "Wrong alignment on ABP_PlaceAlongSpline_C");
static_assert(sizeof(ABP_PlaceAlongSpline_C) == 0x000320, "Wrong size on ABP_PlaceAlongSpline_C");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Spline) == 0x0002A0, "Member 'ABP_PlaceAlongSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_PlaceAlongSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, SplineMesh) == 0x0002B0, "Member 'ABP_PlaceAlongSpline_C::SplineMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, ClosedLoop) == 0x0002C0, "Member 'ABP_PlaceAlongSpline_C::ClosedLoop' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Distance) == 0x0002C8, "Member 'ABP_PlaceAlongSpline_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, UseNumObjects) == 0x0002D0, "Member 'ABP_PlaceAlongSpline_C::UseNumObjects' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, LengthPerMesh) == 0x0002D8, "Member 'ABP_PlaceAlongSpline_C::LengthPerMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, NumObjects) == 0x0002E0, "Member 'ABP_PlaceAlongSpline_C::NumObjects' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, LastIndex) == 0x0002E4, "Member 'ABP_PlaceAlongSpline_C::LastIndex' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, HasCollision) == 0x0002E8, "Member 'ABP_PlaceAlongSpline_C::HasCollision' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Scale_Min) == 0x0002F0, "Member 'ABP_PlaceAlongSpline_C::Scale_Min' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Scale_Max) == 0x0002F8, "Member 'ABP_PlaceAlongSpline_C::Scale_Max' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, AlignPitchToSpline) == 0x000300, "Member 'ABP_PlaceAlongSpline_C::AlignPitchToSpline' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Randomize_Yaw) == 0x000301, "Member 'ABP_PlaceAlongSpline_C::Randomize_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, Off) == 0x000302, "Member 'ABP_PlaceAlongSpline_C::Off' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, InstComponentPerMesh) == 0x000308, "Member 'ABP_PlaceAlongSpline_C::InstComponentPerMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlaceAlongSpline_C, RandomizeMeshSelection) == 0x000318, "Member 'ABP_PlaceAlongSpline_C::RandomizeMeshSelection' has a wrong offset!");

}

