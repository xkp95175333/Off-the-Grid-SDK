#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineCore

#include "Basic.hpp"

#include "OpenColorIO_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "UMG_classes.hpp"
#include "StructUtils_structs.hpp"
#include "MovieRenderPipelineCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MovieRenderPipelineCore.MovieGraphNode
// 0x0070 (0x0098 - 0x0028)
class UMovieGraphNode : public UObject
{
public:
	uint8                                         Pad_44A0[0x18];                                    // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieGraphPin*>                 InputPins;                                         // 0x0040(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UMovieGraphPin*>                 OutputPins;                                        // 0x0050(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FInstancedPropertyBag                  DynamicProperties;                                 // 0x0060(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMovieGraphPropertyInfo>        ExposedPropertyInfo;                               // 0x0070(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bIsDisabled : 1;                                   // 0x0080(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_44A1[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44A2[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TogglePromotePropertyToPin(const class FName& PropertyName);

	TArray<struct FMovieGraphPropertyInfo> GetExposedProperties() const;
	class UMovieGraphPin* GetInputPin(const class FName& InPinLabel, const EMovieGraphPinQueryRequirement PinRequirement) const;
	class UMovieGraphPin* GetOutputPin(const class FName& InPinLabel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphNode">();
	}
	static class UMovieGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphNode>();
	}
};
static_assert(alignof(UMovieGraphNode) == 0x000008, "Wrong alignment on UMovieGraphNode");
static_assert(sizeof(UMovieGraphNode) == 0x000098, "Wrong size on UMovieGraphNode");
static_assert(offsetof(UMovieGraphNode, InputPins) == 0x000040, "Member 'UMovieGraphNode::InputPins' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, OutputPins) == 0x000050, "Member 'UMovieGraphNode::OutputPins' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, DynamicProperties) == 0x000060, "Member 'UMovieGraphNode::DynamicProperties' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, ExposedPropertyInfo) == 0x000070, "Member 'UMovieGraphNode::ExposedPropertyInfo' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, Guid) == 0x000084, "Member 'UMovieGraphNode::Guid' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSettingNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphSettingNode : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSettingNode">();
	}
	static class UMovieGraphSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSettingNode>();
	}
};
static_assert(alignof(UMovieGraphSettingNode) == 0x000008, "Wrong alignment on UMovieGraphSettingNode");
static_assert(sizeof(UMovieGraphSettingNode) == 0x000098, "Wrong size on UMovieGraphSettingNode");

// Class MovieRenderPipelineCore.MovieGraphApplyCVarPresetNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphApplyCVarPresetNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_ConsoleVariablePreset : 1;               // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44A4[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMovieSceneConsoleVariableTrackInterface> ConsoleVariablePreset;                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphApplyCVarPresetNode">();
	}
	static class UMovieGraphApplyCVarPresetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphApplyCVarPresetNode>();
	}
};
static_assert(alignof(UMovieGraphApplyCVarPresetNode) == 0x000008, "Wrong alignment on UMovieGraphApplyCVarPresetNode");
static_assert(sizeof(UMovieGraphApplyCVarPresetNode) == 0x0000B0, "Wrong size on UMovieGraphApplyCVarPresetNode");
static_assert(offsetof(UMovieGraphApplyCVarPresetNode, ConsoleVariablePreset) == 0x0000A0, "Member 'UMovieGraphApplyCVarPresetNode::ConsoleVariablePreset' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphFileOutputNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphFileOutputNode : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_FileNameFormat : 1;                      // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44A5[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameFormat;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphFileOutputNode">();
	}
	static class UMovieGraphFileOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphFileOutputNode>();
	}
};
static_assert(alignof(UMovieGraphFileOutputNode) == 0x000008, "Wrong alignment on UMovieGraphFileOutputNode");
static_assert(sizeof(UMovieGraphFileOutputNode) == 0x0000B0, "Wrong size on UMovieGraphFileOutputNode");
static_assert(offsetof(UMovieGraphFileOutputNode, FileNameFormat) == 0x0000A0, "Member 'UMovieGraphFileOutputNode::FileNameFormat' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphAudioOutputNode
// 0x0010 (0x00C0 - 0x00B0)
class UMovieGraphAudioOutputNode final : public UMovieGraphFileOutputNode
{
public:
	uint8                                         Pad_44A6[0x10];                                    // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphAudioOutputNode">();
	}
	static class UMovieGraphAudioOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphAudioOutputNode>();
	}
};
static_assert(alignof(UMovieGraphAudioOutputNode) == 0x000008, "Wrong alignment on UMovieGraphAudioOutputNode");
static_assert(sizeof(UMovieGraphAudioOutputNode) == 0x0000C0, "Wrong size on UMovieGraphAudioOutputNode");

// Class MovieRenderPipelineCore.MovieGraphBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMovieGraphBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetCompletionPercentage(const class UMovieGraphPipeline* InPipeline);
	static float GetCurrentAperture(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static class UCineCameraComponent* GetCurrentCineCamera(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static float GetCurrentFocalLength(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static float GetCurrentFocusDistance(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static void GetCurrentSegmentName(const class UMovieGraphPipeline* InMovieGraphPipeline, class FText* OutOuterName, class FText* OutInnerName);
	static EMovieRenderShotState GetCurrentSegmentState(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FMoviePipelineSegmentWorkMetrics GetCurrentSegmentWorkMetrics(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FFrameNumber GetCurrentShotFrameNumber(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FTimecode GetCurrentShotTimecode(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FFrameRate GetEffectiveFrameRate(class UMovieGraphGlobalOutputSettingNode* InNode, const struct FFrameRate& InDefaultRate);
	static struct FIntPoint GetEffectiveOutputResolution(class UMovieGraphEvaluatedConfig* InEvaluatedGraph);
	static bool GetEstimatedTimeRemaining(const class UMovieGraphPipeline* InMovieGraphPipeline, struct FTimespan* OutEstimate);
	static class FText GetJobAuthor(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FDateTime GetJobInitializationTime(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static class FText GetJobName(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static void GetOverallOutputFrames(const class UMovieGraphPipeline* InMovieGraphPipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static void GetOverallSegmentCounts(const class UMovieGraphPipeline* InMovieGraphPipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static EMovieRenderPipelineState GetPipelineState(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FFrameNumber GetRootFrameNumber(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static struct FTimecode GetRootTimecode(const class UMovieGraphPipeline* InMovieGraphPipeline);
	static bool IsNamedResolutionValid(const class FName& InResolutionProfileName);
	static struct FMovieGraphNamedResolution NamedResolutionFromProfile(const class FName& InResolutionProfileName);
	static struct FMovieGraphNamedResolution NamedResolutionFromSize(const int32 InResX, const int32 InResY);
	static class FString ResolveFilenameFormatArguments(const class FString& InFormatString, const struct FMovieGraphFilenameResolveParams& InParams, struct FMovieGraphResolveArgs* OutMergedFormatArgs);
	static int32 ResolveVersionNumber(const struct FMovieGraphFilenameResolveParams& InParams, const bool bGetNextVersion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBlueprintLibrary">();
	}
	static class UMovieGraphBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBlueprintLibrary>();
	}
};
static_assert(alignof(UMovieGraphBlueprintLibrary) == 0x000008, "Wrong alignment on UMovieGraphBlueprintLibrary");
static_assert(sizeof(UMovieGraphBlueprintLibrary) == 0x000028, "Wrong size on UMovieGraphBlueprintLibrary");

// Class MovieRenderPipelineCore.MovieGraphBranchNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphBranchNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBranchNode">();
	}
	static class UMovieGraphBranchNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBranchNode>();
	}
};
static_assert(alignof(UMovieGraphBranchNode) == 0x000008, "Wrong alignment on UMovieGraphBranchNode");
static_assert(sizeof(UMovieGraphBranchNode) == 0x000098, "Wrong size on UMovieGraphBranchNode");

// Class MovieRenderPipelineCore.MovieGraphRenderPassNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphRenderPassNode : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderPassNode">();
	}
	static class UMovieGraphRenderPassNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderPassNode>();
	}
};
static_assert(alignof(UMovieGraphRenderPassNode) == 0x000008, "Wrong alignment on UMovieGraphRenderPassNode");
static_assert(sizeof(UMovieGraphRenderPassNode) == 0x000098, "Wrong size on UMovieGraphRenderPassNode");

// Class MovieRenderPipelineCore.MovieGraphWidgetRendererBaseNode
// 0x0078 (0x0110 - 0x0098)
class UMovieGraphWidgetRendererBaseNode : public UMovieGraphRenderPassNode
{
public:
	uint8                                         bOverride_bCompositeOntoFinalImage : 1;            // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bCompositeOntoFinalImage;                          // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44B4[0x76];                                    // 0x009A(0x0076)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphWidgetRendererBaseNode">();
	}
	static class UMovieGraphWidgetRendererBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphWidgetRendererBaseNode>();
	}
};
static_assert(alignof(UMovieGraphWidgetRendererBaseNode) == 0x000008, "Wrong alignment on UMovieGraphWidgetRendererBaseNode");
static_assert(sizeof(UMovieGraphWidgetRendererBaseNode) == 0x000110, "Wrong size on UMovieGraphWidgetRendererBaseNode");
static_assert(offsetof(UMovieGraphWidgetRendererBaseNode, bCompositeOntoFinalImage) == 0x000099, "Member 'UMovieGraphWidgetRendererBaseNode::bCompositeOntoFinalImage' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphBurnInNode
// 0x0078 (0x0188 - 0x0110)
class UMovieGraphBurnInNode final : public UMovieGraphWidgetRendererBaseNode
{
public:
	uint8                                         bOverride_BurnInClass : 1;                         // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44B5[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         BurnInClass;                                       // 0x0118(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UClass*, class UMovieGraphBurnInWidget*> BurnInWidgetInstances;                             // 0x0138(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBurnInNode">();
	}
	static class UMovieGraphBurnInNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBurnInNode>();
	}
};
static_assert(alignof(UMovieGraphBurnInNode) == 0x000008, "Wrong alignment on UMovieGraphBurnInNode");
static_assert(sizeof(UMovieGraphBurnInNode) == 0x000188, "Wrong size on UMovieGraphBurnInNode");
static_assert(offsetof(UMovieGraphBurnInNode, BurnInClass) == 0x000118, "Member 'UMovieGraphBurnInNode::BurnInClass' has a wrong offset!");
static_assert(offsetof(UMovieGraphBurnInNode, BurnInWidgetInstances) == 0x000138, "Member 'UMovieGraphBurnInNode::BurnInWidgetInstances' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphBurnInWidget
// 0x0000 (0x02E0 - 0x02E0)
class UMovieGraphBurnInWidget final : public UUserWidget
{
public:
	void UpdateForGraph(class UMovieGraphPipeline* InGraphPipeline, class UMovieGraphEvaluatedConfig* InEvaluatedConfig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBurnInWidget">();
	}
	static class UMovieGraphBurnInWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBurnInWidget>();
	}
};
static_assert(alignof(UMovieGraphBurnInWidget) == 0x000008, "Wrong alignment on UMovieGraphBurnInWidget");
static_assert(sizeof(UMovieGraphBurnInWidget) == 0x0002E0, "Wrong size on UMovieGraphBurnInWidget");

// Class MovieRenderPipelineCore.MovieGraphCameraSettingNode
// 0x0008 (0x00A0 - 0x0098)
class UMovieGraphCameraSettingNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_ShutterTiming : 1;                       // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverscanPercentage : 1;                  // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMoviePipelineShutterTiming                   ShutterTiming;                                     // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44B6[0x2];                                     // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverscanPercentage;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCameraSettingNode">();
	}
	static class UMovieGraphCameraSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCameraSettingNode>();
	}
};
static_assert(alignof(UMovieGraphCameraSettingNode) == 0x000008, "Wrong alignment on UMovieGraphCameraSettingNode");
static_assert(sizeof(UMovieGraphCameraSettingNode) == 0x0000A0, "Wrong size on UMovieGraphCameraSettingNode");
static_assert(offsetof(UMovieGraphCameraSettingNode, ShutterTiming) == 0x000099, "Member 'UMovieGraphCameraSettingNode::ShutterTiming' has a wrong offset!");
static_assert(offsetof(UMovieGraphCameraSettingNode, OverscanPercentage) == 0x00009C, "Member 'UMovieGraphCameraSettingNode::OverscanPercentage' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphCollectionNode
// 0x0010 (0x00A8 - 0x0098)
class UMovieGraphCollectionNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_Collection : 1;                          // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44B7[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieGraphCollection*                  Collection;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCollectionNode">();
	}
	static class UMovieGraphCollectionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCollectionNode>();
	}
};
static_assert(alignof(UMovieGraphCollectionNode) == 0x000008, "Wrong alignment on UMovieGraphCollectionNode");
static_assert(sizeof(UMovieGraphCollectionNode) == 0x0000A8, "Wrong size on UMovieGraphCollectionNode");
static_assert(offsetof(UMovieGraphCollectionNode, Collection) == 0x0000A0, "Member 'UMovieGraphCollectionNode::Collection' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphCommandLineEncoderNode
// 0x00A0 (0x0138 - 0x0098)
class UMovieGraphCommandLineEncoderNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         Pad_44B8[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_FileNameFormat : 1;                      // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDeleteSourceFiles : 1;                  // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bSkipEncodeOnRenderCanceled : 1;         // 0x00A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VideoCodec : 1;                          // 0x00A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AudioCodec : 1;                          // 0x00A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OutputFileExtension : 1;                 // 0x00A0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CommandLineFormat : 1;                   // 0x00A0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VideoInputStringFormat : 1;              // 0x00A0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AudioInputStringFormat : 1;              // 0x00A1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EncodeSettings : 1;                      // 0x00A1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bRetainInputTextFiles : 1;               // 0x00A1(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44B9[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameFormat;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteSourceFiles;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEncodeOnRenderCanceled;                       // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44BA[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoCodec;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioCodec;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFileExtension;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineFormat;                                 // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoInputStringFormat;                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioInputStringFormat;                            // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainInputTextFiles;                             // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44BB[0x7];                                     // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCommandLineEncoderNode">();
	}
	static class UMovieGraphCommandLineEncoderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCommandLineEncoderNode>();
	}
};
static_assert(alignof(UMovieGraphCommandLineEncoderNode) == 0x000008, "Wrong alignment on UMovieGraphCommandLineEncoderNode");
static_assert(sizeof(UMovieGraphCommandLineEncoderNode) == 0x000138, "Wrong size on UMovieGraphCommandLineEncoderNode");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, FileNameFormat) == 0x0000A8, "Member 'UMovieGraphCommandLineEncoderNode::FileNameFormat' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, bDeleteSourceFiles) == 0x0000B8, "Member 'UMovieGraphCommandLineEncoderNode::bDeleteSourceFiles' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, bSkipEncodeOnRenderCanceled) == 0x0000B9, "Member 'UMovieGraphCommandLineEncoderNode::bSkipEncodeOnRenderCanceled' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, VideoCodec) == 0x0000C0, "Member 'UMovieGraphCommandLineEncoderNode::VideoCodec' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, AudioCodec) == 0x0000D0, "Member 'UMovieGraphCommandLineEncoderNode::AudioCodec' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, OutputFileExtension) == 0x0000E0, "Member 'UMovieGraphCommandLineEncoderNode::OutputFileExtension' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, CommandLineFormat) == 0x0000F0, "Member 'UMovieGraphCommandLineEncoderNode::CommandLineFormat' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, VideoInputStringFormat) == 0x000100, "Member 'UMovieGraphCommandLineEncoderNode::VideoInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, AudioInputStringFormat) == 0x000110, "Member 'UMovieGraphCommandLineEncoderNode::AudioInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, EncodeSettings) == 0x000120, "Member 'UMovieGraphCommandLineEncoderNode::EncodeSettings' has a wrong offset!");
static_assert(offsetof(UMovieGraphCommandLineEncoderNode, bRetainInputTextFiles) == 0x000130, "Member 'UMovieGraphCommandLineEncoderNode::bRetainInputTextFiles' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphValueContainer
// 0x0018 (0x0040 - 0x0028)
class UMovieGraphValueContainer : public UObject
{
public:
	class FName                                   PropertyName;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInstancedPropertyBag                  Value;                                             // 0x0030(0x0010)(Edit, NativeAccessSpecifierPrivate)

public:
	class FString GetValueSerializedString();
	bool SetValueBool(const bool bInValue);
	bool SetValueByte(const uint8 InValue);
	bool SetValueClass(class UClass* InValue);
	void SetValueContainerType(EMovieGraphContainerType ContainerType);
	bool SetValueDouble(const double InValue);
	bool SetValueEnum(const uint8 InValue, const class UEnum* Enum);
	bool SetValueFloat(const float InValue);
	bool SetValueInt32(const int32 InValue);
	bool SetValueInt64(const int64 InValue);
	bool SetValueName(const class FName InValue);
	bool SetValueObject(class UObject* InValue);
	bool SetValueSerializedString(const class FString& NewValue);
	bool SetValueString(const class FString& InValue);
	bool SetValueText(const class FText& InValue);
	void SetValueType(EMovieGraphValueType ValueType, class UObject* InValueTypeObject);
	void SetValueTypeObject(const class UObject* ValueTypeObject);

	bool GetValueBool(bool* bOutValue) const;
	bool GetValueByte(uint8* OutValue) const;
	bool GetValueClass(class UClass** OutValue) const;
	EMovieGraphContainerType GetValueContainerType() const;
	bool GetValueDouble(double* OutValue) const;
	bool GetValueEnum(uint8* OutValue, const class UEnum* RequestedEnum) const;
	bool GetValueFloat(float* OutValue) const;
	bool GetValueInt32(int32* OutValue) const;
	bool GetValueInt64(int64* OutValue) const;
	bool GetValueName(class FName* OutValue) const;
	bool GetValueObject(class UObject* OutValue, const class UClass* RequestedClass) const;
	bool GetValueString(class FString* OutValue) const;
	bool GetValueText(class FText* OutValue) const;
	EMovieGraphValueType GetValueType() const;
	const class UObject* GetValueTypeObject() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphValueContainer">();
	}
	static class UMovieGraphValueContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphValueContainer>();
	}
};
static_assert(alignof(UMovieGraphValueContainer) == 0x000008, "Wrong alignment on UMovieGraphValueContainer");
static_assert(sizeof(UMovieGraphValueContainer) == 0x000040, "Wrong size on UMovieGraphValueContainer");
static_assert(offsetof(UMovieGraphValueContainer, PropertyName) == 0x000028, "Member 'UMovieGraphValueContainer::PropertyName' has a wrong offset!");
static_assert(offsetof(UMovieGraphValueContainer, Value) == 0x000030, "Member 'UMovieGraphValueContainer::Value' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphMember
// 0x0038 (0x0078 - 0x0040)
class UMovieGraphMember : public UMovieGraphValueContainer
{
public:
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_MovieGraphMember;                             // 0x0050(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEditable;                                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44D4[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetMemberName(const class FString& InNewName);

	const struct FGuid GetGuid() const;
	class FString GetMemberName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphMember">();
	}
	static class UMovieGraphMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphMember>();
	}
};
static_assert(alignof(UMovieGraphMember) == 0x000008, "Wrong alignment on UMovieGraphMember");
static_assert(sizeof(UMovieGraphMember) == 0x000078, "Wrong size on UMovieGraphMember");
static_assert(offsetof(UMovieGraphMember, Description) == 0x000040, "Member 'UMovieGraphMember::Description' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, Name_MovieGraphMember) == 0x000050, "Member 'UMovieGraphMember::Name_MovieGraphMember' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, Guid) == 0x000060, "Member 'UMovieGraphMember::Guid' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, bIsEditable) == 0x000070, "Member 'UMovieGraphMember::bIsEditable' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphVariable
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphVariable : public UMovieGraphMember
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphVariable">();
	}
	static class UMovieGraphVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphVariable>();
	}
};
static_assert(alignof(UMovieGraphVariable) == 0x000008, "Wrong alignment on UMovieGraphVariable");
static_assert(sizeof(UMovieGraphVariable) == 0x000078, "Wrong size on UMovieGraphVariable");

// Class MovieRenderPipelineCore.MovieGraphGlobalVariable
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphGlobalVariable : public UMovieGraphVariable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalVariable">();
	}
	static class UMovieGraphGlobalVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalVariable>();
	}
};
static_assert(alignof(UMovieGraphGlobalVariable) == 0x000008, "Wrong alignment on UMovieGraphGlobalVariable");
static_assert(sizeof(UMovieGraphGlobalVariable) == 0x000078, "Wrong size on UMovieGraphGlobalVariable");

// Class MovieRenderPipelineCore.MovieGraphGlobalVariable_ShotName
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphGlobalVariable_ShotName final : public UMovieGraphGlobalVariable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalVariable_ShotName">();
	}
	static class UMovieGraphGlobalVariable_ShotName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalVariable_ShotName>();
	}
};
static_assert(alignof(UMovieGraphGlobalVariable_ShotName) == 0x000008, "Wrong alignment on UMovieGraphGlobalVariable_ShotName");
static_assert(sizeof(UMovieGraphGlobalVariable_ShotName) == 0x000078, "Wrong size on UMovieGraphGlobalVariable_ShotName");

// Class MovieRenderPipelineCore.MovieGraphGlobalVariable_SequenceName
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphGlobalVariable_SequenceName final : public UMovieGraphGlobalVariable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalVariable_SequenceName">();
	}
	static class UMovieGraphGlobalVariable_SequenceName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalVariable_SequenceName>();
	}
};
static_assert(alignof(UMovieGraphGlobalVariable_SequenceName) == 0x000008, "Wrong alignment on UMovieGraphGlobalVariable_SequenceName");
static_assert(sizeof(UMovieGraphGlobalVariable_SequenceName) == 0x000078, "Wrong size on UMovieGraphGlobalVariable_SequenceName");

// Class MovieRenderPipelineCore.MovieGraphGlobalVariable_FrameNumber
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphGlobalVariable_FrameNumber final : public UMovieGraphGlobalVariable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalVariable_FrameNumber">();
	}
	static class UMovieGraphGlobalVariable_FrameNumber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalVariable_FrameNumber>();
	}
};
static_assert(alignof(UMovieGraphGlobalVariable_FrameNumber) == 0x000008, "Wrong alignment on UMovieGraphGlobalVariable_FrameNumber");
static_assert(sizeof(UMovieGraphGlobalVariable_FrameNumber) == 0x000078, "Wrong size on UMovieGraphGlobalVariable_FrameNumber");

// Class MovieRenderPipelineCore.MovieGraphGlobalVariable_CameraName
// 0x0000 (0x0078 - 0x0078)
class UMovieGraphGlobalVariable_CameraName final : public UMovieGraphGlobalVariable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalVariable_CameraName">();
	}
	static class UMovieGraphGlobalVariable_CameraName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalVariable_CameraName>();
	}
};
static_assert(alignof(UMovieGraphGlobalVariable_CameraName) == 0x000008, "Wrong alignment on UMovieGraphGlobalVariable_CameraName");
static_assert(sizeof(UMovieGraphGlobalVariable_CameraName) == 0x000078, "Wrong size on UMovieGraphGlobalVariable_CameraName");

// Class MovieRenderPipelineCore.MovieGraphInterfaceBase
// 0x0008 (0x0080 - 0x0078)
class UMovieGraphInterfaceBase : public UMovieGraphMember
{
public:
	bool                                          bIsBranch;                                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44D6[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInterfaceBase">();
	}
	static class UMovieGraphInterfaceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInterfaceBase>();
	}
};
static_assert(alignof(UMovieGraphInterfaceBase) == 0x000008, "Wrong alignment on UMovieGraphInterfaceBase");
static_assert(sizeof(UMovieGraphInterfaceBase) == 0x000080, "Wrong size on UMovieGraphInterfaceBase");
static_assert(offsetof(UMovieGraphInterfaceBase, bIsBranch) == 0x000078, "Member 'UMovieGraphInterfaceBase::bIsBranch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphInput
// 0x0000 (0x0080 - 0x0080)
class UMovieGraphInput final : public UMovieGraphInterfaceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInput">();
	}
	static class UMovieGraphInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInput>();
	}
};
static_assert(alignof(UMovieGraphInput) == 0x000008, "Wrong alignment on UMovieGraphInput");
static_assert(sizeof(UMovieGraphInput) == 0x000080, "Wrong size on UMovieGraphInput");

// Class MovieRenderPipelineCore.MovieGraphOutput
// 0x0000 (0x0080 - 0x0080)
class UMovieGraphOutput final : public UMovieGraphInterfaceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphOutput">();
	}
	static class UMovieGraphOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphOutput>();
	}
};
static_assert(alignof(UMovieGraphOutput) == 0x000008, "Wrong alignment on UMovieGraphOutput");
static_assert(sizeof(UMovieGraphOutput) == 0x000080, "Wrong size on UMovieGraphOutput");

// Class MovieRenderPipelineCore.MovieGraphEvaluatedConfig
// 0x0050 (0x0078 - 0x0028)
class UMovieGraphEvaluatedConfig final : public UObject
{
public:
	TMap<class FName, struct FMovieGraphEvaluatedBranchConfig> BranchConfigMapping;                               // 0x0028(0x0050)(Transient, NativeAccessSpecifierPublic)

public:
	const TArray<class FName> GetBranchNames() const;
	class UMovieGraphSettingNode* GetSettingForBranch(class UClass* InClass, const class FName InBranchName, bool bIncludeCDOs, bool bExactMatch) const;
	TArray<class UMovieGraphSettingNode*> GetSettingsForBranch(class UClass* InClass, const class FName InBranchName, bool bIncludeCDOs, bool bExactMatch) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEvaluatedConfig">();
	}
	static class UMovieGraphEvaluatedConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEvaluatedConfig>();
	}
};
static_assert(alignof(UMovieGraphEvaluatedConfig) == 0x000008, "Wrong alignment on UMovieGraphEvaluatedConfig");
static_assert(sizeof(UMovieGraphEvaluatedConfig) == 0x000078, "Wrong size on UMovieGraphEvaluatedConfig");
static_assert(offsetof(UMovieGraphEvaluatedConfig, BranchConfigMapping) == 0x000028, "Member 'UMovieGraphEvaluatedConfig::BranchConfigMapping' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphTraversableObject
// 0x0000 (0x0028 - 0x0028)
class IMovieGraphTraversableObject final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphTraversableObject">();
	}
	static class IMovieGraphTraversableObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieGraphTraversableObject>();
	}
};
static_assert(alignof(IMovieGraphTraversableObject) == 0x000008, "Wrong alignment on IMovieGraphTraversableObject");
static_assert(sizeof(IMovieGraphTraversableObject) == 0x000028, "Wrong size on IMovieGraphTraversableObject");

// Class MovieRenderPipelineCore.MovieGraphConfig
// 0x0060 (0x0088 - 0x0028)
class UMovieGraphConfig final : public UObject
{
public:
	TArray<class UMovieGraphNode*>                AllNodes;                                          // 0x0028(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMovieGraphNode*                        InputNode;                                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphNode*                        OutputNode;                                        // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMovieGraphVariable*>            Variables;                                         // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphGlobalVariable*>      GlobalVariables;                                   // 0x0058(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphInput*>               Inputs;                                            // 0x0068(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphOutput*>              Outputs;                                           // 0x0078(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UMovieGraphInput* AddInput();
	bool AddLabeledEdge(class UMovieGraphNode* FromNode, const class FName& FromPinLabel, class UMovieGraphNode* ToNode, const class FName& ToPinLabel);
	class UMovieGraphOutput* AddOutput();
	class UMovieGraphVariable* AddVariable(const class FName InCustomBaseName);
	class UMovieGraphEvaluatedConfig* CreateFlattenedGraph(const struct FMovieGraphTraversalContext& InContext, class FString* OutError);
	class UMovieGraphNode* CreateNodeByClass(const TSubclassOf<class UMovieGraphNode> InClass);
	bool DeleteMember(class UMovieGraphMember* MemberToDelete);
	bool RemoveAllInboundEdges(class UMovieGraphNode* InNode);
	bool RemoveAllOutboundEdges(class UMovieGraphNode* InNode);
	bool RemoveInboundEdges(class UMovieGraphNode* InNode, const class FName& InPinName);
	bool RemoveLabeledEdge(class UMovieGraphNode* FromNode, const class FName& FromPinName, class UMovieGraphNode* ToNode, const class FName& ToPinName);
	bool RemoveNode(class UMovieGraphNode* InNode);
	bool RemoveNodes(const TArray<class UMovieGraphNode*>& InNodes);
	bool RemoveOutboundEdges(class UMovieGraphNode* InNode, const class FName& InPinName);
	void UpdateGlobalVariableValues(const class UMovieGraphPipeline* InPipeline);

	class UMovieGraphNode* GetInputNode() const;
	TArray<class UMovieGraphInput*> GetInputs() const;
	class UMovieGraphNode* GetOutputNode() const;
	TArray<class UMovieGraphOutput*> GetOutputs() const;
	TArray<class UMovieGraphVariable*> GetVariables(const bool bIncludeGlobal) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConfig">();
	}
	static class UMovieGraphConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConfig>();
	}
};
static_assert(alignof(UMovieGraphConfig) == 0x000008, "Wrong alignment on UMovieGraphConfig");
static_assert(sizeof(UMovieGraphConfig) == 0x000088, "Wrong size on UMovieGraphConfig");
static_assert(offsetof(UMovieGraphConfig, AllNodes) == 0x000028, "Member 'UMovieGraphConfig::AllNodes' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, InputNode) == 0x000038, "Member 'UMovieGraphConfig::InputNode' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, OutputNode) == 0x000040, "Member 'UMovieGraphConfig::OutputNode' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Variables) == 0x000048, "Member 'UMovieGraphConfig::Variables' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, GlobalVariables) == 0x000058, "Member 'UMovieGraphConfig::GlobalVariables' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Inputs) == 0x000068, "Member 'UMovieGraphConfig::Inputs' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Outputs) == 0x000078, "Member 'UMovieGraphConfig::Outputs' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphTimeStepBase
// 0x0000 (0x0028 - 0x0028)
class UMovieGraphTimeStepBase : public UObject
{
public:
	struct FMovieGraphTimeStepData GetCalculatedTimeData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphTimeStepBase">();
	}
	static class UMovieGraphTimeStepBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphTimeStepBase>();
	}
};
static_assert(alignof(UMovieGraphTimeStepBase) == 0x000008, "Wrong alignment on UMovieGraphTimeStepBase");
static_assert(sizeof(UMovieGraphTimeStepBase) == 0x000028, "Wrong size on UMovieGraphTimeStepBase");

// Class MovieRenderPipelineCore.MovieGraphCoreTimeStep
// 0x0148 (0x0170 - 0x0028)
class UMovieGraphCoreTimeStep : public UMovieGraphTimeStepBase
{
public:
	struct FMovieGraphTimeStepData                CurrentTimeStepData;                               // 0x0028(0x0068)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_44E3[0xE0];                                    // 0x0090(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCoreTimeStep">();
	}
	static class UMovieGraphCoreTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCoreTimeStep>();
	}
};
static_assert(alignof(UMovieGraphCoreTimeStep) == 0x000008, "Wrong alignment on UMovieGraphCoreTimeStep");
static_assert(sizeof(UMovieGraphCoreTimeStep) == 0x000170, "Wrong size on UMovieGraphCoreTimeStep");
static_assert(offsetof(UMovieGraphCoreTimeStep, CurrentTimeStepData) == 0x000028, "Member 'UMovieGraphCoreTimeStep::CurrentTimeStepData' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphEngineTimeStep
// 0x0018 (0x0040 - 0x0028)
class UMovieGraphEngineTimeStep final : public UEngineCustomTimeStep
{
public:
	uint8                                         Pad_44E4[0x18];                                    // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEngineTimeStep">();
	}
	static class UMovieGraphEngineTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEngineTimeStep>();
	}
};
static_assert(alignof(UMovieGraphEngineTimeStep) == 0x000008, "Wrong alignment on UMovieGraphEngineTimeStep");
static_assert(sizeof(UMovieGraphEngineTimeStep) == 0x000040, "Wrong size on UMovieGraphEngineTimeStep");

// Class MovieRenderPipelineCore.MovieGraphRendererBase
// 0x0000 (0x0028 - 0x0028)
class UMovieGraphRendererBase : public UObject
{
public:
	TArray<struct FMovieGraphImagePreviewData> GetPreviewData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRendererBase">();
	}
	static class UMovieGraphRendererBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRendererBase>();
	}
};
static_assert(alignof(UMovieGraphRendererBase) == 0x000008, "Wrong alignment on UMovieGraphRendererBase");
static_assert(sizeof(UMovieGraphRendererBase) == 0x000028, "Wrong size on UMovieGraphRendererBase");

// Class MovieRenderPipelineCore.MovieGraphDataSourceBase
// 0x0000 (0x0028 - 0x0028)
class UMovieGraphDataSourceBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDataSourceBase">();
	}
	static class UMovieGraphDataSourceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDataSourceBase>();
	}
};
static_assert(alignof(UMovieGraphDataSourceBase) == 0x000008, "Wrong alignment on UMovieGraphDataSourceBase");
static_assert(sizeof(UMovieGraphDataSourceBase) == 0x000028, "Wrong size on UMovieGraphDataSourceBase");

// Class MovieRenderPipelineCore.MovieGraphAudioRendererBase
// 0x0030 (0x0058 - 0x0028)
class UMovieGraphAudioRendererBase : public UObject
{
public:
	uint8                                         Pad_44E5[0x30];                                    // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphAudioRendererBase">();
	}
	static class UMovieGraphAudioRendererBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphAudioRendererBase>();
	}
};
static_assert(alignof(UMovieGraphAudioRendererBase) == 0x000008, "Wrong alignment on UMovieGraphAudioRendererBase");
static_assert(sizeof(UMovieGraphAudioRendererBase) == 0x000058, "Wrong size on UMovieGraphAudioRendererBase");

// Class MovieRenderPipelineCore.MovieGraphDebugSettingNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphDebugSettingNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_bCaptureFramesWithRenderDoc : 1;         // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bCaptureUnrealInsightsTrace : 1;         // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UnrealInsightsTraceFileNameFormat : 1;   // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bCaptureFramesWithRenderDoc;                       // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureUnrealInsightsTrace;                       // 0x009A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44E6[0x5];                                     // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UnrealInsightsTraceFileNameFormat;                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDebugSettingNode">();
	}
	static class UMovieGraphDebugSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDebugSettingNode>();
	}
};
static_assert(alignof(UMovieGraphDebugSettingNode) == 0x000008, "Wrong alignment on UMovieGraphDebugSettingNode");
static_assert(sizeof(UMovieGraphDebugSettingNode) == 0x0000B0, "Wrong size on UMovieGraphDebugSettingNode");
static_assert(offsetof(UMovieGraphDebugSettingNode, bCaptureFramesWithRenderDoc) == 0x000099, "Member 'UMovieGraphDebugSettingNode::bCaptureFramesWithRenderDoc' has a wrong offset!");
static_assert(offsetof(UMovieGraphDebugSettingNode, bCaptureUnrealInsightsTrace) == 0x00009A, "Member 'UMovieGraphDebugSettingNode::bCaptureUnrealInsightsTrace' has a wrong offset!");
static_assert(offsetof(UMovieGraphDebugSettingNode, UnrealInsightsTraceFileNameFormat) == 0x0000A0, "Member 'UMovieGraphDebugSettingNode::UnrealInsightsTraceFileNameFormat' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphDefaultAudioRenderer
// 0x0000 (0x0058 - 0x0058)
class UMovieGraphDefaultAudioRenderer final : public UMovieGraphAudioRendererBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDefaultAudioRenderer">();
	}
	static class UMovieGraphDefaultAudioRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDefaultAudioRenderer>();
	}
};
static_assert(alignof(UMovieGraphDefaultAudioRenderer) == 0x000008, "Wrong alignment on UMovieGraphDefaultAudioRenderer");
static_assert(sizeof(UMovieGraphDefaultAudioRenderer) == 0x000058, "Wrong size on UMovieGraphDefaultAudioRenderer");

// Class MovieRenderPipelineCore.MovieGraphDefaultRenderer
// 0x0190 (0x01B8 - 0x0028)
class UMovieGraphDefaultRenderer final : public UMovieGraphRendererBase
{
public:
	TArray<class UMovieGraphRenderPassNode*>      RenderPassesInUse;                                 // 0x0028(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_44E7[0x180];                                   // 0x0038(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDefaultRenderer">();
	}
	static class UMovieGraphDefaultRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDefaultRenderer>();
	}
};
static_assert(alignof(UMovieGraphDefaultRenderer) == 0x000008, "Wrong alignment on UMovieGraphDefaultRenderer");
static_assert(sizeof(UMovieGraphDefaultRenderer) == 0x0001B8, "Wrong size on UMovieGraphDefaultRenderer");
static_assert(offsetof(UMovieGraphDefaultRenderer, RenderPassesInUse) == 0x000028, "Member 'UMovieGraphDefaultRenderer::RenderPassesInUse' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphEdge
// 0x0010 (0x0038 - 0x0028)
class UMovieGraphEdge final : public UObject
{
public:
	class UMovieGraphPin*                         InputPin;                                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieGraphPin*                         OutputPin;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEdge">();
	}
	static class UMovieGraphEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEdge>();
	}
};
static_assert(alignof(UMovieGraphEdge) == 0x000008, "Wrong alignment on UMovieGraphEdge");
static_assert(sizeof(UMovieGraphEdge) == 0x000038, "Wrong size on UMovieGraphEdge");
static_assert(offsetof(UMovieGraphEdge, InputPin) == 0x000028, "Member 'UMovieGraphEdge::InputPin' has a wrong offset!");
static_assert(offsetof(UMovieGraphEdge, OutputPin) == 0x000030, "Member 'UMovieGraphEdge::OutputPin' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphScriptBase
// 0x0000 (0x0028 - 0x0028)
class UMovieGraphScriptBase final : public UObject
{
public:
	void OnJobFinished(class UMoviePipelineExecutorJob* InJobCopy, const struct FMoviePipelineOutputData& InOutputData);
	void OnJobStart(class UMoviePipelineExecutorJob* InJobCopy);
	void OnShotFinished(class UMoviePipelineExecutorJob* InJobCopy, class UMoviePipelineExecutorShot* InShotCopy, const struct FMoviePipelineOutputData& OutputData);
	void OnShotStart(class UMoviePipelineExecutorJob* InJobCopy, class UMoviePipelineExecutorShot* InShotCopy);

	bool IsPerShotCallbackNeeded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphScriptBase">();
	}
	static class UMovieGraphScriptBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphScriptBase>();
	}
};
static_assert(alignof(UMovieGraphScriptBase) == 0x000008, "Wrong alignment on UMovieGraphScriptBase");
static_assert(sizeof(UMovieGraphScriptBase) == 0x000028, "Wrong size on UMovieGraphScriptBase");

// Class MovieRenderPipelineCore.MovieGraphExecuteScriptNode
// 0x0028 (0x00C0 - 0x0098)
class UMovieGraphExecuteScriptNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_Script : 1;                              // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44E8[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         Script;                                            // 0x00A0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphExecuteScriptNode">();
	}
	static class UMovieGraphExecuteScriptNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphExecuteScriptNode>();
	}
};
static_assert(alignof(UMovieGraphExecuteScriptNode) == 0x000008, "Wrong alignment on UMovieGraphExecuteScriptNode");
static_assert(sizeof(UMovieGraphExecuteScriptNode) == 0x0000C0, "Wrong size on UMovieGraphExecuteScriptNode");
static_assert(offsetof(UMovieGraphExecuteScriptNode, Script) == 0x0000A0, "Member 'UMovieGraphExecuteScriptNode::Script' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphGlobalGameOverridesNode
// 0x00B8 (0x0150 - 0x0098)
class UMovieGraphGlobalGameOverridesNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_GameModeOverride : 1;                    // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScalabilityQualityLevel : 1;             // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDisableTextureStreaming : 1;            // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDisableLODs : 1;                        // 0x0098(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDisableHLODs : 1;                       // 0x0098(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushLevelStreaming : 1;                // 0x0098(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushAssetCompiler : 1;                 // 0x0098(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushShaderCompiler : 1;                // 0x0098(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushGrassStreaming : 1;                // 0x0099(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushStreamingManagers : 1;             // 0x0099(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VirtualTextureFeedbackFactor : 1;        // 0x0099(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44E9[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieGraphScalabilityQualityLevel            ScalabilityQualityLevel;                           // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTextureStreaming;                          // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLODs;                                      // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHLODs;                                     // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushLevelStreaming;                              // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushAssetCompiler;                               // 0x00AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushShaderCompiler;                              // 0x00AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushGrassStreaming;                              // 0x00AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushStreamingManagers;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44EA[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualTextureFeedbackFactor;                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44EB[0x98];                                    // 0x00B8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalGameOverridesNode">();
	}
	static class UMovieGraphGlobalGameOverridesNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalGameOverridesNode>();
	}
};
static_assert(alignof(UMovieGraphGlobalGameOverridesNode) == 0x000008, "Wrong alignment on UMovieGraphGlobalGameOverridesNode");
static_assert(sizeof(UMovieGraphGlobalGameOverridesNode) == 0x000150, "Wrong size on UMovieGraphGlobalGameOverridesNode");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, GameModeOverride) == 0x0000A0, "Member 'UMovieGraphGlobalGameOverridesNode::GameModeOverride' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, ScalabilityQualityLevel) == 0x0000A8, "Member 'UMovieGraphGlobalGameOverridesNode::ScalabilityQualityLevel' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bDisableTextureStreaming) == 0x0000A9, "Member 'UMovieGraphGlobalGameOverridesNode::bDisableTextureStreaming' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bDisableLODs) == 0x0000AA, "Member 'UMovieGraphGlobalGameOverridesNode::bDisableLODs' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bDisableHLODs) == 0x0000AB, "Member 'UMovieGraphGlobalGameOverridesNode::bDisableHLODs' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushLevelStreaming) == 0x0000AC, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushLevelStreaming' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushAssetCompiler) == 0x0000AD, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushAssetCompiler' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushShaderCompiler) == 0x0000AE, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushShaderCompiler' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushGrassStreaming) == 0x0000AF, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushGrassStreaming' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushStreamingManagers) == 0x0000B0, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushStreamingManagers' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, VirtualTextureFeedbackFactor) == 0x0000B4, "Member 'UMovieGraphGlobalGameOverridesNode::VirtualTextureFeedbackFactor' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphGlobalOutputSettingNode
// 0x0068 (0x0100 - 0x0098)
class UMovieGraphGlobalOutputSettingNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_OutputDirectory : 1;                     // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OutputResolution : 1;                    // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OutputFrameRate : 1;                     // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bOverwriteExistingOutput : 1;            // 0x0098(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ZeroPadFrameNumbers : 1;                 // 0x0098(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FrameNumberOffset : 1;                   // 0x0098(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HandleFrameCount : 1;                    // 0x0098(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomPlaybackRangeStartFrame : 1;       // 0x0098(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomPlaybackRangeEndFrame : 1;         // 0x0099(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VersioningSettings : 1;                  // 0x0099(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bFlushDiskWritesPerShot : 1;             // 0x0099(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44EC[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         OutputDirectory;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphNamedResolution             OutputResolution;                                  // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFrameRate                             OutputFrameRate;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteExistingOutput;                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44ED[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZeroPadFrameNumbers;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberOffset;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleFrameCount;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPlaybackRangeStartFrame;                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPlaybackRangeEndFrame;                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphVersioningSettings          VersioningSettings;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFlushDiskWritesPerShot;                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44EE[0x7];                                     // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalOutputSettingNode">();
	}
	static class UMovieGraphGlobalOutputSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalOutputSettingNode>();
	}
};
static_assert(alignof(UMovieGraphGlobalOutputSettingNode) == 0x000008, "Wrong alignment on UMovieGraphGlobalOutputSettingNode");
static_assert(sizeof(UMovieGraphGlobalOutputSettingNode) == 0x000100, "Wrong size on UMovieGraphGlobalOutputSettingNode");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, OutputDirectory) == 0x0000A0, "Member 'UMovieGraphGlobalOutputSettingNode::OutputDirectory' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, OutputResolution) == 0x0000B0, "Member 'UMovieGraphGlobalOutputSettingNode::OutputResolution' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, OutputFrameRate) == 0x0000D0, "Member 'UMovieGraphGlobalOutputSettingNode::OutputFrameRate' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, bOverwriteExistingOutput) == 0x0000D8, "Member 'UMovieGraphGlobalOutputSettingNode::bOverwriteExistingOutput' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, ZeroPadFrameNumbers) == 0x0000DC, "Member 'UMovieGraphGlobalOutputSettingNode::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, FrameNumberOffset) == 0x0000E0, "Member 'UMovieGraphGlobalOutputSettingNode::FrameNumberOffset' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, HandleFrameCount) == 0x0000E4, "Member 'UMovieGraphGlobalOutputSettingNode::HandleFrameCount' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, CustomPlaybackRangeStartFrame) == 0x0000E8, "Member 'UMovieGraphGlobalOutputSettingNode::CustomPlaybackRangeStartFrame' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, CustomPlaybackRangeEndFrame) == 0x0000EC, "Member 'UMovieGraphGlobalOutputSettingNode::CustomPlaybackRangeEndFrame' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, VersioningSettings) == 0x0000F0, "Member 'UMovieGraphGlobalOutputSettingNode::VersioningSettings' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalOutputSettingNode, bFlushDiskWritesPerShot) == 0x0000F8, "Member 'UMovieGraphGlobalOutputSettingNode::bFlushDiskWritesPerShot' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphInputNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphInputNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInputNode">();
	}
	static class UMovieGraphInputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInputNode>();
	}
};
static_assert(alignof(UMovieGraphInputNode) == 0x000008, "Wrong alignment on UMovieGraphInputNode");
static_assert(sizeof(UMovieGraphInputNode) == 0x000098, "Wrong size on UMovieGraphInputNode");

// Class MovieRenderPipelineCore.MovieGraphLinearTimeStep
// 0x0000 (0x0170 - 0x0170)
class UMovieGraphLinearTimeStep final : public UMovieGraphCoreTimeStep
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphLinearTimeStep">();
	}
	static class UMovieGraphLinearTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphLinearTimeStep>();
	}
};
static_assert(alignof(UMovieGraphLinearTimeStep) == 0x000008, "Wrong alignment on UMovieGraphLinearTimeStep");
static_assert(sizeof(UMovieGraphLinearTimeStep) == 0x000170, "Wrong size on UMovieGraphLinearTimeStep");

// Class MovieRenderPipelineCore.MovieGraphMergeableModifierContainer
// 0x0018 (0x0040 - 0x0028)
class UMovieGraphMergeableModifierContainer final : public UObject
{
public:
	uint8                                         Pad_44EF[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieGraphCollectionModifier*>  Modifiers;                                         // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphMergeableModifierContainer">();
	}
	static class UMovieGraphMergeableModifierContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphMergeableModifierContainer>();
	}
};
static_assert(alignof(UMovieGraphMergeableModifierContainer) == 0x000008, "Wrong alignment on UMovieGraphMergeableModifierContainer");
static_assert(sizeof(UMovieGraphMergeableModifierContainer) == 0x000040, "Wrong size on UMovieGraphMergeableModifierContainer");
static_assert(offsetof(UMovieGraphMergeableModifierContainer, Modifiers) == 0x000030, "Member 'UMovieGraphMergeableModifierContainer::Modifiers' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphModifierNode
// 0x0038 (0x00D0 - 0x0098)
class UMovieGraphModifierNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_ModifierName : 1;                        // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44F0[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierName;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_Collections : 1;                         // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bOverride_ModifiersContainer : 1;                  // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_44F1[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Collections;                                       // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMovieGraphMergeableModifierContainer*  ModifiersContainer;                                // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddCollection(const class FName& InCollectionName);
	class UMovieGraphCollectionModifier* AddModifier(TSubclassOf<class UMovieGraphCollectionModifier> ModifierType);
	bool RemoveCollection(const class FName& InCollectionName);
	bool RemoveModifier(TSubclassOf<class UMovieGraphCollectionModifier> ModifierType);

	const TArray<class FName> GetCollections() const;
	class UMovieGraphCollectionModifier* GetModifier(TSubclassOf<class UMovieGraphCollectionModifier> ModifierType) const;
	const TArray<class UMovieGraphCollectionModifier*> GetModifiers() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphModifierNode">();
	}
	static class UMovieGraphModifierNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphModifierNode>();
	}
};
static_assert(alignof(UMovieGraphModifierNode) == 0x000008, "Wrong alignment on UMovieGraphModifierNode");
static_assert(sizeof(UMovieGraphModifierNode) == 0x0000D0, "Wrong size on UMovieGraphModifierNode");
static_assert(offsetof(UMovieGraphModifierNode, ModifierName) == 0x0000A0, "Member 'UMovieGraphModifierNode::ModifierName' has a wrong offset!");
static_assert(offsetof(UMovieGraphModifierNode, Collections) == 0x0000B8, "Member 'UMovieGraphModifierNode::Collections' has a wrong offset!");
static_assert(offsetof(UMovieGraphModifierNode, ModifiersContainer) == 0x0000C8, "Member 'UMovieGraphModifierNode::ModifiersContainer' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphPostRenderNode
// 0x0000 (0x0028 - 0x0028)
class IMovieGraphPostRenderNode final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPostRenderNode">();
	}
	static class IMovieGraphPostRenderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieGraphPostRenderNode>();
	}
};
static_assert(alignof(IMovieGraphPostRenderNode) == 0x000008, "Wrong alignment on IMovieGraphPostRenderNode");
static_assert(sizeof(IMovieGraphPostRenderNode) == 0x000028, "Wrong size on IMovieGraphPostRenderNode");

// Class MovieRenderPipelineCore.MovieGraphOutputNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphOutputNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphOutputNode">();
	}
	static class UMovieGraphOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphOutputNode>();
	}
};
static_assert(alignof(UMovieGraphOutputNode) == 0x000008, "Wrong alignment on UMovieGraphOutputNode");
static_assert(sizeof(UMovieGraphOutputNode) == 0x000098, "Wrong size on UMovieGraphOutputNode");

// Class MovieRenderPipelineCore.MovieGraphPin
// 0x0038 (0x0060 - 0x0028)
class UMovieGraphPin final : public UObject
{
public:
	class UMovieGraphNode*                        Node;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphPinProperties               Properties;                                        // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UMovieGraphEdge*>                Edges;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	TArray<class UMovieGraphNode*> GetConnectedNodes() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPin">();
	}
	static class UMovieGraphPin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPin>();
	}
};
static_assert(alignof(UMovieGraphPin) == 0x000008, "Wrong alignment on UMovieGraphPin");
static_assert(sizeof(UMovieGraphPin) == 0x000060, "Wrong size on UMovieGraphPin");
static_assert(offsetof(UMovieGraphPin, Node) == 0x000028, "Member 'UMovieGraphPin::Node' has a wrong offset!");
static_assert(offsetof(UMovieGraphPin, Properties) == 0x000030, "Member 'UMovieGraphPin::Properties' has a wrong offset!");
static_assert(offsetof(UMovieGraphPin, Edges) == 0x000050, "Member 'UMovieGraphPin::Edges' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineBase
// 0x0050 (0x0078 - 0x0028)
class UMoviePipelineBase : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnMoviePipelineWorkFinishedDelegate;               // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMoviePipelineShotWorkFinishedDelegate;           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_44F4[0x30];                                    // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestShutdown(bool bIsError);
	void Shutdown(bool bIsError);

	EMovieRenderPipelineState GetPipelineState() const;
	bool IsShutdownRequested() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBase">();
	}
	static class UMoviePipelineBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBase>();
	}
};
static_assert(alignof(UMoviePipelineBase) == 0x000008, "Wrong alignment on UMoviePipelineBase");
static_assert(sizeof(UMoviePipelineBase) == 0x000078, "Wrong size on UMoviePipelineBase");
static_assert(offsetof(UMoviePipelineBase, OnMoviePipelineWorkFinishedDelegate) == 0x000028, "Member 'UMoviePipelineBase::OnMoviePipelineWorkFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineBase, OnMoviePipelineShotWorkFinishedDelegate) == 0x000038, "Member 'UMoviePipelineBase::OnMoviePipelineShotWorkFinishedDelegate' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphPipeline
// 0x0150 (0x01C8 - 0x0078)
class UMovieGraphPipeline final : public UMoviePipelineBase
{
public:
	TArray<class UMovieGraphTimeStepBase*>        GraphTimeStepInstances;                            // 0x0078(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMovieGraphTimeStepBase*                PendingTimeStepInstance;                           // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphTimeStepBase*                GraphTimeStepInstance;                             // 0x0090(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphRendererBase*                GraphRendererInstance;                             // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphDataSourceBase*              GraphDataSourceInstance;                           // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphAudioRendererBase*           GraphAudioRendererInstance;                        // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphEvaluatedConfig*             PostRenderEvaluatedGraph;                          // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineExecutorJob*              CurrentJob;                                        // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineExecutorJob*              CurrentJobDuplicate;                               // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMoviePipelineExecutorShot*>     ActiveShotList;                                    // 0x00C8(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UMovieGraphRenderPreviewWidget> PreviewWidgetClassToUse;                           // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphRenderPreviewWidget*         PreviewWidget;                                     // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMovieGraphScriptBase*>          CurrentScriptInstances;                            // 0x00E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TSet<class UMovieGraphFileOutputNode*>        OutputNodesDataSentTo;                             // 0x00F8(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_44F5[0x70];                                    // 0x0148(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieGraphEngineTimeStep*              CustomEngineTimeStep;                              // 0x01B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEngineCustomTimeStep*                  PrevCustomEngineTimeStep;                          // 0x01C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Initialize(class UMoviePipelineExecutorJob* InJob, const struct FMovieGraphInitConfig& InitConfig);
	void OnMoviePipelineFinishedImpl();
	void SetInitializationTime(const struct FDateTime& InDateTime);

	class UMoviePipelineExecutorJob* GetCurrentJob() const;
	struct FMovieGraphTraversalContext GetCurrentTraversalContext(const bool bForShot) const;
	struct FDateTime GetInitializationTime() const;
	struct FTimespan GetInitializationTimeOffset() const;
	class UMovieGraphRendererBase* GetRendererInstance() const;
	class UMovieGraphTimeStepBase* GetTimeStepInstance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPipeline">();
	}
	static class UMovieGraphPipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPipeline>();
	}
};
static_assert(alignof(UMovieGraphPipeline) == 0x000008, "Wrong alignment on UMovieGraphPipeline");
static_assert(sizeof(UMovieGraphPipeline) == 0x0001C8, "Wrong size on UMovieGraphPipeline");
static_assert(offsetof(UMovieGraphPipeline, GraphTimeStepInstances) == 0x000078, "Member 'UMovieGraphPipeline::GraphTimeStepInstances' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, PendingTimeStepInstance) == 0x000088, "Member 'UMovieGraphPipeline::PendingTimeStepInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphTimeStepInstance) == 0x000090, "Member 'UMovieGraphPipeline::GraphTimeStepInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphRendererInstance) == 0x000098, "Member 'UMovieGraphPipeline::GraphRendererInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphDataSourceInstance) == 0x0000A0, "Member 'UMovieGraphPipeline::GraphDataSourceInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphAudioRendererInstance) == 0x0000A8, "Member 'UMovieGraphPipeline::GraphAudioRendererInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, PostRenderEvaluatedGraph) == 0x0000B0, "Member 'UMovieGraphPipeline::PostRenderEvaluatedGraph' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, CurrentJob) == 0x0000B8, "Member 'UMovieGraphPipeline::CurrentJob' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, CurrentJobDuplicate) == 0x0000C0, "Member 'UMovieGraphPipeline::CurrentJobDuplicate' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, ActiveShotList) == 0x0000C8, "Member 'UMovieGraphPipeline::ActiveShotList' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, PreviewWidgetClassToUse) == 0x0000D8, "Member 'UMovieGraphPipeline::PreviewWidgetClassToUse' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, PreviewWidget) == 0x0000E0, "Member 'UMovieGraphPipeline::PreviewWidget' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, CurrentScriptInstances) == 0x0000E8, "Member 'UMovieGraphPipeline::CurrentScriptInstances' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, OutputNodesDataSentTo) == 0x0000F8, "Member 'UMovieGraphPipeline::OutputNodesDataSentTo' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, CustomEngineTimeStep) == 0x0001B8, "Member 'UMovieGraphPipeline::CustomEngineTimeStep' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, PrevCustomEngineTimeStep) == 0x0001C0, "Member 'UMovieGraphPipeline::PrevCustomEngineTimeStep' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphProjectSettings
// 0x0010 (0x0048 - 0x0038)
class UMovieGraphProjectSettings final : public UDeveloperSettings
{
public:
	TArray<struct FMovieGraphNamedResolution>     DefaultNamedResolutions;                           // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphProjectSettings">();
	}
	static class UMovieGraphProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphProjectSettings>();
	}
};
static_assert(alignof(UMovieGraphProjectSettings) == 0x000008, "Wrong alignment on UMovieGraphProjectSettings");
static_assert(sizeof(UMovieGraphProjectSettings) == 0x000048, "Wrong size on UMovieGraphProjectSettings");
static_assert(offsetof(UMovieGraphProjectSettings, DefaultNamedResolutions) == 0x000038, "Member 'UMovieGraphProjectSettings::DefaultNamedResolutions' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphRemoveRenderSettingNode
// 0x0008 (0x00A0 - 0x0098)
class UMovieGraphRemoveRenderSettingNode final : public UMovieGraphNode
{
public:
	TSubclassOf<class UMovieGraphSettingNode>     NodeType;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRemoveRenderSettingNode">();
	}
	static class UMovieGraphRemoveRenderSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRemoveRenderSettingNode>();
	}
};
static_assert(alignof(UMovieGraphRemoveRenderSettingNode) == 0x000008, "Wrong alignment on UMovieGraphRemoveRenderSettingNode");
static_assert(sizeof(UMovieGraphRemoveRenderSettingNode) == 0x0000A0, "Wrong size on UMovieGraphRemoveRenderSettingNode");
static_assert(offsetof(UMovieGraphRemoveRenderSettingNode, NodeType) == 0x000098, "Member 'UMovieGraphRemoveRenderSettingNode::NodeType' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphRenderLayerNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphRenderLayerNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_LayerName : 1;                           // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_44F7[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LayerName;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderLayerNode">();
	}
	static class UMovieGraphRenderLayerNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderLayerNode>();
	}
};
static_assert(alignof(UMovieGraphRenderLayerNode) == 0x000008, "Wrong alignment on UMovieGraphRenderLayerNode");
static_assert(sizeof(UMovieGraphRenderLayerNode) == 0x0000B0, "Wrong size on UMovieGraphRenderLayerNode");
static_assert(offsetof(UMovieGraphRenderLayerNode, LayerName) == 0x0000A0, "Member 'UMovieGraphRenderLayerNode::LayerName' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQueryBase
// 0x0008 (0x0030 - 0x0028)
class UMovieGraphConditionGroupQueryBase : public UObject
{
public:
	EMovieGraphConditionGroupQueryOpType          OpType;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsEnabled;                                        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44F8[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnabled(const bool bEnabled);
	void SetOperationType(const EMovieGraphConditionGroupQueryOpType OperationType);

	void Evaluate(const TArray<class AActor*>& InActorsToQuery, const class UWorld* InWorld, TSet<class AActor*>* OutMatchingActors) const;
	EMovieGraphConditionGroupQueryOpType GetOperationType() const;
	bool IsEditorOnlyQuery() const;
	bool IsEnabled() const;
	bool IsFirstConditionGroupQuery() const;
	bool ShouldHidePropertyNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQueryBase">();
	}
	static class UMovieGraphConditionGroupQueryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQueryBase>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQueryBase) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQueryBase");
static_assert(sizeof(UMovieGraphConditionGroupQueryBase) == 0x000030, "Wrong size on UMovieGraphConditionGroupQueryBase");
static_assert(offsetof(UMovieGraphConditionGroupQueryBase, OpType) == 0x000028, "Member 'UMovieGraphConditionGroupQueryBase::OpType' has a wrong offset!");
static_assert(offsetof(UMovieGraphConditionGroupQueryBase, bIsEnabled) == 0x000029, "Member 'UMovieGraphConditionGroupQueryBase::bIsEnabled' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_Actor
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_Actor final : public UMovieGraphConditionGroupQueryBase
{
public:
	TArray<TSoftObjectPtr<class AActor>>          ActorsToMatch;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_Actor">();
	}
	static class UMovieGraphConditionGroupQuery_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_Actor>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_Actor) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_Actor");
static_assert(sizeof(UMovieGraphConditionGroupQuery_Actor) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_Actor");
static_assert(offsetof(UMovieGraphConditionGroupQuery_Actor, ActorsToMatch) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_Actor::ActorsToMatch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_ActorTagName
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_ActorTagName final : public UMovieGraphConditionGroupQueryBase
{
public:
	class FString                                 TagsToMatch;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_ActorTagName">();
	}
	static class UMovieGraphConditionGroupQuery_ActorTagName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_ActorTagName>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_ActorTagName) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_ActorTagName");
static_assert(sizeof(UMovieGraphConditionGroupQuery_ActorTagName) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_ActorTagName");
static_assert(offsetof(UMovieGraphConditionGroupQuery_ActorTagName, TagsToMatch) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_ActorTagName::TagsToMatch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_ActorName
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_ActorName final : public UMovieGraphConditionGroupQueryBase
{
public:
	class FString                                 WildcardSearch;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_ActorName">();
	}
	static class UMovieGraphConditionGroupQuery_ActorName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_ActorName>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_ActorName) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_ActorName");
static_assert(sizeof(UMovieGraphConditionGroupQuery_ActorName) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_ActorName");
static_assert(offsetof(UMovieGraphConditionGroupQuery_ActorName, WildcardSearch) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_ActorName::WildcardSearch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_ActorType
// 0x0020 (0x0050 - 0x0030)
class UMovieGraphConditionGroupQuery_ActorType final : public UMovieGraphConditionGroupQueryBase
{
public:
	TArray<class UClass*>                         ActorTypes;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44F9[0x10];                                    // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_ActorType">();
	}
	static class UMovieGraphConditionGroupQuery_ActorType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_ActorType>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_ActorType) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_ActorType");
static_assert(sizeof(UMovieGraphConditionGroupQuery_ActorType) == 0x000050, "Wrong size on UMovieGraphConditionGroupQuery_ActorType");
static_assert(offsetof(UMovieGraphConditionGroupQuery_ActorType, ActorTypes) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_ActorType::ActorTypes' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_ComponentTagName
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_ComponentTagName final : public UMovieGraphConditionGroupQueryBase
{
public:
	class FString                                 TagsToMatch;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_ComponentTagName">();
	}
	static class UMovieGraphConditionGroupQuery_ComponentTagName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_ComponentTagName>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_ComponentTagName) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_ComponentTagName");
static_assert(sizeof(UMovieGraphConditionGroupQuery_ComponentTagName) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_ComponentTagName");
static_assert(offsetof(UMovieGraphConditionGroupQuery_ComponentTagName, TagsToMatch) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_ComponentTagName::TagsToMatch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_ComponentType
// 0x0020 (0x0050 - 0x0030)
class UMovieGraphConditionGroupQuery_ComponentType final : public UMovieGraphConditionGroupQueryBase
{
public:
	uint8                                         Pad_44FA[0x10];                                    // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ComponentTypes;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_ComponentType">();
	}
	static class UMovieGraphConditionGroupQuery_ComponentType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_ComponentType>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_ComponentType) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_ComponentType");
static_assert(sizeof(UMovieGraphConditionGroupQuery_ComponentType) == 0x000050, "Wrong size on UMovieGraphConditionGroupQuery_ComponentType");
static_assert(offsetof(UMovieGraphConditionGroupQuery_ComponentType, ComponentTypes) == 0x000040, "Member 'UMovieGraphConditionGroupQuery_ComponentType::ComponentTypes' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_EditorFolder
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_EditorFolder final : public UMovieGraphConditionGroupQueryBase
{
public:
	TArray<class FName>                           FolderPaths;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_EditorFolder">();
	}
	static class UMovieGraphConditionGroupQuery_EditorFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_EditorFolder>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_EditorFolder) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_EditorFolder");
static_assert(sizeof(UMovieGraphConditionGroupQuery_EditorFolder) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_EditorFolder");
static_assert(offsetof(UMovieGraphConditionGroupQuery_EditorFolder, FolderPaths) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_EditorFolder::FolderPaths' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroupQuery_Sublevel
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphConditionGroupQuery_Sublevel final : public UMovieGraphConditionGroupQueryBase
{
public:
	TArray<TSoftObjectPtr<class UWorld>>          Sublevels;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroupQuery_Sublevel">();
	}
	static class UMovieGraphConditionGroupQuery_Sublevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroupQuery_Sublevel>();
	}
};
static_assert(alignof(UMovieGraphConditionGroupQuery_Sublevel) == 0x000008, "Wrong alignment on UMovieGraphConditionGroupQuery_Sublevel");
static_assert(sizeof(UMovieGraphConditionGroupQuery_Sublevel) == 0x000040, "Wrong size on UMovieGraphConditionGroupQuery_Sublevel");
static_assert(offsetof(UMovieGraphConditionGroupQuery_Sublevel, Sublevels) == 0x000030, "Member 'UMovieGraphConditionGroupQuery_Sublevel::Sublevels' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConditionGroup
// 0x00C8 (0x00F0 - 0x0028)
class UMovieGraphConditionGroup final : public UObject
{
public:
	struct FGuid                                  ID;                                                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMovieGraphConditionGroupOpType               OpType;                                            // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44FB[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieGraphConditionGroupQueryBase*> Queries;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           QueryResult;                                       // 0x0050(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           EvaluationResult;                                  // 0x00A0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	class UMovieGraphConditionGroupQueryBase* AddQuery(const TSubclassOf<class UMovieGraphConditionGroupQueryBase>& InQueryType, const int32 InsertIndex);
	bool MoveQueryToIndex(class UMovieGraphConditionGroupQueryBase* InQuery, const int32 NewIndex);
	bool RemoveQuery(class UMovieGraphConditionGroupQueryBase* InQuery);
	void SetOperationType(const EMovieGraphConditionGroupOpType OperationType);

	TSet<class AActor*> Evaluate(const class UWorld* InWorld) const;
	EMovieGraphConditionGroupOpType GetOperationType() const;
	const TArray<class UMovieGraphConditionGroupQueryBase*> GetQueries() const;
	bool IsFirstConditionGroup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConditionGroup">();
	}
	static class UMovieGraphConditionGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConditionGroup>();
	}
};
static_assert(alignof(UMovieGraphConditionGroup) == 0x000008, "Wrong alignment on UMovieGraphConditionGroup");
static_assert(sizeof(UMovieGraphConditionGroup) == 0x0000F0, "Wrong size on UMovieGraphConditionGroup");
static_assert(offsetof(UMovieGraphConditionGroup, ID) == 0x000028, "Member 'UMovieGraphConditionGroup::ID' has a wrong offset!");
static_assert(offsetof(UMovieGraphConditionGroup, OpType) == 0x000038, "Member 'UMovieGraphConditionGroup::OpType' has a wrong offset!");
static_assert(offsetof(UMovieGraphConditionGroup, Queries) == 0x000040, "Member 'UMovieGraphConditionGroup::Queries' has a wrong offset!");
static_assert(offsetof(UMovieGraphConditionGroup, QueryResult) == 0x000050, "Member 'UMovieGraphConditionGroup::QueryResult' has a wrong offset!");
static_assert(offsetof(UMovieGraphConditionGroup, EvaluationResult) == 0x0000A0, "Member 'UMovieGraphConditionGroup::EvaluationResult' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphCollection
// 0x0020 (0x0048 - 0x0028)
class UMovieGraphCollection final : public UObject
{
public:
	class FString                                 CollectionName;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphConditionGroup*>      ConditionGroups;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UMovieGraphConditionGroup* AddConditionGroup();
	bool MoveConditionGroupToIndex(class UMovieGraphConditionGroup* InConditionGroup, const int32 NewIndex);
	bool RemoveConditionGroup(class UMovieGraphConditionGroup* InConditionGroup);
	void SetCollectionName(const class FString& InName);

	TSet<class AActor*> Evaluate(const class UWorld* InWorld) const;
	class FString GetCollectionName() const;
	const TArray<class UMovieGraphConditionGroup*> GetConditionGroups() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCollection">();
	}
	static class UMovieGraphCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCollection>();
	}
};
static_assert(alignof(UMovieGraphCollection) == 0x000008, "Wrong alignment on UMovieGraphCollection");
static_assert(sizeof(UMovieGraphCollection) == 0x000048, "Wrong size on UMovieGraphCollection");
static_assert(offsetof(UMovieGraphCollection, CollectionName) == 0x000028, "Member 'UMovieGraphCollection::CollectionName' has a wrong offset!");
static_assert(offsetof(UMovieGraphCollection, ConditionGroups) == 0x000038, "Member 'UMovieGraphCollection::ConditionGroups' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphCollectionModifier
// 0x0010 (0x0038 - 0x0028)
class UMovieGraphCollectionModifier : public UObject
{
public:
	TArray<class UMovieGraphCollection*>          Collections;                                       // 0x0028(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void AddCollection(class UMovieGraphCollection* Collection);
	void SetCollections(const TArray<class UMovieGraphCollection*>& InCollections);

	TArray<class UMovieGraphCollection*> GetCollections() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCollectionModifier">();
	}
	static class UMovieGraphCollectionModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCollectionModifier>();
	}
};
static_assert(alignof(UMovieGraphCollectionModifier) == 0x000008, "Wrong alignment on UMovieGraphCollectionModifier");
static_assert(sizeof(UMovieGraphCollectionModifier) == 0x000038, "Wrong size on UMovieGraphCollectionModifier");
static_assert(offsetof(UMovieGraphCollectionModifier, Collections) == 0x000028, "Member 'UMovieGraphCollectionModifier::Collections' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphMaterialModifier
// 0x0080 (0x00B8 - 0x0038)
class UMovieGraphMaterialModifier final : public UMovieGraphCollectionModifier
{
public:
	uint8                                         Pad_4501[0x50];                                    // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_Material : 1;                            // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4502[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyModifier(const class UWorld* World);
	void SetMaterial(TSoftObjectPtr<class UMaterialInterface> InMaterial);
	void UndoModifier();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphMaterialModifier">();
	}
	static class UMovieGraphMaterialModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphMaterialModifier>();
	}
};
static_assert(alignof(UMovieGraphMaterialModifier) == 0x000008, "Wrong alignment on UMovieGraphMaterialModifier");
static_assert(sizeof(UMovieGraphMaterialModifier) == 0x0000B8, "Wrong size on UMovieGraphMaterialModifier");
static_assert(offsetof(UMovieGraphMaterialModifier, Material) == 0x000090, "Member 'UMovieGraphMaterialModifier::Material' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphRenderPropertyModifier
// 0x0018 (0x0050 - 0x0038)
class UMovieGraphRenderPropertyModifier final : public UMovieGraphCollectionModifier
{
public:
	uint8                                         Pad_4503[0x10];                                    // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_bIsHidden : 1;                           // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bCastsShadows : 1;                       // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bCastShadowWhileHidden : 1;              // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bAffectIndirectLightingWhileHidden : 1;  // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bHoldout : 1;                            // 0x0048(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsHidden : 1;                                     // 0x0048(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastsShadows : 1;                                 // 0x0048(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowWhileHidden : 1;                        // 0x0048(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectIndirectLightingWhileHidden : 1;            // 0x0049(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoldout : 1;                                      // 0x0049(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4504[0x6];                                     // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyModifier(const class UWorld* World);
	void SetHidden(const bool bInIsHidden);
	void UndoModifier();

	bool IsHidden() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderPropertyModifier">();
	}
	static class UMovieGraphRenderPropertyModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderPropertyModifier>();
	}
};
static_assert(alignof(UMovieGraphRenderPropertyModifier) == 0x000008, "Wrong alignment on UMovieGraphRenderPropertyModifier");
static_assert(sizeof(UMovieGraphRenderPropertyModifier) == 0x000050, "Wrong size on UMovieGraphRenderPropertyModifier");

// Class MovieRenderPipelineCore.MovieGraphRenderLayer
// 0x0018 (0x0040 - 0x0028)
class UMovieGraphRenderLayer final : public UObject
{
public:
	class FName                                   RenderLayerName;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphCollectionModifier*>  Modifiers;                                         // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddModifier(class UMovieGraphCollectionModifier* Modifier);
	void Apply(const class UWorld* World);
	void RemoveModifier(class UMovieGraphCollectionModifier* Modifier);
	void Revert();
	void SetRenderLayerName(const class FName& NewName);

	class UMovieGraphCollection* GetCollectionByName(const class FString& Param_Name) const;
	TArray<class UMovieGraphCollectionModifier*> GetModifiers() const;
	class FName GetRenderLayerName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderLayer">();
	}
	static class UMovieGraphRenderLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderLayer>();
	}
};
static_assert(alignof(UMovieGraphRenderLayer) == 0x000008, "Wrong alignment on UMovieGraphRenderLayer");
static_assert(sizeof(UMovieGraphRenderLayer) == 0x000040, "Wrong size on UMovieGraphRenderLayer");
static_assert(offsetof(UMovieGraphRenderLayer, RenderLayerName) == 0x000028, "Member 'UMovieGraphRenderLayer::RenderLayerName' has a wrong offset!");
static_assert(offsetof(UMovieGraphRenderLayer, Modifiers) == 0x000030, "Member 'UMovieGraphRenderLayer::Modifiers' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphRenderLayerSubsystem
// 0x0018 (0x0048 - 0x0030)
class UMovieGraphRenderLayerSubsystem final : public UWorldSubsystem
{
public:
	TArray<class UMovieGraphRenderLayer*>         RenderLayers;                                      // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMovieGraphRenderLayer*                 ActiveRenderLayer;                                 // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMovieGraphRenderLayerSubsystem* GetFromWorld(const class UWorld* World);

	bool AddRenderLayer(class UMovieGraphRenderLayer* RenderLayer);
	void ClearActiveRenderLayer();
	const TArray<class UMovieGraphRenderLayer*> GetRenderLayers();
	void RemoveRenderLayer(const class FString& RenderLayerName);
	void Reset();
	void SetActiveRenderLayerByName(const class FName& RenderLayerName);
	void SetActiveRenderLayerByObj(class UMovieGraphRenderLayer* RenderLayer);

	class UMovieGraphRenderLayer* GetActiveRenderLayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderLayerSubsystem">();
	}
	static class UMovieGraphRenderLayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderLayerSubsystem>();
	}
};
static_assert(alignof(UMovieGraphRenderLayerSubsystem) == 0x000008, "Wrong alignment on UMovieGraphRenderLayerSubsystem");
static_assert(sizeof(UMovieGraphRenderLayerSubsystem) == 0x000048, "Wrong size on UMovieGraphRenderLayerSubsystem");
static_assert(offsetof(UMovieGraphRenderLayerSubsystem, RenderLayers) == 0x000030, "Member 'UMovieGraphRenderLayerSubsystem::RenderLayers' has a wrong offset!");
static_assert(offsetof(UMovieGraphRenderLayerSubsystem, ActiveRenderLayer) == 0x000040, "Member 'UMovieGraphRenderLayerSubsystem::ActiveRenderLayer' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSamplingMethodNode
// 0x0030 (0x00C8 - 0x0098)
class UMovieGraphSamplingMethodNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_SamplingMethodClass : 1;                 // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TemporalSampleCount : 1;                 // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4506[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         SamplingMethodClass;                               // 0x00A0(0x0020)(ZeroConstructor, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalSampleCount;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4507[0x4];                                     // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSamplingMethodNode">();
	}
	static class UMovieGraphSamplingMethodNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSamplingMethodNode>();
	}
};
static_assert(alignof(UMovieGraphSamplingMethodNode) == 0x000008, "Wrong alignment on UMovieGraphSamplingMethodNode");
static_assert(sizeof(UMovieGraphSamplingMethodNode) == 0x0000C8, "Wrong size on UMovieGraphSamplingMethodNode");
static_assert(offsetof(UMovieGraphSamplingMethodNode, SamplingMethodClass) == 0x0000A0, "Member 'UMovieGraphSamplingMethodNode::SamplingMethodClass' has a wrong offset!");
static_assert(offsetof(UMovieGraphSamplingMethodNode, TemporalSampleCount) == 0x0000C0, "Member 'UMovieGraphSamplingMethodNode::TemporalSampleCount' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSelectNode
// 0x0010 (0x00A8 - 0x0098)
class UMovieGraphSelectNode final : public UMovieGraphNode
{
public:
	class UMovieGraphValueContainer*              SelectOptions;                                     // 0x0098(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieGraphValueContainer*              SelectedOption;                                    // 0x00A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSelectNode">();
	}
	static class UMovieGraphSelectNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSelectNode>();
	}
};
static_assert(alignof(UMovieGraphSelectNode) == 0x000008, "Wrong alignment on UMovieGraphSelectNode");
static_assert(sizeof(UMovieGraphSelectNode) == 0x0000A8, "Wrong size on UMovieGraphSelectNode");
static_assert(offsetof(UMovieGraphSelectNode, SelectOptions) == 0x000098, "Member 'UMovieGraphSelectNode::SelectOptions' has a wrong offset!");
static_assert(offsetof(UMovieGraphSelectNode, SelectedOption) == 0x0000A0, "Member 'UMovieGraphSelectNode::SelectedOption' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSequenceDataSource
// 0x0028 (0x0050 - 0x0028)
class UMovieGraphSequenceDataSource final : public UMovieGraphDataSourceBase
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4508[0x20];                                    // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSequenceDataSource">();
	}
	static class UMovieGraphSequenceDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSequenceDataSource>();
	}
};
static_assert(alignof(UMovieGraphSequenceDataSource) == 0x000008, "Wrong alignment on UMovieGraphSequenceDataSource");
static_assert(sizeof(UMovieGraphSequenceDataSource) == 0x000050, "Wrong size on UMovieGraphSequenceDataSource");
static_assert(offsetof(UMovieGraphSequenceDataSource, LevelSequenceActor) == 0x000028, "Member 'UMovieGraphSequenceDataSource::LevelSequenceActor' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSetCVarValueNode
// 0x0020 (0x00B8 - 0x0098)
class UMovieGraphSetCVarValueNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_Name : 1;                                // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Value : 1;                               // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4509[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_MovieGraphSetCVarValueNode;                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_450A[0x4];                                     // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSetCVarValueNode">();
	}
	static class UMovieGraphSetCVarValueNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSetCVarValueNode>();
	}
};
static_assert(alignof(UMovieGraphSetCVarValueNode) == 0x000008, "Wrong alignment on UMovieGraphSetCVarValueNode");
static_assert(sizeof(UMovieGraphSetCVarValueNode) == 0x0000B8, "Wrong size on UMovieGraphSetCVarValueNode");
static_assert(offsetof(UMovieGraphSetCVarValueNode, Name_MovieGraphSetCVarValueNode) == 0x0000A0, "Member 'UMovieGraphSetCVarValueNode::Name_MovieGraphSetCVarValueNode' has a wrong offset!");
static_assert(offsetof(UMovieGraphSetCVarValueNode, Value) == 0x0000B0, "Member 'UMovieGraphSetCVarValueNode::Value' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphShowFlags
// 0x00D8 (0x0100 - 0x0028)
class UMovieGraphShowFlags final : public UObject
{
public:
	uint8                                         Pad_450B[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<uint32>                                  OverriddenShowFlags;                               // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TMap<uint32, bool>                            ShowFlagEnableState;                               // 0x0080(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_450C[0x30];                                    // 0x00D0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphShowFlags">();
	}
	static class UMovieGraphShowFlags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphShowFlags>();
	}
};
static_assert(alignof(UMovieGraphShowFlags) == 0x000008, "Wrong alignment on UMovieGraphShowFlags");
static_assert(sizeof(UMovieGraphShowFlags) == 0x000100, "Wrong size on UMovieGraphShowFlags");
static_assert(offsetof(UMovieGraphShowFlags, OverriddenShowFlags) == 0x000030, "Member 'UMovieGraphShowFlags::OverriddenShowFlags' has a wrong offset!");
static_assert(offsetof(UMovieGraphShowFlags, ShowFlagEnableState) == 0x000080, "Member 'UMovieGraphShowFlags::ShowFlagEnableState' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSubgraphNode
// 0x0028 (0x00C0 - 0x0098)
class UMovieGraphSubgraphNode final : public UMovieGraphNode
{
public:
	TSoftObjectPtr<class UMovieGraphConfig>       SubgraphAsset;                                     // 0x0098(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSubGraphAsset(const TSoftObjectPtr<class UMovieGraphConfig>& InSubgraphAsset);

	class UMovieGraphConfig* GetSubgraphAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSubgraphNode">();
	}
	static class UMovieGraphSubgraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSubgraphNode>();
	}
};
static_assert(alignof(UMovieGraphSubgraphNode) == 0x000008, "Wrong alignment on UMovieGraphSubgraphNode");
static_assert(sizeof(UMovieGraphSubgraphNode) == 0x0000C0, "Wrong size on UMovieGraphSubgraphNode");
static_assert(offsetof(UMovieGraphSubgraphNode, SubgraphAsset) == 0x000098, "Member 'UMovieGraphSubgraphNode::SubgraphAsset' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphUIRendererNode
// 0x0000 (0x0110 - 0x0110)
class UMovieGraphUIRendererNode final : public UMovieGraphWidgetRendererBaseNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphUIRendererNode">();
	}
	static class UMovieGraphUIRendererNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphUIRendererNode>();
	}
};
static_assert(alignof(UMovieGraphUIRendererNode) == 0x000008, "Wrong alignment on UMovieGraphUIRendererNode");
static_assert(sizeof(UMovieGraphUIRendererNode) == 0x000110, "Wrong size on UMovieGraphUIRendererNode");

// Class MovieRenderPipelineCore.MovieGraphVariableNode
// 0x0028 (0x00C0 - 0x0098)
class UMovieGraphVariableNode final : public UMovieGraphNode
{
public:
	class UMovieGraphVariable*                    GraphVariable;                                     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieGraphPinProperties               OutputPin;                                         // 0x00A0(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void SetVariable(class UMovieGraphVariable* InVariable);

	class UMovieGraphVariable* GetVariable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphVariableNode">();
	}
	static class UMovieGraphVariableNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphVariableNode>();
	}
};
static_assert(alignof(UMovieGraphVariableNode) == 0x000008, "Wrong alignment on UMovieGraphVariableNode");
static_assert(sizeof(UMovieGraphVariableNode) == 0x0000C0, "Wrong size on UMovieGraphVariableNode");
static_assert(offsetof(UMovieGraphVariableNode, GraphVariable) == 0x000098, "Member 'UMovieGraphVariableNode::GraphVariable' has a wrong offset!");
static_assert(offsetof(UMovieGraphVariableNode, OutputPin) == 0x0000A0, "Member 'UMovieGraphVariableNode::OutputPin' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphWarmUpSettingNode
// 0x0010 (0x00A8 - 0x0098)
class UMovieGraphWarmUpSettingNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_NumWarmUpFrames : 1;                     // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bEmulateMotionBlur : 1;                  // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_450D[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumWarmUpFrames;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmulateMotionBlur;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_450E[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphWarmUpSettingNode">();
	}
	static class UMovieGraphWarmUpSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphWarmUpSettingNode>();
	}
};
static_assert(alignof(UMovieGraphWarmUpSettingNode) == 0x000008, "Wrong alignment on UMovieGraphWarmUpSettingNode");
static_assert(sizeof(UMovieGraphWarmUpSettingNode) == 0x0000A8, "Wrong size on UMovieGraphWarmUpSettingNode");
static_assert(offsetof(UMovieGraphWarmUpSettingNode, NumWarmUpFrames) == 0x00009C, "Member 'UMovieGraphWarmUpSettingNode::NumWarmUpFrames' has a wrong offset!");
static_assert(offsetof(UMovieGraphWarmUpSettingNode, bEmulateMotionBlur) == 0x0000A0, "Member 'UMovieGraphWarmUpSettingNode::bEmulateMotionBlur' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieJobVariableAssignmentContainer
// 0x0038 (0x0060 - 0x0028)
class UMovieJobVariableAssignmentContainer final : public UObject
{
public:
	struct FInstancedPropertyBag                  Value;                                             // 0x0028(0x0010)(Edit, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0038(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FString GetValueSerializedString(const class UMovieGraphVariable* InGraphVariable);
	bool GetVariableAssignmentEnableState(const class UMovieGraphVariable* InGraphVariable, bool* bOutIsEnabled);
	void SetGraphConfig(const TSoftObjectPtr<class UMovieGraphConfig>& InGraphConfig);
	bool SetValueBool(const class UMovieGraphVariable* InGraphVariable, const bool bInValue);
	bool SetValueByte(const class UMovieGraphVariable* InGraphVariable, const uint8 InValue);
	bool SetValueClass(const class UMovieGraphVariable* InGraphVariable, class UClass* InValue);
	bool SetValueDouble(const class UMovieGraphVariable* InGraphVariable, const double InValue);
	bool SetValueEnum(const class UMovieGraphVariable* InGraphVariable, const uint8 InValue, const class UEnum* Enum);
	bool SetValueFloat(const class UMovieGraphVariable* InGraphVariable, const float InValue);
	bool SetValueInt32(const class UMovieGraphVariable* InGraphVariable, const int32 InValue);
	bool SetValueInt64(const class UMovieGraphVariable* InGraphVariable, const int64 InValue);
	bool SetValueName(const class UMovieGraphVariable* InGraphVariable, const class FName InValue);
	bool SetValueObject(const class UMovieGraphVariable* InGraphVariable, class UObject* InValue);
	bool SetValueSerializedString(const class UMovieGraphVariable* InGraphVariable, const class FString& NewValue);
	bool SetValueString(const class UMovieGraphVariable* InGraphVariable, const class FString& InValue);
	bool SetValueText(const class UMovieGraphVariable* InGraphVariable, const class FText& InValue);
	bool SetVariableAssignmentEnableState(const class UMovieGraphVariable* InGraphVariable, bool bIsEnabled);

	bool GetValueBool(const class UMovieGraphVariable* InGraphVariable, bool* bOutValue) const;
	bool GetValueByte(const class UMovieGraphVariable* InGraphVariable, uint8* OutValue) const;
	bool GetValueClass(const class UMovieGraphVariable* InGraphVariable, class UClass** OutValue) const;
	EMovieGraphContainerType GetValueContainerType(const class UMovieGraphVariable* InGraphVariable) const;
	bool GetValueDouble(const class UMovieGraphVariable* InGraphVariable, double* OutValue) const;
	bool GetValueEnum(const class UMovieGraphVariable* InGraphVariable, uint8* OutValue, const class UEnum* RequestedEnum) const;
	bool GetValueFloat(const class UMovieGraphVariable* InGraphVariable, float* OutValue) const;
	bool GetValueInt32(const class UMovieGraphVariable* InGraphVariable, int32* OutValue) const;
	bool GetValueInt64(const class UMovieGraphVariable* InGraphVariable, int64* OutValue) const;
	bool GetValueName(const class UMovieGraphVariable* InGraphVariable, class FName* OutValue) const;
	bool GetValueObject(const class UMovieGraphVariable* InGraphVariable, class UObject* OutValue, const class UClass* RequestedClass) const;
	bool GetValueString(const class UMovieGraphVariable* InGraphVariable, class FString* OutValue) const;
	bool GetValueText(const class UMovieGraphVariable* InGraphVariable, class FText* OutValue) const;
	EMovieGraphValueType GetValueType(const class UMovieGraphVariable* InGraphVariable) const;
	const class UObject* GetValueTypeObject(const class UMovieGraphVariable* InGraphVariable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieJobVariableAssignmentContainer">();
	}
	static class UMovieJobVariableAssignmentContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieJobVariableAssignmentContainer>();
	}
};
static_assert(alignof(UMovieJobVariableAssignmentContainer) == 0x000008, "Wrong alignment on UMovieJobVariableAssignmentContainer");
static_assert(sizeof(UMovieJobVariableAssignmentContainer) == 0x000060, "Wrong size on UMovieJobVariableAssignmentContainer");
static_assert(offsetof(UMovieJobVariableAssignmentContainer, Value) == 0x000028, "Member 'UMovieJobVariableAssignmentContainer::Value' has a wrong offset!");
static_assert(offsetof(UMovieJobVariableAssignmentContainer, GraphPreset) == 0x000038, "Member 'UMovieJobVariableAssignmentContainer::GraphPreset' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineSetting
// 0x0020 (0x0048 - 0x0028)
class UMoviePipelineSetting : public UObject
{
public:
	TWeakObjectPtr<class UMoviePipeline>          CachedPipeline;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_452E[0x17];                                    // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsEnabled(bool bInEnabled);

	void BuildNewProcessCommandLine(class FString& InOutUnrealURLParams, class FString& InOutCommandLineArgs) const;
	void BuildNewProcessCommandLineArgs(TArray<class FString>& InOutUnrealURLParams, TArray<class FString>& InOutCommandLineArgs, TArray<class FString>& InOutDeviceProfileCvars, TArray<class FString>& InOutExecCmds) const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineSetting">();
	}
	static class UMoviePipelineSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineSetting>();
	}
};
static_assert(alignof(UMoviePipelineSetting) == 0x000008, "Wrong alignment on UMoviePipelineSetting");
static_assert(sizeof(UMoviePipelineSetting) == 0x000048, "Wrong size on UMoviePipelineSetting");
static_assert(offsetof(UMoviePipelineSetting, CachedPipeline) == 0x000028, "Member 'UMoviePipelineSetting::CachedPipeline' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting, bEnabled) == 0x000030, "Member 'UMoviePipelineSetting::bEnabled' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCameraSetting
// 0x0010 (0x0058 - 0x0048)
class UMoviePipelineCameraSetting final : public UMoviePipelineSetting
{
public:
	EMoviePipelineShutterTiming                   ShutterTiming;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_452F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverscanPercentage;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderAllCameras;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4530[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCameraSetting">();
	}
	static class UMoviePipelineCameraSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCameraSetting>();
	}
};
static_assert(alignof(UMoviePipelineCameraSetting) == 0x000008, "Wrong alignment on UMoviePipelineCameraSetting");
static_assert(sizeof(UMoviePipelineCameraSetting) == 0x000058, "Wrong size on UMoviePipelineCameraSetting");
static_assert(offsetof(UMoviePipelineCameraSetting, ShutterTiming) == 0x000048, "Member 'UMoviePipelineCameraSetting::ShutterTiming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCameraSetting, OverscanPercentage) == 0x00004C, "Member 'UMoviePipelineCameraSetting::OverscanPercentage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCameraSetting, bRenderAllCameras) == 0x000050, "Member 'UMoviePipelineCameraSetting::bRenderAllCameras' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineGameMode
// 0x0000 (0x0338 - 0x0338)
class AMoviePipelineGameMode final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineGameMode">();
	}
	static class AMoviePipelineGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoviePipelineGameMode>();
	}
};
static_assert(alignof(AMoviePipelineGameMode) == 0x000008, "Wrong alignment on AMoviePipelineGameMode");
static_assert(sizeof(AMoviePipelineGameMode) == 0x000338, "Wrong size on AMoviePipelineGameMode");

// Class MovieRenderPipelineCore.MoviePipelineHighResSetting
// 0x0020 (0x0068 - 0x0048)
class UMoviePipelineHighResSetting final : public UMoviePipelineSetting
{
public:
	int32                                         TileCount;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureSharpnessBias;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapRatio;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSubSurfaceScattering;                     // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4531[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BurleySampleCount;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllocateHistoryPerTile;                           // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4532[0xB];                                     // 0x005D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineHighResSetting">();
	}
	static class UMoviePipelineHighResSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineHighResSetting>();
	}
};
static_assert(alignof(UMoviePipelineHighResSetting) == 0x000008, "Wrong alignment on UMoviePipelineHighResSetting");
static_assert(sizeof(UMoviePipelineHighResSetting) == 0x000068, "Wrong size on UMoviePipelineHighResSetting");
static_assert(offsetof(UMoviePipelineHighResSetting, TileCount) == 0x000048, "Member 'UMoviePipelineHighResSetting::TileCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, TextureSharpnessBias) == 0x00004C, "Member 'UMoviePipelineHighResSetting::TextureSharpnessBias' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, OverlapRatio) == 0x000050, "Member 'UMoviePipelineHighResSetting::OverlapRatio' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, bOverrideSubSurfaceScattering) == 0x000054, "Member 'UMoviePipelineHighResSetting::bOverrideSubSurfaceScattering' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, BurleySampleCount) == 0x000058, "Member 'UMoviePipelineHighResSetting::BurleySampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, bAllocateHistoryPerTile) == 0x00005C, "Member 'UMoviePipelineHighResSetting::bAllocateHistoryPerTile' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineInProcessExecutorSettings
// 0x0030 (0x0068 - 0x0038)
class UMoviePipelineInProcessExecutorSettings final : public UDeveloperSettings
{
public:
	bool                                          bCloseEditor;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4533[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalCommandLineArguments;                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InheritedCommandLineArguments;                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDelayFrameCount;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4534[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineInProcessExecutorSettings">();
	}
	static class UMoviePipelineInProcessExecutorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineInProcessExecutorSettings>();
	}
};
static_assert(alignof(UMoviePipelineInProcessExecutorSettings) == 0x000008, "Wrong alignment on UMoviePipelineInProcessExecutorSettings");
static_assert(sizeof(UMoviePipelineInProcessExecutorSettings) == 0x000068, "Wrong size on UMoviePipelineInProcessExecutorSettings");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, bCloseEditor) == 0x000038, "Member 'UMoviePipelineInProcessExecutorSettings::bCloseEditor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, AdditionalCommandLineArguments) == 0x000040, "Member 'UMoviePipelineInProcessExecutorSettings::AdditionalCommandLineArguments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, InheritedCommandLineArguments) == 0x000050, "Member 'UMoviePipelineInProcessExecutorSettings::InheritedCommandLineArguments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, InitialDelayFrameCount) == 0x000060, "Member 'UMoviePipelineInProcessExecutorSettings::InitialDelayFrameCount' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineOutputBase
// 0x0000 (0x0048 - 0x0048)
class UMoviePipelineOutputBase : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineOutputBase">();
	}
	static class UMoviePipelineOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineOutputBase");
static_assert(sizeof(UMoviePipelineOutputBase) == 0x000048, "Wrong size on UMoviePipelineOutputBase");

// Class MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase
// 0x0018 (0x0060 - 0x0048)
class UMoviePipelineSetting_BlueprintBase final : public UMoviePipelineSetting
{
public:
	class FText                                   CategoryText;                                      // 0x0048(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsValidOnPrimary;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsValidOnShots;                                   // 0x0059(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeDisabled;                                    // 0x005A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4535[0x5];                                     // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEngineTickBeginFrame();
	void ReceiveSetupForPipelineImpl(class UMoviePipeline* InPipeline);
	void ReceiveTeardownForPipelineImpl(class UMoviePipeline* InPipeline);

	struct FMoviePipelineFormatArgs ReceiveGetFormatArguments(struct FMoviePipelineFormatArgs& InOutFormatArgs) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineSetting_BlueprintBase">();
	}
	static class UMoviePipelineSetting_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineSetting_BlueprintBase>();
	}
};
static_assert(alignof(UMoviePipelineSetting_BlueprintBase) == 0x000008, "Wrong alignment on UMoviePipelineSetting_BlueprintBase");
static_assert(sizeof(UMoviePipelineSetting_BlueprintBase) == 0x000060, "Wrong size on UMoviePipelineSetting_BlueprintBase");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, CategoryText) == 0x000048, "Member 'UMoviePipelineSetting_BlueprintBase::CategoryText' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bIsValidOnPrimary) == 0x000058, "Member 'UMoviePipelineSetting_BlueprintBase::bIsValidOnPrimary' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bIsValidOnShots) == 0x000059, "Member 'UMoviePipelineSetting_BlueprintBase::bIsValidOnShots' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bCanBeDisabled) == 0x00005A, "Member 'UMoviePipelineSetting_BlueprintBase::bCanBeDisabled' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineViewFamilySetting
// 0x0000 (0x0048 - 0x0048)
class UMoviePipelineViewFamilySetting : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineViewFamilySetting">();
	}
	static class UMoviePipelineViewFamilySetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineViewFamilySetting>();
	}
};
static_assert(alignof(UMoviePipelineViewFamilySetting) == 0x000008, "Wrong alignment on UMoviePipelineViewFamilySetting");
static_assert(sizeof(UMoviePipelineViewFamilySetting) == 0x000048, "Wrong size on UMoviePipelineViewFamilySetting");

// Class MovieRenderPipelineCore.MovieRenderDebugWidget
// 0x0000 (0x02E0 - 0x02E0)
class UMovieRenderDebugWidget final : public UUserWidget
{
public:
	void OnInitializedForPipeline(class UMoviePipeline* ForPipeline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieRenderDebugWidget">();
	}
	static class UMovieRenderDebugWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieRenderDebugWidget>();
	}
};
static_assert(alignof(UMovieRenderDebugWidget) == 0x000008, "Wrong alignment on UMovieRenderDebugWidget");
static_assert(sizeof(UMovieRenderDebugWidget) == 0x0002E0, "Wrong size on UMovieRenderDebugWidget");

// Class MovieRenderPipelineCore.MovieGraphRenderPreviewWidget
// 0x0000 (0x02E0 - 0x02E0)
class UMovieGraphRenderPreviewWidget final : public UUserWidget
{
public:
	void OnInitializedForPipeline(class UMovieGraphPipeline* InPipeline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderPreviewWidget">();
	}
	static class UMovieGraphRenderPreviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderPreviewWidget>();
	}
};
static_assert(alignof(UMovieGraphRenderPreviewWidget) == 0x000008, "Wrong alignment on UMovieGraphRenderPreviewWidget");
static_assert(sizeof(UMovieGraphRenderPreviewWidget) == 0x0002E0, "Wrong size on UMovieGraphRenderPreviewWidget");

// Class MovieRenderPipelineCore.MoviePipeline
// 0x03A8 (0x0420 - 0x0078)
class UMoviePipeline final : public UMoviePipelineBase
{
public:
	FMulticastInlineDelegateProperty_             OnMoviePipelineFinishedDelegate;                   // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMoviePipelineCustomTimeStep*           CustomTimeStep;                                    // 0x0088(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4536[0x10];                                    // 0x0090(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEngineCustomTimeStep*                  CachedPrevCustomTimeStep;                          // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequence*                         TargetSequence;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieRenderDebugWidget*                DebugWidget;                                       // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture*                               PreviewTexture;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4537[0x260];                                   // 0x00C8(0x0260)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMovieRenderDebugWidget>    DebugWidgetClass;                                  // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4538[0x8];                                     // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineExecutorJob*              CurrentJob;                                        // 0x0338(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4539[0xE0];                                    // 0x0340(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class UMoviePipelineExecutorJob* InJob);
	void OnMoviePipelineFinishedImpl();
	void SetInitializationTime(const struct FDateTime& InDateTime);

	class UMoviePipelineExecutorJob* GetCurrentJob() const;
	struct FDateTime GetInitializationTime() const;
	struct FTimespan GetInitializationTimeOffset() const;
	class UMoviePipelinePrimaryConfig* GetPipelineMasterConfig() const;
	class UMoviePipelinePrimaryConfig* GetPipelinePrimaryConfig() const;
	class UTexture* GetPreviewTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipeline">();
	}
	static class UMoviePipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipeline>();
	}
};
static_assert(alignof(UMoviePipeline) == 0x000008, "Wrong alignment on UMoviePipeline");
static_assert(sizeof(UMoviePipeline) == 0x000420, "Wrong size on UMoviePipeline");
static_assert(offsetof(UMoviePipeline, OnMoviePipelineFinishedDelegate) == 0x000078, "Member 'UMoviePipeline::OnMoviePipelineFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CustomTimeStep) == 0x000088, "Member 'UMoviePipeline::CustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CachedPrevCustomTimeStep) == 0x0000A0, "Member 'UMoviePipeline::CachedPrevCustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, TargetSequence) == 0x0000A8, "Member 'UMoviePipeline::TargetSequence' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, LevelSequenceActor) == 0x0000B0, "Member 'UMoviePipeline::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, DebugWidget) == 0x0000B8, "Member 'UMoviePipeline::DebugWidget' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, PreviewTexture) == 0x0000C0, "Member 'UMoviePipeline::PreviewTexture' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, DebugWidgetClass) == 0x000328, "Member 'UMoviePipeline::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CurrentJob) == 0x000338, "Member 'UMoviePipeline::CurrentJob' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCustomTimeStep
// 0x0010 (0x0038 - 0x0028)
class UMoviePipelineCustomTimeStep final : public UEngineCustomTimeStep
{
public:
	uint8                                         Pad_453A[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCustomTimeStep">();
	}
	static class UMoviePipelineCustomTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCustomTimeStep>();
	}
};
static_assert(alignof(UMoviePipelineCustomTimeStep) == 0x000008, "Wrong alignment on UMoviePipelineCustomTimeStep");
static_assert(sizeof(UMoviePipelineCustomTimeStep) == 0x000038, "Wrong size on UMoviePipelineCustomTimeStep");

// Class MovieRenderPipelineCore.MoviePipelineAntiAliasingSetting
// 0x0020 (0x0068 - 0x0048)
class UMoviePipelineAntiAliasingSetting final : public UMoviePipelineSetting
{
public:
	int32                                         SpatialSampleCount;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalSampleCount;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAntiAliasing;                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasingMethod                           AntiAliasingMethod;                                // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_453B[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderWarmUpCount;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraCutForWarmUp;                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_453C[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EngineWarmUpCount;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderWarmUpFrames;                               // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_453D[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineAntiAliasingSetting">();
	}
	static class UMoviePipelineAntiAliasingSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineAntiAliasingSetting>();
	}
};
static_assert(alignof(UMoviePipelineAntiAliasingSetting) == 0x000008, "Wrong alignment on UMoviePipelineAntiAliasingSetting");
static_assert(sizeof(UMoviePipelineAntiAliasingSetting) == 0x000068, "Wrong size on UMoviePipelineAntiAliasingSetting");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, SpatialSampleCount) == 0x000048, "Member 'UMoviePipelineAntiAliasingSetting::SpatialSampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, TemporalSampleCount) == 0x00004C, "Member 'UMoviePipelineAntiAliasingSetting::TemporalSampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bOverrideAntiAliasing) == 0x000050, "Member 'UMoviePipelineAntiAliasingSetting::bOverrideAntiAliasing' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, AntiAliasingMethod) == 0x000051, "Member 'UMoviePipelineAntiAliasingSetting::AntiAliasingMethod' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, RenderWarmUpCount) == 0x000054, "Member 'UMoviePipelineAntiAliasingSetting::RenderWarmUpCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bUseCameraCutForWarmUp) == 0x000058, "Member 'UMoviePipelineAntiAliasingSetting::bUseCameraCutForWarmUp' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, EngineWarmUpCount) == 0x00005C, "Member 'UMoviePipelineAntiAliasingSetting::EngineWarmUpCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bRenderWarmUpFrames) == 0x000060, "Member 'UMoviePipelineAntiAliasingSetting::bRenderWarmUpFrames' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMoviePipelineBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UMovieSceneSequence* DuplicateSequence(class UObject* Param_Outer, class UMovieSceneSequence* InSequence);
	static class UMoviePipelineSetting* FindOrGetDefaultSettingForShot(TSubclassOf<class UMoviePipelineSetting> InSettingType, const class UMoviePipelinePrimaryConfig* InPrimaryConfig, const class UMoviePipelineExecutorShot* InShot);
	static float GetCompletionPercentage(const class UMoviePipeline* InPipeline);
	static float GetCurrentAperture(const class UMoviePipeline* InMoviePipeline);
	static class UMoviePipelineExecutorShot* GetCurrentExecutorShot(const class UMoviePipeline* InMoviePipeline);
	static float GetCurrentFocalLength(const class UMoviePipeline* InMoviePipeline);
	static float GetCurrentFocusDistance(const class UMoviePipeline* InMoviePipeline);
	static void GetCurrentSegmentName(class UMoviePipeline* InMoviePipeline, class FText* OutOuterName, class FText* OutInnerName);
	static EMovieRenderShotState GetCurrentSegmentState(class UMoviePipeline* InMoviePipeline);
	static struct FMoviePipelineSegmentWorkMetrics GetCurrentSegmentWorkMetrics(const class UMoviePipeline* InMoviePipeline);
	static class ULevelSequence* GetCurrentSequence(const class UMoviePipeline* InMoviePipeline);
	static struct FFrameNumber GetCurrentShotFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetCurrentShotTimecode(const class UMoviePipeline* InMoviePipeline);
	static struct FIntPoint GetEffectiveOutputResolution(class UMoviePipelinePrimaryConfig* InPrimaryConfig, class UMoviePipelineExecutorShot* InPipelineExecutorShot);
	static bool GetEstimatedTimeRemaining(const class UMoviePipeline* InPipeline, struct FTimespan* OutEstimate);
	static class FText GetJobAuthor(class UMoviePipeline* InMoviePipeline);
	static struct FDateTime GetJobInitializationTime(const class UMoviePipeline* InMoviePipeline);
	static class FText GetJobName(class UMoviePipeline* InMoviePipeline);
	static class FString GetMapPackageName(class UMoviePipelineExecutorJob* InJob);
	static struct FFrameNumber GetMasterFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetMasterTimecode(const class UMoviePipeline* InMoviePipeline);
	static class FText GetMoviePipelineEngineChangelistLabel(const class UMoviePipeline* InMoviePipeline);
	static void GetOverallOutputFrames(const class UMoviePipeline* InMoviePipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static void GetOverallSegmentCounts(const class UMoviePipeline* InMoviePipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static EMovieRenderPipelineState GetPipelineState(const class UMoviePipeline* InPipeline);
	static struct FFrameNumber GetRootFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetRootTimecode(const class UMoviePipeline* InMoviePipeline);
	static class UMoviePipelineQueue* LoadManifestFileFromString(const class FString& InManifestFilePath);
	static void ResolveFilenameFormatArguments(const class FString& InFormatString, const struct FMoviePipelineFilenameResolveParams& InParams, class FString* OutFinalPath, struct FMoviePipelineFormatArgs* OutMergedFormatArgs);
	static int32 ResolveVersionNumber(const struct FMoviePipelineFilenameResolveParams& InParams, bool bGetNextVersion);
	static void UpdateJobShotListFromSequence(class ULevelSequence* InSequence, class UMoviePipelineExecutorJob* InJob, bool* bShotsChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBlueprintLibrary">();
	}
	static class UMoviePipelineBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBlueprintLibrary>();
	}
};
static_assert(alignof(UMoviePipelineBlueprintLibrary) == 0x000008, "Wrong alignment on UMoviePipelineBlueprintLibrary");
static_assert(sizeof(UMoviePipelineBlueprintLibrary) == 0x000028, "Wrong size on UMoviePipelineBlueprintLibrary");

// Class MovieRenderPipelineCore.MoviePipelineColorSetting
// 0x00A8 (0x00F0 - 0x0048)
class UMoviePipelineColorSetting final : public UMoviePipelineSetting
{
public:
	struct FOpenColorIODisplayConfiguration       OCIOConfiguration;                                 // 0x0048(0x00A0)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bDisableToneCurve;                                 // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454D[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineColorSetting">();
	}
	static class UMoviePipelineColorSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineColorSetting>();
	}
};
static_assert(alignof(UMoviePipelineColorSetting) == 0x000008, "Wrong alignment on UMoviePipelineColorSetting");
static_assert(sizeof(UMoviePipelineColorSetting) == 0x0000F0, "Wrong size on UMoviePipelineColorSetting");
static_assert(offsetof(UMoviePipelineColorSetting, OCIOConfiguration) == 0x000048, "Member 'UMoviePipelineColorSetting::OCIOConfiguration' has a wrong offset!");
static_assert(offsetof(UMoviePipelineColorSetting, bDisableToneCurve) == 0x0000E8, "Member 'UMoviePipelineColorSetting::bDisableToneCurve' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCommandLineEncoder
// 0x0040 (0x0088 - 0x0048)
class UMoviePipelineCommandLineEncoder final : public UMoviePipelineSetting
{
public:
	class FString                                 FileNameFormatOverride;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePipelineEncodeQuality                   Quality;                                           // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454E[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalCommandLineArgs;                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteSourceFiles;                                // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEncodeOnRenderCanceled;                       // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteEachFrameDuration;                           // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454F[0x15];                                    // 0x0073(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCommandLineEncoder">();
	}
	static class UMoviePipelineCommandLineEncoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCommandLineEncoder>();
	}
};
static_assert(alignof(UMoviePipelineCommandLineEncoder) == 0x000008, "Wrong alignment on UMoviePipelineCommandLineEncoder");
static_assert(sizeof(UMoviePipelineCommandLineEncoder) == 0x000088, "Wrong size on UMoviePipelineCommandLineEncoder");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, FileNameFormatOverride) == 0x000048, "Member 'UMoviePipelineCommandLineEncoder::FileNameFormatOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, Quality) == 0x000058, "Member 'UMoviePipelineCommandLineEncoder::Quality' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, AdditionalCommandLineArgs) == 0x000060, "Member 'UMoviePipelineCommandLineEncoder::AdditionalCommandLineArgs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bDeleteSourceFiles) == 0x000070, "Member 'UMoviePipelineCommandLineEncoder::bDeleteSourceFiles' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bSkipEncodeOnRenderCanceled) == 0x000071, "Member 'UMoviePipelineCommandLineEncoder::bSkipEncodeOnRenderCanceled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bWriteEachFrameDuration) == 0x000072, "Member 'UMoviePipelineCommandLineEncoder::bWriteEachFrameDuration' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCommandLineEncoderSettings
// 0x00C0 (0x00F8 - 0x0038)
class UMoviePipelineCommandLineEncoderSettings final : public UDeveloperSettings
{
public:
	class FString                                 ExecutablePath;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CodecHelpText;                                     // 0x0048(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 VideoCodec;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioCodec;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFileExtension;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineFormat;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoInputStringFormat;                            // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioInputStringFormat;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Low;                                // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Med;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_High;                               // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Epic;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCommandLineEncoderSettings">();
	}
	static class UMoviePipelineCommandLineEncoderSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCommandLineEncoderSettings>();
	}
};
static_assert(alignof(UMoviePipelineCommandLineEncoderSettings) == 0x000008, "Wrong alignment on UMoviePipelineCommandLineEncoderSettings");
static_assert(sizeof(UMoviePipelineCommandLineEncoderSettings) == 0x0000F8, "Wrong size on UMoviePipelineCommandLineEncoderSettings");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, ExecutablePath) == 0x000038, "Member 'UMoviePipelineCommandLineEncoderSettings::ExecutablePath' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, CodecHelpText) == 0x000048, "Member 'UMoviePipelineCommandLineEncoderSettings::CodecHelpText' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, VideoCodec) == 0x000058, "Member 'UMoviePipelineCommandLineEncoderSettings::VideoCodec' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, AudioCodec) == 0x000068, "Member 'UMoviePipelineCommandLineEncoderSettings::AudioCodec' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, OutputFileExtension) == 0x000078, "Member 'UMoviePipelineCommandLineEncoderSettings::OutputFileExtension' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, CommandLineFormat) == 0x000088, "Member 'UMoviePipelineCommandLineEncoderSettings::CommandLineFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, VideoInputStringFormat) == 0x000098, "Member 'UMoviePipelineCommandLineEncoderSettings::VideoInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, AudioInputStringFormat) == 0x0000A8, "Member 'UMoviePipelineCommandLineEncoderSettings::AudioInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Low) == 0x0000B8, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Low' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Med) == 0x0000C8, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Med' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_High) == 0x0000D8, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_High' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Epic) == 0x0000E8, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Epic' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineConfigBase
// 0x0050 (0x0078 - 0x0028)
class UMoviePipelineConfigBase : public UObject
{
public:
	class FString                                 DisplayName;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMoviePipelineSetting*>          Settings;                                          // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMoviePipelineConfigBase> ConfigOrigin;                                      // 0x0048(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4550[0x8];                                     // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyFrom(class UMoviePipelineConfigBase* InConfig);
	class UMoviePipelineSetting* FindOrAddSettingByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch);
	void RemoveSetting(class UMoviePipelineSetting* InSetting);
	void SetConfigOrigin(class UMoviePipelineConfigBase* InConfig);

	class UMoviePipelineSetting* FindSettingByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch) const;
	TArray<class UMoviePipelineSetting*> FindSettingsByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch) const;
	class UMoviePipelineConfigBase* GetConfigOrigin() const;
	TArray<class UMoviePipelineSetting*> GetUserSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineConfigBase">();
	}
	static class UMoviePipelineConfigBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineConfigBase>();
	}
};
static_assert(alignof(UMoviePipelineConfigBase) == 0x000008, "Wrong alignment on UMoviePipelineConfigBase");
static_assert(sizeof(UMoviePipelineConfigBase) == 0x000078, "Wrong size on UMoviePipelineConfigBase");
static_assert(offsetof(UMoviePipelineConfigBase, DisplayName) == 0x000028, "Member 'UMoviePipelineConfigBase::DisplayName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConfigBase, Settings) == 0x000038, "Member 'UMoviePipelineConfigBase::Settings' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConfigBase, ConfigOrigin) == 0x000048, "Member 'UMoviePipelineConfigBase::ConfigOrigin' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineDebugSettings
// 0x0010 (0x0058 - 0x0048)
class UMoviePipelineDebugSettings final : public UMoviePipelineSetting
{
public:
	bool                                          bWriteAllSamples;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureFramesWithRenderDoc;                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4554[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CaptureFrame;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureUnrealInsightsTrace;                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4555[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDebugSettings">();
	}
	static class UMoviePipelineDebugSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDebugSettings>();
	}
};
static_assert(alignof(UMoviePipelineDebugSettings) == 0x000008, "Wrong alignment on UMoviePipelineDebugSettings");
static_assert(sizeof(UMoviePipelineDebugSettings) == 0x000058, "Wrong size on UMoviePipelineDebugSettings");
static_assert(offsetof(UMoviePipelineDebugSettings, bWriteAllSamples) == 0x000048, "Member 'UMoviePipelineDebugSettings::bWriteAllSamples' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, bCaptureFramesWithRenderDoc) == 0x000049, "Member 'UMoviePipelineDebugSettings::bCaptureFramesWithRenderDoc' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, CaptureFrame) == 0x00004C, "Member 'UMoviePipelineDebugSettings::CaptureFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, bCaptureUnrealInsightsTrace) == 0x000050, "Member 'UMoviePipelineDebugSettings::bCaptureUnrealInsightsTrace' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorBase
// 0x00F0 (0x0118 - 0x0028)
class UMoviePipelineExecutorBase : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnExecutorFinishedDelegate;                        // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4556[0x18];                                    // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnExecutorErroredDelegate;                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4557[0x20];                                    // 0x0060(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SocketMessageRecievedDelegate;                     // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             HTTPResponseRecievedDelegate;                      // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMovieRenderDebugWidget>    DebugWidgetClass;                                  // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4558[0x10];                                    // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserData;                                          // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMoviePipeline>             TargetPipelineClass;                               // 0x00C8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4559[0x48];                                    // 0x00D0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelAllJobs();
	void CancelCurrentJob();
	bool ConnectSocket(const class FString& InHostName, const int32 InPort);
	void DisconnectSocket();
	void Execute(class UMoviePipelineQueue* InPipelineQueue);
	void OnBeginFrame();
	void OnExecutorErroredImpl(class UMoviePipeline* ErroredPipeline, bool bFatal, const class FText& ErrorReason);
	void OnExecutorFinishedImpl();
	int32 SendHTTPRequest(const class FString& InURL, const class FString& InVerb, const class FString& InMessage, const TMap<class FString, class FString>& InHeaders);
	bool SendSocketMessage(const class FString& InMessage);
	void SetMoviePipelineClass(class UClass* InPipelineClass);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsRendering() const;
	bool IsSocketConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorBase">();
	}
	static class UMoviePipelineExecutorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorBase>();
	}
};
static_assert(alignof(UMoviePipelineExecutorBase) == 0x000008, "Wrong alignment on UMoviePipelineExecutorBase");
static_assert(sizeof(UMoviePipelineExecutorBase) == 0x000118, "Wrong size on UMoviePipelineExecutorBase");
static_assert(offsetof(UMoviePipelineExecutorBase, OnExecutorFinishedDelegate) == 0x000028, "Member 'UMoviePipelineExecutorBase::OnExecutorFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, OnExecutorErroredDelegate) == 0x000050, "Member 'UMoviePipelineExecutorBase::OnExecutorErroredDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, SocketMessageRecievedDelegate) == 0x000080, "Member 'UMoviePipelineExecutorBase::SocketMessageRecievedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, HTTPResponseRecievedDelegate) == 0x000090, "Member 'UMoviePipelineExecutorBase::HTTPResponseRecievedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, DebugWidgetClass) == 0x0000A0, "Member 'UMoviePipelineExecutorBase::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, UserData) == 0x0000B8, "Member 'UMoviePipelineExecutorBase::UserData' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, TargetPipelineClass) == 0x0000C8, "Member 'UMoviePipelineExecutorBase::TargetPipelineClass' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineFCPXMLExporter
// 0x0038 (0x0080 - 0x0048)
class UMoviePipelineFCPXMLExporter final : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_455E[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameFormatOverride;                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFCPXMLExportDataSource                       DataSource;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_455F[0x1F];                                    // 0x0061(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineFCPXMLExporter">();
	}
	static class UMoviePipelineFCPXMLExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineFCPXMLExporter>();
	}
};
static_assert(alignof(UMoviePipelineFCPXMLExporter) == 0x000008, "Wrong alignment on UMoviePipelineFCPXMLExporter");
static_assert(sizeof(UMoviePipelineFCPXMLExporter) == 0x000080, "Wrong size on UMoviePipelineFCPXMLExporter");
static_assert(offsetof(UMoviePipelineFCPXMLExporter, FileNameFormatOverride) == 0x000050, "Member 'UMoviePipelineFCPXMLExporter::FileNameFormatOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineFCPXMLExporter, DataSource) == 0x000060, "Member 'UMoviePipelineFCPXMLExporter::DataSource' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineGameOverrideSetting
// 0x00E8 (0x0130 - 0x0048)
class UMoviePipelineGameOverrideSetting final : public UMoviePipelineSetting
{
public:
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQualitySettings;                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePipelineTextureStreamingMethod          TextureStreaming;                                  // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLODZero;                                       // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHLODs;                                     // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighQualityShadows;                            // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4560[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowDistanceScale;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowRadiusThreshold;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideViewDistanceScale;                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4561[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ViewDistanceScale;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushGrassStreaming;                              // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushStreamingManagers;                           // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVirtualTextureFeedbackFactor;             // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4562[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualTextureFeedbackFactor;                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4563[0xC0];                                    // 0x0070(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineGameOverrideSetting">();
	}
	static class UMoviePipelineGameOverrideSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineGameOverrideSetting>();
	}
};
static_assert(alignof(UMoviePipelineGameOverrideSetting) == 0x000008, "Wrong alignment on UMoviePipelineGameOverrideSetting");
static_assert(sizeof(UMoviePipelineGameOverrideSetting) == 0x000130, "Wrong size on UMoviePipelineGameOverrideSetting");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, GameModeOverride) == 0x000048, "Member 'UMoviePipelineGameOverrideSetting::GameModeOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bCinematicQualitySettings) == 0x000050, "Member 'UMoviePipelineGameOverrideSetting::bCinematicQualitySettings' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, TextureStreaming) == 0x000051, "Member 'UMoviePipelineGameOverrideSetting::TextureStreaming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bUseLODZero) == 0x000052, "Member 'UMoviePipelineGameOverrideSetting::bUseLODZero' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bDisableHLODs) == 0x000053, "Member 'UMoviePipelineGameOverrideSetting::bDisableHLODs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bUseHighQualityShadows) == 0x000054, "Member 'UMoviePipelineGameOverrideSetting::bUseHighQualityShadows' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ShadowDistanceScale) == 0x000058, "Member 'UMoviePipelineGameOverrideSetting::ShadowDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ShadowRadiusThreshold) == 0x00005C, "Member 'UMoviePipelineGameOverrideSetting::ShadowRadiusThreshold' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bOverrideViewDistanceScale) == 0x000060, "Member 'UMoviePipelineGameOverrideSetting::bOverrideViewDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ViewDistanceScale) == 0x000064, "Member 'UMoviePipelineGameOverrideSetting::ViewDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bFlushGrassStreaming) == 0x000068, "Member 'UMoviePipelineGameOverrideSetting::bFlushGrassStreaming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bFlushStreamingManagers) == 0x000069, "Member 'UMoviePipelineGameOverrideSetting::bFlushStreamingManagers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bOverrideVirtualTextureFeedbackFactor) == 0x00006A, "Member 'UMoviePipelineGameOverrideSetting::bOverrideVirtualTextureFeedbackFactor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, VirtualTextureFeedbackFactor) == 0x00006C, "Member 'UMoviePipelineGameOverrideSetting::VirtualTextureFeedbackFactor' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineLinearExecutorBase
// 0x0028 (0x0140 - 0x0118)
class UMoviePipelineLinearExecutorBase : public UMoviePipelineExecutorBase
{
public:
	class UMoviePipelineQueue*                    Queue;                                             // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineBase*                     ActiveMoviePipeline;                               // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4564[0x18];                                    // 0x0128(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineLinearExecutorBase">();
	}
	static class UMoviePipelineLinearExecutorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineLinearExecutorBase>();
	}
};
static_assert(alignof(UMoviePipelineLinearExecutorBase) == 0x000008, "Wrong alignment on UMoviePipelineLinearExecutorBase");
static_assert(sizeof(UMoviePipelineLinearExecutorBase) == 0x000140, "Wrong size on UMoviePipelineLinearExecutorBase");
static_assert(offsetof(UMoviePipelineLinearExecutorBase, Queue) == 0x000118, "Member 'UMoviePipelineLinearExecutorBase::Queue' has a wrong offset!");
static_assert(offsetof(UMoviePipelineLinearExecutorBase, ActiveMoviePipeline) == 0x000120, "Member 'UMoviePipelineLinearExecutorBase::ActiveMoviePipeline' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineInProcessExecutor
// 0x0048 (0x0188 - 0x0140)
class UMoviePipelineInProcessExecutor final : public UMoviePipelineLinearExecutorBase
{
public:
	bool                                          bUseCurrentLevel;                                  // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4565[0x47];                                    // 0x0141(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineInProcessExecutor">();
	}
	static class UMoviePipelineInProcessExecutor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineInProcessExecutor>();
	}
};
static_assert(alignof(UMoviePipelineInProcessExecutor) == 0x000008, "Wrong alignment on UMoviePipelineInProcessExecutor");
static_assert(sizeof(UMoviePipelineInProcessExecutor) == 0x000188, "Wrong size on UMoviePipelineInProcessExecutor");
static_assert(offsetof(UMoviePipelineInProcessExecutor, bUseCurrentLevel) == 0x000140, "Member 'UMoviePipelineInProcessExecutor::bUseCurrentLevel' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineOutputSetting
// 0x0068 (0x00B0 - 0x0048)
class UMoviePipelineOutputSetting final : public UMoviePipelineSetting
{
public:
	struct FDirectoryPath                         OutputDirectory;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNameFormat;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              OutputResolution;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomFrameRate;                               // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4566[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             OutputFrameRate;                                   // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4567[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOverrideExistingOutput;                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4568[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandleFrameCount;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputFrameStep;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomPlaybackRange;                           // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4569[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomStartFrame;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomEndFrame;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VersionNumber;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoVersion;                                      // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_456A[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZeroPadFrameNumbers;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberOffset;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushDiskWritesPerShot;                           // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_456B[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineOutputSetting">();
	}
	static class UMoviePipelineOutputSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineOutputSetting>();
	}
};
static_assert(alignof(UMoviePipelineOutputSetting) == 0x000008, "Wrong alignment on UMoviePipelineOutputSetting");
static_assert(sizeof(UMoviePipelineOutputSetting) == 0x0000B0, "Wrong size on UMoviePipelineOutputSetting");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputDirectory) == 0x000048, "Member 'UMoviePipelineOutputSetting::OutputDirectory' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, FileNameFormat) == 0x000058, "Member 'UMoviePipelineOutputSetting::FileNameFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputResolution) == 0x000068, "Member 'UMoviePipelineOutputSetting::OutputResolution' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bUseCustomFrameRate) == 0x000070, "Member 'UMoviePipelineOutputSetting::bUseCustomFrameRate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputFrameRate) == 0x000074, "Member 'UMoviePipelineOutputSetting::OutputFrameRate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bOverrideExistingOutput) == 0x000080, "Member 'UMoviePipelineOutputSetting::bOverrideExistingOutput' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, HandleFrameCount) == 0x000084, "Member 'UMoviePipelineOutputSetting::HandleFrameCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputFrameStep) == 0x000088, "Member 'UMoviePipelineOutputSetting::OutputFrameStep' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bUseCustomPlaybackRange) == 0x00008C, "Member 'UMoviePipelineOutputSetting::bUseCustomPlaybackRange' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, CustomStartFrame) == 0x000090, "Member 'UMoviePipelineOutputSetting::CustomStartFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, CustomEndFrame) == 0x000094, "Member 'UMoviePipelineOutputSetting::CustomEndFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, VersionNumber) == 0x000098, "Member 'UMoviePipelineOutputSetting::VersionNumber' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bAutoVersion) == 0x00009C, "Member 'UMoviePipelineOutputSetting::bAutoVersion' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, ZeroPadFrameNumbers) == 0x0000A0, "Member 'UMoviePipelineOutputSetting::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, FrameNumberOffset) == 0x0000A4, "Member 'UMoviePipelineOutputSetting::FrameNumberOffset' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bFlushDiskWritesPerShot) == 0x0000A8, "Member 'UMoviePipelineOutputSetting::bFlushDiskWritesPerShot' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelinePrimaryConfig
// 0x0068 (0x00E0 - 0x0078)
class UMoviePipelinePrimaryConfig final : public UMoviePipelineConfigBase
{
public:
	TMap<class FString, class UMoviePipelineShotConfig*> PerShotConfigMapping;                              // 0x0078(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMoviePipelineOutputSetting*            OutputSetting;                                     // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoviePipelineSetting*>          TransientSettings;                                 // 0x00D0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void InitializeTransientSettings();

	TArray<class UMoviePipelineSetting*> GetAllSettings(const bool bIncludeDisabledSettings, const bool bIncludeTransientSettings) const;
	struct FFrameRate GetEffectiveFrameRate(const class ULevelSequence* InSequence) const;
	TArray<class UMoviePipelineSetting*> GetTransientSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelinePrimaryConfig">();
	}
	static class UMoviePipelinePrimaryConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelinePrimaryConfig>();
	}
};
static_assert(alignof(UMoviePipelinePrimaryConfig) == 0x000008, "Wrong alignment on UMoviePipelinePrimaryConfig");
static_assert(sizeof(UMoviePipelinePrimaryConfig) == 0x0000E0, "Wrong size on UMoviePipelinePrimaryConfig");
static_assert(offsetof(UMoviePipelinePrimaryConfig, PerShotConfigMapping) == 0x000078, "Member 'UMoviePipelinePrimaryConfig::PerShotConfigMapping' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePrimaryConfig, OutputSetting) == 0x0000C8, "Member 'UMoviePipelinePrimaryConfig::OutputSetting' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePrimaryConfig, TransientSettings) == 0x0000D0, "Member 'UMoviePipelinePrimaryConfig::TransientSettings' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelinePythonHostExecutor
// 0x0018 (0x0130 - 0x0118)
class UMoviePipelinePythonHostExecutor final : public UMoviePipelineExecutorBase
{
public:
	TSubclassOf<class UMoviePipelinePythonHostExecutor> ExecutorClass;                                     // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineQueue*                    PipelineQueue;                                     // 0x0120(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 LastLoadedWorld;                                   // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ExecuteDelayed(class UMoviePipelineQueue* InPipelineQueue);
	void OnMapLoad(class UWorld* InWorld);

	class UWorld* GetLastLoadedWorld() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelinePythonHostExecutor">();
	}
	static class UMoviePipelinePythonHostExecutor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelinePythonHostExecutor>();
	}
};
static_assert(alignof(UMoviePipelinePythonHostExecutor) == 0x000008, "Wrong alignment on UMoviePipelinePythonHostExecutor");
static_assert(sizeof(UMoviePipelinePythonHostExecutor) == 0x000130, "Wrong size on UMoviePipelinePythonHostExecutor");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, ExecutorClass) == 0x000118, "Member 'UMoviePipelinePythonHostExecutor::ExecutorClass' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, PipelineQueue) == 0x000120, "Member 'UMoviePipelinePythonHostExecutor::PipelineQueue' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, LastLoadedWorld) == 0x000128, "Member 'UMoviePipelinePythonHostExecutor::LastLoadedWorld' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorShot
// 0x01A8 (0x01D0 - 0x0028)
class UMoviePipelineExecutorShot final : public UObject
{
public:
	bool                                          bEnabled;                                          // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_456D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OuterName;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InnerName;                                         // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMoviePipelineSidecarCamera>    SidecarCameras;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_456E[0xE0];                                    // 0x0060(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0140(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_456F[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusMessage;                                     // 0x0148(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineShotConfig*               ShotOverrideConfig;                                // 0x0158(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelineShotConfig> ShotOverridePresetOrigin;                          // 0x0160(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0188(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieJobVariableAssignmentContainer*> GraphVariableAssignments;                          // 0x01B0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieJobVariableAssignmentContainer*> PrimaryGraphVariableAssignments;                   // 0x01C0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UMoviePipelineShotConfig* AllocateNewShotOverrideConfig(TSubclassOf<class UMoviePipelineShotConfig> InConfigType);
	class UMovieJobVariableAssignmentContainer* GetOrCreateJobVariableAssignmentsForGraph(const class UMovieGraphConfig* InGraph, const bool bIsForPrimaryOverrides);
	void SetGraphPreset(const class UMovieGraphConfig* InGraphPreset, const bool bUpdateVariableAssignments);
	void SetShotOverrideConfiguration(class UMoviePipelineShotConfig* InPreset);
	void SetShotOverridePresetOrigin(class UMoviePipelineShotConfig* InPreset);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class FString GetCameraName(int32 InCameraIndex) const;
	class UMovieGraphConfig* GetGraphPreset() const;
	class UMoviePipelineShotConfig* GetShotOverrideConfiguration() const;
	class UMoviePipelineShotConfig* GetShotOverridePresetOrigin() const;
	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsUsingGraphConfiguration() const;
	bool ShouldRender() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorShot">();
	}
	static class UMoviePipelineExecutorShot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorShot>();
	}
};
static_assert(alignof(UMoviePipelineExecutorShot) == 0x000008, "Wrong alignment on UMoviePipelineExecutorShot");
static_assert(sizeof(UMoviePipelineExecutorShot) == 0x0001D0, "Wrong size on UMoviePipelineExecutorShot");
static_assert(offsetof(UMoviePipelineExecutorShot, bEnabled) == 0x000028, "Member 'UMoviePipelineExecutorShot::bEnabled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, OuterName) == 0x000030, "Member 'UMoviePipelineExecutorShot::OuterName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, InnerName) == 0x000040, "Member 'UMoviePipelineExecutorShot::InnerName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, SidecarCameras) == 0x000050, "Member 'UMoviePipelineExecutorShot::SidecarCameras' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, Progress) == 0x000140, "Member 'UMoviePipelineExecutorShot::Progress' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, StatusMessage) == 0x000148, "Member 'UMoviePipelineExecutorShot::StatusMessage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, ShotOverrideConfig) == 0x000158, "Member 'UMoviePipelineExecutorShot::ShotOverrideConfig' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, ShotOverridePresetOrigin) == 0x000160, "Member 'UMoviePipelineExecutorShot::ShotOverridePresetOrigin' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, GraphPreset) == 0x000188, "Member 'UMoviePipelineExecutorShot::GraphPreset' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, GraphVariableAssignments) == 0x0001B0, "Member 'UMoviePipelineExecutorShot::GraphVariableAssignments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, PrimaryGraphVariableAssignments) == 0x0001C0, "Member 'UMoviePipelineExecutorShot::PrimaryGraphVariableAssignments' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorJob
// 0x0130 (0x0158 - 0x0028)
class UMoviePipelineExecutorJob final : public UObject
{
public:
	class FString                                 JobName;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Sequence;                                          // 0x0038(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Map;                                               // 0x0058(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMoviePipelineExecutorShot*>     ShotInfo;                                          // 0x0098(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4573[0x18];                                    // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusMessage;                                     // 0x00D0(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StatusProgress;                                    // 0x00E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsConsumed;                                       // 0x00E4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4574[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelinePrimaryConfig*            Configuration;                                     // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelinePrimaryConfig> PresetOrigin;                                      // 0x00F0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4575[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0120(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieJobVariableAssignmentContainer*> GraphVariableAssignments;                          // 0x0148(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UMovieJobVariableAssignmentContainer* GetOrCreateJobVariableAssignmentsForGraph(const class UMovieGraphConfig* InGraph);
	void OnDuplicated();
	void SetConfiguration(class UMoviePipelinePrimaryConfig* InPreset);
	void SetConsumed(const bool bInConsumed);
	void SetGraphPreset(const class UMovieGraphConfig* InGraphPreset, const bool bUpdateVariableAssignments);
	void SetIsEnabled(const bool bInEnabled);
	void SetPresetOrigin(class UMoviePipelinePrimaryConfig* InPreset);
	void SetSequence(const struct FSoftObjectPath& InSequence);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class UMoviePipelinePrimaryConfig* GetConfiguration() const;
	class UMovieGraphConfig* GetGraphPreset() const;
	class UMoviePipelinePrimaryConfig* GetPresetOrigin() const;
	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsConsumed() const;
	bool IsEnabled() const;
	bool IsUsingGraphConfiguration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorJob">();
	}
	static class UMoviePipelineExecutorJob* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorJob>();
	}
};
static_assert(alignof(UMoviePipelineExecutorJob) == 0x000008, "Wrong alignment on UMoviePipelineExecutorJob");
static_assert(sizeof(UMoviePipelineExecutorJob) == 0x000158, "Wrong size on UMoviePipelineExecutorJob");
static_assert(offsetof(UMoviePipelineExecutorJob, JobName) == 0x000028, "Member 'UMoviePipelineExecutorJob::JobName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Sequence) == 0x000038, "Member 'UMoviePipelineExecutorJob::Sequence' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Map) == 0x000058, "Member 'UMoviePipelineExecutorJob::Map' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Author) == 0x000078, "Member 'UMoviePipelineExecutorJob::Author' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Comment) == 0x000088, "Member 'UMoviePipelineExecutorJob::Comment' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, ShotInfo) == 0x000098, "Member 'UMoviePipelineExecutorJob::ShotInfo' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, UserData) == 0x0000A8, "Member 'UMoviePipelineExecutorJob::UserData' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, StatusMessage) == 0x0000D0, "Member 'UMoviePipelineExecutorJob::StatusMessage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, StatusProgress) == 0x0000E0, "Member 'UMoviePipelineExecutorJob::StatusProgress' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, bIsConsumed) == 0x0000E4, "Member 'UMoviePipelineExecutorJob::bIsConsumed' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Configuration) == 0x0000E8, "Member 'UMoviePipelineExecutorJob::Configuration' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, PresetOrigin) == 0x0000F0, "Member 'UMoviePipelineExecutorJob::PresetOrigin' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, bEnabled) == 0x000118, "Member 'UMoviePipelineExecutorJob::bEnabled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, GraphPreset) == 0x000120, "Member 'UMoviePipelineExecutorJob::GraphPreset' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, GraphVariableAssignments) == 0x000148, "Member 'UMoviePipelineExecutorJob::GraphVariableAssignments' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineQueue
// 0x0040 (0x0068 - 0x0028)
class UMoviePipelineQueue final : public UObject
{
public:
	TArray<class UMoviePipelineExecutorJob*>      Jobs;                                              // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelineQueue>     QueueOrigin;                                       // 0x0038(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4577[0x8];                                     // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMoviePipelineExecutorJob* AllocateNewJob(TSubclassOf<class UMoviePipelineExecutorJob> InJobType);
	void CopyFrom(class UMoviePipelineQueue* InQueue);
	void DeleteAllJobs();
	void DeleteJob(class UMoviePipelineExecutorJob* InJob);
	class UMoviePipelineExecutorJob* DuplicateJob(class UMoviePipelineExecutorJob* InJob);
	void SetJobIndex(class UMoviePipelineExecutorJob* InJob, int32 Param_Index);
	void SetQueueOrigin(class UMoviePipelineQueue* InConfig);

	TArray<class UMoviePipelineExecutorJob*> GetJobs() const;
	class UMoviePipelineQueue* GetQueueOrigin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineQueue">();
	}
	static class UMoviePipelineQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineQueue>();
	}
};
static_assert(alignof(UMoviePipelineQueue) == 0x000008, "Wrong alignment on UMoviePipelineQueue");
static_assert(sizeof(UMoviePipelineQueue) == 0x000068, "Wrong size on UMoviePipelineQueue");
static_assert(offsetof(UMoviePipelineQueue, Jobs) == 0x000028, "Member 'UMoviePipelineQueue::Jobs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueue, QueueOrigin) == 0x000038, "Member 'UMoviePipelineQueue::QueueOrigin' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem
// 0x0070 (0x00A0 - 0x0030)
class UMoviePipelineQueueEngineSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnRenderFinished;                                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorBase*             ActiveExecutor;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineQueue*                    CurrentQueue;                                      // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4579[0x50];                                    // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMoviePipelineExecutorJob* AllocateJob(class ULevelSequence* InSequence);
	void RenderJob(class UMoviePipelineExecutorJob* InJob);
	class UMoviePipelineExecutorBase* RenderQueueWithExecutor(TSubclassOf<class UMoviePipelineExecutorBase> InExecutorType);
	void RenderQueueWithExecutorInstance(class UMoviePipelineExecutorBase* InExecutor);
	void SetConfiguration(TSubclassOf<class UMovieRenderDebugWidget> InProgressWidgetClass, const bool bRenderPlayerViewport);

	class UMoviePipelineExecutorBase* GetActiveExecutor() const;
	class UMoviePipelineQueue* GetQueue() const;
	bool IsRendering() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineQueueEngineSubsystem">();
	}
	static class UMoviePipelineQueueEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineQueueEngineSubsystem>();
	}
};
static_assert(alignof(UMoviePipelineQueueEngineSubsystem) == 0x000008, "Wrong alignment on UMoviePipelineQueueEngineSubsystem");
static_assert(sizeof(UMoviePipelineQueueEngineSubsystem) == 0x0000A0, "Wrong size on UMoviePipelineQueueEngineSubsystem");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, OnRenderFinished) == 0x000030, "Member 'UMoviePipelineQueueEngineSubsystem::OnRenderFinished' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, ActiveExecutor) == 0x000040, "Member 'UMoviePipelineQueueEngineSubsystem::ActiveExecutor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, CurrentQueue) == 0x000048, "Member 'UMoviePipelineQueueEngineSubsystem::CurrentQueue' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineRenderPass
// 0x0000 (0x0048 - 0x0048)
class UMoviePipelineRenderPass : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineRenderPass">();
	}
	static class UMoviePipelineRenderPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineRenderPass>();
	}
};
static_assert(alignof(UMoviePipelineRenderPass) == 0x000008, "Wrong alignment on UMoviePipelineRenderPass");
static_assert(sizeof(UMoviePipelineRenderPass) == 0x000048, "Wrong size on UMoviePipelineRenderPass");

// Class MovieRenderPipelineCore.MoviePipelineShotConfig
// 0x0000 (0x0078 - 0x0078)
class UMoviePipelineShotConfig final : public UMoviePipelineConfigBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineShotConfig">();
	}
	static class UMoviePipelineShotConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineShotConfig>();
	}
};
static_assert(alignof(UMoviePipelineShotConfig) == 0x000008, "Wrong alignment on UMoviePipelineShotConfig");
static_assert(sizeof(UMoviePipelineShotConfig) == 0x000078, "Wrong size on UMoviePipelineShotConfig");

// Class MovieRenderPipelineCore.MoviePipelineVideoOutputBase
// 0x0048 (0x0090 - 0x0048)
class UMoviePipelineVideoOutputBase final : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_457B[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineVideoOutputBase">();
	}
	static class UMoviePipelineVideoOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineVideoOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineVideoOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineVideoOutputBase");
static_assert(sizeof(UMoviePipelineVideoOutputBase) == 0x000090, "Wrong size on UMoviePipelineVideoOutputBase");

}

