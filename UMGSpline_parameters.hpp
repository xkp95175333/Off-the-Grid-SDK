#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMGSpline

#include "Basic.hpp"

#include "UMGSpline_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UMGSpline.SplineWidget.AddSplinePoint
// 0x0028 (0x0028 - 0x0000)
struct SplineWidget_AddSplinePoint final
{
public:
	struct FUMGSplinePoint                        SplinePoint;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUpdateSpline;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineWidget_AddSplinePoint) == 0x000008, "Wrong alignment on SplineWidget_AddSplinePoint");
static_assert(sizeof(SplineWidget_AddSplinePoint) == 0x000028, "Wrong size on SplineWidget_AddSplinePoint");
static_assert(offsetof(SplineWidget_AddSplinePoint, SplinePoint) == 0x000000, "Member 'SplineWidget_AddSplinePoint::SplinePoint' has a wrong offset!");
static_assert(offsetof(SplineWidget_AddSplinePoint, bUpdateSpline) == 0x000020, "Member 'SplineWidget_AddSplinePoint::bUpdateSpline' has a wrong offset!");

// Function UMGSpline.SplineWidget.AddSplinePointAtIndex
// 0x0028 (0x0028 - 0x0000)
struct SplineWidget_AddSplinePointAtIndex final
{
public:
	struct FUMGSplinePoint                        SplinePoint;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateSpline;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A0[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineWidget_AddSplinePointAtIndex) == 0x000008, "Wrong alignment on SplineWidget_AddSplinePointAtIndex");
static_assert(sizeof(SplineWidget_AddSplinePointAtIndex) == 0x000028, "Wrong size on SplineWidget_AddSplinePointAtIndex");
static_assert(offsetof(SplineWidget_AddSplinePointAtIndex, SplinePoint) == 0x000000, "Member 'SplineWidget_AddSplinePointAtIndex::SplinePoint' has a wrong offset!");
static_assert(offsetof(SplineWidget_AddSplinePointAtIndex, Param_Index) == 0x000020, "Member 'SplineWidget_AddSplinePointAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SplineWidget_AddSplinePointAtIndex, bUpdateSpline) == 0x000024, "Member 'SplineWidget_AddSplinePointAtIndex::bUpdateSpline' has a wrong offset!");

// Function UMGSpline.SplineWidget.ChangeSplinePointAtIndex
// 0x0028 (0x0028 - 0x0000)
struct SplineWidget_ChangeSplinePointAtIndex final
{
public:
	struct FUMGSplinePoint                        SplinePoint;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateSpline;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A1[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineWidget_ChangeSplinePointAtIndex) == 0x000008, "Wrong alignment on SplineWidget_ChangeSplinePointAtIndex");
static_assert(sizeof(SplineWidget_ChangeSplinePointAtIndex) == 0x000028, "Wrong size on SplineWidget_ChangeSplinePointAtIndex");
static_assert(offsetof(SplineWidget_ChangeSplinePointAtIndex, SplinePoint) == 0x000000, "Member 'SplineWidget_ChangeSplinePointAtIndex::SplinePoint' has a wrong offset!");
static_assert(offsetof(SplineWidget_ChangeSplinePointAtIndex, Param_Index) == 0x000020, "Member 'SplineWidget_ChangeSplinePointAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SplineWidget_ChangeSplinePointAtIndex, bUpdateSpline) == 0x000024, "Member 'SplineWidget_ChangeSplinePointAtIndex::bUpdateSpline' has a wrong offset!");

// Function UMGSpline.SplineWidget.RemoveAllSplinePoint
// 0x0001 (0x0001 - 0x0000)
struct SplineWidget_RemoveAllSplinePoint final
{
public:
	bool                                          bUpdateSpline;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_RemoveAllSplinePoint) == 0x000001, "Wrong alignment on SplineWidget_RemoveAllSplinePoint");
static_assert(sizeof(SplineWidget_RemoveAllSplinePoint) == 0x000001, "Wrong size on SplineWidget_RemoveAllSplinePoint");
static_assert(offsetof(SplineWidget_RemoveAllSplinePoint, bUpdateSpline) == 0x000000, "Member 'SplineWidget_RemoveAllSplinePoint::bUpdateSpline' has a wrong offset!");

// Function UMGSpline.SplineWidget.RemoveSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct SplineWidget_RemoveSplinePoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateSpline;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A2[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineWidget_RemoveSplinePoint) == 0x000004, "Wrong alignment on SplineWidget_RemoveSplinePoint");
static_assert(sizeof(SplineWidget_RemoveSplinePoint) == 0x000008, "Wrong size on SplineWidget_RemoveSplinePoint");
static_assert(offsetof(SplineWidget_RemoveSplinePoint, Param_Index) == 0x000000, "Member 'SplineWidget_RemoveSplinePoint::Param_Index' has a wrong offset!");
static_assert(offsetof(SplineWidget_RemoveSplinePoint, bUpdateSpline) == 0x000004, "Member 'SplineWidget_RemoveSplinePoint::bUpdateSpline' has a wrong offset!");

// Function UMGSpline.SplineWidget.SetSplineMaterial
// 0x0008 (0x0008 - 0x0000)
struct SplineWidget_SetSplineMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_SetSplineMaterial) == 0x000008, "Wrong alignment on SplineWidget_SetSplineMaterial");
static_assert(sizeof(SplineWidget_SetSplineMaterial) == 0x000008, "Wrong size on SplineWidget_SetSplineMaterial");
static_assert(offsetof(SplineWidget_SetSplineMaterial, Material) == 0x000000, "Member 'SplineWidget_SetSplineMaterial::Material' has a wrong offset!");

// Function UMGSpline.SplineWidget.SetSplineThickness
// 0x0004 (0x0004 - 0x0000)
struct SplineWidget_SetSplineThickness final
{
public:
	float                                         Thickness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_SetSplineThickness) == 0x000004, "Wrong alignment on SplineWidget_SetSplineThickness");
static_assert(sizeof(SplineWidget_SetSplineThickness) == 0x000004, "Wrong size on SplineWidget_SetSplineThickness");
static_assert(offsetof(SplineWidget_SetSplineThickness, Thickness) == 0x000000, "Member 'SplineWidget_SetSplineThickness::Thickness' has a wrong offset!");

// Function UMGSpline.SplineWidget.SetSplineType
// 0x0001 (0x0001 - 0x0000)
struct SplineWidget_SetSplineType final
{
public:
	EUMGSplineType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_SetSplineType) == 0x000001, "Wrong alignment on SplineWidget_SetSplineType");
static_assert(sizeof(SplineWidget_SetSplineType) == 0x000001, "Wrong size on SplineWidget_SetSplineType");
static_assert(offsetof(SplineWidget_SetSplineType, Type) == 0x000000, "Member 'SplineWidget_SetSplineType::Type' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetDirectionAtDistanceAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetDirectionAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetDirectionAtDistanceAlongSpline) == 0x000008, "Wrong alignment on SplineWidget_GetDirectionAtDistanceAlongSpline");
static_assert(sizeof(SplineWidget_GetDirectionAtDistanceAlongSpline) == 0x000018, "Wrong size on SplineWidget_GetDirectionAtDistanceAlongSpline");
static_assert(offsetof(SplineWidget_GetDirectionAtDistanceAlongSpline, Distance) == 0x000000, "Member 'SplineWidget_GetDirectionAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetDirectionAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'SplineWidget_GetDirectionAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetDirectionAtSplineInputKey
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetDirectionAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetDirectionAtSplineInputKey) == 0x000008, "Wrong alignment on SplineWidget_GetDirectionAtSplineInputKey");
static_assert(sizeof(SplineWidget_GetDirectionAtSplineInputKey) == 0x000018, "Wrong size on SplineWidget_GetDirectionAtSplineInputKey");
static_assert(offsetof(SplineWidget_GetDirectionAtSplineInputKey, InKey) == 0x000000, "Member 'SplineWidget_GetDirectionAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtSplineInputKey, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetDirectionAtSplineInputKey::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtSplineInputKey, ReturnValue) == 0x000008, "Member 'SplineWidget_GetDirectionAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetDirectionAtSplinePoint
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetDirectionAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetDirectionAtSplinePoint) == 0x000008, "Wrong alignment on SplineWidget_GetDirectionAtSplinePoint");
static_assert(sizeof(SplineWidget_GetDirectionAtSplinePoint) == 0x000018, "Wrong size on SplineWidget_GetDirectionAtSplinePoint");
static_assert(offsetof(SplineWidget_GetDirectionAtSplinePoint, PointIndex) == 0x000000, "Member 'SplineWidget_GetDirectionAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtSplinePoint, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetDirectionAtSplinePoint::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDirectionAtSplinePoint, ReturnValue) == 0x000008, "Member 'SplineWidget_GetDirectionAtSplinePoint::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetDistanceAlongSplineAtSplineInputKey
// 0x0008 (0x0008 - 0x0000)
struct SplineWidget_GetDistanceAlongSplineAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetDistanceAlongSplineAtSplineInputKey) == 0x000004, "Wrong alignment on SplineWidget_GetDistanceAlongSplineAtSplineInputKey");
static_assert(sizeof(SplineWidget_GetDistanceAlongSplineAtSplineInputKey) == 0x000008, "Wrong size on SplineWidget_GetDistanceAlongSplineAtSplineInputKey");
static_assert(offsetof(SplineWidget_GetDistanceAlongSplineAtSplineInputKey, InKey) == 0x000000, "Member 'SplineWidget_GetDistanceAlongSplineAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetDistanceAlongSplineAtSplineInputKey, ReturnValue) == 0x000004, "Member 'SplineWidget_GetDistanceAlongSplineAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetInputKeyAtDistanceAlongSpline
// 0x000C (0x000C - 0x0000)
struct SplineWidget_GetInputKeyAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A6[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetInputKeyAtDistanceAlongSpline) == 0x000004, "Wrong alignment on SplineWidget_GetInputKeyAtDistanceAlongSpline");
static_assert(sizeof(SplineWidget_GetInputKeyAtDistanceAlongSpline) == 0x00000C, "Wrong size on SplineWidget_GetInputKeyAtDistanceAlongSpline");
static_assert(offsetof(SplineWidget_GetInputKeyAtDistanceAlongSpline, Distance) == 0x000000, "Member 'SplineWidget_GetInputKeyAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetInputKeyAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetInputKeyAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetInputKeyAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'SplineWidget_GetInputKeyAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetLocationAtDistanceAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetLocationAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A7[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetLocationAtDistanceAlongSpline) == 0x000008, "Wrong alignment on SplineWidget_GetLocationAtDistanceAlongSpline");
static_assert(sizeof(SplineWidget_GetLocationAtDistanceAlongSpline) == 0x000018, "Wrong size on SplineWidget_GetLocationAtDistanceAlongSpline");
static_assert(offsetof(SplineWidget_GetLocationAtDistanceAlongSpline, Distance) == 0x000000, "Member 'SplineWidget_GetLocationAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetLocationAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'SplineWidget_GetLocationAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetLocationAtSplineInputKey
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetLocationAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A8[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetLocationAtSplineInputKey) == 0x000008, "Wrong alignment on SplineWidget_GetLocationAtSplineInputKey");
static_assert(sizeof(SplineWidget_GetLocationAtSplineInputKey) == 0x000018, "Wrong size on SplineWidget_GetLocationAtSplineInputKey");
static_assert(offsetof(SplineWidget_GetLocationAtSplineInputKey, InKey) == 0x000000, "Member 'SplineWidget_GetLocationAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtSplineInputKey, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetLocationAtSplineInputKey::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtSplineInputKey, ReturnValue) == 0x000008, "Member 'SplineWidget_GetLocationAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetLocationAtSplinePoint
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetLocationAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A9[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetLocationAtSplinePoint) == 0x000008, "Wrong alignment on SplineWidget_GetLocationAtSplinePoint");
static_assert(sizeof(SplineWidget_GetLocationAtSplinePoint) == 0x000018, "Wrong size on SplineWidget_GetLocationAtSplinePoint");
static_assert(offsetof(SplineWidget_GetLocationAtSplinePoint, PointIndex) == 0x000000, "Member 'SplineWidget_GetLocationAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtSplinePoint, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetLocationAtSplinePoint::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetLocationAtSplinePoint, ReturnValue) == 0x000008, "Member 'SplineWidget_GetLocationAtSplinePoint::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetNumberOfSplinePoints
// 0x0004 (0x0004 - 0x0000)
struct SplineWidget_GetNumberOfSplinePoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetNumberOfSplinePoints) == 0x000004, "Wrong alignment on SplineWidget_GetNumberOfSplinePoints");
static_assert(sizeof(SplineWidget_GetNumberOfSplinePoints) == 0x000004, "Wrong size on SplineWidget_GetNumberOfSplinePoints");
static_assert(offsetof(SplineWidget_GetNumberOfSplinePoints, ReturnValue) == 0x000000, "Member 'SplineWidget_GetNumberOfSplinePoints::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetRotationAngleAtDistanceAlongSpline
// 0x000C (0x000C - 0x0000)
struct SplineWidget_GetRotationAngleAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetRotationAngleAtDistanceAlongSpline) == 0x000004, "Wrong alignment on SplineWidget_GetRotationAngleAtDistanceAlongSpline");
static_assert(sizeof(SplineWidget_GetRotationAngleAtDistanceAlongSpline) == 0x00000C, "Wrong size on SplineWidget_GetRotationAngleAtDistanceAlongSpline");
static_assert(offsetof(SplineWidget_GetRotationAngleAtDistanceAlongSpline, Distance) == 0x000000, "Member 'SplineWidget_GetRotationAngleAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetRotationAngleAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetRotationAngleAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetRotationAngleAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'SplineWidget_GetRotationAngleAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetRotationAngleAtSplineInputKey
// 0x000C (0x000C - 0x0000)
struct SplineWidget_GetRotationAngleAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AB[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetRotationAngleAtSplineInputKey) == 0x000004, "Wrong alignment on SplineWidget_GetRotationAngleAtSplineInputKey");
static_assert(sizeof(SplineWidget_GetRotationAngleAtSplineInputKey) == 0x00000C, "Wrong size on SplineWidget_GetRotationAngleAtSplineInputKey");
static_assert(offsetof(SplineWidget_GetRotationAngleAtSplineInputKey, InKey) == 0x000000, "Member 'SplineWidget_GetRotationAngleAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetRotationAngleAtSplineInputKey, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetRotationAngleAtSplineInputKey::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetRotationAngleAtSplineInputKey, ReturnValue) == 0x000008, "Member 'SplineWidget_GetRotationAngleAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetSplineLength
// 0x0004 (0x0004 - 0x0000)
struct SplineWidget_GetSplineLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetSplineLength) == 0x000004, "Wrong alignment on SplineWidget_GetSplineLength");
static_assert(sizeof(SplineWidget_GetSplineLength) == 0x000004, "Wrong size on SplineWidget_GetSplineLength");
static_assert(offsetof(SplineWidget_GetSplineLength, ReturnValue) == 0x000000, "Member 'SplineWidget_GetSplineLength::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetSplineMaterial
// 0x0008 (0x0008 - 0x0000)
struct SplineWidget_GetSplineMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetSplineMaterial) == 0x000008, "Wrong alignment on SplineWidget_GetSplineMaterial");
static_assert(sizeof(SplineWidget_GetSplineMaterial) == 0x000008, "Wrong size on SplineWidget_GetSplineMaterial");
static_assert(offsetof(SplineWidget_GetSplineMaterial, ReturnValue) == 0x000000, "Member 'SplineWidget_GetSplineMaterial::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetSplineThickness
// 0x0004 (0x0004 - 0x0000)
struct SplineWidget_GetSplineThickness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetSplineThickness) == 0x000004, "Wrong alignment on SplineWidget_GetSplineThickness");
static_assert(sizeof(SplineWidget_GetSplineThickness) == 0x000004, "Wrong size on SplineWidget_GetSplineThickness");
static_assert(offsetof(SplineWidget_GetSplineThickness, ReturnValue) == 0x000000, "Member 'SplineWidget_GetSplineThickness::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetSplineType
// 0x0001 (0x0001 - 0x0000)
struct SplineWidget_GetSplineType final
{
public:
	EUMGSplineType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetSplineType) == 0x000001, "Wrong alignment on SplineWidget_GetSplineType");
static_assert(sizeof(SplineWidget_GetSplineType) == 0x000001, "Wrong size on SplineWidget_GetSplineType");
static_assert(offsetof(SplineWidget_GetSplineType, ReturnValue) == 0x000000, "Member 'SplineWidget_GetSplineType::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetTangentAtDistanceAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetTangentAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetTangentAtDistanceAlongSpline) == 0x000008, "Wrong alignment on SplineWidget_GetTangentAtDistanceAlongSpline");
static_assert(sizeof(SplineWidget_GetTangentAtDistanceAlongSpline) == 0x000018, "Wrong size on SplineWidget_GetTangentAtDistanceAlongSpline");
static_assert(offsetof(SplineWidget_GetTangentAtDistanceAlongSpline, Distance) == 0x000000, "Member 'SplineWidget_GetTangentAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetTangentAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'SplineWidget_GetTangentAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetTangentAtSplineInputKey
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetTangentAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AD[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetTangentAtSplineInputKey) == 0x000008, "Wrong alignment on SplineWidget_GetTangentAtSplineInputKey");
static_assert(sizeof(SplineWidget_GetTangentAtSplineInputKey) == 0x000018, "Wrong size on SplineWidget_GetTangentAtSplineInputKey");
static_assert(offsetof(SplineWidget_GetTangentAtSplineInputKey, InKey) == 0x000000, "Member 'SplineWidget_GetTangentAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtSplineInputKey, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetTangentAtSplineInputKey::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtSplineInputKey, ReturnValue) == 0x000008, "Member 'SplineWidget_GetTangentAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function UMGSpline.SplineWidget.GetTangentAtSplinePoint
// 0x0018 (0x0018 - 0x0000)
struct SplineWidget_GetTangentAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSplineCoordinateSpace                     CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AE[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWidget_GetTangentAtSplinePoint) == 0x000008, "Wrong alignment on SplineWidget_GetTangentAtSplinePoint");
static_assert(sizeof(SplineWidget_GetTangentAtSplinePoint) == 0x000018, "Wrong size on SplineWidget_GetTangentAtSplinePoint");
static_assert(offsetof(SplineWidget_GetTangentAtSplinePoint, PointIndex) == 0x000000, "Member 'SplineWidget_GetTangentAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtSplinePoint, CoordinateSpace) == 0x000004, "Member 'SplineWidget_GetTangentAtSplinePoint::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineWidget_GetTangentAtSplinePoint, ReturnValue) == 0x000008, "Member 'SplineWidget_GetTangentAtSplinePoint::ReturnValue' has a wrong offset!");

}

