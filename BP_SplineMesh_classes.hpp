#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMesh.BP_SplineMesh_C
// 0x0188 (0x0428 - 0x02A0)
class ABP_SplineMesh_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    StaticMesh;                                        // 0x02B0(0x0010)(Edit, BlueprintVisible)
	bool                                          RandomizeMesh;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClosedLoop;                                        // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlaceUsingPivotDistance;                           // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSectionLength;                                  // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_599D[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SectionLength;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LengthPerMesh;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStartCap;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_599E[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StartCap;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEndCap;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_599F[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            EndCap;                                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        MeshSize;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PstartLength;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PendLength;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SplineLengthNoCaps;                                // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               Forward_Axis;                                      // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCollision;                                      // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A0[0x6];                                     // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HeightScale;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WidthScale;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSplineFromActor;                                // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A1[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Override_Spline_with_Actor;                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Snap_to_spline;                                    // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A2[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EUW;                                               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SnapToLandscape;                                   // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockZAxis;                                         // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A3[0x6];                                     // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousEndTangent;                                // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NextStartTangent;                                  // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseISMs;                                           // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A4[0x7];                                     // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInstancedStaticMeshComponent*>  ISMs;                                              // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UStaticMesh*                            CornerMeshLeft;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerMeshRight;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseISMsWhenStraight;                               // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AdjustBeforePoint;                                 // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AdjustAfterPoint;                                  // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A5[0x5];                                     // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AdjustStartDistanceBefore;                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdjustEndDistanceBefore;                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdjustStartDistanceAfter;                          // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdjustEndDistanceAfter;                            // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstantMeshCount;                                 // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A6[0x4];                                     // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                MeshWeights;                                       // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseWeights;                                        // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A7[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                Weights;                                           // 0x03F8(0x0010)(Edit, BlueprintVisible)
	double                                        StartDistance;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDynamicSpacing;                                 // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate90;                                          // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A8[0x6];                                     // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rotation__ISMs_only_;                              // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeshOffset;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddInstance(double DistanceAlongSpline, class USplineComponent* SplineComponent, class UStaticMesh* Mesh, bool IsCap, TArray<class UInstancedStaticMeshComponent*>& Param_ISMs, double InEndDistance);
	void AddISM(TArray<class UStaticMesh*>& Meshes);
	void AddSplineMeshComponent(class UStaticMesh* Mesh, bool Has_Collision, double Start_Location_Distance, double Start_Tangent__Distance, double End_Location_Distance, double End_Tangent_Distance, class USplineComponent* Spline_Component, double ClampTangent, class USplineMeshComponent** Component);
	void BuildSplineMesh();
	void Get_Spline(class USplineComponent** SplineComponent);
	void GetAngle(class USplineComponent* SplineComponent, double Param_StartDistance, double EndDistance, bool UseRightVector, double* Angle);
	void GetBoundSize(class UStaticMesh* Object, double* Size);
	double GetMeshSize(TArray<class UStaticMesh*>& SplineMeshes);
	void GetSplineComponent(class USplineComponent** SplineComponent);
	float GetSplineLength(class USplineComponent* SplineComponent);
	void SnapToActor(class USceneComponent* Target);
	void SnapToLandscapePos(double DistanceAlongSpline, class USplineComponent* SplineComponent, struct FVector* Location, struct FVector* Normal);
	void SnapToSpline();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMesh_C">();
	}
	static class ABP_SplineMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMesh_C>();
	}
};
static_assert(alignof(ABP_SplineMesh_C) == 0x000008, "Wrong alignment on ABP_SplineMesh_C");
static_assert(sizeof(ABP_SplineMesh_C) == 0x000428, "Wrong size on ABP_SplineMesh_C");
static_assert(offsetof(ABP_SplineMesh_C, Spline) == 0x0002A0, "Member 'ABP_SplineMesh_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_SplineMesh_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, StaticMesh) == 0x0002B0, "Member 'ABP_SplineMesh_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, RandomizeMesh) == 0x0002C0, "Member 'ABP_SplineMesh_C::RandomizeMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, ClosedLoop) == 0x0002C1, "Member 'ABP_SplineMesh_C::ClosedLoop' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, PlaceUsingPivotDistance) == 0x0002C2, "Member 'ABP_SplineMesh_C::PlaceUsingPivotDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseSectionLength) == 0x0002C3, "Member 'ABP_SplineMesh_C::UseSectionLength' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, SectionLength) == 0x0002C8, "Member 'ABP_SplineMesh_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, LengthPerMesh) == 0x0002D0, "Member 'ABP_SplineMesh_C::LengthPerMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, HasStartCap) == 0x0002D8, "Member 'ABP_SplineMesh_C::HasStartCap' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, StartCap) == 0x0002E0, "Member 'ABP_SplineMesh_C::StartCap' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, HasEndCap) == 0x0002E8, "Member 'ABP_SplineMesh_C::HasEndCap' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, EndCap) == 0x0002F0, "Member 'ABP_SplineMesh_C::EndCap' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, MeshSize) == 0x0002F8, "Member 'ABP_SplineMesh_C::MeshSize' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, PstartLength) == 0x000300, "Member 'ABP_SplineMesh_C::PstartLength' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, PendLength) == 0x000308, "Member 'ABP_SplineMesh_C::PendLength' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, SplineLengthNoCaps) == 0x000310, "Member 'ABP_SplineMesh_C::SplineLengthNoCaps' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Forward_Axis) == 0x000318, "Member 'ABP_SplineMesh_C::Forward_Axis' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, HasCollision) == 0x000319, "Member 'ABP_SplineMesh_C::HasCollision' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, HeightScale) == 0x000320, "Member 'ABP_SplineMesh_C::HeightScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, WidthScale) == 0x000328, "Member 'ABP_SplineMesh_C::WidthScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseSplineFromActor) == 0x000330, "Member 'ABP_SplineMesh_C::UseSplineFromActor' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Override_Spline_with_Actor) == 0x000338, "Member 'ABP_SplineMesh_C::Override_Spline_with_Actor' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Snap_to_spline) == 0x000340, "Member 'ABP_SplineMesh_C::Snap_to_spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, EUW) == 0x000348, "Member 'ABP_SplineMesh_C::EUW' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, SnapToLandscape) == 0x000350, "Member 'ABP_SplineMesh_C::SnapToLandscape' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, LockZAxis) == 0x000351, "Member 'ABP_SplineMesh_C::LockZAxis' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, PreviousEndTangent) == 0x000358, "Member 'ABP_SplineMesh_C::PreviousEndTangent' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, NextStartTangent) == 0x000370, "Member 'ABP_SplineMesh_C::NextStartTangent' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseISMs) == 0x000388, "Member 'ABP_SplineMesh_C::UseISMs' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, ISMs) == 0x000390, "Member 'ABP_SplineMesh_C::ISMs' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, CornerMeshLeft) == 0x0003A0, "Member 'ABP_SplineMesh_C::CornerMeshLeft' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, CornerMeshRight) == 0x0003A8, "Member 'ABP_SplineMesh_C::CornerMeshRight' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseISMsWhenStraight) == 0x0003B0, "Member 'ABP_SplineMesh_C::UseISMsWhenStraight' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustBeforePoint) == 0x0003B1, "Member 'ABP_SplineMesh_C::AdjustBeforePoint' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustAfterPoint) == 0x0003B2, "Member 'ABP_SplineMesh_C::AdjustAfterPoint' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustStartDistanceBefore) == 0x0003B8, "Member 'ABP_SplineMesh_C::AdjustStartDistanceBefore' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustEndDistanceBefore) == 0x0003C0, "Member 'ABP_SplineMesh_C::AdjustEndDistanceBefore' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustStartDistanceAfter) == 0x0003C8, "Member 'ABP_SplineMesh_C::AdjustStartDistanceAfter' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, AdjustEndDistanceAfter) == 0x0003D0, "Member 'ABP_SplineMesh_C::AdjustEndDistanceAfter' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, ConstantMeshCount) == 0x0003D8, "Member 'ABP_SplineMesh_C::ConstantMeshCount' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, MeshWeights) == 0x0003E0, "Member 'ABP_SplineMesh_C::MeshWeights' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseWeights) == 0x0003F0, "Member 'ABP_SplineMesh_C::UseWeights' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Weights) == 0x0003F8, "Member 'ABP_SplineMesh_C::Weights' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, StartDistance) == 0x000408, "Member 'ABP_SplineMesh_C::StartDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, UseDynamicSpacing) == 0x000410, "Member 'ABP_SplineMesh_C::UseDynamicSpacing' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Rotate90) == 0x000411, "Member 'ABP_SplineMesh_C::Rotate90' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, Rotation__ISMs_only_) == 0x000418, "Member 'ABP_SplineMesh_C::Rotation__ISMs_only_' has a wrong offset!");
static_assert(offsetof(ABP_SplineMesh_C, MeshOffset) == 0x000420, "Member 'ABP_SplineMesh_C::MeshOffset' has a wrong offset!");

}

