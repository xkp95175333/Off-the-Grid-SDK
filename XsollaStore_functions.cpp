#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaStore_classes.hpp"
#include "XsollaStore_parameters.hpp"


namespace SDK
{

// Function XsollaStore.XsollaOrderCheckObject.Destroy
// (Final, Native, Public, BlueprintCallable)

void UXsollaOrderCheckObject::Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaOrderCheckObject", "Destroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreBrowserWrapper.ExecuteBrowserClosed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsManually                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreBrowserWrapper::ExecuteBrowserClosed(bool bIsManually)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreBrowserWrapper", "ExecuteBrowserClosed");

	Params::XsollaStoreBrowserWrapper_ExecuteBrowserClosed Parms{};

	Parms.bIsManually = bIsManually;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreBrowserWrapper.LoadUrl
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreBrowserWrapper::LoadUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreBrowserWrapper", "LoadUrl");

	Params::XsollaStoreBrowserWrapper_LoadUrl Parms{};

	Parms.URL = std::move(URL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function XsollaStore.XsollaStoreLibrary.Equal_StoreCartStoreCart
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStoreCart                       A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FStoreCart                       B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UXsollaStoreLibrary::Equal_StoreCartStoreCart(const struct FStoreCart& A, const struct FStoreCart& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("XsollaStoreLibrary", "Equal_StoreCartStoreCart");

	Params::XsollaStoreLibrary_Equal_StoreCartStoreCart Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreLibrary.FormatPrice
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UXsollaStoreLibrary::FormatPrice(float Amount, const class FString& Currency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("XsollaStoreLibrary", "FormatPrice");

	Params::XsollaStoreLibrary_FormatPrice Parms{};

	Parms.Amount = Amount;
	Parms.Currency = std::move(Currency);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreLibrary.GetCurrencyLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UXsollaStoreLibrary::GetCurrencyLibrary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("XsollaStoreLibrary", "GetCurrencyLibrary");

	Params::XsollaStoreLibrary_GetCurrencyLibrary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.AddToCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::AddToCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const int32 Quantity, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "AddToCart");

	Params::XsollaStoreSubsystem_AddToCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Quantity = Quantity;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.BuyItemWithVirtualCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurrencySKU                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EXsollaPublishingPlatform               Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::BuyItemWithVirtualCurrency(const class FString& AuthToken, const class FString& ItemSKU, const class FString& CurrencySKU, const EXsollaPublishingPlatform Platform, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "BuyItemWithVirtualCurrency");

	Params::XsollaStoreSubsystem_BuyItemWithVirtualCurrency Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.CurrencySKU = std::move(CurrencySKU);
	Parms.Platform = Platform;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.BuyVirtualOrFreeItemCallback
// (Final, Native, Protected)
// Parameters:
// int32                                   InOrderId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::BuyVirtualOrFreeItemCallback(int32 InOrderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "BuyVirtualOrFreeItemCallback");

	Params::XsollaStoreSubsystem_BuyVirtualOrFreeItemCallback Parms{};

	Parms.InOrderId = InOrderId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CancelSubscription
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubscriptionId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CancelSubscription(const class FString& AuthToken, const int32 SubscriptionId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CancelSubscription");

	Params::XsollaStoreSubsystem_CancelSubscription Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SubscriptionId = SubscriptionId;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CheckOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus, const struct FXsollaOrderContent& OrderContent)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CheckOrder(const class FString& AuthToken, const int32 OrderId, const TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus, const struct FXsollaOrderContent& OrderContent)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CheckOrder");

	Params::XsollaStoreSubsystem_CheckOrder Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.OrderId = OrderId;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CheckPendingOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsUserInvolvedToPayment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CheckPendingOrder(const class FString& AccessToken, const int32 OrderId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, bool bIsUserInvolvedToPayment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CheckPendingOrder");

	Params::XsollaStoreSubsystem_CheckPendingOrder Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.OrderId = OrderId;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.bIsUserInvolvedToPayment = bIsUserInvolvedToPayment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CheckPendingOrderSuccessCallback
// (Final, Native, Protected)

void UXsollaStoreSubsystem::CheckPendingOrderSuccessCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CheckPendingOrderSuccessCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.ClearCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::ClearCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "ClearCart");

	Params::XsollaStoreSubsystem_ClearCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CreateOrderWithFreeCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CreateOrderWithFreeCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CreateOrderWithFreeCart");

	Params::XsollaStoreSubsystem_CreateOrderWithFreeCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CreateOrderWithSpecifiedFreeItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CreateOrderWithSpecifiedFreeItem(const class FString& AuthToken, const class FString& ItemSKU, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CreateOrderWithSpecifiedFreeItem");

	Params::XsollaStoreSubsystem_CreateOrderWithSpecifiedFreeItem Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FetchCartPaymentToken
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FXsollaParameters                CustomParameters                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AccessToken, int32 OrderId)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExternalId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FetchCartPaymentToken(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Country, const class FString& Locale, const struct FXsollaParameters& CustomParameters, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& ExternalId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FetchCartPaymentToken");

	Params::XsollaStoreSubsystem_FetchCartPaymentToken Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.Currency = std::move(Currency);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.CustomParameters = std::move(CustomParameters);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.ExternalId = std::move(ExternalId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FetchPaymentToken
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FXsollaParameters                CustomParameters                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AccessToken, int32 OrderId)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExternalId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FetchPaymentToken(const class FString& AuthToken, const class FString& ItemSKU, const class FString& Currency, const class FString& Country, const class FString& Locale, const struct FXsollaParameters& CustomParameters, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Quantity, const class FString& ExternalId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FetchPaymentToken");

	Params::XsollaStoreSubsystem_FetchPaymentToken Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Currency = std::move(Currency);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.CustomParameters = std::move(CustomParameters);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Quantity = Quantity;
	Parms.ExternalId = std::move(ExternalId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FetchTokenCallback
// (Final, Native, Protected)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InOrderId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FetchTokenCallback(const class FString& AccessToken, int32 InOrderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FetchTokenCallback");

	Params::XsollaStoreSubsystem_FetchTokenCallback Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.InOrderId = InOrderId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FillCartById
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FStoreCartItem>           Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FillCartById(const class FString& AuthToken, const class FString& CartId, const TArray<struct FStoreCartItem>& Items, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FillCartById");

	Params::XsollaStoreSubsystem_FillCartById Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.Items = std::move(Items);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetAllItemsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreItemsList& ItemsList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetAllItemsList(const class FString& Locale, const TDelegate<void(const struct FStoreItemsList& ItemsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetAllItemsList");

	Params::XsollaStoreSubsystem_GetAllItemsList Parms{};

	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetBundles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreListOfBundles& ListOfBundles)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetBundles(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreListOfBundles& ListOfBundles)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetBundles");

	Params::XsollaStoreSubsystem_GetBundles Parms{};

	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetDRMList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FStoreDRMList& DRMList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetDRMList(const TDelegate<void(const struct FStoreDRMList& DRMList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetDRMList");

	Params::XsollaStoreSubsystem_GetDRMList Parms{};

	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetGameItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           GameSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGameItem& Game)> SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetGameItem(const class FString& GameSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FGameItem& Game)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetGameItem");

	Params::XsollaStoreSubsystem_GetGameItem Parms{};

	Parms.GameSKU = std::move(GameSKU);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetGameKeyItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGameKeyItem& GameKey)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetGameKeyItem(const class FString& ItemSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FGameKeyItem& GameKey)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetGameKeyItem");

	Params::XsollaStoreSubsystem_GetGameKeyItem Parms{};

	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetGameKeysListBySpecifiedGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ExternalId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreGameKeysList& GameKeysList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetGameKeysListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreGameKeysList& GameKeysList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetGameKeysListBySpecifiedGroup");

	Params::XsollaStoreSubsystem_GetGameKeysListBySpecifiedGroup Parms{};

	Parms.ExternalId = std::move(ExternalId);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetGamesList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FStoreGamesData& GamesData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetGamesList(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FStoreGamesData& GamesData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetGamesList");

	Params::XsollaStoreSubsystem_GetGamesList Parms{};

	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetGamesListBySpecifiedGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ExternalId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreGamesList& GamesList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetGamesListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreGamesList& GamesList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetGamesListBySpecifiedGroup");

	Params::XsollaStoreSubsystem_GetGamesListBySpecifiedGroup Parms{};

	Parms.ExternalId = std::move(ExternalId);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetItemGroups
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(TArray<struct FXsollaItemGroup>& ItemGroups)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetItemGroups(const class FString& Locale, const TDelegate<void(TArray<struct FXsollaItemGroup>& ItemGroups)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetItemGroups");

	Params::XsollaStoreSubsystem_GetItemGroups Parms{};

	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetItemsListBySpecifiedGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ExternalId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreItemsList& ItemsList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetItemsListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreItemsList& ItemsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetItemsListBySpecifiedGroup");

	Params::XsollaStoreSubsystem_GetItemsListBySpecifiedGroup Parms{};

	Parms.ExternalId = std::move(ExternalId);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetOwnedGames
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FOwnedGamesList& GamesList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSandbox                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetOwnedGames(const class FString& AuthToken, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FOwnedGamesList& GamesList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const bool bIsSandbox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetOwnedGames");

	Params::XsollaStoreSubsystem_GetOwnedGames Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.bIsSandbox = bIsSandbox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetPromocodeRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PromocodeCode                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStorePromocodeRewardData& RewardsData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetPromocodeRewards(const class FString& AuthToken, const class FString& PromocodeCode, const TDelegate<void(const struct FStorePromocodeRewardData& RewardsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetPromocodeRewards");

	Params::XsollaStoreSubsystem_GetPromocodeRewards Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.PromocodeCode = std::move(PromocodeCode);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSpecifiedBundle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Sku                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FStoreBundle& Bundle)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSpecifiedBundle(const class FString& Sku, const TDelegate<void(const struct FStoreBundle& Bundle)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSpecifiedBundle");

	Params::XsollaStoreSubsystem_GetSpecifiedBundle Parms{};

	Parms.Sku = std::move(Sku);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionDetails
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubscriptionId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FSubscriptionDetails& SubscriptionDetails)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionDetails(const class FString& AuthToken, const int32 SubscriptionId, const class FString& Locale, const TDelegate<void(struct FSubscriptionDetails& SubscriptionDetails)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionDetails");

	Params::XsollaStoreSubsystem_GetSubscriptionDetails Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SubscriptionId = SubscriptionId;
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionManagementUrl
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& LinkToPaystation)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionManagementUrl(const class FString& AuthToken, const class FString& Country, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionManagementUrl");

	Params::XsollaStoreSubsystem_GetSubscriptionManagementUrl Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Country = std::move(Country);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPlans
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           PlanId                                                 (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   PlanExternalId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionPlans(const class FString& AuthToken, const TArray<int32>& PlanId, const TArray<class FString>& PlanExternalId, const class FString& Country, const class FString& Locale, const TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionPlans");

	Params::XsollaStoreSubsystem_GetSubscriptionPlans Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.PlanId = std::move(PlanId);
	Parms.PlanExternalId = std::move(PlanExternalId);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPublicPlans
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           PlanId                                                 (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   PlanExternalId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionPublicPlans(const TArray<int32>& PlanId, const TArray<class FString>& PlanExternalId, const class FString& Country, const class FString& Locale, const TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionPublicPlans");

	Params::XsollaStoreSubsystem_GetSubscriptionPublicPlans Parms{};

	Parms.PlanId = std::move(PlanId);
	Parms.PlanExternalId = std::move(PlanExternalId);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionPurchaseUrl
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlanExternalId                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& LinkToPaystation)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionPurchaseUrl(const class FString& AuthToken, const class FString& PlanExternalId, const class FString& Country, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionPurchaseUrl");

	Params::XsollaStoreSubsystem_GetSubscriptionPurchaseUrl Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.PlanExternalId = std::move(PlanExternalId);
	Parms.Country = std::move(Country);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptionRenewalUrl
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubscriptionId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& LinkToPaystation)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptionRenewalUrl(const class FString& AuthToken, const int32 SubscriptionId, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptionRenewalUrl");

	Params::XsollaStoreSubsystem_GetSubscriptionRenewalUrl Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SubscriptionId = SubscriptionId;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetSubscriptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSubscriptionsList& SubscriptionsList)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetSubscriptions(const class FString& AuthToken, const class FString& Locale, const TDelegate<void(const struct FSubscriptionsList& SubscriptionsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetSubscriptions");

	Params::XsollaStoreSubsystem_GetSubscriptions Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencies
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrencyData& VirtualCurrencyData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrencies(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyData& VirtualCurrencyData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencies");

	Params::XsollaStoreSubsystem_GetVirtualCurrencies Parms{};

	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CurrencySKU                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrency& Currency)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrency(const class FString& CurrencySKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrency& Currency)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrency");

	Params::XsollaStoreSubsystem_GetVirtualCurrency Parms{};

	Parms.CurrencySKU = std::move(CurrencySKU);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PackageSKU                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrencyPackage(const class FString& PackageSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyPackage");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyPackage Parms{};

	Parms.PackageSKU = std::move(PackageSKU);
	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackages
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrencyPackagesData& Data)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrencyPackages(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyPackagesData& Data)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyPackages");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyPackages Parms{};

	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AdditionalFields                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(struct FStoreItemsData& ItemsData)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualItems(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FStoreItemsData& ItemsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualItems");

	Params::XsollaStoreSubsystem_GetVirtualItems Parms{};

	Parms.Locale = std::move(Locale);
	Parms.Country = std::move(Country);
	Parms.AdditionalFields = std::move(AdditionalFields);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.AuthToken = std::move(AuthToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InProjectId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::Initialize(const class FString& InProjectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "Initialize");

	Params::XsollaStoreSubsystem_Initialize Parms{};

	Parms.InProjectId = std::move(InProjectId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.LaunchPaymentConsole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bIsManually)>       BrowserClosedCallback                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::LaunchPaymentConsole(class UObject* WorldContextObject, const int32 OrderId, const class FString& AccessToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const TDelegate<void(bool bIsManually)>& BrowserClosedCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "LaunchPaymentConsole");

	Params::XsollaStoreSubsystem_LaunchPaymentConsole Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OrderId = OrderId;
	Parms.AccessToken = std::move(AccessToken);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;
	Parms.BrowserClosedCallback = BrowserClosedCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.PurchaseCurrencyPackage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVirtualCurrencyPackage          CurrencyPackage                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FXsollaPaymentTokenRequestPayloadPaymentTokenRequestPayload                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::PurchaseCurrencyPackage(const struct FVirtualCurrencyPackage& CurrencyPackage, const struct FXsollaPaymentTokenRequestPayload& PaymentTokenRequestPayload, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "PurchaseCurrencyPackage");

	Params::XsollaStoreSubsystem_PurchaseCurrencyPackage Parms{};

	Parms.CurrencyPackage = std::move(CurrencyPackage);
	Parms.PaymentTokenRequestPayload = std::move(PaymentTokenRequestPayload);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.PurchaseStoreItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStoreItem                       StoreItem                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FXsollaPaymentTokenRequestPayloadPaymentTokenRequestPayload                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::PurchaseStoreItem(const struct FStoreItem& StoreItem, const struct FXsollaPaymentTokenRequestPayload& PaymentTokenRequestPayload, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "PurchaseStoreItem");

	Params::XsollaStoreSubsystem_PurchaseStoreItem Parms{};

	Parms.StoreItem = std::move(StoreItem);
	Parms.PaymentTokenRequestPayload = std::move(PaymentTokenRequestPayload);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.RedeemGameCodeByClient
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Code                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::RedeemGameCodeByClient(const class FString& AuthToken, const class FString& Code, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "RedeemGameCodeByClient");

	Params::XsollaStoreSubsystem_RedeemGameCodeByClient Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.Code = std::move(Code);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.RedeemPromocode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PromocodeCode                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::RedeemPromocode(const class FString& AuthToken, const class FString& PromocodeCode, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "RedeemPromocode");

	Params::XsollaStoreSubsystem_RedeemPromocode Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.PromocodeCode = std::move(PromocodeCode);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.RemoveFromCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::RemoveFromCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "RemoveFromCart");

	Params::XsollaStoreSubsystem_RemoveFromCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.RemovePromocodeFromCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::RemovePromocodeFromCart(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "RemovePromocodeFromCart");

	Params::XsollaStoreSubsystem_RemovePromocodeFromCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateCart(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Locale, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateCart");

	Params::XsollaStoreSubsystem_UpdateCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.Currency = std::move(Currency);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FindItemBySku
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FStoreItem                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FStoreItem UXsollaStoreSubsystem::FindItemBySku(const class FString& ItemSKU, bool* bHasFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FindItemBySku");

	Params::XsollaStoreSubsystem_FindItemBySku Parms{};

	Parms.ItemSKU = std::move(ItemSKU);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasFound != nullptr)
		*bHasFound = Parms.bHasFound;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.FindVirtualCurrencyPackageBySku
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVirtualCurrencyPackage    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FVirtualCurrencyPackage UXsollaStoreSubsystem::FindVirtualCurrencyPackageBySku(const class FString& ItemSKU, bool* bHasFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FindVirtualCurrencyPackageBySku");

	Params::XsollaStoreSubsystem_FindVirtualCurrencyPackageBySku Parms{};

	Parms.ItemSKU = std::move(ItemSKU);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bHasFound != nullptr)
		*bHasFound = Parms.bHasFound;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetCart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FStoreCart                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FStoreCart UXsollaStoreSubsystem::GetCart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetCart");

	Params::XsollaStoreSubsystem_GetCart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetItemName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UXsollaStoreSubsystem::GetItemName(const class FString& ItemSKU) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetItemName");

	Params::XsollaStoreSubsystem_GetItemName Parms{};

	Parms.ItemSKU = std::move(ItemSKU);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetItemsData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FStoreItemsData            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FStoreItemsData UXsollaStoreSubsystem::GetItemsData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetItemsData");

	Params::XsollaStoreSubsystem_GetItemsData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetPendingPaystationUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UXsollaStoreSubsystem::GetPendingPaystationUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetPendingPaystationUrl");

	Params::XsollaStoreSubsystem_GetPendingPaystationUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItemsWithoutGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FStoreItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FStoreItem> UXsollaStoreSubsystem::GetVirtualItemsWithoutGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualItemsWithoutGroup");

	Params::XsollaStoreSubsystem_GetVirtualItemsWithoutGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.IsItemInCart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UXsollaStoreSubsystem::IsItemInCart(const class FString& ItemSKU) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "IsItemInCart");

	Params::XsollaStoreSubsystem_IsItemInCart Parms{};

	Parms.ItemSKU = std::move(ItemSKU);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

