#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HEX_HeatSink

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.SimulateMeshDestruction
// 0x0250 (0x0250 - 0x0000)
struct BP_HEX_HeatSink_C_SimulateMeshDestruction final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EBE[0x2];                                     // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EBF[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC0[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC1[0xF];                                     // 0x01D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AFS_MasterFieldGZ_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_SimulateMeshDestruction) == 0x000010, "Wrong alignment on BP_HEX_HeatSink_C_SimulateMeshDestruction");
static_assert(sizeof(BP_HEX_HeatSink_C_SimulateMeshDestruction) == 0x000250, "Wrong size on BP_HEX_HeatSink_C_SimulateMeshDestruction");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, Hit) == 0x000000, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::Hit' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F8, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000F9, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_Location) == 0x000108, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_Normal) == 0x000138, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_BoneName) == 0x000188, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_ElementIndex) == 0x000194, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_FaceIndex) == 0x000198, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BreakHitResult_TraceEnd) == 0x0001B8, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_IsValid_ReturnValue) == 0x0001D0, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_MakeTransform_ReturnValue) == 0x0001E0, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000240, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_SimulateMeshDestruction, CallFunc_FinishSpawningActor_ReturnValue) == 0x000248, "Member 'BP_HEX_HeatSink_C_SimulateMeshDestruction::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.SetOwningTeam
// 0x0004 (0x0004 - 0x0000)
struct BP_HEX_HeatSink_C_SetOwningTeam final
{
public:
	int32                                         TeamID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_SetOwningTeam) == 0x000004, "Wrong alignment on BP_HEX_HeatSink_C_SetOwningTeam");
static_assert(sizeof(BP_HEX_HeatSink_C_SetOwningTeam) == 0x000004, "Wrong size on BP_HEX_HeatSink_C_SetOwningTeam");
static_assert(offsetof(BP_HEX_HeatSink_C_SetOwningTeam, TeamID) == 0x000000, "Member 'BP_HEX_HeatSink_C_SetOwningTeam::TeamID' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.SetMeshDestroyed
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_HeatSink_C_SetMeshDestroyed final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_SetMeshDestroyed) == 0x000001, "Wrong alignment on BP_HEX_HeatSink_C_SetMeshDestroyed");
static_assert(sizeof(BP_HEX_HeatSink_C_SetMeshDestroyed) == 0x000001, "Wrong size on BP_HEX_HeatSink_C_SetMeshDestroyed");
static_assert(offsetof(BP_HEX_HeatSink_C_SetMeshDestroyed, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_HeatSink_C_SetMeshDestroyed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.SetInitializationField
// 0x0008 (0x0008 - 0x0000)
struct BP_HEX_HeatSink_C_SetInitializationField final
{
public:
	class AFieldSystemActor*                      Field;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_SetInitializationField) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_SetInitializationField");
static_assert(sizeof(BP_HEX_HeatSink_C_SetInitializationField) == 0x000008, "Wrong size on BP_HEX_HeatSink_C_SetInitializationField");
static_assert(offsetof(BP_HEX_HeatSink_C_SetInitializationField, Field) == 0x000000, "Member 'BP_HEX_HeatSink_C_SetInitializationField::Field' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ResetDestructibleMesh
// 0x00A0 (0x00A0 - 0x0000)
struct BP_HEX_HeatSink_C_ResetDestructibleMesh final
{
public:
	struct FTransform                             Temp_struct_Variable;                              // 0x0000(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGeometryCollectionComponent*           CallFunc_AddComponent_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC2[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryCollection*                    CallFunc_GetDestructibleMeshAsset_ReturnValue;     // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ResetDestructibleMesh) == 0x000010, "Wrong alignment on BP_HEX_HeatSink_C_ResetDestructibleMesh");
static_assert(sizeof(BP_HEX_HeatSink_C_ResetDestructibleMesh) == 0x0000A0, "Wrong size on BP_HEX_HeatSink_C_ResetDestructibleMesh");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, Temp_struct_Variable) == 0x000000, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000060, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_AddComponent_ReturnValue) == 0x000068, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_GetDestructibleMeshAsset_ReturnValue) == 0x000078, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_GetDestructibleMeshAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_GetMaterial_ReturnValue) == 0x000080, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000088, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ResetDestructibleMesh, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000090, "Member 'BP_HEX_HeatSink_C_ResetDestructibleMesh::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ReceiveDestroy
// 0x0100 (0x0100 - 0x0000)
struct BP_HEX_HeatSink_C_ReceiveDestroy final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bInstant;                                          // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ReceiveDestroy) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_ReceiveDestroy");
static_assert(sizeof(BP_HEX_HeatSink_C_ReceiveDestroy) == 0x000100, "Wrong size on BP_HEX_HeatSink_C_ReceiveDestroy");
static_assert(offsetof(BP_HEX_HeatSink_C_ReceiveDestroy, HitResult) == 0x000000, "Member 'BP_HEX_HeatSink_C_ReceiveDestroy::HitResult' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ReceiveDestroy, bInstant) == 0x0000F8, "Member 'BP_HEX_HeatSink_C_ReceiveDestroy::bInstant' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.GetDestructibleMeshAsset
// 0x0038 (0x0038 - 0x0000)
struct BP_HEX_HeatSink_C_GetDestructibleMeshAsset final
{
public:
	const class UGeometryCollection*              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGeometryCollection*              Temp_object_Variable;                              // 0x0010(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGeometryCollection*              Temp_object_Variable_1;                            // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGeometryCollection*              Temp_object_Variable_2;                            // 0x0020(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC4[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGeometryCollection*              K2Node_Select_Default;                             // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_GetDestructibleMeshAsset");
static_assert(sizeof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset) == 0x000038, "Wrong size on BP_HEX_HeatSink_C_GetDestructibleMeshAsset");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, ReturnValue) == 0x000000, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, Temp_int_Variable) == 0x000008, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, Temp_object_Variable) == 0x000010, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, Temp_object_Variable_1) == 0x000018, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, Temp_object_Variable_2) == 0x000020, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, CallFunc_RandomInteger_ReturnValue) == 0x000028, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_GetDestructibleMeshAsset, K2Node_Select_Default) == 0x000030, "Member 'BP_HEX_HeatSink_C_GetDestructibleMeshAsset::K2Node_Select_Default' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ExecuteUbergraph_BP_HEX_HeatSink
// 0x0120 (0x0120 - 0x0000)
struct BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_HitResult;                            // 0x0008(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_bInstant;                             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnable;                        // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC6[0x6];                                     // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFieldSystemActor*                      K2Node_CustomEvent_Field;                          // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TeamId;                               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0115(0x0001)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ApplyHeating_HeatingTime_ImplicitCast;    // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink");
static_assert(sizeof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink) == 0x000120, "Wrong size on BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, EntryPoint) == 0x000000, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_Event_HitResult) == 0x000008, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_Event_bInstant) == 0x000100, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_Event_bInstant' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_CustomEvent_bEnable) == 0x000101, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_CustomEvent_bEnable' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_CustomEvent_Field) == 0x000108, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_CustomEvent_Field' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_Event_TeamId) == 0x000110, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_Event_TeamId' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, CallFunc_Conv_IntToByte_ReturnValue) == 0x000114, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, K2Node_MakeStruct_GenericTeamId) == 0x000115, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, CallFunc_IsDedicatedServer_ReturnValue) == 0x000116, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, CallFunc_Not_PreBool_ReturnValue_1) == 0x000117, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink, CallFunc_ApplyHeating_HeatingTime_ImplicitCast) == 0x000118, "Member 'BP_HEX_HeatSink_C_ExecuteUbergraph_BP_HEX_HeatSink::CallFunc_ApplyHeating_HeatingTime_ImplicitCast' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.EnableHeating
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_HeatSink_C_EnableHeating final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_EnableHeating) == 0x000001, "Wrong alignment on BP_HEX_HeatSink_C_EnableHeating");
static_assert(sizeof(BP_HEX_HeatSink_C_EnableHeating) == 0x000001, "Wrong size on BP_HEX_HeatSink_C_EnableHeating");
static_assert(offsetof(BP_HEX_HeatSink_C_EnableHeating, bEnable) == 0x000000, "Member 'BP_HEX_HeatSink_C_EnableHeating::bEnable' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ApplyHeating
// 0x0048 (0x0048 - 0x0000)
struct BP_HEX_HeatSink_C_ApplyHeating final
{
public:
	double                                        HeatingTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialParameterInfo                 K2Node_MakeStruct_MaterialParameterInfo;           // 0x0008(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialParameterInfo                 K2Node_MakeStruct_MaterialParameterInfo_1;         // 0x0028(0x0010)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC7[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueByInfo_Value_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ApplyHeating) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_ApplyHeating");
static_assert(sizeof(BP_HEX_HeatSink_C_ApplyHeating) == 0x000048, "Wrong size on BP_HEX_HeatSink_C_ApplyHeating");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, HeatingTime) == 0x000000, "Member 'BP_HEX_HeatSink_C_ApplyHeating::HeatingTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, K2Node_MakeStruct_MaterialParameterInfo) == 0x000008, "Member 'BP_HEX_HeatSink_C_ApplyHeating::K2Node_MakeStruct_MaterialParameterInfo' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, CallFunc_LinearColorLerp_ReturnValue) == 0x000018, "Member 'BP_HEX_HeatSink_C_ApplyHeating::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, K2Node_MakeStruct_MaterialParameterInfo_1) == 0x000028, "Member 'BP_HEX_HeatSink_C_ApplyHeating::K2Node_MakeStruct_MaterialParameterInfo_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_HEX_HeatSink_C_ApplyHeating::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x00003C, "Member 'BP_HEX_HeatSink_C_ApplyHeating::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyHeating, CallFunc_SetScalarParameterValueByInfo_Value_ImplicitCast) == 0x000040, "Member 'BP_HEX_HeatSink_C_ApplyHeating::CallFunc_SetScalarParameterValueByInfo_Value_ImplicitCast' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ApplyDestruction
// 0x0210 (0x0210 - 0x0000)
struct BP_HEX_HeatSink_C_ApplyDestruction final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bInstant;                                          // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC8[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC9[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01E8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0200(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ApplyDestruction) == 0x000008, "Wrong alignment on BP_HEX_HeatSink_C_ApplyDestruction");
static_assert(sizeof(BP_HEX_HeatSink_C_ApplyDestruction) == 0x000210, "Wrong size on BP_HEX_HeatSink_C_ApplyDestruction");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, Hit) == 0x000000, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::Hit' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, bInstant) == 0x0000F8, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::bInstant' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_Not_PreBool_ReturnValue) == 0x0000F9, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_bBlockingHit) == 0x0000FA, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FB, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_Location) == 0x000108, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_Normal) == 0x000138, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_BoneName) == 0x000188, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_ElementIndex) == 0x000194, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_FaceIndex) == 0x000198, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BreakHitResult_TraceEnd) == 0x0001B8, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0001D0, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, K2Node_CreateDelegate_OutputDelegate) == 0x0001E8, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0001F8, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000200, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_IsDedicatedServer_ReturnValue) == 0x000208, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_Not_PreBool_ReturnValue_1) == 0x000209, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyDestruction, CallFunc_BooleanAND_ReturnValue) == 0x00020A, "Member 'BP_HEX_HeatSink_C_ApplyDestruction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_HeatSink.BP_HEX_HeatSink_C.ApplyAnchor
// 0x0008 (0x0008 - 0x0000)
struct BP_HEX_HeatSink_C_ApplyAnchor final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5ECA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_HeatSink_C_ApplyAnchor) == 0x000004, "Wrong alignment on BP_HEX_HeatSink_C_ApplyAnchor");
static_assert(sizeof(BP_HEX_HeatSink_C_ApplyAnchor) == 0x000008, "Wrong size on BP_HEX_HeatSink_C_ApplyAnchor");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyAnchor, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_HeatSink_C_ApplyAnchor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyAnchor, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_HEX_HeatSink_C_ApplyAnchor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_HeatSink_C_ApplyAnchor, CallFunc_Array_Add_ReturnValue) == 0x000004, "Member 'BP_HEX_HeatSink_C_ApplyAnchor::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

