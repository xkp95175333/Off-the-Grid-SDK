#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_Dart_Arm_ARM_R

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ControlRig_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CLA_Dart_Arm_ARM_R.ABP_CLA_Dart_Arm_ARM_R_C
// 0x0BE0 (0x0F50 - 0x0370)
class UABP_CLA_Dart_Arm_ARM_R_C final : public UAnimInstance
{
public:
	uint8                                         Pad_612A[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x03A8(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x0878(0x0158)(ContainsInstancedReference)
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x09D0(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0AC0(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0B08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0B30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0B58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0BA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0BD0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0BF8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0C40(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0C60(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0CA8(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x0CC8(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0D08(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0D28(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0D70(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0D90(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0DD0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0DF0(0x00C8)()
	bool                                          Reload;                                            // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShoot;                                           // 0x0EB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivated;                                       // 0x0EBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612B[0x5];                                     // 0x0EBB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LOD_count;                                         // 0x0EC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AGzCharacter*                           OwnerCharacter;                                    // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ReloadTag;                                         // 0x0ED8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  ActiveTag;                                         // 0x0EF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  ShootTag;                                          // 0x0F18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Mat_count_Dart;                                    // 0x0F38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UnHideMaterialSlots(TArray<int32>& LODs, TArray<int32>& Materials);
	void OnTagRemoved_A83057644504EB5754F9E49435DC5975(const struct FGameplayTag& Tag);
	void OnTagRemoved_62ADEBA8495E708164B2B7BDB9F79160(const struct FGameplayTag& Tag);
	void OnTagAdded_A83057644504EB5754F9E49435DC5975(const struct FGameplayTag& Tag);
	void OnTagAdded_62ADEBA8495E708164B2B7BDB9F79160(const struct FGameplayTag& Tag);
	void ExecuteUbergraph_ABP_CLA_Dart_Arm_ARM_R(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void AnimNotify_ShootingStarted();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CLA_Dart_Arm_ARM_R_C">();
	}
	static class UABP_CLA_Dart_Arm_ARM_R_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CLA_Dart_Arm_ARM_R_C>();
	}
};
static_assert(alignof(UABP_CLA_Dart_Arm_ARM_R_C) == 0x000010, "Wrong alignment on UABP_CLA_Dart_Arm_ARM_R_C");
static_assert(sizeof(UABP_CLA_Dart_Arm_ARM_R_C) == 0x000F50, "Wrong size on UABP_CLA_Dart_Arm_ARM_R_C");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, UberGraphFrame) == 0x000370, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_ControlRig) == 0x0003A8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_CopyPoseFromMesh) == 0x000878, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_LayeredBoneBlend) == 0x0009D0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_Slot) == 0x000AC0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult_5) == 0x000B08, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult_4) == 0x000B30, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult_3) == 0x000B58, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult_2) == 0x000B80, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult_1) == 0x000BA8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_TransitionResult) == 0x000BD0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_SequencePlayer_2) == 0x000BF8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateResult_4) == 0x000C40, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_SequencePlayer_1) == 0x000C60, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateResult_3) == 0x000CA8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_SequenceEvaluator_1) == 0x000CC8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateResult_2) == 0x000D08, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_SequencePlayer) == 0x000D28, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateResult_1) == 0x000D70, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_SequenceEvaluator) == 0x000D90, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateResult) == 0x000DD0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, AnimGraphNode_StateMachine) == 0x000DF0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, Reload) == 0x000EB8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::Reload' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, IsShoot) == 0x000EB9, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::IsShoot' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, IsActivated) == 0x000EBA, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::IsActivated' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, LOD_count) == 0x000EC0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::LOD_count' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, OwnerCharacter) == 0x000ED0, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, ReloadTag) == 0x000ED8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::ReloadTag' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, ActiveTag) == 0x000EF8, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::ActiveTag' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, ShootTag) == 0x000F18, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::ShootTag' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Dart_Arm_ARM_R_C, Mat_count_Dart) == 0x000F38, "Member 'UABP_CLA_Dart_Arm_ARM_R_C::Mat_count_Dart' has a wrong offset!");

}

