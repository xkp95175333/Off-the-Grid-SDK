#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AmmoDisplay

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_AmmoDisplay.WBP_AmmoDisplay_C.GetAmmoData
// 0x0040 (0x0040 - 0x0000)
struct WBP_AmmoDisplay_C_GetAmmoData final
{
public:
	const class APawn*                            PlayerCharacter;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzInvPocket                           InvPocket;                                         // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         LoadedAmmo;                                        // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalAmmo;                                         // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAmmoCountForWeaponPocket_ReturnValue;  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAmmoCountForWeaponPocket_ReturnValue_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AmmoDisplay_C_GetAmmoData) == 0x000008, "Wrong alignment on WBP_AmmoDisplay_C_GetAmmoData");
static_assert(sizeof(WBP_AmmoDisplay_C_GetAmmoData) == 0x000040, "Wrong size on WBP_AmmoDisplay_C_GetAmmoData");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, PlayerCharacter) == 0x000000, "Member 'WBP_AmmoDisplay_C_GetAmmoData::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, InvPocket) == 0x000008, "Member 'WBP_AmmoDisplay_C_GetAmmoData::InvPocket' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, LoadedAmmo) == 0x000030, "Member 'WBP_AmmoDisplay_C_GetAmmoData::LoadedAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, TotalAmmo) == 0x000034, "Member 'WBP_AmmoDisplay_C_GetAmmoData::TotalAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, CallFunc_GetAmmoCountForWeaponPocket_ReturnValue) == 0x000038, "Member 'WBP_AmmoDisplay_C_GetAmmoData::CallFunc_GetAmmoCountForWeaponPocket_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_GetAmmoData, CallFunc_GetAmmoCountForWeaponPocket_ReturnValue_1) == 0x00003C, "Member 'WBP_AmmoDisplay_C_GetAmmoData::CallFunc_GetAmmoCountForWeaponPocket_ReturnValue_1' has a wrong offset!");

// Function WBP_AmmoDisplay.WBP_AmmoDisplay_C.Handle Weapon Data
// 0x0138 (0x0138 - 0x0000)
struct WBP_AmmoDisplay_C_Handle_Weapon_Data final
{
public:
	class UGzWeaponItemData*                      WeaponItemData;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGzInvPocket                           Pocket;                                            // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6092[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmmoData_LoadedAmmo;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAmmoData_TotalAmmo;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6093[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0048)(HasGetValueTypeHash)
	class UObject*                                CallFunc_GetAmmoTypeImage_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0118(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0128(0x0010)()
};
static_assert(alignof(WBP_AmmoDisplay_C_Handle_Weapon_Data) == 0x000008, "Wrong alignment on WBP_AmmoDisplay_C_Handle_Weapon_Data");
static_assert(sizeof(WBP_AmmoDisplay_C_Handle_Weapon_Data) == 0x000138, "Wrong size on WBP_AmmoDisplay_C_Handle_Weapon_Data");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, WeaponItemData) == 0x000000, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::WeaponItemData' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, Pocket) == 0x000008, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::Pocket' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000030, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_DynamicCast_AsGz_Player_Character) == 0x000038, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_GetAmmoData_LoadedAmmo) == 0x000044, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_GetAmmoData_LoadedAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_GetAmmoData_TotalAmmo) == 0x000048, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_GetAmmoData_TotalAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000050, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_GetAmmoTypeImage_ReturnValue) == 0x0000A0, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_GetAmmoTypeImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_MakeArray_Array) == 0x0000A8, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x0000B8, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_Format_ReturnValue) == 0x0000C0, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D0, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, K2Node_MakeArray_Array_1) == 0x000118, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoDisplay_C_Handle_Weapon_Data, CallFunc_Format_ReturnValue_1) == 0x000128, "Member 'WBP_AmmoDisplay_C_Handle_Weapon_Data::CallFunc_Format_ReturnValue_1' has a wrong offset!");

}

