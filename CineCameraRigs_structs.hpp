#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CineCameraRigs

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CineCameraRigs.ECineCameraRigRailDriveMode
// NumValues: 0x0004
enum class ECineCameraRigRailDriveMode : uint8
{
	Manual                                   = 0,
	Duration                                 = 1,
	Speed                                    = 2,
	ECineCameraRigRailDriveMode_MAX          = 3,
};

// ScriptStruct CineCameraRigs.CineSplinePointData
// 0x0040 (0x0040 - 0x0000)
struct FCineSplinePointData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusDistance;                                     // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478B[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCineSplinePointData) == 0x000008, "Wrong alignment on FCineSplinePointData");
static_assert(sizeof(FCineSplinePointData) == 0x000040, "Wrong size on FCineSplinePointData");
static_assert(offsetof(FCineSplinePointData, Location) == 0x000000, "Member 'FCineSplinePointData::Location' has a wrong offset!");
static_assert(offsetof(FCineSplinePointData, Rotation) == 0x000018, "Member 'FCineSplinePointData::Rotation' has a wrong offset!");
static_assert(offsetof(FCineSplinePointData, FocalLength) == 0x000030, "Member 'FCineSplinePointData::FocalLength' has a wrong offset!");
static_assert(offsetof(FCineSplinePointData, Aperture) == 0x000034, "Member 'FCineSplinePointData::Aperture' has a wrong offset!");
static_assert(offsetof(FCineSplinePointData, FocusDistance) == 0x000038, "Member 'FCineSplinePointData::FocusDistance' has a wrong offset!");

// ScriptStruct CineCameraRigs.CineSplineCurveDefaults
// 0x0030 (0x0030 - 0x0000)
struct FCineSplineCurveDefaults final
{
public:
	float                                         DefaultAbsolutePosition;                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFocalLength;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAperture;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFocusDistance;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  DefaultPointRotation;                              // 0x0010(0x0020)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCineSplineCurveDefaults) == 0x000010, "Wrong alignment on FCineSplineCurveDefaults");
static_assert(sizeof(FCineSplineCurveDefaults) == 0x000030, "Wrong size on FCineSplineCurveDefaults");
static_assert(offsetof(FCineSplineCurveDefaults, DefaultAbsolutePosition) == 0x000000, "Member 'FCineSplineCurveDefaults::DefaultAbsolutePosition' has a wrong offset!");
static_assert(offsetof(FCineSplineCurveDefaults, DefaultFocalLength) == 0x000004, "Member 'FCineSplineCurveDefaults::DefaultFocalLength' has a wrong offset!");
static_assert(offsetof(FCineSplineCurveDefaults, DefaultAperture) == 0x000008, "Member 'FCineSplineCurveDefaults::DefaultAperture' has a wrong offset!");
static_assert(offsetof(FCineSplineCurveDefaults, DefaultFocusDistance) == 0x00000C, "Member 'FCineSplineCurveDefaults::DefaultFocusDistance' has a wrong offset!");
static_assert(offsetof(FCineSplineCurveDefaults, DefaultPointRotation) == 0x000010, "Member 'FCineSplineCurveDefaults::DefaultPointRotation' has a wrong offset!");

// ScriptStruct CineCameraRigs.CineSplineInstanceData
// 0x0008 (0x01A8 - 0x01A0)
struct FCineSplineInstanceData final : public FSplineInstanceData
{
public:
	class UCineSplineMetadata*                    CineSplineMetadata;                                // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCineSplineInstanceData) == 0x000008, "Wrong alignment on FCineSplineInstanceData");
static_assert(sizeof(FCineSplineInstanceData) == 0x0001A8, "Wrong size on FCineSplineInstanceData");
static_assert(offsetof(FCineSplineInstanceData, CineSplineMetadata) == 0x0001A0, "Member 'FCineSplineInstanceData::CineSplineMetadata' has a wrong offset!");

}

