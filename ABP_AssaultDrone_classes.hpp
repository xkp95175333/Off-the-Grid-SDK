#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AssaultDrone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_AssaultDrone_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_AssaultDrone.ABP_AssaultDrone_C
// 0x0240 (0x05B0 - 0x0370)
class UABP_AssaultDrone_C final : public UAnimInstance
{
public:
	uint8                                         Pad_6476[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_AssaultDrone::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0390(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03B0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x03D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0420(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0440(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x04B0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x04D0(0x00C8)()
	bool                                          bDeath;                                            // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6477[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SideValue;                                         // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_AssaultDrone(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_AssaultDrone_C">();
	}
	static class UABP_AssaultDrone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_AssaultDrone_C>();
	}
};
static_assert(alignof(UABP_AssaultDrone_C) == 0x000010, "Wrong alignment on UABP_AssaultDrone_C");
static_assert(sizeof(UABP_AssaultDrone_C) == 0x0005B0, "Wrong size on UABP_AssaultDrone_C");
static_assert(offsetof(UABP_AssaultDrone_C, UberGraphFrame) == 0x000370, "Member 'UABP_AssaultDrone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_AssaultDrone_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UABP_AssaultDrone_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UABP_AssaultDrone_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_Root) == 0x000390, "Member 'UABP_AssaultDrone_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_TransitionResult) == 0x0003B0, "Member 'UABP_AssaultDrone_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_SequencePlayer) == 0x0003D8, "Member 'UABP_AssaultDrone_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_StateResult_1) == 0x000420, "Member 'UABP_AssaultDrone_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_BlendSpacePlayer) == 0x000440, "Member 'UABP_AssaultDrone_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_StateResult) == 0x0004B0, "Member 'UABP_AssaultDrone_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, AnimGraphNode_StateMachine) == 0x0004D0, "Member 'UABP_AssaultDrone_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, bDeath) == 0x000598, "Member 'UABP_AssaultDrone_C::bDeath' has a wrong offset!");
static_assert(offsetof(UABP_AssaultDrone_C, SideValue) == 0x0005A0, "Member 'UABP_AssaultDrone_C::SideValue' has a wrong offset!");

}

