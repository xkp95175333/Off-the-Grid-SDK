#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DroneGoblin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DroneGoblin.BP_DroneGoblin_C
// 0x0100 (0x04D0 - 0x03D0)
class ABP_DroneGoblin_C final : public AGzDroneGoblin
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Plane_Propeller_4;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_Propeller_3;                                 // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_Propeller_2;                                 // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_Propeller_1;                                 // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Folding_Drone_Panels_Drone09_C;                 // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CrateAttachmentPoint;                              // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     MarkerComponent;                                   // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComp_DRONE_MOVEMENT;                             // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_GoblinDrone_Trail_1;                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_GoblinDrone_Damaged_State_1;                    // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComp_DRONE_SIGNAL;                               // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_GoblinDrone_Flare;                              // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Folding_Drone_Tail_head;                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Folding_Drone_Body_main;                        // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Folding_Drone_Body_drone;                       // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Folding_Drone_01;                               // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStreamableComponent*                 GzStreamable;                                      // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Component_Triggerable_C*            BP_Component_Triggerable;                          // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMissionResourceComponent*              MissionResource;                                   // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzDamageableComponent*                 GzDamageable;                                      // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DroneMaxHealth;                                    // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DroneHealth;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bDropped;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6145[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DroneGoblinLootContainer_C*         Crate;                                             // 0x0498(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHealthChanged;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCrateReplaced;                                   // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DroneHeavilyDamaged;                               // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6146[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DroneTrailRespawnTimer;                            // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyDamage(double Damage);
	void BndEvt__BP_DroneGoblin_GzDamageable_K2Node_ComponentBoundEvent_0_GzSingleHitDamageReceived__DelegateSignature(class UGzDamageableComponent* Receiver, const struct FGzSingleHitDamage& Hit);
	void BndEvt__BP_DroneGoblin_GzDamageable_K2Node_ComponentBoundEvent_1_GzMultiHitDamageReceived__DelegateSignature(class UGzDamageableComponent* Receiver, const struct FGzMultiHitDamage& Hit);
	void DestroyDroneActor();
	void DroneCrateExplosion();
	void DroneExplosion();
	void ExecuteUbergraph_BP_DroneGoblin(int32 EntryPoint);
	void OnCrateReplaced__DelegateSignature(class AActor* NewCrateRef);
	void OnHealthChanged__DelegateSignature(double NewHealth);
	void OnRep_DroneHealth();
	void ReceiveBeginPlay();
	void ShowDroneDamageState();
	void SpawnCrate(class ABP_DroneGoblinLootContainer_C** CreatedCrate);
	void TrailEffectRestart();

	EGzDefilerTargetType GetDefilerTargetType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DroneGoblin_C">();
	}
	static class ABP_DroneGoblin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DroneGoblin_C>();
	}
};
static_assert(alignof(ABP_DroneGoblin_C) == 0x000008, "Wrong alignment on ABP_DroneGoblin_C");
static_assert(sizeof(ABP_DroneGoblin_C) == 0x0004D0, "Wrong size on ABP_DroneGoblin_C");
static_assert(offsetof(ABP_DroneGoblin_C, UberGraphFrame) == 0x0003D0, "Member 'ABP_DroneGoblin_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Plane_Propeller_4) == 0x0003D8, "Member 'ABP_DroneGoblin_C::Plane_Propeller_4' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Plane_Propeller_3) == 0x0003E0, "Member 'ABP_DroneGoblin_C::Plane_Propeller_3' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Plane_Propeller_2) == 0x0003E8, "Member 'ABP_DroneGoblin_C::Plane_Propeller_2' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Plane_Propeller_1) == 0x0003F0, "Member 'ABP_DroneGoblin_C::Plane_Propeller_1' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, SM_Folding_Drone_Panels_Drone09_C) == 0x0003F8, "Member 'ABP_DroneGoblin_C::SM_Folding_Drone_Panels_Drone09_C' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, CrateAttachmentPoint) == 0x000400, "Member 'ABP_DroneGoblin_C::CrateAttachmentPoint' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, MarkerComponent) == 0x000408, "Member 'ABP_DroneGoblin_C::MarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, AkComp_DRONE_MOVEMENT) == 0x000410, "Member 'ABP_DroneGoblin_C::AkComp_DRONE_MOVEMENT' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, NS_GoblinDrone_Trail_1) == 0x000418, "Member 'ABP_DroneGoblin_C::NS_GoblinDrone_Trail_1' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, NS_GoblinDrone_Damaged_State_1) == 0x000420, "Member 'ABP_DroneGoblin_C::NS_GoblinDrone_Damaged_State_1' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, AkComp_DRONE_SIGNAL) == 0x000428, "Member 'ABP_DroneGoblin_C::AkComp_DRONE_SIGNAL' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, NS_GoblinDrone_Flare) == 0x000430, "Member 'ABP_DroneGoblin_C::NS_GoblinDrone_Flare' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, SM_Folding_Drone_Tail_head) == 0x000438, "Member 'ABP_DroneGoblin_C::SM_Folding_Drone_Tail_head' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, SM_Folding_Drone_Body_main) == 0x000440, "Member 'ABP_DroneGoblin_C::SM_Folding_Drone_Body_main' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, SM_Folding_Drone_Body_drone) == 0x000448, "Member 'ABP_DroneGoblin_C::SM_Folding_Drone_Body_drone' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, SK_Folding_Drone_01) == 0x000450, "Member 'ABP_DroneGoblin_C::SK_Folding_Drone_01' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Scene) == 0x000458, "Member 'ABP_DroneGoblin_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, GzStreamable) == 0x000460, "Member 'ABP_DroneGoblin_C::GzStreamable' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, BP_Component_Triggerable) == 0x000468, "Member 'ABP_DroneGoblin_C::BP_Component_Triggerable' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, MissionResource) == 0x000470, "Member 'ABP_DroneGoblin_C::MissionResource' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, GzDamageable) == 0x000478, "Member 'ABP_DroneGoblin_C::GzDamageable' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, DroneMaxHealth) == 0x000480, "Member 'ABP_DroneGoblin_C::DroneMaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, DroneHealth) == 0x000488, "Member 'ABP_DroneGoblin_C::DroneHealth' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, bDropped) == 0x000490, "Member 'ABP_DroneGoblin_C::bDropped' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, Crate) == 0x000498, "Member 'ABP_DroneGoblin_C::Crate' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, OnHealthChanged) == 0x0004A0, "Member 'ABP_DroneGoblin_C::OnHealthChanged' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, OnCrateReplaced) == 0x0004B0, "Member 'ABP_DroneGoblin_C::OnCrateReplaced' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, DroneHeavilyDamaged) == 0x0004C0, "Member 'ABP_DroneGoblin_C::DroneHeavilyDamaged' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblin_C, DroneTrailRespawnTimer) == 0x0004C8, "Member 'ABP_DroneGoblin_C::DroneTrailRespawnTimer' has a wrong offset!");

}

