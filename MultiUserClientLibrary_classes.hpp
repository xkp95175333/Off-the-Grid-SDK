#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MultiUserClientLibrary

#include "Basic.hpp"

#include "MultiUserClientLibrary_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MultiUserClientLibrary.ChangeClientAsyncAction
// 0x0208 (0x0238 - 0x0030)
class UChangeClientAsyncAction final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGuid                                  ClientID;                                          // 0x0040(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMultiUserChangeClientReplicationRequest ReplicationRequest;                                // 0x0050(0x01E8)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UChangeClientAsyncAction* ChangeClient(const struct FGuid& Param_ClientID, const struct FMultiUserChangeClientReplicationRequest& Request);

	void OnChangeOperationCompleted__DelegateSignature(const struct FMultiUserChangeClientReplicationResult& Response);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChangeClientAsyncAction">();
	}
	static class UChangeClientAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChangeClientAsyncAction>();
	}
};
static_assert(alignof(UChangeClientAsyncAction) == 0x000008, "Wrong alignment on UChangeClientAsyncAction");
static_assert(sizeof(UChangeClientAsyncAction) == 0x000238, "Wrong size on UChangeClientAsyncAction");
static_assert(offsetof(UChangeClientAsyncAction, OnCompleted) == 0x000030, "Member 'UChangeClientAsyncAction::OnCompleted' has a wrong offset!");
static_assert(offsetof(UChangeClientAsyncAction, ClientID) == 0x000040, "Member 'UChangeClientAsyncAction::ClientID' has a wrong offset!");
static_assert(offsetof(UChangeClientAsyncAction, ReplicationRequest) == 0x000050, "Member 'UChangeClientAsyncAction::ReplicationRequest' has a wrong offset!");

// Class MultiUserClientLibrary.MultiUserReplicationRegistration
// 0x0000 (0x0028 - 0x0028)
class IMultiUserReplicationRegistration final : public IInterface
{
public:
	void DiscoverReplicationSettings(const struct FMultiUserReplicationRegistrationParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserReplicationRegistration">();
	}
	static class IMultiUserReplicationRegistration* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMultiUserReplicationRegistration>();
	}
};
static_assert(alignof(IMultiUserReplicationRegistration) == 0x000008, "Wrong alignment on IMultiUserReplicationRegistration");
static_assert(sizeof(IMultiUserReplicationRegistration) == 0x000028, "Wrong size on IMultiUserReplicationRegistration");

// Class MultiUserClientLibrary.MultiUserReplicationRegistrationContext
// 0x0000 (0x0028 - 0x0028)
class IMultiUserReplicationRegistrationContext final : public IInterface
{
public:
	void AddAdditionalObject(class UObject* Object);
	void AddPropertiesToObject(class UObject* Object, const TArray<struct FConcertPropertyChainWrapper>& PropertiesToAdd);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserReplicationRegistrationContext">();
	}
	static class IMultiUserReplicationRegistrationContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMultiUserReplicationRegistrationContext>();
	}
};
static_assert(alignof(IMultiUserReplicationRegistrationContext) == 0x000008, "Wrong alignment on IMultiUserReplicationRegistrationContext");
static_assert(sizeof(IMultiUserReplicationRegistrationContext) == 0x000028, "Wrong size on IMultiUserReplicationRegistrationContext");

// Class MultiUserClientLibrary.MultiUserClientSyncDatabase
// 0x0010 (0x0038 - 0x0028)
class UMultiUserClientSyncDatabase final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnPackageSaved;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserClientSyncDatabase">();
	}
	static class UMultiUserClientSyncDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserClientSyncDatabase>();
	}
};
static_assert(alignof(UMultiUserClientSyncDatabase) == 0x000008, "Wrong alignment on UMultiUserClientSyncDatabase");
static_assert(sizeof(UMultiUserClientSyncDatabase) == 0x000038, "Wrong size on UMultiUserClientSyncDatabase");
static_assert(offsetof(UMultiUserClientSyncDatabase, OnPackageSaved) == 0x000028, "Member 'UMultiUserClientSyncDatabase::OnPackageSaved' has a wrong offset!");

// Class MultiUserClientLibrary.MultiUserClientStatics
// 0x0000 (0x0028 - 0x0028)
class UMultiUserClientStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool ConfigureMultiUserClient(const struct FMultiUserClientConfig& ClientConfig);
	static TArray<class FName> GatherSessionChanges(bool IgnorePersisted);
	static class UMultiUserClientSyncDatabase* GetConcertSyncDatabase();
	static struct FMultiUserConnectionError GetLastMultiUserConnectionError();
	static struct FMultiUserClientInfo GetLocalMultiUserClientInfo();
	static bool GetMultiUserClientInfoByName(const class FString& ClientName, struct FMultiUserClientInfo* ClientInfo);
	static bool GetMultiUserConnectionStatus();
	static EMultiUserConnectionStatus GetMultiUserConnectionStatusDetail();
	static struct FTransform GetMultiUserPresenceTransform(const struct FGuid& ClientEndpointId);
	static struct FMultiUserSessionInfo GetMultiUserSessionInfo();
	static bool GetRemoteMultiUserClientInfos(TArray<struct FMultiUserClientInfo>* ClientInfos);
	static void JumpToMultiUserPresence(const class FString& OtherUserName, const struct FTransform& TransformOffset);
	static void PersistMultiUserSessionChanges();
	static void PersistSpecifiedPackages(const TArray<class FName>& PackagesToPersist);
	static void SetMultiUserPresenceEnabled(const bool IsEnabled);
	static void SetMultiUserPresenceVisibility(const class FString& Param_Name, bool Visibility, bool PropagateToAll);
	static void SetMultiUserPresenceVisibilityById(const struct FGuid& ClientEndpointId, bool Visibility, bool PropagateToAll);
	static bool StartMultiUserDefaultConnection();
	static void UpdateWorkspaceModifiedPackages();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserClientStatics">();
	}
	static class UMultiUserClientStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserClientStatics>();
	}
};
static_assert(alignof(UMultiUserClientStatics) == 0x000008, "Wrong alignment on UMultiUserClientStatics");
static_assert(sizeof(UMultiUserClientStatics) == 0x000028, "Wrong size on UMultiUserClientStatics");

// Class MultiUserClientLibrary.MultiUserReplicationRegistrationContextImpl
// 0x0010 (0x0038 - 0x0028)
class UMultiUserReplicationRegistrationContextImpl final : public UObject
{
public:
	uint8                                         Pad_47E8[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAdditionalObject(class UObject* Object);
	void AddPropertiesToObject(class UObject* Object, const TArray<struct FConcertPropertyChainWrapper>& PropertiesToAdd);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserReplicationRegistrationContextImpl">();
	}
	static class UMultiUserReplicationRegistrationContextImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserReplicationRegistrationContextImpl>();
	}
};
static_assert(alignof(UMultiUserReplicationRegistrationContextImpl) == 0x000008, "Wrong alignment on UMultiUserReplicationRegistrationContextImpl");
static_assert(sizeof(UMultiUserReplicationRegistrationContextImpl) == 0x000038, "Wrong size on UMultiUserReplicationRegistrationContextImpl");

// Class MultiUserClientLibrary.MultiUserReplicationSubsystem
// 0x0030 (0x0060 - 0x0030)
class UMultiUserReplicationSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnClientStreamServerStateChanged;                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnClientAuthorityServerStateChanged;               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_47E9[0x10];                                    // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetObjectReplicationFrequency(const struct FGuid& ClientID, const struct FSoftObjectPath& ObjectPath, struct FMultiUserObjectReplicationSettings* OutFrequency);
	void OnServerStateChanged__DelegateSignature(const struct FGuid& EndpointId);

	TArray<struct FConcertPropertyChainWrapper> GetPropertiesRegisteredToObject(const struct FGuid& ClientID, const struct FSoftObjectPath& ObjectPath) const;
	TArray<struct FSoftObjectPath> GetRegisteredObjects(const struct FGuid& ClientID) const;
	TArray<struct FSoftObjectPath> GetReplicatedObjects(const struct FGuid& ClientID) const;
	bool IsReplicatingObject(const struct FGuid& ClientID, const struct FSoftObjectPath& ObjectPath) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserReplicationSubsystem">();
	}
	static class UMultiUserReplicationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserReplicationSubsystem>();
	}
};
static_assert(alignof(UMultiUserReplicationSubsystem) == 0x000008, "Wrong alignment on UMultiUserReplicationSubsystem");
static_assert(sizeof(UMultiUserReplicationSubsystem) == 0x000060, "Wrong size on UMultiUserReplicationSubsystem");
static_assert(offsetof(UMultiUserReplicationSubsystem, OnClientStreamServerStateChanged) == 0x000030, "Member 'UMultiUserReplicationSubsystem::OnClientStreamServerStateChanged' has a wrong offset!");
static_assert(offsetof(UMultiUserReplicationSubsystem, OnClientAuthorityServerStateChanged) == 0x000040, "Member 'UMultiUserReplicationSubsystem::OnClientAuthorityServerStateChanged' has a wrong offset!");

// Class MultiUserClientLibrary.MultiUserSubsystem
// 0x0080 (0x00B0 - 0x0030)
class UMultiUserSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnSessionConnected;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSessionDisconnected;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSessionClientChanged;                            // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_47EC[0x50];                                    // 0x0060(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetRemoteClientIds(TArray<struct FGuid>* OutRemoteClientIds);
	void K2_ExtractEventData(struct FMultiUserBlueprintEventData& EventData, int32& StructOut);
	void K2_SendCustomEvent(const int32& EventData);
	bool RegisterCustomEventHandler(const class UStruct* EventType, TDelegate<void(const struct FMultiUserBlueprintEventData& Data)> InEventHandler);
	bool UnregisterCustomEventHandler(const class UStruct* EventType);

	bool GetLocalClientId(struct FGuid* OutClientId) const;
	bool IsConnectedToSession() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserSubsystem">();
	}
	static class UMultiUserSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserSubsystem>();
	}
};
static_assert(alignof(UMultiUserSubsystem) == 0x000008, "Wrong alignment on UMultiUserSubsystem");
static_assert(sizeof(UMultiUserSubsystem) == 0x0000B0, "Wrong size on UMultiUserSubsystem");
static_assert(offsetof(UMultiUserSubsystem, OnSessionConnected) == 0x000030, "Member 'UMultiUserSubsystem::OnSessionConnected' has a wrong offset!");
static_assert(offsetof(UMultiUserSubsystem, OnSessionDisconnected) == 0x000040, "Member 'UMultiUserSubsystem::OnSessionDisconnected' has a wrong offset!");
static_assert(offsetof(UMultiUserSubsystem, OnSessionClientChanged) == 0x000050, "Member 'UMultiUserSubsystem::OnSessionClientChanged' has a wrong offset!");

}

