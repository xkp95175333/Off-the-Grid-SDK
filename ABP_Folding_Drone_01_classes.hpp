#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Folding_Drone_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Folding_Drone_01.ABP_Folding_Drone_01_C
// 0x03F0 (0x0760 - 0x0370)
class UABP_Folding_Drone_01_C final : public UAnimInstance
{
public:
	uint8                                         Pad_67C8[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0420(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0448(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0470(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0498(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x04E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0500(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0548(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x0568(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x05A8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x05C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0610(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0630(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0670(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0690(0x00C8)()
	bool                                          IsActivated;                                       // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDroppingBox;                                     // 0x0759(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_Folding_Drone_01(int32 EntryPoint);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Folding_Drone_01_C">();
	}
	static class UABP_Folding_Drone_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Folding_Drone_01_C>();
	}
};
static_assert(alignof(UABP_Folding_Drone_01_C) == 0x000010, "Wrong alignment on UABP_Folding_Drone_01_C");
static_assert(sizeof(UABP_Folding_Drone_01_C) == 0x000760, "Wrong size on UABP_Folding_Drone_01_C");
static_assert(offsetof(UABP_Folding_Drone_01_C, UberGraphFrame) == 0x000370, "Member 'UABP_Folding_Drone_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_Folding_Drone_01_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_Folding_Drone_01_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult_5) == 0x0003A8, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult_4) == 0x0003D0, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult_3) == 0x0003F8, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult_2) == 0x000420, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult_1) == 0x000448, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_TransitionResult) == 0x000470, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_SequencePlayer_2) == 0x000498, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateResult_4) == 0x0004E0, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_SequencePlayer_1) == 0x000500, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateResult_3) == 0x000548, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_SequenceEvaluator_1) == 0x000568, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateResult_2) == 0x0005A8, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_SequencePlayer) == 0x0005C8, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateResult_1) == 0x000610, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_SequenceEvaluator) == 0x000630, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateResult) == 0x000670, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, AnimGraphNode_StateMachine) == 0x000690, "Member 'UABP_Folding_Drone_01_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, IsActivated) == 0x000758, "Member 'UABP_Folding_Drone_01_C::IsActivated' has a wrong offset!");
static_assert(offsetof(UABP_Folding_Drone_01_C, IsDroppingBox) == 0x000759, "Member 'UABP_Folding_Drone_01_C::IsDroppingBox' has a wrong offset!");

}

