#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ConcertClient

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ConcertClient.EConcertSourceValidationMode
// NumValues: 0x0004
enum class EConcertSourceValidationMode : uint8
{
	Hard                                     = 0,
	Soft                                     = 1,
	SoftAutoProceed                          = 2,
	EConcertSourceValidationMode_MAX         = 3,
};

// Enum ConcertClient.EConcertServerType
// NumValues: 0x0003
enum class EConcertServerType : uint32
{
	Console                                  = 0,
	Slate                                    = 1,
	EConcertServerType_MAX                   = 2,
};

// ScriptStruct ConcertClient.ConcertClientSettings
// 0x0098 (0x0098 - 0x0000)
struct FConcertClientSettings final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AvatarColor;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DesktopAvatarActorClass;                           // 0x0020(0x0020)(Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         VRAvatarActorClass;                                // 0x0040(0x0020)(Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ServerPort;                                        // 0x0060(0x0002)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46FE[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DiscoveryTimeoutSeconds;                           // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SessionTickFrequencySeconds;                       // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatencyCompensationMs;                             // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReflectLevelEditorInGame;                         // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportMixedBuildTypes;                           // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46FF[0x6];                                     // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0078(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FString                                 ClientAuthenticationKey;                           // 0x0088(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertClientSettings) == 0x000008, "Wrong alignment on FConcertClientSettings");
static_assert(sizeof(FConcertClientSettings) == 0x000098, "Wrong size on FConcertClientSettings");
static_assert(offsetof(FConcertClientSettings, DisplayName) == 0x000000, "Member 'FConcertClientSettings::DisplayName' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, AvatarColor) == 0x000010, "Member 'FConcertClientSettings::AvatarColor' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, DesktopAvatarActorClass) == 0x000020, "Member 'FConcertClientSettings::DesktopAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, VRAvatarActorClass) == 0x000040, "Member 'FConcertClientSettings::VRAvatarActorClass' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, ServerPort) == 0x000060, "Member 'FConcertClientSettings::ServerPort' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, DiscoveryTimeoutSeconds) == 0x000064, "Member 'FConcertClientSettings::DiscoveryTimeoutSeconds' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, SessionTickFrequencySeconds) == 0x000068, "Member 'FConcertClientSettings::SessionTickFrequencySeconds' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, LatencyCompensationMs) == 0x00006C, "Member 'FConcertClientSettings::LatencyCompensationMs' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, bReflectLevelEditorInGame) == 0x000070, "Member 'FConcertClientSettings::bReflectLevelEditorInGame' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, bSupportMixedBuildTypes) == 0x000071, "Member 'FConcertClientSettings::bSupportMixedBuildTypes' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, Tags) == 0x000078, "Member 'FConcertClientSettings::Tags' has a wrong offset!");
static_assert(offsetof(FConcertClientSettings, ClientAuthenticationKey) == 0x000088, "Member 'FConcertClientSettings::ClientAuthenticationKey' has a wrong offset!");

// ScriptStruct ConcertClient.ConcertSourceControlSettings
// 0x0001 (0x0001 - 0x0000)
struct FConcertSourceControlSettings final
{
public:
	EConcertSourceValidationMode                  ValidationMode;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertSourceControlSettings) == 0x000001, "Wrong alignment on FConcertSourceControlSettings");
static_assert(sizeof(FConcertSourceControlSettings) == 0x000001, "Wrong size on FConcertSourceControlSettings");
static_assert(offsetof(FConcertSourceControlSettings, ValidationMode) == 0x000000, "Member 'FConcertSourceControlSettings::ValidationMode' has a wrong offset!");

}

