#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PathfinderLimbAbilityComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.CalculateLaunchAndUpdatePreview
// 0x01C0 (0x01C0 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview final
{
public:
	struct FPredictProjectilePathParams           CallFunc_GetPathParams_PredictProjectilePathParams; // 0x0000(0x0078)()
	struct FPredictProjectilePathResult           CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult; // 0x0078(0x0140)(ContainsInstancedReference)
	bool                                          CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue; // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview) == 0x0001C0, "Wrong size on BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview, CallFunc_GetPathParams_PredictProjectilePathParams) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview::CallFunc_GetPathParams_PredictProjectilePathParams' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview, CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult) == 0x000078, "Member 'BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview::CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview, CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue) == 0x0001B8, "Member 'BP_PathfinderLimbAbilityComponent_C_CalculateLaunchAndUpdatePreview::CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.CallConsumeCharge
// 0x0028 (0x0028 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge final
{
public:
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge) == 0x000028, "Wrong size on BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_PathfinderLimbAbilityComponent_C_CallConsumeCharge::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.DetonationAvailable
// 0x0001 (0x0001 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_DetonationAvailable final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_DetonationAvailable) == 0x000001, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_DetonationAvailable");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_DetonationAvailable) == 0x000001, "Wrong size on BP_PathfinderLimbAbilityComponent_C_DetonationAvailable");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_DetonationAvailable, IsAvailable) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_DetonationAvailable::IsAvailable' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.ExecuteUbergraph_BP_PathfinderLimbAbilityComponent
// 0x0058 (0x0058 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* ProjectileId)>   K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBF[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocal_bIsLocallyControlled;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC0[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_ProjectileId;                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsAvailable;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC1[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetChargeTime_A_ImplicitCast;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent) == 0x000058, "Wrong size on BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, EntryPoint) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, CallFunc_IsLocal_bIsLocallyControlled) == 0x00003C, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::CallFunc_IsLocal_bIsLocallyControlled' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_CustomEvent_ProjectileId) == 0x000040, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_CustomEvent_ProjectileId' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, K2Node_CustomEvent_IsAvailable) == 0x000048, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::K2Node_CustomEvent_IsAvailable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent, CallFunc_SetChargeTime_A_ImplicitCast) == 0x000050, "Member 'BP_PathfinderLimbAbilityComponent_C_ExecuteUbergraph_BP_PathfinderLimbAbilityComponent::CallFunc_SetChargeTime_A_ImplicitCast' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.GetLaunchDirection
// 0x0298 (0x0298 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection final
{
public:
	struct FVector                                Param_LaunchLocation;                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                NewLocalVar;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        NonHitMaxDistance;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC2[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzCombatComponent*                     CallFunc_GetCombatComponent_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetViewHitResult_ReturnValue;             // 0x0050(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC3[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC4[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC5[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection) == 0x000298, "Wrong size on BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, Param_LaunchLocation) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::Param_LaunchLocation' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, ReturnValue) == 0x000018, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, NewLocalVar) == 0x000030, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, NonHitMaxDistance) == 0x000038, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::NonHitMaxDistance' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, Temp_bool_Variable) == 0x000040, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_GetCombatComponent_ReturnValue) == 0x000048, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_GetCombatComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_GetViewHitResult_ReturnValue) == 0x000050, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_GetViewHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x000148, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x000149, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_Time) == 0x00014C, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_Distance) == 0x000150, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_Location) == 0x000158, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_Normal) == 0x000188, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_BoneName) == 0x0001D8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_HitItem) == 0x0001E0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_ElementIndex) == 0x0001E4, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_FaceIndex) == 0x0001E8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_TraceStart) == 0x0001F0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000220, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000238, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_Normal_ReturnValue) == 0x000250, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, CallFunc_Normal_ReturnValue_1) == 0x000268, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection, K2Node_Select_Default) == 0x000280, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchDirection::K2Node_Select_Default' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.GetLaunchLocation
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation final
{
public:
	struct FVector                                Param_LaunchLocation;                              // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnRightOffset;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable;                              // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC6[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable_1;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   CallFunc_GetLimbType_ReturnValue;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC7[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLimbSocketWorldLocation_ReturnValue;   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation) == 0x0000D0, "Wrong size on BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Param_LaunchLocation) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Param_LaunchLocation' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, SpawnRightOffset) == 0x000018, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::SpawnRightOffset' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_struct_Variable) == 0x000030, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_byte_Variable) == 0x000048, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_name_Variable) == 0x00004C, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_name_Variable_1) == 0x000054, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_name_Variable_2) == 0x00005C, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, Temp_byte_Variable_1) == 0x000064, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, CallFunc_GetLimbType_ReturnValue) == 0x000065, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::CallFunc_GetLimbType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, K2Node_Select_Default) == 0x000068, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, CallFunc_GetLimbSocketWorldLocation_ReturnValue) == 0x000070, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::CallFunc_GetLimbSocketWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation, K2Node_Select_Default_1) == 0x0000B8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchLocation::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.GetLaunchVelo
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_LaunchLocation;                              // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchSpeed;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchLocation_LaunchLocation;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchDirection_ReturnValue;           // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo) == 0x0000A0, "Wrong size on BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, LaunchVelocity) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, Param_LaunchLocation) == 0x000018, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::Param_LaunchLocation' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, LaunchSpeed) == 0x000030, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, CallFunc_GetLaunchLocation_LaunchLocation) == 0x000038, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::CallFunc_GetLaunchLocation_LaunchLocation' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, CallFunc_Lerp_ReturnValue) == 0x000050, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, CallFunc_GetLaunchDirection_ReturnValue) == 0x000058, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::CallFunc_GetLaunchDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'BP_PathfinderLimbAbilityComponent_C_GetLaunchVelo::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.GetPathParams
// 0x0138 (0x0138 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_GetPathParams final
{
public:
	struct FPredictProjectilePathParams           PredictProjectilePathParams;                       // 0x0000(0x0078)(Parm, OutParm)
	struct FVector                                CallFunc_GetLaunchVelo_LaunchVelocity;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchVelo_LaunchLocation;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLaunchVelo_LaunchSpeed;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm)
	struct FPredictProjectilePathParams           K2Node_MakeStruct_PredictProjectilePathParams;     // 0x00C0(0x0078)()
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_GetPathParams) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_GetPathParams");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_GetPathParams) == 0x000138, "Wrong size on BP_PathfinderLimbAbilityComponent_C_GetPathParams");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, PredictProjectilePathParams) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::PredictProjectilePathParams' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, CallFunc_GetLaunchVelo_LaunchVelocity) == 0x000078, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::CallFunc_GetLaunchVelo_LaunchVelocity' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, CallFunc_GetLaunchVelo_LaunchLocation) == 0x000090, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::CallFunc_GetLaunchVelo_LaunchLocation' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, CallFunc_GetLaunchVelo_LaunchSpeed) == 0x0000A8, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::CallFunc_GetLaunchVelo_LaunchSpeed' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, K2Node_MakeArray_Array) == 0x0000B0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_GetPathParams, K2Node_MakeStruct_PredictProjectilePathParams) == 0x0000C0, "Member 'BP_PathfinderLimbAbilityComponent_C_GetPathParams::K2Node_MakeStruct_PredictProjectilePathParams' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.IsLocal
// 0x0002 (0x0002 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_IsLocal final
{
public:
	bool                                          bIsLocallyControlled;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_IsLocal) == 0x000001, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_IsLocal");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_IsLocal) == 0x000002, "Wrong size on BP_PathfinderLimbAbilityComponent_C_IsLocal");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_IsLocal, bIsLocallyControlled) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_IsLocal::bIsLocallyControlled' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_IsLocal, CallFunc_IsLocallyControlled_ReturnValue) == 0x000001, "Member 'BP_PathfinderLimbAbilityComponent_C_IsLocal::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.ProjectileLaunched__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature final
{
public:
	class AActor*                                 ProjectileId;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature) == 0x000008, "Wrong size on BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature, ProjectileId) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched__DelegateSignature::ProjectileId' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.ProjectileLaunched_Event
// 0x0008 (0x0008 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event final
{
public:
	class AActor*                                 ProjectileId;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event) == 0x000008, "Wrong size on BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event, ProjectileId) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_ProjectileLaunched_Event::ProjectileId' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_ReceiveTick");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PathfinderLimbAbilityComponent_C_ReceiveTick");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.SetChargeTime
// 0x0028 (0x0028 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_SetChargeTime final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delay;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_SetChargeTime");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime) == 0x000028, "Wrong size on BP_PathfinderLimbAbilityComponent_C_SetChargeTime");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime, A) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_SetChargeTime::A' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime, Delay) == 0x000008, "Member 'BP_PathfinderLimbAbilityComponent_C_SetChargeTime::Delay' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_PathfinderLimbAbilityComponent_C_SetChargeTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_PathfinderLimbAbilityComponent_C_SetChargeTime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SetChargeTime, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_PathfinderLimbAbilityComponent_C_SetChargeTime::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.SpawnPreviewActorCharHit
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit final
{
public:
	uint8                                         Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   CallFunc_GetLimbType_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToActor_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DCA[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PathfinderPathPreview_C*            CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit) == 0x000010, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit) == 0x0000C0, "Wrong size on BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, Temp_byte_Variable) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, Temp_name_Variable) == 0x000004, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, Temp_name_Variable_1) == 0x00000C, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, Temp_name_Variable_2) == 0x000014, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_GetLimbType_ReturnValue) == 0x00001C, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_GetLimbType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, K2Node_Select_Default) == 0x000020, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_K2_AttachToActor_ReturnValue) == 0x000040, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_K2_AttachToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000B0, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B8, "Member 'BP_PathfinderLimbAbilityComponent_C_SpawnPreviewActorCharHit::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.UI_ChargeConsumed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature final
{
public:
	int32                                         ChargesLoaded;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_MaxCharges;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature) == 0x000004, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature) == 0x000008, "Wrong size on BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature, ChargesLoaded) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature::ChargesLoaded' has a wrong offset!");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature, Param_MaxCharges) == 0x000004, "Member 'BP_PathfinderLimbAbilityComponent_C_UI_ChargeConsumed__DelegateSignature::Param_MaxCharges' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.UI_DetonationAvailable__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature final
{
public:
	bool                                          IsDetonationAvailable;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature) == 0x000001, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature) == 0x000001, "Wrong size on BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature, IsDetonationAvailable) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_UI_DetonationAvailable__DelegateSignature::IsDetonationAvailable' has a wrong offset!");

// Function BP_PathfinderLimbAbilityComponent.BP_PathfinderLimbAbilityComponent_C.UI_OverchargeStarted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature final
{
public:
	double                                        OverchargeTimer;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature) == 0x000008, "Wrong alignment on BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature");
static_assert(sizeof(BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature) == 0x000008, "Wrong size on BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature");
static_assert(offsetof(BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature, OverchargeTimer) == 0x000000, "Member 'BP_PathfinderLimbAbilityComponent_C_UI_OverchargeStarted__DelegateSignature::OverchargeTimer' has a wrong offset!");

}

