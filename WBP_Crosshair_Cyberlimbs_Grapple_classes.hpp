#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_Grapple

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Crosshair_Cyberlimbs_Grapple.WBP_Crosshair_Cyberlimbs_Grapple_C
// 0x0088 (0x0378 - 0x02F0)
class UWBP_Crosshair_Cyberlimbs_Grapple_C final : public UGzLimbCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OverlayRotation;                                   // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               GrappleCrosshair_Overlay;                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* WBP_GrappleReticle_Bottom;                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* WBP_GrappleReticle_Left;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* WBP_GrappleReticle_Right;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* WBP_GrappleReticle_Top;                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        AnimationPlaybackSpeed;                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GA_ClassGrapplePull;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzGA_GrapplePull*                      GA_GrapplePull;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  LimbInventoryAbilityTags;                          // 0x0340(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GA_GrappleHook;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzGA_GrappleHook*                      GA_ClassGrappleHook;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAbilityAvailable;                               // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Grapple(int32 EntryPoint);
	void Init();
	void IsAbilityAvailable(bool* AbilityAvailable);
	void PlayCrossAnimForward(class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* Crosshair_Leaf);
	void PlayCrossAnimReversed(class UWBP_Crosshair_Cyberlimbs_Grapple_Leaf_C* CrosshairLeaf);
	void PlayReticleAnimation(bool IsTargetInRange);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Crosshair_Cyberlimbs_Grapple_C">();
	}
	static class UWBP_Crosshair_Cyberlimbs_Grapple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Crosshair_Cyberlimbs_Grapple_C>();
	}
};
static_assert(alignof(UWBP_Crosshair_Cyberlimbs_Grapple_C) == 0x000008, "Wrong alignment on UWBP_Crosshair_Cyberlimbs_Grapple_C");
static_assert(sizeof(UWBP_Crosshair_Cyberlimbs_Grapple_C) == 0x000378, "Wrong size on UWBP_Crosshair_Cyberlimbs_Grapple_C");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, OverlayRotation) == 0x0002F8, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::OverlayRotation' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, GrappleCrosshair_Overlay) == 0x000300, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::GrappleCrosshair_Overlay' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, WBP_GrappleReticle_Bottom) == 0x000308, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::WBP_GrappleReticle_Bottom' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, WBP_GrappleReticle_Left) == 0x000310, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::WBP_GrappleReticle_Left' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, WBP_GrappleReticle_Right) == 0x000318, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::WBP_GrappleReticle_Right' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, WBP_GrappleReticle_Top) == 0x000320, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::WBP_GrappleReticle_Top' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, AnimationPlaybackSpeed) == 0x000328, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::AnimationPlaybackSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, GA_ClassGrapplePull) == 0x000330, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::GA_ClassGrapplePull' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, GA_GrapplePull) == 0x000338, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::GA_GrapplePull' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, LimbInventoryAbilityTags) == 0x000340, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::LimbInventoryAbilityTags' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, GA_GrappleHook) == 0x000360, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::GA_GrappleHook' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, GA_ClassGrappleHook) == 0x000368, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::GA_ClassGrappleHook' has a wrong offset!");
static_assert(offsetof(UWBP_Crosshair_Cyberlimbs_Grapple_C, bIsAbilityAvailable) == 0x000370, "Member 'UWBP_Crosshair_Cyberlimbs_Grapple_C::bIsAbilityAvailable' has a wrong offset!");

}

