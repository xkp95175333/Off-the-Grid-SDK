#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_MicroMissiles

#include "Basic.hpp"

#include "G01_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles
// 0x0570 (0x0570 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   K2Node_Event_LimbType;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D90[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_MicroMissilesComponent_C*           K2Node_DynamicCast_AsBP_Micro_Missiles_Component;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D91[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue_1;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D92[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MicroMissilesComponent_C*           K2Node_DynamicCast_AsBP_Micro_Missiles_Component_1; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   K2Node_Event_LimbType_1;                           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D93[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       K2Node_Event_GaugeData;                            // 0x0040(0x0028)(ConstParm, NoDestructor)
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate;              // 0x0068(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzGA_MicroMissiles*                    K2Node_DynamicCast_AsGz_GA_Micro_Missiles;         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D94[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzMicroMissiles_LockOnTarget          K2Node_CustomEvent_TargetData_3;                   // 0x0088(0x0120)(ConstParm, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsUsingLockOnLocation_Result;             // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D95[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x01AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D96[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzMicroMissiles_LockOnTarget          K2Node_CustomEvent_TargetData_2;                   // 0x01C0(0x0120)(ConstParm, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsUsingLockOnLocation_Result_1;           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D97[0x3];                                     // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x02E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D98[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzMicroMissiles_LockOnTarget          K2Node_CustomEvent_TargetData_1;                   // 0x02F8(0x0120)(ConstParm, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsUsingLockOnLocation_Result_2;           // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D99[0x3];                                     // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGzMicroMissiles_LockOnTarget& TargetData)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x041C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9A[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzMicroMissiles_LockOnTarget          K2Node_CustomEvent_TargetData;                     // 0x0430(0x0120)(ConstParm, NoDestructor, ContainsInstancedReference)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0550(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9B[0x7];                                     // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0568(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles) == 0x000570, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_Event_LimbType) == 0x000004, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_Event_LimbType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_AsBP_Micro_Missiles_Component) == 0x000010, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_AsBP_Micro_Missiles_Component' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_BP_GetAbilityComponent_ReturnValue_1) == 0x000020, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_BP_GetAbilityComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_AsBP_Micro_Missiles_Component_1) == 0x000030, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_AsBP_Micro_Missiles_Component_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_Event_LimbType_1) == 0x000039, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_Event_LimbType_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_Event_GaugeData) == 0x000040, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_Event_GaugeData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CreateDelegate_OutputDelegate) == 0x000068, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_AsGz_GA_Micro_Missiles) == 0x000078, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_AsGz_GA_Micro_Missiles' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CustomEvent_TargetData_3) == 0x000088, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CustomEvent_TargetData_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_IsUsingLockOnLocation_Result) == 0x0001A8, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_IsUsingLockOnLocation_Result' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001AC, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CustomEvent_TargetData_2) == 0x0001C0, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CustomEvent_TargetData_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_IsUsingLockOnLocation_Result_1) == 0x0002E0, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_IsUsingLockOnLocation_Result_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CreateDelegate_OutputDelegate_2) == 0x0002E4, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CustomEvent_TargetData_1) == 0x0002F8, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CustomEvent_TargetData_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, CallFunc_IsUsingLockOnLocation_Result_2) == 0x000418, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::CallFunc_IsUsingLockOnLocation_Result_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CreateDelegate_OutputDelegate_3) == 0x00041C, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CustomEvent_TargetData) == 0x000430, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CustomEvent_TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_CreateDelegate_OutputDelegate_4) == 0x000550, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, Temp_bool_Variable) == 0x000560, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles, K2Node_Select_Default) == 0x000568, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_MicroMissiles::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.InitAvailableChargesIndication
// 0x0004 (0x0004 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication final
{
public:
	int32                                         CallFunc_GetMaxCharges_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication) == 0x000004, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication) == 0x000004, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication, CallFunc_GetMaxCharges_ReturnValue) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitAvailableChargesIndication::CallFunc_GetMaxCharges_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.InitLocksContainer
// 0x0048 (0x0048 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxCharges_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartAbilityData*                 CallFunc_BP_GetAbilityData_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartAbilityData_MicroMissileArm* K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Micro_Missile_Arm; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzMicroMissilesComponent*              K2Node_DynamicCast_AsGz_Micro_Missiles_Component;  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9E[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Initialize_TimeToLockOn_ImplicitCast;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Initialize_LockOnDuration_ImplicitCast;   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer) == 0x000048, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, Temp_bool_Variable) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, CallFunc_GetMaxCharges_ReturnValue) == 0x000004, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::CallFunc_GetMaxCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, CallFunc_BP_GetAbilityData_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::CallFunc_BP_GetAbilityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x000010, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Micro_Missile_Arm) == 0x000018, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::K2Node_DynamicCast_AsGz_Body_Part_Ability_Data_Micro_Missile_Arm' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, K2Node_DynamicCast_AsGz_Micro_Missiles_Component) == 0x000028, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::K2Node_DynamicCast_AsGz_Micro_Missiles_Component' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, K2Node_Select_Default) == 0x000034, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, CallFunc_Initialize_TimeToLockOn_ImplicitCast) == 0x000038, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::CallFunc_Initialize_TimeToLockOn_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer, CallFunc_Initialize_LockOnDuration_ImplicitCast) == 0x000040, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_InitLocksContainer::CallFunc_Initialize_LockOnDuration_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLimbActivated
// 0x0030 (0x0030 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       GaugeData;                                         // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated) == 0x000030, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated, LimbType) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated::LimbType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated, GaugeData) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivated::GaugeData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLimbActivationEnded
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded) == 0x000001, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded) == 0x000001, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded, LimbType) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLimbActivationEnded::LimbType' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLockOnInterrupted
// 0x0120 (0x0120 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted) == 0x000120, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted, TargetData) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnInterrupted::TargetData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLockOnStarted
// 0x0120 (0x0120 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted) == 0x000120, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted, TargetData) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStarted::TargetData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLockOnStatusChanged
// 0x0120 (0x0120 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged) == 0x000120, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged, TargetData) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockOnStatusChanged::TargetData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.OnLockSuccess
// 0x0120 (0x0120 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess) == 0x000120, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess, TargetData) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_OnLockSuccess::TargetData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.SetLockedOnTargets
// 0x000C (0x000C - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets final
{
public:
	bool                                          ToAdd;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DA0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets) == 0x000004, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets) == 0x00000C, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets, ToAdd) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets::ToAdd' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_SetLockedOnTargets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_MicroMissiles.WBP_Crosshair_Cyberlimbs_MicroMissiles_C.IsUsingLockOnLocation
// 0x0128 (0x0128 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation final
{
public:
	struct FGzMicroMissiles_LockOnTarget          TargetData;                                        // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	bool                                          Result;                                            // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation) == 0x000128, "Wrong size on WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation, TargetData) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation::TargetData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation, Result) == 0x000120, "Member 'WBP_Crosshair_Cyberlimbs_MicroMissiles_C_IsUsingLockOnLocation::Result' has a wrong offset!");

}

