#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OSC

#include "Basic.hpp"

#include "OSC_structs.hpp"


namespace SDK::Params
{

// Function OSC.OSCClient.GetSendIPAddress
// 0x0018 (0x0018 - 0x0000)
struct OSCClient_GetSendIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCClient_GetSendIPAddress) == 0x000008, "Wrong alignment on OSCClient_GetSendIPAddress");
static_assert(sizeof(OSCClient_GetSendIPAddress) == 0x000018, "Wrong size on OSCClient_GetSendIPAddress");
static_assert(offsetof(OSCClient_GetSendIPAddress, IPAddress) == 0x000000, "Member 'OSCClient_GetSendIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(OSCClient_GetSendIPAddress, Port) == 0x000010, "Member 'OSCClient_GetSendIPAddress::Port' has a wrong offset!");

// Function OSC.OSCClient.SendOSCBundle
// 0x0010 (0x0010 - 0x0000)
struct OSCClient_SendOSCBundle final
{
public:
	struct FOSCBundle                             Bundle;                                            // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCClient_SendOSCBundle) == 0x000008, "Wrong alignment on OSCClient_SendOSCBundle");
static_assert(sizeof(OSCClient_SendOSCBundle) == 0x000010, "Wrong size on OSCClient_SendOSCBundle");
static_assert(offsetof(OSCClient_SendOSCBundle, Bundle) == 0x000000, "Member 'OSCClient_SendOSCBundle::Bundle' has a wrong offset!");

// Function OSC.OSCClient.SendOSCMessage
// 0x0010 (0x0010 - 0x0000)
struct OSCClient_SendOSCMessage final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCClient_SendOSCMessage) == 0x000008, "Wrong alignment on OSCClient_SendOSCMessage");
static_assert(sizeof(OSCClient_SendOSCMessage) == 0x000010, "Wrong size on OSCClient_SendOSCMessage");
static_assert(offsetof(OSCClient_SendOSCMessage, Message) == 0x000000, "Member 'OSCClient_SendOSCMessage::Message' has a wrong offset!");

// Function OSC.OSCClient.SetSendIPAddress
// 0x0018 (0x0018 - 0x0000)
struct OSCClient_SetSendIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F7[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCClient_SetSendIPAddress) == 0x000008, "Wrong alignment on OSCClient_SetSendIPAddress");
static_assert(sizeof(OSCClient_SetSendIPAddress) == 0x000018, "Wrong size on OSCClient_SetSendIPAddress");
static_assert(offsetof(OSCClient_SetSendIPAddress, IPAddress) == 0x000000, "Member 'OSCClient_SetSendIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(OSCClient_SetSendIPAddress, Port) == 0x000010, "Member 'OSCClient_SetSendIPAddress::Port' has a wrong offset!");
static_assert(offsetof(OSCClient_SetSendIPAddress, ReturnValue) == 0x000014, "Member 'OSCClient_SetSendIPAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddAddress
// 0x0048 (0x0048 - 0x0000)
struct OSCManager_AddAddress final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCAddress                            Value;                                             // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddAddress) == 0x000008, "Wrong alignment on OSCManager_AddAddress");
static_assert(sizeof(OSCManager_AddAddress) == 0x000048, "Wrong size on OSCManager_AddAddress");
static_assert(offsetof(OSCManager_AddAddress, Message) == 0x000000, "Member 'OSCManager_AddAddress::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddAddress, Value) == 0x000010, "Member 'OSCManager_AddAddress::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddAddress, ReturnValue) == 0x000038, "Member 'OSCManager_AddAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddBlob
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_AddBlob final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Value;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddBlob) == 0x000008, "Wrong alignment on OSCManager_AddBlob");
static_assert(sizeof(OSCManager_AddBlob) == 0x000030, "Wrong size on OSCManager_AddBlob");
static_assert(offsetof(OSCManager_AddBlob, Message) == 0x000000, "Member 'OSCManager_AddBlob::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBlob, Value) == 0x000010, "Member 'OSCManager_AddBlob::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBlob, ReturnValue) == 0x000020, "Member 'OSCManager_AddBlob::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddBool
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_AddBool final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSCMessage                            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddBool) == 0x000008, "Wrong alignment on OSCManager_AddBool");
static_assert(sizeof(OSCManager_AddBool) == 0x000028, "Wrong size on OSCManager_AddBool");
static_assert(offsetof(OSCManager_AddBool, Message) == 0x000000, "Member 'OSCManager_AddBool::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBool, Value) == 0x000010, "Member 'OSCManager_AddBool::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBool, ReturnValue) == 0x000018, "Member 'OSCManager_AddBool::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddBundleToBundle
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_AddBundleToBundle final
{
public:
	struct FOSCBundle                             InBundle;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCBundle                             OutBundle;                                         // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCBundle                             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddBundleToBundle) == 0x000008, "Wrong alignment on OSCManager_AddBundleToBundle");
static_assert(sizeof(OSCManager_AddBundleToBundle) == 0x000030, "Wrong size on OSCManager_AddBundleToBundle");
static_assert(offsetof(OSCManager_AddBundleToBundle, InBundle) == 0x000000, "Member 'OSCManager_AddBundleToBundle::InBundle' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBundleToBundle, OutBundle) == 0x000010, "Member 'OSCManager_AddBundleToBundle::OutBundle' has a wrong offset!");
static_assert(offsetof(OSCManager_AddBundleToBundle, ReturnValue) == 0x000020, "Member 'OSCManager_AddBundleToBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddFloat
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_AddFloat final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSCMessage                            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddFloat) == 0x000008, "Wrong alignment on OSCManager_AddFloat");
static_assert(sizeof(OSCManager_AddFloat) == 0x000028, "Wrong size on OSCManager_AddFloat");
static_assert(offsetof(OSCManager_AddFloat, Message) == 0x000000, "Member 'OSCManager_AddFloat::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddFloat, Value) == 0x000010, "Member 'OSCManager_AddFloat::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddFloat, ReturnValue) == 0x000018, "Member 'OSCManager_AddFloat::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddInt32
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_AddInt32 final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSCMessage                            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddInt32) == 0x000008, "Wrong alignment on OSCManager_AddInt32");
static_assert(sizeof(OSCManager_AddInt32) == 0x000028, "Wrong size on OSCManager_AddInt32");
static_assert(offsetof(OSCManager_AddInt32, Message) == 0x000000, "Member 'OSCManager_AddInt32::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddInt32, Value) == 0x000010, "Member 'OSCManager_AddInt32::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddInt32, ReturnValue) == 0x000018, "Member 'OSCManager_AddInt32::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddInt64
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_AddInt64 final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddInt64) == 0x000008, "Wrong alignment on OSCManager_AddInt64");
static_assert(sizeof(OSCManager_AddInt64) == 0x000028, "Wrong size on OSCManager_AddInt64");
static_assert(offsetof(OSCManager_AddInt64, Message) == 0x000000, "Member 'OSCManager_AddInt64::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddInt64, Value) == 0x000010, "Member 'OSCManager_AddInt64::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddInt64, ReturnValue) == 0x000018, "Member 'OSCManager_AddInt64::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddMessageToBundle
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_AddMessageToBundle final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCBundle                             Bundle;                                            // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCBundle                             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddMessageToBundle) == 0x000008, "Wrong alignment on OSCManager_AddMessageToBundle");
static_assert(sizeof(OSCManager_AddMessageToBundle) == 0x000030, "Wrong size on OSCManager_AddMessageToBundle");
static_assert(offsetof(OSCManager_AddMessageToBundle, Message) == 0x000000, "Member 'OSCManager_AddMessageToBundle::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddMessageToBundle, Bundle) == 0x000010, "Member 'OSCManager_AddMessageToBundle::Bundle' has a wrong offset!");
static_assert(offsetof(OSCManager_AddMessageToBundle, ReturnValue) == 0x000020, "Member 'OSCManager_AddMessageToBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.AddString
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_AddString final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_AddString) == 0x000008, "Wrong alignment on OSCManager_AddString");
static_assert(sizeof(OSCManager_AddString) == 0x000030, "Wrong size on OSCManager_AddString");
static_assert(offsetof(OSCManager_AddString, Message) == 0x000000, "Member 'OSCManager_AddString::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_AddString, Value) == 0x000010, "Member 'OSCManager_AddString::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_AddString, ReturnValue) == 0x000020, "Member 'OSCManager_AddString::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.ClearBundle
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_ClearBundle final
{
public:
	struct FOSCBundle                             Bundle;                                            // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCBundle                             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_ClearBundle) == 0x000008, "Wrong alignment on OSCManager_ClearBundle");
static_assert(sizeof(OSCManager_ClearBundle) == 0x000020, "Wrong size on OSCManager_ClearBundle");
static_assert(offsetof(OSCManager_ClearBundle, Bundle) == 0x000000, "Member 'OSCManager_ClearBundle::Bundle' has a wrong offset!");
static_assert(offsetof(OSCManager_ClearBundle, ReturnValue) == 0x000010, "Member 'OSCManager_ClearBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.ClearMessage
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_ClearMessage final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_ClearMessage) == 0x000008, "Wrong alignment on OSCManager_ClearMessage");
static_assert(sizeof(OSCManager_ClearMessage) == 0x000020, "Wrong size on OSCManager_ClearMessage");
static_assert(offsetof(OSCManager_ClearMessage, Message) == 0x000000, "Member 'OSCManager_ClearMessage::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_ClearMessage, ReturnValue) == 0x000010, "Member 'OSCManager_ClearMessage::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.ClearOSCAddressContainers
// 0x0050 (0x0050 - 0x0000)
struct OSCManager_ClearOSCAddressContainers final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_ClearOSCAddressContainers) == 0x000008, "Wrong alignment on OSCManager_ClearOSCAddressContainers");
static_assert(sizeof(OSCManager_ClearOSCAddressContainers) == 0x000050, "Wrong size on OSCManager_ClearOSCAddressContainers");
static_assert(offsetof(OSCManager_ClearOSCAddressContainers, Address) == 0x000000, "Member 'OSCManager_ClearOSCAddressContainers::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_ClearOSCAddressContainers, ReturnValue) == 0x000028, "Member 'OSCManager_ClearOSCAddressContainers::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.ConvertStringToOSCAddress
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_ConvertStringToOSCAddress final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_ConvertStringToOSCAddress) == 0x000008, "Wrong alignment on OSCManager_ConvertStringToOSCAddress");
static_assert(sizeof(OSCManager_ConvertStringToOSCAddress) == 0x000038, "Wrong size on OSCManager_ConvertStringToOSCAddress");
static_assert(offsetof(OSCManager_ConvertStringToOSCAddress, String) == 0x000000, "Member 'OSCManager_ConvertStringToOSCAddress::String' has a wrong offset!");
static_assert(offsetof(OSCManager_ConvertStringToOSCAddress, ReturnValue) == 0x000010, "Member 'OSCManager_ConvertStringToOSCAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.CreateOSCClient
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_CreateOSCClient final
{
public:
	class FString                                 SendIPAddress;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FB[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Param_Outer;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOSCClient*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_CreateOSCClient) == 0x000008, "Wrong alignment on OSCManager_CreateOSCClient");
static_assert(sizeof(OSCManager_CreateOSCClient) == 0x000038, "Wrong size on OSCManager_CreateOSCClient");
static_assert(offsetof(OSCManager_CreateOSCClient, SendIPAddress) == 0x000000, "Member 'OSCManager_CreateOSCClient::SendIPAddress' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCClient, Port) == 0x000010, "Member 'OSCManager_CreateOSCClient::Port' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCClient, ClientName) == 0x000018, "Member 'OSCManager_CreateOSCClient::ClientName' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCClient, Param_Outer) == 0x000028, "Member 'OSCManager_CreateOSCClient::Param_Outer' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCClient, ReturnValue) == 0x000030, "Member 'OSCManager_CreateOSCClient::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.CreateOSCServer
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_CreateOSCServer final
{
public:
	class FString                                 ReceiveIPAddress;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMulticastLoopback;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartListening;                                   // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FC[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Param_Outer;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOSCServer*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_CreateOSCServer) == 0x000008, "Wrong alignment on OSCManager_CreateOSCServer");
static_assert(sizeof(OSCManager_CreateOSCServer) == 0x000038, "Wrong size on OSCManager_CreateOSCServer");
static_assert(offsetof(OSCManager_CreateOSCServer, ReceiveIPAddress) == 0x000000, "Member 'OSCManager_CreateOSCServer::ReceiveIPAddress' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, Port) == 0x000010, "Member 'OSCManager_CreateOSCServer::Port' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, bMulticastLoopback) == 0x000014, "Member 'OSCManager_CreateOSCServer::bMulticastLoopback' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, bStartListening) == 0x000015, "Member 'OSCManager_CreateOSCServer::bStartListening' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, ServerName) == 0x000018, "Member 'OSCManager_CreateOSCServer::ServerName' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, Param_Outer) == 0x000028, "Member 'OSCManager_CreateOSCServer::Param_Outer' has a wrong offset!");
static_assert(offsetof(OSCManager_CreateOSCServer, ReturnValue) == 0x000030, "Member 'OSCManager_CreateOSCServer::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.FindObjectAtOSCAddress
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_FindObjectAtOSCAddress final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_FindObjectAtOSCAddress) == 0x000008, "Wrong alignment on OSCManager_FindObjectAtOSCAddress");
static_assert(sizeof(OSCManager_FindObjectAtOSCAddress) == 0x000030, "Wrong size on OSCManager_FindObjectAtOSCAddress");
static_assert(offsetof(OSCManager_FindObjectAtOSCAddress, Address) == 0x000000, "Member 'OSCManager_FindObjectAtOSCAddress::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_FindObjectAtOSCAddress, ReturnValue) == 0x000028, "Member 'OSCManager_FindObjectAtOSCAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetAddress
// 0x0048 (0x0048 - 0x0000)
struct OSCManager_GetAddress final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSCAddress                            Value;                                             // 0x0018(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FE[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetAddress) == 0x000008, "Wrong alignment on OSCManager_GetAddress");
static_assert(sizeof(OSCManager_GetAddress) == 0x000048, "Wrong size on OSCManager_GetAddress");
static_assert(offsetof(OSCManager_GetAddress, Message) == 0x000000, "Member 'OSCManager_GetAddress::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAddress, Param_Index) == 0x000010, "Member 'OSCManager_GetAddress::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAddress, Value) == 0x000018, "Member 'OSCManager_GetAddress::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAddress, ReturnValue) == 0x000040, "Member 'OSCManager_GetAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetAllAddresses
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllAddresses final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOSCAddress>                    Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllAddresses) == 0x000008, "Wrong alignment on OSCManager_GetAllAddresses");
static_assert(sizeof(OSCManager_GetAllAddresses) == 0x000020, "Wrong size on OSCManager_GetAllAddresses");
static_assert(offsetof(OSCManager_GetAllAddresses, Message) == 0x000000, "Member 'OSCManager_GetAllAddresses::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllAddresses, Values) == 0x000010, "Member 'OSCManager_GetAllAddresses::Values' has a wrong offset!");

// Function OSC.OSCManager.GetAllBools
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllBools final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllBools) == 0x000008, "Wrong alignment on OSCManager_GetAllBools");
static_assert(sizeof(OSCManager_GetAllBools) == 0x000020, "Wrong size on OSCManager_GetAllBools");
static_assert(offsetof(OSCManager_GetAllBools, Message) == 0x000000, "Member 'OSCManager_GetAllBools::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllBools, Values) == 0x000010, "Member 'OSCManager_GetAllBools::Values' has a wrong offset!");

// Function OSC.OSCManager.GetAllFloats
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllFloats final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllFloats) == 0x000008, "Wrong alignment on OSCManager_GetAllFloats");
static_assert(sizeof(OSCManager_GetAllFloats) == 0x000020, "Wrong size on OSCManager_GetAllFloats");
static_assert(offsetof(OSCManager_GetAllFloats, Message) == 0x000000, "Member 'OSCManager_GetAllFloats::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllFloats, Values) == 0x000010, "Member 'OSCManager_GetAllFloats::Values' has a wrong offset!");

// Function OSC.OSCManager.GetAllInt32s
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllInt32s final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllInt32s) == 0x000008, "Wrong alignment on OSCManager_GetAllInt32s");
static_assert(sizeof(OSCManager_GetAllInt32s) == 0x000020, "Wrong size on OSCManager_GetAllInt32s");
static_assert(offsetof(OSCManager_GetAllInt32s, Message) == 0x000000, "Member 'OSCManager_GetAllInt32s::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllInt32s, Values) == 0x000010, "Member 'OSCManager_GetAllInt32s::Values' has a wrong offset!");

// Function OSC.OSCManager.GetAllInt64s
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllInt64s final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int64>                                 Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllInt64s) == 0x000008, "Wrong alignment on OSCManager_GetAllInt64s");
static_assert(sizeof(OSCManager_GetAllInt64s) == 0x000020, "Wrong size on OSCManager_GetAllInt64s");
static_assert(offsetof(OSCManager_GetAllInt64s, Message) == 0x000000, "Member 'OSCManager_GetAllInt64s::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllInt64s, Values) == 0x000010, "Member 'OSCManager_GetAllInt64s::Values' has a wrong offset!");

// Function OSC.OSCManager.GetAllStrings
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetAllStrings final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetAllStrings) == 0x000008, "Wrong alignment on OSCManager_GetAllStrings");
static_assert(sizeof(OSCManager_GetAllStrings) == 0x000020, "Wrong size on OSCManager_GetAllStrings");
static_assert(offsetof(OSCManager_GetAllStrings, Message) == 0x000000, "Member 'OSCManager_GetAllStrings::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetAllStrings, Values) == 0x000010, "Member 'OSCManager_GetAllStrings::Values' has a wrong offset!");

// Function OSC.OSCManager.GetBlob
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_GetBlob final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47FF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4800[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetBlob) == 0x000008, "Wrong alignment on OSCManager_GetBlob");
static_assert(sizeof(OSCManager_GetBlob) == 0x000030, "Wrong size on OSCManager_GetBlob");
static_assert(offsetof(OSCManager_GetBlob, Message) == 0x000000, "Member 'OSCManager_GetBlob::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBlob, Param_Index) == 0x000010, "Member 'OSCManager_GetBlob::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBlob, Value) == 0x000018, "Member 'OSCManager_GetBlob::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBlob, ReturnValue) == 0x000028, "Member 'OSCManager_GetBlob::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetBool
// 0x0018 (0x0018 - 0x0000)
struct OSCManager_GetBool final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4801[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetBool) == 0x000008, "Wrong alignment on OSCManager_GetBool");
static_assert(sizeof(OSCManager_GetBool) == 0x000018, "Wrong size on OSCManager_GetBool");
static_assert(offsetof(OSCManager_GetBool, Message) == 0x000000, "Member 'OSCManager_GetBool::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBool, Param_Index) == 0x000010, "Member 'OSCManager_GetBool::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBool, Value) == 0x000014, "Member 'OSCManager_GetBool::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBool, ReturnValue) == 0x000015, "Member 'OSCManager_GetBool::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetBundlesFromBundle
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetBundlesFromBundle final
{
public:
	struct FOSCBundle                             Bundle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOSCBundle>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetBundlesFromBundle) == 0x000008, "Wrong alignment on OSCManager_GetBundlesFromBundle");
static_assert(sizeof(OSCManager_GetBundlesFromBundle) == 0x000020, "Wrong size on OSCManager_GetBundlesFromBundle");
static_assert(offsetof(OSCManager_GetBundlesFromBundle, Bundle) == 0x000000, "Member 'OSCManager_GetBundlesFromBundle::Bundle' has a wrong offset!");
static_assert(offsetof(OSCManager_GetBundlesFromBundle, ReturnValue) == 0x000010, "Member 'OSCManager_GetBundlesFromBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetFloat
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetFloat final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4802[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetFloat) == 0x000008, "Wrong alignment on OSCManager_GetFloat");
static_assert(sizeof(OSCManager_GetFloat) == 0x000020, "Wrong size on OSCManager_GetFloat");
static_assert(offsetof(OSCManager_GetFloat, Message) == 0x000000, "Member 'OSCManager_GetFloat::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetFloat, Param_Index) == 0x000010, "Member 'OSCManager_GetFloat::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetFloat, Value) == 0x000014, "Member 'OSCManager_GetFloat::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetFloat, ReturnValue) == 0x000018, "Member 'OSCManager_GetFloat::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetInt32
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetInt32 final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4803[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetInt32) == 0x000008, "Wrong alignment on OSCManager_GetInt32");
static_assert(sizeof(OSCManager_GetInt32) == 0x000020, "Wrong size on OSCManager_GetInt32");
static_assert(offsetof(OSCManager_GetInt32, Message) == 0x000000, "Member 'OSCManager_GetInt32::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt32, Param_Index) == 0x000010, "Member 'OSCManager_GetInt32::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt32, Value) == 0x000014, "Member 'OSCManager_GetInt32::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt32, ReturnValue) == 0x000018, "Member 'OSCManager_GetInt32::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetInt64
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_GetInt64 final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4804[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4805[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetInt64) == 0x000008, "Wrong alignment on OSCManager_GetInt64");
static_assert(sizeof(OSCManager_GetInt64) == 0x000028, "Wrong size on OSCManager_GetInt64");
static_assert(offsetof(OSCManager_GetInt64, Message) == 0x000000, "Member 'OSCManager_GetInt64::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt64, Param_Index) == 0x000010, "Member 'OSCManager_GetInt64::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt64, Value) == 0x000018, "Member 'OSCManager_GetInt64::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetInt64, ReturnValue) == 0x000020, "Member 'OSCManager_GetInt64::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetMessageFromBundle
// 0x0028 (0x0028 - 0x0000)
struct OSCManager_GetMessageFromBundle final
{
public:
	struct FOSCBundle                             Bundle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4806[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSCMessage                            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetMessageFromBundle) == 0x000008, "Wrong alignment on OSCManager_GetMessageFromBundle");
static_assert(sizeof(OSCManager_GetMessageFromBundle) == 0x000028, "Wrong size on OSCManager_GetMessageFromBundle");
static_assert(offsetof(OSCManager_GetMessageFromBundle, Bundle) == 0x000000, "Member 'OSCManager_GetMessageFromBundle::Bundle' has a wrong offset!");
static_assert(offsetof(OSCManager_GetMessageFromBundle, Param_Index) == 0x000010, "Member 'OSCManager_GetMessageFromBundle::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetMessageFromBundle, bSucceeded) == 0x000014, "Member 'OSCManager_GetMessageFromBundle::bSucceeded' has a wrong offset!");
static_assert(offsetof(OSCManager_GetMessageFromBundle, ReturnValue) == 0x000018, "Member 'OSCManager_GetMessageFromBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetMessagesFromBundle
// 0x0020 (0x0020 - 0x0000)
struct OSCManager_GetMessagesFromBundle final
{
public:
	struct FOSCBundle                             Bundle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOSCMessage>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetMessagesFromBundle) == 0x000008, "Wrong alignment on OSCManager_GetMessagesFromBundle");
static_assert(sizeof(OSCManager_GetMessagesFromBundle) == 0x000020, "Wrong size on OSCManager_GetMessagesFromBundle");
static_assert(offsetof(OSCManager_GetMessagesFromBundle, Bundle) == 0x000000, "Member 'OSCManager_GetMessagesFromBundle::Bundle' has a wrong offset!");
static_assert(offsetof(OSCManager_GetMessagesFromBundle, ReturnValue) == 0x000010, "Member 'OSCManager_GetMessagesFromBundle::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCAddressContainer
// 0x0040 (0x0040 - 0x0000)
struct OSCManager_GetOSCAddressContainer final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4807[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCAddressContainer) == 0x000008, "Wrong alignment on OSCManager_GetOSCAddressContainer");
static_assert(sizeof(OSCManager_GetOSCAddressContainer) == 0x000040, "Wrong size on OSCManager_GetOSCAddressContainer");
static_assert(offsetof(OSCManager_GetOSCAddressContainer, Address) == 0x000000, "Member 'OSCManager_GetOSCAddressContainer::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressContainer, Param_Index) == 0x000028, "Member 'OSCManager_GetOSCAddressContainer::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressContainer, ReturnValue) == 0x000030, "Member 'OSCManager_GetOSCAddressContainer::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCAddressContainerPath
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_GetOSCAddressContainerPath final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCAddressContainerPath) == 0x000008, "Wrong alignment on OSCManager_GetOSCAddressContainerPath");
static_assert(sizeof(OSCManager_GetOSCAddressContainerPath) == 0x000038, "Wrong size on OSCManager_GetOSCAddressContainerPath");
static_assert(offsetof(OSCManager_GetOSCAddressContainerPath, Address) == 0x000000, "Member 'OSCManager_GetOSCAddressContainerPath::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressContainerPath, ReturnValue) == 0x000028, "Member 'OSCManager_GetOSCAddressContainerPath::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCAddressContainers
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_GetOSCAddressContainers final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCAddressContainers) == 0x000008, "Wrong alignment on OSCManager_GetOSCAddressContainers");
static_assert(sizeof(OSCManager_GetOSCAddressContainers) == 0x000038, "Wrong size on OSCManager_GetOSCAddressContainers");
static_assert(offsetof(OSCManager_GetOSCAddressContainers, Address) == 0x000000, "Member 'OSCManager_GetOSCAddressContainers::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressContainers, ReturnValue) == 0x000028, "Member 'OSCManager_GetOSCAddressContainers::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCAddressFullPath
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_GetOSCAddressFullPath final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCAddressFullPath) == 0x000008, "Wrong alignment on OSCManager_GetOSCAddressFullPath");
static_assert(sizeof(OSCManager_GetOSCAddressFullPath) == 0x000038, "Wrong size on OSCManager_GetOSCAddressFullPath");
static_assert(offsetof(OSCManager_GetOSCAddressFullPath, Address) == 0x000000, "Member 'OSCManager_GetOSCAddressFullPath::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressFullPath, ReturnValue) == 0x000028, "Member 'OSCManager_GetOSCAddressFullPath::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCAddressMethod
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_GetOSCAddressMethod final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCAddressMethod) == 0x000008, "Wrong alignment on OSCManager_GetOSCAddressMethod");
static_assert(sizeof(OSCManager_GetOSCAddressMethod) == 0x000038, "Wrong size on OSCManager_GetOSCAddressMethod");
static_assert(offsetof(OSCManager_GetOSCAddressMethod, Address) == 0x000000, "Member 'OSCManager_GetOSCAddressMethod::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCAddressMethod, ReturnValue) == 0x000028, "Member 'OSCManager_GetOSCAddressMethod::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetOSCMessageAddress
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_GetOSCMessageAddress final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_GetOSCMessageAddress) == 0x000008, "Wrong alignment on OSCManager_GetOSCMessageAddress");
static_assert(sizeof(OSCManager_GetOSCMessageAddress) == 0x000038, "Wrong size on OSCManager_GetOSCMessageAddress");
static_assert(offsetof(OSCManager_GetOSCMessageAddress, Message) == 0x000000, "Member 'OSCManager_GetOSCMessageAddress::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetOSCMessageAddress, ReturnValue) == 0x000010, "Member 'OSCManager_GetOSCMessageAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.GetString
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_GetString final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4808[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4809[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_GetString) == 0x000008, "Wrong alignment on OSCManager_GetString");
static_assert(sizeof(OSCManager_GetString) == 0x000030, "Wrong size on OSCManager_GetString");
static_assert(offsetof(OSCManager_GetString, Message) == 0x000000, "Member 'OSCManager_GetString::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_GetString, Param_Index) == 0x000010, "Member 'OSCManager_GetString::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_GetString, Value) == 0x000018, "Member 'OSCManager_GetString::Value' has a wrong offset!");
static_assert(offsetof(OSCManager_GetString, ReturnValue) == 0x000028, "Member 'OSCManager_GetString::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.ObjectPathFromOSCAddress
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_ObjectPathFromOSCAddress final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_ObjectPathFromOSCAddress) == 0x000008, "Wrong alignment on OSCManager_ObjectPathFromOSCAddress");
static_assert(sizeof(OSCManager_ObjectPathFromOSCAddress) == 0x000038, "Wrong size on OSCManager_ObjectPathFromOSCAddress");
static_assert(offsetof(OSCManager_ObjectPathFromOSCAddress, Address) == 0x000000, "Member 'OSCManager_ObjectPathFromOSCAddress::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_ObjectPathFromOSCAddress, ReturnValue) == 0x000028, "Member 'OSCManager_ObjectPathFromOSCAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressFromObjectPath
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_OSCAddressFromObjectPath final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressFromObjectPath) == 0x000008, "Wrong alignment on OSCManager_OSCAddressFromObjectPath");
static_assert(sizeof(OSCManager_OSCAddressFromObjectPath) == 0x000030, "Wrong size on OSCManager_OSCAddressFromObjectPath");
static_assert(offsetof(OSCManager_OSCAddressFromObjectPath, Object) == 0x000000, "Member 'OSCManager_OSCAddressFromObjectPath::Object' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressFromObjectPath, ReturnValue) == 0x000008, "Member 'OSCManager_OSCAddressFromObjectPath::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressFromObjectPathString
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_OSCAddressFromObjectPathString final
{
public:
	class FString                                 PathName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressFromObjectPathString) == 0x000008, "Wrong alignment on OSCManager_OSCAddressFromObjectPathString");
static_assert(sizeof(OSCManager_OSCAddressFromObjectPathString) == 0x000038, "Wrong size on OSCManager_OSCAddressFromObjectPathString");
static_assert(offsetof(OSCManager_OSCAddressFromObjectPathString, PathName) == 0x000000, "Member 'OSCManager_OSCAddressFromObjectPathString::PathName' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressFromObjectPathString, ReturnValue) == 0x000010, "Member 'OSCManager_OSCAddressFromObjectPathString::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressIsValidPath
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_OSCAddressIsValidPath final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_480A[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_OSCAddressIsValidPath) == 0x000008, "Wrong alignment on OSCManager_OSCAddressIsValidPath");
static_assert(sizeof(OSCManager_OSCAddressIsValidPath) == 0x000030, "Wrong size on OSCManager_OSCAddressIsValidPath");
static_assert(offsetof(OSCManager_OSCAddressIsValidPath, Address) == 0x000000, "Member 'OSCManager_OSCAddressIsValidPath::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressIsValidPath, ReturnValue) == 0x000028, "Member 'OSCManager_OSCAddressIsValidPath::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressIsValidPattern
// 0x0030 (0x0030 - 0x0000)
struct OSCManager_OSCAddressIsValidPattern final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_480B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_OSCAddressIsValidPattern) == 0x000008, "Wrong alignment on OSCManager_OSCAddressIsValidPattern");
static_assert(sizeof(OSCManager_OSCAddressIsValidPattern) == 0x000030, "Wrong size on OSCManager_OSCAddressIsValidPattern");
static_assert(offsetof(OSCManager_OSCAddressIsValidPattern, Address) == 0x000000, "Member 'OSCManager_OSCAddressIsValidPattern::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressIsValidPattern, ReturnValue) == 0x000028, "Member 'OSCManager_OSCAddressIsValidPattern::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressPathMatchesPattern
// 0x0058 (0x0058 - 0x0000)
struct OSCManager_OSCAddressPathMatchesPattern final
{
public:
	struct FOSCAddress                            Pattern;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            Path;                                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_480C[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCManager_OSCAddressPathMatchesPattern) == 0x000008, "Wrong alignment on OSCManager_OSCAddressPathMatchesPattern");
static_assert(sizeof(OSCManager_OSCAddressPathMatchesPattern) == 0x000058, "Wrong size on OSCManager_OSCAddressPathMatchesPattern");
static_assert(offsetof(OSCManager_OSCAddressPathMatchesPattern, Pattern) == 0x000000, "Member 'OSCManager_OSCAddressPathMatchesPattern::Pattern' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPathMatchesPattern, Path) == 0x000028, "Member 'OSCManager_OSCAddressPathMatchesPattern::Path' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPathMatchesPattern, ReturnValue) == 0x000050, "Member 'OSCManager_OSCAddressPathMatchesPattern::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressPopContainer
// 0x0038 (0x0038 - 0x0000)
struct OSCManager_OSCAddressPopContainer final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressPopContainer) == 0x000008, "Wrong alignment on OSCManager_OSCAddressPopContainer");
static_assert(sizeof(OSCManager_OSCAddressPopContainer) == 0x000038, "Wrong size on OSCManager_OSCAddressPopContainer");
static_assert(offsetof(OSCManager_OSCAddressPopContainer, Address) == 0x000000, "Member 'OSCManager_OSCAddressPopContainer::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPopContainer, ReturnValue) == 0x000028, "Member 'OSCManager_OSCAddressPopContainer::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressPopContainers
// 0x0040 (0x0040 - 0x0000)
struct OSCManager_OSCAddressPopContainers final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumContainers;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_480D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressPopContainers) == 0x000008, "Wrong alignment on OSCManager_OSCAddressPopContainers");
static_assert(sizeof(OSCManager_OSCAddressPopContainers) == 0x000040, "Wrong size on OSCManager_OSCAddressPopContainers");
static_assert(offsetof(OSCManager_OSCAddressPopContainers, Address) == 0x000000, "Member 'OSCManager_OSCAddressPopContainers::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPopContainers, NumContainers) == 0x000028, "Member 'OSCManager_OSCAddressPopContainers::NumContainers' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPopContainers, ReturnValue) == 0x000030, "Member 'OSCManager_OSCAddressPopContainers::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressPushContainer
// 0x0060 (0x0060 - 0x0000)
struct OSCManager_OSCAddressPushContainer final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Container;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0038(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressPushContainer) == 0x000008, "Wrong alignment on OSCManager_OSCAddressPushContainer");
static_assert(sizeof(OSCManager_OSCAddressPushContainer) == 0x000060, "Wrong size on OSCManager_OSCAddressPushContainer");
static_assert(offsetof(OSCManager_OSCAddressPushContainer, Address) == 0x000000, "Member 'OSCManager_OSCAddressPushContainer::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPushContainer, Container) == 0x000028, "Member 'OSCManager_OSCAddressPushContainer::Container' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPushContainer, ReturnValue) == 0x000038, "Member 'OSCManager_OSCAddressPushContainer::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressPushContainers
// 0x0060 (0x0060 - 0x0000)
struct OSCManager_OSCAddressPushContainers final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Containers;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0038(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressPushContainers) == 0x000008, "Wrong alignment on OSCManager_OSCAddressPushContainers");
static_assert(sizeof(OSCManager_OSCAddressPushContainers) == 0x000060, "Wrong size on OSCManager_OSCAddressPushContainers");
static_assert(offsetof(OSCManager_OSCAddressPushContainers, Address) == 0x000000, "Member 'OSCManager_OSCAddressPushContainers::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPushContainers, Containers) == 0x000028, "Member 'OSCManager_OSCAddressPushContainers::Containers' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressPushContainers, ReturnValue) == 0x000038, "Member 'OSCManager_OSCAddressPushContainers::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.OSCAddressRemoveContainers
// 0x0058 (0x0058 - 0x0000)
struct OSCManager_OSCAddressRemoveContainers final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0030(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_OSCAddressRemoveContainers) == 0x000008, "Wrong alignment on OSCManager_OSCAddressRemoveContainers");
static_assert(sizeof(OSCManager_OSCAddressRemoveContainers) == 0x000058, "Wrong size on OSCManager_OSCAddressRemoveContainers");
static_assert(offsetof(OSCManager_OSCAddressRemoveContainers, Address) == 0x000000, "Member 'OSCManager_OSCAddressRemoveContainers::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressRemoveContainers, Param_Index) == 0x000028, "Member 'OSCManager_OSCAddressRemoveContainers::Param_Index' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressRemoveContainers, Count) == 0x00002C, "Member 'OSCManager_OSCAddressRemoveContainers::Count' has a wrong offset!");
static_assert(offsetof(OSCManager_OSCAddressRemoveContainers, ReturnValue) == 0x000030, "Member 'OSCManager_OSCAddressRemoveContainers::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.SetOSCAddressMethod
// 0x0060 (0x0060 - 0x0000)
struct OSCManager_SetOSCAddressMethod final
{
public:
	struct FOSCAddress                            Address;                                           // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCAddress                            ReturnValue;                                       // 0x0038(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_SetOSCAddressMethod) == 0x000008, "Wrong alignment on OSCManager_SetOSCAddressMethod");
static_assert(sizeof(OSCManager_SetOSCAddressMethod) == 0x000060, "Wrong size on OSCManager_SetOSCAddressMethod");
static_assert(offsetof(OSCManager_SetOSCAddressMethod, Address) == 0x000000, "Member 'OSCManager_SetOSCAddressMethod::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_SetOSCAddressMethod, Method) == 0x000028, "Member 'OSCManager_SetOSCAddressMethod::Method' has a wrong offset!");
static_assert(offsetof(OSCManager_SetOSCAddressMethod, ReturnValue) == 0x000038, "Member 'OSCManager_SetOSCAddressMethod::ReturnValue' has a wrong offset!");

// Function OSC.OSCManager.SetOSCMessageAddress
// 0x0048 (0x0048 - 0x0000)
struct OSCManager_SetOSCMessageAddress final
{
public:
	struct FOSCMessage                            Message;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOSCAddress                            Address;                                           // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSCMessage                            ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCManager_SetOSCMessageAddress) == 0x000008, "Wrong alignment on OSCManager_SetOSCMessageAddress");
static_assert(sizeof(OSCManager_SetOSCMessageAddress) == 0x000048, "Wrong size on OSCManager_SetOSCMessageAddress");
static_assert(offsetof(OSCManager_SetOSCMessageAddress, Message) == 0x000000, "Member 'OSCManager_SetOSCMessageAddress::Message' has a wrong offset!");
static_assert(offsetof(OSCManager_SetOSCMessageAddress, Address) == 0x000010, "Member 'OSCManager_SetOSCMessageAddress::Address' has a wrong offset!");
static_assert(offsetof(OSCManager_SetOSCMessageAddress, ReturnValue) == 0x000038, "Member 'OSCManager_SetOSCMessageAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.AddAllowlistedClient
// 0x0010 (0x0010 - 0x0000)
struct OSCServer_AddAllowlistedClient final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_AddAllowlistedClient) == 0x000008, "Wrong alignment on OSCServer_AddAllowlistedClient");
static_assert(sizeof(OSCServer_AddAllowlistedClient) == 0x000010, "Wrong size on OSCServer_AddAllowlistedClient");
static_assert(offsetof(OSCServer_AddAllowlistedClient, IPAddress) == 0x000000, "Member 'OSCServer_AddAllowlistedClient::IPAddress' has a wrong offset!");

// Function OSC.OSCServer.BindEventToOnOSCAddressPatternMatchesPath
// 0x0038 (0x0038 - 0x0000)
struct OSCServer_BindEventToOnOSCAddressPatternMatchesPath final
{
public:
	struct FOSCAddress                            OSCAddressPattern;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FOSCAddress& AddressPattern, struct FOSCMessage& Message, const class FString& IPAddress, int32 Port)> Event;                                             // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_BindEventToOnOSCAddressPatternMatchesPath) == 0x000008, "Wrong alignment on OSCServer_BindEventToOnOSCAddressPatternMatchesPath");
static_assert(sizeof(OSCServer_BindEventToOnOSCAddressPatternMatchesPath) == 0x000038, "Wrong size on OSCServer_BindEventToOnOSCAddressPatternMatchesPath");
static_assert(offsetof(OSCServer_BindEventToOnOSCAddressPatternMatchesPath, OSCAddressPattern) == 0x000000, "Member 'OSCServer_BindEventToOnOSCAddressPatternMatchesPath::OSCAddressPattern' has a wrong offset!");
static_assert(offsetof(OSCServer_BindEventToOnOSCAddressPatternMatchesPath, Event) == 0x000028, "Member 'OSCServer_BindEventToOnOSCAddressPatternMatchesPath::Event' has a wrong offset!");

// Function OSC.OSCServer.RemoveAllowlistedClient
// 0x0010 (0x0010 - 0x0000)
struct OSCServer_RemoveAllowlistedClient final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_RemoveAllowlistedClient) == 0x000008, "Wrong alignment on OSCServer_RemoveAllowlistedClient");
static_assert(sizeof(OSCServer_RemoveAllowlistedClient) == 0x000010, "Wrong size on OSCServer_RemoveAllowlistedClient");
static_assert(offsetof(OSCServer_RemoveAllowlistedClient, IPAddress) == 0x000000, "Member 'OSCServer_RemoveAllowlistedClient::IPAddress' has a wrong offset!");

// Function OSC.OSCServer.SetAddress
// 0x0018 (0x0018 - 0x0000)
struct OSCServer_SetAddress final
{
public:
	class FString                                 ReceiveIPAddress;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4810[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OSCServer_SetAddress) == 0x000008, "Wrong alignment on OSCServer_SetAddress");
static_assert(sizeof(OSCServer_SetAddress) == 0x000018, "Wrong size on OSCServer_SetAddress");
static_assert(offsetof(OSCServer_SetAddress, ReceiveIPAddress) == 0x000000, "Member 'OSCServer_SetAddress::ReceiveIPAddress' has a wrong offset!");
static_assert(offsetof(OSCServer_SetAddress, Port) == 0x000010, "Member 'OSCServer_SetAddress::Port' has a wrong offset!");
static_assert(offsetof(OSCServer_SetAddress, ReturnValue) == 0x000014, "Member 'OSCServer_SetAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.SetAllowlistClientsEnabled
// 0x0001 (0x0001 - 0x0000)
struct OSCServer_SetAllowlistClientsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_SetAllowlistClientsEnabled) == 0x000001, "Wrong alignment on OSCServer_SetAllowlistClientsEnabled");
static_assert(sizeof(OSCServer_SetAllowlistClientsEnabled) == 0x000001, "Wrong size on OSCServer_SetAllowlistClientsEnabled");
static_assert(offsetof(OSCServer_SetAllowlistClientsEnabled, bEnabled) == 0x000000, "Member 'OSCServer_SetAllowlistClientsEnabled::bEnabled' has a wrong offset!");

// Function OSC.OSCServer.SetMulticastLoopback
// 0x0001 (0x0001 - 0x0000)
struct OSCServer_SetMulticastLoopback final
{
public:
	bool                                          bMulticastLoopback;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_SetMulticastLoopback) == 0x000001, "Wrong alignment on OSCServer_SetMulticastLoopback");
static_assert(sizeof(OSCServer_SetMulticastLoopback) == 0x000001, "Wrong size on OSCServer_SetMulticastLoopback");
static_assert(offsetof(OSCServer_SetMulticastLoopback, bMulticastLoopback) == 0x000000, "Member 'OSCServer_SetMulticastLoopback::bMulticastLoopback' has a wrong offset!");

// Function OSC.OSCServer.UnbindAllEventsFromOnOSCAddressPatternMatchesPath
// 0x0028 (0x0028 - 0x0000)
struct OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath final
{
public:
	struct FOSCAddress                            OSCAddressPattern;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath) == 0x000008, "Wrong alignment on OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath");
static_assert(sizeof(OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath) == 0x000028, "Wrong size on OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath");
static_assert(offsetof(OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath, OSCAddressPattern) == 0x000000, "Member 'OSCServer_UnbindAllEventsFromOnOSCAddressPatternMatchesPath::OSCAddressPattern' has a wrong offset!");

// Function OSC.OSCServer.UnbindEventFromOnOSCAddressPatternMatchesPath
// 0x0038 (0x0038 - 0x0000)
struct OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath final
{
public:
	struct FOSCAddress                            OSCAddressPattern;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FOSCAddress& AddressPattern, struct FOSCMessage& Message, const class FString& IPAddress, int32 Port)> Event;                                             // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath) == 0x000008, "Wrong alignment on OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath");
static_assert(sizeof(OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath) == 0x000038, "Wrong size on OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath");
static_assert(offsetof(OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath, OSCAddressPattern) == 0x000000, "Member 'OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath::OSCAddressPattern' has a wrong offset!");
static_assert(offsetof(OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath, Event) == 0x000028, "Member 'OSCServer_UnbindEventFromOnOSCAddressPatternMatchesPath::Event' has a wrong offset!");

// Function OSC.OSCServer.GetAllowlistedClients
// 0x0050 (0x0050 - 0x0000)
struct OSCServer_GetAllowlistedClients final
{
public:
	TSet<class FString>                           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_GetAllowlistedClients) == 0x000008, "Wrong alignment on OSCServer_GetAllowlistedClients");
static_assert(sizeof(OSCServer_GetAllowlistedClients) == 0x000050, "Wrong size on OSCServer_GetAllowlistedClients");
static_assert(offsetof(OSCServer_GetAllowlistedClients, ReturnValue) == 0x000000, "Member 'OSCServer_GetAllowlistedClients::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.GetBoundOSCAddressPatterns
// 0x0010 (0x0010 - 0x0000)
struct OSCServer_GetBoundOSCAddressPatterns final
{
public:
	TArray<struct FOSCAddress>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_GetBoundOSCAddressPatterns) == 0x000008, "Wrong alignment on OSCServer_GetBoundOSCAddressPatterns");
static_assert(sizeof(OSCServer_GetBoundOSCAddressPatterns) == 0x000010, "Wrong size on OSCServer_GetBoundOSCAddressPatterns");
static_assert(offsetof(OSCServer_GetBoundOSCAddressPatterns, ReturnValue) == 0x000000, "Member 'OSCServer_GetBoundOSCAddressPatterns::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.GetIpAddress
// 0x0018 (0x0018 - 0x0000)
struct OSCServer_GetIpAddress final
{
public:
	bool                                          bIncludePort;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4811[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_GetIpAddress) == 0x000008, "Wrong alignment on OSCServer_GetIpAddress");
static_assert(sizeof(OSCServer_GetIpAddress) == 0x000018, "Wrong size on OSCServer_GetIpAddress");
static_assert(offsetof(OSCServer_GetIpAddress, bIncludePort) == 0x000000, "Member 'OSCServer_GetIpAddress::bIncludePort' has a wrong offset!");
static_assert(offsetof(OSCServer_GetIpAddress, ReturnValue) == 0x000008, "Member 'OSCServer_GetIpAddress::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.GetMulticastLoopback
// 0x0001 (0x0001 - 0x0000)
struct OSCServer_GetMulticastLoopback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_GetMulticastLoopback) == 0x000001, "Wrong alignment on OSCServer_GetMulticastLoopback");
static_assert(sizeof(OSCServer_GetMulticastLoopback) == 0x000001, "Wrong size on OSCServer_GetMulticastLoopback");
static_assert(offsetof(OSCServer_GetMulticastLoopback, ReturnValue) == 0x000000, "Member 'OSCServer_GetMulticastLoopback::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.GetPort
// 0x0004 (0x0004 - 0x0000)
struct OSCServer_GetPort final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_GetPort) == 0x000004, "Wrong alignment on OSCServer_GetPort");
static_assert(sizeof(OSCServer_GetPort) == 0x000004, "Wrong size on OSCServer_GetPort");
static_assert(offsetof(OSCServer_GetPort, ReturnValue) == 0x000000, "Member 'OSCServer_GetPort::ReturnValue' has a wrong offset!");

// Function OSC.OSCServer.IsActive
// 0x0001 (0x0001 - 0x0000)
struct OSCServer_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OSCServer_IsActive) == 0x000001, "Wrong alignment on OSCServer_IsActive");
static_assert(sizeof(OSCServer_IsActive) == 0x000001, "Wrong size on OSCServer_IsActive");
static_assert(offsetof(OSCServer_IsActive, ReturnValue) == 0x000000, "Member 'OSCServer_IsActive::ReturnValue' has a wrong offset!");

}

