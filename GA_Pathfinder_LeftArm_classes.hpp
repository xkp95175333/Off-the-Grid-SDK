#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Pathfinder_LeftArm

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C
// 0x0230 (0x08A8 - 0x0678)
class UGA_Pathfinder_LeftArm_C : public UGzGA_BaseLimbAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0678(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FHitResult                             Hit;                                               // 0x0680(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AGzMultiPartCharacter*                  As_Gz_Multi_Part_Character;                        // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectileSpawnLocation;                           // 0x0780(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasGrenades;                                       // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F79[0x7];                                     // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GrenadeLifetime;                                   // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchSpeedMax;                                    // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7A[0x4];                                     // 0x07AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PathfinderPathPreview_C*            PreviewActor;                                      // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_PathfinderLimbAbilityComponent_C*   Ability_Component;                                 // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Multishot;                                         // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7B[0x3];                                     // 0x07C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MultishotChargeTime;                               // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Slot;                                              // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3F7C[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GrenadeType;                                       // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 GrenadeActor;                                      // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         GrenadesFired;                                     // 0x07E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         TimeBetweenShots;                                  // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7D[0x4];                                     // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           AttackInput_Action;                                // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UInputAction*>                   InputActions;                                      // 0x0800(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ChargesToShoot;                                    // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7E[0x4];                                     // 0x0814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SingleShotPreDelay;                                // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressed;                                         // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F7F[0x3];                                     // 0x0821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverchargeDuration;                                // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAngle;                                       // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverchargeEnabled;                                 // 0x082C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F80[0x3];                                     // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           LockTag;                                           // 0x0830(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           OwningCharacter;                                   // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            LockEffectHandle;                                  // 0x0848(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            RemoteEffectHandle;                                // 0x0850(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 GrenadeTMP;                                        // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Launch_Speed_Min;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OverchargeTimerHandle;                             // 0x0868(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LifetimeOnMovementStop;                            // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F81[0x7];                                     // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondaryEffectRadius;                             // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            LockEffect;                                        // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         TagCounter;                                        // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoteReady;                                       // 0x088C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargeableSpeed;                                   // 0x088D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F82[0x2];                                     // 0x088E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            RemoteEffect;                                      // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        LaunchSpeed;                                       // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMultishot;                                   // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateLimb();
	void AddCharge();
	void ChargeCompleteFeddback();
	void ChargeCompleteSound();
	void ChargeInterruptedSound();
	void ChargeLoadedSound();
	int32 ClampCharges();
	void ConsumeCharge();
	void ConsumeCharge_Event();
	void DeactivateRemoteIfAllExploded();
	void ExecuteMultishot();
	void ExecuteUbergraph_GA_Pathfinder_LeftArm(int32 EntryPoint);
	void GetLaunchData(const struct FGameplayAbilityTargetDataHandle& HitResult, struct FVector* Launch_Position, struct FVector* Launch_Direction, int32* Param_ChargesToShoot, double* Param_LaunchSpeed);
	bool HasCharges();
	void InputActionBySlot(class UInputAction** Output);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	bool LastCharge();
	void Launch_Projectile(const struct FVector& LaunchPosition, const struct FVector& LaunchDirection, double Param_LaunchSpeed);
	void LockLimbAbility(const class FString& NewParam);
	void MakeAndSendData();
	struct FGameplayAbilityTargetDataHandle MakeLaunchData();
	void MaxCharge_Event();
	void OnEndPlay_Event_0(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnFinished_586C039045E083BE4EB562BCB04DF2EF(int32 ActionNumber);
	void OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53(float Time);
	void OnOvercharge();
	void OnPerformAction_586C039045E083BE4EB562BCB04DF2EF(int32 ActionNumber);
	void OverchargeInterruptedSound();
	void PreDelay(double* Param_PreDelay);
	void QuickSingleShot();
	void RemoteActivated_Event();
	void RemoteUnavailable();
	void RemoveExplodedGrenade(TArray<class AActor*>* Param_GrenadesFired);
	void SetInitialVariables();
	void StartAim();
	void StartChargeSound();
	void StartOverChargeSound();
	void StopAim();
	void SubtractCharge();
	void ToggleTagAndCommit();
	void ValidData_A8C4D0B84F9CC642725A3592FFB278B7(const struct FGameplayAbilityTargetDataHandle& Data);
	void WaitForClientData();
	void WaitForPress();
	void WaitForRelease();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Pathfinder_LeftArm_C">();
	}
	static class UGA_Pathfinder_LeftArm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Pathfinder_LeftArm_C>();
	}
};
static_assert(alignof(UGA_Pathfinder_LeftArm_C) == 0x000008, "Wrong alignment on UGA_Pathfinder_LeftArm_C");
static_assert(sizeof(UGA_Pathfinder_LeftArm_C) == 0x0008A8, "Wrong size on UGA_Pathfinder_LeftArm_C");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, UberGraphFrame) == 0x000678, "Member 'UGA_Pathfinder_LeftArm_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, Hit) == 0x000680, "Member 'UGA_Pathfinder_LeftArm_C::Hit' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, As_Gz_Multi_Part_Character) == 0x000778, "Member 'UGA_Pathfinder_LeftArm_C::As_Gz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, ProjectileSpawnLocation) == 0x000780, "Member 'UGA_Pathfinder_LeftArm_C::ProjectileSpawnLocation' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, HasGrenades) == 0x000798, "Member 'UGA_Pathfinder_LeftArm_C::HasGrenades' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, GrenadeLifetime) == 0x0007A0, "Member 'UGA_Pathfinder_LeftArm_C::GrenadeLifetime' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LaunchSpeedMax) == 0x0007A8, "Member 'UGA_Pathfinder_LeftArm_C::LaunchSpeedMax' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, PreviewActor) == 0x0007B0, "Member 'UGA_Pathfinder_LeftArm_C::PreviewActor' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, Ability_Component) == 0x0007B8, "Member 'UGA_Pathfinder_LeftArm_C::Ability_Component' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, Multishot) == 0x0007C0, "Member 'UGA_Pathfinder_LeftArm_C::Multishot' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, MultishotChargeTime) == 0x0007C4, "Member 'UGA_Pathfinder_LeftArm_C::MultishotChargeTime' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, Slot) == 0x0007C8, "Member 'UGA_Pathfinder_LeftArm_C::Slot' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, GrenadeType) == 0x0007D0, "Member 'UGA_Pathfinder_LeftArm_C::GrenadeType' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, GrenadeActor) == 0x0007D8, "Member 'UGA_Pathfinder_LeftArm_C::GrenadeActor' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, GrenadesFired) == 0x0007E0, "Member 'UGA_Pathfinder_LeftArm_C::GrenadesFired' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, TimeBetweenShots) == 0x0007F0, "Member 'UGA_Pathfinder_LeftArm_C::TimeBetweenShots' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, AttackInput_Action) == 0x0007F8, "Member 'UGA_Pathfinder_LeftArm_C::AttackInput_Action' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, InputActions) == 0x000800, "Member 'UGA_Pathfinder_LeftArm_C::InputActions' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, ChargesToShoot) == 0x000810, "Member 'UGA_Pathfinder_LeftArm_C::ChargesToShoot' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, SingleShotPreDelay) == 0x000818, "Member 'UGA_Pathfinder_LeftArm_C::SingleShotPreDelay' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, IsPressed) == 0x000820, "Member 'UGA_Pathfinder_LeftArm_C::IsPressed' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, OverchargeDuration) == 0x000824, "Member 'UGA_Pathfinder_LeftArm_C::OverchargeDuration' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, SpreadAngle) == 0x000828, "Member 'UGA_Pathfinder_LeftArm_C::SpreadAngle' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, OverchargeEnabled) == 0x00082C, "Member 'UGA_Pathfinder_LeftArm_C::OverchargeEnabled' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LockTag) == 0x000830, "Member 'UGA_Pathfinder_LeftArm_C::LockTag' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, OwningCharacter) == 0x000838, "Member 'UGA_Pathfinder_LeftArm_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, AbilitySystemComponent) == 0x000840, "Member 'UGA_Pathfinder_LeftArm_C::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LockEffectHandle) == 0x000848, "Member 'UGA_Pathfinder_LeftArm_C::LockEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, RemoteEffectHandle) == 0x000850, "Member 'UGA_Pathfinder_LeftArm_C::RemoteEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, GrenadeTMP) == 0x000858, "Member 'UGA_Pathfinder_LeftArm_C::GrenadeTMP' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, Launch_Speed_Min) == 0x000860, "Member 'UGA_Pathfinder_LeftArm_C::Launch_Speed_Min' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, OverchargeTimerHandle) == 0x000868, "Member 'UGA_Pathfinder_LeftArm_C::OverchargeTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LifetimeOnMovementStop) == 0x000870, "Member 'UGA_Pathfinder_LeftArm_C::LifetimeOnMovementStop' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, SecondaryEffectRadius) == 0x000878, "Member 'UGA_Pathfinder_LeftArm_C::SecondaryEffectRadius' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LockEffect) == 0x000880, "Member 'UGA_Pathfinder_LeftArm_C::LockEffect' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, TagCounter) == 0x000888, "Member 'UGA_Pathfinder_LeftArm_C::TagCounter' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, RemoteReady) == 0x00088C, "Member 'UGA_Pathfinder_LeftArm_C::RemoteReady' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, ChargeableSpeed) == 0x00088D, "Member 'UGA_Pathfinder_LeftArm_C::ChargeableSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, RemoteEffect) == 0x000890, "Member 'UGA_Pathfinder_LeftArm_C::RemoteEffect' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, LaunchSpeed) == 0x000898, "Member 'UGA_Pathfinder_LeftArm_C::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Pathfinder_LeftArm_C, EnableMultishot) == 0x0008A0, "Member 'UGA_Pathfinder_LeftArm_C::EnableMultishot' has a wrong offset!");

}

