#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PerfAnalysis

#include "Basic.hpp"

#include "BP_PerfAnalysis_classes.hpp"
#include "BP_PerfAnalysis_parameters.hpp"


namespace SDK
{

// Function BP_PerfAnalysis.BP_PerfAnalysis_C.checkPlayerState
// (BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::CheckPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "checkPlayerState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.ChkplayerTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::ChkplayerTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "ChkplayerTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.clampCameraIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::ClampCameraIndex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "clampCameraIndex");

	Params::BP_PerfAnalysis_C_ClampCameraIndex Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.DoPerfTest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUseCameraList_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::DoPerfTest(bool bUseCameraList_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "DoPerfTest");

	Params::BP_PerfAnalysis_C_DoPerfTest Parms{};

	Parms.bUseCameraList_ = bUseCameraList_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.EndPerfTest
// (BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::EndPerfTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "EndPerfTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.ExecuteUbergraph_BP_PerfAnalysis
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::ExecuteUbergraph_BP_PerfAnalysis(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "ExecuteUbergraph_BP_PerfAnalysis");

	Params::BP_PerfAnalysis_C_ExecuteUbergraph_BP_PerfAnalysis Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.getCMDValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CmdName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           CmdValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::GetCMDValue(const class FString& CmdName, class FString* CmdValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "getCMDValue");

	Params::BP_PerfAnalysis_C_GetCMDValue Parms{};

	Parms.CmdName = std::move(CmdName);

	UObject::ProcessEvent(Func, &Parms);

	if (CmdValue != nullptr)
		*CmdValue = std::move(Parms.CmdValue);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.GetIDFromCamName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           PerfCam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_PerfAnalysis_C::GetIDFromCamName(class AActor* PerfCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "GetIDFromCamName");

	Params::BP_PerfAnalysis_C_GetIDFromCamName Parms{};

	Parms.PerfCam = PerfCam;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_Add_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_Add_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_Add_K2Node_InputKeyEvent_3");

	Params::BP_PerfAnalysis_C_InpActEvt_Add_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_Alt_X_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_Alt_X_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_Alt_X_K2Node_InputKeyEvent_0");

	Params::BP_PerfAnalysis_C_InpActEvt_Alt_X_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_Divide_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_Divide_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_Divide_K2Node_InputKeyEvent_1");

	Params::BP_PerfAnalysis_C_InpActEvt_Divide_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_Multiply_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_Multiply_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_Multiply_K2Node_InputKeyEvent_2");

	Params::BP_PerfAnalysis_C_InpActEvt_Multiply_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_NumPadZero_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_NumPadZero_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_NumPadZero_K2Node_InputKeyEvent_5");

	Params::BP_PerfAnalysis_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.InpActEvt_Subtract_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::InpActEvt_Subtract_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "InpActEvt_Subtract_K2Node_InputKeyEvent_4");

	Params::BP_PerfAnalysis_C_InpActEvt_Subtract_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.makeCamName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::MakeCamName(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "makeCamName");

	Params::BP_PerfAnalysis_C_MakeCamName Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.NextCam
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUseCameraList_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::NextCam(bool bUseCameraList_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "NextCam");

	Params::BP_PerfAnalysis_C_NextCam Parms{};

	Parms.bUseCameraList_ = bUseCameraList_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.PrevCam
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUseCameraList_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::PrevCam(bool bUseCameraList_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "PrevCam");

	Params::BP_PerfAnalysis_C_PrevCam Parms{};

	Parms.bUseCameraList_ = bUseCameraList_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.readCommandParams
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDebugCommand_                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerfAnalysis_C::ReadCommandParams(bool bDebugCommand_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "readCommandParams");

	Params::BP_PerfAnalysis_C_ReadCommandParams Parms{};

	Parms.bDebugCommand_ = bDebugCommand_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PerfAnalysis_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.SetupPerf
// (BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::SetupPerf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "SetupPerf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.sortCamByNum
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>                   OutputPin                                              (Parm, OutParm)

void ABP_PerfAnalysis_C::SortCamByNum(TArray<class AActor*>& Array, TArray<class AActor*>* OutputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "sortCamByNum");

	Params::BP_PerfAnalysis_C_SortCamByNum Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (OutputPin != nullptr)
		*OutputPin = std::move(Parms.OutputPin);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.splitArraysAndSort
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PerfAnalysis_C::SplitArraysAndSort(TArray<class AActor*>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "splitArraysAndSort");

	Params::BP_PerfAnalysis_C_SplitArraysAndSort Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.startAutoTest
// (BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::StartAutoTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "startAutoTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerfAnalysis.BP_PerfAnalysis_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PerfAnalysis_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerfAnalysis_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

