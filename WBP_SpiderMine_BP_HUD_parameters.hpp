#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpiderMine_BP_HUD

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "S_SpiderMine_TextData_structs.hpp"


namespace SDK::Params
{

// Function WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C.ExecuteUbergraph_WBP_SpiderMine_BP_HUD
// 0x0110 (0x0110 - 0x0000)
struct WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B14[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SpiderMine_TextData                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0090)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   K2Node_Event_LimbType_1;                           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B15[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       K2Node_Event_GaugeData;                            // 0x00A0(0x0028)(ConstParm, NoDestructor)
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_SpiderMine_PreviewComponent_C*      K2Node_DynamicCast_AsBP_Spider_Mine_Preview_Component; // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bValid;                         // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B16[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bValid)>                  K2Node_CreateDelegate_OutputDelegate;              // 0x00E8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   K2Node_Event_LimbType;                             // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B17[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00FC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD) == 0x000008, "Wrong alignment on WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD");
static_assert(sizeof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD) == 0x000110, "Wrong size on WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, EntryPoint) == 0x000000, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000098, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_Event_LimbType_1) == 0x000099, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_Event_LimbType_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_Event_GaugeData) == 0x0000A0, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_Event_GaugeData' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x0000C8, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_DynamicCast_AsBP_Spider_Mine_Preview_Component) == 0x0000D0, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_DynamicCast_AsBP_Spider_Mine_Preview_Component' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_SwitchEnum_CmpSuccess) == 0x0000D9, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_CustomEvent_bValid) == 0x0000DA, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_CustomEvent_bValid' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0000DB, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, CallFunc_PlayAnimation_ReturnValue) == 0x0000E0, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_CreateDelegate_OutputDelegate) == 0x0000E8, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_Event_LimbType) == 0x0000F8, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_Event_LimbType' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000FC, "Member 'WBP_SpiderMine_BP_HUD_C_ExecuteUbergraph_WBP_SpiderMine_BP_HUD::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C.OnLimbActivated
// 0x0030 (0x0030 - 0x0000)
struct WBP_SpiderMine_BP_HUD_C_OnLimbActivated final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B18[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       GaugeData;                                         // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WBP_SpiderMine_BP_HUD_C_OnLimbActivated) == 0x000008, "Wrong alignment on WBP_SpiderMine_BP_HUD_C_OnLimbActivated");
static_assert(sizeof(WBP_SpiderMine_BP_HUD_C_OnLimbActivated) == 0x000030, "Wrong size on WBP_SpiderMine_BP_HUD_C_OnLimbActivated");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_OnLimbActivated, LimbType) == 0x000000, "Member 'WBP_SpiderMine_BP_HUD_C_OnLimbActivated::LimbType' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_OnLimbActivated, GaugeData) == 0x000008, "Member 'WBP_SpiderMine_BP_HUD_C_OnLimbActivated::GaugeData' has a wrong offset!");

// Function WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C.OnLimbActivationEnded
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded) == 0x000001, "Wrong alignment on WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded");
static_assert(sizeof(WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded) == 0x000001, "Wrong size on WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded, LimbType) == 0x000000, "Member 'WBP_SpiderMine_BP_HUD_C_OnLimbActivationEnded::LimbType' has a wrong offset!");

// Function WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C.UpdateActiveMines
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_SpiderMine_BP_HUD_C_UpdateActiveMines final
{
public:
	int32                                         Curren;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0060(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0010)()
};
static_assert(alignof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines) == 0x000008, "Wrong alignment on WBP_SpiderMine_BP_HUD_C_UpdateActiveMines");
static_assert(sizeof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines) == 0x0000C8, "Wrong size on WBP_SpiderMine_BP_HUD_C_UpdateActiveMines");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, Curren) == 0x000000, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::Curren' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, Max) == 0x000004, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::Max' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000010, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, K2Node_MakeStruct_FormatArgumentData_1) == 0x000060, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, K2Node_MakeArray_Array) == 0x0000A8, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateActiveMines, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateActiveMines::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_SpiderMine_BP_HUD.WBP_SpiderMine_BP_HUD_C.UpdateValidation
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiderMine_BP_HUD_C_UpdateValidation final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiderMine_BP_HUD_C_UpdateValidation) == 0x000001, "Wrong alignment on WBP_SpiderMine_BP_HUD_C_UpdateValidation");
static_assert(sizeof(WBP_SpiderMine_BP_HUD_C_UpdateValidation) == 0x000001, "Wrong size on WBP_SpiderMine_BP_HUD_C_UpdateValidation");
static_assert(offsetof(WBP_SpiderMine_BP_HUD_C_UpdateValidation, bValid) == 0x000000, "Member 'WBP_SpiderMine_BP_HUD_C_UpdateValidation::bValid' has a wrong offset!");

}

