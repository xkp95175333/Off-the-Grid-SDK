#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUD_SelectedWeaponItem_DOS

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HUD_SelectedWeaponItem_DOS.WBP_HUD_SelectedWeaponItem_DOS_C
// 0x0098 (0x03D8 - 0x0340)
class UWBP_HUD_SelectedWeaponItem_DOS_C final : public UGzHUDComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 ActiveFireMode_Image;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           AmmoMag_GzText;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           AmmoMagZero_GzText;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           AmmoStock_GzText;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 AmmoType_Image;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzActionWidget*                        FireMode_ActionWidget;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 InfiniteAmmo_Image;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        InfiniteAmmo_WidgetSwitcher;                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           WeaponName_GzText;                                 // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateColor                            MagNormalColor;                                    // 0x0390(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            NoBulletsWarningColor;                             // 0x03A4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGzWeaponMode                                 SelectedFireMode;                                  // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B99[0x7];                                     // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGzWeaponFireMode>              AvailableFireModes;                                // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGzInvPocketId                         SelectedPocketId;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_HUD_SelectedWeaponItem_DOS(int32 EntryPoint);
	int32 GetClipAmmoCount();
	void GetCombatComponent(class UGzCombatComponent** Result);
	int32 GetStockAmmoCount();
	void GetWeaponItemData(class UGzWeaponItemData** ItemData);
	void Is_Valid_Weapon(const struct FGzInvPocketId& PocketId, bool* bValid);
	void OnViewTargetChanged(class APawn* ViewTarget);
	void Select_Ammo_Mag_Text_Style(int32 BulletCount);
	void SelectOperableObject(class AGzWeaponActor* WeaponActor);
	void SelectWeaponInPocket(const struct FGzInvPocketId& PocketId);
	void SetAmmoType(class UGzWeaponItemData* WeaponData);
	void SetWeaponName(class UGzItemData* ItemData);
	void Switch_Active_Fire_Mode(const struct FGzWeaponFireMode& CurrentFireMode);
	void Toggle_Keybind_Visibility(class UGzWeaponItemData* Target);
	void UpdateClipAmmoAmount(int32 BulletsCount);
	void UpdateStockAmmoAmount();
	void UpdateWeaponInfo(class UGzWeaponItemData* ItemData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HUD_SelectedWeaponItem_DOS_C">();
	}
	static class UWBP_HUD_SelectedWeaponItem_DOS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HUD_SelectedWeaponItem_DOS_C>();
	}
};
static_assert(alignof(UWBP_HUD_SelectedWeaponItem_DOS_C) == 0x000008, "Wrong alignment on UWBP_HUD_SelectedWeaponItem_DOS_C");
static_assert(sizeof(UWBP_HUD_SelectedWeaponItem_DOS_C) == 0x0003D8, "Wrong size on UWBP_HUD_SelectedWeaponItem_DOS_C");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, UberGraphFrame) == 0x000340, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, ActiveFireMode_Image) == 0x000348, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::ActiveFireMode_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, AmmoMag_GzText) == 0x000350, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::AmmoMag_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, AmmoMagZero_GzText) == 0x000358, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::AmmoMagZero_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, AmmoStock_GzText) == 0x000360, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::AmmoStock_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, AmmoType_Image) == 0x000368, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::AmmoType_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, FireMode_ActionWidget) == 0x000370, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::FireMode_ActionWidget' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, InfiniteAmmo_Image) == 0x000378, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::InfiniteAmmo_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, InfiniteAmmo_WidgetSwitcher) == 0x000380, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::InfiniteAmmo_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, WeaponName_GzText) == 0x000388, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::WeaponName_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, MagNormalColor) == 0x000390, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::MagNormalColor' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, NoBulletsWarningColor) == 0x0003A4, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::NoBulletsWarningColor' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, SelectedFireMode) == 0x0003B8, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::SelectedFireMode' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, AvailableFireModes) == 0x0003C0, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::AvailableFireModes' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_SelectedWeaponItem_DOS_C, SelectedPocketId) == 0x0003D0, "Member 'UWBP_HUD_SelectedWeaponItem_DOS_C::SelectedPocketId' has a wrong offset!");

}

