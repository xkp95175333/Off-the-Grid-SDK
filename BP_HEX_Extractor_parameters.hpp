#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HEX_Extractor

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateWidgets
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_UpdateWidgets final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C85[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C86[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateWidgets) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateWidgets");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateWidgets) == 0x000028, "Wrong size on BP_HEX_Extractor_C_UpdateWidgets");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateWidgets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_HEX_Extractor_C_UpdateWidgets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateWidgets, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateWidgets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdatePauseStateClient
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_UpdatePauseStateClient final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdatePauseStateClient) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UpdatePauseStateClient");
static_assert(sizeof(BP_HEX_Extractor_C_UpdatePauseStateClient) == 0x000002, "Wrong size on BP_HEX_Extractor_C_UpdatePauseStateClient");
static_assert(offsetof(BP_HEX_Extractor_C_UpdatePauseStateClient, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdatePauseStateClient::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdatePauseStateClient, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_UpdatePauseStateClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateOpenedState
// 0x0006 (0x0006 - 0x0000)
struct BP_HEX_Extractor_C_UpdateOpenedState final
{
public:
	bool                                          ThereArePlayers;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNoneState_bNoneState;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateOpenedState) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UpdateOpenedState");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateOpenedState) == 0x000006, "Wrong size on BP_HEX_Extractor_C_UpdateOpenedState");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, ThereArePlayers) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::ThereArePlayers' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, CallFunc_IsNoneState_bNoneState) == 0x000001, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::CallFunc_IsNoneState_bNoneState' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, CallFunc_HasAuthority_ReturnValue) == 0x000002, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, CallFunc_Array_IsEmpty_ReturnValue) == 0x000003, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateOpenedState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000005, "Member 'BP_HEX_Extractor_C_UpdateOpenedState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateMeshDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_UpdateMeshDynamicMaterial final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C87[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C88[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateMeshDynamicMaterial");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial) == 0x000018, "Wrong size on BP_HEX_Extractor_C_UpdateMeshDynamicMaterial");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateMeshDynamicMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_UpdateMeshDynamicMaterial::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateMeshDynamicMaterial::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateMeshDynamicMaterial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateMeshDynamicMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000014, "Member 'BP_HEX_Extractor_C_UpdateMeshDynamicMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateInteractableComponentActiveState
// 0x0004 (0x0004 - 0x0000)
struct BP_HEX_Extractor_C_UpdateInteractableComponentActiveState final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UpdateInteractableComponentActiveState");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState) == 0x000004, "Wrong size on BP_HEX_Extractor_C_UpdateInteractableComponentActiveState");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateInteractableComponentActiveState::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_UpdateInteractableComponentActiveState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_HEX_Extractor_C_UpdateInteractableComponentActiveState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateInteractableComponentActiveState, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_HEX_Extractor_C_UpdateInteractableComponentActiveState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateHexMeshVisibilityFromCurrentHex
// 0x0020 (0x0020 - 0x0000)
struct BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex final
{
public:
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C89[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex) == 0x000020, "Wrong size on BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex, K2Node_DynamicCast_AsGz_Player_Character) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibilityFromCurrentHex::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateHexMeshVisibility
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_UpdateHexMeshVisibility final
{
public:
	class UGzItemData*                            CallFunc_GetCurrentHexItemData_CurrentHexItemData; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            CallFunc_GetCurrentHexItemData_CurrentHexItemData_1; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateHexMeshVisibility) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateHexMeshVisibility");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateHexMeshVisibility) == 0x000018, "Wrong size on BP_HEX_Extractor_C_UpdateHexMeshVisibility");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibility, CallFunc_GetCurrentHexItemData_CurrentHexItemData) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibility::CallFunc_GetCurrentHexItemData_CurrentHexItemData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibility, CallFunc_GetCurrentHexItemData_CurrentHexItemData_1) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibility::CallFunc_GetCurrentHexItemData_CurrentHexItemData_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexMeshVisibility, CallFunc_HasHexInside_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateHexMeshVisibility::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateHexInsideWidgetsState
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_UpdateHexInsideWidgetsState final
{
public:
	class UGzItemData*                            ItemData;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8A[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateHexInsideWidgetsState");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState) == 0x000028, "Wrong size on BP_HEX_Extractor_C_UpdateHexInsideWidgetsState");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, ItemData) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::ItemData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_HasHexInside_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateHexInsideWidgetsState, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_HEX_Extractor_C_UpdateHexInsideWidgetsState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionTimerForUnpausedExtraction
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction) == 0x000001, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForUnpausedExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionTimerForStartedExtraction
// 0x0030 (0x0030 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTotalExtractionTime_NewParam;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction) == 0x000030, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction, CallFunc_GetTotalExtractionTime_NewParam) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction::CallFunc_GetTotalExtractionTime_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000028, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForStartedExtraction::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionTimerForRestoredExtraction
// 0x0030 (0x0030 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetRemainedTimeForExtraction_RemainedTime; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction) == 0x000030, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction, CallFunc_GetRemainedTimeForExtraction_RemainedTime) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction::CallFunc_GetRemainedTimeForExtraction_RemainedTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000028, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForRestoredExtraction::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionTimerForPausedExtraction
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction) == 0x000001, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForPausedExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionTimerForHackedExtraction
// 0x0030 (0x0030 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetRemainedTimeForHackedExtraction_RemainedTime; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction) == 0x000030, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction, CallFunc_GetRemainedTimeForHackedExtraction_RemainedTime) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction::CallFunc_GetRemainedTimeForHackedExtraction_RemainedTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000028, "Member 'BP_HEX_Extractor_C_UpdateExtractionTimerForHackedExtraction::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionStateClient
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionStateClient final
{
public:
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionStateClient) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionStateClient");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionStateClient) == 0x000018, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionStateClient");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionStateClient, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionStateClient::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionStateClient, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_UpdateExtractionStateClient::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionStateClient, CallFunc_IsDedicatedServer_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_UpdateExtractionStateClient::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionStateClient, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_HEX_Extractor_C_UpdateExtractionStateClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateExtractionProgressTime
// 0x0038 (0x0038 - 0x0000)
struct BP_HEX_Extractor_C_UpdateExtractionProgressTime final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetProgressSpeed_NewParam;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C8F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C90[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateExtractionProgressTime) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateExtractionProgressTime");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateExtractionProgressTime) == 0x000038, "Wrong size on BP_HEX_Extractor_C_UpdateExtractionProgressTime");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, DeltaTime) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_GetProgressSpeed_NewParam) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_GetProgressSpeed_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateExtractionProgressTime, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_UpdateExtractionProgressTime::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateDynamicMaterialColor
// 0x0014 (0x0014 - 0x0000)
struct BP_HEX_Extractor_C_UpdateDynamicMaterialColor final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C91[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateDynamicMaterialColor) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_UpdateDynamicMaterialColor");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateDynamicMaterialColor) == 0x000014, "Wrong size on BP_HEX_Extractor_C_UpdateDynamicMaterialColor");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDynamicMaterialColor, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateDynamicMaterialColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDynamicMaterialColor, CallFunc_IsHackingState_Value) == 0x000001, "Member 'BP_HEX_Extractor_C_UpdateDynamicMaterialColor::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDynamicMaterialColor, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_UpdateDynamicMaterialColor::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UpdateDiegeticWidgetExtractionState
// 0x0048 (0x0048 - 0x0000)
struct BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C92[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetProgressSpeed_NewParam;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C93[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState");
static_assert(sizeof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState) == 0x000048, "Wrong size on BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_GetProgressSpeed_NewParam) == 0x000010, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_GetProgressSpeed_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_Less_IntInt_ReturnValue_1) == 0x000041, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState, CallFunc_IsHackingState_Value) == 0x000042, "Member 'BP_HEX_Extractor_C_UpdateDiegeticWidgetExtractionState::CallFunc_IsHackingState_Value' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UnpauseExtraction
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_UnpauseExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UnpauseExtraction) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_UnpauseExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_UnpauseExtraction) == 0x000001, "Wrong size on BP_HEX_Extractor_C_UnpauseExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_UnpauseExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_UnpauseExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.UnbindEventsOnExtractionEnded
// 0x0030 (0x0030 - 0x0000)
struct BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded");
static_assert(sizeof(BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded) == 0x000030, "Wrong size on BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded");
static_assert(offsetof(BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded, K2Node_CreateDelegate_OutputDelegate_2) == 0x000020, "Member 'BP_HEX_Extractor_C_UnbindEventsOnExtractionEnded::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.TrySyncExtractionProgressForHackingState
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState final
{
public:
	double                                        CallFunc_GetProgressSpeed_NewParam;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C94[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentTime_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState");
static_assert(sizeof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState) == 0x000040, "Wrong size on BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_GetProgressSpeed_NewParam) == 0x000000, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_GetProgressSpeed_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000008, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000010, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_IsHackingState_Value) == 0x000019, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_GetCurrentTime_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_GetCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForHackingState::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.TrySyncExtractionProgressForExtractingState
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState final
{
public:
	double                                        CallFunc_GetProgressSpeed_NewParam;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C95[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentTime_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState");
static_assert(sizeof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState) == 0x000040, "Wrong size on BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_GetProgressSpeed_NewParam) == 0x000000, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_GetProgressSpeed_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000008, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_GetServerTimeWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000010, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_IsExtractingState_Value) == 0x000019, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_IsExtractingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_GetCurrentTime_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_GetCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'BP_HEX_Extractor_C_TrySyncExtractionProgressForExtractingState::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.SyncExtractionProgressTimeClient
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_SyncExtractionProgressTimeClient final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_SyncExtractionProgressTimeClient) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_SyncExtractionProgressTimeClient");
static_assert(sizeof(BP_HEX_Extractor_C_SyncExtractionProgressTimeClient) == 0x000002, "Wrong size on BP_HEX_Extractor_C_SyncExtractionProgressTimeClient");
static_assert(offsetof(BP_HEX_Extractor_C_SyncExtractionProgressTimeClient, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_SyncExtractionProgressTimeClient::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SyncExtractionProgressTimeClient, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_SyncExtractionProgressTimeClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.StoreDiegeticWidgetVariables
// 0x0050 (0x0050 - 0x0000)
struct BP_HEX_Extractor_C_StoreDiegeticWidgetVariables final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C96[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetComponent*>               K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C97[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C98[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_HEX_DiegeticWidget_Parent_C*       K2Node_DynamicCast_AsWBP_HEX_Diegetic_Widget_Parent; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C99[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_StoreDiegeticWidgetVariables");
static_assert(sizeof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables) == 0x000050, "Wrong size on BP_HEX_Extractor_C_StoreDiegeticWidgetVariables");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_GetWidget_ReturnValue) == 0x000038, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, K2Node_DynamicCast_AsWBP_HEX_Diegetic_Widget_Parent) == 0x000040, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::K2Node_DynamicCast_AsWBP_HEX_Diegetic_Widget_Parent' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StoreDiegeticWidgetVariables, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'BP_HEX_Extractor_C_StoreDiegeticWidgetVariables::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.StopScreenSound
// 0x0008 (0x0008 - 0x0000)
struct BP_HEX_Extractor_C_StopScreenSound final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExecuteAction_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_StopScreenSound) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_StopScreenSound");
static_assert(sizeof(BP_HEX_Extractor_C_StopScreenSound) == 0x000008, "Wrong size on BP_HEX_Extractor_C_StopScreenSound");
static_assert(offsetof(BP_HEX_Extractor_C_StopScreenSound, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_StopScreenSound::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StopScreenSound, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_StopScreenSound::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StopScreenSound, CallFunc_ExecuteAction_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_StopScreenSound::CallFunc_ExecuteAction_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.StopFeedback
// 0x000C (0x000C - 0x0000)
struct BP_HEX_Extractor_C_StopFeedback final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExecuteAction_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_StopFeedback) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_StopFeedback");
static_assert(sizeof(BP_HEX_Extractor_C_StopFeedback) == 0x00000C, "Wrong size on BP_HEX_Extractor_C_StopFeedback");
static_assert(offsetof(BP_HEX_Extractor_C_StopFeedback, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_StopFeedback::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StopFeedback, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_StopFeedback::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StopFeedback, CallFunc_ExecuteAction_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_StopFeedback::CallFunc_ExecuteAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StopFeedback, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_StopFeedback::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.StartHexInsertionAnimation
// 0x00D8 (0x00D8 - 0x0000)
struct BP_HEX_Extractor_C_StartHexInsertionAnimation final
{
public:
	class AActor*                                 InteractedBy;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGzInteractableComponent*         Interactable;                                      // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* InteractedBy, class UGzInteractableComponent* Interactable)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0028(0x00B0)()
};
static_assert(alignof(BP_HEX_Extractor_C_StartHexInsertionAnimation) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_StartHexInsertionAnimation");
static_assert(sizeof(BP_HEX_Extractor_C_StartHexInsertionAnimation) == 0x0000D8, "Wrong size on BP_HEX_Extractor_C_StartHexInsertionAnimation");
static_assert(offsetof(BP_HEX_Extractor_C_StartHexInsertionAnimation, InteractedBy) == 0x000000, "Member 'BP_HEX_Extractor_C_StartHexInsertionAnimation::InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartHexInsertionAnimation, Interactable) == 0x000008, "Member 'BP_HEX_Extractor_C_StartHexInsertionAnimation::Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartHexInsertionAnimation, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_StartHexInsertionAnimation::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartHexInsertionAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_HEX_Extractor_C_StartHexInsertionAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartHexInsertionAnimation, K2Node_MakeStruct_GameplayEventData) == 0x000028, "Member 'BP_HEX_Extractor_C_StartHexInsertionAnimation::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.StartExtraction
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_StartExtraction final
{
public:
	class AGzPlayerState*                         ExtractingPlayer;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            Hex;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSelectedItem_bHasItem;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzHexExtractionSettings               CallFunc_GetHexExtractionSetting_ReturnValue;      // 0x0014(0x0008)(NoDestructor)
	float                                         CallFunc_GetHexExtractionTimeMultiplier_ReturnValue; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_StartItemExtraction_ExtractTime_ImplicitCast; // 0x0038(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_StartExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_StartExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_StartExtraction) == 0x000040, "Wrong size on BP_HEX_Extractor_C_StartExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, ExtractingPlayer) == 0x000000, "Member 'BP_HEX_Extractor_C_StartExtraction::ExtractingPlayer' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, Hex) == 0x000008, "Member 'BP_HEX_Extractor_C_StartExtraction::Hex' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_HasSelectedItem_bHasItem) == 0x000010, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_HasSelectedItem_bHasItem' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_GetHexExtractionSetting_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_GetHexExtractionSetting_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_GetHexExtractionTimeMultiplier_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_GetHexExtractionTimeMultiplier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000030, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_StartExtraction, CallFunc_StartItemExtraction_ExtractTime_ImplicitCast) == 0x000038, "Member 'BP_HEX_Extractor_C_StartExtraction::CallFunc_StartItemExtraction_ExtractTime_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.Show3DWidgets
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_Show3DWidgets final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Delay;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_Show3DWidgets) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_Show3DWidgets");
static_assert(sizeof(BP_HEX_Extractor_C_Show3DWidgets) == 0x000010, "Wrong size on BP_HEX_Extractor_C_Show3DWidgets");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidgets, bShow) == 0x000000, "Member 'BP_HEX_Extractor_C_Show3DWidgets::bShow' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidgets, Delay) == 0x000008, "Member 'BP_HEX_Extractor_C_Show3DWidgets::Delay' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.Show3DWidget
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_Show3DWidget final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzWidgetComponent*                     Widget;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_Show3DWidget) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_Show3DWidget");
static_assert(sizeof(BP_HEX_Extractor_C_Show3DWidget) == 0x000028, "Wrong size on BP_HEX_Extractor_C_Show3DWidget");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, bShow) == 0x000000, "Member 'BP_HEX_Extractor_C_Show3DWidget::bShow' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, Widget) == 0x000008, "Member 'BP_HEX_Extractor_C_Show3DWidget::Widget' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, Temp_byte_Variable) == 0x000010, "Member 'BP_HEX_Extractor_C_Show3DWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, CallFunc_GetWidget_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_Show3DWidget::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_Show3DWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, Temp_byte_Variable_1) == 0x000021, "Member 'BP_HEX_Extractor_C_Show3DWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, CallFunc_IsDedicatedServer_ReturnValue) == 0x000022, "Member 'BP_HEX_Extractor_C_Show3DWidget::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, Temp_bool_Variable) == 0x000023, "Member 'BP_HEX_Extractor_C_Show3DWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'BP_HEX_Extractor_C_Show3DWidget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_Show3DWidget, K2Node_Select_Default) == 0x000025, "Member 'BP_HEX_Extractor_C_Show3DWidget::K2Node_Select_Default' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.SetupState
// 0x0070 (0x0070 - 0x0000)
struct BP_HEX_Extractor_C_SetupState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerExtracting_Value;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            CallFunc_GetCurrentHexItemData_CurrentHexItemData; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            CallFunc_GetCurrentHexItemData_CurrentHexItemData_1; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA1[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA2[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_SetupState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_SetupState");
static_assert(sizeof(BP_HEX_Extractor_C_SetupState) == 0x000070, "Wrong size on BP_HEX_Extractor_C_SetupState");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_SetupState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_HEX_Extractor_C_SetupState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_HEX_Extractor_C_SetupState::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_HEX_Extractor_C_SetupState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_IsLocalPlayerExtracting_Value) == 0x000028, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_IsLocalPlayerExtracting_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_GetCurrentHexItemData_CurrentHexItemData) == 0x000030, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_GetCurrentHexItemData_CurrentHexItemData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_GetCurrentHexItemData_CurrentHexItemData_1) == 0x000038, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_GetCurrentHexItemData_CurrentHexItemData_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'BP_HEX_Extractor_C_SetupState::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_Less_IntInt_ReturnValue_1) == 0x000069, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_IsHackingState_Value) == 0x00006A, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetupState, CallFunc_IsExtractingState_Value) == 0x00006B, "Member 'BP_HEX_Extractor_C_SetupState::CallFunc_IsExtractingState_Value' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.SetUnpausedState
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_SetUnpausedState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA3[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_SetUnpausedState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_SetUnpausedState");
static_assert(sizeof(BP_HEX_Extractor_C_SetUnpausedState) == 0x000028, "Wrong size on BP_HEX_Extractor_C_SetUnpausedState");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_SetUnpausedState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_HEX_Extractor_C_SetUnpausedState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_IsHackingState_Value) == 0x00000D, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetUnpausedState, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_SetUnpausedState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.SetPausedState
// 0x0020 (0x0020 - 0x0000)
struct BP_HEX_Extractor_C_SetPausedState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA5[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_DiegeticWidget_Parent_C*       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_SetPausedState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_SetPausedState");
static_assert(sizeof(BP_HEX_Extractor_C_SetPausedState) == 0x000020, "Wrong size on BP_HEX_Extractor_C_SetPausedState");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_SetPausedState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_HEX_Extractor_C_SetPausedState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_IsValid_ReturnValue) == 0x00000E, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_SetPausedState, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_SetPausedState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.RestoreItemExtraction
// 0x0014 (0x0014 - 0x0000)
struct BP_HEX_Extractor_C_RestoreItemExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_RestoreItemExtraction) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_RestoreItemExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_RestoreItemExtraction) == 0x000014, "Wrong size on BP_HEX_Extractor_C_RestoreItemExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_RestoreItemExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_RestoreItemExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_RestoreItemExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_RestoreItemExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ReceiveZoneOverloadSwitched
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched final
{
public:
	bool                                          bInOverloadZone;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched");
static_assert(sizeof(BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched) == 0x000001, "Wrong size on BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched");
static_assert(offsetof(BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched, bInOverloadZone) == 0x000000, "Member 'BP_HEX_Extractor_C_ReceiveZoneOverloadSwitched::bInOverloadZone' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_HEX_Extractor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_ReceiveTick");
static_assert(sizeof(BP_HEX_Extractor_C_ReceiveTick) == 0x000004, "Wrong size on BP_HEX_Extractor_C_ReceiveTick");
static_assert(offsetof(BP_HEX_Extractor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_HEX_Extractor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_ReceiveEndPlay");
static_assert(sizeof(BP_HEX_Extractor_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_HEX_Extractor_C_ReceiveEndPlay");
static_assert(offsetof(BP_HEX_Extractor_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_HEX_Extractor_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ReceiveActiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_ReceiveActiveStateChanged final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ReceiveActiveStateChanged) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_ReceiveActiveStateChanged");
static_assert(sizeof(BP_HEX_Extractor_C_ReceiveActiveStateChanged) == 0x000001, "Wrong size on BP_HEX_Extractor_C_ReceiveActiveStateChanged");
static_assert(offsetof(BP_HEX_Extractor_C_ReceiveActiveStateChanged, bNewActive) == 0x000000, "Member 'BP_HEX_Extractor_C_ReceiveActiveStateChanged::bNewActive' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ProcessUserInputBasedInteraction
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_ProcessUserInputBasedInteraction final
{
public:
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue;    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ProcessUserInputBasedInteraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ProcessUserInputBasedInteraction");
static_assert(sizeof(BP_HEX_Extractor_C_ProcessUserInputBasedInteraction) == 0x000018, "Wrong size on BP_HEX_Extractor_C_ProcessUserInputBasedInteraction");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessUserInputBasedInteraction, CallFunc_GetPlayerStateFromContext_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_ProcessUserInputBasedInteraction::CallFunc_GetPlayerStateFromContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessUserInputBasedInteraction, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_ProcessUserInputBasedInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessUserInputBasedInteraction, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_ProcessUserInputBasedInteraction::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ProcessInteractionForLocalPlayer
// 0x0048 (0x0048 - 0x0000)
struct BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer final
{
public:
	class UGzInteractableComponent*               Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA8[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAA[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue;    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer");
static_assert(sizeof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer) == 0x000048, "Wrong size on BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, Interactable) == 0x000000, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, CallFunc_MatchesTag_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, CallFunc_MatchesTag_ReturnValue_1) == 0x000009, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::CallFunc_MatchesTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, K2Node_DynamicCast_AsGz_Player_Character) == 0x000020, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, CallFunc_GetPlayerStateFromContext_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::CallFunc_GetPlayerStateFromContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000040, "Member 'BP_HEX_Extractor_C_ProcessInteractionForLocalPlayer::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ProcessInteractionForAuthority
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_ProcessInteractionForAuthority final
{
public:
	class UGzInteractableComponent*               Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAB[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendlyExtraction_Result;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_1;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAC[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ProcessInteractionForAuthority) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ProcessInteractionForAuthority");
static_assert(sizeof(BP_HEX_Extractor_C_ProcessInteractionForAuthority) == 0x000040, "Wrong size on BP_HEX_Extractor_C_ProcessInteractionForAuthority");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, Interactable) == 0x000000, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_MatchesTag_ReturnValue) == 0x000009, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_GetPlayerStateFromContext_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_GetPlayerStateFromContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_GetPlayerId_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_IsFriendlyExtraction_Result) == 0x00001C, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_IsFriendlyExtraction_Result' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_MatchesTag_ReturnValue_1) == 0x00001D, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_MatchesTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000030, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_HasHexInside_ReturnValue) == 0x000039, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessInteractionForAuthority, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'BP_HEX_Extractor_C_ProcessInteractionForAuthority::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ProcessAutoInsertInteraction
// 0x0058 (0x0058 - 0x0000)
struct BP_HEX_Extractor_C_ProcessAutoInsertInteraction final
{
public:
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0000(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	class UGzInvComponent*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGzInvItem>                     CallFunc_GetItemsByItemType_ReturnValue;           // 0x0010(0x0010)(ReferenceParm)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAD[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAE[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzInvComponent*                        CallFunc_GetViewTargetInventory_ReturnValue;       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ProcessAutoInsertInteraction");
static_assert(sizeof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction) == 0x000058, "Wrong size on BP_HEX_Extractor_C_ProcessAutoInsertInteraction");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, Temp_struct_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, Temp_object_Variable) == 0x000008, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, CallFunc_GetItemsByItemType_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::CallFunc_GetItemsByItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, K2Node_DynamicCast_AsGz_Player_Character) == 0x000020, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, CallFunc_GetItemData_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::CallFunc_GetItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, K2Node_DynamicCast_AsGz_Player_View_Target_Interface) == 0x000038, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::K2Node_DynamicCast_AsGz_Player_View_Target_Interface' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ProcessAutoInsertInteraction, CallFunc_GetViewTargetInventory_ReturnValue) == 0x000050, "Member 'BP_HEX_Extractor_C_ProcessAutoInsertInteraction::CallFunc_GetViewTargetInventory_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PrepareUpdateExtractionStateClient
// 0x0014 (0x0014 - 0x0000)
struct BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractionPaused_bPaused;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient");
static_assert(sizeof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient) == 0x000014, "Wrong size on BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient, CallFunc_IsExtractionPaused_bPaused) == 0x000010, "Member 'BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient::CallFunc_IsExtractionPaused_bPaused' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient, CallFunc_IsDedicatedServer_ReturnValue) == 0x000011, "Member 'BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_HEX_Extractor_C_PrepareUpdateExtractionStateClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PrepareRestoreItemExtraction
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_PrepareRestoreItemExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractionPaused_bPaused;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_PrepareRestoreItemExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction) == 0x000028, "Wrong size on BP_HEX_Extractor_C_PrepareRestoreItemExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_PrepareRestoreItemExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_PrepareRestoreItemExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_HEX_Extractor_C_PrepareRestoreItemExtraction::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareRestoreItemExtraction, CallFunc_IsExtractionPaused_bPaused) == 0x000024, "Member 'BP_HEX_Extractor_C_PrepareRestoreItemExtraction::CallFunc_IsExtractionPaused_bPaused' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PrepareHackItemExtraction
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_PrepareHackItemExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractionPaused_bPaused;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PrepareHackItemExtraction) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_PrepareHackItemExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_PrepareHackItemExtraction) == 0x000028, "Wrong size on BP_HEX_Extractor_C_PrepareHackItemExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareHackItemExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_PrepareHackItemExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareHackItemExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_PrepareHackItemExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareHackItemExtraction, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_HEX_Extractor_C_PrepareHackItemExtraction::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PrepareHackItemExtraction, CallFunc_IsExtractionPaused_bPaused) == 0x000024, "Member 'BP_HEX_Extractor_C_PrepareHackItemExtraction::CallFunc_IsExtractionPaused_bPaused' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PlayScreenSound
// 0x001C (0x001C - 0x0000)
struct BP_HEX_Extractor_C_PlayScreenSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB1[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PlayScreenSound) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_PlayScreenSound");
static_assert(sizeof(BP_HEX_Extractor_C_PlayScreenSound) == 0x00001C, "Wrong size on BP_HEX_Extractor_C_PlayScreenSound");
static_assert(offsetof(BP_HEX_Extractor_C_PlayScreenSound, Temp_delegate_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_PlayScreenSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayScreenSound, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_PlayScreenSound::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayScreenSound, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_PlayScreenSound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayScreenSound, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_PlayScreenSound::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PlayFeedback
// 0x001C (0x001C - 0x0000)
struct BP_HEX_Extractor_C_PlayFeedback final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB2[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PlayFeedback) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_PlayFeedback");
static_assert(sizeof(BP_HEX_Extractor_C_PlayFeedback) == 0x00001C, "Wrong size on BP_HEX_Extractor_C_PlayFeedback");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, Temp_delegate_Variable) == 0x000000, "Member 'BP_HEX_Extractor_C_PlayFeedback::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_PlayFeedback::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, CallFunc_IsDedicatedServer_ReturnValue) == 0x000011, "Member 'BP_HEX_Extractor_C_PlayFeedback::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_HEX_Extractor_C_PlayFeedback::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_PlayFeedback::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_PlayFeedback, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_PlayFeedback::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.PauseExtraction
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_PauseExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_PauseExtraction) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_PauseExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_PauseExtraction) == 0x000001, "Wrong size on BP_HEX_Extractor_C_PauseExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_PauseExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_PauseExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.OnStartItemExtraction
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_OnStartItemExtraction final
{
public:
	class AGzPlayerState*                         Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            ItemData;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_OnStartItemExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_OnStartItemExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_OnStartItemExtraction) == 0x000010, "Wrong size on BP_HEX_Extractor_C_OnStartItemExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_OnStartItemExtraction, Player) == 0x000000, "Member 'BP_HEX_Extractor_C_OnStartItemExtraction::Player' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnStartItemExtraction, ItemData) == 0x000008, "Member 'BP_HEX_Extractor_C_OnStartItemExtraction::ItemData' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.OnRep_bTerminalOpened
// 0x0038 (0x0038 - 0x0000)
struct BP_HEX_Extractor_C_OnRep_bTerminalOpened final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_OnRep_bTerminalOpened) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_OnRep_bTerminalOpened");
static_assert(sizeof(BP_HEX_Extractor_C_OnRep_bTerminalOpened) == 0x000038, "Wrong size on BP_HEX_Extractor_C_OnRep_bTerminalOpened");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnRep_bTerminalOpened, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000030, "Member 'BP_HEX_Extractor_C_OnRep_bTerminalOpened::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.OnInteractionCanceled
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_OnInteractionCanceled final
{
public:
	class AActor*                                 InteractedBy;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGzInteractableComponent*         Interactable;                                      // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HEX_Menu_C*                        K2Node_DynamicCast_AsWBP_HEX_Menu;                 // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_OnInteractionCanceled) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_OnInteractionCanceled");
static_assert(sizeof(BP_HEX_Extractor_C_OnInteractionCanceled) == 0x000040, "Wrong size on BP_HEX_Extractor_C_OnInteractionCanceled");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, InteractedBy) == 0x000000, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, Interactable) == 0x000008, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, K2Node_DynamicCast_AsGz_Player_Character) == 0x000020, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, K2Node_DynamicCast_AsWBP_HEX_Menu) == 0x000030, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::K2Node_DynamicCast_AsWBP_HEX_Menu' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnInteractionCanceled, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_HEX_Extractor_C_OnInteractionCanceled::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.OnHexConfirmed
// 0x0038 (0x0038 - 0x0000)
struct BP_HEX_Extractor_C_OnHexConfirmed final
{
public:
	class UGzItemData*                            Hex;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB6[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGzItemData* HexData)>   K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB7[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* InteractedBy, class UGzInteractableComponent* Interactable)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInteractionCapturedBy_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_OnHexConfirmed) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_OnHexConfirmed");
static_assert(sizeof(BP_HEX_Extractor_C_OnHexConfirmed) == 0x000038, "Wrong size on BP_HEX_Extractor_C_OnHexConfirmed");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, Hex) == 0x000000, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::Hex' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, CallFunc_HasHexInside_ReturnValue) == 0x000009, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, CallFunc_IsValid_ReturnValue_1) == 0x00001D, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnHexConfirmed, CallFunc_IsInteractionCapturedBy_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_OnHexConfirmed::CallFunc_IsInteractionCapturedBy_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.OnExtractorMenuWidgetCreated
// 0x0050 (0x0050 - 0x0000)
struct BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated final
{
public:
	class UGzNavigationWidget*                    NavigationWidget;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleRoyalePlayerController_C*     LocalPlayerController;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzHexExtractorMenu*                    K2Node_DynamicCast_AsGz_Hex_Extractor_Menu;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UGzItemData* HexData)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated");
static_assert(sizeof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated) == 0x000050, "Wrong size on BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, NavigationWidget) == 0x000000, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::NavigationWidget' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, LocalPlayerController) == 0x000008, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::LocalPlayerController' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, Temp_delegate_Variable) == 0x000010, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, K2Node_DynamicCast_AsGz_Hex_Extractor_Menu) == 0x000020, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::K2Node_DynamicCast_AsGz_Hex_Extractor_Menu' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, K2Node_CreateDelegate_OutputDelegate) == 0x00002C, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, CallFunc_PostEvent_ReturnValue) == 0x00003C, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'BP_HEX_Extractor_C_OnExtractorMenuWidgetCreated::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsNoneState
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_IsNoneState final
{
public:
	bool                                          bNoneState;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsNoneState) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_IsNoneState");
static_assert(sizeof(BP_HEX_Extractor_C_IsNoneState) == 0x000002, "Wrong size on BP_HEX_Extractor_C_IsNoneState");
static_assert(offsetof(BP_HEX_Extractor_C_IsNoneState, bNoneState) == 0x000000, "Member 'BP_HEX_Extractor_C_IsNoneState::bNoneState' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsNoneState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_IsNoneState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsLocalPlayerExtracting
// 0x0020 (0x0020 - 0x0000)
struct BP_HEX_Extractor_C_IsLocalPlayerExtracting final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleRoyalePlayerController_C*     K2Node_DynamicCast_AsBP_Battle_Royale_Player_Controller; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsLocalPlayerExtracting) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_IsLocalPlayerExtracting");
static_assert(sizeof(BP_HEX_Extractor_C_IsLocalPlayerExtracting) == 0x000020, "Wrong size on BP_HEX_Extractor_C_IsLocalPlayerExtracting");
static_assert(offsetof(BP_HEX_Extractor_C_IsLocalPlayerExtracting, Value) == 0x000000, "Member 'BP_HEX_Extractor_C_IsLocalPlayerExtracting::Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsLocalPlayerExtracting, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_IsLocalPlayerExtracting::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsLocalPlayerExtracting, K2Node_DynamicCast_AsBP_Battle_Royale_Player_Controller) == 0x000010, "Member 'BP_HEX_Extractor_C_IsLocalPlayerExtracting::K2Node_DynamicCast_AsBP_Battle_Royale_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsLocalPlayerExtracting, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_HEX_Extractor_C_IsLocalPlayerExtracting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsLocalPlayerExtracting, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000019, "Member 'BP_HEX_Extractor_C_IsLocalPlayerExtracting::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsHackingInteraction
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_IsHackingInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBA[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsATeammate_bTeammate;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsHackingInteraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_IsHackingInteraction");
static_assert(sizeof(BP_HEX_Extractor_C_IsHackingInteraction) == 0x000018, "Wrong size on BP_HEX_Extractor_C_IsHackingInteraction");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, CallFunc_HasHexInside_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, CallFunc_IsATeammate_bTeammate) == 0x000010, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::CallFunc_IsATeammate_bTeammate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingInteraction, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_HEX_Extractor_C_IsHackingInteraction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsExtractionPaused
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_IsExtractionPaused final
{
public:
	bool                                          bPaused;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsExtractionPaused) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_IsExtractionPaused");
static_assert(sizeof(BP_HEX_Extractor_C_IsExtractionPaused) == 0x000001, "Wrong size on BP_HEX_Extractor_C_IsExtractionPaused");
static_assert(offsetof(BP_HEX_Extractor_C_IsExtractionPaused, bPaused) == 0x000000, "Member 'BP_HEX_Extractor_C_IsExtractionPaused::bPaused' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.InitGameModeSettings
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_InitGameModeSettings final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzGameState*                           K2Node_DynamicCast_AsGz_Game_State;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzSessionGameModeSettings*             K2Node_DynamicCast_AsGz_Session_Game_Mode_Settings; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_InitGameModeSettings) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_InitGameModeSettings");
static_assert(sizeof(BP_HEX_Extractor_C_InitGameModeSettings) == 0x000028, "Wrong size on BP_HEX_Extractor_C_InitGameModeSettings");
static_assert(offsetof(BP_HEX_Extractor_C_InitGameModeSettings, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_InitGameModeSettings::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitGameModeSettings, K2Node_DynamicCast_AsGz_Game_State) == 0x000008, "Member 'BP_HEX_Extractor_C_InitGameModeSettings::K2Node_DynamicCast_AsGz_Game_State' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitGameModeSettings, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_HEX_Extractor_C_InitGameModeSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitGameModeSettings, K2Node_DynamicCast_AsGz_Session_Game_Mode_Settings) == 0x000018, "Member 'BP_HEX_Extractor_C_InitGameModeSettings::K2Node_DynamicCast_AsGz_Session_Game_Mode_Settings' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitGameModeSettings, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BP_HEX_Extractor_C_InitGameModeSettings::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.InitBindings
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_InitBindings final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* InteractedBy, class UGzInteractableComponent* Interactable)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_InitBindings) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_InitBindings");
static_assert(sizeof(BP_HEX_Extractor_C_InitBindings) == 0x000018, "Wrong size on BP_HEX_Extractor_C_InitBindings");
static_assert(offsetof(BP_HEX_Extractor_C_InitBindings, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_InitBindings::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_InitBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_InitBindings, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_HEX_Extractor_C_InitBindings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.HasSelectedItem
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_HasSelectedItem final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            ItemData;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasItem;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPawn_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           K2Node_DynamicCast_AsGz_Character;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBE[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzInvComponent*                        CallFunc_GetInventoryComponent_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItemWithData_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_HasSelectedItem) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_HasSelectedItem");
static_assert(sizeof(BP_HEX_Extractor_C_HasSelectedItem) == 0x000040, "Wrong size on BP_HEX_Extractor_C_HasSelectedItem");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, PlayerState) == 0x000000, "Member 'BP_HEX_Extractor_C_HasSelectedItem::PlayerState' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, ItemData) == 0x000008, "Member 'BP_HEX_Extractor_C_HasSelectedItem::ItemData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, bHasItem) == 0x000010, "Member 'BP_HEX_Extractor_C_HasSelectedItem::bHasItem' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, CallFunc_GetPawn_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_HasSelectedItem::CallFunc_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, K2Node_DynamicCast_AsGz_Character) == 0x000020, "Member 'BP_HEX_Extractor_C_HasSelectedItem::K2Node_DynamicCast_AsGz_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_HEX_Extractor_C_HasSelectedItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, CallFunc_GetInventoryComponent_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_HasSelectedItem::CallFunc_GetInventoryComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, CallFunc_HasItemWithData_ReturnValue) == 0x000038, "Member 'BP_HEX_Extractor_C_HasSelectedItem::CallFunc_HasItemWithData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HasSelectedItem, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_HEX_Extractor_C_HasSelectedItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.HandleInteraction
// 0x0018 (0x0018 - 0x0000)
struct BP_HEX_Extractor_C_HandleInteraction final
{
public:
	class AActor*                                 InteractedBy;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzInteractableComponent*               Interactable;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_HandleInteraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_HandleInteraction");
static_assert(sizeof(BP_HEX_Extractor_C_HandleInteraction) == 0x000018, "Wrong size on BP_HEX_Extractor_C_HandleInteraction");
static_assert(offsetof(BP_HEX_Extractor_C_HandleInteraction, InteractedBy) == 0x000000, "Member 'BP_HEX_Extractor_C_HandleInteraction::InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HandleInteraction, Interactable) == 0x000008, "Member 'BP_HEX_Extractor_C_HandleInteraction::Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HandleInteraction, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_HandleInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HandleInteraction, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_HEX_Extractor_C_HandleInteraction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HandleInteraction, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_HEX_Extractor_C_HandleInteraction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.HackItemExtraction
// 0x0014 (0x0014 - 0x0000)
struct BP_HEX_Extractor_C_HackItemExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CBF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_HackItemExtraction) == 0x000004, "Wrong alignment on BP_HEX_Extractor_C_HackItemExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_HackItemExtraction) == 0x000014, "Wrong size on BP_HEX_Extractor_C_HackItemExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_HackItemExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_HackItemExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_HackItemExtraction, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_HEX_Extractor_C_HackItemExtraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetTotalExtractionTime
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_GetTotalExtractionTime final
{
public:
	double                                        NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_NewParam_ImplicitCast;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetTotalExtractionTime) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetTotalExtractionTime");
static_assert(sizeof(BP_HEX_Extractor_C_GetTotalExtractionTime) == 0x000010, "Wrong size on BP_HEX_Extractor_C_GetTotalExtractionTime");
static_assert(offsetof(BP_HEX_Extractor_C_GetTotalExtractionTime, NewParam) == 0x000000, "Member 'BP_HEX_Extractor_C_GetTotalExtractionTime::NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetTotalExtractionTime, K2Node_FunctionResult_NewParam_ImplicitCast) == 0x000008, "Member 'BP_HEX_Extractor_C_GetTotalExtractionTime::K2Node_FunctionResult_NewParam_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetServerTimeWhenStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_GetServerTimeWhenStateChanged final
{
public:
	double                                        ExtractionProgressWhenStateChanged;                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetServerTimeWhenStateChanged) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetServerTimeWhenStateChanged");
static_assert(sizeof(BP_HEX_Extractor_C_GetServerTimeWhenStateChanged) == 0x000010, "Wrong size on BP_HEX_Extractor_C_GetServerTimeWhenStateChanged");
static_assert(offsetof(BP_HEX_Extractor_C_GetServerTimeWhenStateChanged, ExtractionProgressWhenStateChanged) == 0x000000, "Member 'BP_HEX_Extractor_C_GetServerTimeWhenStateChanged::ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetServerTimeWhenStateChanged, K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast) == 0x000008, "Member 'BP_HEX_Extractor_C_GetServerTimeWhenStateChanged::K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetRemainedTimeForHackedExtraction
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction final
{
public:
	double                                        RemainedTime;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTotalExtractionTime_NewParam;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetRemainedTimeForExtraction_RemainedTime; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction) == 0x000028, "Wrong size on BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction, RemainedTime) == 0x000000, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction::RemainedTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction, CallFunc_GetTotalExtractionTime_NewParam) == 0x000008, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction::CallFunc_GetTotalExtractionTime_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction, CallFunc_GetRemainedTimeForExtraction_RemainedTime) == 0x000010, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction::CallFunc_GetRemainedTimeForExtraction_RemainedTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForHackedExtraction::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetRemainedTimeForExtraction
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_GetRemainedTimeForExtraction final
{
public:
	double                                        RemainedTime;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTotalExtractionTime_NewParam;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHexExtractionTimeMultiplier_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC0[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetRemainedTimeForExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction) == 0x000040, "Wrong size on BP_HEX_Extractor_C_GetRemainedTimeForExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, RemainedTime) == 0x000000, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::RemainedTime' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000008, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_GetTotalExtractionTime_NewParam) == 0x000010, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_GetTotalExtractionTime_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_GetHexExtractionTimeMultiplier_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_GetHexExtractionTimeMultiplier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetRemainedTimeForExtraction, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000038, "Member 'BP_HEX_Extractor_C_GetRemainedTimeForExtraction::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetProgressSpeed
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_GetProgressSpeed final
{
public:
	double                                        NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_NewParam_ImplicitCast;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetProgressSpeed) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetProgressSpeed");
static_assert(sizeof(BP_HEX_Extractor_C_GetProgressSpeed) == 0x000010, "Wrong size on BP_HEX_Extractor_C_GetProgressSpeed");
static_assert(offsetof(BP_HEX_Extractor_C_GetProgressSpeed, NewParam) == 0x000000, "Member 'BP_HEX_Extractor_C_GetProgressSpeed::NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetProgressSpeed, K2Node_FunctionResult_NewParam_ImplicitCast) == 0x000008, "Member 'BP_HEX_Extractor_C_GetProgressSpeed::K2Node_FunctionResult_NewParam_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetExtractionProgressWhenStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged final
{
public:
	double                                        ExtractionProgressWhenStateChanged;                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged");
static_assert(sizeof(BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged) == 0x000010, "Wrong size on BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged");
static_assert(offsetof(BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged, ExtractionProgressWhenStateChanged) == 0x000000, "Member 'BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged::ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged, K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast) == 0x000008, "Member 'BP_HEX_Extractor_C_GetExtractionProgressWhenStateChanged::K2Node_FunctionResult_ExtractionProgressWhenStateChanged_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetCurrentHexItemData
// 0x0008 (0x0008 - 0x0000)
struct BP_HEX_Extractor_C_GetCurrentHexItemData final
{
public:
	class UGzItemData*                            CurrentHexItemData;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetCurrentHexItemData) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetCurrentHexItemData");
static_assert(sizeof(BP_HEX_Extractor_C_GetCurrentHexItemData) == 0x000008, "Wrong size on BP_HEX_Extractor_C_GetCurrentHexItemData");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentHexItemData, CurrentHexItemData) == 0x000000, "Member 'BP_HEX_Extractor_C_GetCurrentHexItemData::CurrentHexItemData' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ExecuteUbergraph_BP_HEX_Extractor
// 0x01B8 (0x01B8 - 0x0000)
struct BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC1[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         K2Node_Event_Player;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            K2Node_Event_ItemData;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC2[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bShow;                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Delay;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC4[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC5[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractionPaused_bPaused;               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC6[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC7[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0088(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_ComponentBoundEvent_InteractedBy;           // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGzInteractableComponent*         K2Node_ComponentBoundEvent_Interactable;           // 0x0188(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character_1;        // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC8[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInOverloadZone;                      // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewActive;                           // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateExtractionProgressTime_DeltaTime_ImplicitCast; // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor");
static_assert(sizeof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor) == 0x0001B8, "Wrong size on BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, EntryPoint) == 0x000000, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_Player) == 0x000008, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_ItemData) == 0x000010, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_ItemData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_HasAuthority_ReturnValue_1) == 0x000019, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_CustomEvent_bShow) == 0x000020, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_CustomEvent_bShow' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_CustomEvent_Delay) == 0x000028, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_CustomEvent_Delay' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_IsDedicatedServer_ReturnValue) == 0x000030, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000038, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherActor) == 0x000040, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherComp) == 0x000048, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000050, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Not_PreBool_ReturnValue) == 0x000054, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_DynamicCast_AsGz_Player_Character) == 0x000058, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Array_RemoveItem_ReturnValue) == 0x000061, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_IsExtractionPaused_bPaused) == 0x000062, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_IsExtractionPaused_bPaused' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000063, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_BooleanAND_ReturnValue) == 0x000064, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000068, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000070, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000078, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000080, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_bFromSweep) == 0x000084, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_SweepResult) == 0x000088, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_InteractedBy) == 0x000180, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_ComponentBoundEvent_Interactable) == 0x000188, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_ComponentBoundEvent_Interactable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_DynamicCast_AsGz_Player_Character_1) == 0x000190, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_DynamicCast_AsGz_Player_Character_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_DynamicCast_bSuccess_1) == 0x000198, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Array_AddUnique_ReturnValue) == 0x00019C, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0001A0, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001A1, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_EndPlayReason) == 0x0001A2, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_HasAuthority_ReturnValue_2) == 0x0001A3, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_HasAuthority_ReturnValue_3) == 0x0001A4, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_bInOverloadZone) == 0x0001A5, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_bInOverloadZone' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, K2Node_Event_bNewActive) == 0x0001A6, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::K2Node_Event_bNewActive' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001A7, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_UpdateExtractionProgressTime_DeltaTime_ImplicitCast) == 0x0001A8, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_UpdateExtractionProgressTime_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor, CallFunc_Delay_Duration_ImplicitCast) == 0x0001B0, "Member 'BP_HEX_Extractor_C_ExecuteUbergraph_BP_HEX_Extractor::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.EndExtraction
// 0x0003 (0x0003 - 0x0000)
struct BP_HEX_Extractor_C_EndExtraction final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_EndExtraction) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_EndExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_EndExtraction) == 0x000003, "Wrong size on BP_HEX_Extractor_C_EndExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_EndExtraction, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_EndExtraction::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_EndExtraction, CallFunc_IsExtractingState_Value) == 0x000001, "Member 'BP_HEX_Extractor_C_EndExtraction::CallFunc_IsExtractingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_EndExtraction, CallFunc_IsHackingState_Value) == 0x000002, "Member 'BP_HEX_Extractor_C_EndExtraction::CallFunc_IsHackingState_Value' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.DispatchAnimationFinishToServer
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_DispatchAnimationFinishToServer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_DispatchAnimationFinishToServer");
static_assert(sizeof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer) == 0x000028, "Wrong size on BP_HEX_Extractor_C_DispatchAnimationFinishToServer");
static_assert(offsetof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_HEX_Extractor_C_DispatchAnimationFinishToServer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000010, "Member 'BP_HEX_Extractor_C_DispatchAnimationFinishToServer::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_HEX_Extractor_C_DispatchAnimationFinishToServer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DispatchAnimationFinishToServer, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_DispatchAnimationFinishToServer::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.DeactivateHackingState
// 0x0030 (0x0030 - 0x0000)
struct BP_HEX_Extractor_C_DeactivateHackingState final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetProgressSpeed_NewParam;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PostHexExtractionReconstitutedMessage_ExtractionProgressTime_ImplicitCast; // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_DeactivateHackingState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_DeactivateHackingState");
static_assert(sizeof(BP_HEX_Extractor_C_DeactivateHackingState) == 0x000030, "Wrong size on BP_HEX_Extractor_C_DeactivateHackingState");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_GetProgressSpeed_NewParam) == 0x000008, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_GetProgressSpeed_NewParam' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged) == 0x000010, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_GetExtractionProgressWhenStateChanged_ExtractionProgressWhenStateChanged' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_DeactivateHackingState, CallFunc_PostHexExtractionReconstitutedMessage_ExtractionProgressTime_ImplicitCast) == 0x000028, "Member 'BP_HEX_Extractor_C_DeactivateHackingState::CallFunc_PostHexExtractionReconstitutedMessage_ExtractionProgressTime_ImplicitCast' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.CompleteInteraction
// 0x0040 (0x0040 - 0x0000)
struct BP_HEX_Extractor_C_CompleteInteraction final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGzItemData* HexData)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCC[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_CompleteInteraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_CompleteInteraction");
static_assert(sizeof(BP_HEX_Extractor_C_CompleteInteraction) == 0x000040, "Wrong size on BP_HEX_Extractor_C_CompleteInteraction");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_HEX_Extractor_C_CompleteInteraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_CompleteInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_HEX_Extractor_C_CompleteInteraction::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_CompleteInteraction::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, K2Node_DynamicCast_AsGz_Player_Character) == 0x000030, "Member 'BP_HEX_Extractor_C_CompleteInteraction::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CompleteInteraction, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_HEX_Extractor_C_CompleteInteraction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.CloseActiveWidget
// 0x0001 (0x0001 - 0x0000)
struct BP_HEX_Extractor_C_CloseActiveWidget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_CloseActiveWidget) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_CloseActiveWidget");
static_assert(sizeof(BP_HEX_Extractor_C_CloseActiveWidget) == 0x000001, "Wrong size on BP_HEX_Extractor_C_CloseActiveWidget");
static_assert(offsetof(BP_HEX_Extractor_C_CloseActiveWidget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_CloseActiveWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.CheckForCloseEnemy
// 0x0058 (0x0058 - 0x0000)
struct BP_HEX_Extractor_C_CheckForCloseEnemy final
{
public:
	double                                        DistanceToShow;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_CheckForCloseEnemy) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_CheckForCloseEnemy");
static_assert(sizeof(BP_HEX_Extractor_C_CheckForCloseEnemy) == 0x000058, "Wrong size on BP_HEX_Extractor_C_CheckForCloseEnemy");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, DistanceToShow) == 0x000000, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::DistanceToShow' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_Square_ReturnValue) == 0x000028, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000030, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000048, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_CheckForCloseEnemy, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_HEX_Extractor_C_CheckForCloseEnemy::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature final
{
public:
	class AActor*                                 InteractedBy;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UGzInteractableComponent*         Interactable;                                      // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature");
static_assert(sizeof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature) == 0x000010, "Wrong size on BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature, InteractedBy) == 0x000000, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature::InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature, Interactable) == 0x000008, "Member 'BP_HEX_Extractor_C_BndEvt__BP_HEX_Extractor_InteractableComponent_K2Node_ComponentBoundEvent_1_GzOnInteract__DelegateSignature::Interactable' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.AddHexMeshToTerminal
// 0x0080 (0x0080 - 0x0000)
struct BP_HEX_Extractor_C_AddHexMeshToTerminal final
{
public:
	EGzItemRarity                                 Rarity;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CCF[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_7;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_8;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_9;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD0[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_AddHexMeshToTerminal) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_AddHexMeshToTerminal");
static_assert(sizeof(BP_HEX_Extractor_C_AddHexMeshToTerminal) == 0x000080, "Wrong size on BP_HEX_Extractor_C_AddHexMeshToTerminal");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Rarity) == 0x000000, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Rarity' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_byte_Variable) == 0x000001, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable) == 0x000008, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_1) == 0x000010, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_2) == 0x000018, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_3) == 0x000020, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_4) == 0x000028, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_byte_Variable_1) == 0x000030, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_5) == 0x000038, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_6) == 0x000040, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_7) == 0x000048, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_8) == 0x000050, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, Temp_object_Variable_9) == 0x000058, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, K2Node_Select_Default) == 0x000060, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, K2Node_Select_Default_1) == 0x000068, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, CallFunc_SetStaticMesh_ReturnValue) == 0x000070, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddHexMeshToTerminal, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000078, "Member 'BP_HEX_Extractor_C_AddHexMeshToTerminal::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.AddExtractionWidget
// 0x0028 (0x0028 - 0x0000)
struct BP_HEX_Extractor_C_AddExtractionWidget final
{
public:
	class APlayerController*                      OwningPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     PlayerCharacter;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UWBP_HEX_Menu_C*                        CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzNavigationRoot*                      CallFunc_GetNavigationRoot_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_AddExtractionWidget) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_AddExtractionWidget");
static_assert(sizeof(BP_HEX_Extractor_C_AddExtractionWidget) == 0x000028, "Wrong size on BP_HEX_Extractor_C_AddExtractionWidget");
static_assert(offsetof(BP_HEX_Extractor_C_AddExtractionWidget, OwningPlayer) == 0x000000, "Member 'BP_HEX_Extractor_C_AddExtractionWidget::OwningPlayer' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddExtractionWidget, PlayerController) == 0x000008, "Member 'BP_HEX_Extractor_C_AddExtractionWidget::PlayerController' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddExtractionWidget, PlayerCharacter) == 0x000010, "Member 'BP_HEX_Extractor_C_AddExtractionWidget::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddExtractionWidget, CallFunc_Create_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_AddExtractionWidget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_AddExtractionWidget, CallFunc_GetNavigationRoot_ReturnValue) == 0x000020, "Member 'BP_HEX_Extractor_C_AddExtractionWidget::CallFunc_GetNavigationRoot_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ActivateHackingState
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_ActivateHackingState final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ActivateHackingState) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_ActivateHackingState");
static_assert(sizeof(BP_HEX_Extractor_C_ActivateHackingState) == 0x000010, "Wrong size on BP_HEX_Extractor_C_ActivateHackingState");
static_assert(offsetof(BP_HEX_Extractor_C_ActivateHackingState, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_ActivateHackingState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ActivateHackingState, CallFunc_GetPlayerStateFromContext_ReturnValue) == 0x000008, "Member 'BP_HEX_Extractor_C_ActivateHackingState::CallFunc_GetPlayerStateFromContext_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.ActivateCelebrationNiagara
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_ActivateCelebrationNiagara final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_ActivateCelebrationNiagara) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_ActivateCelebrationNiagara");
static_assert(sizeof(BP_HEX_Extractor_C_ActivateCelebrationNiagara) == 0x000002, "Wrong size on BP_HEX_Extractor_C_ActivateCelebrationNiagara");
static_assert(offsetof(BP_HEX_Extractor_C_ActivateCelebrationNiagara, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_ActivateCelebrationNiagara::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_ActivateCelebrationNiagara, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_ActivateCelebrationNiagara::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsHackingState
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_IsHackingState final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsHackingState) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_IsHackingState");
static_assert(sizeof(BP_HEX_Extractor_C_IsHackingState) == 0x000002, "Wrong size on BP_HEX_Extractor_C_IsHackingState");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingState, Value) == 0x000000, "Member 'BP_HEX_Extractor_C_IsHackingState::Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsHackingState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_IsHackingState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsFriendlyExtraction
// 0x0020 (0x0020 - 0x0000)
struct BP_HEX_Extractor_C_IsFriendlyExtraction final
{
public:
	int32                                         InstigatorPlayerID;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromPlayerId_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsATeammate_bTeammate;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsFriendlyExtraction) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_IsFriendlyExtraction");
static_assert(sizeof(BP_HEX_Extractor_C_IsFriendlyExtraction) == 0x000020, "Wrong size on BP_HEX_Extractor_C_IsFriendlyExtraction");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, InstigatorPlayerID) == 0x000000, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::InstigatorPlayerID' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, Result) == 0x000004, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::Result' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, PlayerState) == 0x000008, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::PlayerState' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, CallFunc_GetPlayerStateFromPlayerId_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::CallFunc_GetPlayerStateFromPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsFriendlyExtraction, CallFunc_IsATeammate_bTeammate) == 0x000019, "Member 'BP_HEX_Extractor_C_IsFriendlyExtraction::CallFunc_IsATeammate_bTeammate' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsExtractingState
// 0x0002 (0x0002 - 0x0000)
struct BP_HEX_Extractor_C_IsExtractingState final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsExtractingState) == 0x000001, "Wrong alignment on BP_HEX_Extractor_C_IsExtractingState");
static_assert(sizeof(BP_HEX_Extractor_C_IsExtractingState) == 0x000002, "Wrong size on BP_HEX_Extractor_C_IsExtractingState");
static_assert(offsetof(BP_HEX_Extractor_C_IsExtractingState, Value) == 0x000000, "Member 'BP_HEX_Extractor_C_IsExtractingState::Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsExtractingState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_HEX_Extractor_C_IsExtractingState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.IsATeammate
// 0x0010 (0x0010 - 0x0000)
struct BP_HEX_Extractor_C_IsATeammate final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeammate;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamAttitude                                 CallFunc_GetTeamAttitude_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_IsATeammate) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_IsATeammate");
static_assert(sizeof(BP_HEX_Extractor_C_IsATeammate) == 0x000010, "Wrong size on BP_HEX_Extractor_C_IsATeammate");
static_assert(offsetof(BP_HEX_Extractor_C_IsATeammate, PlayerState) == 0x000000, "Member 'BP_HEX_Extractor_C_IsATeammate::PlayerState' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsATeammate, bTeammate) == 0x000008, "Member 'BP_HEX_Extractor_C_IsATeammate::bTeammate' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsATeammate, CallFunc_GetTeamAttitude_ReturnValue) == 0x000009, "Member 'BP_HEX_Extractor_C_IsATeammate::CallFunc_GetTeamAttitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsATeammate, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_HEX_Extractor_C_IsATeammate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_IsATeammate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'BP_HEX_Extractor_C_IsATeammate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetPingVoiceLineData
// 0x0048 (0x0048 - 0x0000)
struct BP_HEX_Extractor_C_GetPingVoiceLineData final
{
public:
	struct FGzPingVoiceLineData                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD3[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD4[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzPingVoiceLineData                   K2Node_Select_Default;                             // 0x0028(0x0010)(ConstParm, NoDestructor)
	struct FGzPingVoiceLineData                   K2Node_Select_Default_1;                           // 0x0038(0x0010)(ConstParm, NoDestructor)
};
static_assert(alignof(BP_HEX_Extractor_C_GetPingVoiceLineData) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetPingVoiceLineData");
static_assert(sizeof(BP_HEX_Extractor_C_GetPingVoiceLineData) == 0x000048, "Wrong size on BP_HEX_Extractor_C_GetPingVoiceLineData");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, Temp_bool_Variable) == 0x000010, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, Temp_bool_Variable_1) == 0x000011, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000018, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, CallFunc_IsHackingState_Value) == 0x000020, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, CallFunc_IsExtractingState_Value) == 0x000022, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::CallFunc_IsExtractingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, K2Node_Select_Default) == 0x000028, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetPingVoiceLineData, K2Node_Select_Default_1) == 0x000038, "Member 'BP_HEX_Extractor_C_GetPingVoiceLineData::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetLocalHexItemTransforms
// 0x0080 (0x0080 - 0x0000)
struct BP_HEX_Extractor_C_GetLocalHexItemTransforms final
{
public:
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_HEX_Extractor_C_GetLocalHexItemTransforms) == 0x000010, "Wrong alignment on BP_HEX_Extractor_C_GetLocalHexItemTransforms");
static_assert(sizeof(BP_HEX_Extractor_C_GetLocalHexItemTransforms) == 0x000080, "Wrong size on BP_HEX_Extractor_C_GetLocalHexItemTransforms");
static_assert(offsetof(BP_HEX_Extractor_C_GetLocalHexItemTransforms, ReturnValue) == 0x000000, "Member 'BP_HEX_Extractor_C_GetLocalHexItemTransforms::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetLocalHexItemTransforms, CallFunc_GetRelativeTransform_ReturnValue) == 0x000010, "Member 'BP_HEX_Extractor_C_GetLocalHexItemTransforms::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetLocalHexItemTransforms, K2Node_MakeArray_Array) == 0x000070, "Member 'BP_HEX_Extractor_C_GetLocalHexItemTransforms::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_HEX_Extractor.BP_HEX_Extractor_C.GetCurrentInteractionInfo
// 0x05C0 (0x05C0 - 0x0000)
struct BP_HEX_Extractor_C_GetCurrentInteractionInfo final
{
public:
	const class AGzCharacter*                     InteractedBy;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGzInteractionInfo>             InteractionInfoArray;                              // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayTag                           OutInteractionTag;                                 // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGzInteractionData                     OutInteractionData;                                // 0x0020(0x00F8)(Parm, OutParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD5[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD6[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue;    // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface; // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD7[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzInvComponent*                        CallFunc_GetViewTargetInventory_ReturnValue;       // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendlyExtraction_Result;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD8[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x015C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CD9[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzInteractionData                     CallFunc_FindInteractionDataByTag_OutInteractionData; // 0x0168(0x00F8)(ContainsInstancedReference)
	bool                                          CallFunc_FindInteractionDataByTag_ReturnValue;     // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDA[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0264(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x026E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDB[0x1];                                     // 0x026F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPlayerStateFromContext_ReturnValue_1;  // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_1;     // 0x0278(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_ReturnValue_1;                // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDC[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzInteractionData                     CallFunc_FindInteractionDataByTag_OutInteractionData_1; // 0x0288(0x00F8)(ContainsInstancedReference)
	bool                                          CallFunc_FindInteractionDataByTag_ReturnValue_1;   // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendlyExtraction_Result_1;            // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0382(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0383(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue;                 // 0x0385(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0386(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDD[0x1];                                     // 0x0387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_2;     // 0x0388(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_3;     // 0x0390(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGzInteractionData                     CallFunc_FindInteractionDataByTag_OutInteractionData_2; // 0x0398(0x00F8)(ContainsInstancedReference)
	bool                                          CallFunc_FindInteractionDataByTag_ReturnValue_2;   // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDE[0x6];                                     // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzInteractionData                     CallFunc_FindInteractionDataByTag_OutInteractionData_3; // 0x0498(0x00F8)(ContainsInstancedReference)
	bool                                          CallFunc_FindInteractionDataByTag_ReturnValue_3;   // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CDF[0x7];                                     // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzInvComponent*                        Temp_object_Variable;                              // 0x0598(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHexInside_ReturnValue_1;               // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CE0[0x6];                                     // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGzInvItem>                     CallFunc_GetItemsByItemType_ReturnValue;           // 0x05A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x05BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x05BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HEX_Extractor_C_GetCurrentInteractionInfo) == 0x000008, "Wrong alignment on BP_HEX_Extractor_C_GetCurrentInteractionInfo");
static_assert(sizeof(BP_HEX_Extractor_C_GetCurrentInteractionInfo) == 0x0005C0, "Wrong size on BP_HEX_Extractor_C_GetCurrentInteractionInfo");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, InteractedBy) == 0x000000, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::InteractedBy' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, InteractionInfoArray) == 0x000008, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::InteractionInfoArray' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, OutInteractionTag) == 0x000018, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::OutInteractionTag' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, OutInteractionData) == 0x000020, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::OutInteractionData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, ReturnValue) == 0x000118, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, K2Node_DynamicCast_AsGz_Player_Character) == 0x000120, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetPlayerStateFromContext_ReturnValue) == 0x000130, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetPlayerStateFromContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, K2Node_DynamicCast_AsGz_Player_View_Target_Interface) == 0x000138, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::K2Node_DynamicCast_AsGz_Player_View_Target_Interface' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, K2Node_DynamicCast_bSuccess_1) == 0x000148, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetPlayerId_ReturnValue) == 0x00014C, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetViewTargetInventory_ReturnValue) == 0x000150, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetViewTargetInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_IsFriendlyExtraction_Result) == 0x000158, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_IsFriendlyExtraction_Result' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x00015C, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_IsHackingState_Value) == 0x000164, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_OutInteractionData) == 0x000168, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_OutInteractionData' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_ReturnValue) == 0x000260, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, Temp_struct_Variable) == 0x000264, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue) == 0x00026C, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_1) == 0x00026D, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_IsExtractingState_Value) == 0x00026E, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_IsExtractingState_Value' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetPlayerStateFromContext_ReturnValue_1) == 0x000270, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetPlayerStateFromContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_MakeLiteralGameplayTag_ReturnValue_1) == 0x000278, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_MakeLiteralGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetPlayerId_ReturnValue_1) == 0x000280, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetPlayerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_OutInteractionData_1) == 0x000288, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_OutInteractionData_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_ReturnValue_1) == 0x000380, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_IsFriendlyExtraction_Result_1) == 0x000381, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_IsFriendlyExtraction_Result_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_2) == 0x000382, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000383, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_3) == 0x000384, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_HasHexInside_ReturnValue) == 0x000385, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_HasHexInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_Not_PreBool_ReturnValue_1) == 0x000386, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_MakeLiteralGameplayTag_ReturnValue_2) == 0x000388, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_MakeLiteralGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_MakeLiteralGameplayTag_ReturnValue_3) == 0x000390, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_MakeLiteralGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_OutInteractionData_2) == 0x000398, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_OutInteractionData_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_ReturnValue_2) == 0x000490, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_4) == 0x000491, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_OutInteractionData_3) == 0x000498, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_OutInteractionData_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_FindInteractionDataByTag_ReturnValue_3) == 0x000590, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_FindInteractionDataByTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, Temp_object_Variable) == 0x000598, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_HasHexInside_ReturnValue_1) == 0x0005A0, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_HasHexInside_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_Not_PreBool_ReturnValue_2) == 0x0005A1, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_GetItemsByItemType_ReturnValue) == 0x0005A8, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_GetItemsByItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_Array_Length_ReturnValue) == 0x0005B8, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0005BC, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_5) == 0x0005BD, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HEX_Extractor_C_GetCurrentInteractionInfo, CallFunc_BooleanAND_ReturnValue_6) == 0x0005BE, "Member 'BP_HEX_Extractor_C_GetCurrentInteractionInfo::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");

}

