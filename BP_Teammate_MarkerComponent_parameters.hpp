#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Teammate_MarkerComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.ExecuteUbergraph_BP_Teammate_MarkerComponent
// 0x0188 (0x0188 - 0x0000)
struct BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_1;                          // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag;                            // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68F8[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           K2Node_DynamicCast_AsGz_Character;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68F9[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAbilitySystemComponent*              CallFunc_GetGzAbilitySystemComponent_ReturnValue;  // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FA[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0078(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0170(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent) == 0x000008, "Wrong alignment on BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent) == 0x000188, "Wrong size on BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, EntryPoint) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_CustomEvent_Tag_1) == 0x000004, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_CustomEvent_Tag_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_CustomEvent_Tag) == 0x00000C, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_CustomEvent_Tag' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, Temp_struct_Variable) == 0x000024, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_DynamicCast_AsGz_Character) == 0x000050, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_DynamicCast_AsGz_Character' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_GetGzAbilitySystemComponent_ReturnValue) == 0x000060, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_GetGzAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue) == 0x000068, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000078, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000170, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000180, "Member 'BP_Teammate_MarkerComponent_C_ExecuteUbergraph_BP_Teammate_MarkerComponent::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.KillTimerIfValid
// 0x0001 (0x0001 - 0x0000)
struct BP_Teammate_MarkerComponent_C_KillTimerIfValid final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_KillTimerIfValid) == 0x000001, "Wrong alignment on BP_Teammate_MarkerComponent_C_KillTimerIfValid");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_KillTimerIfValid) == 0x000001, "Wrong size on BP_Teammate_MarkerComponent_C_KillTimerIfValid");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_KillTimerIfValid, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_KillTimerIfValid::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D
// 0x0008 (0x0008 - 0x0000)
struct BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D) == 0x000004, "Wrong alignment on BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D) == 0x000008, "Wrong size on BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D, Tag) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_OnTagAdded_5036DE45483E86B9AABD40B2D1B3170D::Tag' has a wrong offset!");

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D
// 0x0008 (0x0008 - 0x0000)
struct BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D) == 0x000004, "Wrong alignment on BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D) == 0x000008, "Wrong size on BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D, Tag) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_OnTagRemoved_5036DE45483E86B9AABD40B2D1B3170D::Tag' has a wrong offset!");

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.CalculatePlayerMarkerRotationForRemoteClient
// 0x0098 (0x0098 - 0x0000)
struct BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FB[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FC[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWingsuit_ReturnValue;                   // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FD[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast_1;  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient) == 0x000008, "Wrong alignment on BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient) == 0x000098, "Wrong size on BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, InActor) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::InActor' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, ReturnValue) == 0x000008, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, K2Node_DynamicCast_AsGz_Player_Character) == 0x000010, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000020, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_GetVelocity_ReturnValue) == 0x000038, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_MakeRotFromX_ReturnValue) == 0x000060, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Roll_1) == 0x000078, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Pitch_1) == 0x00007C, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_BreakRotator_Yaw_1) == 0x000080, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, CallFunc_IsWingsuit_ReturnValue) == 0x000084, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::CallFunc_IsWingsuit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000088, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient, K2Node_FunctionResult_ReturnValue_ImplicitCast_1) == 0x000090, "Member 'BP_Teammate_MarkerComponent_C_CalculatePlayerMarkerRotationForRemoteClient::K2Node_FunctionResult_ReturnValue_ImplicitCast_1' has a wrong offset!");

// Function BP_Teammate_MarkerComponent.BP_Teammate_MarkerComponent_C.GetMarkerRotation
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Teammate_MarkerComponent_C_GetMarkerRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          OwnerController;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6900[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         CallFunc_GetViewTargetPlayerState_ReturnValue;     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6901[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculatePlayerMarkerRotationForRemoteClient_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6902[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Teammate_MarkerComponent_C_GetMarkerRotation) == 0x000008, "Wrong alignment on BP_Teammate_MarkerComponent_C_GetMarkerRotation");
static_assert(sizeof(BP_Teammate_MarkerComponent_C_GetMarkerRotation) == 0x0000B0, "Wrong size on BP_Teammate_MarkerComponent_C_GetMarkerRotation");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, ReturnValue) == 0x000000, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, OwnerController) == 0x000008, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, K2Node_DynamicCast_AsPawn) == 0x000018, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000028, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, K2Node_DynamicCast_AsGz_Player_View_Target_Interface) == 0x000040, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::K2Node_DynamicCast_AsGz_Player_View_Target_Interface' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Roll) == 0x000054, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Pitch) == 0x000058, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Yaw) == 0x00005C, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_GetViewTargetPlayerState_ReturnValue) == 0x000060, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_GetViewTargetPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_IsValid_ReturnValue_1) == 0x000069, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_CalculatePlayerMarkerRotationForRemoteClient_ReturnValue) == 0x000070, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_CalculatePlayerMarkerRotationForRemoteClient_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_GetController_ReturnValue) == 0x000078, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_IsValid_ReturnValue_2) == 0x000080, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000088, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Roll_1) == 0x0000A0, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Pitch_1) == 0x0000A4, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, CallFunc_BreakRotator_Yaw_1) == 0x0000A8, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Teammate_MarkerComponent_C_GetMarkerRotation, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x0000AC, "Member 'BP_Teammate_MarkerComponent_C_GetMarkerRotation::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

}

