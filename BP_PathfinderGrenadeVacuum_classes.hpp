#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PathfinderGrenadeVacuum

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_PathfinderGrenadeBase_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PathfinderGrenadeVacuum.BP_PathfinderGrenadeVacuum_C
// 0x02C8 (0x0628 - 0x0360)
class ABP_PathfinderGrenadeVacuum_C final : public ABP_PathfinderGrenadeBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PathfinderGrenadeVacuum_C;       // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BeepMesh;                                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BeepMesh2;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TrailVFX;                                          // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzExplosionComponent*                  GzExplosion;                                       // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_Result;                                        // 0x0398(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          EnemyOnlyProximity;                                // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6510[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ProxyTrigger;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ExplosionEnabled;                                  // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6511[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ProximityTimeout;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowDetonation;                                   // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6512[0x3];                                     // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerScale;                                      // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impulse;                                           // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6513[0x4];                                     // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PlayersInRadius;                                   // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         ExplosionDelay;                                    // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VacuumRadius;                                      // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Types;                                      // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DetonationTriggered;                               // 0x04E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6514[0x7];                                     // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AffectedPlayers;                                   // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 PullProxy;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PullActor;                                         // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_Result_0;                                      // 0x0510(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          InAir;                                             // 0x0608(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6515[0x7];                                     // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BeepTimerInterval;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowBeep;                                         // 0x0618(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6516[0x7];                                     // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BeepTimerReductionMultiplier;                      // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateGrenade();
	void ActivateVFX();
	void ActivationSequence();
	void BeepTimer1();
	void BeepTimer2();
	void BndEvt__BP_Grenade01Projectile_ProjectileMovementComponent_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void BndEvt__BP_Grenade01Projectile_ProjectileMovementComponent_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void Detonate();
	void DisablePhysicsAndExplode();
	void ExecuteUbergraph_BP_PathfinderGrenadeVacuum(int32 EntryPoint);
	void OnActorBeginOverlap_Event(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnPullProxyBeginOverlap_Event(class AActor* OverlappedActor, class AActor* OtherActor);
	void OverlapConditionCheck(const class AActor* Player, bool* Param_AllowDetonation);
	void ProximityDetonation();
	void Pull();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetupBeep();
	void Shooting_Sound();
	void Spawn_Pull_Proxy(class AActor** Param_PullProxy);
	void SpawnProxyTrigger(class AActor** Output_Get);
	void StartTimerHideBeep();
	void StartTimerShowBeep();
	void VelocityThreshold(double* Param_VelocityThreshold);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PathfinderGrenadeVacuum_C">();
	}
	static class ABP_PathfinderGrenadeVacuum_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PathfinderGrenadeVacuum_C>();
	}
};
static_assert(alignof(ABP_PathfinderGrenadeVacuum_C) == 0x000008, "Wrong alignment on ABP_PathfinderGrenadeVacuum_C");
static_assert(sizeof(ABP_PathfinderGrenadeVacuum_C) == 0x000628, "Wrong size on ABP_PathfinderGrenadeVacuum_C");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, UberGraphFrame_BP_PathfinderGrenadeVacuum_C) == 0x000360, "Member 'ABP_PathfinderGrenadeVacuum_C::UberGraphFrame_BP_PathfinderGrenadeVacuum_C' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, BeepMesh) == 0x000368, "Member 'ABP_PathfinderGrenadeVacuum_C::BeepMesh' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, BeepMesh2) == 0x000370, "Member 'ABP_PathfinderGrenadeVacuum_C::BeepMesh2' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Cylinder) == 0x000378, "Member 'ABP_PathfinderGrenadeVacuum_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Niagara) == 0x000380, "Member 'ABP_PathfinderGrenadeVacuum_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, TrailVFX) == 0x000388, "Member 'ABP_PathfinderGrenadeVacuum_C::TrailVFX' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, GzExplosion) == 0x000390, "Member 'ABP_PathfinderGrenadeVacuum_C::GzExplosion' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Hit_Result) == 0x000398, "Member 'ABP_PathfinderGrenadeVacuum_C::Hit_Result' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, EnemyOnlyProximity) == 0x000490, "Member 'ABP_PathfinderGrenadeVacuum_C::EnemyOnlyProximity' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, ProxyTrigger) == 0x000498, "Member 'ABP_PathfinderGrenadeVacuum_C::ProxyTrigger' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, ExplosionEnabled) == 0x0004A0, "Member 'ABP_PathfinderGrenadeVacuum_C::ExplosionEnabled' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, ProximityTimeout) == 0x0004A8, "Member 'ABP_PathfinderGrenadeVacuum_C::ProximityTimeout' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, AllowDetonation) == 0x0004B0, "Member 'ABP_PathfinderGrenadeVacuum_C::AllowDetonation' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, TriggerScale) == 0x0004B4, "Member 'ABP_PathfinderGrenadeVacuum_C::TriggerScale' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Impulse) == 0x0004B8, "Member 'ABP_PathfinderGrenadeVacuum_C::Impulse' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, PlayersInRadius) == 0x0004C0, "Member 'ABP_PathfinderGrenadeVacuum_C::PlayersInRadius' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, ExplosionDelay) == 0x0004D0, "Member 'ABP_PathfinderGrenadeVacuum_C::ExplosionDelay' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, VacuumRadius) == 0x0004D4, "Member 'ABP_PathfinderGrenadeVacuum_C::VacuumRadius' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Object_Types) == 0x0004D8, "Member 'ABP_PathfinderGrenadeVacuum_C::Object_Types' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, DetonationTriggered) == 0x0004E8, "Member 'ABP_PathfinderGrenadeVacuum_C::DetonationTriggered' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, AffectedPlayers) == 0x0004F0, "Member 'ABP_PathfinderGrenadeVacuum_C::AffectedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, PullProxy) == 0x000500, "Member 'ABP_PathfinderGrenadeVacuum_C::PullProxy' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, PullActor) == 0x000508, "Member 'ABP_PathfinderGrenadeVacuum_C::PullActor' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, Hit_Result_0) == 0x000510, "Member 'ABP_PathfinderGrenadeVacuum_C::Hit_Result_0' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, InAir) == 0x000608, "Member 'ABP_PathfinderGrenadeVacuum_C::InAir' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, BeepTimerInterval) == 0x000610, "Member 'ABP_PathfinderGrenadeVacuum_C::BeepTimerInterval' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, AllowBeep) == 0x000618, "Member 'ABP_PathfinderGrenadeVacuum_C::AllowBeep' has a wrong offset!");
static_assert(offsetof(ABP_PathfinderGrenadeVacuum_C, BeepTimerReductionMultiplier) == 0x000620, "Member 'ABP_PathfinderGrenadeVacuum_C::BeepTimerReductionMultiplier' has a wrong offset!");

}

