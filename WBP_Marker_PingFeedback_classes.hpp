#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Marker_PingFeedback

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_MarkerPingPadding_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Marker_PingFeedback.WBP_Marker_PingFeedback_C
// 0x00C0 (0x03A0 - 0x02E0)
class UWBP_Marker_PingFeedback_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               Ping_Overlay;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        PingFrame_WidgetSwitcher;                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         PingIcons_HorizontalBox;                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingLarge_Image;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingMedium_Image;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingSmall_Image;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player1_Image;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player2_Image;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player3_Image;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player4_Image;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzMarkerComponent*                     Marker;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         PingOwner;                                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowPingFrame;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Item;                                           // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           PingSize;                                          // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626A[0x5];                                     // 0x034B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_MarkerPingPadding, double>             PingPadding;                                       // 0x0350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CheckDibs(class AGzPlayerState* PlayerState, bool Agree);
	void DibsConstruct();
	void ExecuteUbergraph_WBP_Marker_PingFeedback(int32 EntryPoint);
	void GetIndexInTeam(class APlayerState* PlayerState, int32* OutputPin);
	void InitialPingUpdate();
	void InitTeamFeedback(class UGzMarkerComponent* MarkerComponent, bool IsItem);
	void OnPingAgreementsChanged(class AGzPlayerState* PlayerState, const struct FGzPingData& PingData, bool bAgree);
	void OnPingDataChanged(class UGzMarkerComponent* MarkerComponent, const struct FGzPingData& PingData);
	void PreConstruct(bool IsDesignTime);
	void ResetPlayerIndicators();
	void Set_Ping_Size(E_MarkerPingPadding Param_PingSize);
	void SetPlayerShapesAndColors();
	void ShowPlayerIndicator(class AGzPlayerState* PlayerState, bool ShowPing);
	void UpdatePingSize();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Marker_PingFeedback_C">();
	}
	static class UWBP_Marker_PingFeedback_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Marker_PingFeedback_C>();
	}
};
static_assert(alignof(UWBP_Marker_PingFeedback_C) == 0x000008, "Wrong alignment on UWBP_Marker_PingFeedback_C");
static_assert(sizeof(UWBP_Marker_PingFeedback_C) == 0x0003A0, "Wrong size on UWBP_Marker_PingFeedback_C");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Marker_PingFeedback_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Ping_Overlay) == 0x0002E8, "Member 'UWBP_Marker_PingFeedback_C::Ping_Overlay' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingFrame_WidgetSwitcher) == 0x0002F0, "Member 'UWBP_Marker_PingFeedback_C::PingFrame_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingIcons_HorizontalBox) == 0x0002F8, "Member 'UWBP_Marker_PingFeedback_C::PingIcons_HorizontalBox' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingLarge_Image) == 0x000300, "Member 'UWBP_Marker_PingFeedback_C::PingLarge_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingMedium_Image) == 0x000308, "Member 'UWBP_Marker_PingFeedback_C::PingMedium_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingSmall_Image) == 0x000310, "Member 'UWBP_Marker_PingFeedback_C::PingSmall_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Player1_Image) == 0x000318, "Member 'UWBP_Marker_PingFeedback_C::Player1_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Player2_Image) == 0x000320, "Member 'UWBP_Marker_PingFeedback_C::Player2_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Player3_Image) == 0x000328, "Member 'UWBP_Marker_PingFeedback_C::Player3_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Player4_Image) == 0x000330, "Member 'UWBP_Marker_PingFeedback_C::Player4_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Marker) == 0x000338, "Member 'UWBP_Marker_PingFeedback_C::Marker' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingOwner) == 0x000340, "Member 'UWBP_Marker_PingFeedback_C::PingOwner' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, ShowPingFrame) == 0x000348, "Member 'UWBP_Marker_PingFeedback_C::ShowPingFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, Is_Item) == 0x000349, "Member 'UWBP_Marker_PingFeedback_C::Is_Item' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingSize) == 0x00034A, "Member 'UWBP_Marker_PingFeedback_C::PingSize' has a wrong offset!");
static_assert(offsetof(UWBP_Marker_PingFeedback_C, PingPadding) == 0x000350, "Member 'UWBP_Marker_PingFeedback_C::PingPadding' has a wrong offset!");

}

