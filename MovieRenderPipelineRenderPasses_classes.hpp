#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineRenderPasses

#include "Basic.hpp"

#include "ActorLayerUtilities_structs.hpp"
#include "MovieRenderPipelineCore_classes.hpp"
#include "OpenColorIO_structs.hpp"
#include "MovieRenderPipelineRenderPasses_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class MovieRenderPipelineRenderPasses.MovieGraphImagePassBaseNode
// 0x0020 (0x00B8 - 0x0098)
class UMovieGraphImagePassBaseNode : public UMovieGraphRenderPassNode
{
public:
	uint8                                         bOverride_ShowFlags : 1;                           // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4585[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieGraphShowFlags*                   ShowFlags;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4586[0x10];                                    // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImagePassBaseNode">();
	}
	static class UMovieGraphImagePassBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImagePassBaseNode>();
	}
};
static_assert(alignof(UMovieGraphImagePassBaseNode) == 0x000008, "Wrong alignment on UMovieGraphImagePassBaseNode");
static_assert(sizeof(UMovieGraphImagePassBaseNode) == 0x0000B8, "Wrong size on UMovieGraphImagePassBaseNode");
static_assert(offsetof(UMovieGraphImagePassBaseNode, ShowFlags) == 0x0000A0, "Member 'UMovieGraphImagePassBaseNode::ShowFlags' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MovieGraphDeferredRenderPassNode
// 0x0020 (0x00D8 - 0x00B8)
class UMovieGraphDeferredRenderPassNode final : public UMovieGraphImagePassBaseNode
{
public:
	uint8                                         bOverride_SpatialSampleCount : 1;                  // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AntiAliasingMethod : 1;                  // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDisableToneCurve : 1;                   // 0x00B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bAllowOCIO : 1;                          // 0x00B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ViewModeIndex : 1;                       // 0x00B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bWriteAllSamples : 1;                    // 0x00B8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AdditionalPostProcessMaterials : 1;      // 0x00B8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4587[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpatialSampleCount;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasingMethod                           AntiAliasingMethod;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteAllSamples;                                  // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableToneCurve;                                 // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOCIO;                                        // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewModeIndex                                ViewModeIndex;                                     // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4588[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMoviePipelinePostProcessPass>  AdditionalPostProcessMaterials;                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDeferredRenderPassNode">();
	}
	static class UMovieGraphDeferredRenderPassNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDeferredRenderPassNode>();
	}
};
static_assert(alignof(UMovieGraphDeferredRenderPassNode) == 0x000008, "Wrong alignment on UMovieGraphDeferredRenderPassNode");
static_assert(sizeof(UMovieGraphDeferredRenderPassNode) == 0x0000D8, "Wrong size on UMovieGraphDeferredRenderPassNode");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, SpatialSampleCount) == 0x0000BC, "Member 'UMovieGraphDeferredRenderPassNode::SpatialSampleCount' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, AntiAliasingMethod) == 0x0000C0, "Member 'UMovieGraphDeferredRenderPassNode::AntiAliasingMethod' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, bWriteAllSamples) == 0x0000C1, "Member 'UMovieGraphDeferredRenderPassNode::bWriteAllSamples' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, bDisableToneCurve) == 0x0000C2, "Member 'UMovieGraphDeferredRenderPassNode::bDisableToneCurve' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, bAllowOCIO) == 0x0000C3, "Member 'UMovieGraphDeferredRenderPassNode::bAllowOCIO' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, ViewModeIndex) == 0x0000C4, "Member 'UMovieGraphDeferredRenderPassNode::ViewModeIndex' has a wrong offset!");
static_assert(offsetof(UMovieGraphDeferredRenderPassNode, AdditionalPostProcessMaterials) == 0x0000C8, "Member 'UMovieGraphDeferredRenderPassNode::AdditionalPostProcessMaterials' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode
// 0x0118 (0x01C8 - 0x00B0)
class UMovieGraphImageSequenceOutputNode : public UMovieGraphFileOutputNode
{
public:
	uint8                                         bOverride_OCIOConfiguration : 1;                   // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OCIOContext : 1;                         // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4589[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOpenColorIODisplayConfiguration       OCIOConfiguration;                                 // 0x00B8(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            OCIOContext;                                       // 0x0158(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_458A[0x20];                                    // 0x01A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode">();
	}
	static class UMovieGraphImageSequenceOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode) == 0x0001C8, "Wrong size on UMovieGraphImageSequenceOutputNode");
static_assert(offsetof(UMovieGraphImageSequenceOutputNode, OCIOConfiguration) == 0x0000B8, "Member 'UMovieGraphImageSequenceOutputNode::OCIOConfiguration' has a wrong offset!");
static_assert(offsetof(UMovieGraphImageSequenceOutputNode, OCIOContext) == 0x000158, "Member 'UMovieGraphImageSequenceOutputNode::OCIOContext' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode_EXR
// 0x0008 (0x01D0 - 0x01C8)
class UMovieGraphImageSequenceOutputNode_EXR : public UMovieGraphImageSequenceOutputNode
{
public:
	uint8                                         bOverride_Compression : 1;                         // 0x01C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EEXRCompressionFormat                         Compression;                                       // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_458B[0x6];                                     // 0x01CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_EXR">();
	}
	static class UMovieGraphImageSequenceOutputNode_EXR* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_EXR>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_EXR) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_EXR");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_EXR) == 0x0001D0, "Wrong size on UMovieGraphImageSequenceOutputNode_EXR");
static_assert(offsetof(UMovieGraphImageSequenceOutputNode_EXR, Compression) == 0x0001C9, "Member 'UMovieGraphImageSequenceOutputNode_EXR::Compression' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode_MultiLayerEXR
// 0x0000 (0x01D0 - 0x01D0)
class UMovieGraphImageSequenceOutputNode_MultiLayerEXR final : public UMovieGraphImageSequenceOutputNode_EXR
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_MultiLayerEXR">();
	}
	static class UMovieGraphImageSequenceOutputNode_MultiLayerEXR* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_MultiLayerEXR>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_MultiLayerEXR) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_MultiLayerEXR");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_MultiLayerEXR) == 0x0001D0, "Wrong size on UMovieGraphImageSequenceOutputNode_MultiLayerEXR");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode_BMP
// 0x0000 (0x01C8 - 0x01C8)
class UMovieGraphImageSequenceOutputNode_BMP final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_BMP">();
	}
	static class UMovieGraphImageSequenceOutputNode_BMP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_BMP>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_BMP) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_BMP");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_BMP) == 0x0001C8, "Wrong size on UMovieGraphImageSequenceOutputNode_BMP");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode_JPG
// 0x0000 (0x01C8 - 0x01C8)
class UMovieGraphImageSequenceOutputNode_JPG final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_JPG">();
	}
	static class UMovieGraphImageSequenceOutputNode_JPG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_JPG>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_JPG) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_JPG");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_JPG) == 0x0001C8, "Wrong size on UMovieGraphImageSequenceOutputNode_JPG");

// Class MovieRenderPipelineRenderPasses.MovieGraphImageSequenceOutputNode_PNG
// 0x0000 (0x01C8 - 0x01C8)
class UMovieGraphImageSequenceOutputNode_PNG final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_PNG">();
	}
	static class UMovieGraphImageSequenceOutputNode_PNG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_PNG>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_PNG) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_PNG");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_PNG) == 0x0001C8, "Wrong size on UMovieGraphImageSequenceOutputNode_PNG");

// Class MovieRenderPipelineRenderPasses.MovieGraphPathTracerRenderPassNode
// 0x0028 (0x00E0 - 0x00B8)
class UMovieGraphPathTracerRenderPassNode final : public UMovieGraphImagePassBaseNode
{
public:
	uint8                                         bOverride_SpatialSampleCount : 1;                  // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDenoiser : 1;                           // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bDisableToneCurve : 1;                   // 0x00B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bAllowOCIO : 1;                          // 0x00B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bWriteAllSamples : 1;                    // 0x00B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AdditionalPostProcessMaterials : 1;      // 0x00B8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_458C[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpatialSampleCount;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDenoiser;                                         // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteAllSamples;                                  // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableToneCurve;                                 // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOCIO;                                        // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_458D[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMoviePipelinePostProcessPass>  AdditionalPostProcessMaterials;                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_458E[0x8];                                     // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPathTracerRenderPassNode">();
	}
	static class UMovieGraphPathTracerRenderPassNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPathTracerRenderPassNode>();
	}
};
static_assert(alignof(UMovieGraphPathTracerRenderPassNode) == 0x000008, "Wrong alignment on UMovieGraphPathTracerRenderPassNode");
static_assert(sizeof(UMovieGraphPathTracerRenderPassNode) == 0x0000E0, "Wrong size on UMovieGraphPathTracerRenderPassNode");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, SpatialSampleCount) == 0x0000BC, "Member 'UMovieGraphPathTracerRenderPassNode::SpatialSampleCount' has a wrong offset!");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, bDenoiser) == 0x0000C0, "Member 'UMovieGraphPathTracerRenderPassNode::bDenoiser' has a wrong offset!");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, bWriteAllSamples) == 0x0000C1, "Member 'UMovieGraphPathTracerRenderPassNode::bWriteAllSamples' has a wrong offset!");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, bDisableToneCurve) == 0x0000C2, "Member 'UMovieGraphPathTracerRenderPassNode::bDisableToneCurve' has a wrong offset!");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, bAllowOCIO) == 0x0000C3, "Member 'UMovieGraphPathTracerRenderPassNode::bAllowOCIO' has a wrong offset!");
static_assert(offsetof(UMovieGraphPathTracerRenderPassNode, AdditionalPostProcessMaterials) == 0x0000C8, "Member 'UMovieGraphPathTracerRenderPassNode::AdditionalPostProcessMaterials' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImagePassBase
// 0x0130 (0x0178 - 0x0048)
class UMoviePipelineImagePassBase : public UMoviePipelineRenderPass
{
public:
	uint8                                         Pad_458F[0x130];                                   // 0x0048(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImagePassBase">();
	}
	static class UMoviePipelineImagePassBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImagePassBase>();
	}
};
static_assert(alignof(UMoviePipelineImagePassBase) == 0x000008, "Wrong alignment on UMoviePipelineImagePassBase");
static_assert(sizeof(UMoviePipelineImagePassBase) == 0x000178, "Wrong size on UMoviePipelineImagePassBase");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPassBase
// 0x00C0 (0x0238 - 0x0178)
class UMoviePipelineDeferredPassBase : public UMoviePipelineImagePassBase
{
public:
	bool                                          bAccumulatorIncludesAlpha;                         // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMultisampleEffects;                        // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUse32BitPostProcessMaterials;                     // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4590[0x5];                                     // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMoviePipelinePostProcessPass>  AdditionalPostProcessMaterials;                    // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRenderMainPass;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDefaultLayer;                                  // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4591[0x6];                                     // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorLayer>                    ActorLayers;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4592[0x10];                                    // 0x01A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                DataLayers;                                        // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ActivePostProcessMaterials;                        // 0x01C8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     StencilLayerMaterial;                              // 0x01D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4593[0x58];                                    // 0x01E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPassBase">();
	}
	static class UMoviePipelineDeferredPassBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPassBase>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPassBase) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPassBase");
static_assert(sizeof(UMoviePipelineDeferredPassBase) == 0x000238, "Wrong size on UMoviePipelineDeferredPassBase");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bAccumulatorIncludesAlpha) == 0x000178, "Member 'UMoviePipelineDeferredPassBase::bAccumulatorIncludesAlpha' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bDisableMultisampleEffects) == 0x000179, "Member 'UMoviePipelineDeferredPassBase::bDisableMultisampleEffects' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bUse32BitPostProcessMaterials) == 0x00017A, "Member 'UMoviePipelineDeferredPassBase::bUse32BitPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, AdditionalPostProcessMaterials) == 0x000180, "Member 'UMoviePipelineDeferredPassBase::AdditionalPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bRenderMainPass) == 0x000190, "Member 'UMoviePipelineDeferredPassBase::bRenderMainPass' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bAddDefaultLayer) == 0x000191, "Member 'UMoviePipelineDeferredPassBase::bAddDefaultLayer' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, ActorLayers) == 0x000198, "Member 'UMoviePipelineDeferredPassBase::ActorLayers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, DataLayers) == 0x0001B8, "Member 'UMoviePipelineDeferredPassBase::DataLayers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, ActivePostProcessMaterials) == 0x0001C8, "Member 'UMoviePipelineDeferredPassBase::ActivePostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, StencilLayerMaterial) == 0x0001D8, "Member 'UMoviePipelineDeferredPassBase::StencilLayerMaterial' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_Unlit
// 0x0000 (0x0238 - 0x0238)
class UMoviePipelineDeferredPass_Unlit final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_Unlit">();
	}
	static class UMoviePipelineDeferredPass_Unlit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_Unlit>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_Unlit) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_Unlit");
static_assert(sizeof(UMoviePipelineDeferredPass_Unlit) == 0x000238, "Wrong size on UMoviePipelineDeferredPass_Unlit");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_DetailLighting
// 0x0000 (0x0238 - 0x0238)
class UMoviePipelineDeferredPass_DetailLighting final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_DetailLighting">();
	}
	static class UMoviePipelineDeferredPass_DetailLighting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_DetailLighting>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_DetailLighting) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_DetailLighting");
static_assert(sizeof(UMoviePipelineDeferredPass_DetailLighting) == 0x000238, "Wrong size on UMoviePipelineDeferredPass_DetailLighting");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_LightingOnly
// 0x0000 (0x0238 - 0x0238)
class UMoviePipelineDeferredPass_LightingOnly final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_LightingOnly">();
	}
	static class UMoviePipelineDeferredPass_LightingOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_LightingOnly>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_LightingOnly) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_LightingOnly");
static_assert(sizeof(UMoviePipelineDeferredPass_LightingOnly) == 0x000238, "Wrong size on UMoviePipelineDeferredPass_LightingOnly");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_ReflectionsOnly
// 0x0000 (0x0238 - 0x0238)
class UMoviePipelineDeferredPass_ReflectionsOnly final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_ReflectionsOnly">();
	}
	static class UMoviePipelineDeferredPass_ReflectionsOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_ReflectionsOnly>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_ReflectionsOnly) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_ReflectionsOnly");
static_assert(sizeof(UMoviePipelineDeferredPass_ReflectionsOnly) == 0x000238, "Wrong size on UMoviePipelineDeferredPass_ReflectionsOnly");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_PathTracer
// 0x0008 (0x0240 - 0x0238)
class UMoviePipelineDeferredPass_PathTracer final : public UMoviePipelineDeferredPassBase
{
public:
	bool                                          bReferenceMotionBlur;                              // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4594[0x7];                                     // 0x0239(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_PathTracer">();
	}
	static class UMoviePipelineDeferredPass_PathTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_PathTracer>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_PathTracer) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_PathTracer");
static_assert(sizeof(UMoviePipelineDeferredPass_PathTracer) == 0x000240, "Wrong size on UMoviePipelineDeferredPass_PathTracer");
static_assert(offsetof(UMoviePipelineDeferredPass_PathTracer, bReferenceMotionBlur) == 0x000238, "Member 'UMoviePipelineDeferredPass_PathTracer::bReferenceMotionBlur' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutputBase
// 0x0020 (0x0068 - 0x0048)
class UMoviePipelineImageSequenceOutputBase : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_4595[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutputBase">();
	}
	static class UMoviePipelineImageSequenceOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutputBase");
static_assert(sizeof(UMoviePipelineImageSequenceOutputBase) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutputBase");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_EXR
// 0x0008 (0x0070 - 0x0068)
class UMoviePipelineImageSequenceOutput_EXR final : public UMoviePipelineImageSequenceOutputBase
{
public:
	EEXRCompressionFormat                         Compression;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultilayer;                                       // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4596[0x6];                                     // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_EXR">();
	}
	static class UMoviePipelineImageSequenceOutput_EXR* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_EXR>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_EXR) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_EXR");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_EXR) == 0x000070, "Wrong size on UMoviePipelineImageSequenceOutput_EXR");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_EXR, Compression) == 0x000068, "Member 'UMoviePipelineImageSequenceOutput_EXR::Compression' has a wrong offset!");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_EXR, bMultilayer) == 0x000069, "Member 'UMoviePipelineImageSequenceOutput_EXR::bMultilayer' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_BMP
// 0x0000 (0x0068 - 0x0068)
class UMoviePipelineImageSequenceOutput_BMP final : public UMoviePipelineImageSequenceOutputBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_BMP">();
	}
	static class UMoviePipelineImageSequenceOutput_BMP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_BMP>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_BMP) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_BMP");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_BMP) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutput_BMP");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_PNG
// 0x0008 (0x0070 - 0x0068)
class UMoviePipelineImageSequenceOutput_PNG final : public UMoviePipelineImageSequenceOutputBase
{
public:
	bool                                          bWriteAlpha;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4597[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_PNG">();
	}
	static class UMoviePipelineImageSequenceOutput_PNG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_PNG>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_PNG) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_PNG");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_PNG) == 0x000070, "Wrong size on UMoviePipelineImageSequenceOutput_PNG");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_PNG, bWriteAlpha) == 0x000068, "Member 'UMoviePipelineImageSequenceOutput_PNG::bWriteAlpha' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_JPG
// 0x0000 (0x0068 - 0x0068)
class UMoviePipelineImageSequenceOutput_JPG final : public UMoviePipelineImageSequenceOutputBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_JPG">();
	}
	static class UMoviePipelineImageSequenceOutput_JPG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_JPG>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_JPG) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_JPG");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_JPG) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutput_JPG");

// Class MovieRenderPipelineRenderPasses.MoviePipelineWaveOutput
// 0x0070 (0x00B8 - 0x0048)
class UMoviePipelineWaveOutput final : public UMoviePipelineOutputBase
{
public:
	class FString                                 FileNameFormatOverride;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4598[0x60];                                    // 0x0058(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineWaveOutput">();
	}
	static class UMoviePipelineWaveOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineWaveOutput>();
	}
};
static_assert(alignof(UMoviePipelineWaveOutput) == 0x000008, "Wrong alignment on UMoviePipelineWaveOutput");
static_assert(sizeof(UMoviePipelineWaveOutput) == 0x0000B8, "Wrong size on UMoviePipelineWaveOutput");
static_assert(offsetof(UMoviePipelineWaveOutput, FileNameFormatOverride) == 0x000048, "Member 'UMoviePipelineWaveOutput::FileNameFormatOverride' has a wrong offset!");

}

