#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaInventory

#include "Basic.hpp"

#include "XsollaUtils_structs.hpp"


namespace SDK
{

// ScriptStruct XsollaInventory.InventoryRedeemedCouponItem
// 0x00F0 (0x00F0 - 0x0000)
struct FInventoryRedeemedCouponItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaPrice                           Price;                                             // 0x0078(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaVirtualCurrencyPrice>    Virtual_prices;                                    // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaItemOptions                     Inventory_options;                                 // 0x00C8(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492C[0x4];                                     // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryRedeemedCouponItem) == 0x000008, "Wrong alignment on FInventoryRedeemedCouponItem");
static_assert(sizeof(FInventoryRedeemedCouponItem) == 0x0000F0, "Wrong size on FInventoryRedeemedCouponItem");
static_assert(offsetof(FInventoryRedeemedCouponItem, Sku) == 0x000000, "Member 'FInventoryRedeemedCouponItem::Sku' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Name) == 0x000010, "Member 'FInventoryRedeemedCouponItem::Name' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Description) == 0x000020, "Member 'FInventoryRedeemedCouponItem::Description' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Type) == 0x000030, "Member 'FInventoryRedeemedCouponItem::Type' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Virtual_item_type) == 0x000040, "Member 'FInventoryRedeemedCouponItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Groups) == 0x000050, "Member 'FInventoryRedeemedCouponItem::Groups' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Attributes) == 0x000060, "Member 'FInventoryRedeemedCouponItem::Attributes' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Is_free) == 0x000070, "Member 'FInventoryRedeemedCouponItem::Is_free' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Price) == 0x000078, "Member 'FInventoryRedeemedCouponItem::Price' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Virtual_prices) == 0x0000A8, "Member 'FInventoryRedeemedCouponItem::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Image_url) == 0x0000B8, "Member 'FInventoryRedeemedCouponItem::Image_url' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Inventory_options) == 0x0000C8, "Member 'FInventoryRedeemedCouponItem::Inventory_options' has a wrong offset!");
static_assert(offsetof(FInventoryRedeemedCouponItem, Quantity) == 0x0000E8, "Member 'FInventoryRedeemedCouponItem::Quantity' has a wrong offset!");

// ScriptStruct XsollaInventory.InventoryRedeemedCouponData
// 0x0010 (0x0010 - 0x0000)
struct FInventoryRedeemedCouponData final
{
public:
	TArray<struct FInventoryRedeemedCouponItem>   Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryRedeemedCouponData) == 0x000008, "Wrong alignment on FInventoryRedeemedCouponData");
static_assert(sizeof(FInventoryRedeemedCouponData) == 0x000010, "Wrong size on FInventoryRedeemedCouponData");
static_assert(offsetof(FInventoryRedeemedCouponData, Items) == 0x000000, "Member 'FInventoryRedeemedCouponData::Items' has a wrong offset!");

// ScriptStruct XsollaInventory.InventoryItem
// 0x0098 (0x0098 - 0x0000)
struct FInventoryItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttribute>           Attributes;                                        // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemGroup>               Groups;                                            // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Instance_id;                                       // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Remaining_uses;                                    // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryItem) == 0x000008, "Wrong alignment on FInventoryItem");
static_assert(sizeof(FInventoryItem) == 0x000098, "Wrong size on FInventoryItem");
static_assert(offsetof(FInventoryItem, Sku) == 0x000000, "Member 'FInventoryItem::Sku' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Name) == 0x000010, "Member 'FInventoryItem::Name' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Type) == 0x000020, "Member 'FInventoryItem::Type' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Virtual_item_type) == 0x000030, "Member 'FInventoryItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Description) == 0x000040, "Member 'FInventoryItem::Description' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Image_url) == 0x000050, "Member 'FInventoryItem::Image_url' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Attributes) == 0x000060, "Member 'FInventoryItem::Attributes' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Groups) == 0x000070, "Member 'FInventoryItem::Groups' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Instance_id) == 0x000080, "Member 'FInventoryItem::Instance_id' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Quantity) == 0x000090, "Member 'FInventoryItem::Quantity' has a wrong offset!");
static_assert(offsetof(FInventoryItem, Remaining_uses) == 0x000094, "Member 'FInventoryItem::Remaining_uses' has a wrong offset!");

// ScriptStruct XsollaInventory.InventoryItemsData
// 0x0010 (0x0010 - 0x0000)
struct FInventoryItemsData final
{
public:
	TArray<struct FInventoryItem>                 Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryItemsData) == 0x000008, "Wrong alignment on FInventoryItemsData");
static_assert(sizeof(FInventoryItemsData) == 0x000010, "Wrong size on FInventoryItemsData");
static_assert(offsetof(FInventoryItemsData, Items) == 0x000000, "Member 'FInventoryItemsData::Items' has a wrong offset!");

// ScriptStruct XsollaInventory.InventoryCouponRewardData
// 0x0018 (0x0018 - 0x0000)
struct FInventoryCouponRewardData final
{
public:
	TArray<struct FXsollaBonusItem>               bonus;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_selectable;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryCouponRewardData) == 0x000008, "Wrong alignment on FInventoryCouponRewardData");
static_assert(sizeof(FInventoryCouponRewardData) == 0x000018, "Wrong size on FInventoryCouponRewardData");
static_assert(offsetof(FInventoryCouponRewardData, bonus) == 0x000000, "Member 'FInventoryCouponRewardData::bonus' has a wrong offset!");
static_assert(offsetof(FInventoryCouponRewardData, Is_selectable) == 0x000010, "Member 'FInventoryCouponRewardData::Is_selectable' has a wrong offset!");

// ScriptStruct XsollaInventory.VirtualCurrencyBalance
// 0x0058 (0x0058 - 0x0000)
struct FVirtualCurrencyBalance final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Amount;                                            // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyBalance) == 0x000008, "Wrong alignment on FVirtualCurrencyBalance");
static_assert(sizeof(FVirtualCurrencyBalance) == 0x000058, "Wrong size on FVirtualCurrencyBalance");
static_assert(offsetof(FVirtualCurrencyBalance, Sku) == 0x000000, "Member 'FVirtualCurrencyBalance::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Type) == 0x000010, "Member 'FVirtualCurrencyBalance::Type' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Name) == 0x000020, "Member 'FVirtualCurrencyBalance::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Description) == 0x000030, "Member 'FVirtualCurrencyBalance::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Image_url) == 0x000040, "Member 'FVirtualCurrencyBalance::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Amount) == 0x000050, "Member 'FVirtualCurrencyBalance::Amount' has a wrong offset!");

// ScriptStruct XsollaInventory.VirtualCurrencyBalanceData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyBalanceData final
{
public:
	TArray<struct FVirtualCurrencyBalance>        Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyBalanceData) == 0x000008, "Wrong alignment on FVirtualCurrencyBalanceData");
static_assert(sizeof(FVirtualCurrencyBalanceData) == 0x000010, "Wrong size on FVirtualCurrencyBalanceData");
static_assert(offsetof(FVirtualCurrencyBalanceData, Items) == 0x000000, "Member 'FVirtualCurrencyBalanceData::Items' has a wrong offset!");

// ScriptStruct XsollaInventory.TimeLimitedItem
// 0x0078 (0x0078 - 0x0000)
struct FTimeLimitedItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expired_at;                                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeLimitedItem) == 0x000008, "Wrong alignment on FTimeLimitedItem");
static_assert(sizeof(FTimeLimitedItem) == 0x000078, "Wrong size on FTimeLimitedItem");
static_assert(offsetof(FTimeLimitedItem, Sku) == 0x000000, "Member 'FTimeLimitedItem::Sku' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Name) == 0x000010, "Member 'FTimeLimitedItem::Name' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Type) == 0x000020, "Member 'FTimeLimitedItem::Type' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Virtual_item_type) == 0x000030, "Member 'FTimeLimitedItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Description) == 0x000040, "Member 'FTimeLimitedItem::Description' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Image_url) == 0x000050, "Member 'FTimeLimitedItem::Image_url' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Expired_at) == 0x000060, "Member 'FTimeLimitedItem::Expired_at' has a wrong offset!");
static_assert(offsetof(FTimeLimitedItem, Status) == 0x000068, "Member 'FTimeLimitedItem::Status' has a wrong offset!");

// ScriptStruct XsollaInventory.TimeLimitedItemsData
// 0x0010 (0x0010 - 0x0000)
struct FTimeLimitedItemsData final
{
public:
	TArray<struct FTimeLimitedItem>               Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeLimitedItemsData) == 0x000008, "Wrong alignment on FTimeLimitedItemsData");
static_assert(sizeof(FTimeLimitedItemsData) == 0x000010, "Wrong size on FTimeLimitedItemsData");
static_assert(offsetof(FTimeLimitedItemsData, Items) == 0x000000, "Member 'FTimeLimitedItemsData::Items' has a wrong offset!");

}

