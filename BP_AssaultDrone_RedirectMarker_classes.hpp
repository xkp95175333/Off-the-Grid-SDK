#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AssaultDrone_RedirectMarker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AssaultDrone_RedirectMarker.BP_AssaultDrone_RedirectMarker_C
// 0x00A0 (0x0340 - 0x02A0)
class ABP_AssaultDrone_RedirectMarker_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Cube2;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube3;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scale3;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube5;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube4;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scale2;                                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube1;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scale1;                                            // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Offset1;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Offset2;                                           // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Offset3;                                           // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RotationRoot;                                      // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene4;                                            // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CircleRoot2;                                       // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CircleRoot3;                                       // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CircleRoot1;                                       // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         StartSequence_NewTrack_0_0329F0A34929AC3D486A27BBB3880A2B; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StartSequence__Direction_0329F0A34929AC3D486A27BBB3880A2B; // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7C[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StartSequence;                                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AssaultDrone_RedirectMarker(int32 EntryPoint);
	void Finish();
	double GetDistanceMultiplayer();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StartSequence__FinishedFunc();
	void StartSequence__UpdateFunc();
	void UpdateFromDistance();
	void UpdateScale(float InputPin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AssaultDrone_RedirectMarker_C">();
	}
	static class ABP_AssaultDrone_RedirectMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AssaultDrone_RedirectMarker_C>();
	}
};
static_assert(alignof(ABP_AssaultDrone_RedirectMarker_C) == 0x000008, "Wrong alignment on ABP_AssaultDrone_RedirectMarker_C");
static_assert(sizeof(ABP_AssaultDrone_RedirectMarker_C) == 0x000340, "Wrong size on ABP_AssaultDrone_RedirectMarker_C");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_AssaultDrone_RedirectMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube2) == 0x0002A8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube2' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube3) == 0x0002B0, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube3' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Scale3) == 0x0002B8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Scale3' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube5) == 0x0002C0, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube5' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube4) == 0x0002C8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube4' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Scale2) == 0x0002D0, "Member 'ABP_AssaultDrone_RedirectMarker_C::Scale2' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube) == 0x0002D8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Cube1) == 0x0002E0, "Member 'ABP_AssaultDrone_RedirectMarker_C::Cube1' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Scale1) == 0x0002E8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Scale1' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Offset1) == 0x0002F0, "Member 'ABP_AssaultDrone_RedirectMarker_C::Offset1' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Offset2) == 0x0002F8, "Member 'ABP_AssaultDrone_RedirectMarker_C::Offset2' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Offset3) == 0x000300, "Member 'ABP_AssaultDrone_RedirectMarker_C::Offset3' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, RotationRoot) == 0x000308, "Member 'ABP_AssaultDrone_RedirectMarker_C::RotationRoot' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, Scene4) == 0x000310, "Member 'ABP_AssaultDrone_RedirectMarker_C::Scene4' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, CircleRoot2) == 0x000318, "Member 'ABP_AssaultDrone_RedirectMarker_C::CircleRoot2' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, CircleRoot3) == 0x000320, "Member 'ABP_AssaultDrone_RedirectMarker_C::CircleRoot3' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, CircleRoot1) == 0x000328, "Member 'ABP_AssaultDrone_RedirectMarker_C::CircleRoot1' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, StartSequence_NewTrack_0_0329F0A34929AC3D486A27BBB3880A2B) == 0x000330, "Member 'ABP_AssaultDrone_RedirectMarker_C::StartSequence_NewTrack_0_0329F0A34929AC3D486A27BBB3880A2B' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, StartSequence__Direction_0329F0A34929AC3D486A27BBB3880A2B) == 0x000334, "Member 'ABP_AssaultDrone_RedirectMarker_C::StartSequence__Direction_0329F0A34929AC3D486A27BBB3880A2B' has a wrong offset!");
static_assert(offsetof(ABP_AssaultDrone_RedirectMarker_C, StartSequence) == 0x000338, "Member 'ABP_AssaultDrone_RedirectMarker_C::StartSequence' has a wrong offset!");

}

