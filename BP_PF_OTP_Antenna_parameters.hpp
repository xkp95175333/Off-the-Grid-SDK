#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PF_OTP_Antenna

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "BP_OTP_AntennaState_structs.hpp"


namespace SDK::Params
{

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.UserConstructionScript
// 0x0118 (0x0118 - 0x0000)
struct BP_PF_OTP_Antenna_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0020(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_UserConstructionScript");
static_assert(sizeof(BP_PF_OTP_Antenna_C_UserConstructionScript) == 0x000118, "Wrong size on BP_PF_OTP_Antenna_C_UserConstructionScript");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UserConstructionScript, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_UserConstructionScript::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UserConstructionScript, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_UserConstructionScript::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.UpdateCurrentExtractionProgressClient
// 0x0028 (0x0028 - 0x0000)
struct BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B5[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient");
static_assert(sizeof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient) == 0x000028, "Wrong size on BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_UpdateCurrentExtractionProgressClient::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.StopAudioEvents
// 0x0002 (0x0002 - 0x0000)
struct BP_PF_OTP_Antenna_C_StopAudioEvents final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_StopAudioEvents) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_StopAudioEvents");
static_assert(sizeof(BP_PF_OTP_Antenna_C_StopAudioEvents) == 0x000002, "Wrong size on BP_PF_OTP_Antenna_C_StopAudioEvents");
static_assert(offsetof(BP_PF_OTP_Antenna_C_StopAudioEvents, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_StopAudioEvents::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_StopAudioEvents, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_StopAudioEvents::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.SetExtractionHacked
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_SetExtractionHacked final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_SetExtractionHacked) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_SetExtractionHacked");
static_assert(sizeof(BP_PF_OTP_Antenna_C_SetExtractionHacked) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_SetExtractionHacked");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionHacked, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_SetExtractionHacked::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.SetExtractionContinued
// 0x0028 (0x0028 - 0x0000)
struct BP_PF_OTP_Antenna_C_SetExtractionContinued final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B6[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_SetExtractionContinued) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_SetExtractionContinued");
static_assert(sizeof(BP_PF_OTP_Antenna_C_SetExtractionContinued) == 0x000028, "Wrong size on BP_PF_OTP_Antenna_C_SetExtractionContinued");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionContinued, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_SetExtractionContinued::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.SetExtractionCompleted
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_SetExtractionCompleted final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_SetExtractionCompleted) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_SetExtractionCompleted");
static_assert(sizeof(BP_PF_OTP_Antenna_C_SetExtractionCompleted) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_SetExtractionCompleted");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionCompleted, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_SetExtractionCompleted::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.SetExtractionCanceled
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_SetExtractionCanceled final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_SetExtractionCanceled) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_SetExtractionCanceled");
static_assert(sizeof(BP_PF_OTP_Antenna_C_SetExtractionCanceled) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_SetExtractionCanceled");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractionCanceled, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_SetExtractionCanceled::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.SetExtractingState
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_SetExtractingState final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_SetExtractingState) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_SetExtractingState");
static_assert(sizeof(BP_PF_OTP_Antenna_C_SetExtractingState) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_SetExtractingState");
static_assert(offsetof(BP_PF_OTP_Antenna_C_SetExtractingState, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_SetExtractingState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ResetExtractionVFX
// 0x0020 (0x0020 - 0x0000)
struct BP_PF_OTP_Antenna_C_ResetExtractionVFX final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B8[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ResetExtractionVFX) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_ResetExtractionVFX");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ResetExtractionVFX) == 0x000020, "Wrong size on BP_PF_OTP_Antenna_C_ResetExtractionVFX");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ResetExtractionVFX, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PF_OTP_Antenna_C_ResetExtractionVFX::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_ReceiveEndPlay");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_ReceiveEndPlay");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.PlayAudioEvents
// 0x0054 (0x0054 - 0x0000)
struct BP_PF_OTP_Antenna_C_PlayAudioEvents final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0010(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0020(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0030(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B9[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_3;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_PlayAudioEvents) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_PlayAudioEvents");
static_assert(sizeof(BP_PF_OTP_Antenna_C_PlayAudioEvents) == 0x000054, "Wrong size on BP_PF_OTP_Antenna_C_PlayAudioEvents");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, Temp_delegate_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, Temp_delegate_Variable_1) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, Temp_delegate_Variable_2) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, Temp_delegate_Variable_3) == 0x000030, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_IsDedicatedServer_ReturnValue) == 0x000040, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_PostAkEvent_ReturnValue) == 0x000044, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_PostAkEvent_ReturnValue_1) == 0x000048, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_PostAkEvent_ReturnValue_2) == 0x00004C, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_PlayAudioEvents, CallFunc_PostAkEvent_ReturnValue_3) == 0x000050, "Member 'BP_PF_OTP_Antenna_C_PlayAudioEvents::CallFunc_PostAkEvent_ReturnValue_3' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.OnRep_ExtractionProgressData
// 0x0080 (0x0080 - 0x0000)
struct BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BC[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData");
static_assert(sizeof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData) == 0x000080, "Wrong size on BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_IsDedicatedServer_ReturnValue) == 0x000028, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_SelectFloat_B_ImplicitCast) == 0x000068, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000070, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000078, "Member 'BP_PF_OTP_Antenna_C_OnRep_ExtractionProgressData::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.OnRep_AntennaState
// 0x0001 (0x0001 - 0x0000)
struct BP_PF_OTP_Antenna_C_OnRep_AntennaState final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_OnRep_AntennaState) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_OnRep_AntennaState");
static_assert(sizeof(BP_PF_OTP_Antenna_C_OnRep_AntennaState) == 0x000001, "Wrong size on BP_PF_OTP_Antenna_C_OnRep_AntennaState");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnRep_AntennaState, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_OnRep_AntennaState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.OnExtractionPauseChanged
// 0x0006 (0x0006 - 0x0000)
struct BP_PF_OTP_Antenna_C_OnExtractionPauseChanged final
{
public:
	EGzExtractionState                            Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_OTP_AntennaState                          Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_OTP_AntennaState                          Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_OTP_AntennaState                          Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_OTP_AntennaState                          K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_OnExtractionPauseChanged");
static_assert(sizeof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged) == 0x000006, "Wrong size on BP_PF_OTP_Antenna_C_OnExtractionPauseChanged");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, Temp_byte_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, Temp_byte_Variable_1) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, Temp_byte_Variable_2) == 0x000002, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, Temp_byte_Variable_3) == 0x000003, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_OnExtractionPauseChanged, K2Node_Select_Default) == 0x000005, "Member 'BP_PF_OTP_Antenna_C_OnExtractionPauseChanged::K2Node_Select_Default' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.IsAntennaActive
// 0x0007 (0x0007 - 0x0000)
struct BP_PF_OTP_Antenna_C_IsAntennaActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_IsAntennaActive) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_IsAntennaActive");
static_assert(sizeof(BP_PF_OTP_Antenna_C_IsAntennaActive) == 0x000007, "Wrong size on BP_PF_OTP_Antenna_C_IsAntennaActive");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, bActive) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::bActive' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000003, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_IsAntennaActive, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'BP_PF_OTP_Antenna_C_IsAntennaActive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.InitZoneBindings
// 0x0024 (0x0024 - 0x0000)
struct BP_PF_OTP_Antenna_C_InitZoneBindings final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BD[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float OverloadStartTime)>      K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_InitZoneBindings) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_InitZoneBindings");
static_assert(sizeof(BP_PF_OTP_Antenna_C_InitZoneBindings) == 0x000024, "Wrong size on BP_PF_OTP_Antenna_C_InitZoneBindings");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitZoneBindings, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_InitZoneBindings::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitZoneBindings, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_InitZoneBindings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitZoneBindings, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_PF_OTP_Antenna_C_InitZoneBindings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitZoneBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_InitZoneBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitZoneBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_InitZoneBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.InitVFX
// 0x0038 (0x0038 - 0x0000)
struct BP_PF_OTP_Antenna_C_InitVFX final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BE[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57BF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_InitVFX) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_InitVFX");
static_assert(sizeof(BP_PF_OTP_Antenna_C_InitVFX) == 0x000038, "Wrong size on BP_PF_OTP_Antenna_C_InitVFX");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_InitVFX::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_InitVFX::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_InitVFX::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitVFX, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_PF_OTP_Antenna_C_InitVFX::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.InitMaterials
// 0x0010 (0x0010 - 0x0000)
struct BP_PF_OTP_Antenna_C_InitMaterials final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_InitMaterials) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_InitMaterials");
static_assert(sizeof(BP_PF_OTP_Antenna_C_InitMaterials) == 0x000010, "Wrong size on BP_PF_OTP_Antenna_C_InitMaterials");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitMaterials, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_InitMaterials::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitMaterials, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_InitMaterials::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.InitBindings
// 0x0054 (0x0054 - 0x0000)
struct BP_PF_OTP_Antenna_C_InitBindings final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_InitBindings) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_InitBindings");
static_assert(sizeof(BP_PF_OTP_Antenna_C_InitBindings) == 0x000054, "Wrong size on BP_PF_OTP_Antenna_C_InitBindings");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_InitBindings::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_InitBindings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_InitBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_InitBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'BP_PF_OTP_Antenna_C_InitBindings::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'BP_PF_OTP_Antenna_C_InitBindings::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_InitBindings, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'BP_PF_OTP_Antenna_C_InitBindings::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExtractionStarted
// 0x0050 (0x0050 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExtractionStarted final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C2[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C3[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C4[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExtractionStarted) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_ExtractionStarted");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExtractionStarted) == 0x000050, "Wrong size on BP_PF_OTP_Antenna_C_ExtractionStarted");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, Temp_delegate_Variable) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_IsDedicatedServer_ReturnValue) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionStarted, CallFunc_PostEvent_ReturnValue) == 0x00004C, "Member 'BP_PF_OTP_Antenna_C_ExtractionStarted::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExtractionPaused
// 0x0002 (0x0002 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExtractionPaused final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExtractionPaused) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_ExtractionPaused");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExtractionPaused) == 0x000002, "Wrong size on BP_PF_OTP_Antenna_C_ExtractionPaused");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionPaused, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExtractionPaused::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionPaused, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_ExtractionPaused::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExtractionHacked
// 0x0028 (0x0028 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExtractionHacked final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C5[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExtractionHacked) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_ExtractionHacked");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExtractionHacked) == 0x000028, "Wrong size on BP_PF_OTP_Antenna_C_ExtractionHacked");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionHacked, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PF_OTP_Antenna_C_ExtractionHacked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExtractionCompleted
// 0x0018 (0x0018 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExtractionCompleted final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C7[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExtractionCompleted) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_ExtractionCompleted");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExtractionCompleted) == 0x000018, "Wrong size on BP_PF_OTP_Antenna_C_ExtractionCompleted");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCompleted, Temp_delegate_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExtractionCompleted::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCompleted, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_ExtractionCompleted::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCompleted, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_PF_OTP_Antenna_C_ExtractionCompleted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCompleted, CallFunc_PostEvent_ReturnValue) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_ExtractionCompleted::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExtractionCanceled
// 0x0018 (0x0018 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExtractionCanceled final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C8[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExtractionCanceled) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_ExtractionCanceled");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExtractionCanceled) == 0x000018, "Wrong size on BP_PF_OTP_Antenna_C_ExtractionCanceled");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCanceled, Temp_delegate_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExtractionCanceled::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCanceled, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_ExtractionCanceled::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCanceled, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_PF_OTP_Antenna_C_ExtractionCanceled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExtractionCanceled, CallFunc_PostEvent_ReturnValue) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_ExtractionCanceled::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.ExecuteUbergraph_BP_PF_OTP_Antenna
// 0x0008 (0x0008 - 0x0000)
struct BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna");
static_assert(sizeof(BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna) == 0x000008, "Wrong size on BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna, EntryPoint) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_ExecuteUbergraph_BP_PF_OTP_Antenna::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.DisplayGridDecal
// 0x0003 (0x0003 - 0x0000)
struct BP_PF_OTP_Antenna_C_DisplayGridDecal final
{
public:
	bool                                          CallFunc_IsHackingState_Value;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExtractingState_Value;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_DisplayGridDecal) == 0x000001, "Wrong alignment on BP_PF_OTP_Antenna_C_DisplayGridDecal");
static_assert(sizeof(BP_PF_OTP_Antenna_C_DisplayGridDecal) == 0x000003, "Wrong size on BP_PF_OTP_Antenna_C_DisplayGridDecal");
static_assert(offsetof(BP_PF_OTP_Antenna_C_DisplayGridDecal, CallFunc_IsHackingState_Value) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_DisplayGridDecal::CallFunc_IsHackingState_Value' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_DisplayGridDecal, CallFunc_IsExtractingState_Value) == 0x000001, "Member 'BP_PF_OTP_Antenna_C_DisplayGridDecal::CallFunc_IsExtractingState_Value' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_DisplayGridDecal, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'BP_PF_OTP_Antenna_C_DisplayGridDecal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.CloseAntenna
// 0x0018 (0x0018 - 0x0000)
struct BP_PF_OTP_Antenna_C_CloseAntenna final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_CloseAntenna) == 0x000008, "Wrong alignment on BP_PF_OTP_Antenna_C_CloseAntenna");
static_assert(sizeof(BP_PF_OTP_Antenna_C_CloseAntenna) == 0x000018, "Wrong size on BP_PF_OTP_Antenna_C_CloseAntenna");
static_assert(offsetof(BP_PF_OTP_Antenna_C_CloseAntenna, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_CloseAntenna::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_CloseAntenna, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_CloseAntenna::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.AntennaWaitPeriodFeedback
// 0x0018 (0x0018 - 0x0000)
struct BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback final
{
public:
	float                                         OverloadStartTime;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback");
static_assert(sizeof(BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback) == 0x000018, "Wrong size on BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback");
static_assert(offsetof(BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback, OverloadStartTime) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback::OverloadStartTime' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback, Temp_delegate_Variable) == 0x000004, "Member 'BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback, CallFunc_PostEvent_ReturnValue) == 0x000014, "Member 'BP_PF_OTP_Antenna_C_AntennaWaitPeriodFeedback::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C.AntennaOverloadEffect
// 0x0014 (0x0014 - 0x0000)
struct BP_PF_OTP_Antenna_C_AntennaOverloadEffect final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PF_OTP_Antenna_C_AntennaOverloadEffect) == 0x000004, "Wrong alignment on BP_PF_OTP_Antenna_C_AntennaOverloadEffect");
static_assert(sizeof(BP_PF_OTP_Antenna_C_AntennaOverloadEffect) == 0x000014, "Wrong size on BP_PF_OTP_Antenna_C_AntennaOverloadEffect");
static_assert(offsetof(BP_PF_OTP_Antenna_C_AntennaOverloadEffect, Temp_delegate_Variable) == 0x000000, "Member 'BP_PF_OTP_Antenna_C_AntennaOverloadEffect::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_PF_OTP_Antenna_C_AntennaOverloadEffect, CallFunc_PostEvent_ReturnValue) == 0x000010, "Member 'BP_PF_OTP_Antenna_C_AntennaOverloadEffect::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

}

