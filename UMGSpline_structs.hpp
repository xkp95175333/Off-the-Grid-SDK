#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMGSpline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum UMGSpline.EUMGSplineCoordinateSpace
// NumValues: 0x0004
enum class EUMGSplineCoordinateSpace : uint8
{
	Local                                    = 0,
	Viewport                                 = 1,
	Screen                                   = 2,
	EUMGSplineCoordinateSpace_MAX            = 3,
};

// Enum UMGSpline.EUMGSplineType
// NumValues: 0x0003
enum class EUMGSplineType : uint8
{
	Linear                                   = 0,
	Curve                                    = 1,
	EUMGSplineType_MAX                       = 2,
};

// ScriptStruct UMGSpline.UMGSplineCurves
// 0x0038 (0x0038 - 0x0000)
struct FUMGSplineCurves final
{
public:
	struct FInterpCurveVector2D                   Position;                                          // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      ReparamTable;                                      // 0x0018(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Version;                                           // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReparamStepsPerSegment;                            // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGSplineCurves) == 0x000008, "Wrong alignment on FUMGSplineCurves");
static_assert(sizeof(FUMGSplineCurves) == 0x000038, "Wrong size on FUMGSplineCurves");
static_assert(offsetof(FUMGSplineCurves, Position) == 0x000000, "Member 'FUMGSplineCurves::Position' has a wrong offset!");
static_assert(offsetof(FUMGSplineCurves, ReparamTable) == 0x000018, "Member 'FUMGSplineCurves::ReparamTable' has a wrong offset!");
static_assert(offsetof(FUMGSplineCurves, Version) == 0x000030, "Member 'FUMGSplineCurves::Version' has a wrong offset!");
static_assert(offsetof(FUMGSplineCurves, ReparamStepsPerSegment) == 0x000034, "Member 'FUMGSplineCurves::ReparamStepsPerSegment' has a wrong offset!");

// ScriptStruct UMGSpline.UMGSplinePoint
// 0x0020 (0x0020 - 0x0000)
struct FUMGSplinePoint final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Direction;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGSplinePoint) == 0x000008, "Wrong alignment on FUMGSplinePoint");
static_assert(sizeof(FUMGSplinePoint) == 0x000020, "Wrong size on FUMGSplinePoint");
static_assert(offsetof(FUMGSplinePoint, Location) == 0x000000, "Member 'FUMGSplinePoint::Location' has a wrong offset!");
static_assert(offsetof(FUMGSplinePoint, Direction) == 0x000010, "Member 'FUMGSplinePoint::Direction' has a wrong offset!");

// ScriptStruct UMGSpline.UMGSplineInfo
// 0x0110 (0x0110 - 0x0000)
struct FUMGSplineInfo final
{
public:
	EUMGSplineType                                SplineType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2698[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUMGSplinePoint>                Points;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bClosedLoop;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2699[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TintColor;                                         // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BuildCustomVerts;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CustomVertsBrush;                                  // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CustomVertsVCoordScale;                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269B[0xC];                                     // 0x0104(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUMGSplineInfo) == 0x000010, "Wrong alignment on FUMGSplineInfo");
static_assert(sizeof(FUMGSplineInfo) == 0x000110, "Wrong size on FUMGSplineInfo");
static_assert(offsetof(FUMGSplineInfo, SplineType) == 0x000000, "Member 'FUMGSplineInfo::SplineType' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, Thickness) == 0x000004, "Member 'FUMGSplineInfo::Thickness' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, Points) == 0x000008, "Member 'FUMGSplineInfo::Points' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, bClosedLoop) == 0x000018, "Member 'FUMGSplineInfo::bClosedLoop' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, TintColor) == 0x00001C, "Member 'FUMGSplineInfo::TintColor' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, BuildCustomVerts) == 0x00002C, "Member 'FUMGSplineInfo::BuildCustomVerts' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, CustomVertsBrush) == 0x000030, "Member 'FUMGSplineInfo::CustomVertsBrush' has a wrong offset!");
static_assert(offsetof(FUMGSplineInfo, CustomVertsVCoordScale) == 0x000100, "Member 'FUMGSplineInfo::CustomVertsVCoordScale' has a wrong offset!");

// ScriptStruct UMGSpline.UMGSplineDebugInfo
// 0x0014 (0x0014 - 0x0000)
struct FUMGSplineDebugInfo final
{
public:
	bool                                          bDrawWidgetBoarder;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BoarderColor;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGSplineDebugInfo) == 0x000004, "Wrong alignment on FUMGSplineDebugInfo");
static_assert(sizeof(FUMGSplineDebugInfo) == 0x000014, "Wrong size on FUMGSplineDebugInfo");
static_assert(offsetof(FUMGSplineDebugInfo, bDrawWidgetBoarder) == 0x000000, "Member 'FUMGSplineDebugInfo::bDrawWidgetBoarder' has a wrong offset!");
static_assert(offsetof(FUMGSplineDebugInfo, BoarderColor) == 0x000004, "Member 'FUMGSplineDebugInfo::BoarderColor' has a wrong offset!");

}

