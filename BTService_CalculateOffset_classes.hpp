#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_CalculateOffset

#include "Basic.hpp"

#include "DistanceToTargetEnum_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "E_NPCBodyPart_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTService_CalculateOffset.BTService_CalculateOffset_C
// 0x00D8 (0x0170 - 0x0098)
class UBTService_CalculateOffset_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        MaxMiddleOffset;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BBOffsetName;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            Range;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinMiddleOffset;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sign;                                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59F9[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 Enemy;                                             // 0x00D0(0x0028)(Edit, BlueprintVisible)
	class APawn*                                  Bot_ref;                                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDistance;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NPCBodyPart                                 DamageAreaFocusBBName;                             // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59FA[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxShortOffset;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinShortOffset;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_NPCBodyPart, int32>                    ShortProbability;                                  // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void Get_Weight_Body_Part(const TMap<E_NPCBodyPart, int32>& InMapProbability, E_NPCBodyPart* ReturnBodyPart);
	void ExecuteUbergraph_BTService_CalculateOffset(int32 EntryPoint);
	void CalcOffset(class AActor* Param_Enemy, double* Offset);
	void BodyPart_basedonDistance(EDistanceToTargetEnum Distance, bool Token, E_NPCBodyPart* TargetonBody);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTService_CalculateOffset_C">();
	}
	static class UBTService_CalculateOffset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_CalculateOffset_C>();
	}
};
static_assert(alignof(UBTService_CalculateOffset_C) == 0x000008, "Wrong alignment on UBTService_CalculateOffset_C");
static_assert(sizeof(UBTService_CalculateOffset_C) == 0x000170, "Wrong size on UBTService_CalculateOffset_C");
static_assert(offsetof(UBTService_CalculateOffset_C, UberGraphFrame) == 0x000098, "Member 'UBTService_CalculateOffset_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, MaxMiddleOffset) == 0x0000A0, "Member 'UBTService_CalculateOffset_C::MaxMiddleOffset' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, BBOffsetName) == 0x0000A8, "Member 'UBTService_CalculateOffset_C::BBOffsetName' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, Range) == 0x0000B0, "Member 'UBTService_CalculateOffset_C::Range' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, MinMiddleOffset) == 0x0000C0, "Member 'UBTService_CalculateOffset_C::MinMiddleOffset' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, Sign) == 0x0000C8, "Member 'UBTService_CalculateOffset_C::Sign' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, Enemy) == 0x0000D0, "Member 'UBTService_CalculateOffset_C::Enemy' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, Bot_ref) == 0x0000F8, "Member 'UBTService_CalculateOffset_C::Bot_ref' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, ShortDistance) == 0x000100, "Member 'UBTService_CalculateOffset_C::ShortDistance' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, DamageAreaFocusBBName) == 0x000108, "Member 'UBTService_CalculateOffset_C::DamageAreaFocusBBName' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, MaxShortOffset) == 0x000110, "Member 'UBTService_CalculateOffset_C::MaxShortOffset' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, MinShortOffset) == 0x000118, "Member 'UBTService_CalculateOffset_C::MinShortOffset' has a wrong offset!");
static_assert(offsetof(UBTService_CalculateOffset_C, ShortProbability) == 0x000120, "Member 'UBTService_CalculateOffset_C::ShortProbability' has a wrong offset!");

}

