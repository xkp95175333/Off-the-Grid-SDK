#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVCodecsCoreRHI

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "AVCodecsCoreRHI_structs.hpp"


namespace SDK
{

// Class AVCodecsCoreRHI.SimpleAVHelper
// 0x0000 (0x0028 - 0x0028)
class USimpleAVHelper : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleAVHelper">();
	}
	static class USimpleAVHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleAVHelper>();
	}
};
static_assert(alignof(USimpleAVHelper) == 0x000008, "Wrong alignment on USimpleAVHelper");
static_assert(sizeof(USimpleAVHelper) == 0x000028, "Wrong size on USimpleAVHelper");

// Class AVCodecsCoreRHI.SimpleAudioHelper
// 0x0000 (0x0028 - 0x0028)
class USimpleAudioHelper final : public USimpleAVHelper
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleAudioHelper">();
	}
	static class USimpleAudioHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleAudioHelper>();
	}
};
static_assert(alignof(USimpleAudioHelper) == 0x000008, "Wrong alignment on USimpleAudioHelper");
static_assert(sizeof(USimpleAudioHelper) == 0x000028, "Wrong size on USimpleAudioHelper");

// Class AVCodecsCoreRHI.SimpleAudioEncoder
// 0x0048 (0x0070 - 0x0028)
class USimpleAudioEncoder final : public UObject
{
public:
	uint8                                         Pad_4815[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	bool Open(ESimpleAudioCodec Codec, const struct FSimpleAudioEncoderConfig& Config, bool bAsynchronous);
	bool ReceivePacket(struct FSimpleAudioPacket* OutPacket);
	void ReceivePackets(TArray<struct FSimpleAudioPacket>* OutPackets);
	bool SendFrameFloat(const TArray<float>& Resource, double Timestamp, int32 NumSamples, float SampleDuration);
	void SetConfig(const struct FSimpleAudioEncoderConfig& NewConfig);

	ESimpleAudioCodec GetCodec() const;
	struct FSimpleAudioEncoderConfig GetConfig() const;
	bool IsAsync() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleAudioEncoder">();
	}
	static class USimpleAudioEncoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleAudioEncoder>();
	}
};
static_assert(alignof(USimpleAudioEncoder) == 0x000008, "Wrong alignment on USimpleAudioEncoder");
static_assert(sizeof(USimpleAudioEncoder) == 0x000070, "Wrong size on USimpleAudioEncoder");

// Class AVCodecsCoreRHI.SimpleVideoHelper
// 0x0000 (0x0028 - 0x0028)
class USimpleVideoHelper final : public USimpleAVHelper
{
public:
	static void ShareRenderTarget2D(class UTextureRenderTarget2D* RenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleVideoHelper">();
	}
	static class USimpleVideoHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleVideoHelper>();
	}
};
static_assert(alignof(USimpleVideoHelper) == 0x000008, "Wrong alignment on USimpleVideoHelper");
static_assert(sizeof(USimpleVideoHelper) == 0x000028, "Wrong size on USimpleVideoHelper");

// Class AVCodecsCoreRHI.SimpleVideoDecoder
// 0x0038 (0x0060 - 0x0028)
class USimpleVideoDecoder final : public UObject
{
public:
	uint8                                         Pad_481A[0x38];                                    // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	bool Open(ESimpleVideoCodec Codec, bool bAsynchronous);
	bool ReceiveFrame(class UTextureRenderTarget2D* Resource);
	bool SendPacket(const struct FSimpleVideoPacket& Packet);

	ESimpleVideoCodec GetCodec() const;
	bool IsAsync() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleVideoDecoder">();
	}
	static class USimpleVideoDecoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleVideoDecoder>();
	}
};
static_assert(alignof(USimpleVideoDecoder) == 0x000008, "Wrong alignment on USimpleVideoDecoder");
static_assert(sizeof(USimpleVideoDecoder) == 0x000060, "Wrong size on USimpleVideoDecoder");

// Class AVCodecsCoreRHI.SimpleVideoEncoder
// 0x0048 (0x0070 - 0x0028)
class USimpleVideoEncoder final : public UObject
{
public:
	uint8                                         Pad_481D[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	bool Open(ESimpleVideoCodec Codec, const struct FSimpleVideoEncoderConfig& Config, bool bAsynchronous);
	bool ReceivePacket(struct FSimpleVideoPacket* OutPacket);
	void ReceivePackets(TArray<struct FSimpleVideoPacket>* OutPackets);
	bool SendFrameRenderTarget(class UTextureRenderTarget2D* Resource, double Timestamp, bool bForceKeyframe);
	bool SendFrameTexture(class UTexture2D* Resource, double Timestamp, bool bForceKeyframe);
	void SetConfig(const struct FSimpleVideoEncoderConfig& NewConfig);

	ESimpleVideoCodec GetCodec() const;
	struct FSimpleVideoEncoderConfig GetConfig() const;
	bool IsAsync() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleVideoEncoder">();
	}
	static class USimpleVideoEncoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleVideoEncoder>();
	}
};
static_assert(alignof(USimpleVideoEncoder) == 0x000008, "Wrong alignment on USimpleVideoEncoder");
static_assert(sizeof(USimpleVideoEncoder) == 0x000070, "Wrong size on USimpleVideoEncoder");

}

