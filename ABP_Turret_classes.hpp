#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Turret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_Turret_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Turret.ABP_Turret_C
// 0x06C0 (0x0A30 - 0x0370)
class UABP_Turret_C final : public UAnimInstance
{
public:
	uint8                                         Pad_5B22[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Turret::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x001C)(HasGetValueTypeHash)
	uint8                                         Pad_5B23[0x4];                                     // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0398(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03A0(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03A8(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03C8(0x0028)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_2;          // 0x03F0(0x0118)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x0508(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0548(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0568(0x0040)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace_1;          // 0x05A8(0x0118)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x06C0(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0708(0x0070)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x0778(0x0118)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0890(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x08B0(0x00C8)()
	struct FVector                                K2Node_PropertyAccess_4;                           // 0x0978(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_PropertyAccess_3;                           // 0x0990(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_2;                           // 0x0998(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_PropertyAccess_1;                           // 0x09B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_NPC_StandTurret_C*                  K2Node_PropertyAccess;                             // 0x09C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         TurretHead;                                        // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B24[0x4];                                     // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TurretAim;                                         // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetDistance;                                    // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetCharacter;                                 // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurretDestroy;                                   // 0x09E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B25[0x2];                                     // 0x09EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance_to_Target_Ref;                            // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Angle_to_Target_Ref;                               // 0x09F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 TargetActor;                                       // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0A10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateTurretData();
	void TurretDestroyed();
	class ABP_NPC_StandTurret_C* GetOwnerData();
	void ExecuteUbergraph_ABP_Turret(int32 EntryPoint);
	void DrawDebug(bool EnableDebug_);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintInitializeAnimation();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Turret_C">();
	}
	static class UABP_Turret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Turret_C>();
	}
};
static_assert(alignof(UABP_Turret_C) == 0x000010, "Wrong alignment on UABP_Turret_C");
static_assert(sizeof(UABP_Turret_C) == 0x000A30, "Wrong size on UABP_Turret_C");
static_assert(offsetof(UABP_Turret_C, UberGraphFrame) == 0x000370, "Member 'UABP_Turret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_Turret_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimBlueprintExtension_PropertyAccess) == 0x000398, "Member 'UABP_Turret_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimBlueprintExtension_Base) == 0x0003A0, "Member 'UABP_Turret_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_Root) == 0x0003A8, "Member 'UABP_Turret_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_TransitionResult) == 0x0003C8, "Member 'UABP_Turret_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_RotationOffsetBlendSpace_2) == 0x0003F0, "Member 'UABP_Turret_C::AnimGraphNode_RotationOffsetBlendSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_SequenceEvaluator_1) == 0x000508, "Member 'UABP_Turret_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_StateResult_1) == 0x000548, "Member 'UABP_Turret_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_SequenceEvaluator) == 0x000568, "Member 'UABP_Turret_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_RotationOffsetBlendSpace_1) == 0x0005A8, "Member 'UABP_Turret_C::AnimGraphNode_RotationOffsetBlendSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_BlendListByBool) == 0x0006C0, "Member 'UABP_Turret_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_BlendSpacePlayer) == 0x000708, "Member 'UABP_Turret_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x000778, "Member 'UABP_Turret_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_StateResult) == 0x000890, "Member 'UABP_Turret_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, AnimGraphNode_StateMachine) == 0x0008B0, "Member 'UABP_Turret_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, K2Node_PropertyAccess_4) == 0x000978, "Member 'UABP_Turret_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, K2Node_PropertyAccess_3) == 0x000990, "Member 'UABP_Turret_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, K2Node_PropertyAccess_2) == 0x000998, "Member 'UABP_Turret_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, K2Node_PropertyAccess_1) == 0x0009B0, "Member 'UABP_Turret_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, K2Node_PropertyAccess) == 0x0009C8, "Member 'UABP_Turret_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, TurretHead) == 0x0009D0, "Member 'UABP_Turret_C::TurretHead' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, TurretAim) == 0x0009D8, "Member 'UABP_Turret_C::TurretAim' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, TargetDistance) == 0x0009E0, "Member 'UABP_Turret_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, IsTargetCharacter) == 0x0009E8, "Member 'UABP_Turret_C::IsTargetCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, IsTurretDestroy) == 0x0009E9, "Member 'UABP_Turret_C::IsTurretDestroy' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, Distance_to_Target_Ref) == 0x0009EC, "Member 'UABP_Turret_C::Distance_to_Target_Ref' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, Angle_to_Target_Ref) == 0x0009F0, "Member 'UABP_Turret_C::Angle_to_Target_Ref' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, TargetActor) == 0x000A08, "Member 'UABP_Turret_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UABP_Turret_C, TargetLocation) == 0x000A10, "Member 'UABP_Turret_C::TargetLocation' has a wrong offset!");

}

