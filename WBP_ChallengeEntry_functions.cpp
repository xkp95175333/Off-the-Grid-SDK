#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ChallengeEntry

#include "Basic.hpp"

#include "WBP_ChallengeEntry_classes.hpp"
#include "WBP_ChallengeEntry_parameters.hpp"


namespace SDK
{

// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.UpdateProgressText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::UpdateProgressText(int32 Current, int32 Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "UpdateProgressText");

	Params::WBP_ChallengeEntry_C_UpdateProgressText Parms{};

	Parms.Current = Current;
	Parms.Max = Max;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.UpdateProgressBox
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::UpdateProgressBox(int32 Current, int32 Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "UpdateProgressBox");

	Params::WBP_ChallengeEntry_C_UpdateProgressBox Parms{};

	Parms.Current = Current;
	Parms.Max = Max;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.PullDataFromTrialTemplate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGzTrialTemplate*                 SourceTemplate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::PullDataFromTrialTemplate(class UGzTrialTemplate* SourceTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "PullDataFromTrialTemplate");

	Params::WBP_ChallengeEntry_C_PullDataFromTrialTemplate Parms{};

	Parms.SourceTemplate = SourceTemplate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.PullDataFromGameplayTrial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzGameplayTrial                 SourceTrial                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWBP_ChallengeEntry_C::PullDataFromGameplayTrial(const struct FGzGameplayTrial& SourceTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "PullDataFromGameplayTrial");

	Params::WBP_ChallengeEntry_C_PullDataFromGameplayTrial Parms{};

	Parms.SourceTrial = std::move(SourceTrial);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.HandleChallengeCompleted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGzTrialTemplate*                 NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::HandleChallengeCompleted(class UGzTrialTemplate* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "HandleChallengeCompleted");

	Params::WBP_ChallengeEntry_C_HandleChallengeCompleted Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.HandleAchievementStageCompleted
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGzTrialTemplate*                 AchievementTemplate                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   CompletedStageIdx                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::HandleAchievementStageCompleted(class UGzTrialTemplate* AchievementTemplate, int32 CompletedStageIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "HandleAchievementStageCompleted");

	Params::WBP_ChallengeEntry_C_HandleAchievementStageCompleted Parms{};

	Parms.AchievementTemplate = AchievementTemplate;
	Parms.CompletedStageIdx = CompletedStageIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_ChallengeEntry.WBP_ChallengeEntry_C.GetCurrentStage
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzGameplayTrial                 GameplayTrial                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// int32                                   CurrentStageNumber                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ChallengeEntry_C::GetCurrentStage(const struct FGzGameplayTrial& GameplayTrial, int32* CurrentStageNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ChallengeEntry_C", "GetCurrentStage");

	Params::WBP_ChallengeEntry_C_GetCurrentStage Parms{};

	Parms.GameplayTrial = std::move(GameplayTrial);

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentStageNumber != nullptr)
		*CurrentStageNumber = Parms.CurrentStageNumber;
}

}

