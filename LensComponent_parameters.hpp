#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LensComponent

#include "Basic.hpp"

#include "CinematicCamera_structs.hpp"
#include "CameraCalibrationCore_structs.hpp"
#include "LensComponent_structs.hpp"


namespace SDK::Params
{

// Function LensComponent.LensComponent.ApplyNodalOffset
// 0x0018 (0x0018 - 0x0000)
struct LensComponent_ApplyNodalOffset final
{
public:
	class USceneComponent*                        ComponentToOffset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseManualInputs;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46B3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualFocusInput;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualZoomInput;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46B4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LensComponent_ApplyNodalOffset) == 0x000008, "Wrong alignment on LensComponent_ApplyNodalOffset");
static_assert(sizeof(LensComponent_ApplyNodalOffset) == 0x000018, "Wrong size on LensComponent_ApplyNodalOffset");
static_assert(offsetof(LensComponent_ApplyNodalOffset, ComponentToOffset) == 0x000000, "Member 'LensComponent_ApplyNodalOffset::ComponentToOffset' has a wrong offset!");
static_assert(offsetof(LensComponent_ApplyNodalOffset, bUseManualInputs) == 0x000008, "Member 'LensComponent_ApplyNodalOffset::bUseManualInputs' has a wrong offset!");
static_assert(offsetof(LensComponent_ApplyNodalOffset, ManualFocusInput) == 0x00000C, "Member 'LensComponent_ApplyNodalOffset::ManualFocusInput' has a wrong offset!");
static_assert(offsetof(LensComponent_ApplyNodalOffset, ManualZoomInput) == 0x000010, "Member 'LensComponent_ApplyNodalOffset::ManualZoomInput' has a wrong offset!");

// Function LensComponent.LensComponent.SetApplyDistortion
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_SetApplyDistortion final
{
public:
	bool                                          bApply;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetApplyDistortion) == 0x000001, "Wrong alignment on LensComponent_SetApplyDistortion");
static_assert(sizeof(LensComponent_SetApplyDistortion) == 0x000001, "Wrong size on LensComponent_SetApplyDistortion");
static_assert(offsetof(LensComponent_SetApplyDistortion, bApply) == 0x000000, "Member 'LensComponent_SetApplyDistortion::bApply' has a wrong offset!");

// Function LensComponent.LensComponent.SetApplyNodalOffsetOnTick
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_SetApplyNodalOffsetOnTick final
{
public:
	bool                                          bApplyNodalOffset;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetApplyNodalOffsetOnTick) == 0x000001, "Wrong alignment on LensComponent_SetApplyNodalOffsetOnTick");
static_assert(sizeof(LensComponent_SetApplyNodalOffsetOnTick) == 0x000001, "Wrong size on LensComponent_SetApplyNodalOffsetOnTick");
static_assert(offsetof(LensComponent_SetApplyNodalOffsetOnTick, bApplyNodalOffset) == 0x000000, "Member 'LensComponent_SetApplyNodalOffsetOnTick::bApplyNodalOffset' has a wrong offset!");

// Function LensComponent.LensComponent.SetCroppedFilmback
// 0x000C (0x000C - 0x0000)
struct LensComponent_SetCroppedFilmback final
{
public:
	struct FCameraFilmbackSettings                Filmback;                                          // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetCroppedFilmback) == 0x000004, "Wrong alignment on LensComponent_SetCroppedFilmback");
static_assert(sizeof(LensComponent_SetCroppedFilmback) == 0x00000C, "Wrong size on LensComponent_SetCroppedFilmback");
static_assert(offsetof(LensComponent_SetCroppedFilmback, Filmback) == 0x000000, "Member 'LensComponent_SetCroppedFilmback::Filmback' has a wrong offset!");

// Function LensComponent.LensComponent.SetDistortionSource
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_SetDistortionSource final
{
public:
	EDistortionSource                             Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetDistortionSource) == 0x000001, "Wrong alignment on LensComponent_SetDistortionSource");
static_assert(sizeof(LensComponent_SetDistortionSource) == 0x000001, "Wrong size on LensComponent_SetDistortionSource");
static_assert(offsetof(LensComponent_SetDistortionSource, Source) == 0x000000, "Member 'LensComponent_SetDistortionSource::Source' has a wrong offset!");

// Function LensComponent.LensComponent.SetDistortionState
// 0x0030 (0x0030 - 0x0000)
struct LensComponent_SetDistortionState final
{
public:
	struct FLensDistortionState                   State;                                             // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetDistortionState) == 0x000008, "Wrong alignment on LensComponent_SetDistortionState");
static_assert(sizeof(LensComponent_SetDistortionState) == 0x000030, "Wrong size on LensComponent_SetDistortionState");
static_assert(offsetof(LensComponent_SetDistortionState, State) == 0x000000, "Member 'LensComponent_SetDistortionState::State' has a wrong offset!");

// Function LensComponent.LensComponent.SetFilmbackOverrideSetting
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_SetFilmbackOverrideSetting final
{
public:
	EFilmbackOverrideSource                       Setting;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetFilmbackOverrideSetting) == 0x000001, "Wrong alignment on LensComponent_SetFilmbackOverrideSetting");
static_assert(sizeof(LensComponent_SetFilmbackOverrideSetting) == 0x000001, "Wrong size on LensComponent_SetFilmbackOverrideSetting");
static_assert(offsetof(LensComponent_SetFilmbackOverrideSetting, Setting) == 0x000000, "Member 'LensComponent_SetFilmbackOverrideSetting::Setting' has a wrong offset!");

// Function LensComponent.LensComponent.SetFIZEvaluationMode
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_SetFIZEvaluationMode final
{
public:
	EFIZEvaluationMode                            Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetFIZEvaluationMode) == 0x000001, "Wrong alignment on LensComponent_SetFIZEvaluationMode");
static_assert(sizeof(LensComponent_SetFIZEvaluationMode) == 0x000001, "Wrong size on LensComponent_SetFIZEvaluationMode");
static_assert(offsetof(LensComponent_SetFIZEvaluationMode, Mode) == 0x000000, "Member 'LensComponent_SetFIZEvaluationMode::Mode' has a wrong offset!");

// Function LensComponent.LensComponent.SetLensFile
// 0x0008 (0x0008 - 0x0000)
struct LensComponent_SetLensFile final
{
public:
	class ULensFile*                              LensFile;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetLensFile) == 0x000008, "Wrong alignment on LensComponent_SetLensFile");
static_assert(sizeof(LensComponent_SetLensFile) == 0x000008, "Wrong size on LensComponent_SetLensFile");
static_assert(offsetof(LensComponent_SetLensFile, LensFile) == 0x000000, "Member 'LensComponent_SetLensFile::LensFile' has a wrong offset!");

// Function LensComponent.LensComponent.SetLensFilePicker
// 0x0010 (0x0010 - 0x0000)
struct LensComponent_SetLensFilePicker final
{
public:
	struct FLensFilePicker                        LensFile;                                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetLensFilePicker) == 0x000008, "Wrong alignment on LensComponent_SetLensFilePicker");
static_assert(sizeof(LensComponent_SetLensFilePicker) == 0x000010, "Wrong size on LensComponent_SetLensFilePicker");
static_assert(offsetof(LensComponent_SetLensFilePicker, LensFile) == 0x000000, "Member 'LensComponent_SetLensFilePicker::LensFile' has a wrong offset!");

// Function LensComponent.LensComponent.SetLensModel
// 0x0008 (0x0008 - 0x0000)
struct LensComponent_SetLensModel final
{
public:
	TSubclassOf<class ULensModel>                 Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetLensModel) == 0x000008, "Wrong alignment on LensComponent_SetLensModel");
static_assert(sizeof(LensComponent_SetLensModel) == 0x000008, "Wrong size on LensComponent_SetLensModel");
static_assert(offsetof(LensComponent_SetLensModel, Model) == 0x000000, "Member 'LensComponent_SetLensModel::Model' has a wrong offset!");

// Function LensComponent.LensComponent.SetOverscanMultiplier
// 0x0004 (0x0004 - 0x0000)
struct LensComponent_SetOverscanMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_SetOverscanMultiplier) == 0x000004, "Wrong alignment on LensComponent_SetOverscanMultiplier");
static_assert(sizeof(LensComponent_SetOverscanMultiplier) == 0x000004, "Wrong size on LensComponent_SetOverscanMultiplier");
static_assert(offsetof(LensComponent_SetOverscanMultiplier, Multiplier) == 0x000000, "Member 'LensComponent_SetOverscanMultiplier::Multiplier' has a wrong offset!");

// Function LensComponent.LensComponent.GetCroppedFilmback
// 0x000C (0x000C - 0x0000)
struct LensComponent_GetCroppedFilmback final
{
public:
	struct FCameraFilmbackSettings                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetCroppedFilmback) == 0x000004, "Wrong alignment on LensComponent_GetCroppedFilmback");
static_assert(sizeof(LensComponent_GetCroppedFilmback) == 0x00000C, "Wrong size on LensComponent_GetCroppedFilmback");
static_assert(offsetof(LensComponent_GetCroppedFilmback, ReturnValue) == 0x000000, "Member 'LensComponent_GetCroppedFilmback::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetDistortionSource
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_GetDistortionSource final
{
public:
	EDistortionSource                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetDistortionSource) == 0x000001, "Wrong alignment on LensComponent_GetDistortionSource");
static_assert(sizeof(LensComponent_GetDistortionSource) == 0x000001, "Wrong size on LensComponent_GetDistortionSource");
static_assert(offsetof(LensComponent_GetDistortionSource, ReturnValue) == 0x000000, "Member 'LensComponent_GetDistortionSource::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetDistortionState
// 0x0030 (0x0030 - 0x0000)
struct LensComponent_GetDistortionState final
{
public:
	struct FLensDistortionState                   ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetDistortionState) == 0x000008, "Wrong alignment on LensComponent_GetDistortionState");
static_assert(sizeof(LensComponent_GetDistortionState) == 0x000030, "Wrong size on LensComponent_GetDistortionState");
static_assert(offsetof(LensComponent_GetDistortionState, ReturnValue) == 0x000000, "Member 'LensComponent_GetDistortionState::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetFilmbackOverrideSetting
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_GetFilmbackOverrideSetting final
{
public:
	EFilmbackOverrideSource                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetFilmbackOverrideSetting) == 0x000001, "Wrong alignment on LensComponent_GetFilmbackOverrideSetting");
static_assert(sizeof(LensComponent_GetFilmbackOverrideSetting) == 0x000001, "Wrong size on LensComponent_GetFilmbackOverrideSetting");
static_assert(offsetof(LensComponent_GetFilmbackOverrideSetting, ReturnValue) == 0x000000, "Member 'LensComponent_GetFilmbackOverrideSetting::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetFIZEvaluationMode
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_GetFIZEvaluationMode final
{
public:
	EFIZEvaluationMode                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetFIZEvaluationMode) == 0x000001, "Wrong alignment on LensComponent_GetFIZEvaluationMode");
static_assert(sizeof(LensComponent_GetFIZEvaluationMode) == 0x000001, "Wrong size on LensComponent_GetFIZEvaluationMode");
static_assert(offsetof(LensComponent_GetFIZEvaluationMode, ReturnValue) == 0x000000, "Member 'LensComponent_GetFIZEvaluationMode::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetLensDistortionHandler
// 0x0008 (0x0008 - 0x0000)
struct LensComponent_GetLensDistortionHandler final
{
public:
	class ULensDistortionModelHandlerBase*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetLensDistortionHandler) == 0x000008, "Wrong alignment on LensComponent_GetLensDistortionHandler");
static_assert(sizeof(LensComponent_GetLensDistortionHandler) == 0x000008, "Wrong size on LensComponent_GetLensDistortionHandler");
static_assert(offsetof(LensComponent_GetLensDistortionHandler, ReturnValue) == 0x000000, "Member 'LensComponent_GetLensDistortionHandler::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetLensFile
// 0x0008 (0x0008 - 0x0000)
struct LensComponent_GetLensFile final
{
public:
	class ULensFile*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetLensFile) == 0x000008, "Wrong alignment on LensComponent_GetLensFile");
static_assert(sizeof(LensComponent_GetLensFile) == 0x000008, "Wrong size on LensComponent_GetLensFile");
static_assert(offsetof(LensComponent_GetLensFile, ReturnValue) == 0x000000, "Member 'LensComponent_GetLensFile::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetLensFileEvaluationInputs
// 0x001C (0x001C - 0x0000)
struct LensComponent_GetLensFileEvaluationInputs final
{
public:
	struct FLensFileEvaluationInputs              ReturnValue;                                       // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetLensFileEvaluationInputs) == 0x000004, "Wrong alignment on LensComponent_GetLensFileEvaluationInputs");
static_assert(sizeof(LensComponent_GetLensFileEvaluationInputs) == 0x00001C, "Wrong size on LensComponent_GetLensFileEvaluationInputs");
static_assert(offsetof(LensComponent_GetLensFileEvaluationInputs, ReturnValue) == 0x000000, "Member 'LensComponent_GetLensFileEvaluationInputs::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetLensFilePicker
// 0x0010 (0x0010 - 0x0000)
struct LensComponent_GetLensFilePicker final
{
public:
	struct FLensFilePicker                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetLensFilePicker) == 0x000008, "Wrong alignment on LensComponent_GetLensFilePicker");
static_assert(sizeof(LensComponent_GetLensFilePicker) == 0x000010, "Wrong size on LensComponent_GetLensFilePicker");
static_assert(offsetof(LensComponent_GetLensFilePicker, ReturnValue) == 0x000000, "Member 'LensComponent_GetLensFilePicker::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetLensModel
// 0x0008 (0x0008 - 0x0000)
struct LensComponent_GetLensModel final
{
public:
	TSubclassOf<class ULensModel>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetLensModel) == 0x000008, "Wrong alignment on LensComponent_GetLensModel");
static_assert(sizeof(LensComponent_GetLensModel) == 0x000008, "Wrong size on LensComponent_GetLensModel");
static_assert(offsetof(LensComponent_GetLensModel, ReturnValue) == 0x000000, "Member 'LensComponent_GetLensModel::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetOriginalFocalLength
// 0x0004 (0x0004 - 0x0000)
struct LensComponent_GetOriginalFocalLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetOriginalFocalLength) == 0x000004, "Wrong alignment on LensComponent_GetOriginalFocalLength");
static_assert(sizeof(LensComponent_GetOriginalFocalLength) == 0x000004, "Wrong size on LensComponent_GetOriginalFocalLength");
static_assert(offsetof(LensComponent_GetOriginalFocalLength, ReturnValue) == 0x000000, "Member 'LensComponent_GetOriginalFocalLength::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.GetOverscanMultiplier
// 0x0004 (0x0004 - 0x0000)
struct LensComponent_GetOverscanMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_GetOverscanMultiplier) == 0x000004, "Wrong alignment on LensComponent_GetOverscanMultiplier");
static_assert(sizeof(LensComponent_GetOverscanMultiplier) == 0x000004, "Wrong size on LensComponent_GetOverscanMultiplier");
static_assert(offsetof(LensComponent_GetOverscanMultiplier, ReturnValue) == 0x000000, "Member 'LensComponent_GetOverscanMultiplier::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.ShouldApplyDistortion
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_ShouldApplyDistortion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_ShouldApplyDistortion) == 0x000001, "Wrong alignment on LensComponent_ShouldApplyDistortion");
static_assert(sizeof(LensComponent_ShouldApplyDistortion) == 0x000001, "Wrong size on LensComponent_ShouldApplyDistortion");
static_assert(offsetof(LensComponent_ShouldApplyDistortion, ReturnValue) == 0x000000, "Member 'LensComponent_ShouldApplyDistortion::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.ShouldApplyNodalOffsetOnTick
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_ShouldApplyNodalOffsetOnTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_ShouldApplyNodalOffsetOnTick) == 0x000001, "Wrong alignment on LensComponent_ShouldApplyNodalOffsetOnTick");
static_assert(sizeof(LensComponent_ShouldApplyNodalOffsetOnTick) == 0x000001, "Wrong size on LensComponent_ShouldApplyNodalOffsetOnTick");
static_assert(offsetof(LensComponent_ShouldApplyNodalOffsetOnTick, ReturnValue) == 0x000000, "Member 'LensComponent_ShouldApplyNodalOffsetOnTick::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.WasDistortionEvaluated
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_WasDistortionEvaluated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_WasDistortionEvaluated) == 0x000001, "Wrong alignment on LensComponent_WasDistortionEvaluated");
static_assert(sizeof(LensComponent_WasDistortionEvaluated) == 0x000001, "Wrong size on LensComponent_WasDistortionEvaluated");
static_assert(offsetof(LensComponent_WasDistortionEvaluated, ReturnValue) == 0x000000, "Member 'LensComponent_WasDistortionEvaluated::ReturnValue' has a wrong offset!");

// Function LensComponent.LensComponent.WasNodalOffsetAppliedThisTick
// 0x0001 (0x0001 - 0x0000)
struct LensComponent_WasNodalOffsetAppliedThisTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LensComponent_WasNodalOffsetAppliedThisTick) == 0x000001, "Wrong alignment on LensComponent_WasNodalOffsetAppliedThisTick");
static_assert(sizeof(LensComponent_WasNodalOffsetAppliedThisTick) == 0x000001, "Wrong size on LensComponent_WasNodalOffsetAppliedThisTick");
static_assert(offsetof(LensComponent_WasNodalOffsetAppliedThisTick, ReturnValue) == 0x000000, "Member 'LensComponent_WasNodalOffsetAppliedThisTick::ReturnValue' has a wrong offset!");

}

