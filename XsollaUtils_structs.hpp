#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaUtils

#include "Basic.hpp"


namespace SDK
{

// Enum XsollaUtils.EXsollaVariantTypes
// NumValues: 0x0029
enum class EXsollaVariantTypes : uint8
{
	Empty                                    = 0,
	Ansichar                                 = 1,
	Bool                                     = 2,
	Box                                      = 3,
	BoxSphereBounds                          = 4,
	ByteArray                                = 5,
	Color                                    = 6,
	DateTime                                 = 7,
	Double                                   = 8,
	Enum                                     = 9,
	Float                                    = 10,
	Guid                                     = 11,
	Int8                                     = 12,
	Int16                                    = 13,
	Int32                                    = 14,
	Int64                                    = 15,
	IntRect                                  = 16,
	LinearColor                              = 17,
	Matrix                                   = 18,
	Name                                     = 19,
	Plane                                    = 20,
	Quat                                     = 21,
	RandomStream                             = 22,
	Rotator                                  = 23,
	String                                   = 24,
	Widechar                                 = 25,
	Timespan                                 = 26,
	Transform                                = 27,
	TwoVectors                               = 28,
	UInt8                                    = 29,
	UInt16                                   = 30,
	UInt32                                   = 31,
	UInt64                                   = 32,
	Vector                                   = 33,
	Vector2d                                 = 34,
	Vector4                                  = 35,
	IntPoint                                 = 36,
	IntVector                                = 37,
	NetworkGUID                              = 38,
	Custom                                   = 64,
	EXsollaVariantTypes_MAX                  = 65,
};

// ScriptStruct XsollaUtils.XsollaConsumable
// 0x0004 (0x0004 - 0x0000)
struct FXsollaConsumable final
{
public:
	int32                                         Usages_count;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaConsumable) == 0x000004, "Wrong alignment on FXsollaConsumable");
static_assert(sizeof(FXsollaConsumable) == 0x000004, "Wrong size on FXsollaConsumable");
static_assert(offsetof(FXsollaConsumable, Usages_count) == 0x000000, "Member 'FXsollaConsumable::Usages_count' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaExpirationPeriod
// 0x0018 (0x0018 - 0x0000)
struct FXsollaExpirationPeriod final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2814[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaExpirationPeriod) == 0x000008, "Wrong alignment on FXsollaExpirationPeriod");
static_assert(sizeof(FXsollaExpirationPeriod) == 0x000018, "Wrong size on FXsollaExpirationPeriod");
static_assert(offsetof(FXsollaExpirationPeriod, Value) == 0x000000, "Member 'FXsollaExpirationPeriod::Value' has a wrong offset!");
static_assert(offsetof(FXsollaExpirationPeriod, Type) == 0x000008, "Member 'FXsollaExpirationPeriod::Type' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaItemOptions
// 0x0020 (0x0020 - 0x0000)
struct FXsollaItemOptions final
{
public:
	struct FXsollaConsumable                      Consumable;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2815[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaExpirationPeriod                Expiration_period;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaItemOptions) == 0x000008, "Wrong alignment on FXsollaItemOptions");
static_assert(sizeof(FXsollaItemOptions) == 0x000020, "Wrong size on FXsollaItemOptions");
static_assert(offsetof(FXsollaItemOptions, Consumable) == 0x000000, "Member 'FXsollaItemOptions::Consumable' has a wrong offset!");
static_assert(offsetof(FXsollaItemOptions, Expiration_period) == 0x000008, "Member 'FXsollaItemOptions::Expiration_period' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaVirtualCurrencyCalculatedPrice
// 0x0020 (0x0020 - 0x0000)
struct FXsollaVirtualCurrencyCalculatedPrice final
{
public:
	class FString                                 Amount;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Amount_without_discount;                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaVirtualCurrencyCalculatedPrice) == 0x000008, "Wrong alignment on FXsollaVirtualCurrencyCalculatedPrice");
static_assert(sizeof(FXsollaVirtualCurrencyCalculatedPrice) == 0x000020, "Wrong size on FXsollaVirtualCurrencyCalculatedPrice");
static_assert(offsetof(FXsollaVirtualCurrencyCalculatedPrice, Amount) == 0x000000, "Member 'FXsollaVirtualCurrencyCalculatedPrice::Amount' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyCalculatedPrice, Amount_without_discount) == 0x000010, "Member 'FXsollaVirtualCurrencyCalculatedPrice::Amount_without_discount' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaVirtualCurrencyPrice
// 0x0080 (0x0080 - 0x0000)
struct FXsollaVirtualCurrencyPrice final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_default;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2816[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount_without_discount;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2817[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Image_url;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaVirtualCurrencyCalculatedPrice  Calculated_price;                                  // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaVirtualCurrencyPrice) == 0x000008, "Wrong alignment on FXsollaVirtualCurrencyPrice");
static_assert(sizeof(FXsollaVirtualCurrencyPrice) == 0x000080, "Wrong size on FXsollaVirtualCurrencyPrice");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Sku) == 0x000000, "Member 'FXsollaVirtualCurrencyPrice::Sku' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Is_default) == 0x000010, "Member 'FXsollaVirtualCurrencyPrice::Is_default' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Amount) == 0x000014, "Member 'FXsollaVirtualCurrencyPrice::Amount' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Amount_without_discount) == 0x000018, "Member 'FXsollaVirtualCurrencyPrice::Amount_without_discount' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Image_url) == 0x000020, "Member 'FXsollaVirtualCurrencyPrice::Image_url' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Name) == 0x000030, "Member 'FXsollaVirtualCurrencyPrice::Name' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Description) == 0x000040, "Member 'FXsollaVirtualCurrencyPrice::Description' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Type) == 0x000050, "Member 'FXsollaVirtualCurrencyPrice::Type' has a wrong offset!");
static_assert(offsetof(FXsollaVirtualCurrencyPrice, Calculated_price) == 0x000060, "Member 'FXsollaVirtualCurrencyPrice::Calculated_price' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaPrice
// 0x0030 (0x0030 - 0x0000)
struct FXsollaPrice final
{
public:
	class FString                                 Amount;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Amount_without_discount;                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaPrice) == 0x000008, "Wrong alignment on FXsollaPrice");
static_assert(sizeof(FXsollaPrice) == 0x000030, "Wrong size on FXsollaPrice");
static_assert(offsetof(FXsollaPrice, Amount) == 0x000000, "Member 'FXsollaPrice::Amount' has a wrong offset!");
static_assert(offsetof(FXsollaPrice, Amount_without_discount) == 0x000010, "Member 'FXsollaPrice::Amount_without_discount' has a wrong offset!");
static_assert(offsetof(FXsollaPrice, Currency) == 0x000020, "Member 'FXsollaPrice::Currency' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaItemGroup
// 0x0060 (0x0060 - 0x0000)
struct FXsollaItemGroup final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2818[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 External_id;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parent_external_id;                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaItemGroup) == 0x000008, "Wrong alignment on FXsollaItemGroup");
static_assert(sizeof(FXsollaItemGroup) == 0x000060, "Wrong size on FXsollaItemGroup");
static_assert(offsetof(FXsollaItemGroup, ID) == 0x000000, "Member 'FXsollaItemGroup::ID' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, External_id) == 0x000008, "Member 'FXsollaItemGroup::External_id' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Name) == 0x000018, "Member 'FXsollaItemGroup::Name' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Description) == 0x000028, "Member 'FXsollaItemGroup::Description' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Image_url) == 0x000038, "Member 'FXsollaItemGroup::Image_url' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Level) == 0x000048, "Member 'FXsollaItemGroup::Level' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Order) == 0x00004C, "Member 'FXsollaItemGroup::Order' has a wrong offset!");
static_assert(offsetof(FXsollaItemGroup, Parent_external_id) == 0x000050, "Member 'FXsollaItemGroup::Parent_external_id' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaItemAttributeValue
// 0x0020 (0x0020 - 0x0000)
struct FXsollaItemAttributeValue final
{
public:
	class FString                                 External_id;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaItemAttributeValue) == 0x000008, "Wrong alignment on FXsollaItemAttributeValue");
static_assert(sizeof(FXsollaItemAttributeValue) == 0x000020, "Wrong size on FXsollaItemAttributeValue");
static_assert(offsetof(FXsollaItemAttributeValue, External_id) == 0x000000, "Member 'FXsollaItemAttributeValue::External_id' has a wrong offset!");
static_assert(offsetof(FXsollaItemAttributeValue, Value) == 0x000010, "Member 'FXsollaItemAttributeValue::Value' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaItemAttribute
// 0x0030 (0x0030 - 0x0000)
struct FXsollaItemAttribute final
{
public:
	class FString                                 External_id;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaItemAttributeValue>      Values;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaItemAttribute) == 0x000008, "Wrong alignment on FXsollaItemAttribute");
static_assert(sizeof(FXsollaItemAttribute) == 0x000030, "Wrong size on FXsollaItemAttribute");
static_assert(offsetof(FXsollaItemAttribute, External_id) == 0x000000, "Member 'FXsollaItemAttribute::External_id' has a wrong offset!");
static_assert(offsetof(FXsollaItemAttribute, Name) == 0x000010, "Member 'FXsollaItemAttribute::Name' has a wrong offset!");
static_assert(offsetof(FXsollaItemAttribute, Values) == 0x000020, "Member 'FXsollaItemAttribute::Values' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemRecurrentSchedule
// 0x0018 (0x0018 - 0x0000)
struct FXsollaStoreItemRecurrentSchedule final
{
public:
	class FString                                 Interval_type;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reset_next_date;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2819[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaStoreItemRecurrentSchedule) == 0x000008, "Wrong alignment on FXsollaStoreItemRecurrentSchedule");
static_assert(sizeof(FXsollaStoreItemRecurrentSchedule) == 0x000018, "Wrong size on FXsollaStoreItemRecurrentSchedule");
static_assert(offsetof(FXsollaStoreItemRecurrentSchedule, Interval_type) == 0x000000, "Member 'FXsollaStoreItemRecurrentSchedule::Interval_type' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemRecurrentSchedule, Reset_next_date) == 0x000010, "Member 'FXsollaStoreItemRecurrentSchedule::Reset_next_date' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemLimitsPerUser
// 0x0020 (0x0020 - 0x0000)
struct FXsollaStoreItemLimitsPerUser final
{
public:
	int32                                         Available;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemRecurrentSchedule      Recurrent_schedule;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreItemLimitsPerUser) == 0x000008, "Wrong alignment on FXsollaStoreItemLimitsPerUser");
static_assert(sizeof(FXsollaStoreItemLimitsPerUser) == 0x000020, "Wrong size on FXsollaStoreItemLimitsPerUser");
static_assert(offsetof(FXsollaStoreItemLimitsPerUser, Available) == 0x000000, "Member 'FXsollaStoreItemLimitsPerUser::Available' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemLimitsPerUser, Total) == 0x000004, "Member 'FXsollaStoreItemLimitsPerUser::Total' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemLimitsPerUser, Recurrent_schedule) == 0x000008, "Member 'FXsollaStoreItemLimitsPerUser::Recurrent_schedule' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemLimits
// 0x0020 (0x0020 - 0x0000)
struct FXsollaStoreItemLimits final
{
public:
	struct FXsollaStoreItemLimitsPerUser          Per_user;                                          // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreItemLimits) == 0x000008, "Wrong alignment on FXsollaStoreItemLimits");
static_assert(sizeof(FXsollaStoreItemLimits) == 0x000020, "Wrong size on FXsollaStoreItemLimits");
static_assert(offsetof(FXsollaStoreItemLimits, Per_user) == 0x000000, "Member 'FXsollaStoreItemLimits::Per_user' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemDiscount
// 0x0020 (0x0020 - 0x0000)
struct FXsollaStoreItemDiscount final
{
public:
	class FString                                 Percent;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreItemDiscount) == 0x000008, "Wrong alignment on FXsollaStoreItemDiscount");
static_assert(sizeof(FXsollaStoreItemDiscount) == 0x000020, "Wrong size on FXsollaStoreItemDiscount");
static_assert(offsetof(FXsollaStoreItemDiscount, Percent) == 0x000000, "Member 'FXsollaStoreItemDiscount::Percent' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemDiscount, Value) == 0x000010, "Member 'FXsollaStoreItemDiscount::Value' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemBonus
// 0x0018 (0x0018 - 0x0000)
struct FXsollaStoreItemBonus final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaStoreItemBonus) == 0x000008, "Wrong alignment on FXsollaStoreItemBonus");
static_assert(sizeof(FXsollaStoreItemBonus) == 0x000018, "Wrong size on FXsollaStoreItemBonus");
static_assert(offsetof(FXsollaStoreItemBonus, Sku) == 0x000000, "Member 'FXsollaStoreItemBonus::Sku' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemBonus, Quantity) == 0x000010, "Member 'FXsollaStoreItemBonus::Quantity' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaPromotionLimitsPerUser
// 0x0008 (0x0008 - 0x0000)
struct FXsollaPromotionLimitsPerUser final
{
public:
	int32                                         Available;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaPromotionLimitsPerUser) == 0x000004, "Wrong alignment on FXsollaPromotionLimitsPerUser");
static_assert(sizeof(FXsollaPromotionLimitsPerUser) == 0x000008, "Wrong size on FXsollaPromotionLimitsPerUser");
static_assert(offsetof(FXsollaPromotionLimitsPerUser, Available) == 0x000000, "Member 'FXsollaPromotionLimitsPerUser::Available' has a wrong offset!");
static_assert(offsetof(FXsollaPromotionLimitsPerUser, Total) == 0x000004, "Member 'FXsollaPromotionLimitsPerUser::Total' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaPromotionLimits
// 0x0008 (0x0008 - 0x0000)
struct FXsollaPromotionLimits final
{
public:
	struct FXsollaPromotionLimitsPerUser          Per_user;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaPromotionLimits) == 0x000004, "Wrong alignment on FXsollaPromotionLimits");
static_assert(sizeof(FXsollaPromotionLimits) == 0x000008, "Wrong size on FXsollaPromotionLimits");
static_assert(offsetof(FXsollaPromotionLimits, Per_user) == 0x000000, "Member 'FXsollaPromotionLimits::Per_user' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaStoreItemPromotion
// 0x0068 (0x0068 - 0x0000)
struct FXsollaStoreItemPromotion final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date_start;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date_end;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaStoreItemDiscount               Discount;                                          // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FXsollaStoreItemBonus>          bonus;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FXsollaPromotionLimits                 Limits;                                            // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreItemPromotion) == 0x000008, "Wrong alignment on FXsollaStoreItemPromotion");
static_assert(sizeof(FXsollaStoreItemPromotion) == 0x000068, "Wrong size on FXsollaStoreItemPromotion");
static_assert(offsetof(FXsollaStoreItemPromotion, Name) == 0x000000, "Member 'FXsollaStoreItemPromotion::Name' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemPromotion, Date_start) == 0x000010, "Member 'FXsollaStoreItemPromotion::Date_start' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemPromotion, Date_end) == 0x000020, "Member 'FXsollaStoreItemPromotion::Date_end' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemPromotion, Discount) == 0x000030, "Member 'FXsollaStoreItemPromotion::Discount' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemPromotion, bonus) == 0x000050, "Member 'FXsollaStoreItemPromotion::bonus' has a wrong offset!");
static_assert(offsetof(FXsollaStoreItemPromotion, Limits) == 0x000060, "Member 'FXsollaStoreItemPromotion::Limits' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaUnitItem
// 0x0050 (0x0050 - 0x0000)
struct FXsollaUnitItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Drm_name;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Drm_sku;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaUnitItem) == 0x000008, "Wrong alignment on FXsollaUnitItem");
static_assert(sizeof(FXsollaUnitItem) == 0x000050, "Wrong size on FXsollaUnitItem");
static_assert(offsetof(FXsollaUnitItem, Sku) == 0x000000, "Member 'FXsollaUnitItem::Sku' has a wrong offset!");
static_assert(offsetof(FXsollaUnitItem, Name) == 0x000010, "Member 'FXsollaUnitItem::Name' has a wrong offset!");
static_assert(offsetof(FXsollaUnitItem, Type) == 0x000020, "Member 'FXsollaUnitItem::Type' has a wrong offset!");
static_assert(offsetof(FXsollaUnitItem, Drm_name) == 0x000030, "Member 'FXsollaUnitItem::Drm_name' has a wrong offset!");
static_assert(offsetof(FXsollaUnitItem, Drm_sku) == 0x000040, "Member 'FXsollaUnitItem::Drm_sku' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaRewardItem
// 0x0070 (0x0070 - 0x0000)
struct FXsollaRewardItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Virtual_item_type;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FXsollaUnitItem>                Unit_items;                                        // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaRewardItem) == 0x000008, "Wrong alignment on FXsollaRewardItem");
static_assert(sizeof(FXsollaRewardItem) == 0x000070, "Wrong size on FXsollaRewardItem");
static_assert(offsetof(FXsollaRewardItem, Sku) == 0x000000, "Member 'FXsollaRewardItem::Sku' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Name) == 0x000010, "Member 'FXsollaRewardItem::Name' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Type) == 0x000020, "Member 'FXsollaRewardItem::Type' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Virtual_item_type) == 0x000030, "Member 'FXsollaRewardItem::Virtual_item_type' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Description) == 0x000040, "Member 'FXsollaRewardItem::Description' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Image_url) == 0x000050, "Member 'FXsollaRewardItem::Image_url' has a wrong offset!");
static_assert(offsetof(FXsollaRewardItem, Unit_items) == 0x000060, "Member 'FXsollaRewardItem::Unit_items' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaBonusItem
// 0x0078 (0x0078 - 0x0000)
struct FXsollaBonusItem final
{
public:
	struct FXsollaRewardItem                      Item;                                              // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281B[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaBonusItem) == 0x000008, "Wrong alignment on FXsollaBonusItem");
static_assert(sizeof(FXsollaBonusItem) == 0x000078, "Wrong size on FXsollaBonusItem");
static_assert(offsetof(FXsollaBonusItem, Item) == 0x000000, "Member 'FXsollaBonusItem::Item' has a wrong offset!");
static_assert(offsetof(FXsollaBonusItem, Quantity) == 0x000070, "Member 'FXsollaBonusItem::Quantity' has a wrong offset!");

// ScriptStruct XsollaUtils.ErrorHandlersWrapper
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FErrorHandlersWrapper final
{
public:
	uint8                                         Pad_281C[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FErrorHandlersWrapper) == 0x000008, "Wrong alignment on FErrorHandlersWrapper");
static_assert(sizeof(FErrorHandlersWrapper) == 0x000028, "Wrong size on FErrorHandlersWrapper");

// ScriptStruct XsollaUtils.XsollaPromotionRecurrentSchedule
// 0x0020 (0x0020 - 0x0000)
struct FXsollaPromotionRecurrentSchedule final
{
public:
	class FString                                 Interval_type;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaPromotionRecurrentSchedule) == 0x000008, "Wrong alignment on FXsollaPromotionRecurrentSchedule");
static_assert(sizeof(FXsollaPromotionRecurrentSchedule) == 0x000020, "Wrong size on FXsollaPromotionRecurrentSchedule");
static_assert(offsetof(FXsollaPromotionRecurrentSchedule, Interval_type) == 0x000000, "Member 'FXsollaPromotionRecurrentSchedule::Interval_type' has a wrong offset!");
static_assert(offsetof(FXsollaPromotionRecurrentSchedule, Time) == 0x000010, "Member 'FXsollaPromotionRecurrentSchedule::Time' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaJsonVariant
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FXsollaJsonVariant final
{
public:
	uint8                                         Pad_281D[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaJsonVariant) == 0x000008, "Wrong alignment on FXsollaJsonVariant");
static_assert(sizeof(FXsollaJsonVariant) == 0x000018, "Wrong size on FXsollaJsonVariant");

// ScriptStruct XsollaUtils.XsollaParameters
// 0x0050 (0x0050 - 0x0000)
struct FXsollaParameters final
{
public:
	TMap<class FString, struct FXsollaJsonVariant> Parameters;                                        // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaParameters) == 0x000008, "Wrong alignment on FXsollaParameters");
static_assert(sizeof(FXsollaParameters) == 0x000050, "Wrong size on FXsollaParameters");
static_assert(offsetof(FXsollaParameters, Parameters) == 0x000000, "Member 'FXsollaParameters::Parameters' has a wrong offset!");

// ScriptStruct XsollaUtils.XsollaPaymentTokenRequestPayload
// 0x0090 (0x0090 - 0x0000)
struct FXsollaPaymentTokenRequestPayload final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXsollaParameters                      CustomParameters;                                  // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ExternalId;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaPaymentTokenRequestPayload) == 0x000008, "Wrong alignment on FXsollaPaymentTokenRequestPayload");
static_assert(sizeof(FXsollaPaymentTokenRequestPayload) == 0x000090, "Wrong size on FXsollaPaymentTokenRequestPayload");
static_assert(offsetof(FXsollaPaymentTokenRequestPayload, Currency) == 0x000000, "Member 'FXsollaPaymentTokenRequestPayload::Currency' has a wrong offset!");
static_assert(offsetof(FXsollaPaymentTokenRequestPayload, Country) == 0x000010, "Member 'FXsollaPaymentTokenRequestPayload::Country' has a wrong offset!");
static_assert(offsetof(FXsollaPaymentTokenRequestPayload, Locale) == 0x000020, "Member 'FXsollaPaymentTokenRequestPayload::Locale' has a wrong offset!");
static_assert(offsetof(FXsollaPaymentTokenRequestPayload, CustomParameters) == 0x000030, "Member 'FXsollaPaymentTokenRequestPayload::CustomParameters' has a wrong offset!");
static_assert(offsetof(FXsollaPaymentTokenRequestPayload, ExternalId) == 0x000080, "Member 'FXsollaPaymentTokenRequestPayload::ExternalId' has a wrong offset!");

}

