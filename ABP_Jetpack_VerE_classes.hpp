#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Jetpack_VerE

#include "Basic.hpp"

#include "AnimationWarpingRuntime_structs.hpp"
#include "ABP_Jetpack_VerE_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "InputJetpackControl_VerD_E_structs.hpp"
#include "ControlRig_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Jetpack_VerE.ABP_Jetpack_VerE_C
// 0x29B0 (0x3260 - 0x08B0)
class UABP_Jetpack_VerE_C final : public UGzAbilityAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Jetpack_VerE::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x08B8(0x0020)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x08D8(0x0008)()
	struct FAnimSubsystemInstance_NodeRelevancy   AnimBlueprintExtension_NodeRelevancy;              // 0x08E0(0x00A8)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0988(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_21;                             // 0x0990(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_20;                             // 0x09B0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_19;                             // 0x09D0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_18;                             // 0x09F0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_17;                             // 0x0A10(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_16;                             // 0x0A30(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_15;                             // 0x0A50(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_14;                             // 0x0A70(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_13;                             // 0x0A90(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_12;                             // 0x0AB0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_11;                             // 0x0AD0(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x0AF0(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_10;                             // 0x0BA8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_9;                              // 0x0BC8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_8;                              // 0x0BE8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_7;                              // 0x0C08(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_6;                              // 0x0C28(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_5;                              // 0x0C48(0x0020)()
	uint8                                         Pad_5841[0x8];                                     // 0x0C68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x0C70(0x0440)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x10B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x10D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x1100(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x1128(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x1150(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x1178(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x11A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x11C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x11F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1218(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1240(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x1288(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x12A8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x12F0(0x0020)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1310(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x13D8(0x0070)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x1448(0x0118)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3;             // 0x1560(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x1580(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3;             // 0x16A8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x16C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1710(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x1730(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2;             // 0x1858(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2;             // 0x1878(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x1898(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x18E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x1900(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1948(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x1968(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x1A90(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x1BB8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x1CE0(0x0128)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x1E08(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1E50(0x0048)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_2;                       // 0x1E98(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x1F60(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1FA8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1FF0(0x0048)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x2038(0x00C8)()
	struct FAnimNode_OrientationWarping           AnimGraphNode_OrientationWarping_1;                // 0x2100(0x0220)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x2320(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x2340(0x0020)()
	struct FAnimNode_OrientationWarping           AnimGraphNode_OrientationWarping;                  // 0x2360(0x0220)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x2580(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x25A0(0x0020)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x25C0(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x2688(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x26F8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x2718(0x00C8)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x27E0(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x2CB0(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x2D78(0x0040)()
	struct FAnimNode_Root                         AnimGraphNode_Root_4;                              // 0x2DB8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_3;                              // 0x2DD8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x2DF8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x2E18(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x2E38(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x2EF0(0x0020)()
	float                                         K2Node_PropertyAccess_34;                          // 0x2F10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_33;                          // 0x2F14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_32;                          // 0x2F18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_31;                          // 0x2F1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EGzCharacterDamageAreaType, struct FHitDirectionInfo> K2Node_PropertyAccess_30;                          // 0x2F20(0x0050)()
	bool                                          __CustomProperty_Enable_ProcedureLimbSway_9528244140DFC0C36C8465B49BF4B27D; // 0x2F70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5842[0x7];                                     // 0x2F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_LimbsSwayStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D; // 0x2F78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_LimbsSwayAdditive_9528244140DFC0C36C8465B49BF4B27D; // 0x2F80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_TurbulenceStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D; // 0x2F88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_TurbulenceMultiplier_9528244140DFC0C36C8465B49BF4B27D; // 0x2F90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Enable_ProcedureWavy_9528244140DFC0C36C8465B49BF4B27D; // 0x2F98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Enable_AdditiveLeaning_9528244140DFC0C36C8465B49BF4B27D; // 0x2F99(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Enable_Turbulence_9528244140DFC0C36C8465B49BF4B27D; // 0x2F9A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5843[0x5];                                     // 0x2F9B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_TurbulenceValue_9528244140DFC0C36C8465B49BF4B27D; // 0x2FA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_AlphaLeaningWeight_9528244140DFC0C36C8465B49BF4B27D; // 0x2FA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5844[0x4];                                     // 0x2FAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_UpDown_Data_9528244140DFC0C36C8465B49BF4B27D; // 0x2FB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_UpDown_Pelvis_Data_9528244140DFC0C36C8465B49BF4B27D; // 0x2FB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_LeaningAdditive_9528244140DFC0C36C8465B49BF4B27D; // 0x2FBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_29;                          // 0x2FC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5845[0x3];                                     // 0x2FC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_PropertyAccess_28;                          // 0x2FC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_27;                          // 0x2FC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_26;                          // 0x2FCC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_25;                          // 0x2FD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_24;                          // 0x2FD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_23;                          // 0x2FD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_22;                          // 0x2FDC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_21;                          // 0x2FE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5846[0x4];                                     // 0x2FE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          K2Node_PropertyAccess_20;                          // 0x2FE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_19;                          // 0x2FF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_18;                          // 0x2FF4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_17;                          // 0x2FF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_16;                          // 0x3010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_15;                          // 0x3028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5847[0x4];                                     // 0x302C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_14;                          // 0x3030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_13;                          // 0x3048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_12;                          // 0x304C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_11;                          // 0x3050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_10;                          // 0x3054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_9;                           // 0x3058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_8;                           // 0x305C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_7;                           // 0x3060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_6;                           // 0x3064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_PropertyAccess_5;                           // 0x3068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_PropertyAccess_4;                           // 0x3080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_PropertyAccess_3;                           // 0x3098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5848[0x4];                                     // 0x309C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_2;                           // 0x30A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_PropertyAccess_1;                           // 0x30B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 K2Node_PropertyAccess;                             // 0x30C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         AimYaw;                                            // 0x30C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5849[0x4];                                     // 0x30CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimOnFallingAlpha;                                 // 0x30D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpMinusdown_Input;                                 // 0x30D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftMinusright_Input;                              // 0x30E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jetpack_pitch_Normalize;                           // 0x30E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jetpack_roll_Normalize;                            // 0x30F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leaning_Smooth_Transition;                         // 0x30F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUnbalance;                                       // 0x3100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584A[0x7];                                     // 0x3101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LowerBodyLeaning;                                  // 0x3108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wavy_Smooth_Transition;                            // 0x3110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wavy_Orientation_Alpha;                            // 0x3118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wavy_Orientation_Strength;                         // 0x3120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CtrlRightAlpha;                                    // 0x3128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CtrlRig_LeaningAdditive;                           // 0x3130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CtrlRig_LeaningWeight;                             // 0x3138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CtrlRig_WavyLowerBody;                             // 0x3140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CtrlRig_WavyUpperBody;                             // 0x3148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInputFree;                                       // 0x3150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584B[0x7];                                     // 0x3151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JetpackDivingAlpha;                                // 0x3158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FreeTime;                                          // 0x3160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastLeaning_Left_Right;                            // 0x3168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingFixedRotation;                              // 0x3170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingTransitionWeight;                           // 0x3178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Additive_Leaning;                           // 0x3180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Procedure_Wavy;                             // 0x3181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Turbulence;                                 // 0x3182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584C[0x5];                                     // 0x3183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CR_LeaningAdditve;                                 // 0x3188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CR_Wavy_Upperbody;                                 // 0x3190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CR_Wavy_Lowerbody;                                 // 0x3198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CR_WavyUpperbodyOnFalling;                         // 0x31A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CR_WavyUpperbodyOnCycle;                           // 0x31A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlipLanding;                                     // 0x31B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584D[0x7];                                     // 0x31B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Turbulence_Value;                                  // 0x31B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingLeanAngle;                                  // 0x31C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584E[0x4];                                     // 0x31C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UpperbodyLeanOnFalling;                            // 0x31C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        JetpackPitchFallTriggerRangeFar;                   // 0x31E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JetpackPitchFallTriggerRangeNear;                  // 0x31E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WingsuitMomentumFallThreshold;                     // 0x31F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JetpackAirSpeedArmsSpreadOut;                      // 0x31F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JetpackAirSpeedArmsAlongBody;                      // 0x3200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimbsSpreadAlpha;                                  // 0x3208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimbsSwayAlpha;                                    // 0x320C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallAirspeedSwayMin;                               // 0x3210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallAirspeedSwayMax;                               // 0x3218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurbulenceStrengthAlpha;                           // 0x3220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_LimbsSway;                                  // 0x3224(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584F[0x3];                                     // 0x3225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BendAccumulated;                                   // 0x3228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BendIncrement;                                     // 0x322C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BendMax;                                           // 0x3230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5850[0x4];                                     // 0x3234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequenceBase*>              Hit_Reaction_Anims;                                // 0x3238(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        JetpackPitchFallTriggerToCycleRangeNear;           // 0x3248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JetpackPitchFallTriggerToCycleRangeFar;            // 0x3250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SF_UpdateSidewaysBend(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_Update_SetAnimOnBreakFree(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_Update_GetLastLeaningDirectot(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_Setup_SetWavyData(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_Setup_OverrideWavyData(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_EnableLimbSway(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_DisableLimbSway(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_ControlRigEnable(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SF_ControlRigDisable(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnInitialUpdate(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnBecomeRelevant(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void NPC_CoverState(struct FPoseLink* Param_NPC_CoverState);
	void Limbless_State(struct FPoseLink* Param_Limbless_State);
	void KneeSlide_State(struct FPoseLink* Param_KneeSlide_State);
	class UGzCharacterMovementComponent* GetOwnerMovements();
	void GetNormalizeData(double DeltaTime);
	class UABP_Human_C* GetMainThreadSafeAnimation();
	void GetJetpackStatsData(double DeltaTime);
	void GetHit(const TMap<EGzCharacterDamageAreaType, struct FHitDirectionInfo>& TargetMap, bool* Hit);
	void GetControlData();
	class AGzPlayerCharacter* GetCharacterData();
	void GereneratePhysicalData(double DeltaTime);
	void FullBodyAdditives(struct FPoseLink* Param_FullBodyAdditives);
	void FullBody_StopState(struct FPoseLink* Param_FullBody_StopState);
	void FullBody_StartState(struct FPoseLink* Param_FullBody_StartState);
	void FullBody_PivotState(struct FPoseLink* Param_FullBody_PivotState);
	void FullBody_JumpStartState(struct FPoseLink* Param_FullBody_JumpStartState);
	void FullBody_JumpStartLoopState(struct FPoseLink* Param_FullBody_JumpStartLoopState);
	void FullBody_JumpApexState(struct FPoseLink* Param_FullBody_JumpApexState);
	void FullBody_IdleState(struct FPoseLink* Param_FullBody_IdleState);
	void FullBody_FallLandState(struct FPoseLink* Param_FullBody_FallLandState);
	void FullBody_CycleState(struct FPoseLink* Param_FullBody_CycleState);
	void FullBody_AnimAbility(struct FPoseLink* Param_FullBody_AnimAbility);
	void FullBody_Aiming(const struct FPoseLink& PreAimPose, double Param_AimYaw, double AimPitch, struct FPoseLink* Param_FullBody_Aiming);
	void ExecuteUbergraph_ABP_Jetpack_VerE(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_B0AE45BC4E9806F80EF3A28B54ED26FC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_AF32B1584EF5599253209FB440882044();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_989F7424471070891A1A7B9A5928AABB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_72AA0D4C444D3FEE1F8C1BBEA205EEBD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_35FC212E48168D037A0FFDBC8C6DCA4E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_273745F24007F2B8734E27893730B6E7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_TransitionResult_1E7BA60C4B04AE164330AAA5C4AE51E0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ModifyBone_F5CF1E9744127B71F6793BAAA610A19B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ModifyBone_B17205ED4E1B5B7BACDFB2B040E6A14B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ModifyBone_AFE89C734B8098DF50E129A7897123A9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ModifyBone_4161741045957A31FB489A9BE7E5730B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ModifyBone_186ECEE34BE49934DD650D99FBCA9000();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Jetpack_VerE_AnimGraphNode_ApplyAdditive_676CA3124FDBBFAC1A4E94B81F534D3C();
	EInputJetpackControl_VerD_E DetectInputPress(double Input);
	void FullBody_FallLoopState(struct FPoseLink* Param_FullBody_FallLoopState);
	void Debug();
	void DamagedBody_IdleState(struct FPoseLink* Param_DamagedBody_IdleState);
	void DamagedBody_ExitState(struct FPoseLink* Param_DamagedBody_ExitState);
	void DamagedBody_EnterState(struct FPoseLink* Param_DamagedBody_EnterState);
	void DamagedBody_CycleState(struct FPoseLink* Param_DamagedBody_CycleState);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void Aiming_Correction(const struct FPoseLink& Aim_pose, struct FPoseLink* Param_Aiming_Correction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Jetpack_VerE_C">();
	}
	static class UABP_Jetpack_VerE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Jetpack_VerE_C>();
	}
};
static_assert(alignof(UABP_Jetpack_VerE_C) == 0x000010, "Wrong alignment on UABP_Jetpack_VerE_C");
static_assert(sizeof(UABP_Jetpack_VerE_C) == 0x003260, "Wrong size on UABP_Jetpack_VerE_C");
static_assert(offsetof(UABP_Jetpack_VerE_C, UberGraphFrame) == 0x0008B0, "Member 'UABP_Jetpack_VerE_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __AnimBlueprintMutables) == 0x0008B8, "Member 'UABP_Jetpack_VerE_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimBlueprintExtension_PropertyAccess) == 0x0008D8, "Member 'UABP_Jetpack_VerE_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimBlueprintExtension_NodeRelevancy) == 0x0008E0, "Member 'UABP_Jetpack_VerE_C::AnimBlueprintExtension_NodeRelevancy' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimBlueprintExtension_Base) == 0x000988, "Member 'UABP_Jetpack_VerE_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_21) == 0x000990, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_21' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_20) == 0x0009B0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_20' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_19) == 0x0009D0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_19' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_18) == 0x0009F0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_18' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_17) == 0x000A10, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_17' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_16) == 0x000A30, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_16' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_15) == 0x000A50, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_15' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_14) == 0x000A70, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_14' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_13) == 0x000A90, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_13' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_12) == 0x000AB0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_12' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_11) == 0x000AD0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_11' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LinkedInputPose_1) == 0x000AF0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_10) == 0x000BA8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_10' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_9) == 0x000BC8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_9' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_8) == 0x000BE8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_8' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_7) == 0x000C08, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_7' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_6) == 0x000C28, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_6' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_5) == 0x000C48, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Inertialization) == 0x000C70, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_9) == 0x0010B0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_8) == 0x0010D8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_7) == 0x001100, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_6) == 0x001128, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_5) == 0x001150, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_4) == 0x001178, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_3) == 0x0011A0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_2) == 0x0011C8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult_1) == 0x0011F0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TransitionResult) == 0x001218, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_8) == 0x001240, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult_5) == 0x001288, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_7) == 0x0012A8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult_4) == 0x0012F0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ApplyAdditive_1) == 0x001310, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0013D8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x001448, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LocalToComponentSpace_3) == 0x001560, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LocalToComponentSpace_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone_5) == 0x001580, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ComponentToLocalSpace_3) == 0x0016A8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ComponentToLocalSpace_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_6) == 0x0016C8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult_3) == 0x001710, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone_4) == 0x001730, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ComponentToLocalSpace_2) == 0x001858, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ComponentToLocalSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LocalToComponentSpace_2) == 0x001878, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LocalToComponentSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_5) == 0x001898, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult_2) == 0x0018E0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_4) == 0x001900, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult_1) == 0x001948, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone_3) == 0x001968, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone_2) == 0x001A90, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone_1) == 0x001BB8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ModifyBone) == 0x001CE0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_3) == 0x001E08, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_BlendListByBool) == 0x001E50, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TwoWayBlend_2) == 0x001E98, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TwoWayBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_2) == 0x001F60, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer_1) == 0x001FA8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequencePlayer) == 0x001FF0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TwoWayBlend_1) == 0x002038, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_OrientationWarping_1) == 0x002100, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_OrientationWarping_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x002320, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LocalToComponentSpace_1) == 0x002340, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_OrientationWarping) == 0x002360, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_OrientationWarping' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ComponentToLocalSpace) == 0x002580, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LocalToComponentSpace) == 0x0025A0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_TwoWayBlend) == 0x0025C0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_BlendSpacePlayer) == 0x002688, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateResult) == 0x0026F8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_StateMachine) == 0x002718, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ControlRig) == 0x0027E0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_ApplyAdditive) == 0x002CB0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_SequenceEvaluator) == 0x002D78, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_4) == 0x002DB8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_3) == 0x002DD8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_2) == 0x002DF8, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root_1) == 0x002E18, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_LinkedInputPose) == 0x002E38, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AnimGraphNode_Root) == 0x002EF0, "Member 'UABP_Jetpack_VerE_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_34) == 0x002F10, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_34' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_33) == 0x002F14, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_33' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_32) == 0x002F18, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_32' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_31) == 0x002F1C, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_31' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_30) == 0x002F20, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_30' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_Enable_ProcedureLimbSway_9528244140DFC0C36C8465B49BF4B27D) == 0x002F70, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_Enable_ProcedureLimbSway_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_LimbsSwayStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D) == 0x002F78, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_LimbsSwayStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_LimbsSwayAdditive_9528244140DFC0C36C8465B49BF4B27D) == 0x002F80, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_LimbsSwayAdditive_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_TurbulenceStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D) == 0x002F88, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_TurbulenceStrengthAlpha_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_TurbulenceMultiplier_9528244140DFC0C36C8465B49BF4B27D) == 0x002F90, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_TurbulenceMultiplier_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_Enable_ProcedureWavy_9528244140DFC0C36C8465B49BF4B27D) == 0x002F98, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_Enable_ProcedureWavy_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_Enable_AdditiveLeaning_9528244140DFC0C36C8465B49BF4B27D) == 0x002F99, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_Enable_AdditiveLeaning_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_Enable_Turbulence_9528244140DFC0C36C8465B49BF4B27D) == 0x002F9A, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_Enable_Turbulence_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_TurbulenceValue_9528244140DFC0C36C8465B49BF4B27D) == 0x002FA0, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_TurbulenceValue_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_AlphaLeaningWeight_9528244140DFC0C36C8465B49BF4B27D) == 0x002FA8, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_AlphaLeaningWeight_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_UpDown_Data_9528244140DFC0C36C8465B49BF4B27D) == 0x002FB0, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_UpDown_Data_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_UpDown_Pelvis_Data_9528244140DFC0C36C8465B49BF4B27D) == 0x002FB8, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_UpDown_Pelvis_Data_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, __CustomProperty_LeaningAdditive_9528244140DFC0C36C8465B49BF4B27D) == 0x002FBC, "Member 'UABP_Jetpack_VerE_C::__CustomProperty_LeaningAdditive_9528244140DFC0C36C8465B49BF4B27D' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_29) == 0x002FC0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_29' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_28) == 0x002FC4, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_28' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_27) == 0x002FC8, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_27' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_26) == 0x002FCC, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_26' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_25) == 0x002FD0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_25' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_24) == 0x002FD4, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_24' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_23) == 0x002FD8, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_23' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_22) == 0x002FDC, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_22' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_21) == 0x002FE0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_21' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_20) == 0x002FE8, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_20' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_19) == 0x002FF0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_19' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_18) == 0x002FF4, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_18' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_17) == 0x002FF8, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_17' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_16) == 0x003010, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_16' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_15) == 0x003028, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_15' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_14) == 0x003030, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_14' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_13) == 0x003048, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_13' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_12) == 0x00304C, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_12' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_11) == 0x003050, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_11' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_10) == 0x003054, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_10' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_9) == 0x003058, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_8) == 0x00305C, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_7) == 0x003060, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_6) == 0x003064, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_5) == 0x003068, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_4) == 0x003080, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_3) == 0x003098, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_2) == 0x0030A0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess_1) == 0x0030B8, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, K2Node_PropertyAccess) == 0x0030C0, "Member 'UABP_Jetpack_VerE_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AimYaw) == 0x0030C8, "Member 'UABP_Jetpack_VerE_C::AimYaw' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, AimOnFallingAlpha) == 0x0030D0, "Member 'UABP_Jetpack_VerE_C::AimOnFallingAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, UpMinusdown_Input) == 0x0030D8, "Member 'UABP_Jetpack_VerE_C::UpMinusdown_Input' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, LeftMinusright_Input) == 0x0030E0, "Member 'UABP_Jetpack_VerE_C::LeftMinusright_Input' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Jetpack_pitch_Normalize) == 0x0030E8, "Member 'UABP_Jetpack_VerE_C::Jetpack_pitch_Normalize' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Jetpack_roll_Normalize) == 0x0030F0, "Member 'UABP_Jetpack_VerE_C::Jetpack_roll_Normalize' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Leaning_Smooth_Transition) == 0x0030F8, "Member 'UABP_Jetpack_VerE_C::Leaning_Smooth_Transition' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, IsUnbalance) == 0x003100, "Member 'UABP_Jetpack_VerE_C::IsUnbalance' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, LowerBodyLeaning) == 0x003108, "Member 'UABP_Jetpack_VerE_C::LowerBodyLeaning' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Wavy_Smooth_Transition) == 0x003110, "Member 'UABP_Jetpack_VerE_C::Wavy_Smooth_Transition' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Wavy_Orientation_Alpha) == 0x003118, "Member 'UABP_Jetpack_VerE_C::Wavy_Orientation_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Wavy_Orientation_Strength) == 0x003120, "Member 'UABP_Jetpack_VerE_C::Wavy_Orientation_Strength' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CtrlRightAlpha) == 0x003128, "Member 'UABP_Jetpack_VerE_C::CtrlRightAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CtrlRig_LeaningAdditive) == 0x003130, "Member 'UABP_Jetpack_VerE_C::CtrlRig_LeaningAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CtrlRig_LeaningWeight) == 0x003138, "Member 'UABP_Jetpack_VerE_C::CtrlRig_LeaningWeight' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CtrlRig_WavyLowerBody) == 0x003140, "Member 'UABP_Jetpack_VerE_C::CtrlRig_WavyLowerBody' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CtrlRig_WavyUpperBody) == 0x003148, "Member 'UABP_Jetpack_VerE_C::CtrlRig_WavyUpperBody' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, IsInputFree) == 0x003150, "Member 'UABP_Jetpack_VerE_C::IsInputFree' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackDivingAlpha) == 0x003158, "Member 'UABP_Jetpack_VerE_C::JetpackDivingAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FreeTime) == 0x003160, "Member 'UABP_Jetpack_VerE_C::FreeTime' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, LastLeaning_Left_Right) == 0x003168, "Member 'UABP_Jetpack_VerE_C::LastLeaning_Left_Right' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FallingFixedRotation) == 0x003170, "Member 'UABP_Jetpack_VerE_C::FallingFixedRotation' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FallingTransitionWeight) == 0x003178, "Member 'UABP_Jetpack_VerE_C::FallingTransitionWeight' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Enable_Additive_Leaning) == 0x003180, "Member 'UABP_Jetpack_VerE_C::Enable_Additive_Leaning' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Enable_Procedure_Wavy) == 0x003181, "Member 'UABP_Jetpack_VerE_C::Enable_Procedure_Wavy' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Enable_Turbulence) == 0x003182, "Member 'UABP_Jetpack_VerE_C::Enable_Turbulence' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CR_LeaningAdditve) == 0x003188, "Member 'UABP_Jetpack_VerE_C::CR_LeaningAdditve' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CR_Wavy_Upperbody) == 0x003190, "Member 'UABP_Jetpack_VerE_C::CR_Wavy_Upperbody' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CR_Wavy_Lowerbody) == 0x003198, "Member 'UABP_Jetpack_VerE_C::CR_Wavy_Lowerbody' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CR_WavyUpperbodyOnFalling) == 0x0031A0, "Member 'UABP_Jetpack_VerE_C::CR_WavyUpperbodyOnFalling' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, CR_WavyUpperbodyOnCycle) == 0x0031A8, "Member 'UABP_Jetpack_VerE_C::CR_WavyUpperbodyOnCycle' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, IsFlipLanding) == 0x0031B0, "Member 'UABP_Jetpack_VerE_C::IsFlipLanding' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Turbulence_Value) == 0x0031B8, "Member 'UABP_Jetpack_VerE_C::Turbulence_Value' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FallingLeanAngle) == 0x0031C0, "Member 'UABP_Jetpack_VerE_C::FallingLeanAngle' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, UpperbodyLeanOnFalling) == 0x0031C8, "Member 'UABP_Jetpack_VerE_C::UpperbodyLeanOnFalling' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackPitchFallTriggerRangeFar) == 0x0031E0, "Member 'UABP_Jetpack_VerE_C::JetpackPitchFallTriggerRangeFar' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackPitchFallTriggerRangeNear) == 0x0031E8, "Member 'UABP_Jetpack_VerE_C::JetpackPitchFallTriggerRangeNear' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, WingsuitMomentumFallThreshold) == 0x0031F0, "Member 'UABP_Jetpack_VerE_C::WingsuitMomentumFallThreshold' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackAirSpeedArmsSpreadOut) == 0x0031F8, "Member 'UABP_Jetpack_VerE_C::JetpackAirSpeedArmsSpreadOut' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackAirSpeedArmsAlongBody) == 0x003200, "Member 'UABP_Jetpack_VerE_C::JetpackAirSpeedArmsAlongBody' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, LimbsSpreadAlpha) == 0x003208, "Member 'UABP_Jetpack_VerE_C::LimbsSpreadAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, LimbsSwayAlpha) == 0x00320C, "Member 'UABP_Jetpack_VerE_C::LimbsSwayAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FallAirspeedSwayMin) == 0x003210, "Member 'UABP_Jetpack_VerE_C::FallAirspeedSwayMin' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, FallAirspeedSwayMax) == 0x003218, "Member 'UABP_Jetpack_VerE_C::FallAirspeedSwayMax' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, TurbulenceStrengthAlpha) == 0x003220, "Member 'UABP_Jetpack_VerE_C::TurbulenceStrengthAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Enable_LimbsSway) == 0x003224, "Member 'UABP_Jetpack_VerE_C::Enable_LimbsSway' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, BendAccumulated) == 0x003228, "Member 'UABP_Jetpack_VerE_C::BendAccumulated' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, BendIncrement) == 0x00322C, "Member 'UABP_Jetpack_VerE_C::BendIncrement' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, BendMax) == 0x003230, "Member 'UABP_Jetpack_VerE_C::BendMax' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, Hit_Reaction_Anims) == 0x003238, "Member 'UABP_Jetpack_VerE_C::Hit_Reaction_Anims' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackPitchFallTriggerToCycleRangeNear) == 0x003248, "Member 'UABP_Jetpack_VerE_C::JetpackPitchFallTriggerToCycleRangeNear' has a wrong offset!");
static_assert(offsetof(UABP_Jetpack_VerE_C, JetpackPitchFallTriggerToCycleRangeFar) == 0x003250, "Member 'UABP_Jetpack_VerE_C::JetpackPitchFallTriggerToCycleRangeFar' has a wrong offset!");

}

