#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_Defiler_PT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CLA_Defiler_PT.ABP_CLA_Defiler_PT_C
// 0x0280 (0x05F0 - 0x0370)
class UABP_CLA_Defiler_PT_C final : public UAnimInstance
{
public:
	uint8                                         Pad_5C72[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03D0(0x0028)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x03F8(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0438(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0458(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x04A0(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x04C0(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0500(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0520(0x00C8)()
	bool                                          IsActive;                                          // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void ExecuteUbergraph_ABP_CLA_Defiler_PT(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CLA_Defiler_PT_C">();
	}
	static class UABP_CLA_Defiler_PT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CLA_Defiler_PT_C>();
	}
};
static_assert(alignof(UABP_CLA_Defiler_PT_C) == 0x000010, "Wrong alignment on UABP_CLA_Defiler_PT_C");
static_assert(sizeof(UABP_CLA_Defiler_PT_C) == 0x0005F0, "Wrong size on UABP_CLA_Defiler_PT_C");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, UberGraphFrame) == 0x000370, "Member 'UABP_CLA_Defiler_PT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_CLA_Defiler_PT_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_CLA_Defiler_PT_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_TransitionResult_1) == 0x0003A8, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_TransitionResult) == 0x0003D0, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_SequenceEvaluator_1) == 0x0003F8, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_StateResult_2) == 0x000438, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_SequencePlayer) == 0x000458, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_StateResult_1) == 0x0004A0, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_SequenceEvaluator) == 0x0004C0, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_StateResult) == 0x000500, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, AnimGraphNode_StateMachine) == 0x000520, "Member 'UABP_CLA_Defiler_PT_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Defiler_PT_C, IsActive) == 0x0005E8, "Member 'UABP_CLA_Defiler_PT_C::IsActive' has a wrong offset!");

}

