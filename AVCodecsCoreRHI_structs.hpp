#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVCodecsCoreRHI

#include "Basic.hpp"


namespace SDK
{

// Enum AVCodecsCoreRHI.ESimpleAudioCodec
// NumValues: 0x0002
enum class ESimpleAudioCodec : uint8
{
	AAC                                      = 0,
	ESimpleAudioCodec_MAX                    = 1,
};

// Enum AVCodecsCoreRHI.ESimpleAVPreset
// NumValues: 0x0006
enum class ESimpleAVPreset : uint8
{
	Default                                  = 0,
	UltraLowQuality                          = 1,
	LowQuality                               = 2,
	HighQuality                              = 3,
	Lossless                                 = 4,
	ESimpleAVPreset_MAX                      = 5,
};

// Enum AVCodecsCoreRHI.ESimpleVideoCodec
// NumValues: 0x0003
enum class ESimpleVideoCodec : uint8
{
	H264                                     = 0,
	H265                                     = 1,
	ESimpleVideoCodec_MAX                    = 2,
};

// ScriptStruct AVCodecsCoreRHI.SimpleAudioPacket
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSimpleAudioPacket final
{
public:
	uint8                                         Pad_4813[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleAudioPacket) == 0x000008, "Wrong alignment on FSimpleAudioPacket");
static_assert(sizeof(FSimpleAudioPacket) == 0x000028, "Wrong size on FSimpleAudioPacket");

// ScriptStruct AVCodecsCoreRHI.SimpleAudioEncoderConfig
// 0x000C (0x000C - 0x0000)
struct FSimpleAudioEncoderConfig final
{
public:
	int32                                         bitrate;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChannels;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleAudioEncoderConfig) == 0x000004, "Wrong alignment on FSimpleAudioEncoderConfig");
static_assert(sizeof(FSimpleAudioEncoderConfig) == 0x00000C, "Wrong size on FSimpleAudioEncoderConfig");
static_assert(offsetof(FSimpleAudioEncoderConfig, bitrate) == 0x000000, "Member 'FSimpleAudioEncoderConfig::bitrate' has a wrong offset!");
static_assert(offsetof(FSimpleAudioEncoderConfig, SampleRate) == 0x000004, "Member 'FSimpleAudioEncoderConfig::SampleRate' has a wrong offset!");
static_assert(offsetof(FSimpleAudioEncoderConfig, NumChannels) == 0x000008, "Member 'FSimpleAudioEncoderConfig::NumChannels' has a wrong offset!");

// ScriptStruct AVCodecsCoreRHI.SimpleVideoPacket
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSimpleVideoPacket final
{
public:
	uint8                                         Pad_4814[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleVideoPacket) == 0x000008, "Wrong alignment on FSimpleVideoPacket");
static_assert(sizeof(FSimpleVideoPacket) == 0x000030, "Wrong size on FSimpleVideoPacket");

// ScriptStruct AVCodecsCoreRHI.SimpleVideoEncoderConfig
// 0x0014 (0x0014 - 0x0000)
struct FSimpleVideoEncoderConfig final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFrameRate;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetBitrate;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBitrate;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleVideoEncoderConfig) == 0x000004, "Wrong alignment on FSimpleVideoEncoderConfig");
static_assert(sizeof(FSimpleVideoEncoderConfig) == 0x000014, "Wrong size on FSimpleVideoEncoderConfig");
static_assert(offsetof(FSimpleVideoEncoderConfig, Width) == 0x000000, "Member 'FSimpleVideoEncoderConfig::Width' has a wrong offset!");
static_assert(offsetof(FSimpleVideoEncoderConfig, Height) == 0x000004, "Member 'FSimpleVideoEncoderConfig::Height' has a wrong offset!");
static_assert(offsetof(FSimpleVideoEncoderConfig, TargetFrameRate) == 0x000008, "Member 'FSimpleVideoEncoderConfig::TargetFrameRate' has a wrong offset!");
static_assert(offsetof(FSimpleVideoEncoderConfig, TargetBitrate) == 0x00000C, "Member 'FSimpleVideoEncoderConfig::TargetBitrate' has a wrong offset!");
static_assert(offsetof(FSimpleVideoEncoderConfig, MaxBitrate) == 0x000010, "Member 'FSimpleVideoEncoderConfig::MaxBitrate' has a wrong offset!");

}

