#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MultiUserClientLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MultiUserClientLibrary_structs.hpp"
#include "ConcertReplicationScripting_structs.hpp"


namespace SDK::Params
{

// Function MultiUserClientLibrary.ChangeClientAsyncAction.ChangeClient
// 0x0200 (0x0200 - 0x0000)
struct ChangeClientAsyncAction_ChangeClient final
{
public:
	struct FGuid                                  Param_ClientID;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMultiUserChangeClientReplicationRequest Request;                                           // 0x0010(0x01E8)(Parm, NativeAccessSpecifierPublic)
	class UChangeClientAsyncAction*               ReturnValue;                                       // 0x01F8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeClientAsyncAction_ChangeClient) == 0x000008, "Wrong alignment on ChangeClientAsyncAction_ChangeClient");
static_assert(sizeof(ChangeClientAsyncAction_ChangeClient) == 0x000200, "Wrong size on ChangeClientAsyncAction_ChangeClient");
static_assert(offsetof(ChangeClientAsyncAction_ChangeClient, Param_ClientID) == 0x000000, "Member 'ChangeClientAsyncAction_ChangeClient::Param_ClientID' has a wrong offset!");
static_assert(offsetof(ChangeClientAsyncAction_ChangeClient, Request) == 0x000010, "Member 'ChangeClientAsyncAction_ChangeClient::Request' has a wrong offset!");
static_assert(offsetof(ChangeClientAsyncAction_ChangeClient, ReturnValue) == 0x0001F8, "Member 'ChangeClientAsyncAction_ChangeClient::ReturnValue' has a wrong offset!");

// DelegateFunction MultiUserClientLibrary.ChangeClientAsyncAction.OnChangeOperationCompleted__DelegateSignature
// 0x0160 (0x0160 - 0x0000)
struct ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature final
{
public:
	struct FMultiUserChangeClientReplicationResult Response;                                          // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature) == 0x000008, "Wrong alignment on ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature");
static_assert(sizeof(ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature) == 0x000160, "Wrong size on ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature");
static_assert(offsetof(ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature, Response) == 0x000000, "Member 'ChangeClientAsyncAction_OnChangeOperationCompleted__DelegateSignature::Response' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationRegistration.DiscoverReplicationSettings
// 0x0020 (0x0020 - 0x0000)
struct MultiUserReplicationRegistration_DiscoverReplicationSettings final
{
public:
	struct FMultiUserReplicationRegistrationParams Params_0;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationRegistration_DiscoverReplicationSettings) == 0x000008, "Wrong alignment on MultiUserReplicationRegistration_DiscoverReplicationSettings");
static_assert(sizeof(MultiUserReplicationRegistration_DiscoverReplicationSettings) == 0x000020, "Wrong size on MultiUserReplicationRegistration_DiscoverReplicationSettings");
static_assert(offsetof(MultiUserReplicationRegistration_DiscoverReplicationSettings, Params_0) == 0x000000, "Member 'MultiUserReplicationRegistration_DiscoverReplicationSettings::Params_0' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationRegistrationContext.AddAdditionalObject
// 0x0008 (0x0008 - 0x0000)
struct MultiUserReplicationRegistrationContext_AddAdditionalObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationRegistrationContext_AddAdditionalObject) == 0x000008, "Wrong alignment on MultiUserReplicationRegistrationContext_AddAdditionalObject");
static_assert(sizeof(MultiUserReplicationRegistrationContext_AddAdditionalObject) == 0x000008, "Wrong size on MultiUserReplicationRegistrationContext_AddAdditionalObject");
static_assert(offsetof(MultiUserReplicationRegistrationContext_AddAdditionalObject, Object) == 0x000000, "Member 'MultiUserReplicationRegistrationContext_AddAdditionalObject::Object' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationRegistrationContext.AddPropertiesToObject
// 0x0018 (0x0018 - 0x0000)
struct MultiUserReplicationRegistrationContext_AddPropertiesToObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConcertPropertyChainWrapper>   PropertiesToAdd;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationRegistrationContext_AddPropertiesToObject) == 0x000008, "Wrong alignment on MultiUserReplicationRegistrationContext_AddPropertiesToObject");
static_assert(sizeof(MultiUserReplicationRegistrationContext_AddPropertiesToObject) == 0x000018, "Wrong size on MultiUserReplicationRegistrationContext_AddPropertiesToObject");
static_assert(offsetof(MultiUserReplicationRegistrationContext_AddPropertiesToObject, Object) == 0x000000, "Member 'MultiUserReplicationRegistrationContext_AddPropertiesToObject::Object' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationRegistrationContext_AddPropertiesToObject, PropertiesToAdd) == 0x000008, "Member 'MultiUserReplicationRegistrationContext_AddPropertiesToObject::PropertiesToAdd' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.ConfigureMultiUserClient
// 0x0040 (0x0040 - 0x0000)
struct MultiUserClientStatics_ConfigureMultiUserClient final
{
public:
	struct FMultiUserClientConfig                 ClientConfig;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E2[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserClientStatics_ConfigureMultiUserClient) == 0x000008, "Wrong alignment on MultiUserClientStatics_ConfigureMultiUserClient");
static_assert(sizeof(MultiUserClientStatics_ConfigureMultiUserClient) == 0x000040, "Wrong size on MultiUserClientStatics_ConfigureMultiUserClient");
static_assert(offsetof(MultiUserClientStatics_ConfigureMultiUserClient, ClientConfig) == 0x000000, "Member 'MultiUserClientStatics_ConfigureMultiUserClient::ClientConfig' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_ConfigureMultiUserClient, ReturnValue) == 0x000038, "Member 'MultiUserClientStatics_ConfigureMultiUserClient::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GatherSessionChanges
// 0x0018 (0x0018 - 0x0000)
struct MultiUserClientStatics_GatherSessionChanges final
{
public:
	bool                                          IgnorePersisted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GatherSessionChanges) == 0x000008, "Wrong alignment on MultiUserClientStatics_GatherSessionChanges");
static_assert(sizeof(MultiUserClientStatics_GatherSessionChanges) == 0x000018, "Wrong size on MultiUserClientStatics_GatherSessionChanges");
static_assert(offsetof(MultiUserClientStatics_GatherSessionChanges, IgnorePersisted) == 0x000000, "Member 'MultiUserClientStatics_GatherSessionChanges::IgnorePersisted' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_GatherSessionChanges, ReturnValue) == 0x000008, "Member 'MultiUserClientStatics_GatherSessionChanges::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetConcertSyncDatabase
// 0x0008 (0x0008 - 0x0000)
struct MultiUserClientStatics_GetConcertSyncDatabase final
{
public:
	class UMultiUserClientSyncDatabase*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetConcertSyncDatabase) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetConcertSyncDatabase");
static_assert(sizeof(MultiUserClientStatics_GetConcertSyncDatabase) == 0x000008, "Wrong size on MultiUserClientStatics_GetConcertSyncDatabase");
static_assert(offsetof(MultiUserClientStatics_GetConcertSyncDatabase, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetConcertSyncDatabase::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetLastMultiUserConnectionError
// 0x0018 (0x0018 - 0x0000)
struct MultiUserClientStatics_GetLastMultiUserConnectionError final
{
public:
	struct FMultiUserConnectionError              ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetLastMultiUserConnectionError) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetLastMultiUserConnectionError");
static_assert(sizeof(MultiUserClientStatics_GetLastMultiUserConnectionError) == 0x000018, "Wrong size on MultiUserClientStatics_GetLastMultiUserConnectionError");
static_assert(offsetof(MultiUserClientStatics_GetLastMultiUserConnectionError, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetLastMultiUserConnectionError::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetLocalMultiUserClientInfo
// 0x0040 (0x0040 - 0x0000)
struct MultiUserClientStatics_GetLocalMultiUserClientInfo final
{
public:
	struct FMultiUserClientInfo                   ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetLocalMultiUserClientInfo) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetLocalMultiUserClientInfo");
static_assert(sizeof(MultiUserClientStatics_GetLocalMultiUserClientInfo) == 0x000040, "Wrong size on MultiUserClientStatics_GetLocalMultiUserClientInfo");
static_assert(offsetof(MultiUserClientStatics_GetLocalMultiUserClientInfo, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetLocalMultiUserClientInfo::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetMultiUserClientInfoByName
// 0x0058 (0x0058 - 0x0000)
struct MultiUserClientStatics_GetMultiUserClientInfoByName final
{
public:
	class FString                                 ClientName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMultiUserClientInfo                   ClientInfo;                                        // 0x0010(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E4[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserClientStatics_GetMultiUserClientInfoByName) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetMultiUserClientInfoByName");
static_assert(sizeof(MultiUserClientStatics_GetMultiUserClientInfoByName) == 0x000058, "Wrong size on MultiUserClientStatics_GetMultiUserClientInfoByName");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserClientInfoByName, ClientName) == 0x000000, "Member 'MultiUserClientStatics_GetMultiUserClientInfoByName::ClientName' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserClientInfoByName, ClientInfo) == 0x000010, "Member 'MultiUserClientStatics_GetMultiUserClientInfoByName::ClientInfo' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserClientInfoByName, ReturnValue) == 0x000050, "Member 'MultiUserClientStatics_GetMultiUserClientInfoByName::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetMultiUserConnectionStatus
// 0x0001 (0x0001 - 0x0000)
struct MultiUserClientStatics_GetMultiUserConnectionStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetMultiUserConnectionStatus) == 0x000001, "Wrong alignment on MultiUserClientStatics_GetMultiUserConnectionStatus");
static_assert(sizeof(MultiUserClientStatics_GetMultiUserConnectionStatus) == 0x000001, "Wrong size on MultiUserClientStatics_GetMultiUserConnectionStatus");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserConnectionStatus, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetMultiUserConnectionStatus::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetMultiUserConnectionStatusDetail
// 0x0001 (0x0001 - 0x0000)
struct MultiUserClientStatics_GetMultiUserConnectionStatusDetail final
{
public:
	EMultiUserConnectionStatus                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetMultiUserConnectionStatusDetail) == 0x000001, "Wrong alignment on MultiUserClientStatics_GetMultiUserConnectionStatusDetail");
static_assert(sizeof(MultiUserClientStatics_GetMultiUserConnectionStatusDetail) == 0x000001, "Wrong size on MultiUserClientStatics_GetMultiUserConnectionStatusDetail");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserConnectionStatusDetail, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetMultiUserConnectionStatusDetail::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetMultiUserPresenceTransform
// 0x0070 (0x0070 - 0x0000)
struct MultiUserClientStatics_GetMultiUserPresenceTransform final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetMultiUserPresenceTransform) == 0x000010, "Wrong alignment on MultiUserClientStatics_GetMultiUserPresenceTransform");
static_assert(sizeof(MultiUserClientStatics_GetMultiUserPresenceTransform) == 0x000070, "Wrong size on MultiUserClientStatics_GetMultiUserPresenceTransform");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserPresenceTransform, ClientEndpointId) == 0x000000, "Member 'MultiUserClientStatics_GetMultiUserPresenceTransform::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserPresenceTransform, ReturnValue) == 0x000010, "Member 'MultiUserClientStatics_GetMultiUserPresenceTransform::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetMultiUserSessionInfo
// 0x0048 (0x0048 - 0x0000)
struct MultiUserClientStatics_GetMultiUserSessionInfo final
{
public:
	struct FMultiUserSessionInfo                  ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_GetMultiUserSessionInfo) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetMultiUserSessionInfo");
static_assert(sizeof(MultiUserClientStatics_GetMultiUserSessionInfo) == 0x000048, "Wrong size on MultiUserClientStatics_GetMultiUserSessionInfo");
static_assert(offsetof(MultiUserClientStatics_GetMultiUserSessionInfo, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_GetMultiUserSessionInfo::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.GetRemoteMultiUserClientInfos
// 0x0018 (0x0018 - 0x0000)
struct MultiUserClientStatics_GetRemoteMultiUserClientInfos final
{
public:
	TArray<struct FMultiUserClientInfo>           ClientInfos;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserClientStatics_GetRemoteMultiUserClientInfos) == 0x000008, "Wrong alignment on MultiUserClientStatics_GetRemoteMultiUserClientInfos");
static_assert(sizeof(MultiUserClientStatics_GetRemoteMultiUserClientInfos) == 0x000018, "Wrong size on MultiUserClientStatics_GetRemoteMultiUserClientInfos");
static_assert(offsetof(MultiUserClientStatics_GetRemoteMultiUserClientInfos, ClientInfos) == 0x000000, "Member 'MultiUserClientStatics_GetRemoteMultiUserClientInfos::ClientInfos' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_GetRemoteMultiUserClientInfos, ReturnValue) == 0x000010, "Member 'MultiUserClientStatics_GetRemoteMultiUserClientInfos::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.JumpToMultiUserPresence
// 0x0070 (0x0070 - 0x0000)
struct MultiUserClientStatics_JumpToMultiUserPresence final
{
public:
	class FString                                 OtherUserName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransformOffset;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_JumpToMultiUserPresence) == 0x000010, "Wrong alignment on MultiUserClientStatics_JumpToMultiUserPresence");
static_assert(sizeof(MultiUserClientStatics_JumpToMultiUserPresence) == 0x000070, "Wrong size on MultiUserClientStatics_JumpToMultiUserPresence");
static_assert(offsetof(MultiUserClientStatics_JumpToMultiUserPresence, OtherUserName) == 0x000000, "Member 'MultiUserClientStatics_JumpToMultiUserPresence::OtherUserName' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_JumpToMultiUserPresence, TransformOffset) == 0x000010, "Member 'MultiUserClientStatics_JumpToMultiUserPresence::TransformOffset' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.PersistSpecifiedPackages
// 0x0010 (0x0010 - 0x0000)
struct MultiUserClientStatics_PersistSpecifiedPackages final
{
public:
	TArray<class FName>                           PackagesToPersist;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_PersistSpecifiedPackages) == 0x000008, "Wrong alignment on MultiUserClientStatics_PersistSpecifiedPackages");
static_assert(sizeof(MultiUserClientStatics_PersistSpecifiedPackages) == 0x000010, "Wrong size on MultiUserClientStatics_PersistSpecifiedPackages");
static_assert(offsetof(MultiUserClientStatics_PersistSpecifiedPackages, PackagesToPersist) == 0x000000, "Member 'MultiUserClientStatics_PersistSpecifiedPackages::PackagesToPersist' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.SetMultiUserPresenceEnabled
// 0x0001 (0x0001 - 0x0000)
struct MultiUserClientStatics_SetMultiUserPresenceEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_SetMultiUserPresenceEnabled) == 0x000001, "Wrong alignment on MultiUserClientStatics_SetMultiUserPresenceEnabled");
static_assert(sizeof(MultiUserClientStatics_SetMultiUserPresenceEnabled) == 0x000001, "Wrong size on MultiUserClientStatics_SetMultiUserPresenceEnabled");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceEnabled, IsEnabled) == 0x000000, "Member 'MultiUserClientStatics_SetMultiUserPresenceEnabled::IsEnabled' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.SetMultiUserPresenceVisibility
// 0x0018 (0x0018 - 0x0000)
struct MultiUserClientStatics_SetMultiUserPresenceVisibility final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visibility;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PropagateToAll;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E6[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserClientStatics_SetMultiUserPresenceVisibility) == 0x000008, "Wrong alignment on MultiUserClientStatics_SetMultiUserPresenceVisibility");
static_assert(sizeof(MultiUserClientStatics_SetMultiUserPresenceVisibility) == 0x000018, "Wrong size on MultiUserClientStatics_SetMultiUserPresenceVisibility");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibility, Param_Name) == 0x000000, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibility::Param_Name' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibility, Visibility) == 0x000010, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibility, PropagateToAll) == 0x000011, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibility::PropagateToAll' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.SetMultiUserPresenceVisibilityById
// 0x0014 (0x0014 - 0x0000)
struct MultiUserClientStatics_SetMultiUserPresenceVisibilityById final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visibility;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PropagateToAll;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E7[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserClientStatics_SetMultiUserPresenceVisibilityById) == 0x000004, "Wrong alignment on MultiUserClientStatics_SetMultiUserPresenceVisibilityById");
static_assert(sizeof(MultiUserClientStatics_SetMultiUserPresenceVisibilityById) == 0x000014, "Wrong size on MultiUserClientStatics_SetMultiUserPresenceVisibilityById");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibilityById, ClientEndpointId) == 0x000000, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibilityById::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibilityById, Visibility) == 0x000010, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibilityById::Visibility' has a wrong offset!");
static_assert(offsetof(MultiUserClientStatics_SetMultiUserPresenceVisibilityById, PropagateToAll) == 0x000011, "Member 'MultiUserClientStatics_SetMultiUserPresenceVisibilityById::PropagateToAll' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserClientStatics.StartMultiUserDefaultConnection
// 0x0001 (0x0001 - 0x0000)
struct MultiUserClientStatics_StartMultiUserDefaultConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserClientStatics_StartMultiUserDefaultConnection) == 0x000001, "Wrong alignment on MultiUserClientStatics_StartMultiUserDefaultConnection");
static_assert(sizeof(MultiUserClientStatics_StartMultiUserDefaultConnection) == 0x000001, "Wrong size on MultiUserClientStatics_StartMultiUserDefaultConnection");
static_assert(offsetof(MultiUserClientStatics_StartMultiUserDefaultConnection, ReturnValue) == 0x000000, "Member 'MultiUserClientStatics_StartMultiUserDefaultConnection::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationRegistrationContextImpl.AddAdditionalObject
// 0x0008 (0x0008 - 0x0000)
struct MultiUserReplicationRegistrationContextImpl_AddAdditionalObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationRegistrationContextImpl_AddAdditionalObject) == 0x000008, "Wrong alignment on MultiUserReplicationRegistrationContextImpl_AddAdditionalObject");
static_assert(sizeof(MultiUserReplicationRegistrationContextImpl_AddAdditionalObject) == 0x000008, "Wrong size on MultiUserReplicationRegistrationContextImpl_AddAdditionalObject");
static_assert(offsetof(MultiUserReplicationRegistrationContextImpl_AddAdditionalObject, Object) == 0x000000, "Member 'MultiUserReplicationRegistrationContextImpl_AddAdditionalObject::Object' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationRegistrationContextImpl.AddPropertiesToObject
// 0x0018 (0x0018 - 0x0000)
struct MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConcertPropertyChainWrapper>   PropertiesToAdd;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject) == 0x000008, "Wrong alignment on MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject");
static_assert(sizeof(MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject) == 0x000018, "Wrong size on MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject");
static_assert(offsetof(MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject, Object) == 0x000000, "Member 'MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject::Object' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject, PropertiesToAdd) == 0x000008, "Member 'MultiUserReplicationRegistrationContextImpl_AddPropertiesToObject::PropertiesToAdd' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationSubsystem.GetObjectReplicationFrequency
// 0x0038 (0x0038 - 0x0000)
struct MultiUserReplicationSubsystem_GetObjectReplicationFrequency final
{
public:
	struct FGuid                                  ClientID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMultiUserObjectReplicationSettings    OutFrequency;                                      // 0x0030(0x0002)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47EA[0x5];                                     // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency) == 0x000008, "Wrong alignment on MultiUserReplicationSubsystem_GetObjectReplicationFrequency");
static_assert(sizeof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency) == 0x000038, "Wrong size on MultiUserReplicationSubsystem_GetObjectReplicationFrequency");
static_assert(offsetof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency, ClientID) == 0x000000, "Member 'MultiUserReplicationSubsystem_GetObjectReplicationFrequency::ClientID' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency, ObjectPath) == 0x000010, "Member 'MultiUserReplicationSubsystem_GetObjectReplicationFrequency::ObjectPath' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency, OutFrequency) == 0x000030, "Member 'MultiUserReplicationSubsystem_GetObjectReplicationFrequency::OutFrequency' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetObjectReplicationFrequency, ReturnValue) == 0x000032, "Member 'MultiUserReplicationSubsystem_GetObjectReplicationFrequency::ReturnValue' has a wrong offset!");

// DelegateFunction MultiUserClientLibrary.MultiUserReplicationSubsystem.OnServerStateChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature final
{
public:
	struct FGuid                                  EndpointId;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature) == 0x000004, "Wrong alignment on MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature");
static_assert(sizeof(MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature) == 0x000010, "Wrong size on MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature");
static_assert(offsetof(MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature, EndpointId) == 0x000000, "Member 'MultiUserReplicationSubsystem_OnServerStateChanged__DelegateSignature::EndpointId' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationSubsystem.GetPropertiesRegisteredToObject
// 0x0040 (0x0040 - 0x0000)
struct MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject final
{
public:
	struct FGuid                                  ClientID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConcertPropertyChainWrapper>   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject) == 0x000008, "Wrong alignment on MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject");
static_assert(sizeof(MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject) == 0x000040, "Wrong size on MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject");
static_assert(offsetof(MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject, ClientID) == 0x000000, "Member 'MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject::ClientID' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject, ObjectPath) == 0x000010, "Member 'MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject::ObjectPath' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject, ReturnValue) == 0x000030, "Member 'MultiUserReplicationSubsystem_GetPropertiesRegisteredToObject::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationSubsystem.GetRegisteredObjects
// 0x0020 (0x0020 - 0x0000)
struct MultiUserReplicationSubsystem_GetRegisteredObjects final
{
public:
	struct FGuid                                  ClientID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationSubsystem_GetRegisteredObjects) == 0x000008, "Wrong alignment on MultiUserReplicationSubsystem_GetRegisteredObjects");
static_assert(sizeof(MultiUserReplicationSubsystem_GetRegisteredObjects) == 0x000020, "Wrong size on MultiUserReplicationSubsystem_GetRegisteredObjects");
static_assert(offsetof(MultiUserReplicationSubsystem_GetRegisteredObjects, ClientID) == 0x000000, "Member 'MultiUserReplicationSubsystem_GetRegisteredObjects::ClientID' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetRegisteredObjects, ReturnValue) == 0x000010, "Member 'MultiUserReplicationSubsystem_GetRegisteredObjects::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationSubsystem.GetReplicatedObjects
// 0x0020 (0x0020 - 0x0000)
struct MultiUserReplicationSubsystem_GetReplicatedObjects final
{
public:
	struct FGuid                                  ClientID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserReplicationSubsystem_GetReplicatedObjects) == 0x000008, "Wrong alignment on MultiUserReplicationSubsystem_GetReplicatedObjects");
static_assert(sizeof(MultiUserReplicationSubsystem_GetReplicatedObjects) == 0x000020, "Wrong size on MultiUserReplicationSubsystem_GetReplicatedObjects");
static_assert(offsetof(MultiUserReplicationSubsystem_GetReplicatedObjects, ClientID) == 0x000000, "Member 'MultiUserReplicationSubsystem_GetReplicatedObjects::ClientID' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_GetReplicatedObjects, ReturnValue) == 0x000010, "Member 'MultiUserReplicationSubsystem_GetReplicatedObjects::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserReplicationSubsystem.IsReplicatingObject
// 0x0038 (0x0038 - 0x0000)
struct MultiUserReplicationSubsystem_IsReplicatingObject final
{
public:
	struct FGuid                                  ClientID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47EB[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserReplicationSubsystem_IsReplicatingObject) == 0x000008, "Wrong alignment on MultiUserReplicationSubsystem_IsReplicatingObject");
static_assert(sizeof(MultiUserReplicationSubsystem_IsReplicatingObject) == 0x000038, "Wrong size on MultiUserReplicationSubsystem_IsReplicatingObject");
static_assert(offsetof(MultiUserReplicationSubsystem_IsReplicatingObject, ClientID) == 0x000000, "Member 'MultiUserReplicationSubsystem_IsReplicatingObject::ClientID' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_IsReplicatingObject, ObjectPath) == 0x000010, "Member 'MultiUserReplicationSubsystem_IsReplicatingObject::ObjectPath' has a wrong offset!");
static_assert(offsetof(MultiUserReplicationSubsystem_IsReplicatingObject, ReturnValue) == 0x000030, "Member 'MultiUserReplicationSubsystem_IsReplicatingObject::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.GetRemoteClientIds
// 0x0018 (0x0018 - 0x0000)
struct MultiUserSubsystem_GetRemoteClientIds final
{
public:
	TArray<struct FGuid>                          OutRemoteClientIds;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47ED[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserSubsystem_GetRemoteClientIds) == 0x000008, "Wrong alignment on MultiUserSubsystem_GetRemoteClientIds");
static_assert(sizeof(MultiUserSubsystem_GetRemoteClientIds) == 0x000018, "Wrong size on MultiUserSubsystem_GetRemoteClientIds");
static_assert(offsetof(MultiUserSubsystem_GetRemoteClientIds, OutRemoteClientIds) == 0x000000, "Member 'MultiUserSubsystem_GetRemoteClientIds::OutRemoteClientIds' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_GetRemoteClientIds, ReturnValue) == 0x000010, "Member 'MultiUserSubsystem_GetRemoteClientIds::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.K2_ExtractEventData
// 0x0018 (0x0018 - 0x0000)
struct MultiUserSubsystem_K2_ExtractEventData final
{
public:
	struct FMultiUserBlueprintEventData           EventData;                                         // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StructOut;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47EE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserSubsystem_K2_ExtractEventData) == 0x000008, "Wrong alignment on MultiUserSubsystem_K2_ExtractEventData");
static_assert(sizeof(MultiUserSubsystem_K2_ExtractEventData) == 0x000018, "Wrong size on MultiUserSubsystem_K2_ExtractEventData");
static_assert(offsetof(MultiUserSubsystem_K2_ExtractEventData, EventData) == 0x000000, "Member 'MultiUserSubsystem_K2_ExtractEventData::EventData' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_K2_ExtractEventData, StructOut) == 0x000010, "Member 'MultiUserSubsystem_K2_ExtractEventData::StructOut' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.K2_SendCustomEvent
// 0x0004 (0x0004 - 0x0000)
struct MultiUserSubsystem_K2_SendCustomEvent final
{
public:
	int32                                         EventData;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserSubsystem_K2_SendCustomEvent) == 0x000004, "Wrong alignment on MultiUserSubsystem_K2_SendCustomEvent");
static_assert(sizeof(MultiUserSubsystem_K2_SendCustomEvent) == 0x000004, "Wrong size on MultiUserSubsystem_K2_SendCustomEvent");
static_assert(offsetof(MultiUserSubsystem_K2_SendCustomEvent, EventData) == 0x000000, "Member 'MultiUserSubsystem_K2_SendCustomEvent::EventData' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.RegisterCustomEventHandler
// 0x0020 (0x0020 - 0x0000)
struct MultiUserSubsystem_RegisterCustomEventHandler final
{
public:
	const class UStruct*                          EventType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FMultiUserBlueprintEventData& Data)> InEventHandler;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47EF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserSubsystem_RegisterCustomEventHandler) == 0x000008, "Wrong alignment on MultiUserSubsystem_RegisterCustomEventHandler");
static_assert(sizeof(MultiUserSubsystem_RegisterCustomEventHandler) == 0x000020, "Wrong size on MultiUserSubsystem_RegisterCustomEventHandler");
static_assert(offsetof(MultiUserSubsystem_RegisterCustomEventHandler, EventType) == 0x000000, "Member 'MultiUserSubsystem_RegisterCustomEventHandler::EventType' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_RegisterCustomEventHandler, InEventHandler) == 0x000008, "Member 'MultiUserSubsystem_RegisterCustomEventHandler::InEventHandler' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_RegisterCustomEventHandler, ReturnValue) == 0x000018, "Member 'MultiUserSubsystem_RegisterCustomEventHandler::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.UnregisterCustomEventHandler
// 0x0010 (0x0010 - 0x0000)
struct MultiUserSubsystem_UnregisterCustomEventHandler final
{
public:
	const class UStruct*                          EventType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserSubsystem_UnregisterCustomEventHandler) == 0x000008, "Wrong alignment on MultiUserSubsystem_UnregisterCustomEventHandler");
static_assert(sizeof(MultiUserSubsystem_UnregisterCustomEventHandler) == 0x000010, "Wrong size on MultiUserSubsystem_UnregisterCustomEventHandler");
static_assert(offsetof(MultiUserSubsystem_UnregisterCustomEventHandler, EventType) == 0x000000, "Member 'MultiUserSubsystem_UnregisterCustomEventHandler::EventType' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_UnregisterCustomEventHandler, ReturnValue) == 0x000008, "Member 'MultiUserSubsystem_UnregisterCustomEventHandler::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.GetLocalClientId
// 0x0014 (0x0014 - 0x0000)
struct MultiUserSubsystem_GetLocalClientId final
{
public:
	struct FGuid                                  OutClientId;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47F1[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserSubsystem_GetLocalClientId) == 0x000004, "Wrong alignment on MultiUserSubsystem_GetLocalClientId");
static_assert(sizeof(MultiUserSubsystem_GetLocalClientId) == 0x000014, "Wrong size on MultiUserSubsystem_GetLocalClientId");
static_assert(offsetof(MultiUserSubsystem_GetLocalClientId, OutClientId) == 0x000000, "Member 'MultiUserSubsystem_GetLocalClientId::OutClientId' has a wrong offset!");
static_assert(offsetof(MultiUserSubsystem_GetLocalClientId, ReturnValue) == 0x000010, "Member 'MultiUserSubsystem_GetLocalClientId::ReturnValue' has a wrong offset!");

// Function MultiUserClientLibrary.MultiUserSubsystem.IsConnectedToSession
// 0x0001 (0x0001 - 0x0000)
struct MultiUserSubsystem_IsConnectedToSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserSubsystem_IsConnectedToSession) == 0x000001, "Wrong alignment on MultiUserSubsystem_IsConnectedToSession");
static_assert(sizeof(MultiUserSubsystem_IsConnectedToSession) == 0x000001, "Wrong size on MultiUserSubsystem_IsConnectedToSession");
static_assert(offsetof(MultiUserSubsystem_IsConnectedToSession, ReturnValue) == 0x000000, "Member 'MultiUserSubsystem_IsConnectedToSession::ReturnValue' has a wrong offset!");

}

