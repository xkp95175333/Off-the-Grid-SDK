#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_Micro_Missiles_Arm_R

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ControlRig_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CLA_Micro_Missiles_Arm_R.ABP_CLA_Micro_Missiles_Arm_R_C
// 0x0B10 (0x0E80 - 0x0370)
class UABP_CLA_Micro_Missiles_Arm_R_C final : public UAnimInstance
{
public:
	uint8                                         Pad_5E44[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x03A8(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x0878(0x0158)(ContainsInstancedReference)
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x09D0(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0AC0(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0B08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0B58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0B80(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0BA8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0BF0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0C10(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0C58(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0C78(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0CC0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0CE0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0D28(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0D48(0x00C8)()
	bool                                          __CustomProperty_third_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC; // 0x0E10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_second_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC; // 0x0E11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_first_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC; // 0x0E12(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E45[0x5];                                     // 0x0E13(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Owner_Mesh;                                        // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           IdleToActivateToAim;                               // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AimToDeactivateToIdle;                             // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           OwnerCharacter;                                    // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ActiveTag;                                         // 0x0E38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          TurnedOn;                                          // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E46[0x7];                                     // 0x0E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Mat_count;                                         // 0x0E60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LOD_count;                                         // 0x0E70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintInitializeAnimation();
	void ExecuteUbergraph_ABP_CLA_Micro_Missiles_Arm_R(int32 EntryPoint);
	void OnTagAdded_0182012147818EB5404584A70BE16A33(const struct FGameplayTag& Tag);
	void OnTagRemoved_0182012147818EB5404584A70BE16A33(const struct FGameplayTag& Tag);
	void PlayActivationAnimation();
	void PlayDeactivationAnimation();
	void UnHideMaterialSlots(TArray<int32>& LODs, TArray<int32>& Materials);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CLA_Micro_Missiles_Arm_R_C">();
	}
	static class UABP_CLA_Micro_Missiles_Arm_R_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CLA_Micro_Missiles_Arm_R_C>();
	}
};
static_assert(alignof(UABP_CLA_Micro_Missiles_Arm_R_C) == 0x000010, "Wrong alignment on UABP_CLA_Micro_Missiles_Arm_R_C");
static_assert(sizeof(UABP_CLA_Micro_Missiles_Arm_R_C) == 0x000E80, "Wrong size on UABP_CLA_Micro_Missiles_Arm_R_C");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, UberGraphFrame) == 0x000370, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_ControlRig) == 0x0003A8, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_CopyPoseFromMesh) == 0x000878, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_LayeredBoneBlend) == 0x0009D0, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_Slot) == 0x000AC0, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_TransitionResult_3) == 0x000B08, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_TransitionResult_2) == 0x000B30, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_TransitionResult_1) == 0x000B58, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_TransitionResult) == 0x000B80, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_SequencePlayer_3) == 0x000BA8, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_StateResult_3) == 0x000BF0, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_SequencePlayer_2) == 0x000C10, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_StateResult_2) == 0x000C58, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_SequencePlayer_1) == 0x000C78, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_StateResult_1) == 0x000CC0, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_SequencePlayer) == 0x000CE0, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_StateResult) == 0x000D28, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AnimGraphNode_StateMachine) == 0x000D48, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, __CustomProperty_third_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC) == 0x000E10, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::__CustomProperty_third_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, __CustomProperty_second_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC) == 0x000E11, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::__CustomProperty_second_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, __CustomProperty_first_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC) == 0x000E12, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::__CustomProperty_first_rocket_pack_5B0C60944A390212633B9DA9FEF6B3EC' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, Owner_Mesh) == 0x000E18, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::Owner_Mesh' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, IdleToActivateToAim) == 0x000E20, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::IdleToActivateToAim' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, AimToDeactivateToIdle) == 0x000E28, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::AimToDeactivateToIdle' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, OwnerCharacter) == 0x000E30, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, ActiveTag) == 0x000E38, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::ActiveTag' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, TurnedOn) == 0x000E58, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::TurnedOn' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, Mat_count) == 0x000E60, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::Mat_count' has a wrong offset!");
static_assert(offsetof(UABP_CLA_Micro_Missiles_Arm_R_C, LOD_count) == 0x000E70, "Member 'UABP_CLA_Micro_Missiles_Arm_R_C::LOD_count' has a wrong offset!");

}

