#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_DamageIndicator_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_DamageIndicator_Base.WBP_DamageIndicator_Base_C.CheckForRepeat
// 0x0009 (0x0009 - 0x0000)
struct WBP_DamageIndicator_Base_C_CheckForRepeat final
{
public:
	bool                                          ShouldRepeat;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DamageIndicator_Base_C_CheckForRepeat) == 0x000001, "Wrong alignment on WBP_DamageIndicator_Base_C_CheckForRepeat");
static_assert(sizeof(WBP_DamageIndicator_Base_C_CheckForRepeat) == 0x000009, "Wrong size on WBP_DamageIndicator_Base_C_CheckForRepeat");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, ShouldRepeat) == 0x000000, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::ShouldRepeat' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000006, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_CheckForRepeat, CallFunc_BooleanAND_ReturnValue_1) == 0x000008, "Member 'WBP_DamageIndicator_Base_C_CheckForRepeat::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function WBP_DamageIndicator_Base.WBP_DamageIndicator_Base_C.ExecuteUbergraph_WBP_DamageIndicator_Base
// 0x0050 (0x0050 - 0x0000)
struct WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckForRepeat_ShouldRepeat;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D56[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewDirectionAngle;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D57[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result;    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base) == 0x000008, "Wrong alignment on WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base");
static_assert(sizeof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base) == 0x000050, "Wrong size on WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, EntryPoint) == 0x000000, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_CheckForRepeat_ShouldRepeat) == 0x000004, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_CheckForRepeat_ShouldRepeat' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, K2Node_Event_NewDirectionAngle) == 0x000030, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::K2Node_Event_NewDirectionAngle' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_CreatePlayAnimationProxyObject_Result) == 0x000038, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_CreatePlayAnimationProxyObject_Result' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_CreatePlayAnimationProxyObject_ReturnValue) == 0x000040, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_CreatePlayAnimationProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'WBP_DamageIndicator_Base_C_ExecuteUbergraph_WBP_DamageIndicator_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WBP_DamageIndicator_Base.WBP_DamageIndicator_Base_C.GetFadeAnimation
// 0x0008 (0x0008 - 0x0000)
struct WBP_DamageIndicator_Base_C_GetFadeAnimation final
{
public:
	class UWidgetAnimation*                       FadeAnimation;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DamageIndicator_Base_C_GetFadeAnimation) == 0x000008, "Wrong alignment on WBP_DamageIndicator_Base_C_GetFadeAnimation");
static_assert(sizeof(WBP_DamageIndicator_Base_C_GetFadeAnimation) == 0x000008, "Wrong size on WBP_DamageIndicator_Base_C_GetFadeAnimation");
static_assert(offsetof(WBP_DamageIndicator_Base_C_GetFadeAnimation, FadeAnimation) == 0x000000, "Member 'WBP_DamageIndicator_Base_C_GetFadeAnimation::FadeAnimation' has a wrong offset!");

// Function WBP_DamageIndicator_Base.WBP_DamageIndicator_Base_C.OnDirectionAngleChanged
// 0x0004 (0x0004 - 0x0000)
struct WBP_DamageIndicator_Base_C_OnDirectionAngleChanged final
{
public:
	float                                         NewDirectionAngle;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DamageIndicator_Base_C_OnDirectionAngleChanged) == 0x000004, "Wrong alignment on WBP_DamageIndicator_Base_C_OnDirectionAngleChanged");
static_assert(sizeof(WBP_DamageIndicator_Base_C_OnDirectionAngleChanged) == 0x000004, "Wrong size on WBP_DamageIndicator_Base_C_OnDirectionAngleChanged");
static_assert(offsetof(WBP_DamageIndicator_Base_C_OnDirectionAngleChanged, NewDirectionAngle) == 0x000000, "Member 'WBP_DamageIndicator_Base_C_OnDirectionAngleChanged::NewDirectionAngle' has a wrong offset!");

}

