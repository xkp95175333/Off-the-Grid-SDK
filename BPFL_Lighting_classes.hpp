#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Lighting

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_Lighting.BPFL_Lighting_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_Lighting_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddSuspension(class UObject* Blueprint, class USplineComponent* Spline, class UStaticMesh* SuspensionMesh, const struct FS_Prop_Mesh_01& PropSettings, const struct FVector& PrevAnchor, const struct FVector& PrevProp, TArray<struct FVector>& PrevSplinePoint0, TArray<struct FVector>& PrevSplinePoint1, const struct FS_Light_Fitting_Mesh_Settings& LightFittingSettings, class UObject* __WorldContext);
	static void Bulb_01_Settings(class UObject* Self_Reference, const struct FS_Bulb_01_Settings& Param_Bulb_01_Settings, const struct FS_Bulb_Light_01_Settings& Bulb_Light_01_Settings, bool Off, const struct FS_LED_Diode_01& LED_Diode_01_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Bulb_02_Settings(const struct FS_Bulb_02_Settings& Param_Bulb_02_Settings, const struct FS_Bulb_Light_02_Settings& Bulb_Light_02_Settings, class UObject* Self_Reference, bool Off, const struct FS_LED_Diode_02& LED_Diode_02_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Bulb_03_Settings(const struct FS_Bulb_03_Settings& Param_Bulb_03_Settings, const struct FS_Bulb_Light_03_Settings& Bulb_Light_03_Settings, class UObject* Self_Reference, bool Off, const struct FS_LED_Diode_03& LED_Diode_03_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Bulb_04_Settings(const struct FS_Bulb_04_Setting& Param_Bulb_04_Settings, const struct FS_Bulb_Light_04_Settings& Bulb_Light_04_Settings, class UObject* Self_Reference, bool Off, const struct FS_LED_Diode_04& LED_Diode_04_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Bulb_Light_01_Settings(const struct FS_Bulb_Light_01_Settings& Param_Bulb_Light_01_Settings, const struct FS_Bulb_Light_01_Emissive_Settings& Bulb_Light_01_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UPrimitiveComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, bool Is_Bulb_Light_On_, class UObject* __WorldContext, double* Bulb_Light_01_Intensity, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UPrimitiveComponent** Prop_Mesh_Ref_Output);
	static void Bulb_Light_02_Settings(const struct FS_Bulb_Light_02_Settings& Param_Bulb_Light_02_Settings, const struct FS_Bulb_Light_02_Emissive_Settings& Bulb_Light_02_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UPrimitiveComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, bool Is_Bulb_Light_On_, class UObject* __WorldContext, double* Bulb_Light_02_Intensity, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UPrimitiveComponent** Prop_Mesh_Ref_Output);
	static void Bulb_Light_03_Settings(const struct FS_Bulb_Light_03_Settings& Param_Bulb_Light_03_Settings, const struct FS_Bulb_Light_03_Emissive_Settings& Bulb_Light_03_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UPrimitiveComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, bool Is_Bulb_Light_On_, class UObject* __WorldContext, double* Bulb_Light_03_Intensity, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UPrimitiveComponent** Prop_Mesh_Ref_Output);
	static void Bulb_Light_04_Settings(const struct FS_Bulb_Light_04_Settings& Param_Bulb_Light_04_Settings, const struct FS_Bulb_Light_04_Emissive_Settings& Bulb_Light_04_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UPrimitiveComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, bool Is_Bulb_Light_On_, class UObject* __WorldContext, double* Bulb_Light_04_Intensity, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UPrimitiveComponent** Prop_Mesh_Ref_Output);
	static void Create_Light_01(const struct FS_Light_01_Settings& Light_01_Settings, class UObject* Self_Reference, bool Off, class UObject* __WorldContext, class USpotLightComponent** Spot_Lights, class UPointLightComponent** Point_Lights, class URectLightComponent** Rect_Lights);
	static void Create_Light_02(const struct FS_Light_02_Settings& Light_02_Settings, class UObject* Self_Reference, bool Off, class UObject* __WorldContext, class USpotLightComponent** Spot_Lights, class UPointLightComponent** Point_Lights, class URectLightComponent** Rect_Lights);
	static void Create_Light_Fitting_Meshes(const struct FS_Light_Fitting_Mesh_Settings& Light_Fitting_Meshes_Settings, class UObject* Self_Reference, class USplineComponent* Spline, class UObject* __WorldContext);
	static void Create_Main_Throw_Light(const struct FS_Main_Throw_Light_01_Settings& Main_Throw_Light_Settings, class UObject* Self_Reference, bool Are_Bulb_Lights_On_, class UObject* __WorldContext, class USpotLightComponent** Spot_Light, class UPointLightComponent** Point_Light, class URectLightComponent** Rect_Light);
	static void Create_Prop_Mesh(const struct FS_Prop_Mesh_01& Prop_Mesh_01, class UObject* Self_Reference, class USplineComponent* SplineIn, class UObject* __WorldContext, class UStaticMeshComponent** Prop_Mesh_Reference);
	static void Emissive_Plane_Settings(class UObject* Self_Reference, const struct FS_Ambient_Emissive_Settings& Ambient_Emissive_Settings, class UObject* __WorldContext);
	static void Light_01_Settings(const struct FS_Light_01_Settings& Param_Light_01_Settings, const struct FS_Light_01_Emissive_Settings& Light_01_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UStaticMeshComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Preset_Attenuation_Radius, class UObject* __WorldContext, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UStaticMeshComponent** Prop_Mesh_Ref_Output);
	static void Light_02_Settings(const struct FS_Light_02_Settings& Param_Light_02_Settings, const struct FS_Light_02_Emissive_Settings& Light_02_Emissive_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, class UStaticMeshComponent* Prop_Mesh_Reference, double Preset_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Preset_Attenuation_Radius, class UObject* __WorldContext, double* Final_Lumen_Int_Output, double* Final_Emissive_Int_Output, struct FVector* Final_Colour_Output, class UStaticMeshComponent** Prop_Mesh_Ref_Output);
	static void Lobby_Transition_From_Camera(class ULevelSequence* Level_Sequence, int32 End_Frame_Number, class UObject* __WorldContext);
	static void Lobby_Transition_to_Camera(class ULevelSequence* Camera_Sequence, class UObject* __WorldContext);
	static void Main_Throw_Light_01_Settings(const struct FS_Main_Throw_Light_01_Settings& Param_Main_Throw_Light_01_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, double Bulb_Light_01_Intensity, double Bulb_Light_02_Intensity, double Bulb_Light_03_Intensity, double Bulb_Light_04_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Preset_Attenuation_Radius, class UObject* __WorldContext);
	static void Main_Throw_Light_02_Settings(const struct FS_Main_Throw_Light_02_Settings& Param_Main_Throw_Light_02_Settings, class USpotLightComponent* Spot, class UPointLightComponent* Point, class URectLightComponent* Rect, double Bulb_Light_01_Intensity, double Bulb_Light_02_Intensity, double Bulb_Light_03_Intensity, double Bulb_Light_04_Intensity, const struct FLinearColor& Preset_Colour, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Preset_Attenuation_Radius, class UObject* __WorldContext);
	static void Podium_Bulb_01_Settings(class UObject* Self_Reference, const struct FS_PodiumBulb_01_Settings& Param_Podium_Bulb_01_Settings, const struct FS_Bulb_Light_01_Settings& Bulb_Light_01_Settings, bool Off, const struct FS_LED_Diode_01& LED_Diode_01_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Podium_Bulb_02_Settings(class UObject* Self_Reference, const struct FS_PodiumBulb_02_Settings& Param_Podium_Bulb_02_Settings, const struct FS_Bulb_Light_02_Settings& Bulb_Light_02_Settings, bool Off, const struct FS_LED_Diode_02& LED_Diode_02_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Podium_Bulb_03_Settings(class UObject* Self_Reference, const struct FS_PodiumBulb_03_Settings& Param_Podium_Bulb_03_Settings, const struct FS_Bulb_Light_03_Settings& Bulb_Light_03_Settings, bool Off, const struct FS_LED_Diode_03& LED_Diode_03_Settings, class UObject* __WorldContext, bool* Is_Bulb_Light_On_, class USpotLightComponent** Spot, class UPointLightComponent** Point, class URectLightComponent** Rect, class UPrimitiveComponent** Prop_Mesh_Reference);
	static void Point_Light_Settings(class UPointLightComponent* Point_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Scale_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);
	static void Presets(const struct FS_Light_Presets& Light_Presets_Input, class UObject* __WorldContext, double* Preset_Intensity, struct FLinearColor* Preset_Colour, double* Preset_Kelvin, double* Preset_Attenuation_Radius, bool* Turn_Lights_On_, bool* Use_Preset_Kelvin);
	static void Procedural_Railings(class UObject* Self_Reference, const struct FS_Procedural_Railings& Param_Procedural_Railings, class UObject* __WorldContext);
	static void Rect_Light_Settings(class URectLightComponent* Rect_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Shadow_Casting_Start_Distance, double Source_Width, double Source_Height, double Barn_Door_Angle, double Barn_Door_Length, class UTexture* Source_Texture, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);
	static void RestVariables(TArray<class USplineComponent*>& Splines, const struct FS_Prop_Mesh_01& Settings, const struct FVector& InLockedProp, const struct FVector& InLockedAnchor, const struct FVector& InPreProp, const struct FVector& InPreAnchor, TArray<struct FVector>& InPrevSplinePoint0, TArray<struct FVector>& InPrevSplinePoint1, const struct FS_Light_Fitting_Mesh_Settings& LightFittingSettings, class UObject* __WorldContext, struct FVector* OutLockedProp, struct FVector* OutLockedAnchor, TArray<struct FVector>* OutPrevSplinePoint0, TArray<struct FVector>* OutPrevSplinePoint1);
	static void SetDefaultSuspensionTransform(const struct FS_Light_Fitting_Mesh_Settings& LightFittingSettings, const struct FS_Prop_Mesh_01& PropMeshSettings, class USplineComponent* Spline, class UObject* __WorldContext, struct FS_Light_Fitting_Mesh_Settings* LightFittingSettingsOut, struct FS_Prop_Mesh_01* PropMeshSettingsOut, struct FVector* SplineLocation);
	static void Spot_Light_Settings(class USpotLightComponent* Spot_Light, bool Override_Preset_Intensity, double Intensity, double Preset_Intensity, bool Override_Preset_Colour, const struct FLinearColor& Colour, const struct FLinearColor& Preset_Colour, bool Override_Attenuation_Radius, double Attenuation_Radius, double Preset_Attenuation_Radius, double Inner_Cone_Angle, double Outer_Cone_Angle, double Shadow_Casting_Start_Distance, double Source_Radius, double Soft_Source_Radius, double Source_Length, bool Use_Temperature, bool Use_Preset_Kelvin_, double Preset_Kelvin, double Temperature, bool Cast_Shadows, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, bool Use_Inverse_Squared_Falloff, double Light_Falloff_Exponent, double Inverse_Exposure_Blend, double Specular_Scale, double Shadow_Bias, double Shadow_Slope_Bias, bool Lighting_Channel_0, bool Lighting_Channel_1, bool Lighting_Channel_2, bool Cast_Volumetric_Shadows, double Max_Draw_Distance, double Max_Distance_Fade_Range, class UMaterialInterface* Light_Function_Material, const struct FVector& Light_Function_Scale, double Light_Function_Fade_Distance, double Disabled_Brightness, class UTextureLightProfile* IES_Texture, bool Use_IES_Intensity, double IES_Intensity_Scale, class UObject* __WorldContext, double* Final_Intensity_Output, struct FLinearColor* Final_Colour_Output);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_Lighting_C">();
	}
	static class UBPFL_Lighting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_Lighting_C>();
	}
};
static_assert(alignof(UBPFL_Lighting_C) == 0x000008, "Wrong alignment on UBPFL_Lighting_C");
static_assert(sizeof(UBPFL_Lighting_C) == 0x000028, "Wrong size on UBPFL_Lighting_C");

}

