#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Pathfinder_LeftArm

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ActivateLimb
// 0x0001 (0x0001 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ActivateLimb final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ActivateLimb) == 0x000001, "Wrong alignment on GA_Pathfinder_LeftArm_C_ActivateLimb");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ActivateLimb) == 0x000001, "Wrong size on GA_Pathfinder_LeftArm_C_ActivateLimb");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ActivateLimb, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ActivateLimb::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.AddCharge
// 0x0004 (0x0004 - 0x0000)
struct GA_Pathfinder_LeftArm_C_AddCharge final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_AddCharge) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_AddCharge");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_AddCharge) == 0x000004, "Wrong size on GA_Pathfinder_LeftArm_C_AddCharge");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_AddCharge, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_AddCharge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ChargeCompleteFeddback
// 0x0001 (0x0001 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback) == 0x000001, "Wrong alignment on GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback) == 0x000001, "Wrong size on GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ChargeCompleteFeddback::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ChargeCompleteSound
// 0x0020 (0x0020 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ChargeCompleteSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ChargeCompleteSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ChargeCompleteSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ChargeCompleteSound) == 0x000020, "Wrong size on GA_Pathfinder_LeftArm_C_ChargeCompleteSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeCompleteSound, Temp_delegate_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ChargeCompleteSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeCompleteSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_ChargeCompleteSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeCompleteSound, CallFunc_PostEvent_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_ChargeCompleteSound::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ChargeInterruptedSound
// 0x0020 (0x0020 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ChargeInterruptedSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ChargeInterruptedSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ChargeInterruptedSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ChargeInterruptedSound) == 0x000020, "Wrong size on GA_Pathfinder_LeftArm_C_ChargeInterruptedSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeInterruptedSound, Temp_delegate_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ChargeInterruptedSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeInterruptedSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_ChargeInterruptedSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeInterruptedSound, CallFunc_PostEvent_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_ChargeInterruptedSound::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ChargeLoadedSound
// 0x0028 (0x0028 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ChargeLoadedSound final
{
public:
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventAtLocation_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ChargeLoadedSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ChargeLoadedSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ChargeLoadedSound) == 0x000028, "Wrong size on GA_Pathfinder_LeftArm_C_ChargeLoadedSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeLoadedSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ChargeLoadedSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeLoadedSound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_ChargeLoadedSound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ChargeLoadedSound, CallFunc_PostEventAtLocation_ReturnValue) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_ChargeLoadedSound::CallFunc_PostEventAtLocation_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ClampCharges
// 0x000C (0x000C - 0x0000)
struct GA_Pathfinder_LeftArm_C_ClampCharges final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentCharges_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ClampCharges) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_ClampCharges");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ClampCharges) == 0x00000C, "Wrong size on GA_Pathfinder_LeftArm_C_ClampCharges");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ClampCharges, ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ClampCharges::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ClampCharges, CallFunc_GetCurrentCharges_ReturnValue) == 0x000004, "Member 'GA_Pathfinder_LeftArm_C_ClampCharges::CallFunc_GetCurrentCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ClampCharges, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_ClampCharges::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.DeactivateRemoteIfAllExploded
// 0x0040 (0x0040 - 0x0000)
struct GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F83[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded) == 0x000040, "Wrong size on GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000028, "Member 'GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded, CallFunc_Array_IsEmpty_ReturnValue) == 0x000038, "Member 'GA_Pathfinder_LeftArm_C_DeactivateRemoteIfAllExploded::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ExecuteUbergraph_GA_Pathfinder_LeftArm
// 0x01D0 (0x01D0 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ActionNumber;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F84[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data;                           // 0x0020(0x0028)(ConstParm)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable;                              // 0x0048(0x0028)()
	class UGzAT_ServerWaitForTargetData*          CallFunc_ServerWaitForClientTargetData_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F85[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLaunchData_Launch_Position;            // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchData_Launch_Direction;           // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLaunchData_ChargesToShoot;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F86[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLaunchData_LaunchSpeed;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F87[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Time)>                   K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00DC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00EC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x00FC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x010C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ActionNumber_1;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F88[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 ActionNumber)>           K2Node_CreateDelegate_OutputDelegate_6;            // 0x0124(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F89[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_CustomEvent_EndPlayReason;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8A[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 ActionNumber)>           K2Node_CreateDelegate_OutputDelegate_7;            // 0x014C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* Actor, EEndPlayReason EndPlayReason)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x015C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentCharges_ReturnValue;            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_1;            // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8B[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAT_WaitCustomInputRelease*           CallFunc_WaitCustomInputRelease_ReturnValue;       // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_2;            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue_3;            // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8C[0x5];                                     // 0x0183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_PreDelay_PreDelay;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0190(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ClampCharges_ReturnValue;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8D[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_RemoveExplodedGrenade_GrenadesFired;      // 0x01A0(0x0010)(ReferenceParm)
	class UAbilityTask_Repeat*                    CallFunc_RepeatAction_ReturnValue;                 // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8E[0x1];                                     // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentCharges_ReturnValue_1;          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8F[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CallDelegate_OverchargeTimer_ImplicitCast;  // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm) == 0x0001D0, "Wrong size on GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, EntryPoint) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_ActionNumber) == 0x000004, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_ActionNumber' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_int_Variable) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_Data) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_Data' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_struct_Variable) == 0x000048, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_ServerWaitForClientTargetData_ReturnValue) == 0x000070, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_ServerWaitForClientTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetLaunchData_Launch_Position) == 0x000080, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetLaunchData_Launch_Position' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetLaunchData_Launch_Direction) == 0x000098, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetLaunchData_Launch_Direction' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetLaunchData_ChargesToShoot) == 0x0000B0, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetLaunchData_ChargesToShoot' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetLaunchData_LaunchSpeed) == 0x0000B8, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetLaunchData_LaunchSpeed' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_Greater_IntInt_ReturnValue) == 0x0000C0, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C4, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_Time) == 0x0000D4, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_real_Variable) == 0x0000D8, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000DC, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000EC, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000FC, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_5) == 0x00010C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_ActionNumber_1) == 0x00011C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_ActionNumber_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_Array_Contains_ReturnValue) == 0x000120, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000121, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_6) == 0x000124, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_bool_Has_Been_Initd_Variable) == 0x000134, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_bool_IsClosed_Variable) == 0x000135, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_bool_Has_Been_Initd_Variable_1) == 0x000136, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_Event_bWasCancelled) == 0x000137, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_HasAuthority_ReturnValue) == 0x000138, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_Actor) == 0x000140, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CustomEvent_EndPlayReason) == 0x000148, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CustomEvent_EndPlayReason' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_7) == 0x00014C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CreateDelegate_OutputDelegate_8) == 0x00015C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetCurrentCharges_ReturnValue) == 0x00016C, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetCurrentCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_Less_IntInt_ReturnValue) == 0x000170, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_HasAuthority_ReturnValue_1) == 0x000171, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_WaitCustomInputRelease_ReturnValue) == 0x000178, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_WaitCustomInputRelease_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_IsValid_ReturnValue_1) == 0x000180, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_HasAuthority_ReturnValue_2) == 0x000181, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_HasAuthority_ReturnValue_3) == 0x000182, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_PreDelay_PreDelay) == 0x000188, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_PreDelay_PreDelay' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000190, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_ClampCharges_ReturnValue) == 0x000198, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_ClampCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_RemoveExplodedGrenade_GrenadesFired) == 0x0001A0, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_RemoveExplodedGrenade_GrenadesFired' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_RepeatAction_ReturnValue) == 0x0001B0, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_RepeatAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, Temp_bool_IsClosed_Variable_1) == 0x0001B8, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_IsValid_ReturnValue_2) == 0x0001B9, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x0001BA, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_GetCurrentCharges_ReturnValue_1) == 0x0001BC, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_GetCurrentCharges_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, CallFunc_Delay_Duration_ImplicitCast) == 0x0001C0, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm, K2Node_CallDelegate_OverchargeTimer_ImplicitCast) == 0x0001C8, "Member 'GA_Pathfinder_LeftArm_C_ExecuteUbergraph_GA_Pathfinder_LeftArm::K2Node_CallDelegate_OverchargeTimer_ImplicitCast' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.GetLaunchData
// 0x0240 (0x0240 - 0x0000)
struct GA_Pathfinder_LeftArm_C_GetLaunchData final
{
public:
	struct FGameplayAbilityTargetDataHandle       HitResult;                                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                Launch_Position;                                   // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Launch_Direction;                                  // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_ChargesToShoot;                              // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F90[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_LaunchSpeed;                                 // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetHitResultFromTargetData_ReturnValue;   // 0x0068(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F91[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F92[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F93[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_LaunchSpeed_ImplicitCast;    // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_GetLaunchData) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_GetLaunchData");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_GetLaunchData) == 0x000240, "Wrong size on GA_Pathfinder_LeftArm_C_GetLaunchData");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, HitResult) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::HitResult' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, Launch_Position) == 0x000028, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::Launch_Position' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, Launch_Direction) == 0x000040, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::Launch_Direction' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, Param_ChargesToShoot) == 0x000058, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::Param_ChargesToShoot' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, Param_LaunchSpeed) == 0x000060, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::Param_LaunchSpeed' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_GetHitResultFromTargetData_ReturnValue) == 0x000068, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_GetHitResultFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_bBlockingHit) == 0x000160, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_bInitialOverlap) == 0x000161, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_Time) == 0x000164, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_Distance) == 0x000168, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_Location) == 0x000170, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_ImpactPoint) == 0x000188, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_Normal) == 0x0001A0, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_BoneName) == 0x0001F0, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_HitItem) == 0x0001F8, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_ElementIndex) == 0x0001FC, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_FaceIndex) == 0x000200, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_TraceStart) == 0x000208, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, CallFunc_BreakHitResult_TraceEnd) == 0x000220, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_GetLaunchData, K2Node_FunctionResult_LaunchSpeed_ImplicitCast) == 0x000238, "Member 'GA_Pathfinder_LeftArm_C_GetLaunchData::K2Node_FunctionResult_LaunchSpeed_ImplicitCast' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.HasCharges
// 0x000C (0x000C - 0x0000)
struct GA_Pathfinder_LeftArm_C_HasCharges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F94[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentCharges_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_HasCharges) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_HasCharges");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_HasCharges) == 0x00000C, "Wrong size on GA_Pathfinder_LeftArm_C_HasCharges");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_HasCharges, ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_HasCharges::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_HasCharges, CallFunc_GetCurrentCharges_ReturnValue) == 0x000004, "Member 'GA_Pathfinder_LeftArm_C_HasCharges::CallFunc_GetCurrentCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_HasCharges, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_HasCharges::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.InputActionBySlot
// 0x0018 (0x0018 - 0x0000)
struct GA_Pathfinder_LeftArm_C_InputActionBySlot final
{
public:
	class UInputAction*                           Output;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F95[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_InputActionBySlot) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_InputActionBySlot");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_InputActionBySlot) == 0x000018, "Wrong size on GA_Pathfinder_LeftArm_C_InputActionBySlot");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_InputActionBySlot, Output) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_InputActionBySlot::Output' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_InputActionBySlot, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_InputActionBySlot::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_InputActionBySlot, CallFunc_Array_Get_Item) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_InputActionBySlot::CallFunc_Array_Get_Item' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Pathfinder_LeftArm_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Pathfinder_LeftArm_C_K2_OnEndAbility");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Pathfinder_LeftArm_C_K2_OnEndAbility");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.LastCharge
// 0x000C (0x000C - 0x0000)
struct GA_Pathfinder_LeftArm_C_LastCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F96[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentCharges_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_LastCharge) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_LastCharge");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_LastCharge) == 0x00000C, "Wrong size on GA_Pathfinder_LeftArm_C_LastCharge");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LastCharge, ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_LastCharge::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LastCharge, CallFunc_GetCurrentCharges_ReturnValue) == 0x000004, "Member 'GA_Pathfinder_LeftArm_C_LastCharge::CallFunc_GetCurrentCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LastCharge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_LastCharge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.Launch Projectile
// 0x0130 (0x0130 - 0x0000)
struct GA_Pathfinder_LeftArm_C_Launch_Projectile final
{
public:
	struct FVector                                LaunchPosition;                                    // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchDirection;                                   // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_LaunchSpeed;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PathfinderGrenadeBase_C*            K2Node_DynamicCast_AsBP_Pathfinder_Grenade_Base;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F97[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue; // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           CallFunc_GetOwningCharacter_ReturnValue;           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LaunchProjectileWithSpeed_Speed_ImplicitCast; // 0x0110(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F98[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_LaunchSpeed_ImplicitCast;       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLifeSpan_InLifespan_ImplicitCast;      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_Launch_Projectile) == 0x000010, "Wrong alignment on GA_Pathfinder_LeftArm_C_Launch_Projectile");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_Launch_Projectile) == 0x000130, "Wrong size on GA_Pathfinder_LeftArm_C_Launch_Projectile");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, LaunchPosition) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::LaunchPosition' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, LaunchDirection) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::LaunchDirection' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, Param_LaunchSpeed) == 0x000030, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::Param_LaunchSpeed' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, K2Node_DynamicCast_AsBP_Pathfinder_Grenade_Base) == 0x000038, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::K2Node_DynamicCast_AsBP_Pathfinder_Grenade_Base' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000050, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_GetClassDisplayName_ReturnValue) == 0x0000B0, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x0000C0, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C8, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue) == 0x0000D8, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_Array_Add_ReturnValue) == 0x0000F0, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_Array_Add_ReturnValue_1) == 0x0000F4, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_GetOwningCharacter_ReturnValue) == 0x0000F8, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_GetOwningCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000100, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_FinishSpawningActor_ReturnValue) == 0x000108, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_LaunchProjectileWithSpeed_Speed_ImplicitCast) == 0x000110, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_LaunchProjectileWithSpeed_Speed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, K2Node_VariableSet_LaunchSpeed_ImplicitCast) == 0x000118, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::K2Node_VariableSet_LaunchSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_Launch_Projectile, CallFunc_SetLifeSpan_InLifespan_ImplicitCast) == 0x000120, "Member 'GA_Pathfinder_LeftArm_C_Launch_Projectile::CallFunc_SetLifeSpan_InLifespan_ImplicitCast' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.LockLimbAbility
// 0x00A0 (0x00A0 - 0x0000)
struct GA_Pathfinder_LeftArm_C_LockLimbAbility final
{
public:
	class FString                                 NewParam;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F99[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9A[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9B[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_LockLimbAbility) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_LockLimbAbility");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_LockLimbAbility) == 0x0000A0, "Wrong size on GA_Pathfinder_LeftArm_C_LockLimbAbility");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, NewParam) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::NewParam' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x000030, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000048, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000058, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, Temp_bool_Variable) == 0x000070, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_K2_HasAuthority_ReturnValue) == 0x000071, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_GetClassDisplayName_ReturnValue) == 0x000078, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000088, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_LockLimbAbility, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000098, "Member 'GA_Pathfinder_LeftArm_C_LockLimbAbility::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.MakeAndSendData
// 0x0028 (0x0028 - 0x0000)
struct GA_Pathfinder_LeftArm_C_MakeAndSendData final
{
public:
	struct FGameplayAbilityTargetDataHandle       CallFunc_MakeLaunchData_ReturnValue;               // 0x0000(0x0028)()
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_MakeAndSendData) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_MakeAndSendData");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_MakeAndSendData) == 0x000028, "Wrong size on GA_Pathfinder_LeftArm_C_MakeAndSendData");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeAndSendData, CallFunc_MakeLaunchData_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_MakeAndSendData::CallFunc_MakeLaunchData_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.MakeLaunchData
// 0x01C8 (0x01C8 - 0x0000)
struct GA_Pathfinder_LeftArm_C_MakeLaunchData final
{
public:
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	TArray<struct FHitResult>                     K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayAbilityTargetDataHandle       CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue; // 0x0038(0x0028)()
	struct FVector                                CallFunc_GetLaunchLocation_LaunchLocation;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchVelo_LaunchVelocity;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchVelo_LaunchLocation;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLaunchVelo_LaunchSpeed;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLaunchDirection_ReturnValue;           // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x00C8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeHitResult_Time_ImplicitCast;          // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_MakeLaunchData) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_MakeLaunchData");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_MakeLaunchData) == 0x0001C8, "Wrong size on GA_Pathfinder_LeftArm_C_MakeLaunchData");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, K2Node_MakeArray_Array) == 0x000028, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue) == 0x000038, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_MakeGameplayAbilityTargetDataHandleFromHitResults_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_GetLaunchLocation_LaunchLocation) == 0x000060, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_GetLaunchLocation_LaunchLocation' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_GetLaunchVelo_LaunchVelocity) == 0x000078, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_GetLaunchVelo_LaunchVelocity' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_GetLaunchVelo_LaunchLocation) == 0x000090, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_GetLaunchVelo_LaunchLocation' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_GetLaunchVelo_LaunchSpeed) == 0x0000A8, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_GetLaunchVelo_LaunchSpeed' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_GetLaunchDirection_ReturnValue) == 0x0000B0, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_GetLaunchDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_MakeHitResult_ReturnValue) == 0x0000C8, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_MakeLaunchData, CallFunc_MakeHitResult_Time_ImplicitCast) == 0x0001C0, "Member 'GA_Pathfinder_LeftArm_C_MakeLaunchData::CallFunc_MakeHitResult_Time_ImplicitCast' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.OnEndPlay_Event_0
// 0x0010 (0x0010 - 0x0000)
struct GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0 final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0) == 0x000010, "Wrong size on GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0, Actor) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0::Actor' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0, EndPlayReason) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_OnEndPlay_Event_0::EndPlayReason' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.OnFinished_586C039045E083BE4EB562BCB04DF2EF
// 0x0004 (0x0004 - 0x0000)
struct GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF final
{
public:
	int32                                         ActionNumber;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF) == 0x000004, "Wrong size on GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF, ActionNumber) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_OnFinished_586C039045E083BE4EB562BCB04DF2EF::ActionNumber' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53
// 0x0004 (0x0004 - 0x0000)
struct GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53 final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53) == 0x000004, "Wrong size on GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53, Time) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_OnInput_4C91C24341FFC8B0E3FC8AA0BA4D1B53::Time' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.OnPerformAction_586C039045E083BE4EB562BCB04DF2EF
// 0x0004 (0x0004 - 0x0000)
struct GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF final
{
public:
	int32                                         ActionNumber;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF) == 0x000004, "Wrong size on GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF, ActionNumber) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_OnPerformAction_586C039045E083BE4EB562BCB04DF2EF::ActionNumber' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.OverchargeInterruptedSound
// 0x0020 (0x0020 - 0x0000)
struct GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound) == 0x000020, "Wrong size on GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound, Temp_delegate_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound, CallFunc_PostEvent_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_OverchargeInterruptedSound::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.PreDelay
// 0x0018 (0x0018 - 0x0000)
struct GA_Pathfinder_LeftArm_C_PreDelay final
{
public:
	double                                        Param_PreDelay;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_PreDelay) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_PreDelay");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_PreDelay) == 0x000018, "Wrong size on GA_Pathfinder_LeftArm_C_PreDelay");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_PreDelay, Param_PreDelay) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_PreDelay::Param_PreDelay' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_PreDelay, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_PreDelay::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_PreDelay, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_PreDelay::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.QuickSingleShot
// 0x0002 (0x0002 - 0x0000)
struct GA_Pathfinder_LeftArm_C_QuickSingleShot final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCharges_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_QuickSingleShot) == 0x000001, "Wrong alignment on GA_Pathfinder_LeftArm_C_QuickSingleShot");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_QuickSingleShot) == 0x000002, "Wrong size on GA_Pathfinder_LeftArm_C_QuickSingleShot");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_QuickSingleShot, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_QuickSingleShot::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_QuickSingleShot, CallFunc_HasCharges_ReturnValue) == 0x000001, "Member 'GA_Pathfinder_LeftArm_C_QuickSingleShot::CallFunc_HasCharges_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.RemoveExplodedGrenade
// 0x0018 (0x0018 - 0x0000)
struct GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade final
{
public:
	TArray<class AActor*>                         Param_GrenadesFired;                               // 0x0000(0x0010)(Parm, OutParm)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade) == 0x000018, "Wrong size on GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade, Param_GrenadesFired) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade::Param_GrenadesFired' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade, CallFunc_Array_RemoveItem_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000011, "Member 'GA_Pathfinder_LeftArm_C_RemoveExplodedGrenade::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.SetInitialVariables
// 0x0090 (0x0090 - 0x0000)
struct GA_Pathfinder_LeftArm_C_SetInitialVariables final
{
public:
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9C[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           CallFunc_InputActionBySlot_Output;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxCharges_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartAbilityData*                 CallFunc_BP_GetAbilityData_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_BodyPartAbilityData_Pathfinder_C*   K2Node_DynamicCast_AsBP_Body_Part_Ability_Data_Pathfinder; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9E[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           CallFunc_GetOwningCharacter_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PathfinderLimbAbilityComponent_C*   K2Node_DynamicCast_AsBP_Pathfinder_Limb_Ability_Component; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9F[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA0[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ChargeTimeMax_ImplicitCast;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_OverchargeDuration_ImplicitCast; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_SpreadAngle_ImplicitCast;       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MultishotChargeTime_ImplicitCast; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LaunchSpeedMax_ImplicitCast;    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxVelocity_ImplicitCast;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_SetInitialVariables) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_SetInitialVariables");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_SetInitialVariables) == 0x000090, "Wrong size on GA_Pathfinder_LeftArm_C_SetInitialVariables");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, Temp_bool_Has_Been_Initd_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, Temp_bool_IsClosed_Variable) == 0x000001, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_InputActionBySlot_Output) == 0x000008, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_InputActionBySlot_Output' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_GetMaxCharges_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_GetMaxCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_BP_GetAbilityData_ReturnValue) == 0x000028, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_BP_GetAbilityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_AsBP_Body_Part_Ability_Data_Pathfinder) == 0x000030, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_AsBP_Body_Part_Ability_Data_Pathfinder' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x000040, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, CallFunc_GetOwningCharacter_ReturnValue) == 0x000048, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::CallFunc_GetOwningCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_AsBP_Pathfinder_Limb_Ability_Component) == 0x000050, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_AsBP_Pathfinder_Limb_Ability_Component' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000060, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_ChargeTimeMax_ImplicitCast) == 0x000070, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_ChargeTimeMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_OverchargeDuration_ImplicitCast) == 0x000078, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_OverchargeDuration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_SpreadAngle_ImplicitCast) == 0x00007C, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_SpreadAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_MultishotChargeTime_ImplicitCast) == 0x000080, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_MultishotChargeTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_LaunchSpeedMax_ImplicitCast) == 0x000084, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_LaunchSpeedMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SetInitialVariables, K2Node_VariableSet_MaxVelocity_ImplicitCast) == 0x000088, "Member 'GA_Pathfinder_LeftArm_C_SetInitialVariables::K2Node_VariableSet_MaxVelocity_ImplicitCast' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.StartChargeSound
// 0x0028 (0x0028 - 0x0000)
struct GA_Pathfinder_LeftArm_C_StartChargeSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_StartChargeSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_StartChargeSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_StartChargeSound) == 0x000028, "Wrong size on GA_Pathfinder_LeftArm_C_StartChargeSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartChargeSound, Temp_delegate_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_StartChargeSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartChargeSound, CallFunc_K2_HasAuthority_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_StartChargeSound::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartChargeSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_StartChargeSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartChargeSound, CallFunc_PostEvent_ReturnValue) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_StartChargeSound::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.StartOverChargeSound
// 0x0028 (0x0028 - 0x0000)
struct GA_Pathfinder_LeftArm_C_StartOverChargeSound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_StartOverChargeSound) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_StartOverChargeSound");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_StartOverChargeSound) == 0x000028, "Wrong size on GA_Pathfinder_LeftArm_C_StartOverChargeSound");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartOverChargeSound, Temp_delegate_Variable) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_StartOverChargeSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartOverChargeSound, CallFunc_K2_HasAuthority_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_StartOverChargeSound::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartOverChargeSound, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_StartOverChargeSound::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_StartOverChargeSound, CallFunc_PostEvent_ReturnValue) == 0x000020, "Member 'GA_Pathfinder_LeftArm_C_StartOverChargeSound::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.SubtractCharge
// 0x0008 (0x0008 - 0x0000)
struct GA_Pathfinder_LeftArm_C_SubtractCharge final
{
public:
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_SubtractCharge) == 0x000004, "Wrong alignment on GA_Pathfinder_LeftArm_C_SubtractCharge");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_SubtractCharge) == 0x000008, "Wrong size on GA_Pathfinder_LeftArm_C_SubtractCharge");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SubtractCharge, CallFunc_Subtract_IntInt_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_SubtractCharge::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_SubtractCharge, CallFunc_Clamp_ReturnValue) == 0x000004, "Member 'GA_Pathfinder_LeftArm_C_SubtractCharge::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ToggleTagAndCommit
// 0x0040 (0x0040 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ToggleTagAndCommit final
{
public:
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ToggleTagAndCommit");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit) == 0x000040, "Wrong size on GA_Pathfinder_LeftArm_C_ToggleTagAndCommit");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit, CallFunc_Conv_IntToString_ReturnValue) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ToggleTagAndCommit::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit, CallFunc_K2_HasAuthority_ReturnValue) == 0x000010, "Member 'GA_Pathfinder_LeftArm_C_ToggleTagAndCommit::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'GA_Pathfinder_LeftArm_C_ToggleTagAndCommit::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000028, "Member 'GA_Pathfinder_LeftArm_C_ToggleTagAndCommit::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ToggleTagAndCommit, CallFunc_K2_CommitAbility_ReturnValue) == 0x000038, "Member 'GA_Pathfinder_LeftArm_C_ToggleTagAndCommit::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");

// Function GA_Pathfinder_LeftArm.GA_Pathfinder_LeftArm_C.ValidData_A8C4D0B84F9CC642725A3592FFB278B7
// 0x0028 (0x0028 - 0x0000)
struct GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7) == 0x000008, "Wrong alignment on GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7");
static_assert(sizeof(GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7) == 0x000028, "Wrong size on GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7");
static_assert(offsetof(GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7, Data) == 0x000000, "Member 'GA_Pathfinder_LeftArm_C_ValidData_A8C4D0B84F9CC642725A3592FFB278B7::Data' has a wrong offset!");

}

