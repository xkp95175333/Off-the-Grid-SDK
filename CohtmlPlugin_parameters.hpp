#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CohtmlPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CohtmlPlugin_structs.hpp"


namespace SDK::Params
{

// Function CohtmlPlugin.CohtmlBaseComponent.AddPreloadedTexture
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_AddPreloadedTexture final
{
public:
	class UTexture2D*                             Param_Texture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_AddPreloadedTexture) == 0x000008, "Wrong alignment on CohtmlBaseComponent_AddPreloadedTexture");
static_assert(sizeof(CohtmlBaseComponent_AddPreloadedTexture) == 0x000008, "Wrong size on CohtmlBaseComponent_AddPreloadedTexture");
static_assert(offsetof(CohtmlBaseComponent_AddPreloadedTexture, Param_Texture) == 0x000000, "Member 'CohtmlBaseComponent_AddPreloadedTexture::Param_Texture' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.CreateDataModelFromObject
// 0x0018 (0x0018 - 0x0000)
struct CohtmlBaseComponent_CreateDataModelFromObject final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Model;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_CreateDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlBaseComponent_CreateDataModelFromObject");
static_assert(sizeof(CohtmlBaseComponent_CreateDataModelFromObject) == 0x000018, "Wrong size on CohtmlBaseComponent_CreateDataModelFromObject");
static_assert(offsetof(CohtmlBaseComponent_CreateDataModelFromObject, Param_Name) == 0x000000, "Member 'CohtmlBaseComponent_CreateDataModelFromObject::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_CreateDataModelFromObject, Model) == 0x000010, "Member 'CohtmlBaseComponent_CreateDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.CreateDataModelFromStruct
// 0x0030 (0x0030 - 0x0000)
struct CohtmlBaseComponent_CreateDataModelFromStruct final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0010(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_CreateDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlBaseComponent_CreateDataModelFromStruct");
static_assert(sizeof(CohtmlBaseComponent_CreateDataModelFromStruct) == 0x000030, "Wrong size on CohtmlBaseComponent_CreateDataModelFromStruct");
static_assert(offsetof(CohtmlBaseComponent_CreateDataModelFromStruct, Param_Name) == 0x000000, "Member 'CohtmlBaseComponent_CreateDataModelFromStruct::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_CreateDataModelFromStruct, Struct) == 0x000010, "Member 'CohtmlBaseComponent_CreateDataModelFromStruct::Struct' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.CreateJSEvent
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_CreateJSEvent final
{
public:
	class UCohtmlJSEvent*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_CreateJSEvent) == 0x000008, "Wrong alignment on CohtmlBaseComponent_CreateJSEvent");
static_assert(sizeof(CohtmlBaseComponent_CreateJSEvent) == 0x000008, "Wrong size on CohtmlBaseComponent_CreateJSEvent");
static_assert(offsetof(CohtmlBaseComponent_CreateJSEvent, ReturnValue) == 0x000000, "Member 'CohtmlBaseComponent_CreateJSEvent::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.EnableDelayedUpdate
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_EnableDelayedUpdate final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_EnableDelayedUpdate) == 0x000001, "Wrong alignment on CohtmlBaseComponent_EnableDelayedUpdate");
static_assert(sizeof(CohtmlBaseComponent_EnableDelayedUpdate) == 0x000001, "Wrong size on CohtmlBaseComponent_EnableDelayedUpdate");
static_assert(offsetof(CohtmlBaseComponent_EnableDelayedUpdate, bEnabled) == 0x000000, "Member 'CohtmlBaseComponent_EnableDelayedUpdate::bEnabled' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.EnableRendering
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_EnableRendering final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_EnableRendering) == 0x000001, "Wrong alignment on CohtmlBaseComponent_EnableRendering");
static_assert(sizeof(CohtmlBaseComponent_EnableRendering) == 0x000001, "Wrong size on CohtmlBaseComponent_EnableRendering");
static_assert(offsetof(CohtmlBaseComponent_EnableRendering, bEnabled) == 0x000000, "Member 'CohtmlBaseComponent_EnableRendering::bEnabled' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.EnsureMeshData
// 0x0002 (0x0002 - 0x0000)
struct CohtmlBaseComponent_EnsureMeshData final
{
public:
	ECohtmlComponentMeshInit                      MeshInitialization;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_EnsureMeshData) == 0x000001, "Wrong alignment on CohtmlBaseComponent_EnsureMeshData");
static_assert(sizeof(CohtmlBaseComponent_EnsureMeshData) == 0x000002, "Wrong size on CohtmlBaseComponent_EnsureMeshData");
static_assert(offsetof(CohtmlBaseComponent_EnsureMeshData, MeshInitialization) == 0x000000, "Member 'CohtmlBaseComponent_EnsureMeshData::MeshInitialization' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_EnsureMeshData, ReturnValue) == 0x000001, "Member 'CohtmlBaseComponent_EnsureMeshData::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.Load
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBaseComponent_Load final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_Load) == 0x000008, "Wrong alignment on CohtmlBaseComponent_Load");
static_assert(sizeof(CohtmlBaseComponent_Load) == 0x000010, "Wrong size on CohtmlBaseComponent_Load");
static_assert(offsetof(CohtmlBaseComponent_Load, Path) == 0x000000, "Member 'CohtmlBaseComponent_Load::Path' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.PreloadTextureAsync
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBaseComponent_PreloadTextureAsync final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_PreloadTextureAsync) == 0x000008, "Wrong alignment on CohtmlBaseComponent_PreloadTextureAsync");
static_assert(sizeof(CohtmlBaseComponent_PreloadTextureAsync) == 0x000010, "Wrong size on CohtmlBaseComponent_PreloadTextureAsync");
static_assert(offsetof(CohtmlBaseComponent_PreloadTextureAsync, AssetPath) == 0x000000, "Member 'CohtmlBaseComponent_PreloadTextureAsync::AssetPath' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.PreloadTextureSync
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBaseComponent_PreloadTextureSync final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_PreloadTextureSync) == 0x000008, "Wrong alignment on CohtmlBaseComponent_PreloadTextureSync");
static_assert(sizeof(CohtmlBaseComponent_PreloadTextureSync) == 0x000010, "Wrong size on CohtmlBaseComponent_PreloadTextureSync");
static_assert(offsetof(CohtmlBaseComponent_PreloadTextureSync, AssetPath) == 0x000000, "Member 'CohtmlBaseComponent_PreloadTextureSync::AssetPath' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.RegisterForEvent
// 0x0020 (0x0020 - 0x0000)
struct CohtmlBaseComponent_RegisterForEvent final
{
public:
	class FString                                 JSEventName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Delegate;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_RegisterForEvent) == 0x000008, "Wrong alignment on CohtmlBaseComponent_RegisterForEvent");
static_assert(sizeof(CohtmlBaseComponent_RegisterForEvent) == 0x000020, "Wrong size on CohtmlBaseComponent_RegisterForEvent");
static_assert(offsetof(CohtmlBaseComponent_RegisterForEvent, JSEventName) == 0x000000, "Member 'CohtmlBaseComponent_RegisterForEvent::JSEventName' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_RegisterForEvent, Delegate) == 0x000010, "Member 'CohtmlBaseComponent_RegisterForEvent::Delegate' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.RemoveDataModelFromObject
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_RemoveDataModelFromObject final
{
public:
	class UObject*                                Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_RemoveDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlBaseComponent_RemoveDataModelFromObject");
static_assert(sizeof(CohtmlBaseComponent_RemoveDataModelFromObject) == 0x000008, "Wrong size on CohtmlBaseComponent_RemoveDataModelFromObject");
static_assert(offsetof(CohtmlBaseComponent_RemoveDataModelFromObject, Model) == 0x000000, "Member 'CohtmlBaseComponent_RemoveDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.RemovePreloadedTexture
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBaseComponent_RemovePreloadedTexture final
{
public:
	class UTexture2D*                             Param_Texture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBaseComponent_RemovePreloadedTexture) == 0x000008, "Wrong alignment on CohtmlBaseComponent_RemovePreloadedTexture");
static_assert(sizeof(CohtmlBaseComponent_RemovePreloadedTexture) == 0x000010, "Wrong size on CohtmlBaseComponent_RemovePreloadedTexture");
static_assert(offsetof(CohtmlBaseComponent_RemovePreloadedTexture, Param_Texture) == 0x000000, "Member 'CohtmlBaseComponent_RemovePreloadedTexture::Param_Texture' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_RemovePreloadedTexture, ReturnValue) == 0x000008, "Member 'CohtmlBaseComponent_RemovePreloadedTexture::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.RemovePreloadedTextureFromPath
// 0x0018 (0x0018 - 0x0000)
struct CohtmlBaseComponent_RemovePreloadedTextureFromPath final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBaseComponent_RemovePreloadedTextureFromPath) == 0x000008, "Wrong alignment on CohtmlBaseComponent_RemovePreloadedTextureFromPath");
static_assert(sizeof(CohtmlBaseComponent_RemovePreloadedTextureFromPath) == 0x000018, "Wrong size on CohtmlBaseComponent_RemovePreloadedTextureFromPath");
static_assert(offsetof(CohtmlBaseComponent_RemovePreloadedTextureFromPath, AssetPath) == 0x000000, "Member 'CohtmlBaseComponent_RemovePreloadedTextureFromPath::AssetPath' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_RemovePreloadedTextureFromPath, ReturnValue) == 0x000010, "Member 'CohtmlBaseComponent_RemovePreloadedTextureFromPath::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.Resize
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_Resize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_Resize) == 0x000004, "Wrong alignment on CohtmlBaseComponent_Resize");
static_assert(sizeof(CohtmlBaseComponent_Resize) == 0x000008, "Wrong size on CohtmlBaseComponent_Resize");
static_assert(offsetof(CohtmlBaseComponent_Resize, Width) == 0x000000, "Member 'CohtmlBaseComponent_Resize::Width' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_Resize, Height) == 0x000004, "Member 'CohtmlBaseComponent_Resize::Height' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.ResizeRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_ResizeRenderTarget final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_ResizeRenderTarget) == 0x000004, "Wrong alignment on CohtmlBaseComponent_ResizeRenderTarget");
static_assert(sizeof(CohtmlBaseComponent_ResizeRenderTarget) == 0x000008, "Wrong size on CohtmlBaseComponent_ResizeRenderTarget");
static_assert(offsetof(CohtmlBaseComponent_ResizeRenderTarget, Width) == 0x000000, "Member 'CohtmlBaseComponent_ResizeRenderTarget::Width' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_ResizeRenderTarget, Height) == 0x000004, "Member 'CohtmlBaseComponent_ResizeRenderTarget::Height' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.SetSoundAttenuation
// 0x03D0 (0x03D0 - 0x0000)
struct CohtmlBaseComponent_SetSoundAttenuation final
{
public:
	struct FSoundAttenuationSettings              Settings;                                          // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_SetSoundAttenuation) == 0x000008, "Wrong alignment on CohtmlBaseComponent_SetSoundAttenuation");
static_assert(sizeof(CohtmlBaseComponent_SetSoundAttenuation) == 0x0003D0, "Wrong size on CohtmlBaseComponent_SetSoundAttenuation");
static_assert(offsetof(CohtmlBaseComponent_SetSoundAttenuation, Settings) == 0x000000, "Member 'CohtmlBaseComponent_SetSoundAttenuation::Settings' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.ShowPaintRects
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_ShowPaintRects final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_ShowPaintRects) == 0x000001, "Wrong alignment on CohtmlBaseComponent_ShowPaintRects");
static_assert(sizeof(CohtmlBaseComponent_ShowPaintRects) == 0x000001, "Wrong size on CohtmlBaseComponent_ShowPaintRects");
static_assert(offsetof(CohtmlBaseComponent_ShowPaintRects, Show) == 0x000000, "Member 'CohtmlBaseComponent_ShowPaintRects::Show' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.HasRequestedView
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_HasRequestedView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_HasRequestedView) == 0x000001, "Wrong alignment on CohtmlBaseComponent_HasRequestedView");
static_assert(sizeof(CohtmlBaseComponent_HasRequestedView) == 0x000001, "Wrong size on CohtmlBaseComponent_HasRequestedView");
static_assert(offsetof(CohtmlBaseComponent_HasRequestedView, ReturnValue) == 0x000000, "Member 'CohtmlBaseComponent_HasRequestedView::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.IsReadyForBindings
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_IsReadyForBindings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_IsReadyForBindings) == 0x000001, "Wrong alignment on CohtmlBaseComponent_IsReadyForBindings");
static_assert(sizeof(CohtmlBaseComponent_IsReadyForBindings) == 0x000001, "Wrong size on CohtmlBaseComponent_IsReadyForBindings");
static_assert(offsetof(CohtmlBaseComponent_IsReadyForBindings, ReturnValue) == 0x000000, "Member 'CohtmlBaseComponent_IsReadyForBindings::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.IsReadyToCreateView
// 0x0001 (0x0001 - 0x0000)
struct CohtmlBaseComponent_IsReadyToCreateView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_IsReadyToCreateView) == 0x000001, "Wrong alignment on CohtmlBaseComponent_IsReadyToCreateView");
static_assert(sizeof(CohtmlBaseComponent_IsReadyToCreateView) == 0x000001, "Wrong size on CohtmlBaseComponent_IsReadyToCreateView");
static_assert(offsetof(CohtmlBaseComponent_IsReadyToCreateView, ReturnValue) == 0x000000, "Member 'CohtmlBaseComponent_IsReadyToCreateView::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.RemoveDataModelFromStruct
// 0x0020 (0x0020 - 0x0000)
struct CohtmlBaseComponent_RemoveDataModelFromStruct final
{
public:
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_RemoveDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlBaseComponent_RemoveDataModelFromStruct");
static_assert(sizeof(CohtmlBaseComponent_RemoveDataModelFromStruct) == 0x000020, "Wrong size on CohtmlBaseComponent_RemoveDataModelFromStruct");
static_assert(offsetof(CohtmlBaseComponent_RemoveDataModelFromStruct, Struct) == 0x000000, "Member 'CohtmlBaseComponent_RemoveDataModelFromStruct::Struct' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.TriggerJSEvent
// 0x0018 (0x0018 - 0x0000)
struct CohtmlBaseComponent_TriggerJSEvent final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCohtmlJSEvent*                         EventData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_TriggerJSEvent) == 0x000008, "Wrong alignment on CohtmlBaseComponent_TriggerJSEvent");
static_assert(sizeof(CohtmlBaseComponent_TriggerJSEvent) == 0x000018, "Wrong size on CohtmlBaseComponent_TriggerJSEvent");
static_assert(offsetof(CohtmlBaseComponent_TriggerJSEvent, Param_Name) == 0x000000, "Member 'CohtmlBaseComponent_TriggerJSEvent::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlBaseComponent_TriggerJSEvent, EventData) == 0x000010, "Member 'CohtmlBaseComponent_TriggerJSEvent::EventData' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.UpdateWholeDataModelFromObject
// 0x0008 (0x0008 - 0x0000)
struct CohtmlBaseComponent_UpdateWholeDataModelFromObject final
{
public:
	class UObject*                                Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_UpdateWholeDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlBaseComponent_UpdateWholeDataModelFromObject");
static_assert(sizeof(CohtmlBaseComponent_UpdateWholeDataModelFromObject) == 0x000008, "Wrong size on CohtmlBaseComponent_UpdateWholeDataModelFromObject");
static_assert(offsetof(CohtmlBaseComponent_UpdateWholeDataModelFromObject, Model) == 0x000000, "Member 'CohtmlBaseComponent_UpdateWholeDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBaseComponent.UpdateWholeDataModelFromStruct
// 0x0020 (0x0020 - 0x0000)
struct CohtmlBaseComponent_UpdateWholeDataModelFromStruct final
{
public:
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBaseComponent_UpdateWholeDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlBaseComponent_UpdateWholeDataModelFromStruct");
static_assert(sizeof(CohtmlBaseComponent_UpdateWholeDataModelFromStruct) == 0x000020, "Wrong size on CohtmlBaseComponent_UpdateWholeDataModelFromStruct");
static_assert(offsetof(CohtmlBaseComponent_UpdateWholeDataModelFromStruct, Struct) == 0x000000, "Member 'CohtmlBaseComponent_UpdateWholeDataModelFromStruct::Struct' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddArray
// 0x0020 (0x0020 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddArray final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Arg;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ArrayType;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240C[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddArray) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddArray");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddArray) == 0x000020, "Wrong size on CohtmlBlueprintFunctionLibrary_AddArray");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddArray, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddArray::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddArray, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddArray::Arg' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddArray, ArrayType) == 0x000018, "Member 'CohtmlBlueprintFunctionLibrary_AddArray::ArrayType' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddArrayOfStructs
// 0x0018 (0x0018 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddArrayOfStructs final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Arg;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddArrayOfStructs) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddArrayOfStructs");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddArrayOfStructs) == 0x000018, "Wrong size on CohtmlBlueprintFunctionLibrary_AddArrayOfStructs");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddArrayOfStructs, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddArrayOfStructs::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddArrayOfStructs, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddArrayOfStructs::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddBool
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddBool final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Arg;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddBool) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddBool");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddBool) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_AddBool");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddBool, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddBool::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddBool, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddBool::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddByte
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddByte final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Arg;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddByte) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddByte");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddByte) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_AddByte");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddByte, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddByte::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddByte, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddByte::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddFloat
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddFloat final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arg;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddFloat) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddFloat");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddFloat) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_AddFloat");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddFloat, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddFloat::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddFloat, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddFloat::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddInt32
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddInt32 final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2410[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddInt32) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddInt32");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddInt32) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_AddInt32");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddInt32, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddInt32::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddInt32, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddInt32::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddObject
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddObject final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Arg;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddObject) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddObject");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddObject) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_AddObject");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddObject, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddObject::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddObject, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddObject::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddString
// 0x0018 (0x0018 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddString final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddString) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddString");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddString) == 0x000018, "Wrong size on CohtmlBlueprintFunctionLibrary_AddString");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddString, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddString::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddString, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddString::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.AddStructArg
// 0x0028 (0x0028 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_AddStructArg final
{
public:
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FStructProperty>            Arg;                                               // 0x0008(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_AddStructArg) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_AddStructArg");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_AddStructArg) == 0x000028, "Wrong size on CohtmlBlueprintFunctionLibrary_AddStructArg");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddStructArg, JSEvent) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_AddStructArg::JSEvent' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_AddStructArg, Arg) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_AddStructArg::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.CreateJSEvent
// 0x0010 (0x0010 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_CreateJSEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCohtmlJSEvent*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_CreateJSEvent) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_CreateJSEvent");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_CreateJSEvent) == 0x000010, "Wrong size on CohtmlBlueprintFunctionLibrary_CreateJSEvent");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_CreateJSEvent, WorldContextObject) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_CreateJSEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_CreateJSEvent, ReturnValue) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_CreateJSEvent::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlBlueprintFunctionLibrary.TriggerJSEvent
// 0x0020 (0x0020 - 0x0000)
struct CohtmlBlueprintFunctionLibrary_TriggerJSEvent final
{
public:
	class UCohtmlBaseComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCohtmlJSEvent*                         JSEvent;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlBlueprintFunctionLibrary_TriggerJSEvent) == 0x000008, "Wrong alignment on CohtmlBlueprintFunctionLibrary_TriggerJSEvent");
static_assert(sizeof(CohtmlBlueprintFunctionLibrary_TriggerJSEvent) == 0x000020, "Wrong size on CohtmlBlueprintFunctionLibrary_TriggerJSEvent");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_TriggerJSEvent, Component) == 0x000000, "Member 'CohtmlBlueprintFunctionLibrary_TriggerJSEvent::Component' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_TriggerJSEvent, EventName) == 0x000008, "Member 'CohtmlBlueprintFunctionLibrary_TriggerJSEvent::EventName' has a wrong offset!");
static_assert(offsetof(CohtmlBlueprintFunctionLibrary_TriggerJSEvent, JSEvent) == 0x000018, "Member 'CohtmlBlueprintFunctionLibrary_TriggerJSEvent::JSEvent' has a wrong offset!");

// Function CohtmlPlugin.CohtmlGameHUD.SetupView
// 0x0018 (0x0018 - 0x0000)
struct CohtmlGameHUD_SetupView final
{
public:
	class FString                                 PageUrl;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableComplexCSSSupport;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayedUpdate;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteCommandProcessingWithLayout;               // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSurfacePartitioning;                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunAdvanceConcurrently;                           // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2414[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlGameHUD_SetupView) == 0x000008, "Wrong alignment on CohtmlGameHUD_SetupView");
static_assert(sizeof(CohtmlGameHUD_SetupView) == 0x000018, "Wrong size on CohtmlGameHUD_SetupView");
static_assert(offsetof(CohtmlGameHUD_SetupView, PageUrl) == 0x000000, "Member 'CohtmlGameHUD_SetupView::PageUrl' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bEnableComplexCSSSupport) == 0x000010, "Member 'CohtmlGameHUD_SetupView::bEnableComplexCSSSupport' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bDelayedUpdate) == 0x000011, "Member 'CohtmlGameHUD_SetupView::bDelayedUpdate' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bReceiveInput) == 0x000012, "Member 'CohtmlGameHUD_SetupView::bReceiveInput' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bExecuteCommandProcessingWithLayout) == 0x000013, "Member 'CohtmlGameHUD_SetupView::bExecuteCommandProcessingWithLayout' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bUseSurfacePartitioning) == 0x000014, "Member 'CohtmlGameHUD_SetupView::bUseSurfacePartitioning' has a wrong offset!");
static_assert(offsetof(CohtmlGameHUD_SetupView, bRunAdvanceConcurrently) == 0x000015, "Member 'CohtmlGameHUD_SetupView::bRunAdvanceConcurrently' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.AlwaysAcceptMouseInput
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_AlwaysAcceptMouseInput final
{
public:
	bool                                          bAccept;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_AlwaysAcceptMouseInput) == 0x000001, "Wrong alignment on CohtmlInputActor_AlwaysAcceptMouseInput");
static_assert(sizeof(CohtmlInputActor_AlwaysAcceptMouseInput) == 0x000001, "Wrong size on CohtmlInputActor_AlwaysAcceptMouseInput");
static_assert(offsetof(CohtmlInputActor_AlwaysAcceptMouseInput, bAccept) == 0x000000, "Member 'CohtmlInputActor_AlwaysAcceptMouseInput::bAccept' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.Initialize
// 0x0008 (0x0008 - 0x0000)
struct CohtmlInputActor_Initialize final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressMode;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlInputWidgetRaycastQuality              RaycastQuality;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2418[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UVChannel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_Initialize) == 0x000004, "Wrong alignment on CohtmlInputActor_Initialize");
static_assert(sizeof(CohtmlInputActor_Initialize) == 0x000008, "Wrong size on CohtmlInputActor_Initialize");
static_assert(offsetof(CohtmlInputActor_Initialize, CollisionChannel) == 0x000000, "Member 'CohtmlInputActor_Initialize::CollisionChannel' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_Initialize, AddressMode) == 0x000001, "Member 'CohtmlInputActor_Initialize::AddressMode' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_Initialize, RaycastQuality) == 0x000002, "Member 'CohtmlInputActor_Initialize::RaycastQuality' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_Initialize, UVChannel) == 0x000004, "Member 'CohtmlInputActor_Initialize::UVChannel' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.SetCohtmlInputFocus
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_SetCohtmlInputFocus final
{
public:
	bool                                          FocusUI;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_SetCohtmlInputFocus) == 0x000001, "Wrong alignment on CohtmlInputActor_SetCohtmlInputFocus");
static_assert(sizeof(CohtmlInputActor_SetCohtmlInputFocus) == 0x000001, "Wrong size on CohtmlInputActor_SetCohtmlInputFocus");
static_assert(offsetof(CohtmlInputActor_SetCohtmlInputFocus, FocusUI) == 0x000000, "Member 'CohtmlInputActor_SetCohtmlInputFocus::FocusUI' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.SetCohtmlViewFocus
// 0x0008 (0x0008 - 0x0000)
struct CohtmlInputActor_SetCohtmlViewFocus final
{
public:
	class UCohtmlBaseComponent*                   NewFocusedView;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_SetCohtmlViewFocus) == 0x000008, "Wrong alignment on CohtmlInputActor_SetCohtmlViewFocus");
static_assert(sizeof(CohtmlInputActor_SetCohtmlViewFocus) == 0x000008, "Wrong size on CohtmlInputActor_SetCohtmlViewFocus");
static_assert(offsetof(CohtmlInputActor_SetCohtmlViewFocus, NewFocusedView) == 0x000000, "Member 'CohtmlInputActor_SetCohtmlViewFocus::NewFocusedView' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.SetInputPropagationBehaviour
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_SetInputPropagationBehaviour final
{
public:
	ECohtmlInputPropagationBehaviour              Propagation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_SetInputPropagationBehaviour) == 0x000001, "Wrong alignment on CohtmlInputActor_SetInputPropagationBehaviour");
static_assert(sizeof(CohtmlInputActor_SetInputPropagationBehaviour) == 0x000001, "Wrong size on CohtmlInputActor_SetInputPropagationBehaviour");
static_assert(offsetof(CohtmlInputActor_SetInputPropagationBehaviour, Propagation) == 0x000000, "Member 'CohtmlInputActor_SetInputPropagationBehaviour::Propagation' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.SetLineTraceMode
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_SetLineTraceMode final
{
public:
	ECohtmlInputWidgetLineTraceMode               Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_SetLineTraceMode) == 0x000001, "Wrong alignment on CohtmlInputActor_SetLineTraceMode");
static_assert(sizeof(CohtmlInputActor_SetLineTraceMode) == 0x000001, "Wrong size on CohtmlInputActor_SetLineTraceMode");
static_assert(offsetof(CohtmlInputActor_SetLineTraceMode, Mode) == 0x000000, "Member 'CohtmlInputActor_SetLineTraceMode::Mode' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.SetupInput
// 0x0018 (0x0018 - 0x0000)
struct CohtmlInputActor_SetupInput final
{
public:
	class UCohtmlBaseComponent*                   CohtmlHUD;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressMode;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlInputWidgetRaycastQuality              RaycastQuality;                                    // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2419[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UVChannel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocusUI;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAcceptMouseInput;                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241A[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlInputActor_SetupInput) == 0x000008, "Wrong alignment on CohtmlInputActor_SetupInput");
static_assert(sizeof(CohtmlInputActor_SetupInput) == 0x000018, "Wrong size on CohtmlInputActor_SetupInput");
static_assert(offsetof(CohtmlInputActor_SetupInput, CohtmlHUD) == 0x000000, "Member 'CohtmlInputActor_SetupInput::CohtmlHUD' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, CollisionChannel) == 0x000008, "Member 'CohtmlInputActor_SetupInput::CollisionChannel' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, AddressMode) == 0x000009, "Member 'CohtmlInputActor_SetupInput::AddressMode' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, RaycastQuality) == 0x00000A, "Member 'CohtmlInputActor_SetupInput::RaycastQuality' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, UVChannel) == 0x00000C, "Member 'CohtmlInputActor_SetupInput::UVChannel' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, bFocusUI) == 0x000010, "Member 'CohtmlInputActor_SetupInput::bFocusUI' has a wrong offset!");
static_assert(offsetof(CohtmlInputActor_SetupInput, bAlwaysAcceptMouseInput) == 0x000011, "Member 'CohtmlInputActor_SetupInput::bAlwaysAcceptMouseInput' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.GetInputPropagationBehaviour
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_GetInputPropagationBehaviour final
{
public:
	ECohtmlInputPropagationBehaviour              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_GetInputPropagationBehaviour) == 0x000001, "Wrong alignment on CohtmlInputActor_GetInputPropagationBehaviour");
static_assert(sizeof(CohtmlInputActor_GetInputPropagationBehaviour) == 0x000001, "Wrong size on CohtmlInputActor_GetInputPropagationBehaviour");
static_assert(offsetof(CohtmlInputActor_GetInputPropagationBehaviour, ReturnValue) == 0x000000, "Member 'CohtmlInputActor_GetInputPropagationBehaviour::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlInputActor.IsCohtmlFocused
// 0x0001 (0x0001 - 0x0000)
struct CohtmlInputActor_IsCohtmlFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlInputActor_IsCohtmlFocused) == 0x000001, "Wrong alignment on CohtmlInputActor_IsCohtmlFocused");
static_assert(sizeof(CohtmlInputActor_IsCohtmlFocused) == 0x000001, "Wrong size on CohtmlInputActor_IsCohtmlFocused");
static_assert(offsetof(CohtmlInputActor_IsCohtmlFocused, ReturnValue) == 0x000000, "Member 'CohtmlInputActor_IsCohtmlFocused::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddArray
// 0x0010 (0x0010 - 0x0000)
struct CohtmlJSEvent_AddArray final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddArray) == 0x000008, "Wrong alignment on CohtmlJSEvent_AddArray");
static_assert(sizeof(CohtmlJSEvent_AddArray) == 0x000010, "Wrong size on CohtmlJSEvent_AddArray");
static_assert(offsetof(CohtmlJSEvent_AddArray, Array) == 0x000000, "Member 'CohtmlJSEvent_AddArray::Array' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddBool
// 0x0001 (0x0001 - 0x0000)
struct CohtmlJSEvent_AddBool final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddBool) == 0x000001, "Wrong alignment on CohtmlJSEvent_AddBool");
static_assert(sizeof(CohtmlJSEvent_AddBool) == 0x000001, "Wrong size on CohtmlJSEvent_AddBool");
static_assert(offsetof(CohtmlJSEvent_AddBool, B) == 0x000000, "Member 'CohtmlJSEvent_AddBool::B' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddByte
// 0x0001 (0x0001 - 0x0000)
struct CohtmlJSEvent_AddByte final
{
public:
	uint8                                         byte;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddByte) == 0x000001, "Wrong alignment on CohtmlJSEvent_AddByte");
static_assert(sizeof(CohtmlJSEvent_AddByte) == 0x000001, "Wrong size on CohtmlJSEvent_AddByte");
static_assert(offsetof(CohtmlJSEvent_AddByte, byte) == 0x000000, "Member 'CohtmlJSEvent_AddByte::byte' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddFloat
// 0x0004 (0x0004 - 0x0000)
struct CohtmlJSEvent_AddFloat final
{
public:
	float                                         Fl;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddFloat) == 0x000004, "Wrong alignment on CohtmlJSEvent_AddFloat");
static_assert(sizeof(CohtmlJSEvent_AddFloat) == 0x000004, "Wrong size on CohtmlJSEvent_AddFloat");
static_assert(offsetof(CohtmlJSEvent_AddFloat, Fl) == 0x000000, "Member 'CohtmlJSEvent_AddFloat::Fl' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddInt32
// 0x0004 (0x0004 - 0x0000)
struct CohtmlJSEvent_AddInt32 final
{
public:
	int32                                         Integer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddInt32) == 0x000004, "Wrong alignment on CohtmlJSEvent_AddInt32");
static_assert(sizeof(CohtmlJSEvent_AddInt32) == 0x000004, "Wrong size on CohtmlJSEvent_AddInt32");
static_assert(offsetof(CohtmlJSEvent_AddInt32, Integer) == 0x000000, "Member 'CohtmlJSEvent_AddInt32::Integer' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddName
// 0x0008 (0x0008 - 0x0000)
struct CohtmlJSEvent_AddName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddName) == 0x000004, "Wrong alignment on CohtmlJSEvent_AddName");
static_assert(sizeof(CohtmlJSEvent_AddName) == 0x000008, "Wrong size on CohtmlJSEvent_AddName");
static_assert(offsetof(CohtmlJSEvent_AddName, Param_Name) == 0x000000, "Member 'CohtmlJSEvent_AddName::Param_Name' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddObject
// 0x0008 (0x0008 - 0x0000)
struct CohtmlJSEvent_AddObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddObject) == 0x000008, "Wrong alignment on CohtmlJSEvent_AddObject");
static_assert(sizeof(CohtmlJSEvent_AddObject) == 0x000008, "Wrong size on CohtmlJSEvent_AddObject");
static_assert(offsetof(CohtmlJSEvent_AddObject, Object) == 0x000000, "Member 'CohtmlJSEvent_AddObject::Object' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddString
// 0x0010 (0x0010 - 0x0000)
struct CohtmlJSEvent_AddString final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddString) == 0x000008, "Wrong alignment on CohtmlJSEvent_AddString");
static_assert(sizeof(CohtmlJSEvent_AddString) == 0x000010, "Wrong size on CohtmlJSEvent_AddString");
static_assert(offsetof(CohtmlJSEvent_AddString, Str) == 0x000000, "Member 'CohtmlJSEvent_AddString::Str' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddStructArg
// 0x0020 (0x0020 - 0x0000)
struct CohtmlJSEvent_AddStructArg final
{
public:
	TFieldPath<struct FStructProperty>            Arg;                                               // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddStructArg) == 0x000008, "Wrong alignment on CohtmlJSEvent_AddStructArg");
static_assert(sizeof(CohtmlJSEvent_AddStructArg) == 0x000020, "Wrong size on CohtmlJSEvent_AddStructArg");
static_assert(offsetof(CohtmlJSEvent_AddStructArg, Arg) == 0x000000, "Member 'CohtmlJSEvent_AddStructArg::Arg' has a wrong offset!");

// Function CohtmlPlugin.CohtmlJSEvent.AddText
// 0x0010 (0x0010 - 0x0000)
struct CohtmlJSEvent_AddText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlJSEvent_AddText) == 0x000008, "Wrong alignment on CohtmlJSEvent_AddText");
static_assert(sizeof(CohtmlJSEvent_AddText) == 0x000010, "Wrong size on CohtmlJSEvent_AddText");
static_assert(offsetof(CohtmlJSEvent_AddText, Text) == 0x000000, "Member 'CohtmlJSEvent_AddText::Text' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.AddPreloadedTexture
// 0x0008 (0x0008 - 0x0000)
struct CohtmlWidget_AddPreloadedTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_AddPreloadedTexture) == 0x000008, "Wrong alignment on CohtmlWidget_AddPreloadedTexture");
static_assert(sizeof(CohtmlWidget_AddPreloadedTexture) == 0x000008, "Wrong size on CohtmlWidget_AddPreloadedTexture");
static_assert(offsetof(CohtmlWidget_AddPreloadedTexture, Texture) == 0x000000, "Member 'CohtmlWidget_AddPreloadedTexture::Texture' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.CreateDataModelFromObject
// 0x0018 (0x0018 - 0x0000)
struct CohtmlWidget_CreateDataModelFromObject final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Model;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_CreateDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlWidget_CreateDataModelFromObject");
static_assert(sizeof(CohtmlWidget_CreateDataModelFromObject) == 0x000018, "Wrong size on CohtmlWidget_CreateDataModelFromObject");
static_assert(offsetof(CohtmlWidget_CreateDataModelFromObject, Param_Name) == 0x000000, "Member 'CohtmlWidget_CreateDataModelFromObject::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlWidget_CreateDataModelFromObject, Model) == 0x000010, "Member 'CohtmlWidget_CreateDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.CreateDataModelFromStruct
// 0x0030 (0x0030 - 0x0000)
struct CohtmlWidget_CreateDataModelFromStruct final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0010(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_CreateDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlWidget_CreateDataModelFromStruct");
static_assert(sizeof(CohtmlWidget_CreateDataModelFromStruct) == 0x000030, "Wrong size on CohtmlWidget_CreateDataModelFromStruct");
static_assert(offsetof(CohtmlWidget_CreateDataModelFromStruct, Param_Name) == 0x000000, "Member 'CohtmlWidget_CreateDataModelFromStruct::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlWidget_CreateDataModelFromStruct, Struct) == 0x000010, "Member 'CohtmlWidget_CreateDataModelFromStruct::Struct' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.CreateJSEvent
// 0x0008 (0x0008 - 0x0000)
struct CohtmlWidget_CreateJSEvent final
{
public:
	class UCohtmlJSEvent*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_CreateJSEvent) == 0x000008, "Wrong alignment on CohtmlWidget_CreateJSEvent");
static_assert(sizeof(CohtmlWidget_CreateJSEvent) == 0x000008, "Wrong size on CohtmlWidget_CreateJSEvent");
static_assert(offsetof(CohtmlWidget_CreateJSEvent, ReturnValue) == 0x000000, "Member 'CohtmlWidget_CreateJSEvent::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.Load
// 0x0010 (0x0010 - 0x0000)
struct CohtmlWidget_Load final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_Load) == 0x000008, "Wrong alignment on CohtmlWidget_Load");
static_assert(sizeof(CohtmlWidget_Load) == 0x000010, "Wrong size on CohtmlWidget_Load");
static_assert(offsetof(CohtmlWidget_Load, Path) == 0x000000, "Member 'CohtmlWidget_Load::Path' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.PreloadTextureAsync
// 0x0010 (0x0010 - 0x0000)
struct CohtmlWidget_PreloadTextureAsync final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_PreloadTextureAsync) == 0x000008, "Wrong alignment on CohtmlWidget_PreloadTextureAsync");
static_assert(sizeof(CohtmlWidget_PreloadTextureAsync) == 0x000010, "Wrong size on CohtmlWidget_PreloadTextureAsync");
static_assert(offsetof(CohtmlWidget_PreloadTextureAsync, AssetPath) == 0x000000, "Member 'CohtmlWidget_PreloadTextureAsync::AssetPath' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.PreloadTextureSync
// 0x0010 (0x0010 - 0x0000)
struct CohtmlWidget_PreloadTextureSync final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_PreloadTextureSync) == 0x000008, "Wrong alignment on CohtmlWidget_PreloadTextureSync");
static_assert(sizeof(CohtmlWidget_PreloadTextureSync) == 0x000010, "Wrong size on CohtmlWidget_PreloadTextureSync");
static_assert(offsetof(CohtmlWidget_PreloadTextureSync, AssetPath) == 0x000000, "Member 'CohtmlWidget_PreloadTextureSync::AssetPath' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.RemoveDataModelFromObject
// 0x0008 (0x0008 - 0x0000)
struct CohtmlWidget_RemoveDataModelFromObject final
{
public:
	class UObject*                                Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_RemoveDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlWidget_RemoveDataModelFromObject");
static_assert(sizeof(CohtmlWidget_RemoveDataModelFromObject) == 0x000008, "Wrong size on CohtmlWidget_RemoveDataModelFromObject");
static_assert(offsetof(CohtmlWidget_RemoveDataModelFromObject, Model) == 0x000000, "Member 'CohtmlWidget_RemoveDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.RemovePreloadedTexture
// 0x0010 (0x0010 - 0x0000)
struct CohtmlWidget_RemovePreloadedTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2429[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlWidget_RemovePreloadedTexture) == 0x000008, "Wrong alignment on CohtmlWidget_RemovePreloadedTexture");
static_assert(sizeof(CohtmlWidget_RemovePreloadedTexture) == 0x000010, "Wrong size on CohtmlWidget_RemovePreloadedTexture");
static_assert(offsetof(CohtmlWidget_RemovePreloadedTexture, Texture) == 0x000000, "Member 'CohtmlWidget_RemovePreloadedTexture::Texture' has a wrong offset!");
static_assert(offsetof(CohtmlWidget_RemovePreloadedTexture, ReturnValue) == 0x000008, "Member 'CohtmlWidget_RemovePreloadedTexture::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.RemovePreloadedTextureFromPath
// 0x0018 (0x0018 - 0x0000)
struct CohtmlWidget_RemovePreloadedTextureFromPath final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CohtmlWidget_RemovePreloadedTextureFromPath) == 0x000008, "Wrong alignment on CohtmlWidget_RemovePreloadedTextureFromPath");
static_assert(sizeof(CohtmlWidget_RemovePreloadedTextureFromPath) == 0x000018, "Wrong size on CohtmlWidget_RemovePreloadedTextureFromPath");
static_assert(offsetof(CohtmlWidget_RemovePreloadedTextureFromPath, AssetPath) == 0x000000, "Member 'CohtmlWidget_RemovePreloadedTextureFromPath::AssetPath' has a wrong offset!");
static_assert(offsetof(CohtmlWidget_RemovePreloadedTextureFromPath, ReturnValue) == 0x000010, "Member 'CohtmlWidget_RemovePreloadedTextureFromPath::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.SetInputPropagationBehaviour
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_SetInputPropagationBehaviour final
{
public:
	ECohtmlInputPropagationBehaviour              Propagation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_SetInputPropagationBehaviour) == 0x000001, "Wrong alignment on CohtmlWidget_SetInputPropagationBehaviour");
static_assert(sizeof(CohtmlWidget_SetInputPropagationBehaviour) == 0x000001, "Wrong size on CohtmlWidget_SetInputPropagationBehaviour");
static_assert(offsetof(CohtmlWidget_SetInputPropagationBehaviour, Propagation) == 0x000000, "Member 'CohtmlWidget_SetInputPropagationBehaviour::Propagation' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.SetSoundAttenuation
// 0x03D0 (0x03D0 - 0x0000)
struct CohtmlWidget_SetSoundAttenuation final
{
public:
	struct FSoundAttenuationSettings              Settings;                                          // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_SetSoundAttenuation) == 0x000008, "Wrong alignment on CohtmlWidget_SetSoundAttenuation");
static_assert(sizeof(CohtmlWidget_SetSoundAttenuation) == 0x0003D0, "Wrong size on CohtmlWidget_SetSoundAttenuation");
static_assert(offsetof(CohtmlWidget_SetSoundAttenuation, Settings) == 0x000000, "Member 'CohtmlWidget_SetSoundAttenuation::Settings' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.ShowPaintRects
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_ShowPaintRects final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_ShowPaintRects) == 0x000001, "Wrong alignment on CohtmlWidget_ShowPaintRects");
static_assert(sizeof(CohtmlWidget_ShowPaintRects) == 0x000001, "Wrong size on CohtmlWidget_ShowPaintRects");
static_assert(offsetof(CohtmlWidget_ShowPaintRects, Show) == 0x000000, "Member 'CohtmlWidget_ShowPaintRects::Show' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.GetInputPropagationBehaviour
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_GetInputPropagationBehaviour final
{
public:
	ECohtmlInputPropagationBehaviour              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_GetInputPropagationBehaviour) == 0x000001, "Wrong alignment on CohtmlWidget_GetInputPropagationBehaviour");
static_assert(sizeof(CohtmlWidget_GetInputPropagationBehaviour) == 0x000001, "Wrong size on CohtmlWidget_GetInputPropagationBehaviour");
static_assert(offsetof(CohtmlWidget_GetInputPropagationBehaviour, ReturnValue) == 0x000000, "Member 'CohtmlWidget_GetInputPropagationBehaviour::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.GetRenderTexture
// 0x0008 (0x0008 - 0x0000)
struct CohtmlWidget_GetRenderTexture final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_GetRenderTexture) == 0x000008, "Wrong alignment on CohtmlWidget_GetRenderTexture");
static_assert(sizeof(CohtmlWidget_GetRenderTexture) == 0x000008, "Wrong size on CohtmlWidget_GetRenderTexture");
static_assert(offsetof(CohtmlWidget_GetRenderTexture, ReturnValue) == 0x000000, "Member 'CohtmlWidget_GetRenderTexture::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.HasRequestedView
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_HasRequestedView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_HasRequestedView) == 0x000001, "Wrong alignment on CohtmlWidget_HasRequestedView");
static_assert(sizeof(CohtmlWidget_HasRequestedView) == 0x000001, "Wrong size on CohtmlWidget_HasRequestedView");
static_assert(offsetof(CohtmlWidget_HasRequestedView, ReturnValue) == 0x000000, "Member 'CohtmlWidget_HasRequestedView::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.IsReadyForBindings
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_IsReadyForBindings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_IsReadyForBindings) == 0x000001, "Wrong alignment on CohtmlWidget_IsReadyForBindings");
static_assert(sizeof(CohtmlWidget_IsReadyForBindings) == 0x000001, "Wrong size on CohtmlWidget_IsReadyForBindings");
static_assert(offsetof(CohtmlWidget_IsReadyForBindings, ReturnValue) == 0x000000, "Member 'CohtmlWidget_IsReadyForBindings::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.IsReadyToCreateView
// 0x0001 (0x0001 - 0x0000)
struct CohtmlWidget_IsReadyToCreateView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_IsReadyToCreateView) == 0x000001, "Wrong alignment on CohtmlWidget_IsReadyToCreateView");
static_assert(sizeof(CohtmlWidget_IsReadyToCreateView) == 0x000001, "Wrong size on CohtmlWidget_IsReadyToCreateView");
static_assert(offsetof(CohtmlWidget_IsReadyToCreateView, ReturnValue) == 0x000000, "Member 'CohtmlWidget_IsReadyToCreateView::ReturnValue' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.RemoveDataModelFromStruct
// 0x0020 (0x0020 - 0x0000)
struct CohtmlWidget_RemoveDataModelFromStruct final
{
public:
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_RemoveDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlWidget_RemoveDataModelFromStruct");
static_assert(sizeof(CohtmlWidget_RemoveDataModelFromStruct) == 0x000020, "Wrong size on CohtmlWidget_RemoveDataModelFromStruct");
static_assert(offsetof(CohtmlWidget_RemoveDataModelFromStruct, Struct) == 0x000000, "Member 'CohtmlWidget_RemoveDataModelFromStruct::Struct' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.TriggerJSEvent
// 0x0018 (0x0018 - 0x0000)
struct CohtmlWidget_TriggerJSEvent final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCohtmlJSEvent*                         EventData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_TriggerJSEvent) == 0x000008, "Wrong alignment on CohtmlWidget_TriggerJSEvent");
static_assert(sizeof(CohtmlWidget_TriggerJSEvent) == 0x000018, "Wrong size on CohtmlWidget_TriggerJSEvent");
static_assert(offsetof(CohtmlWidget_TriggerJSEvent, Param_Name) == 0x000000, "Member 'CohtmlWidget_TriggerJSEvent::Param_Name' has a wrong offset!");
static_assert(offsetof(CohtmlWidget_TriggerJSEvent, EventData) == 0x000010, "Member 'CohtmlWidget_TriggerJSEvent::EventData' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.UpdateWholeDataModelFromObject
// 0x0008 (0x0008 - 0x0000)
struct CohtmlWidget_UpdateWholeDataModelFromObject final
{
public:
	class UObject*                                Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_UpdateWholeDataModelFromObject) == 0x000008, "Wrong alignment on CohtmlWidget_UpdateWholeDataModelFromObject");
static_assert(sizeof(CohtmlWidget_UpdateWholeDataModelFromObject) == 0x000008, "Wrong size on CohtmlWidget_UpdateWholeDataModelFromObject");
static_assert(offsetof(CohtmlWidget_UpdateWholeDataModelFromObject, Model) == 0x000000, "Member 'CohtmlWidget_UpdateWholeDataModelFromObject::Model' has a wrong offset!");

// Function CohtmlPlugin.CohtmlWidget.UpdateWholeDataModelFromStruct
// 0x0020 (0x0020 - 0x0000)
struct CohtmlWidget_UpdateWholeDataModelFromStruct final
{
public:
	TFieldPath<struct FStructProperty>            Struct;                                            // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CohtmlWidget_UpdateWholeDataModelFromStruct) == 0x000008, "Wrong alignment on CohtmlWidget_UpdateWholeDataModelFromStruct");
static_assert(sizeof(CohtmlWidget_UpdateWholeDataModelFromStruct) == 0x000020, "Wrong size on CohtmlWidget_UpdateWholeDataModelFromStruct");
static_assert(offsetof(CohtmlWidget_UpdateWholeDataModelFromStruct, Struct) == 0x000000, "Member 'CohtmlWidget_UpdateWholeDataModelFromStruct::Struct' has a wrong offset!");

}

