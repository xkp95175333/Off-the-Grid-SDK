#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ViewportMarker_Ping

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "S_PingPrompts_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ViewportMarker_Ping.WBP_ViewportMarker_Ping_C
// 0x0208 (0x05A0 - 0x0398)
class UWBP_ViewportMarker_Ping_C final : public UGzViewportMarkerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGzTextBlock*                           Distance_GzText;                                   // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         InputTooltip_HorizontalBox;                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Ping_Canvas;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ping_Image;                                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        PingContent_WidgetSwitcher;                        // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                PingItem_BG_Border;                                // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingItem_Image;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingItem_Quality_Border;                           // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               PingItem_SizeBox;                                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PingItem_Type_Image;                               // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           Prompt_GzText;                                     // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Marker_PingFeedback_C*             WBP_Marker_PingFeedback;                           // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGzPingData                            PingData;                                          // 0x0400(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_PingPrompts                         PingPrompts;                                       // 0x0460(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Default;                           // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor_Owner;                             // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FName>        PingTypeToName;                                    // 0x0550(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CheckDisagree(class AGzPlayerState* PlayerState, bool Agree);
	void CheckDistanceVisibility(bool ShouldShow);
	void CheckEnemyPing(bool* EnemyDetected);
	void Construct();
	void ExecuteUbergraph_WBP_ViewportMarker_Ping(int32 EntryPoint);
	void GetIndexInTeam(class AGzTeam* Team, class UObject* PlayerState, int32* OutputPin);
	void GetPositiveNegativePrompt(const struct FGzPingData& GzPingData, class FText* Ping_Prompts_Cancel, const class FText* Negative, const class FText* Positive);
	void Handle_Item_Data(class UObject* ObjectRef, bool* ValidItem);
	void IsItem(bool* Param_IsItem);
	bool IsPinged();
	void OnMarkerFocusChangedBP(bool bIsFocused);
	void OnPingAgreementChanged(class AGzPlayerState* PlayerState, const struct FGzPingData& Param_PingData, bool bAgree);
	void PromptVisibility(bool IsInFocus);
	void Set_Background_Color();
	void SetItemData(class UGzItemData* ItemData);
	void SetPingData(const struct FGzPingData& Param_PingData);
	void SetPingIcon(const struct FS_PingContent& PingContent);
	void UpdateDistance(double Distance);
	void UpdateDistanceToViewTarget(float Distance);
	void UpdateForPingableMarkerObject(bool* Valid);
	void UpdatePromptText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ViewportMarker_Ping_C">();
	}
	static class UWBP_ViewportMarker_Ping_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ViewportMarker_Ping_C>();
	}
};
static_assert(alignof(UWBP_ViewportMarker_Ping_C) == 0x000008, "Wrong alignment on UWBP_ViewportMarker_Ping_C");
static_assert(sizeof(UWBP_ViewportMarker_Ping_C) == 0x0005A0, "Wrong size on UWBP_ViewportMarker_Ping_C");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, UberGraphFrame) == 0x000398, "Member 'UWBP_ViewportMarker_Ping_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, Distance_GzText) == 0x0003A0, "Member 'UWBP_ViewportMarker_Ping_C::Distance_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, InputTooltip_HorizontalBox) == 0x0003A8, "Member 'UWBP_ViewportMarker_Ping_C::InputTooltip_HorizontalBox' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, Ping_Canvas) == 0x0003B0, "Member 'UWBP_ViewportMarker_Ping_C::Ping_Canvas' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, Ping_Image) == 0x0003B8, "Member 'UWBP_ViewportMarker_Ping_C::Ping_Image' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingContent_WidgetSwitcher) == 0x0003C0, "Member 'UWBP_ViewportMarker_Ping_C::PingContent_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingItem_BG_Border) == 0x0003C8, "Member 'UWBP_ViewportMarker_Ping_C::PingItem_BG_Border' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingItem_Image) == 0x0003D0, "Member 'UWBP_ViewportMarker_Ping_C::PingItem_Image' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingItem_Quality_Border) == 0x0003D8, "Member 'UWBP_ViewportMarker_Ping_C::PingItem_Quality_Border' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingItem_SizeBox) == 0x0003E0, "Member 'UWBP_ViewportMarker_Ping_C::PingItem_SizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingItem_Type_Image) == 0x0003E8, "Member 'UWBP_ViewportMarker_Ping_C::PingItem_Type_Image' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, Prompt_GzText) == 0x0003F0, "Member 'UWBP_ViewportMarker_Ping_C::Prompt_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, WBP_Marker_PingFeedback) == 0x0003F8, "Member 'UWBP_ViewportMarker_Ping_C::WBP_Marker_PingFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingData) == 0x000400, "Member 'UWBP_ViewportMarker_Ping_C::PingData' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingPrompts) == 0x000460, "Member 'UWBP_ViewportMarker_Ping_C::PingPrompts' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, BackgroundColor_Default) == 0x000530, "Member 'UWBP_ViewportMarker_Ping_C::BackgroundColor_Default' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, BackgroundColor_Owner) == 0x000540, "Member 'UWBP_ViewportMarker_Ping_C::BackgroundColor_Owner' has a wrong offset!");
static_assert(offsetof(UWBP_ViewportMarker_Ping_C, PingTypeToName) == 0x000550, "Member 'UWBP_ViewportMarker_Ping_C::PingTypeToName' has a wrong offset!");

}

