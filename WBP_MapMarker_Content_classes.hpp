#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapMarker_Content

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_MarkerPingPadding_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MapMarker_Content.WBP_MapMarker_Content_C
// 0x0148 (0x0428 - 0x02E0)
class UWBP_MapMarker_Content_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_FadeOutFast;                                  // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeOutSlow;                                  // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Show;                                         // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Progress;                                     // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Highlight;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Highlight_Image;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           HoverText_GzText;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MarkerLarge_Image;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MarkerSmall_Image;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OpportunityBackplate_Image;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OpportunitySpecialBorder_Image;                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress_Image;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress_Image_Dashed;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressBackground_Image;                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressBackground_Image_Dashed;                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ProgressImage_Switcher;                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Size_WidgetSwitcher;                               // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Marker_PingFeedback_C*             WBP_Marker_PingFeedback;                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             MarkerIcon_Large;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultColor;                                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ColorOnHighlight;                                  // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeSizeOnZoom;                                  // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67CB[0x6];                                     // 0x03AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZoomSwitch;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MarkerIcon_Small;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBePinged;                                       // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MarkerPingPadding                           PingSize;                                          // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisplayed;                                       // 0x03C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsPinged;                                          // 0x03C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsHighlighted;                                     // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          InProgress;                                        // 0x03C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67CC[0x2];                                     // 0x03C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ProgressState;                                     // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecialOpportunity;                              // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67CD[0x3];                                     // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SpecialBorderColor;                                // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67CE[0x4];                                     // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MarkerName;                                        // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ScaleOnHoverFactor;                                // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67CF[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MarkerNameOffset;                                  // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     MarkerComponent;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzMapMarkerWidget*                     ParentMarker;                                      // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UUserWidgetExtension>       HighlightAnimExtensionClass;                       // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void AdjustMissionMarker(bool IsSpecial);
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_MapMarker_Content(int32 EntryPoint);
	void InitMarkerContent(class UGzMapMarkerWidget* Param_ParentMarker);
	void On_Marker_States_Changed(class UGzMarkerComponent* Param_MarkerComponent, const struct FGameplayTagContainer& States);
	void OnMapZoomChanged(float NewZoom);
	void OnMapZoomed(float NewZoom);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void RunConstruct();
	void SetDefaultVisibility();
	void SetProgress(float Percent__0Minus1_);
	void ShowProgress(bool Show, bool Dashed);
	void UpdateMarkerName(const class FText& Param_MarkerName);
	void UpdateMarkerScale();
	void VisualizeDesigner();

	ESlateVisibility GetShowVisibility() const;
	bool K2_ShouldShow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MapMarker_Content_C">();
	}
	static class UWBP_MapMarker_Content_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MapMarker_Content_C>();
	}
};
static_assert(alignof(UWBP_MapMarker_Content_C) == 0x000008, "Wrong alignment on UWBP_MapMarker_Content_C");
static_assert(sizeof(UWBP_MapMarker_Content_C) == 0x000428, "Wrong size on UWBP_MapMarker_Content_C");
static_assert(offsetof(UWBP_MapMarker_Content_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_MapMarker_Content_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_FadeOutFast) == 0x0002E8, "Member 'UWBP_MapMarker_Content_C::Anim_FadeOutFast' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_FadeOutSlow) == 0x0002F0, "Member 'UWBP_MapMarker_Content_C::Anim_FadeOutSlow' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_Show) == 0x0002F8, "Member 'UWBP_MapMarker_Content_C::Anim_Show' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_FadeOut) == 0x000300, "Member 'UWBP_MapMarker_Content_C::Anim_FadeOut' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_Progress) == 0x000308, "Member 'UWBP_MapMarker_Content_C::Anim_Progress' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Anim_Highlight) == 0x000310, "Member 'UWBP_MapMarker_Content_C::Anim_Highlight' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Highlight_Image) == 0x000318, "Member 'UWBP_MapMarker_Content_C::Highlight_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, HoverText_GzText) == 0x000320, "Member 'UWBP_MapMarker_Content_C::HoverText_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerLarge_Image) == 0x000328, "Member 'UWBP_MapMarker_Content_C::MarkerLarge_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerSmall_Image) == 0x000330, "Member 'UWBP_MapMarker_Content_C::MarkerSmall_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, OpportunityBackplate_Image) == 0x000338, "Member 'UWBP_MapMarker_Content_C::OpportunityBackplate_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, OpportunitySpecialBorder_Image) == 0x000340, "Member 'UWBP_MapMarker_Content_C::OpportunitySpecialBorder_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Progress_Image) == 0x000348, "Member 'UWBP_MapMarker_Content_C::Progress_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Progress_Image_Dashed) == 0x000350, "Member 'UWBP_MapMarker_Content_C::Progress_Image_Dashed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ProgressBackground_Image) == 0x000358, "Member 'UWBP_MapMarker_Content_C::ProgressBackground_Image' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ProgressBackground_Image_Dashed) == 0x000360, "Member 'UWBP_MapMarker_Content_C::ProgressBackground_Image_Dashed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ProgressImage_Switcher) == 0x000368, "Member 'UWBP_MapMarker_Content_C::ProgressImage_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, Size_WidgetSwitcher) == 0x000370, "Member 'UWBP_MapMarker_Content_C::Size_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, WBP_Marker_PingFeedback) == 0x000378, "Member 'UWBP_MapMarker_Content_C::WBP_Marker_PingFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerIcon_Large) == 0x000380, "Member 'UWBP_MapMarker_Content_C::MarkerIcon_Large' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, DefaultColor) == 0x000388, "Member 'UWBP_MapMarker_Content_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, HighlightColor) == 0x000398, "Member 'UWBP_MapMarker_Content_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ColorOnHighlight) == 0x0003A8, "Member 'UWBP_MapMarker_Content_C::ColorOnHighlight' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ChangeSizeOnZoom) == 0x0003A9, "Member 'UWBP_MapMarker_Content_C::ChangeSizeOnZoom' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ZoomSwitch) == 0x0003B0, "Member 'UWBP_MapMarker_Content_C::ZoomSwitch' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerIcon_Small) == 0x0003B8, "Member 'UWBP_MapMarker_Content_C::MarkerIcon_Small' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, CanBePinged) == 0x0003C0, "Member 'UWBP_MapMarker_Content_C::CanBePinged' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, PingSize) == 0x0003C1, "Member 'UWBP_MapMarker_Content_C::PingSize' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, IsDisplayed) == 0x0003C2, "Member 'UWBP_MapMarker_Content_C::IsDisplayed' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, IsPinged) == 0x0003C3, "Member 'UWBP_MapMarker_Content_C::IsPinged' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, IsHighlighted) == 0x0003C4, "Member 'UWBP_MapMarker_Content_C::IsHighlighted' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, InProgress) == 0x0003C5, "Member 'UWBP_MapMarker_Content_C::InProgress' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ProgressState) == 0x0003C8, "Member 'UWBP_MapMarker_Content_C::ProgressState' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, IsSpecialOpportunity) == 0x0003D0, "Member 'UWBP_MapMarker_Content_C::IsSpecialOpportunity' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, SpecialBorderColor) == 0x0003D4, "Member 'UWBP_MapMarker_Content_C::SpecialBorderColor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerName) == 0x0003E8, "Member 'UWBP_MapMarker_Content_C::MarkerName' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ScaleOnHoverFactor) == 0x0003F8, "Member 'UWBP_MapMarker_Content_C::ScaleOnHoverFactor' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerNameOffset) == 0x000400, "Member 'UWBP_MapMarker_Content_C::MarkerNameOffset' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, MarkerComponent) == 0x000410, "Member 'UWBP_MapMarker_Content_C::MarkerComponent' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, ParentMarker) == 0x000418, "Member 'UWBP_MapMarker_Content_C::ParentMarker' has a wrong offset!");
static_assert(offsetof(UWBP_MapMarker_Content_C, HighlightAnimExtensionClass) == 0x000420, "Member 'UWBP_MapMarker_Content_C::HighlightAnimExtensionClass' has a wrong offset!");

}

