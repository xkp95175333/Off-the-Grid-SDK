#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mission_Bounty_Target

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "MissionGraphRuntime_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mission_Bounty_Target.BP_Mission_Bounty_Target_C
// 0x0070 (0x0380 - 0x0310)
class ABP_Mission_Bounty_Target_C final : public AGzMission
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 TargetPlayerName;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AGzPlayerState*                         HunterPlayerState;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         TargetPlayerState;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         HunterTargetDistance;                              // 0x0340(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3B[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MissionTimeLimit;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BonusTargets;                                      // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3C[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         SecondPlayer;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         ThirdPlayer;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          MainTargetKilled;                                  // 0x0368(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3D[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Objective_BH_KillTarget_C*          KillBonusTargetA_Obj;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_Objective_BH_KillTarget_C*          KillBonusTargetB_Obj;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void OnRep_ThirdPlayer();
	void OnRep_TargetPlayerState();
	void OnObjectiveStateChanged_BonusTargetA(class UMissionObjective* Objective, EMissionObjectiveState OldState, EMissionObjectiveState NewState);
	void InitializeProperties();
	void FindDistanceToClosestHunter(class AActor* ActorToTrack, double* DistSquared);
	void OnRep_SecondPlayer();
	void OnObjectiveStateChanged_Delegate_Event(class UMissionObjective* Objective, EMissionObjectiveState OldState, EMissionObjectiveState NewState);
	void OnObjectiveStateChanged_BonusTargetB(class UMissionObjective* Objective, EMissionObjectiveState OldState, EMissionObjectiveState NewState);
	void ExecuteUbergraph_BP_Mission_Bounty_Target(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mission_Bounty_Target_C">();
	}
	static class ABP_Mission_Bounty_Target_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mission_Bounty_Target_C>();
	}
};
static_assert(alignof(ABP_Mission_Bounty_Target_C) == 0x000008, "Wrong alignment on ABP_Mission_Bounty_Target_C");
static_assert(sizeof(ABP_Mission_Bounty_Target_C) == 0x000380, "Wrong size on ABP_Mission_Bounty_Target_C");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, UberGraphFrame) == 0x000310, "Member 'ABP_Mission_Bounty_Target_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, DefaultSceneRoot) == 0x000318, "Member 'ABP_Mission_Bounty_Target_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, TargetPlayerName) == 0x000320, "Member 'ABP_Mission_Bounty_Target_C::TargetPlayerName' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, HunterPlayerState) == 0x000330, "Member 'ABP_Mission_Bounty_Target_C::HunterPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, TargetPlayerState) == 0x000338, "Member 'ABP_Mission_Bounty_Target_C::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, HunterTargetDistance) == 0x000340, "Member 'ABP_Mission_Bounty_Target_C::HunterTargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, MissionTimeLimit) == 0x000348, "Member 'ABP_Mission_Bounty_Target_C::MissionTimeLimit' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, BonusTargets) == 0x000350, "Member 'ABP_Mission_Bounty_Target_C::BonusTargets' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, SecondPlayer) == 0x000358, "Member 'ABP_Mission_Bounty_Target_C::SecondPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, ThirdPlayer) == 0x000360, "Member 'ABP_Mission_Bounty_Target_C::ThirdPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, MainTargetKilled) == 0x000368, "Member 'ABP_Mission_Bounty_Target_C::MainTargetKilled' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, KillBonusTargetA_Obj) == 0x000370, "Member 'ABP_Mission_Bounty_Target_C::KillBonusTargetA_Obj' has a wrong offset!");
static_assert(offsetof(ABP_Mission_Bounty_Target_C, KillBonusTargetB_Obj) == 0x000378, "Member 'ABP_Mission_Bounty_Target_C::KillBonusTargetB_Obj' has a wrong offset!");

}

