#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VirtualCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "VirtualCamera_structs.hpp"
#include "VCamCore_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.GetAllAssetsByMetaDataTags
// 0x00B0 (0x00B0 - 0x0000)
struct AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags final
{
public:
	TSet<class FName>                             RequiredTags;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           AllowedClasses;                                    // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags) == 0x000008, "Wrong alignment on AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags");
static_assert(sizeof(AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags) == 0x0000B0, "Wrong size on AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags, RequiredTags) == 0x000000, "Member 'AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags::RequiredTags' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags, AllowedClasses) == 0x000050, "Member 'AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags::AllowedClasses' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags, ReturnValue) == 0x0000A0, "Member 'AssetFilteringAndSortingFunctionLibrary_GetAllAssetsByMetaDataTags::ReturnValue' has a wrong offset!");

// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByAssetName
// 0x0018 (0x0018 - 0x0000)
struct AssetFilteringAndSortingFunctionLibrary_SortByAssetName final
{
public:
	TArray<struct FAssetData>                     Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ESortOrder                                    SortOrder;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4737[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetFilteringAndSortingFunctionLibrary_SortByAssetName) == 0x000008, "Wrong alignment on AssetFilteringAndSortingFunctionLibrary_SortByAssetName");
static_assert(sizeof(AssetFilteringAndSortingFunctionLibrary_SortByAssetName) == 0x000018, "Wrong size on AssetFilteringAndSortingFunctionLibrary_SortByAssetName");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByAssetName, Assets) == 0x000000, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByAssetName::Assets' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByAssetName, SortOrder) == 0x000010, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByAssetName::SortOrder' has a wrong offset!");

// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByCustomPredicate
// 0x0028 (0x0028 - 0x0000)
struct AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate final
{
public:
	TArray<struct FAssetData>                     Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FAssetData& Left, struct FAssetData& Right)> SortingPredicate;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortOrder                                    SortOrder;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4738[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate) == 0x000008, "Wrong alignment on AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate");
static_assert(sizeof(AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate) == 0x000028, "Wrong size on AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate, Assets) == 0x000000, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate::Assets' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate, SortingPredicate) == 0x000010, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate::SortingPredicate' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate, SortOrder) == 0x000020, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByCustomPredicate::SortOrder' has a wrong offset!");

// Function VirtualCamera.AssetFilteringAndSortingFunctionLibrary.SortByMetaData
// 0x0020 (0x0020 - 0x0000)
struct AssetFilteringAndSortingFunctionLibrary_SortByMetaData final
{
public:
	TArray<struct FAssetData>                     Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   MetaDataTag;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAssetTagMetaDataSortType                     MetaDataType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortOrder                                    SortOrder;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4739[0x5];                                     // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData) == 0x000008, "Wrong alignment on AssetFilteringAndSortingFunctionLibrary_SortByMetaData");
static_assert(sizeof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData) == 0x000020, "Wrong size on AssetFilteringAndSortingFunctionLibrary_SortByMetaData");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData, Assets) == 0x000000, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByMetaData::Assets' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData, MetaDataTag) == 0x000010, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByMetaData::MetaDataTag' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData, MetaDataType) == 0x000018, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByMetaData::MetaDataType' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData, SortOrder) == 0x000019, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByMetaData::SortOrder' has a wrong offset!");
static_assert(offsetof(AssetFilteringAndSortingFunctionLibrary_SortByMetaData, ReturnValue) == 0x00001A, "Member 'AssetFilteringAndSortingFunctionLibrary_SortByMetaData::ReturnValue' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.CanToggleGameView
// 0x0002 (0x0002 - 0x0000)
struct GameViewFunctionLibrary_CanToggleGameView final
{
public:
	EVCamTargetViewportID                         ViewportID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_CanToggleGameView) == 0x000001, "Wrong alignment on GameViewFunctionLibrary_CanToggleGameView");
static_assert(sizeof(GameViewFunctionLibrary_CanToggleGameView) == 0x000002, "Wrong size on GameViewFunctionLibrary_CanToggleGameView");
static_assert(offsetof(GameViewFunctionLibrary_CanToggleGameView, ViewportID) == 0x000000, "Member 'GameViewFunctionLibrary_CanToggleGameView::ViewportID' has a wrong offset!");
static_assert(offsetof(GameViewFunctionLibrary_CanToggleGameView, ReturnValue) == 0x000001, "Member 'GameViewFunctionLibrary_CanToggleGameView::ReturnValue' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.IsInGameView
// 0x0002 (0x0002 - 0x0000)
struct GameViewFunctionLibrary_IsInGameView final
{
public:
	EVCamTargetViewportID                         ViewportID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_IsInGameView) == 0x000001, "Wrong alignment on GameViewFunctionLibrary_IsInGameView");
static_assert(sizeof(GameViewFunctionLibrary_IsInGameView) == 0x000002, "Wrong size on GameViewFunctionLibrary_IsInGameView");
static_assert(offsetof(GameViewFunctionLibrary_IsInGameView, ViewportID) == 0x000000, "Member 'GameViewFunctionLibrary_IsInGameView::ViewportID' has a wrong offset!");
static_assert(offsetof(GameViewFunctionLibrary_IsInGameView, ReturnValue) == 0x000001, "Member 'GameViewFunctionLibrary_IsInGameView::ReturnValue' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.RestoreGameViewStates
// 0x0050 (0x0050 - 0x0000)
struct GameViewFunctionLibrary_RestoreGameViewStates final
{
public:
	TMap<EVCamTargetViewportID, bool>             Snapshot;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_RestoreGameViewStates) == 0x000008, "Wrong alignment on GameViewFunctionLibrary_RestoreGameViewStates");
static_assert(sizeof(GameViewFunctionLibrary_RestoreGameViewStates) == 0x000050, "Wrong size on GameViewFunctionLibrary_RestoreGameViewStates");
static_assert(offsetof(GameViewFunctionLibrary_RestoreGameViewStates, Snapshot) == 0x000000, "Member 'GameViewFunctionLibrary_RestoreGameViewStates::Snapshot' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.SetGameViewEnabled
// 0x0002 (0x0002 - 0x0000)
struct GameViewFunctionLibrary_SetGameViewEnabled final
{
public:
	EVCamTargetViewportID                         ViewportID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_SetGameViewEnabled) == 0x000001, "Wrong alignment on GameViewFunctionLibrary_SetGameViewEnabled");
static_assert(sizeof(GameViewFunctionLibrary_SetGameViewEnabled) == 0x000002, "Wrong size on GameViewFunctionLibrary_SetGameViewEnabled");
static_assert(offsetof(GameViewFunctionLibrary_SetGameViewEnabled, ViewportID) == 0x000000, "Member 'GameViewFunctionLibrary_SetGameViewEnabled::ViewportID' has a wrong offset!");
static_assert(offsetof(GameViewFunctionLibrary_SetGameViewEnabled, bIsEnabled) == 0x000001, "Member 'GameViewFunctionLibrary_SetGameViewEnabled::bIsEnabled' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.SetGameViewEnabledForAllViewports
// 0x0001 (0x0001 - 0x0000)
struct GameViewFunctionLibrary_SetGameViewEnabledForAllViewports final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_SetGameViewEnabledForAllViewports) == 0x000001, "Wrong alignment on GameViewFunctionLibrary_SetGameViewEnabledForAllViewports");
static_assert(sizeof(GameViewFunctionLibrary_SetGameViewEnabledForAllViewports) == 0x000001, "Wrong size on GameViewFunctionLibrary_SetGameViewEnabledForAllViewports");
static_assert(offsetof(GameViewFunctionLibrary_SetGameViewEnabledForAllViewports, bIsEnabled) == 0x000000, "Member 'GameViewFunctionLibrary_SetGameViewEnabledForAllViewports::bIsEnabled' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.SnapshotGameViewStates
// 0x0050 (0x0050 - 0x0000)
struct GameViewFunctionLibrary_SnapshotGameViewStates final
{
public:
	TMap<EVCamTargetViewportID, bool>             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_SnapshotGameViewStates) == 0x000008, "Wrong alignment on GameViewFunctionLibrary_SnapshotGameViewStates");
static_assert(sizeof(GameViewFunctionLibrary_SnapshotGameViewStates) == 0x000050, "Wrong size on GameViewFunctionLibrary_SnapshotGameViewStates");
static_assert(offsetof(GameViewFunctionLibrary_SnapshotGameViewStates, ReturnValue) == 0x000000, "Member 'GameViewFunctionLibrary_SnapshotGameViewStates::ReturnValue' has a wrong offset!");

// Function VirtualCamera.GameViewFunctionLibrary.ToggleGameView
// 0x0001 (0x0001 - 0x0000)
struct GameViewFunctionLibrary_ToggleGameView final
{
public:
	EVCamTargetViewportID                         ViewportID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameViewFunctionLibrary_ToggleGameView) == 0x000001, "Wrong alignment on GameViewFunctionLibrary_ToggleGameView");
static_assert(sizeof(GameViewFunctionLibrary_ToggleGameView) == 0x000001, "Wrong size on GameViewFunctionLibrary_ToggleGameView");
static_assert(offsetof(GameViewFunctionLibrary_ToggleGameView, ViewportID) == 0x000000, "Member 'GameViewFunctionLibrary_ToggleGameView::ViewportID' has a wrong offset!");

// Function VirtualCamera.LevelSequenceVCamLibrary.FindPilotableCamerasInActiveLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence final
{
public:
	TArray<struct FPilotableSequenceCameraInfo>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence) == 0x000008, "Wrong alignment on LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence");
static_assert(sizeof(LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence) == 0x000010, "Wrong size on LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence");
static_assert(offsetof(LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence, ReturnValue) == 0x000000, "Member 'LevelSequenceVCamLibrary_FindPilotableCamerasInActiveLevelSequence::ReturnValue' has a wrong offset!");

// Function VirtualCamera.LevelSequenceVCamLibrary.HasAnyCameraCutsInLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence final
{
public:
	class ULevelSequence*                         Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence) == 0x000008, "Wrong alignment on LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence");
static_assert(sizeof(LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence) == 0x000010, "Wrong size on LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence");
static_assert(offsetof(LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence, Sequence) == 0x000000, "Member 'LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence::Sequence' has a wrong offset!");
static_assert(offsetof(LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence, ReturnValue) == 0x000008, "Member 'LevelSequenceVCamLibrary_HasAnyCameraCutsInLevelSequence::ReturnValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetRecordOnClient
// 0x0014 (0x0014 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_GetRecordOnClient final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473B[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClient) == 0x000004, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_GetRecordOnClient");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClient) == 0x000014, "Wrong size on MultiUserTakesVCamFunctionLibrary_GetRecordOnClient");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClient, ClientEndpointId) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_GetRecordOnClient::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClient, ReturnValue) == 0x000010, "Member 'MultiUserTakesVCamFunctionLibrary_GetRecordOnClient::ReturnValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetRecordOnClientLocal
// 0x0001 (0x0001 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal) == 0x000001, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal) == 0x000001, "Wrong size on MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal, ReturnValue) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_GetRecordOnClientLocal::ReturnValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetSynchronizeTakeRecorderTransactions
// 0x0014 (0x0014 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473C[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions) == 0x000004, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions) == 0x000014, "Wrong size on MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions, ClientEndpointId) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions, ReturnValue) == 0x000010, "Member 'MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactions::ReturnValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.GetSynchronizeTakeRecorderTransactionsLocal
// 0x0001 (0x0001 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal) == 0x000001, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal) == 0x000001, "Wrong size on MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal, ReturnValue) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_GetSynchronizeTakeRecorderTransactionsLocal::ReturnValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetRecordOnClient
// 0x0014 (0x0014 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_SetRecordOnClient final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473D[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClient) == 0x000004, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_SetRecordOnClient");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClient) == 0x000014, "Wrong size on MultiUserTakesVCamFunctionLibrary_SetRecordOnClient");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClient, ClientEndpointId) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_SetRecordOnClient::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClient, bNewValue) == 0x000010, "Member 'MultiUserTakesVCamFunctionLibrary_SetRecordOnClient::bNewValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetRecordOnClientLocal
// 0x0001 (0x0001 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal) == 0x000001, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal) == 0x000001, "Wrong size on MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal, bNewValue) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_SetRecordOnClientLocal::bNewValue' has a wrong offset!");

// Function VirtualCamera.MultiUserTakesVCamFunctionLibrary.SetSynchronizeTakeRecorderTransactionsLocal
// 0x0001 (0x0001 - 0x0000)
struct MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal) == 0x000001, "Wrong alignment on MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal");
static_assert(sizeof(MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal) == 0x000001, "Wrong size on MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal");
static_assert(offsetof(MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal, bNewValue) == 0x000000, "Member 'MultiUserTakesVCamFunctionLibrary_SetSynchronizeTakeRecorderTransactionsLocal::bNewValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetAllTakeMetaDataTags
// 0x0050 (0x0050 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags final
{
public:
	TSet<class FName>                             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags) == 0x000008, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags) == 0x000050, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetAllTakeMetaDataTags::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Description
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Description::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_LevelPath
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_LevelPath::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Slate
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Slate::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TakeNumber
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TakeNumber::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TimecodeIn
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeIn::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_TimecodeOut
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_TimecodeOut::ReturnValue' has a wrong offset!");

// Function VirtualCamera.TakeMetaDataTagsFunctionLibrary.GetTakeMetaDataTag_Timestamp
// 0x0008 (0x0008 - 0x0000)
struct TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp) == 0x000004, "Wrong alignment on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp");
static_assert(sizeof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp) == 0x000008, "Wrong size on TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp");
static_assert(offsetof(TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp, ReturnValue) == 0x000000, "Member 'TakeMetaDataTagsFunctionLibrary_GetTakeMetaDataTag_Timestamp::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.CalculateAutoFocusDistance
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance final
{
public:
	struct FVector2D                              ReticlePosition;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance");
static_assert(sizeof(VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance, ReticlePosition) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance::ReticlePosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance, CineCamera) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance::CineCamera' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance, ReturnValue) == 0x000018, "Member 'VCamBlueprintFunctionLibrary_CalculateAutoFocusDistance::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.CallFunctionByName
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_CallFunctionByName final
{
public:
	class UObject*                                ObjPtr;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_CallFunctionByName) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_CallFunctionByName");
static_assert(sizeof(VCamBlueprintFunctionLibrary_CallFunctionByName) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_CallFunctionByName");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CallFunctionByName, ObjPtr) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_CallFunctionByName::ObjPtr' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CallFunctionByName, FunctionName) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_CallFunctionByName::FunctionName' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CallFunctionByName, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_CallFunctionByName::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.ConvertStringToFrameRate
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_ConvertStringToFrameRate final
{
public:
	class FString                                 InFrameRateString;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_ConvertStringToFrameRate) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_ConvertStringToFrameRate");
static_assert(sizeof(VCamBlueprintFunctionLibrary_ConvertStringToFrameRate) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_ConvertStringToFrameRate");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ConvertStringToFrameRate, InFrameRateString) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_ConvertStringToFrameRate::InFrameRateString' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ConvertStringToFrameRate, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_ConvertStringToFrameRate::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.CopyToCineCameraActor
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_CopyToCineCameraActor final
{
public:
	class UCineCameraComponent*                   SourceCameraComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACineCameraActor*                       TargetCameraActor;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4740[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_CopyToCineCameraActor) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_CopyToCineCameraActor");
static_assert(sizeof(VCamBlueprintFunctionLibrary_CopyToCineCameraActor) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_CopyToCineCameraActor");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CopyToCineCameraActor, SourceCameraComponent) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_CopyToCineCameraActor::SourceCameraComponent' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CopyToCineCameraActor, TargetCameraActor) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_CopyToCineCameraActor::TargetCameraActor' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_CopyToCineCameraActor, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_CopyToCineCameraActor::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.DeprojectScreenToWorld
// 0x0048 (0x0048 - 0x0000)
struct VCamBlueprintFunctionLibrary_DeprojectScreenToWorld final
{
public:
	struct FVector2D                              InScreenPosition;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldPosition;                                  // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4741[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_DeprojectScreenToWorld");
static_assert(sizeof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld) == 0x000048, "Wrong size on VCamBlueprintFunctionLibrary_DeprojectScreenToWorld");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld, InScreenPosition) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorld::InScreenPosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld, OutWorldPosition) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorld::OutWorldPosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld, OutWorldDirection) == 0x000028, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorld::OutWorldDirection' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorld, ReturnValue) == 0x000040, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorld::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.DeprojectScreenToWorldByViewport
// 0x0050 (0x0050 - 0x0000)
struct VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport final
{
public:
	struct FVector2D                              InScreenPosition;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVCamTargetViewportID                         TargetViewport;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4742[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutWorldPosition;                                  // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4743[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport");
static_assert(sizeof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport) == 0x000050, "Wrong size on VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport, InScreenPosition) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport::InScreenPosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport, TargetViewport) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport::TargetViewport' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport, OutWorldPosition) == 0x000018, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport::OutWorldPosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport, OutWorldDirection) == 0x000030, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport::OutWorldDirection' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport, ReturnValue) == 0x000048, "Member 'VCamBlueprintFunctionLibrary_DeprojectScreenToWorldByViewport::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorLoadAsset
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_EditorLoadAsset final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_EditorLoadAsset) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_EditorLoadAsset");
static_assert(sizeof(VCamBlueprintFunctionLibrary_EditorLoadAsset) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_EditorLoadAsset");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EditorLoadAsset, AssetPath) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_EditorLoadAsset::AssetPath' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EditorLoadAsset, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_EditorLoadAsset::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorSaveAsset
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_EditorSaveAsset final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4744[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_EditorSaveAsset) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_EditorSaveAsset");
static_assert(sizeof(VCamBlueprintFunctionLibrary_EditorSaveAsset) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_EditorSaveAsset");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EditorSaveAsset, AssetPath) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_EditorSaveAsset::AssetPath' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EditorSaveAsset, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_EditorSaveAsset::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.EditorSetGameView
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_EditorSetGameView final
{
public:
	bool                                          bIsToggled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_EditorSetGameView) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_EditorSetGameView");
static_assert(sizeof(VCamBlueprintFunctionLibrary_EditorSetGameView) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_EditorSetGameView");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EditorSetGameView, bIsToggled) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_EditorSetGameView::bIsToggled' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.EnableDebugFocusPlane
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_EnableDebugFocusPlane final
{
public:
	class UCineCameraComponent*                   CineCamera;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4745[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_EnableDebugFocusPlane) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_EnableDebugFocusPlane");
static_assert(sizeof(VCamBlueprintFunctionLibrary_EnableDebugFocusPlane) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_EnableDebugFocusPlane");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EnableDebugFocusPlane, CineCamera) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_EnableDebugFocusPlane::CineCamera' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_EnableDebugFocusPlane, bEnabled) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_EnableDebugFocusPlane::bEnabled' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetBoundObjects
// 0x0028 (0x0028 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetBoundObjects final
{
public:
	struct FMovieSceneObjectBindingID             CameraBindingID;                                   // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetBoundObjects) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetBoundObjects");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetBoundObjects) == 0x000028, "Wrong size on VCamBlueprintFunctionLibrary_GetBoundObjects");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetBoundObjects, CameraBindingID) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetBoundObjects::CameraBindingID' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetBoundObjects, ReturnValue) == 0x000018, "Member 'VCamBlueprintFunctionLibrary_GetBoundObjects::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetCurrentLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetCurrentLevelSequence final
{
public:
	class ULevelSequence*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequence) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetCurrentLevelSequence");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequence) == 0x000008, "Wrong size on VCamBlueprintFunctionLibrary_GetCurrentLevelSequence");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequence, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetCurrentLevelSequence::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetCurrentLevelSequenceCurrentFrame
// 0x0004 (0x0004 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame) == 0x000004, "Wrong size on VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetCurrentLevelSequenceCurrentFrame::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetDisplayRate
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetDisplayRate final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetDisplayRate) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetDisplayRate");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetDisplayRate) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_GetDisplayRate");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetDisplayRate, LevelSequence) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetDisplayRate::LevelSequence' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetDisplayRate, ReturnValue) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_GetDisplayRate::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceFrameAsTimecode
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode final
{
public:
	const class ULevelSequence*                   LevelSequence;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFrame;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode, LevelSequence) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode::LevelSequence' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode, InFrame) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode::InFrame' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode, ReturnValue) == 0x00000C, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecode::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceFrameAsTimecodeWithoutObject
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject final
{
public:
	struct FFrameRate                             DisplayRate;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFrame;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject, DisplayRate) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject::DisplayRate' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject, InFrame) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject::InFrame' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject, ReturnValue) == 0x00000C, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceFrameAsTimecodeWithoutObject::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetLevelSequenceLengthInFrames
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames final
{
public:
	const class ULevelSequence*                   LevelSequence;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4746[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames, LevelSequence) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames::LevelSequence' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames, ReturnValue) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_GetLevelSequenceLengthInFrames::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetNextUndoDescription
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetNextUndoDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetNextUndoDescription) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetNextUndoDescription");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetNextUndoDescription) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_GetNextUndoDescription");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetNextUndoDescription, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetNextUndoDescription::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetObjectMetadataTags
// 0x0058 (0x0058 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetObjectMetadataTags final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetObjectMetadataTags) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetObjectMetadataTags");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetObjectMetadataTags) == 0x000058, "Wrong size on VCamBlueprintFunctionLibrary_GetObjectMetadataTags");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetObjectMetadataTags, InObject) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetObjectMetadataTags::InObject' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetObjectMetadataTags, ReturnValue) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_GetObjectMetadataTags::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetPendingTakeLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence final
{
public:
	class ULevelSequence*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence) == 0x000008, "Wrong size on VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetPendingTakeLevelSequence::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.GetPlaybackSpeed
// 0x0004 (0x0004 - 0x0000)
struct VCamBlueprintFunctionLibrary_GetPlaybackSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_GetPlaybackSpeed) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_GetPlaybackSpeed");
static_assert(sizeof(VCamBlueprintFunctionLibrary_GetPlaybackSpeed) == 0x000004, "Wrong size on VCamBlueprintFunctionLibrary_GetPlaybackSpeed");
static_assert(offsetof(VCamBlueprintFunctionLibrary_GetPlaybackSpeed, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_GetPlaybackSpeed::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.ImportSnapshotTexture
// 0x0038 (0x0038 - 0x0000)
struct VCamBlueprintFunctionLibrary_ImportSnapshotTexture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubFolderName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbsolutePathPackage;                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_ImportSnapshotTexture");
static_assert(sizeof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture) == 0x000038, "Wrong size on VCamBlueprintFunctionLibrary_ImportSnapshotTexture");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture, Filename) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_ImportSnapshotTexture::Filename' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture, SubFolderName) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_ImportSnapshotTexture::SubFolderName' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture, AbsolutePathPackage) == 0x000020, "Member 'VCamBlueprintFunctionLibrary_ImportSnapshotTexture::AbsolutePathPackage' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ImportSnapshotTexture, ReturnValue) == 0x000030, "Member 'VCamBlueprintFunctionLibrary_ImportSnapshotTexture::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsCurrentLevelSequencePlaying
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying");
static_assert(sizeof(VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying");
static_assert(offsetof(VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_IsCurrentLevelSequencePlaying::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsGameRunning
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_IsGameRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_IsGameRunning) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_IsGameRunning");
static_assert(sizeof(VCamBlueprintFunctionLibrary_IsGameRunning) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_IsGameRunning");
static_assert(offsetof(VCamBlueprintFunctionLibrary_IsGameRunning, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_IsGameRunning::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsRecording
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_IsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_IsRecording) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_IsRecording");
static_assert(sizeof(VCamBlueprintFunctionLibrary_IsRecording) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_IsRecording");
static_assert(offsetof(VCamBlueprintFunctionLibrary_IsRecording, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_IsRecording::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.IsTakeRecorderPanelOpen
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen");
static_assert(sizeof(VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen");
static_assert(offsetof(VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_IsTakeRecorderPanelOpen::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.ModifyObjectMetadataTags
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTag;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags");
static_assert(sizeof(VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags, InObject) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags::InObject' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags, InTag) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags::InTag' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags, InValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_ModifyObjectMetadataTags::InValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.MultiTraceHitProxyOnViewport
// 0x0048 (0x0048 - 0x0000)
struct VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport final
{
public:
	struct FVector2D                              InScreenPosition;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVCamTargetViewportID                         InTargetViewport;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4747[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCamTraceHitProxyQueryParams          InQueryParams;                                     // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FVCamTraceHitProxyResult>       Result;                                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4748[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport");
static_assert(sizeof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport) == 0x000048, "Wrong size on VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport");
static_assert(offsetof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport, InScreenPosition) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport::InScreenPosition' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport, InTargetViewport) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport::InTargetViewport' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport, InQueryParams) == 0x000018, "Member 'VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport::InQueryParams' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport, Result) == 0x000030, "Member 'VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport::Result' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport, ReturnValue) == 0x000040, "Member 'VCamBlueprintFunctionLibrary_MultiTraceHitProxyOnViewport::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.OpenLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_OpenLevelSequence final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4749[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_OpenLevelSequence) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_OpenLevelSequence");
static_assert(sizeof(VCamBlueprintFunctionLibrary_OpenLevelSequence) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_OpenLevelSequence");
static_assert(offsetof(VCamBlueprintFunctionLibrary_OpenLevelSequence, LevelSequence) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_OpenLevelSequence::LevelSequence' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_OpenLevelSequence, ReturnValue) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_OpenLevelSequence::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.PilotActor
// 0x0008 (0x0008 - 0x0000)
struct VCamBlueprintFunctionLibrary_PilotActor final
{
public:
	class AActor*                                 SelectedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_PilotActor) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_PilotActor");
static_assert(sizeof(VCamBlueprintFunctionLibrary_PilotActor) == 0x000008, "Wrong size on VCamBlueprintFunctionLibrary_PilotActor");
static_assert(offsetof(VCamBlueprintFunctionLibrary_PilotActor, SelectedActor) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_PilotActor::SelectedActor' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetActorLabel
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_SetActorLabel final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewActorLabel;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_SetActorLabel) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_SetActorLabel");
static_assert(sizeof(VCamBlueprintFunctionLibrary_SetActorLabel) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_SetActorLabel");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SetActorLabel, Actor) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_SetActorLabel::Actor' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SetActorLabel, NewActorLabel) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_SetActorLabel::NewActorLabel' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetCurrentLevelSequenceCurrentFrame
// 0x0004 (0x0004 - 0x0000)
struct VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame final
{
public:
	int32                                         NewFrame;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame");
static_assert(sizeof(VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame) == 0x000004, "Wrong size on VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame, NewFrame) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_SetCurrentLevelSequenceCurrentFrame::NewFrame' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetOnTakeRecorderSlateChanged
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged final
{
public:
	TDelegate<void(const class FString& Slate)>   OnTakeRecorderSlateChanged;                        // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged");
static_assert(sizeof(VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged, OnTakeRecorderSlateChanged) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_SetOnTakeRecorderSlateChanged::OnTakeRecorderSlateChanged' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.SetPlaybackSpeed
// 0x0004 (0x0004 - 0x0000)
struct VCamBlueprintFunctionLibrary_SetPlaybackSpeed final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_SetPlaybackSpeed) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_SetPlaybackSpeed");
static_assert(sizeof(VCamBlueprintFunctionLibrary_SetPlaybackSpeed) == 0x000004, "Wrong size on VCamBlueprintFunctionLibrary_SetPlaybackSpeed");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SetPlaybackSpeed, Value) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_SetPlaybackSpeed::Value' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.SortAssetsByTimecodeAssetData
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData final
{
public:
	TArray<struct FAssetData>                     LevelSequenceAssets;                               // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData");
static_assert(sizeof(VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData, LevelSequenceAssets) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData::LevelSequenceAssets' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_SortAssetsByTimecodeAssetData::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.TimecodeToFrameAmount
// 0x0020 (0x0020 - 0x0000)
struct VCamBlueprintFunctionLibrary_TimecodeToFrameAmount final
{
public:
	struct FTimecode                              Timecode;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             InFrameRate;                                       // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_TimecodeToFrameAmount) == 0x000004, "Wrong alignment on VCamBlueprintFunctionLibrary_TimecodeToFrameAmount");
static_assert(sizeof(VCamBlueprintFunctionLibrary_TimecodeToFrameAmount) == 0x000020, "Wrong size on VCamBlueprintFunctionLibrary_TimecodeToFrameAmount");
static_assert(offsetof(VCamBlueprintFunctionLibrary_TimecodeToFrameAmount, Timecode) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_TimecodeToFrameAmount::Timecode' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_TimecodeToFrameAmount, InFrameRate) == 0x000014, "Member 'VCamBlueprintFunctionLibrary_TimecodeToFrameAmount::InFrameRate' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_TimecodeToFrameAmount, ReturnValue) == 0x00001C, "Member 'VCamBlueprintFunctionLibrary_TimecodeToFrameAmount::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.TryOpenTakeRecorderPanel
// 0x0001 (0x0001 - 0x0000)
struct VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel) == 0x000001, "Wrong alignment on VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel");
static_assert(sizeof(VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel) == 0x000001, "Wrong size on VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel");
static_assert(offsetof(VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel, ReturnValue) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_TryOpenTakeRecorderPanel::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VCamBlueprintFunctionLibrary.UpdatePostProcessSettingsForCapture
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfField;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FStopValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_474A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture");
static_assert(sizeof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture) == 0x000018, "Wrong size on VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture");
static_assert(offsetof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture, CaptureComponent) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture::CaptureComponent' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture, DepthOfField) == 0x000008, "Member 'VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture::DepthOfField' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture, FStopValue) == 0x00000C, "Member 'VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture::FStopValue' has a wrong offset!");
static_assert(offsetof(VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture, ReturnValue) == 0x000010, "Member 'VCamBlueprintFunctionLibrary_UpdatePostProcessSettingsForCapture::ReturnValue' has a wrong offset!");

// DelegateFunction VirtualCamera.VCamBlueprintFunctionLibrary.OnTakeRecorderSlateChanged_VCam__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature final
{
public:
	class FString                                 Slate;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature) == 0x000008, "Wrong alignment on VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature");
static_assert(sizeof(VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature) == 0x000010, "Wrong size on VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature");
static_assert(offsetof(VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature, Slate) == 0x000000, "Member 'VCamBlueprintFunctionLibrary_OnTakeRecorderSlateChanged_VCam__DelegateSignature::Slate' has a wrong offset!");

// Function VirtualCamera.VirtualCameraUserSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraUserSettings_GetSettings final
{
public:
	class UVirtualCameraUserSettings*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraUserSettings_GetSettings) == 0x000008, "Wrong alignment on VirtualCameraUserSettings_GetSettings");
static_assert(sizeof(VirtualCameraUserSettings_GetSettings) == 0x000008, "Wrong size on VirtualCameraUserSettings_GetSettings");
static_assert(offsetof(VirtualCameraUserSettings_GetSettings, ReturnValue) == 0x000000, "Member 'VirtualCameraUserSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraUserSettings.SetTutorialCompletionState
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraUserSettings_SetTutorialCompletionState final
{
public:
	EVCamTutorialCompletionState                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraUserSettings_SetTutorialCompletionState) == 0x000001, "Wrong alignment on VirtualCameraUserSettings_SetTutorialCompletionState");
static_assert(sizeof(VirtualCameraUserSettings_SetTutorialCompletionState) == 0x000001, "Wrong size on VirtualCameraUserSettings_SetTutorialCompletionState");
static_assert(offsetof(VirtualCameraUserSettings_SetTutorialCompletionState, NewState) == 0x000000, "Member 'VirtualCameraUserSettings_SetTutorialCompletionState::NewState' has a wrong offset!");

// Function VirtualCamera.VirtualCameraUserSettings.IsTutorialCompleted
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraUserSettings_IsTutorialCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraUserSettings_IsTutorialCompleted) == 0x000001, "Wrong alignment on VirtualCameraUserSettings_IsTutorialCompleted");
static_assert(sizeof(VirtualCameraUserSettings_IsTutorialCompleted) == 0x000001, "Wrong size on VirtualCameraUserSettings_IsTutorialCompleted");
static_assert(offsetof(VirtualCameraUserSettings_IsTutorialCompleted, ReturnValue) == 0x000000, "Member 'VirtualCameraUserSettings_IsTutorialCompleted::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetAllClipsMetaDataTags
// 0x0050 (0x0050 - 0x0000)
struct VirtualCameraClipsMetaData_GetAllClipsMetaDataTags final
{
public:
	TSet<class FName>                             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetAllClipsMetaDataTags) == 0x000008, "Wrong alignment on VirtualCameraClipsMetaData_GetAllClipsMetaDataTags");
static_assert(sizeof(VirtualCameraClipsMetaData_GetAllClipsMetaDataTags) == 0x000050, "Wrong size on VirtualCameraClipsMetaData_GetAllClipsMetaDataTags");
static_assert(offsetof(VirtualCameraClipsMetaData_GetAllClipsMetaDataTags, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetAllClipsMetaDataTags::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_DisplayRate
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_DisplayRate::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FavoriteLevel
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_FavoriteLevel::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FocalLength
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_FocalLength::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FrameCountEnd
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountEnd::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_FrameCountStart
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_FrameCountStart::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsCineACineCameraRecording
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCineACineCameraRecording::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsCreatedFromVCam
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsCreatedFromVCam::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsFlagged
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsFlagged::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsNoGood
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsNoGood::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_IsSelected
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_IsSelected::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_LengthInFrames
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_LengthInFrames::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetClipsMetaDataTag_RecordedLevel
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel");
static_assert(sizeof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel");
static_assert(offsetof(VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetClipsMetaDataTag_RecordedLevel::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetDisplayRate
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_GetDisplayRate final
{
public:
	struct FFrameRate                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetDisplayRate) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetDisplayRate");
static_assert(sizeof(VirtualCameraClipsMetaData_GetDisplayRate) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_GetDisplayRate");
static_assert(offsetof(VirtualCameraClipsMetaData_GetDisplayRate, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetDisplayRate::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetLengthInFrames
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_GetLengthInFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetLengthInFrames) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetLengthInFrames");
static_assert(sizeof(VirtualCameraClipsMetaData_GetLengthInFrames) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_GetLengthInFrames");
static_assert(offsetof(VirtualCameraClipsMetaData_GetLengthInFrames, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetLengthInFrames::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetDisplayRate
// 0x0008 (0x0008 - 0x0000)
struct VirtualCameraClipsMetaData_SetDisplayRate final
{
public:
	struct FFrameRate                             InDisplayRate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetDisplayRate) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_SetDisplayRate");
static_assert(sizeof(VirtualCameraClipsMetaData_SetDisplayRate) == 0x000008, "Wrong size on VirtualCameraClipsMetaData_SetDisplayRate");
static_assert(offsetof(VirtualCameraClipsMetaData_SetDisplayRate, InDisplayRate) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetDisplayRate::InDisplayRate' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetFocalLength
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_SetFocalLength final
{
public:
	float                                         InFocalLength;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetFocalLength) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_SetFocalLength");
static_assert(sizeof(VirtualCameraClipsMetaData_SetFocalLength) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_SetFocalLength");
static_assert(offsetof(VirtualCameraClipsMetaData_SetFocalLength, InFocalLength) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetFocalLength::InFocalLength' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetFrameCountEnd
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_SetFrameCountEnd final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetFrameCountEnd) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_SetFrameCountEnd");
static_assert(sizeof(VirtualCameraClipsMetaData_SetFrameCountEnd) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_SetFrameCountEnd");
static_assert(offsetof(VirtualCameraClipsMetaData_SetFrameCountEnd, InFrame) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetFrameCountEnd::InFrame' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetFrameCountStart
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_SetFrameCountStart final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetFrameCountStart) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_SetFrameCountStart");
static_assert(sizeof(VirtualCameraClipsMetaData_SetFrameCountStart) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_SetFrameCountStart");
static_assert(offsetof(VirtualCameraClipsMetaData_SetFrameCountStart, InFrame) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetFrameCountStart::InFrame' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetIsACineCameraRecording
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraClipsMetaData_SetIsACineCameraRecording final
{
public:
	bool                                          bInIsACineCameraRecording;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetIsACineCameraRecording) == 0x000001, "Wrong alignment on VirtualCameraClipsMetaData_SetIsACineCameraRecording");
static_assert(sizeof(VirtualCameraClipsMetaData_SetIsACineCameraRecording) == 0x000001, "Wrong size on VirtualCameraClipsMetaData_SetIsACineCameraRecording");
static_assert(offsetof(VirtualCameraClipsMetaData_SetIsACineCameraRecording, bInIsACineCameraRecording) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetIsACineCameraRecording::bInIsACineCameraRecording' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetLengthInFrames
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_SetLengthInFrames final
{
public:
	int32                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetLengthInFrames) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_SetLengthInFrames");
static_assert(sizeof(VirtualCameraClipsMetaData_SetLengthInFrames) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_SetLengthInFrames");
static_assert(offsetof(VirtualCameraClipsMetaData_SetLengthInFrames, InLength) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetLengthInFrames::InLength' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetRecordedLevelName
// 0x0010 (0x0010 - 0x0000)
struct VirtualCameraClipsMetaData_SetRecordedLevelName final
{
public:
	class FString                                 InLevelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetRecordedLevelName) == 0x000008, "Wrong alignment on VirtualCameraClipsMetaData_SetRecordedLevelName");
static_assert(sizeof(VirtualCameraClipsMetaData_SetRecordedLevelName) == 0x000010, "Wrong size on VirtualCameraClipsMetaData_SetRecordedLevelName");
static_assert(offsetof(VirtualCameraClipsMetaData_SetRecordedLevelName, InLevelName) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetRecordedLevelName::InLevelName' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraClipsMetaData_SetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_SetSelected) == 0x000001, "Wrong alignment on VirtualCameraClipsMetaData_SetSelected");
static_assert(sizeof(VirtualCameraClipsMetaData_SetSelected) == 0x000001, "Wrong size on VirtualCameraClipsMetaData_SetSelected");
static_assert(offsetof(VirtualCameraClipsMetaData_SetSelected, bInSelected) == 0x000000, "Member 'VirtualCameraClipsMetaData_SetSelected::bInSelected' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetFocalLength
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_GetFocalLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetFocalLength) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetFocalLength");
static_assert(sizeof(VirtualCameraClipsMetaData_GetFocalLength) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_GetFocalLength");
static_assert(offsetof(VirtualCameraClipsMetaData_GetFocalLength, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetFocalLength::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetFrameCountEnd
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_GetFrameCountEnd final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetFrameCountEnd) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetFrameCountEnd");
static_assert(sizeof(VirtualCameraClipsMetaData_GetFrameCountEnd) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_GetFrameCountEnd");
static_assert(offsetof(VirtualCameraClipsMetaData_GetFrameCountEnd, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetFrameCountEnd::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetFrameCountStart
// 0x0004 (0x0004 - 0x0000)
struct VirtualCameraClipsMetaData_GetFrameCountStart final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetFrameCountStart) == 0x000004, "Wrong alignment on VirtualCameraClipsMetaData_GetFrameCountStart");
static_assert(sizeof(VirtualCameraClipsMetaData_GetFrameCountStart) == 0x000004, "Wrong size on VirtualCameraClipsMetaData_GetFrameCountStart");
static_assert(offsetof(VirtualCameraClipsMetaData_GetFrameCountStart, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetFrameCountStart::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetIsACineCameraRecording
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraClipsMetaData_GetIsACineCameraRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetIsACineCameraRecording) == 0x000001, "Wrong alignment on VirtualCameraClipsMetaData_GetIsACineCameraRecording");
static_assert(sizeof(VirtualCameraClipsMetaData_GetIsACineCameraRecording) == 0x000001, "Wrong size on VirtualCameraClipsMetaData_GetIsACineCameraRecording");
static_assert(offsetof(VirtualCameraClipsMetaData_GetIsACineCameraRecording, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetIsACineCameraRecording::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetRecordedLevelName
// 0x0010 (0x0010 - 0x0000)
struct VirtualCameraClipsMetaData_GetRecordedLevelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetRecordedLevelName) == 0x000008, "Wrong alignment on VirtualCameraClipsMetaData_GetRecordedLevelName");
static_assert(sizeof(VirtualCameraClipsMetaData_GetRecordedLevelName) == 0x000010, "Wrong size on VirtualCameraClipsMetaData_GetRecordedLevelName");
static_assert(offsetof(VirtualCameraClipsMetaData_GetRecordedLevelName, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetRecordedLevelName::ReturnValue' has a wrong offset!");

// Function VirtualCamera.VirtualCameraClipsMetaData.GetSelected
// 0x0001 (0x0001 - 0x0000)
struct VirtualCameraClipsMetaData_GetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCameraClipsMetaData_GetSelected) == 0x000001, "Wrong alignment on VirtualCameraClipsMetaData_GetSelected");
static_assert(sizeof(VirtualCameraClipsMetaData_GetSelected) == 0x000001, "Wrong size on VirtualCameraClipsMetaData_GetSelected");
static_assert(offsetof(VirtualCameraClipsMetaData_GetSelected, ReturnValue) == 0x000000, "Member 'VirtualCameraClipsMetaData_GetSelected::ReturnValue' has a wrong offset!");

}

