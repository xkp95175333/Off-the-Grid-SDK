#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MicroMissilesComponent

#include "Basic.hpp"

#include "BP_MicroMissilesComponent_classes.hpp"
#include "BP_MicroMissilesComponent_parameters.hpp"


namespace SDK
{

// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::CREATEDELEGATE_PROXYFUNCTION_0(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "CREATEDELEGATE_PROXYFUNCTION_0");

	Params::BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_0 Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_1
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::CREATEDELEGATE_PROXYFUNCTION_1(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "CREATEDELEGATE_PROXYFUNCTION_1");

	Params::BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_1 Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.CREATEDELEGATE_PROXYFUNCTION_2
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::CREATEDELEGATE_PROXYFUNCTION_2(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "CREATEDELEGATE_PROXYFUNCTION_2");

	Params::BP_MicroMissilesComponent_C_CREATEDELEGATE_PROXYFUNCTION_2 Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.ExecuteUbergraph_BP_MicroMissilesComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MicroMissilesComponent_C::ExecuteUbergraph_BP_MicroMissilesComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "ExecuteUbergraph_BP_MicroMissilesComponent");

	Params::BP_MicroMissilesComponent_C_ExecuteUbergraph_BP_MicroMissilesComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnExpired
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::LockOnExpired(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "LockOnExpired");

	Params::BP_MicroMissilesComponent_C_LockOnExpired Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnFailed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::LockOnFailed(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "LockOnFailed");

	Params::BP_MicroMissilesComponent_C_LockOnFailed Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnInterrupted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::LockOnInterrupted(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "LockOnInterrupted");

	Params::BP_MicroMissilesComponent_C_LockOnInterrupted Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::LockOnStarted(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "LockOnStarted");

	Params::BP_MicroMissilesComponent_C_LockOnStarted Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.LockOnSuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void UBP_MicroMissilesComponent_C::LockOnSuccess(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "LockOnSuccess");

	Params::BP_MicroMissilesComponent_C_LockOnSuccess Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MicroMissilesComponent.BP_MicroMissilesComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_MicroMissilesComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MicroMissilesComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

