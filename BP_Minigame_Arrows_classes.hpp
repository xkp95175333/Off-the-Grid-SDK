#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minigame_Arrows

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Minigame_classes.hpp"
#include "E_MinigameServerState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Minigame_Arrows.BP_Minigame_Arrows_C
// 0x0080 (0x0480 - 0x0400)
class ABP_Minigame_Arrows_C : public ABP_Minigame_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Minigame_Arrows_C;               // 0x0400(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Plane;                                             // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         LastRoundIndex;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRound;                                      // 0x0414(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         ProgressCount;                                     // 0x0418(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66B9[0x7];                                     // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 NextKeyPresses;                                    // 0x0420(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	struct FRandomStream                          Seed;                                              // 0x0430(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_MinigameServerState                         Condition;                                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66BA[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ScreenMesh;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenMaterialIndex;                               // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66BB[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CountdownTimer;                                    // 0x0458(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInputAllowed;                                    // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66BC[0x7];                                     // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ScreenMID_SourceMat;                               // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetOnlyLastRound;                                // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66BD[0x7];                                     // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MID_Idle;                                          // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CancelCountdownTimer();
	void CreateNextKeypresses();
	void ExecuteUbergraph_BP_Minigame_Arrows(int32 EntryPoint);
	void InputKeySound(uint8 Progress);
	void OnKeyReceived(uint8 PressedKey);
	void OnMinigameStateReceived();
	void OnRep_CurrentRound();
	void OnRep_NextKeyPresses();
	void OnRep_ProgressCount();
	void OnRep_Seed();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetCountdownTimerText();
	void SetScreenMatState(bool IsMinigame, class UMaterialInstanceDynamic** MID_Ref);
	void StartCountdownTimer();
	void StartMinigame();
	void TimeOutMinigame();
	void UpdateRoundsRemainingText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Minigame_Arrows_C">();
	}
	static class ABP_Minigame_Arrows_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Minigame_Arrows_C>();
	}
};
static_assert(alignof(ABP_Minigame_Arrows_C) == 0x000008, "Wrong alignment on ABP_Minigame_Arrows_C");
static_assert(sizeof(ABP_Minigame_Arrows_C) == 0x000480, "Wrong size on ABP_Minigame_Arrows_C");
static_assert(offsetof(ABP_Minigame_Arrows_C, UberGraphFrame_BP_Minigame_Arrows_C) == 0x000400, "Member 'ABP_Minigame_Arrows_C::UberGraphFrame_BP_Minigame_Arrows_C' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, Plane) == 0x000408, "Member 'ABP_Minigame_Arrows_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, LastRoundIndex) == 0x000410, "Member 'ABP_Minigame_Arrows_C::LastRoundIndex' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, CurrentRound) == 0x000414, "Member 'ABP_Minigame_Arrows_C::CurrentRound' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, ProgressCount) == 0x000418, "Member 'ABP_Minigame_Arrows_C::ProgressCount' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, NextKeyPresses) == 0x000420, "Member 'ABP_Minigame_Arrows_C::NextKeyPresses' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, Seed) == 0x000430, "Member 'ABP_Minigame_Arrows_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, Mid) == 0x000438, "Member 'ABP_Minigame_Arrows_C::Mid' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, Condition) == 0x000440, "Member 'ABP_Minigame_Arrows_C::Condition' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, ScreenMesh) == 0x000448, "Member 'ABP_Minigame_Arrows_C::ScreenMesh' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, ScreenMaterialIndex) == 0x000450, "Member 'ABP_Minigame_Arrows_C::ScreenMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, CountdownTimer) == 0x000458, "Member 'ABP_Minigame_Arrows_C::CountdownTimer' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, IsInputAllowed) == 0x000460, "Member 'ABP_Minigame_Arrows_C::IsInputAllowed' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, ScreenMID_SourceMat) == 0x000468, "Member 'ABP_Minigame_Arrows_C::ScreenMID_SourceMat' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, ResetOnlyLastRound) == 0x000470, "Member 'ABP_Minigame_Arrows_C::ResetOnlyLastRound' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_Arrows_C, MID_Idle) == 0x000478, "Member 'ABP_Minigame_Arrows_C::MID_Idle' has a wrong offset!");

}

