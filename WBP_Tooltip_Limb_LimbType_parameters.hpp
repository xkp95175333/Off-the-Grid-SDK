#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_Limb_LimbType

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "G01_structs.hpp"


namespace SDK::Params
{

// Function WBP_Tooltip_Limb_LimbType.WBP_Tooltip_Limb_LimbType_C.ExecuteUbergraph_WBP_Tooltip_Limb_LimbType
// 0x0008 (0x0008 - 0x0000)
struct WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType) == 0x000004, "Wrong alignment on WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType");
static_assert(sizeof(WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType) == 0x000008, "Wrong size on WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType, EntryPoint) == 0x000000, "Member 'WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_Tooltip_Limb_LimbType_C_ExecuteUbergraph_WBP_Tooltip_Limb_LimbType::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_Tooltip_Limb_LimbType.WBP_Tooltip_Limb_LimbType_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Tooltip_Limb_LimbType_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_LimbType_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Tooltip_Limb_LimbType_C_PreConstruct");
static_assert(sizeof(WBP_Tooltip_Limb_LimbType_C_PreConstruct) == 0x000001, "Wrong size on WBP_Tooltip_Limb_LimbType_C_PreConstruct");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Tooltip_Limb_LimbType_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Tooltip_Limb_LimbType.WBP_Tooltip_Limb_LimbType_C.SetColor
// 0x0014 (0x0014 - 0x0000)
struct WBP_Tooltip_Limb_LimbType_C_SetColor final
{
public:
	struct FLinearColor                           Tint;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_LimbType_C_SetColor) == 0x000004, "Wrong alignment on WBP_Tooltip_Limb_LimbType_C_SetColor");
static_assert(sizeof(WBP_Tooltip_Limb_LimbType_C_SetColor) == 0x000014, "Wrong size on WBP_Tooltip_Limb_LimbType_C_SetColor");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetColor, Tint) == 0x000000, "Member 'WBP_Tooltip_Limb_LimbType_C_SetColor::Tint' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetColor, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Tooltip_Limb_LimbType_C_SetColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Tooltip_Limb_LimbType.WBP_Tooltip_Limb_LimbType_C.SetLimbType
// 0x0040 (0x0040 - 0x0000)
struct WBP_Tooltip_Limb_LimbType_C_SetLimbType final
{
public:
	EGzLimbType                                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E59[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_LimbType_C_SetLimbType) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_LimbType_C_SetLimbType");
static_assert(sizeof(WBP_Tooltip_Limb_LimbType_C_SetLimbType) == 0x000040, "Wrong size on WBP_Tooltip_Limb_LimbType_C_SetLimbType");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, Type) == 0x000000, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::Type' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, Temp_object_Variable) == 0x000008, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, Temp_object_Variable_1) == 0x000010, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, Temp_object_Variable_2) == 0x000018, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, Temp_byte_Variable) == 0x000020, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, K2Node_Select_Default) == 0x000028, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_LimbType_C_SetLimbType, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'WBP_Tooltip_Limb_LimbType_C_SetLimbType::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

