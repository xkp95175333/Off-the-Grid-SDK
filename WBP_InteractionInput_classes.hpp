#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InteractionInput

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InteractionInput.WBP_InteractionInput_C
// 0x0058 (0x0338 - 0x02E0)
class UWBP_InteractionInput_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGzTextBlock*                           FailedInteraction_GzText;                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Interaction;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Ping;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        InputStateSwitcher;                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           ItemInteraction_GzText;                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           ItemInteraction_GzText_1;                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGzTextBlock*                           RepaiTime_GzText;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HoldInteractionTooltip_C*          WBP_HoldInteractionTooltip;                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsLeftShoulder;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14F1[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HoldInteractionTooltip_C*          HoldInteractInputRef;                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_InteractionInput(int32 EntryPoint);
	const class FText GetDisplayTextFromInteractData(class UGzInteractableComponent* Interact);
	void OnInteractionSuccess();
	void ResetInteractionAnim();
	void Set_Interaction_Duration(double InteractionDuration);
	void SetActionInput(class UGzInteractableComponent* FocusCache, bool PickableItem);
	void SetBlockInteractState();
	void SetFailedInteractionText(const class FText& Text);
	void SetInitialInteractionProgress(double InitialInteractionProgress);
	void SetInputState(bool BlockInputeState, const class FText& BlockTime);
	void SetIsLeftShoulder(bool NewValue);
	void SetResetProgressOnRelease(bool bResetProgressBarOnRelease);
	void SetTooltipStyle();
	void UpdateHolding(double InitialInteractionProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InteractionInput_C">();
	}
	static class UWBP_InteractionInput_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InteractionInput_C>();
	}
};
static_assert(alignof(UWBP_InteractionInput_C) == 0x000008, "Wrong alignment on UWBP_InteractionInput_C");
static_assert(sizeof(UWBP_InteractionInput_C) == 0x000338, "Wrong size on UWBP_InteractionInput_C");
static_assert(offsetof(UWBP_InteractionInput_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_InteractionInput_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, FailedInteraction_GzText) == 0x0002E8, "Member 'UWBP_InteractionInput_C::FailedInteraction_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, HorizontalBox_Interaction) == 0x0002F0, "Member 'UWBP_InteractionInput_C::HorizontalBox_Interaction' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, HorizontalBox_Ping) == 0x0002F8, "Member 'UWBP_InteractionInput_C::HorizontalBox_Ping' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, InputStateSwitcher) == 0x000300, "Member 'UWBP_InteractionInput_C::InputStateSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, ItemInteraction_GzText) == 0x000308, "Member 'UWBP_InteractionInput_C::ItemInteraction_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, ItemInteraction_GzText_1) == 0x000310, "Member 'UWBP_InteractionInput_C::ItemInteraction_GzText_1' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, RepaiTime_GzText) == 0x000318, "Member 'UWBP_InteractionInput_C::RepaiTime_GzText' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, WBP_HoldInteractionTooltip) == 0x000320, "Member 'UWBP_InteractionInput_C::WBP_HoldInteractionTooltip' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, IsLeftShoulder) == 0x000328, "Member 'UWBP_InteractionInput_C::IsLeftShoulder' has a wrong offset!");
static_assert(offsetof(UWBP_InteractionInput_C, HoldInteractInputRef) == 0x000330, "Member 'UWBP_InteractionInput_C::HoldInteractInputRef' has a wrong offset!");

}

