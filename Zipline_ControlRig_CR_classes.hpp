#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zipline_ControlRig_CR

#include "Basic.hpp"

#include "PBIK_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass Zipline_ControlRig_CR.Zipline_ControlRig_CR_C
// 0x0188 (0x0C30 - 0x0AA8)
class UZipline_ControlRig_CR_C final : public UControlRig
{
public:
	uint8                                         Pad_6F80[0x8];                                     // 0x0AA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Org_Clavicle;                                      // 0x0AB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  Org_Neck01;                                        // 0x0AD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Org_Hand;                                          // 0x0AF0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlayerRootRotation;                                // 0x0B50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FVector                                PlayerModifyTransition;                            // 0x0B68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Hand_Pole_IK_R;                                    // 0x0B80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         BodyAimAlpha;                                      // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6F81[0x4];                                     // 0x0B9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActiveLockRotation;                                // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         BodyAimDirection;                                  // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6F82[0x4];                                     // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PlayerAdditiveRotation;                            // 0x0BB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SelectZiplineType;                                 // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHasLostLeftArm;                                   // 0x0BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F83[0x6];                                     // 0x0BCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Hand_Pole_IK_L;                                    // 0x0BD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        DotProduct;                                        // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0BF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovingUp;                                        // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F84[0x7];                                     // 0x0C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ZiplineHandLoc;                                    // 0x0C10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Zipline_ControlRig_CR_C">();
	}
	static class UZipline_ControlRig_CR_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZipline_ControlRig_CR_C>();
	}
};
static_assert(alignof(UZipline_ControlRig_CR_C) == 0x000010, "Wrong alignment on UZipline_ControlRig_CR_C");
static_assert(sizeof(UZipline_ControlRig_CR_C) == 0x000C30, "Wrong size on UZipline_ControlRig_CR_C");
static_assert(offsetof(UZipline_ControlRig_CR_C, Org_Clavicle) == 0x000AB0, "Member 'UZipline_ControlRig_CR_C::Org_Clavicle' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, Org_Neck01) == 0x000AD0, "Member 'UZipline_ControlRig_CR_C::Org_Neck01' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, Org_Hand) == 0x000AF0, "Member 'UZipline_ControlRig_CR_C::Org_Hand' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, PlayerRootRotation) == 0x000B50, "Member 'UZipline_ControlRig_CR_C::PlayerRootRotation' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, PlayerModifyTransition) == 0x000B68, "Member 'UZipline_ControlRig_CR_C::PlayerModifyTransition' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, Hand_Pole_IK_R) == 0x000B80, "Member 'UZipline_ControlRig_CR_C::Hand_Pole_IK_R' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, BodyAimAlpha) == 0x000B98, "Member 'UZipline_ControlRig_CR_C::BodyAimAlpha' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, ActiveLockRotation) == 0x000BA0, "Member 'UZipline_ControlRig_CR_C::ActiveLockRotation' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, BodyAimDirection) == 0x000BA8, "Member 'UZipline_ControlRig_CR_C::BodyAimDirection' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, PlayerAdditiveRotation) == 0x000BB0, "Member 'UZipline_ControlRig_CR_C::PlayerAdditiveRotation' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, SelectZiplineType) == 0x000BC8, "Member 'UZipline_ControlRig_CR_C::SelectZiplineType' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, bHasLostLeftArm) == 0x000BC9, "Member 'UZipline_ControlRig_CR_C::bHasLostLeftArm' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, Hand_Pole_IK_L) == 0x000BD0, "Member 'UZipline_ControlRig_CR_C::Hand_Pole_IK_L' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, DotProduct) == 0x000BE8, "Member 'UZipline_ControlRig_CR_C::DotProduct' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, Velocity) == 0x000BF0, "Member 'UZipline_ControlRig_CR_C::Velocity' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, IsMovingUp) == 0x000C08, "Member 'UZipline_ControlRig_CR_C::IsMovingUp' has a wrong offset!");
static_assert(offsetof(UZipline_ControlRig_CR_C, ZiplineHandLoc) == 0x000C10, "Member 'UZipline_ControlRig_CR_C::ZiplineHandLoc' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass Zipline_ControlRig_CR.RigVMMemory_Work
// 0x0578 (0x05A0 - 0x0028)
class URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_6F85[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Element; // 0x0090(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F86[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Result; // 0x00A0(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___RigVMFunction_MathBoolToInteger_1_1_Result; // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Index; // 0x00B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__IO;        // 0x00B8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_3_Items__IO;        // 0x00C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x00D8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_6F87[0x8];                                     // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x00F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Element; // 0x0150(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F88[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x0160(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex; // 0x0170(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_7_1_Result; // 0x0180(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___RigVMFunction_MathBoolToInteger_1_1_1_2_Result; // 0x018C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Result; // 0x0190(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_8_Result; // 0x01B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___RigVMFunction_MathBoolToInteger_1_1_2_Result; // 0x01B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__IO; // 0x01B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__IO; // 0x01D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_3_1_CachedIndex; // 0x0230(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___RigVMFunction_ControlFlowBranch_BlockToRun; // 0x0240(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___RigVMFunction_MathBoolToInteger_1_Result; // 0x0248(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Element; // 0x024C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigElementKey>                 RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Result; // 0x0258(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Index; // 0x0268(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F89[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__IO;          // 0x0270(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__IO;        // 0x0280(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_Element; // 0x0290(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_Element; // 0x029C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Element; // 0x02A8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8A[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Result; // 0x02B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Index; // 0x02D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8B[0xC];                                     // 0x02D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x02E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x0340(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                DISPATCH_RigVMDispatch_SelectInt32_4_Values_0;     // 0x0350(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8C[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0370(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x03D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                DISPATCH_RigVMDispatch_SelectInt32_4_Values_1;     // 0x03E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8D[0x8];                                     // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HandIK___HandIK_RigVMFunction_MathTransformMake_Result; // 0x0400(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandIK___HandIK_Subtract_Result;                   // 0x0460(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandIK___HandIK_From_World_Global;                 // 0x0478(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Result; // 0x0490(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_1_Result; // 0x0494(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Index; // 0x0498(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Result; // 0x049C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_3_Result; // 0x04A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Result; // 0x04A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_Result; // 0x04A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Result; // 0x04AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandIK___HandIK_Subtract_B__IO;                    // 0x04B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8E[0x8];                                     // 0x04C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_Result; // 0x04D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandIK___HandIK_RigVMFunction_MathVectorMake_Result; // 0x04F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Result; // 0x0508(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_Result; // 0x050C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Index; // 0x0510(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Result; // 0x0514(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_Result; // 0x0518(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Index; // 0x051C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_0; // 0x0520(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8F[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HandIK___HandIK_Multiply_Result;                   // 0x0528(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_1; // 0x0530(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Result; // 0x0534(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_2_Result; // 0x0538(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Index; // 0x053C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        HandIK___HandIK_Add_Result;                        // 0x0540(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_0; // 0x0548(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F90[0x4];                                     // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HandIK___HandIK_Add_1_Result;                      // 0x0550(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_1; // 0x0558(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F91[0x4];                                     // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPBIKEffector>                  HandIK___HandIK_PBIK_1_1_2_1_Effectors__IO;        // 0x0560(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         HandIK___HandIK_PBIK_1_1_2_1_EffectorSolverIndices; // 0x0570(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKBoneSetting>               HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__IO;     // 0x0580(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKWorkData>                  HandIK___HandIK_PBIK_1_1_2_1_WorkData;             // 0x0590(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemory_Work">();
	}
	static class URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemory_Work>();
	}
};
static_assert(alignof(URigVMMemory_Work) == 0x000010, "Wrong alignment on URigVMMemory_Work");
static_assert(sizeof(URigVMMemory_Work) == 0x0005A0, "Wrong size on URigVMMemory_Work");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x000030, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Element) == 0x000090, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Result) == 0x0000A0, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolToInteger_1_1_Result) == 0x0000B0, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolToInteger_1_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Index) == 0x0000B4, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_2_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_2_Items__IO) == 0x0000B8, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_2_Items__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_3_Items__IO) == 0x0000C8, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_3_Items__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x0000D8, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x0000F0, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Element) == 0x000150, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x000160, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex) == 0x000170, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_7_1_Result) == 0x000180, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_7_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolToInteger_1_1_1_2_Result) == 0x00018C, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolToInteger_1_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Result) == 0x000190, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_8_Result) == 0x0001B0, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_8_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolToInteger_1_1_2_Result) == 0x0001B4, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolToInteger_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__IO) == 0x0001B8, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__IO) == 0x0001D0, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_1_CachedIndex) == 0x000230, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_ControlFlowBranch_BlockToRun) == 0x000240, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_ControlFlowBranch_BlockToRun' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolToInteger_1_Result) == 0x000248, "Member 'URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolToInteger_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Element) == 0x00024C, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Result) == 0x000258, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Index) == 0x000268, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_1_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_Items__IO) == 0x000270, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_Items__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_1_Items__IO) == 0x000280, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_1_Items__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_Element) == 0x000290, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_Element) == 0x00029C, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Element) == 0x0002A8, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Element' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Result) == 0x0002B8, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Index) == 0x0002D0, "Member 'URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_SelectInt32_4_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x0002E0, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x000340, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, DISPATCH_RigVMDispatch_SelectInt32_4_Values_0) == 0x000350, "Member 'URigVMMemory_Work::DISPATCH_RigVMDispatch_SelectInt32_4_Values_0' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000370, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0003D0, "Member 'URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, DISPATCH_RigVMDispatch_SelectInt32_4_Values_1) == 0x0003E0, "Member 'URigVMMemory_Work::DISPATCH_RigVMDispatch_SelectInt32_4_Values_1' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathTransformMake_Result) == 0x000400, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathTransformMake_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_Subtract_Result) == 0x000460, "Member 'URigVMMemory_Work::HandIK___HandIK_Subtract_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_From_World_Global) == 0x000478, "Member 'URigVMMemory_Work::HandIK___HandIK_From_World_Global' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Result) == 0x000490, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_1_Result) == 0x000494, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Index) == 0x000498, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Result) == 0x00049C, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_3_Result) == 0x0004A0, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_3_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Result) == 0x0004A4, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_Result) == 0x0004A8, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Result) == 0x0004AC, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_Subtract_B__IO) == 0x0004B0, "Member 'URigVMMemory_Work::HandIK___HandIK_Subtract_B__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_Result) == 0x0004D0, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathVectorMake_Result) == 0x0004F0, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathVectorMake_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Result) == 0x000508, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_Result) == 0x00050C, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_3_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Index) == 0x000510, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_2_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Result) == 0x000514, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_Result) == 0x000518, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Index) == 0x00051C, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_0) == 0x000520, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_0' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_Multiply_Result) == 0x000528, "Member 'URigVMMemory_Work::HandIK___HandIK_Multiply_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_1) == 0x000530, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_Values_1' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Result) == 0x000534, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_2_Result) == 0x000538, "Member 'URigVMMemory_Work::HandIK___HandIK_RigVMFunction_MathBoolToInteger_1_1_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Index) == 0x00053C, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Index' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_Add_Result) == 0x000540, "Member 'URigVMMemory_Work::HandIK___HandIK_Add_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_0) == 0x000548, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_0' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_Add_1_Result) == 0x000550, "Member 'URigVMMemory_Work::HandIK___HandIK_Add_1_Result' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_1) == 0x000558, "Member 'URigVMMemory_Work::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_2_3_Values_1' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_PBIK_1_1_2_1_Effectors__IO) == 0x000560, "Member 'URigVMMemory_Work::HandIK___HandIK_PBIK_1_1_2_1_Effectors__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_PBIK_1_1_2_1_EffectorSolverIndices) == 0x000570, "Member 'URigVMMemory_Work::HandIK___HandIK_PBIK_1_1_2_1_EffectorSolverIndices' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__IO) == 0x000580, "Member 'URigVMMemory_Work::HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__IO' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Work, HandIK___HandIK_PBIK_1_1_2_1_WorkData) == 0x000590, "Member 'URigVMMemory_Work::HandIK___HandIK_PBIK_1_1_2_1_WorkData' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass Zipline_ControlRig_CR.RigVMMemory_Literal
// 0x0268 (0x0290 - 0x0028)
class URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__Const;     // 0x0028(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_3_Items__Const;     // 0x0038(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Index__Const; // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_GetTransform_Space__Const;    // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_GetTransform_bInitial__Const; // 0x004D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F92[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Index__Const; // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const; // 0x0054(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__Const; // 0x0060(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_OffsetTransformForItem_3_Weight__Const; // 0x00C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_OffsetTransformForItem_3_bPropagateToChildren__Const; // 0x00C4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F93[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_0__Const; // 0x00C8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_1__Const; // 0x00D4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__Const; // 0x00E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__Const; // 0x0140(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DISPATCH_RigVMDispatch_SelectInt32_8_Values_0__Const; // 0x0158(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DISPATCH_RigVMDispatch_SelectInt32_8_Values_1__Const; // 0x015C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_RotationOrder__Const; // 0x0160(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F94[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__Const;       // 0x0168(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__Const;     // 0x0178(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Index__Const; // 0x0188(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Index__Const; // 0x018C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_3_Item__Const;   // 0x0190(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_1_Item__Const;   // 0x019C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   HandIK___HandIK_PBIK_1_1_2_1_Root__Const;          // 0x01A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKEffector>                  HandIK___HandIK_PBIK_1_1_2_1_Effectors__Const;     // 0x01B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                HandIK___HandIK_Subtract_B__Const;                 // 0x01C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Values_0__Const; // 0x01D8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_0__Const; // 0x01DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_1__Const; // 0x01E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_0__Const; // 0x01E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_1__Const; // 0x01E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Values_0__Const; // 0x01EC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        HandIK___HandIK_Multiply_B__Const;                 // 0x01F0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        HandIK___HandIK_Add_B__Const;                      // 0x01F8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        HandIK___HandIK_Add_1_B__Const;                    // 0x0200(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandIK___HandIK_RigVMFunction_MathVectorMake_Y__Const; // 0x0208(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_RotationOrder__Const; // 0x020C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F95[0x3];                                     // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HandIK___HandIK_RigVMFunction_MathTransformMake_Scale__Const; // 0x0210(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKBoneSetting>               HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__Const;  // 0x0228(0x0010)(Edit, EditConst, NonTransactional)
	TArray<class FName>                           HandIK___HandIK_PBIK_1_1_2_1_ExcludedBones__Const; // 0x0238(0x0010)(Edit, EditConst, NonTransactional)
	struct FPBIKSolverSettings                    HandIK___HandIK_PBIK_1_1_2_1_Settings__Const;      // 0x0248(0x0040)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FPBIKDebug                             HandIK___HandIK_PBIK_1_1_2_1_Debug__Const;         // 0x0288(0x0008)(Edit, EditConst, NonTransactional, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemory_Literal">();
	}
	static class URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMMemory_Literal>();
	}
};
static_assert(alignof(URigVMMemory_Literal) == 0x000010, "Wrong alignment on URigVMMemory_Literal");
static_assert(sizeof(URigVMMemory_Literal) == 0x000290, "Wrong size on URigVMMemory_Literal");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_2_Items__Const) == 0x000028, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_2_Items__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_3_Items__Const) == 0x000038, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_3_Items__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Index__Const) == 0x000048, "Member 'URigVMMemory_Literal::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Index__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_Space__Const) == 0x00004C, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_bInitial__Const) == 0x00004D, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Index__Const) == 0x000050, "Member 'URigVMMemory_Literal::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_1_Index__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const) == 0x000054, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__Const) == 0x000060, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_Weight__Const) == 0x0000C0, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_Weight__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_bPropagateToChildren__Const) == 0x0000C4, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_0__Const) == 0x0000C8, "Member 'URigVMMemory_Literal::DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_1__Const) == 0x0000D4, "Member 'URigVMMemory_Literal::DISPATCH_RigVMDispatch_SelectInt32_7_1_Values_1__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__Const) == 0x0000E0, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_1_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__Const) == 0x000140, "Member 'URigVMMemory_Literal::RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_Euler__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, DISPATCH_RigVMDispatch_SelectInt32_8_Values_0__Const) == 0x000158, "Member 'URigVMMemory_Literal::DISPATCH_RigVMDispatch_SelectInt32_8_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, DISPATCH_RigVMDispatch_SelectInt32_8_Values_1__Const) == 0x00015C, "Member 'URigVMMemory_Literal::DISPATCH_RigVMDispatch_SelectInt32_8_Values_1__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_RotationOrder__Const) == 0x000160, "Member 'URigVMMemory_Literal::RigVMModel___RigVMFunction_MathQuaternionFromEuler_4_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_Items__Const) == 0x000168, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_Items__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_1_Items__Const) == 0x000178, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_1_Items__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Index__Const) == 0x000188, "Member 'URigVMMemory_Literal::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_1_Index__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Index__Const) == 0x00018C, "Member 'URigVMMemory_Literal::RigVMModel___DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_1_Index__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_3_Item__Const) == 0x000190, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_1_Item__Const) == 0x00019C, "Member 'URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_Root__Const) == 0x0001A8, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_Root__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_Effectors__Const) == 0x0001B0, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_Effectors__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_Subtract_B__Const) == 0x0001C0, "Member 'URigVMMemory_Literal::HandIK___HandIK_Subtract_B__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Values_0__Const) == 0x0001D8, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_1_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_0__Const) == 0x0001DC, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_1__Const) == 0x0001E0, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_1_Values_1__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_0__Const) == 0x0001E4, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_1__Const) == 0x0001E8, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_Values_1__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Values_0__Const) == 0x0001EC, "Member 'URigVMMemory_Literal::HandIK___HandIK_DISPATCH_RigVMDispatch_SelectInt32_6_1_Values_0__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_Multiply_B__Const) == 0x0001F0, "Member 'URigVMMemory_Literal::HandIK___HandIK_Multiply_B__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_Add_B__Const) == 0x0001F8, "Member 'URigVMMemory_Literal::HandIK___HandIK_Add_B__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_Add_1_B__Const) == 0x000200, "Member 'URigVMMemory_Literal::HandIK___HandIK_Add_1_B__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_RigVMFunction_MathVectorMake_Y__Const) == 0x000208, "Member 'URigVMMemory_Literal::HandIK___HandIK_RigVMFunction_MathVectorMake_Y__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_RotationOrder__Const) == 0x00020C, "Member 'URigVMMemory_Literal::HandIK___HandIK_RigVMFunction_MathQuaternionFromEuler_1_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_RigVMFunction_MathTransformMake_Scale__Const) == 0x000210, "Member 'URigVMMemory_Literal::HandIK___HandIK_RigVMFunction_MathTransformMake_Scale__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__Const) == 0x000228, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_BoneSettings__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_ExcludedBones__Const) == 0x000238, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_ExcludedBones__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_Settings__Const) == 0x000248, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_Settings__Const' has a wrong offset!");
static_assert(offsetof(URigVMMemory_Literal, HandIK___HandIK_PBIK_1_1_2_1_Debug__Const) == 0x000288, "Member 'URigVMMemory_Literal::HandIK___HandIK_PBIK_1_1_2_1_Debug__Const' has a wrong offset!");

}

