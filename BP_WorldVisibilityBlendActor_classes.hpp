#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldVisibilityBlendActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WorldVisibilityBlendActor.BP_WorldVisibilityBlendActor_C
// 0x0028 (0x02D0 - 0x02A8)
class ABP_WorldVisibilityBlendActor_C final : public AGzWorldVisibilityBlendActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMIFaid;                                           // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EDepthStencilValue                            TargetState;                                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDepthStencilValue                            Setted_State;                                      // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidState;                                     // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDepthStencilValue                            TargetStateLimb;                                   // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDepthStencilValue                            Setted_State_Limb;                                 // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlendIn;                                          // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4A[0x2];                                     // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendTimeCurrent;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ChangeWithBlend(EDepthStencilValue Selection, bool* bNotInsta);
	void DisableBlendActor();
	void ExecuteUbergraph_BP_WorldVisibilityBlendActor(int32 EntryPoint);
	void HandlLimbs();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReverseBlend();
	void SetAlpha(float Value);
	void SetState(EDepthStencilValue Value);
	void SetStateInternal(EDepthStencilValue Value, EDepthStencilValue Limb);
	void SetStateSeparateForLimb(EDepthStencilValue Value, EDepthStencilValue ValueForLimbs);
	void SetTargetState();
	void StartBlend();
	void TryKillSelf();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WorldVisibilityBlendActor_C">();
	}
	static class ABP_WorldVisibilityBlendActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WorldVisibilityBlendActor_C>();
	}
};
static_assert(alignof(ABP_WorldVisibilityBlendActor_C) == 0x000008, "Wrong alignment on ABP_WorldVisibilityBlendActor_C");
static_assert(sizeof(ABP_WorldVisibilityBlendActor_C) == 0x0002D0, "Wrong size on ABP_WorldVisibilityBlendActor_C");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_WorldVisibilityBlendActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, Sphere) == 0x0002B0, "Member 'ABP_WorldVisibilityBlendActor_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, DMIFaid) == 0x0002B8, "Member 'ABP_WorldVisibilityBlendActor_C::DMIFaid' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, TargetState) == 0x0002C0, "Member 'ABP_WorldVisibilityBlendActor_C::TargetState' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, Setted_State) == 0x0002C1, "Member 'ABP_WorldVisibilityBlendActor_C::Setted_State' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, bInvalidState) == 0x0002C2, "Member 'ABP_WorldVisibilityBlendActor_C::bInvalidState' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, TargetStateLimb) == 0x0002C3, "Member 'ABP_WorldVisibilityBlendActor_C::TargetStateLimb' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, Setted_State_Limb) == 0x0002C4, "Member 'ABP_WorldVisibilityBlendActor_C::Setted_State_Limb' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, bBlendIn) == 0x0002C5, "Member 'ABP_WorldVisibilityBlendActor_C::bBlendIn' has a wrong offset!");
static_assert(offsetof(ABP_WorldVisibilityBlendActor_C, BlendTimeCurrent) == 0x0002C8, "Member 'ABP_WorldVisibilityBlendActor_C::BlendTimeCurrent' has a wrong offset!");

}

