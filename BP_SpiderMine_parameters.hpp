#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiderMine

#include "Basic.hpp"

#include "G01_structs.hpp"


namespace SDK::Params
{

// Function BP_SpiderMine.BP_SpiderMine_C.CanScanOnAnyDistance
// 0x0001 (0x0001 - 0x0000)
struct BP_SpiderMine_C_CanScanOnAnyDistance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_CanScanOnAnyDistance) == 0x000001, "Wrong alignment on BP_SpiderMine_C_CanScanOnAnyDistance");
static_assert(sizeof(BP_SpiderMine_C_CanScanOnAnyDistance) == 0x000001, "Wrong size on BP_SpiderMine_C_CanScanOnAnyDistance");
static_assert(offsetof(BP_SpiderMine_C_CanScanOnAnyDistance, ReturnValue) == 0x000000, "Member 'BP_SpiderMine_C_CanScanOnAnyDistance::ReturnValue' has a wrong offset!");

// Function BP_SpiderMine.BP_SpiderMine_C.IsTargetable
// 0x0010 (0x0010 - 0x0000)
struct BP_SpiderMine_C_IsTargetable final
{
public:
	class AActor*                                 GorillaOwner;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bTargetable;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_IsTargetable) == 0x000008, "Wrong alignment on BP_SpiderMine_C_IsTargetable");
static_assert(sizeof(BP_SpiderMine_C_IsTargetable) == 0x000010, "Wrong size on BP_SpiderMine_C_IsTargetable");
static_assert(offsetof(BP_SpiderMine_C_IsTargetable, GorillaOwner) == 0x000000, "Member 'BP_SpiderMine_C_IsTargetable::GorillaOwner' has a wrong offset!");
static_assert(offsetof(BP_SpiderMine_C_IsTargetable, bTargetable) == 0x000008, "Member 'BP_SpiderMine_C_IsTargetable::bTargetable' has a wrong offset!");

// Function BP_SpiderMine.BP_SpiderMine_C.OnDefilerEffectApplied
// 0x0001 (0x0001 - 0x0000)
struct BP_SpiderMine_C_OnDefilerEffectApplied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_OnDefilerEffectApplied) == 0x000001, "Wrong alignment on BP_SpiderMine_C_OnDefilerEffectApplied");
static_assert(sizeof(BP_SpiderMine_C_OnDefilerEffectApplied) == 0x000001, "Wrong size on BP_SpiderMine_C_OnDefilerEffectApplied");
static_assert(offsetof(BP_SpiderMine_C_OnDefilerEffectApplied, ReturnValue) == 0x000000, "Member 'BP_SpiderMine_C_OnDefilerEffectApplied::ReturnValue' has a wrong offset!");

// Function BP_SpiderMine.BP_SpiderMine_C.OnDefilerEffectRemoved
// 0x0001 (0x0001 - 0x0000)
struct BP_SpiderMine_C_OnDefilerEffectRemoved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_OnDefilerEffectRemoved) == 0x000001, "Wrong alignment on BP_SpiderMine_C_OnDefilerEffectRemoved");
static_assert(sizeof(BP_SpiderMine_C_OnDefilerEffectRemoved) == 0x000001, "Wrong size on BP_SpiderMine_C_OnDefilerEffectRemoved");
static_assert(offsetof(BP_SpiderMine_C_OnDefilerEffectRemoved, ReturnValue) == 0x000000, "Member 'BP_SpiderMine_C_OnDefilerEffectRemoved::ReturnValue' has a wrong offset!");

// Function BP_SpiderMine.BP_SpiderMine_C.GetDefilerTargetType
// 0x0001 (0x0001 - 0x0000)
struct BP_SpiderMine_C_GetDefilerTargetType final
{
public:
	EGzDefilerTargetType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_GetDefilerTargetType) == 0x000001, "Wrong alignment on BP_SpiderMine_C_GetDefilerTargetType");
static_assert(sizeof(BP_SpiderMine_C_GetDefilerTargetType) == 0x000001, "Wrong size on BP_SpiderMine_C_GetDefilerTargetType");
static_assert(offsetof(BP_SpiderMine_C_GetDefilerTargetType, ReturnValue) == 0x000000, "Member 'BP_SpiderMine_C_GetDefilerTargetType::ReturnValue' has a wrong offset!");

// Function BP_SpiderMine.BP_SpiderMine_C.IsValidAttachment
// 0x0002 (0x0002 - 0x0000)
struct BP_SpiderMine_C_IsValidAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiderMine_C_IsValidAttachment) == 0x000001, "Wrong alignment on BP_SpiderMine_C_IsValidAttachment");
static_assert(sizeof(BP_SpiderMine_C_IsValidAttachment) == 0x000002, "Wrong size on BP_SpiderMine_C_IsValidAttachment");
static_assert(offsetof(BP_SpiderMine_C_IsValidAttachment, ReturnValue) == 0x000000, "Member 'BP_SpiderMine_C_IsValidAttachment::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiderMine_C_IsValidAttachment, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_SpiderMine_C_IsValidAttachment::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

}

