#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_Limb_Comparison

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.ExecuteUbergraph_WBP_Tooltip_Limb_Comparison
// 0x0004 (0x0004 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison) == 0x000004, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison) == 0x000004, "Wrong size on WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison, EntryPoint) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_ExecuteUbergraph_WBP_Tooltip_Limb_Comparison::EntryPoint' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.FindLimbHelth
// 0x0048 (0x0048 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_FindLimbHelth final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameplayAttributeValue_bFound;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E21[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameplayAttributeValue_ReturnValue;    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameplayAttributeValue_bFound_1;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E22[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameplayAttributeValue_ReturnValue_1;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E23[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_FindLimbHelth");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth) == 0x000048, "Wrong size on WBP_Tooltip_Limb_Comparison_C_FindLimbHelth");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, Pawn) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::Pawn' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000008, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetGameplayAttributeValue_bFound) == 0x000011, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetGameplayAttributeValue_bFound' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetGameplayAttributeValue_ReturnValue) == 0x000014, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetGameplayAttributeValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetGameplayAttributeValue_bFound_1) == 0x000018, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetGameplayAttributeValue_bFound_1' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetGameplayAttributeValue_ReturnValue_1) == 0x00001C, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetGameplayAttributeValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000020, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_SafeDivide_ReturnValue) == 0x000028, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_SafeDivide_B_ImplicitCast) == 0x000038, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_FindLimbHelth, CallFunc_SafeDivide_A_ImplicitCast) == 0x000040, "Member 'WBP_Tooltip_Limb_Comparison_C_FindLimbHelth::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.InitLimbSetup
// 0x0008 (0x0008 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_InitLimbSetup final
{
public:
	class UGzBodyPartItemData*                    LimbItemData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_InitLimbSetup) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_InitLimbSetup");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_InitLimbSetup) == 0x000008, "Wrong size on WBP_Tooltip_Limb_Comparison_C_InitLimbSetup");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_InitLimbSetup, LimbItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_InitLimbSetup::LimbItemData' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.UpdateHealth
// 0x0010 (0x0010 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_UpdateHealth final
{
public:
	double                                        HealthPercentage;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanInteract;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_UpdateHealth) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_UpdateHealth");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_UpdateHealth) == 0x000010, "Wrong size on WBP_Tooltip_Limb_Comparison_C_UpdateHealth");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateHealth, HealthPercentage) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateHealth::HealthPercentage' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateHealth, bCanInteract) == 0x000008, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateHealth::bCanInteract' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.UpdateLimbType
// 0x0020 (0x0020 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_UpdateLimbType final
{
public:
	class UGzBodyPartItemData*                    LimbItemData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         TypeIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E24[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_UpdateLimbType");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType) == 0x000020, "Wrong size on WBP_Tooltip_Limb_Comparison_C_UpdateLimbType");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, LimbItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::LimbItemData' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, TypeIndex) == 0x000008, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::TypeIndex' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, Temp_byte_Variable) == 0x00000C, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, Temp_int_Variable) == 0x000010, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, Temp_int_Variable_1) == 0x000014, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, Temp_int_Variable_2) == 0x000018, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateLimbType, K2Node_Select_Default) == 0x00001C, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateLimbType::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.UpdateShortRarity
// 0x0020 (0x0020 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity final
{
public:
	class UGzItemData*                            Param_ItemData;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 CallFunc_GetRarity_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E25[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity) == 0x000020, "Wrong size on WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity, Param_ItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity::Param_ItemData' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity, CallFunc_GetRarity_ReturnValue) == 0x000009, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity, CallFunc_GetRarityColor_ReturnValue) == 0x00000C, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateShortRarity::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");

// Function WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C.UpdateTooltip
// 0x0018 (0x0018 - 0x0000)
struct WBP_Tooltip_Limb_Comparison_C_UpdateTooltip final
{
public:
	class UGzItemData*                            CallFunc_GetItemDataComparison_ItemData;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartItemData*                    K2Node_DynamicCast_AsGz_Body_Part_Item_Data;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip) == 0x000008, "Wrong alignment on WBP_Tooltip_Limb_Comparison_C_UpdateTooltip");
static_assert(sizeof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip) == 0x000018, "Wrong size on WBP_Tooltip_Limb_Comparison_C_UpdateTooltip");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip, CallFunc_GetItemDataComparison_ItemData) == 0x000000, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateTooltip::CallFunc_GetItemDataComparison_ItemData' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip, K2Node_DynamicCast_AsGz_Body_Part_Item_Data) == 0x000008, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateTooltip::K2Node_DynamicCast_AsGz_Body_Part_Item_Data' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateTooltip::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Tooltip_Limb_Comparison_C_UpdateTooltip, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WBP_Tooltip_Limb_Comparison_C_UpdateTooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

