#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyNavGate

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_FlyGateState_structs.hpp"


namespace SDK::Params
{

// Function BP_SkyNavGate.BP_SkyNavGate_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_SkyNavGate_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C12[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1; // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_UserConstructionScript");
static_assert(sizeof(BP_SkyNavGate_C_UserConstructionScript) == 0x000020, "Wrong size on BP_SkyNavGate_C_UserConstructionScript");
static_assert(offsetof(BP_SkyNavGate_C_UserConstructionScript, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000000, "Member 'BP_SkyNavGate_C_UserConstructionScript::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UserConstructionScript, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_SkyNavGate_C_UserConstructionScript::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UserConstructionScript, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_SkyNavGate_C_UserConstructionScript::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UserConstructionScript, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x000018, "Member 'BP_SkyNavGate_C_UserConstructionScript::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UserConstructionScript, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1) == 0x00001C, "Member 'BP_SkyNavGate_C_UserConstructionScript::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.UpdateDebugGateText
// 0x0078 (0x0078 - 0x0000)
struct BP_SkyNavGate_C_UpdateDebugGateText final
{
public:
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C13[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0068(0x0010)()
};
static_assert(alignof(BP_SkyNavGate_C_UpdateDebugGateText) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_UpdateDebugGateText");
static_assert(sizeof(BP_SkyNavGate_C_UpdateDebugGateText) == 0x000078, "Wrong size on BP_SkyNavGate_C_UpdateDebugGateText");
static_assert(offsetof(BP_SkyNavGate_C_UpdateDebugGateText, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000000, "Member 'BP_SkyNavGate_C_UpdateDebugGateText::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UpdateDebugGateText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'BP_SkyNavGate_C_UpdateDebugGateText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UpdateDebugGateText, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'BP_SkyNavGate_C_UpdateDebugGateText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UpdateDebugGateText, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_SkyNavGate_C_UpdateDebugGateText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_UpdateDebugGateText, CallFunc_Format_ReturnValue) == 0x000068, "Member 'BP_SkyNavGate_C_UpdateDebugGateText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.SetZiplineVisualsVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_SkyNavGate_C_SetZiplineVisualsVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_SetZiplineVisualsVisibility) == 0x000001, "Wrong alignment on BP_SkyNavGate_C_SetZiplineVisualsVisibility");
static_assert(sizeof(BP_SkyNavGate_C_SetZiplineVisualsVisibility) == 0x000001, "Wrong size on BP_SkyNavGate_C_SetZiplineVisualsVisibility");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineVisualsVisibility, Visible) == 0x000000, "Member 'BP_SkyNavGate_C_SetZiplineVisualsVisibility::Visible' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.SetZiplineEffectToGate
// 0x00C0 (0x00C0 - 0x0000)
struct BP_SkyNavGate_C_SetZiplineEffectToGate final
{
public:
	struct FVector                                ZiplineStartRouteLoc;                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C14[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C15[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_SetZiplineEffectToGate) == 0x000010, "Wrong alignment on BP_SkyNavGate_C_SetZiplineEffectToGate");
static_assert(sizeof(BP_SkyNavGate_C_SetZiplineEffectToGate) == 0x0000C0, "Wrong size on BP_SkyNavGate_C_SetZiplineEffectToGate");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineEffectToGate, ZiplineStartRouteLoc) == 0x000000, "Member 'BP_SkyNavGate_C_SetZiplineEffectToGate::ZiplineStartRouteLoc' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineEffectToGate, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_SkyNavGate_C_SetZiplineEffectToGate::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineEffectToGate, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000080, "Member 'BP_SkyNavGate_C_SetZiplineEffectToGate::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineEffectToGate, CallFunc_SelectVector_ReturnValue) == 0x000088, "Member 'BP_SkyNavGate_C_SetZiplineEffectToGate::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetZiplineEffectToGate, CallFunc_InverseTransformLocation_ReturnValue) == 0x0000A0, "Member 'BP_SkyNavGate_C_SetZiplineEffectToGate::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.SetVisualElements_CLIENT
// 0x0038 (0x0038 - 0x0000)
struct BP_SkyNavGate_C_SetVisualElements_CLIENT final
{
public:
	E_FlyGateState                                GateLocalState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C16[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_SetVisualElements_CLIENT) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_SetVisualElements_CLIENT");
static_assert(sizeof(BP_SkyNavGate_C_SetVisualElements_CLIENT) == 0x000038, "Wrong size on BP_SkyNavGate_C_SetVisualElements_CLIENT");
static_assert(offsetof(BP_SkyNavGate_C_SetVisualElements_CLIENT, GateLocalState) == 0x000000, "Member 'BP_SkyNavGate_C_SetVisualElements_CLIENT::GateLocalState' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetVisualElements_CLIENT, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_SkyNavGate_C_SetVisualElements_CLIENT::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetVisualElements_CLIENT, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000008, "Member 'BP_SkyNavGate_C_SetVisualElements_CLIENT::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_SetVisualElements_CLIENT, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000020, "Member 'BP_SkyNavGate_C_SetVisualElements_CLIENT::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.OnPlayerFlyThrough__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature final
{
public:
	int32                                         FlyGateSplinePoint;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature) == 0x000004, "Wrong alignment on BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature, FlyGateSplinePoint) == 0x000000, "Member 'BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature::FlyGateSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature, PlayerId) == 0x000004, "Member 'BP_SkyNavGate_C_OnPlayerFlyThrough__DelegateSignature::PlayerId' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.OnGateConsumptionStarted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature, Duration) == 0x000000, "Member 'BP_SkyNavGate_C_OnGateConsumptionStarted__DelegateSignature::Duration' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.OnGateConsumed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavGate_C_OnGateConsumed__DelegateSignature final
{
public:
	class ABP_SkyNavGate_C*                       GateRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_OnGateConsumed__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_OnGateConsumed__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_OnGateConsumed__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavGate_C_OnGateConsumed__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_OnGateConsumed__DelegateSignature, GateRef) == 0x000000, "Member 'BP_SkyNavGate_C_OnGateConsumed__DelegateSignature::GateRef' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.GetLocalPlayerID
// 0x0030 (0x0030 - 0x0000)
struct BP_SkyNavGate_C_GetLocalPlayerID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C17[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C18[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C19[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_GetLocalPlayerID) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_GetLocalPlayerID");
static_assert(sizeof(BP_SkyNavGate_C_GetLocalPlayerID) == 0x000030, "Wrong size on BP_SkyNavGate_C_GetLocalPlayerID");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, PlayerId) == 0x000000, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000020, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_GetLocalPlayerID, CallFunc_GetPlayerId_ReturnValue) == 0x00002C, "Member 'BP_SkyNavGate_C_GetLocalPlayerID::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.FirstGateMarkerVisibility_CO
// 0x0001 (0x0001 - 0x0000)
struct BP_SkyNavGate_C_FirstGateMarkerVisibility_CO final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_FirstGateMarkerVisibility_CO) == 0x000001, "Wrong alignment on BP_SkyNavGate_C_FirstGateMarkerVisibility_CO");
static_assert(sizeof(BP_SkyNavGate_C_FirstGateMarkerVisibility_CO) == 0x000001, "Wrong size on BP_SkyNavGate_C_FirstGateMarkerVisibility_CO");
static_assert(offsetof(BP_SkyNavGate_C_FirstGateMarkerVisibility_CO, NewVisibility) == 0x000000, "Member 'BP_SkyNavGate_C_FirstGateMarkerVisibility_CO::NewVisibility' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.ExecuteUbergraph_BP_SkyNavGate
// 0x0190 (0x0190 - 0x0000)
struct BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMissionResourceComponent*              K2Node_ComponentBoundEvent_Resource;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Duration;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0038(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1D[0x6];                                     // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1E[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLocalPlayerID_PlayerID;                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewVisibility;                  // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1F[0x1];                                     // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0160(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C20[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMissionResourceComponent*              K2Node_ComponentBoundEvent_Resource_1;             // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CallDelegate_Duration_ImplicitCast;         // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x0188(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate");
static_assert(sizeof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate) == 0x000190, "Wrong size on BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, EntryPoint) == 0x000000, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_Resource) == 0x000008, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_Resource' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_Duration) == 0x000010, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_Duration' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000018, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_OtherActor) == 0x000020, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_OtherComp) == 0x000028, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000030, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_bFromSweep) == 0x000034, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_SweepResult) == 0x000038, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_DynamicCast_AsGz_Player_Character) == 0x000130, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_IsDedicatedServer_ReturnValue) == 0x000139, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000140, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_GetPlayerId_ReturnValue) == 0x000148, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00014C, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_GetLocalPlayerID_PlayerID) == 0x000150, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_GetLocalPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000154, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_CustomEvent_NewVisibility) == 0x000155, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_CustomEvent_NewVisibility' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000156, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000158, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, Temp_delegate_Variable) == 0x000160, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_PostEvent_ReturnValue) == 0x000170, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_ComponentBoundEvent_Resource_1) == 0x000178, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_ComponentBoundEvent_Resource_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, K2Node_CallDelegate_Duration_ImplicitCast) == 0x000180, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::K2Node_CallDelegate_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x000188, "Member 'BP_SkyNavGate_C_ExecuteUbergraph_BP_SkyNavGate::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.ConstructTrajectory
// 0x0260 (0x0260 - 0x0000)
struct BP_SkyNavGate_C_ConstructTrajectory final
{
public:
	bool                                          IsZiplineStart;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C21[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C22[0xF];                                     // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0090(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C23[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0110(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C24[0x8];                                     // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_3;               // 0x01C0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_1;   // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqualExactly_VectorVector_ReturnValue; // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_ConstructTrajectory) == 0x000010, "Wrong alignment on BP_SkyNavGate_C_ConstructTrajectory");
static_assert(sizeof(BP_SkyNavGate_C_ConstructTrajectory) == 0x000260, "Wrong size on BP_SkyNavGate_C_ConstructTrajectory");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, IsZiplineStart) == 0x000000, "Member 'BP_SkyNavGate_C_ConstructTrajectory::IsZiplineStart' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000001, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_GetTransform_ReturnValue_1) == 0x000090, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_SelectVector_ReturnValue) == 0x0000F0, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_GetTransform_ReturnValue_2) == 0x000110, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_InverseTransformLocation_ReturnValue) == 0x000170, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_InverseTransformDirection_ReturnValue) == 0x000188, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x0001A0, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_GetTransform_ReturnValue_3) == 0x0001C0, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_GetTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_SelectVector_ReturnValue_1) == 0x000220, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_InverseTransformLocation_ReturnValue_1) == 0x000238, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_InverseTransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_ConstructTrajectory, CallFunc_NotEqualExactly_VectorVector_ReturnValue) == 0x000250, "Member 'BP_SkyNavGate_C_ConstructTrajectory::CallFunc_NotEqualExactly_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature final
{
public:
	class UMissionResourceComponent*              Resource;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature, Resource) == 0x000000, "Member 'BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature::Resource' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature final
{
public:
	class UMissionResourceComponent*              Resource;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature) == 0x000010, "Wrong size on BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature, Resource) == 0x000000, "Member 'BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature::Resource' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature, Duration) == 0x000008, "Member 'BP_SkyNavGate_C_BndEvt__BP_SkyNavGate_MissionResource_K2Node_ComponentBoundEvent_1_OnResourcePendingDestroyStarted__DelegateSignature::Duration' has a wrong offset!");

// Function BP_SkyNavGate.BP_SkyNavGate_C.BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C25[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_SkyNavGate_C_BndEvt__BP_FlyGate_Test_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

}

