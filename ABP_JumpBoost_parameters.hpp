#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_JumpBoost

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "G01_structs.hpp"


namespace SDK::Params
{

// Function ABP_JumpBoost.ABP_JumpBoost_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_JumpBoost_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_Aiming_Correction");
static_assert(sizeof(ABP_JumpBoost_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_JumpBoost_C_Aiming_Correction");
static_assert(offsetof(ABP_JumpBoost_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_JumpBoost_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_JumpBoost_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_AnimGraph");
static_assert(sizeof(ABP_JumpBoost_C_AnimGraph) == 0x000010, "Wrong size on ABP_JumpBoost_C_AnimGraph");
static_assert(offsetof(ABP_JumpBoost_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_JumpBoost_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_JumpBoost_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JumpBoost_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JumpBoost_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_JumpBoost_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_JumpBoost_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_JumpBoost_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_JumpBoost_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_JumpBoost_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_JumpBoost_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_JumpBoost_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_JumpBoost_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_JumpBoost_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_JumpBoost_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_JumpBoost_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_JumpBoost_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_JumpBoost_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_JumpBoost_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_JumpBoost_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_JumpBoost_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_JumpBoost_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_JumpBoost_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_JumpBoost_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_JumpBoost_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.ExecuteUbergraph_ABP_JumpBoost
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_SPX_CastDataCacheOwner_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost");
static_assert(sizeof(ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost) == 0x000010, "Wrong size on ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost");
static_assert(offsetof(ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost, EntryPoint) == 0x000000, "Member 'ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost, CallFunc_SPX_CastDataCacheOwner_ReturnValue) == 0x000008, "Member 'ABP_JumpBoost_C_ExecuteUbergraph_ABP_JumpBoost::CallFunc_SPX_CastDataCacheOwner_ReturnValue' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.Find Exit Animation
// 0x0058 (0x0058 - 0x0000)
struct ABP_JumpBoost_C_Find_Exit_Animation final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609C[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_Find_Exit_Animation) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_Find_Exit_Animation");
static_assert(sizeof(ABP_JumpBoost_C_Find_Exit_Animation) == 0x000058, "Wrong size on ABP_JumpBoost_C_Find_Exit_Animation");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, Context) == 0x000000, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::Context' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, Node) == 0x000010, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::Node' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, CallFunc_Map_Find_Value) == 0x000038, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_Find_Exit_Animation, CallFunc_SetSequence_ReturnValue) == 0x000048, "Member 'ABP_JumpBoost_C_Find_Exit_Animation::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_JumpBoost_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        AimYaw;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimPitch;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_Aiming");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_JumpBoost_C_FullBody_Aiming");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_Aiming, AimYaw) == 0x000010, "Member 'ABP_JumpBoost_C_FullBody_Aiming::AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_Aiming, AimPitch) == 0x000018, "Member 'ABP_JumpBoost_C_FullBody_Aiming::AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_JumpBoost_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_CycleState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_CycleState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_FallLandState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_FallLandState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_IdleState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_IdleState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_PivotState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_PivotState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_StartState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_StartState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBody_StopState");
static_assert(sizeof(ABP_JumpBoost_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBody_StopState");
static_assert(offsetof(ABP_JumpBoost_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_JumpBoost_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_FullBodyAdditives");
static_assert(sizeof(ABP_JumpBoost_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_JumpBoost_C_FullBodyAdditives");
static_assert(offsetof(ABP_JumpBoost_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_JumpBoost_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_KneeSlide_State");
static_assert(sizeof(ABP_JumpBoost_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_JumpBoost_C_KneeSlide_State");
static_assert(offsetof(ABP_JumpBoost_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_JumpBoost_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_Limbless_State");
static_assert(sizeof(ABP_JumpBoost_C_Limbless_State) == 0x000010, "Wrong size on ABP_JumpBoost_C_Limbless_State");
static_assert(offsetof(ABP_JumpBoost_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_JumpBoost_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_NPC_CoverState");
static_assert(sizeof(ABP_JumpBoost_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_JumpBoost_C_NPC_CoverState");
static_assert(offsetof(ABP_JumpBoost_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_JumpBoost_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_CastDataABP_Item
// 0x0238 (0x0238 - 0x0000)
struct ABP_JumpBoost_C_SPX_CastDataABP_Item final
{
public:
	class UABP_Item_C*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_SPX_CastDataCacheOwner_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimCache                             CallFunc_GetAnimCache_ReturnValue;                 // 0x0010(0x0218)(NoDestructor)
	class UABP_Item_C*                            K2Node_DynamicCast_AsABP_Item;                     // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_CastDataABP_Item) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_CastDataABP_Item");
static_assert(sizeof(ABP_JumpBoost_C_SPX_CastDataABP_Item) == 0x000238, "Wrong size on ABP_JumpBoost_C_SPX_CastDataABP_Item");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataABP_Item, ReturnValue) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_CastDataABP_Item::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataABP_Item, CallFunc_SPX_CastDataCacheOwner_ReturnValue) == 0x000008, "Member 'ABP_JumpBoost_C_SPX_CastDataABP_Item::CallFunc_SPX_CastDataCacheOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataABP_Item, CallFunc_GetAnimCache_ReturnValue) == 0x000010, "Member 'ABP_JumpBoost_C_SPX_CastDataABP_Item::CallFunc_GetAnimCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataABP_Item, K2Node_DynamicCast_AsABP_Item) == 0x000228, "Member 'ABP_JumpBoost_C_SPX_CastDataABP_Item::K2Node_DynamicCast_AsABP_Item' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataABP_Item, K2Node_DynamicCast_bSuccess) == 0x000230, "Member 'ABP_JumpBoost_C_SPX_CastDataABP_Item::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_CastDataCacheOwner
// 0x0018 (0x0018 - 0x0000)
struct ABP_JumpBoost_C_SPX_CastDataCacheOwner final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_CastDataCacheOwner) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_CastDataCacheOwner");
static_assert(sizeof(ABP_JumpBoost_C_SPX_CastDataCacheOwner) == 0x000018, "Wrong size on ABP_JumpBoost_C_SPX_CastDataCacheOwner");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataCacheOwner, ReturnValue) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_CastDataCacheOwner::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataCacheOwner, K2Node_DynamicCast_AsABP_Human) == 0x000008, "Member 'ABP_JumpBoost_C_SPX_CastDataCacheOwner::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_CastDataCacheOwner, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_JumpBoost_C_SPX_CastDataCacheOwner::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_GetCharacterData
// 0x0018 (0x0018 - 0x0000)
struct ABP_JumpBoost_C_SPX_GetCharacterData final
{
public:
	class AGzPlayerCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_GetCharacterData) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_GetCharacterData");
static_assert(sizeof(ABP_JumpBoost_C_SPX_GetCharacterData) == 0x000018, "Wrong size on ABP_JumpBoost_C_SPX_GetCharacterData");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetCharacterData, ReturnValue) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_GetCharacterData::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetCharacterData, K2Node_DynamicCast_AsGz_Player_Character) == 0x000008, "Member 'ABP_JumpBoost_C_SPX_GetCharacterData::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetCharacterData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_JumpBoost_C_SPX_GetCharacterData::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_GetOwnerMovements
// 0x0018 (0x0018 - 0x0000)
struct ABP_JumpBoost_C_SPX_GetOwnerMovements final
{
public:
	class UGzCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGzCharacterMovementComponent*          K2Node_DynamicCast_AsGz_Character_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_GetOwnerMovements) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_GetOwnerMovements");
static_assert(sizeof(ABP_JumpBoost_C_SPX_GetOwnerMovements) == 0x000018, "Wrong size on ABP_JumpBoost_C_SPX_GetOwnerMovements");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetOwnerMovements, ReturnValue) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_GetOwnerMovements::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetOwnerMovements, K2Node_DynamicCast_AsGz_Character_Movement_Component) == 0x000008, "Member 'ABP_JumpBoost_C_SPX_GetOwnerMovements::K2Node_DynamicCast_AsGz_Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_GetOwnerMovements, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_JumpBoost_C_SPX_GetOwnerMovements::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_JumpBoostData
// 0x0010 (0x0010 - 0x0000)
struct ABP_JumpBoost_C_SPX_JumpBoostData final
{
public:
	class UABP_Human_C*                           CallFunc_SPX_CastDataCacheOwner_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           CallFunc_SPX_CastDataCacheOwner_ReturnValue_1;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_JumpBoostData) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_JumpBoostData");
static_assert(sizeof(ABP_JumpBoost_C_SPX_JumpBoostData) == 0x000010, "Wrong size on ABP_JumpBoost_C_SPX_JumpBoostData");
static_assert(offsetof(ABP_JumpBoost_C_SPX_JumpBoostData, CallFunc_SPX_CastDataCacheOwner_ReturnValue) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_JumpBoostData::CallFunc_SPX_CastDataCacheOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_JumpBoostData, CallFunc_SPX_CastDataCacheOwner_ReturnValue_1) == 0x000008, "Member 'ABP_JumpBoost_C_SPX_JumpBoostData::CallFunc_SPX_CastDataCacheOwner_ReturnValue_1' has a wrong offset!");

// Function ABP_JumpBoost.ABP_JumpBoost_C.SPX_SF_JumpBoost
// 0x0078 (0x0078 - 0x0000)
struct ABP_JumpBoost_C_SPX_SF_JumpBoost final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	ECardinalDirectionType                        Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609E[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_3;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0068(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_JumpBoost_C_SPX_SF_JumpBoost) == 0x000008, "Wrong alignment on ABP_JumpBoost_C_SPX_SF_JumpBoost");
static_assert(sizeof(ABP_JumpBoost_C_SPX_SF_JumpBoost) == 0x000078, "Wrong size on ABP_JumpBoost_C_SPX_SF_JumpBoost");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Context) == 0x000000, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Context' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Node) == 0x000010, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Node' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Temp_byte_Variable) == 0x000020, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Temp_object_Variable) == 0x000040, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Temp_object_Variable_1) == 0x000048, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Temp_object_Variable_2) == 0x000050, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, Temp_object_Variable_3) == 0x000058, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, K2Node_Select_Default) == 0x000060, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_JumpBoost_C_SPX_SF_JumpBoost, CallFunc_SetSequence_ReturnValue) == 0x000068, "Member 'ABP_JumpBoost_C_SPX_SF_JumpBoost::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

}

