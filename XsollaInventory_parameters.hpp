#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaInventory

#include "Basic.hpp"

#include "XsollaSettings_structs.hpp"
#include "XsollaInventory_structs.hpp"


namespace SDK::Params
{

// Function XsollaInventory.XsollaInventorySubsystem.ConsumeInventoryItem
// 0x0060 (0x0060 - 0x0000)
struct XsollaInventorySubsystem_ConsumeInventoryItem final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     Platform;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4930[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             SuccessCallback;                                   // 0x003C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x004C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4931[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaInventorySubsystem_ConsumeInventoryItem) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_ConsumeInventoryItem");
static_assert(sizeof(XsollaInventorySubsystem_ConsumeInventoryItem) == 0x000060, "Wrong size on XsollaInventorySubsystem_ConsumeInventoryItem");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, ItemSKU) == 0x000010, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, Quantity) == 0x000020, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::Quantity' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, InstanceId) == 0x000028, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::InstanceId' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, Platform) == 0x000038, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::Platform' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, SuccessCallback) == 0x00003C, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_ConsumeInventoryItem, ErrorCallback) == 0x00004C, "Member 'XsollaInventorySubsystem_ConsumeInventoryItem::ErrorCallback' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.GetCouponRewards
// 0x0040 (0x0040 - 0x0000)
struct XsollaInventorySubsystem_GetCouponRewards final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CouponCode;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FInventoryCouponRewardData& RewardsData)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaInventorySubsystem_GetCouponRewards) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_GetCouponRewards");
static_assert(sizeof(XsollaInventorySubsystem_GetCouponRewards) == 0x000040, "Wrong size on XsollaInventorySubsystem_GetCouponRewards");
static_assert(offsetof(XsollaInventorySubsystem_GetCouponRewards, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_GetCouponRewards::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetCouponRewards, CouponCode) == 0x000010, "Member 'XsollaInventorySubsystem_GetCouponRewards::CouponCode' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetCouponRewards, SuccessCallback) == 0x000020, "Member 'XsollaInventorySubsystem_GetCouponRewards::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetCouponRewards, ErrorCallback) == 0x000030, "Member 'XsollaInventorySubsystem_GetCouponRewards::ErrorCallback' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.GetInventory
// 0x0040 (0x0040 - 0x0000)
struct XsollaInventorySubsystem_GetInventory final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     Platform;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4932[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FInventoryItemsData& InventoryData)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4933[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaInventorySubsystem_GetInventory) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_GetInventory");
static_assert(sizeof(XsollaInventorySubsystem_GetInventory) == 0x000040, "Wrong size on XsollaInventorySubsystem_GetInventory");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_GetInventory::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, Platform) == 0x000010, "Member 'XsollaInventorySubsystem_GetInventory::Platform' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, SuccessCallback) == 0x000014, "Member 'XsollaInventorySubsystem_GetInventory::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, ErrorCallback) == 0x000024, "Member 'XsollaInventorySubsystem_GetInventory::ErrorCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, Limit) == 0x000034, "Member 'XsollaInventorySubsystem_GetInventory::Limit' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetInventory, Offset) == 0x000038, "Member 'XsollaInventorySubsystem_GetInventory::Offset' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.GetTimeLimitedItems
// 0x0038 (0x0038 - 0x0000)
struct XsollaInventorySubsystem_GetTimeLimitedItems final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     Platform;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4934[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FTimeLimitedItemsData& TimeLimitedItemsData)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4935[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaInventorySubsystem_GetTimeLimitedItems) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_GetTimeLimitedItems");
static_assert(sizeof(XsollaInventorySubsystem_GetTimeLimitedItems) == 0x000038, "Wrong size on XsollaInventorySubsystem_GetTimeLimitedItems");
static_assert(offsetof(XsollaInventorySubsystem_GetTimeLimitedItems, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_GetTimeLimitedItems::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetTimeLimitedItems, Platform) == 0x000010, "Member 'XsollaInventorySubsystem_GetTimeLimitedItems::Platform' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetTimeLimitedItems, SuccessCallback) == 0x000014, "Member 'XsollaInventorySubsystem_GetTimeLimitedItems::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetTimeLimitedItems, ErrorCallback) == 0x000024, "Member 'XsollaInventorySubsystem_GetTimeLimitedItems::ErrorCallback' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.GetVirtualCurrencyBalance
// 0x0038 (0x0038 - 0x0000)
struct XsollaInventorySubsystem_GetVirtualCurrencyBalance final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     Platform;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4936[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FVirtualCurrencyBalanceData& CurrencyBalanceData)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4937[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaInventorySubsystem_GetVirtualCurrencyBalance) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_GetVirtualCurrencyBalance");
static_assert(sizeof(XsollaInventorySubsystem_GetVirtualCurrencyBalance) == 0x000038, "Wrong size on XsollaInventorySubsystem_GetVirtualCurrencyBalance");
static_assert(offsetof(XsollaInventorySubsystem_GetVirtualCurrencyBalance, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_GetVirtualCurrencyBalance::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetVirtualCurrencyBalance, Platform) == 0x000010, "Member 'XsollaInventorySubsystem_GetVirtualCurrencyBalance::Platform' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetVirtualCurrencyBalance, SuccessCallback) == 0x000014, "Member 'XsollaInventorySubsystem_GetVirtualCurrencyBalance::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_GetVirtualCurrencyBalance, ErrorCallback) == 0x000024, "Member 'XsollaInventorySubsystem_GetVirtualCurrencyBalance::ErrorCallback' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.Initialize
// 0x0010 (0x0010 - 0x0000)
struct XsollaInventorySubsystem_Initialize final
{
public:
	class FString                                 InProjectId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaInventorySubsystem_Initialize) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_Initialize");
static_assert(sizeof(XsollaInventorySubsystem_Initialize) == 0x000010, "Wrong size on XsollaInventorySubsystem_Initialize");
static_assert(offsetof(XsollaInventorySubsystem_Initialize, InProjectId) == 0x000000, "Member 'XsollaInventorySubsystem_Initialize::InProjectId' has a wrong offset!");

// Function XsollaInventory.XsollaInventorySubsystem.RedeemCoupon
// 0x0040 (0x0040 - 0x0000)
struct XsollaInventorySubsystem_RedeemCoupon final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CouponCode;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FInventoryRedeemedCouponData& RewardData)> SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaInventorySubsystem_RedeemCoupon) == 0x000008, "Wrong alignment on XsollaInventorySubsystem_RedeemCoupon");
static_assert(sizeof(XsollaInventorySubsystem_RedeemCoupon) == 0x000040, "Wrong size on XsollaInventorySubsystem_RedeemCoupon");
static_assert(offsetof(XsollaInventorySubsystem_RedeemCoupon, AuthToken) == 0x000000, "Member 'XsollaInventorySubsystem_RedeemCoupon::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_RedeemCoupon, CouponCode) == 0x000010, "Member 'XsollaInventorySubsystem_RedeemCoupon::CouponCode' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_RedeemCoupon, SuccessCallback) == 0x000020, "Member 'XsollaInventorySubsystem_RedeemCoupon::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaInventorySubsystem_RedeemCoupon, ErrorCallback) == 0x000030, "Member 'XsollaInventorySubsystem_RedeemCoupon::ErrorCallback' has a wrong offset!");

}

