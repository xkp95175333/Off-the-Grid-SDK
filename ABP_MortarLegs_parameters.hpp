#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_MortarLegs

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function ABP_MortarLegs.ABP_MortarLegs_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_MortarLegs_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_Aiming_Correction");
static_assert(sizeof(ABP_MortarLegs_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_MortarLegs_C_Aiming_Correction");
static_assert(offsetof(ABP_MortarLegs_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_MortarLegs_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_MortarLegs_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_AnimGraph");
static_assert(sizeof(ABP_MortarLegs_C_AnimGraph) == 0x000010, "Wrong size on ABP_MortarLegs_C_AnimGraph");
static_assert(offsetof(ABP_MortarLegs_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_MortarLegs_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_MortarLegs_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_MortarLegs_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_MortarLegs_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_MortarLegs_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_MortarLegs_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.CheckForExistingTags
// 0x0030 (0x0030 - 0x0000)
struct ABP_MortarLegs_C_CheckForExistingTags final
{
public:
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F3F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_CheckForExistingTags) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_CheckForExistingTags");
static_assert(sizeof(ABP_MortarLegs_C_CheckForExistingTags) == 0x000030, "Wrong size on ABP_MortarLegs_C_CheckForExistingTags");
static_assert(offsetof(ABP_MortarLegs_C_CheckForExistingTags, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000000, "Member 'ABP_MortarLegs_C_CheckForExistingTags::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_CheckForExistingTags, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000010, "Member 'ABP_MortarLegs_C_CheckForExistingTags::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_CheckForExistingTags, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000018, "Member 'ABP_MortarLegs_C_CheckForExistingTags::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_CheckForExistingTags, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000028, "Member 'ABP_MortarLegs_C_CheckForExistingTags::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_MortarLegs_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_MortarLegs_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_MortarLegs_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_MortarLegs_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_MortarLegs_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_MortarLegs_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_MortarLegs_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_MortarLegs_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_MortarLegs_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_MortarLegs_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_MortarLegs_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_MortarLegs_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_MortarLegs_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_MortarLegs_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_MortarLegs_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_MortarLegs_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.ExecuteUbergraph_ABP_MortarLegs
// 0x0100 (0x0100 - 0x0000)
struct ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_5;                          // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F40[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_CustomEvent_Tag_4;                          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F41[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F42[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_CustomEvent_Tag_3;                          // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F43[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x006C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_2;                          // 0x0074(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x007C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_1;                          // 0x008C(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0094(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F44[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue; // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F45[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_2; // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F46[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x00D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag;                            // 0x00E0(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_6;                          // 0x00F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_FullBodyAbilityOutBlendTime_ImplicitCast; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs");
static_assert(sizeof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs) == 0x000100, "Wrong size on ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, EntryPoint) == 0x000000, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_5) == 0x000004, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_5' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, Temp_struct_Variable) == 0x00001C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, Temp_struct_Variable_1) == 0x000024, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_BooleanOR_ReturnValue) == 0x00002E, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_4) == 0x000030, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_4' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate_1) == 0x00003C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_BooleanAND_ReturnValue_1) == 0x00004D, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_3) == 0x000050, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_3' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000058, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000059, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00005A, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate_2) == 0x00005C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, Temp_struct_Variable_2) == 0x00006C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_2) == 0x000074, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate_3) == 0x00007C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_1) == 0x00008C, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate_4) == 0x000094, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue) == 0x0000A8, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1) == 0x0000B0, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_IsValid_ReturnValue_1) == 0x0000B9, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_2) == 0x0000C0, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_IsValid_ReturnValue_2) == 0x0000C8, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_IsValid_ReturnValue_3) == 0x0000C9, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_Event_DeltaTimeX) == 0x0000CC, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000D0, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag) == 0x0000E0, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000E8, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_CustomEvent_Tag_6) == 0x0000F0, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_CustomEvent_Tag_6' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs, K2Node_VariableSet_FullBodyAbilityOutBlendTime_ImplicitCast) == 0x0000F8, "Member 'ABP_MortarLegs_C_ExecuteUbergraph_ABP_MortarLegs::K2Node_VariableSet_FullBodyAbilityOutBlendTime_ImplicitCast' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_MortarLegs_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        AimYaw;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimPitch;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_Aiming");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_MortarLegs_C_FullBody_Aiming");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_Aiming, AimYaw) == 0x000010, "Member 'ABP_MortarLegs_C_FullBody_Aiming::AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_Aiming, AimPitch) == 0x000018, "Member 'ABP_MortarLegs_C_FullBody_Aiming::AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_MortarLegs_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_CycleState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_CycleState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_FallLandState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_FallLandState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_IdleState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_IdleState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_PivotState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_PivotState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_StartState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_StartState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBody_StopState");
static_assert(sizeof(ABP_MortarLegs_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBody_StopState");
static_assert(offsetof(ABP_MortarLegs_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_MortarLegs_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_FullBodyAdditives");
static_assert(sizeof(ABP_MortarLegs_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_MortarLegs_C_FullBodyAdditives");
static_assert(offsetof(ABP_MortarLegs_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_MortarLegs_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.GetCharacter
// 0x0018 (0x0018 - 0x0000)
struct ABP_MortarLegs_C_GetCharacter final
{
public:
	class AGzPlayerCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_GetCharacter) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_GetCharacter");
static_assert(sizeof(ABP_MortarLegs_C_GetCharacter) == 0x000018, "Wrong size on ABP_MortarLegs_C_GetCharacter");
static_assert(offsetof(ABP_MortarLegs_C_GetCharacter, ReturnValue) == 0x000000, "Member 'ABP_MortarLegs_C_GetCharacter::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_GetCharacter, K2Node_DynamicCast_AsGz_Player_Character) == 0x000008, "Member 'ABP_MortarLegs_C_GetCharacter::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_GetCharacter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_MortarLegs_C_GetCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.GetMainABP
// 0x0018 (0x0018 - 0x0000)
struct ABP_MortarLegs_C_GetMainABP final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_GetMainABP) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_GetMainABP");
static_assert(sizeof(ABP_MortarLegs_C_GetMainABP) == 0x000018, "Wrong size on ABP_MortarLegs_C_GetMainABP");
static_assert(offsetof(ABP_MortarLegs_C_GetMainABP, ReturnValue) == 0x000000, "Member 'ABP_MortarLegs_C_GetMainABP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_GetMainABP, K2Node_DynamicCast_AsABP_Human) == 0x000008, "Member 'ABP_MortarLegs_C_GetMainABP::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_GetMainABP, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_MortarLegs_C_GetMainABP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_KneeSlide_State");
static_assert(sizeof(ABP_MortarLegs_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_MortarLegs_C_KneeSlide_State");
static_assert(offsetof(ABP_MortarLegs_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_MortarLegs_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_Limbless_State");
static_assert(sizeof(ABP_MortarLegs_C_Limbless_State) == 0x000010, "Wrong size on ABP_MortarLegs_C_Limbless_State");
static_assert(offsetof(ABP_MortarLegs_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_MortarLegs_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_MortarLegs_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_NPC_CoverState");
static_assert(sizeof(ABP_MortarLegs_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_MortarLegs_C_NPC_CoverState");
static_assert(offsetof(ABP_MortarLegs_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_MortarLegs_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnEndEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_MortarLegs_C_OnEndEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_OnEndEntry) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_OnEndEntry");
static_assert(sizeof(ABP_MortarLegs_C_OnEndEntry) == 0x000020, "Wrong size on ABP_MortarLegs_C_OnEndEntry");
static_assert(offsetof(ABP_MortarLegs_C_OnEndEntry, Context) == 0x000000, "Member 'ABP_MortarLegs_C_OnEndEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_OnEndEntry, Node) == 0x000010, "Member 'ABP_MortarLegs_C_OnEndEntry::Node' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnHideEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_MortarLegs_C_OnHideEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_OnHideEntry) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_OnHideEntry");
static_assert(sizeof(ABP_MortarLegs_C_OnHideEntry) == 0x000020, "Wrong size on ABP_MortarLegs_C_OnHideEntry");
static_assert(offsetof(ABP_MortarLegs_C_OnHideEntry, Context) == 0x000000, "Member 'ABP_MortarLegs_C_OnHideEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_OnHideEntry, Node) == 0x000010, "Member 'ABP_MortarLegs_C_OnHideEntry::Node' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnIdleEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_MortarLegs_C_OnIdleEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_OnIdleEntry) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_OnIdleEntry");
static_assert(sizeof(ABP_MortarLegs_C_OnIdleEntry) == 0x000020, "Wrong size on ABP_MortarLegs_C_OnIdleEntry");
static_assert(offsetof(ABP_MortarLegs_C_OnIdleEntry, Context) == 0x000000, "Member 'ABP_MortarLegs_C_OnIdleEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_OnIdleEntry, Node) == 0x000010, "Member 'ABP_MortarLegs_C_OnIdleEntry::Node' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnShootEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_MortarLegs_C_OnShootEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_MortarLegs_C_OnShootEntry) == 0x000008, "Wrong alignment on ABP_MortarLegs_C_OnShootEntry");
static_assert(sizeof(ABP_MortarLegs_C_OnShootEntry) == 0x000020, "Wrong size on ABP_MortarLegs_C_OnShootEntry");
static_assert(offsetof(ABP_MortarLegs_C_OnShootEntry, Context) == 0x000000, "Member 'ABP_MortarLegs_C_OnShootEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_MortarLegs_C_OnShootEntry, Node) == 0x000010, "Member 'ABP_MortarLegs_C_OnShootEntry::Node' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagAdded_49AF8B32408B2809226D06B1FC07C109
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109");
static_assert(sizeof(ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109");
static_assert(offsetof(ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagAdded_49AF8B32408B2809226D06B1FC07C109::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4");
static_assert(sizeof(ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4");
static_assert(offsetof(ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagAdded_72DF56D14AB7349F826C9FBF63AB42E4::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA");
static_assert(sizeof(ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA");
static_assert(offsetof(ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagAdded_73E49B0F4D7A0B431B9AF7B061243FEA::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagRemoved_49AF8B32408B2809226D06B1FC07C109
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109");
static_assert(sizeof(ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109");
static_assert(offsetof(ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagRemoved_49AF8B32408B2809226D06B1FC07C109::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4");
static_assert(sizeof(ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4");
static_assert(offsetof(ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagRemoved_72DF56D14AB7349F826C9FBF63AB42E4::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA");
static_assert(sizeof(ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA) == 0x000008, "Wrong size on ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA");
static_assert(offsetof(ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_OnTagRemoved_73E49B0F4D7A0B431B9AF7B061243FEA::Tag' has a wrong offset!");

// Function ABP_MortarLegs.ABP_MortarLegs_C.TrigggerTagEvent
// 0x0008 (0x0008 - 0x0000)
struct ABP_MortarLegs_C_TrigggerTagEvent final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MortarLegs_C_TrigggerTagEvent) == 0x000004, "Wrong alignment on ABP_MortarLegs_C_TrigggerTagEvent");
static_assert(sizeof(ABP_MortarLegs_C_TrigggerTagEvent) == 0x000008, "Wrong size on ABP_MortarLegs_C_TrigggerTagEvent");
static_assert(offsetof(ABP_MortarLegs_C_TrigggerTagEvent, Tag) == 0x000000, "Member 'ABP_MortarLegs_C_TrigggerTagEvent::Tag' has a wrong offset!");

}

