#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HealthArmorBars_DOS

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "WBP_ViewTargetPanel_Health_classes.hpp"
#include "G01_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HealthArmorBars_DOS.WBP_HealthArmorBars_DOS_C
// 0x0108 (0x0450 - 0x0348)
class UWBP_HealthArmorBars_DOS_C final : public UWBP_ViewTargetPanel_Health_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_HealthArmorBars_DOS_C;          // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CollapsedDamageTaken;                              // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ArmorBarEnd_Image;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ArmorBarStart_Image;                               // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CharacterPanel_StackedProgressBar_DOS_C* Bar_Armor;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CharacterPanel_StackedProgressBar_DOS_C* Bar_Health;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           HealthArmorBars_VerticalBox;                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HealthBarEnd_Image;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HealthBarStart_Image;                              // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAttributeChanged;                                // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AGzBaseCharacter*                       ViewTargetCharacter;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskGameplayTagAddedRemoved*    KnockdownListenTask;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayAttribute>             ToListenAttributes;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UGzAsyncTaskAttributeChanged*           AttributeListenTask;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzTeam*                                CurrentTeam;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentArmor;                                      // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D0C[0x4];                                     // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentHealth;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLock;                                             // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHealthRegen;                                     // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D0D[0x6];                                     // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x03E8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UGzGA_Consume*                          Consume_Ability;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UGameplayEffect*>                End_Effects;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           HealthRegenTimer;                                  // 0x0438(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TargetHealth;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHealth;                                         // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Blocking_Tag_Change(bool Param_bLock);
	void Destruct();
	double EstimateRegenValue(const TArray<class UGameplayEffect*>& Effects, const struct FGameplayAttribute& BaseAttribute, const struct FGameplayAttribute& MaxAttribute);
	void ExecuteUbergraph_WBP_HealthArmorBars_DOS(int32 EntryPoint);
	void GetIndexInTeam(class AGzTeam* Team, int32* OutputPin);
	void JetpackDamageVisibilityCheck();
	void OnArmorChanged(float NewValue, float OldValue);
	void OnAttributeChanged_4F031F774841FFD00A0C299E89399955(const struct FGameplayAttribute& Param_Attribute, float NewValue, float OldValue);
	void OnAttributeChanged__DelegateSignature(const struct FGameplayAttribute& Param_Attribute, double Fraction);
	void OnDamageReceived(class AActor* Damager, EGzDamageIndicatorType Type, float Damage, bool bCrit);
	void OnHealthChanged(float NewValue, float OldValue);
	void OnReady_47DFD12B4462B4C1B4BE06841DD13C28(class AGzGameModeSubsystem* Subsystem);
	void OnRegenEnd(class UGzGA_Consume* ConsumeAbility, const TArray<class UGameplayEffect*>& EndEffects);
	void OnRegenStart(class UGzGA_Consume* ConsumeAbility, const TArray<class UGameplayEffect*>& EndEffects);
	void OnTagAdded_0A81212E4B67B58A982165BC5CB35257(const struct FGameplayTag& Tag);
	void OnTagRemoved_0A81212E4B67B58A982165BC5CB35257(const struct FGameplayTag& Tag);
	void OnViewTargetChanged(class APawn* ViewTarget);
	void ReceiveBindEvents(class APawn* NewViewTarget);
	void ReceiveUnbindEvents(class APawn* OldViewTarget);
	void RegenHealthAnim();
	void SetupInitialState();
	void SetViewTarget(class UObject* NewViewTarget, class AGzBaseCharacter** ViewTarget);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HealthArmorBars_DOS_C">();
	}
	static class UWBP_HealthArmorBars_DOS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HealthArmorBars_DOS_C>();
	}
};
static_assert(alignof(UWBP_HealthArmorBars_DOS_C) == 0x000008, "Wrong alignment on UWBP_HealthArmorBars_DOS_C");
static_assert(sizeof(UWBP_HealthArmorBars_DOS_C) == 0x000450, "Wrong size on UWBP_HealthArmorBars_DOS_C");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, UberGraphFrame_WBP_HealthArmorBars_DOS_C) == 0x000348, "Member 'UWBP_HealthArmorBars_DOS_C::UberGraphFrame_WBP_HealthArmorBars_DOS_C' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, CollapsedDamageTaken) == 0x000350, "Member 'UWBP_HealthArmorBars_DOS_C::CollapsedDamageTaken' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, ArmorBarEnd_Image) == 0x000358, "Member 'UWBP_HealthArmorBars_DOS_C::ArmorBarEnd_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, ArmorBarStart_Image) == 0x000360, "Member 'UWBP_HealthArmorBars_DOS_C::ArmorBarStart_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, Bar_Armor) == 0x000368, "Member 'UWBP_HealthArmorBars_DOS_C::Bar_Armor' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, Bar_Health) == 0x000370, "Member 'UWBP_HealthArmorBars_DOS_C::Bar_Health' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, HealthArmorBars_VerticalBox) == 0x000378, "Member 'UWBP_HealthArmorBars_DOS_C::HealthArmorBars_VerticalBox' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, HealthBarEnd_Image) == 0x000380, "Member 'UWBP_HealthArmorBars_DOS_C::HealthBarEnd_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, HealthBarStart_Image) == 0x000388, "Member 'UWBP_HealthArmorBars_DOS_C::HealthBarStart_Image' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, OnAttributeChanged) == 0x000390, "Member 'UWBP_HealthArmorBars_DOS_C::OnAttributeChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, ViewTargetCharacter) == 0x0003A0, "Member 'UWBP_HealthArmorBars_DOS_C::ViewTargetCharacter' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, KnockdownListenTask) == 0x0003A8, "Member 'UWBP_HealthArmorBars_DOS_C::KnockdownListenTask' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, ToListenAttributes) == 0x0003B0, "Member 'UWBP_HealthArmorBars_DOS_C::ToListenAttributes' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, AttributeListenTask) == 0x0003C0, "Member 'UWBP_HealthArmorBars_DOS_C::AttributeListenTask' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, CurrentTeam) == 0x0003C8, "Member 'UWBP_HealthArmorBars_DOS_C::CurrentTeam' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, CurrentArmor) == 0x0003D0, "Member 'UWBP_HealthArmorBars_DOS_C::CurrentArmor' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, CurrentHealth) == 0x0003D8, "Member 'UWBP_HealthArmorBars_DOS_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, bLock) == 0x0003E0, "Member 'UWBP_HealthArmorBars_DOS_C::bLock' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, IsHealthRegen) == 0x0003E1, "Member 'UWBP_HealthArmorBars_DOS_C::IsHealthRegen' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, Attribute) == 0x0003E8, "Member 'UWBP_HealthArmorBars_DOS_C::Attribute' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, Consume_Ability) == 0x000420, "Member 'UWBP_HealthArmorBars_DOS_C::Consume_Ability' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, End_Effects) == 0x000428, "Member 'UWBP_HealthArmorBars_DOS_C::End_Effects' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, HealthRegenTimer) == 0x000438, "Member 'UWBP_HealthArmorBars_DOS_C::HealthRegenTimer' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, TargetHealth) == 0x000440, "Member 'UWBP_HealthArmorBars_DOS_C::TargetHealth' has a wrong offset!");
static_assert(offsetof(UWBP_HealthArmorBars_DOS_C, bIsHealth) == 0x000448, "Member 'UWBP_HealthArmorBars_DOS_C::bIsHealth' has a wrong offset!");

}

