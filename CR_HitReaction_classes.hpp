#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_HitReaction

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass CR_HitReaction.CR_HitReaction_C
// 0x0200 (0x0CA8 - 0x0AA8)
class UCR_HitReaction_C final : public UControlRig
{
public:
	struct FHitDirectionInfo                      Head_Results_Hit;                                  // 0x0AA8(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Body_Results_Hit;                                  // 0x0AD8(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Arm_L_Results_Hit;                                 // 0x0B08(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Arm_R_Results_Hit;                                 // 0x0B38(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	bool                                          Is_ADS;                                            // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1E3F[0x7];                                     // 0x0B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Smooth_Head_Weight;                                // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Smooth_Body_Weight;                                // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Smooth_ArmR_Weight;                                // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Smooth_ArmL_Weight;                                // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShot_Head_Intensity;                           // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShot_Body_Intensity;                           // 0x0B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShot_ArmR_Intensity;                           // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShot_ArmL_Intensity;                           // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyShot_Head_Intensity;                           // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyShot_Body_Intensity;                           // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyShot_ArmR_Intensity;                           // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyShot_ArmL_Intensity;                           // 0x0BAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotL_Head_Intensity;                           // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotL_Body_Intensity;                           // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotL_ArmR_Intensity;                           // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotL_ArmL_Intensity;                           // 0x0BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotR_Head_Intensity;                           // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotR_Body_Intensity;                           // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotR_ArmR_Intensity;                           // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmShotR_ArmL_Intensity;                           // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ImpactStrength;                                    // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VectorAngle;                                       // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitDirectionInfo                      Head_Results_Shock;                                // 0x0BE0(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Body_Results_Shock;                                // 0x0C10(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Arm_L_Results_Shock;                               // 0x0C40(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FHitDirectionInfo                      Arm_R_Results_Shock;                               // 0x0C70(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	double                                        WeaponImpactModifier;                              // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_HitReaction_C">();
	}
	static class UCR_HitReaction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_HitReaction_C>();
	}
};
static_assert(alignof(UCR_HitReaction_C) == 0x000008, "Wrong alignment on UCR_HitReaction_C");
static_assert(sizeof(UCR_HitReaction_C) == 0x000CA8, "Wrong size on UCR_HitReaction_C");
static_assert(offsetof(UCR_HitReaction_C, Head_Results_Hit) == 0x000AA8, "Member 'UCR_HitReaction_C::Head_Results_Hit' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Body_Results_Hit) == 0x000AD8, "Member 'UCR_HitReaction_C::Body_Results_Hit' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Arm_L_Results_Hit) == 0x000B08, "Member 'UCR_HitReaction_C::Arm_L_Results_Hit' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Arm_R_Results_Hit) == 0x000B38, "Member 'UCR_HitReaction_C::Arm_R_Results_Hit' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Is_ADS) == 0x000B68, "Member 'UCR_HitReaction_C::Is_ADS' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Smooth_Head_Weight) == 0x000B70, "Member 'UCR_HitReaction_C::Smooth_Head_Weight' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Smooth_Body_Weight) == 0x000B78, "Member 'UCR_HitReaction_C::Smooth_Body_Weight' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Smooth_ArmR_Weight) == 0x000B80, "Member 'UCR_HitReaction_C::Smooth_ArmR_Weight' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Smooth_ArmL_Weight) == 0x000B88, "Member 'UCR_HitReaction_C::Smooth_ArmL_Weight' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, HeadShot_Head_Intensity) == 0x000B90, "Member 'UCR_HitReaction_C::HeadShot_Head_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, HeadShot_Body_Intensity) == 0x000B94, "Member 'UCR_HitReaction_C::HeadShot_Body_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, HeadShot_ArmR_Intensity) == 0x000B98, "Member 'UCR_HitReaction_C::HeadShot_ArmR_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, HeadShot_ArmL_Intensity) == 0x000B9C, "Member 'UCR_HitReaction_C::HeadShot_ArmL_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, BodyShot_Head_Intensity) == 0x000BA0, "Member 'UCR_HitReaction_C::BodyShot_Head_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, BodyShot_Body_Intensity) == 0x000BA4, "Member 'UCR_HitReaction_C::BodyShot_Body_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, BodyShot_ArmR_Intensity) == 0x000BA8, "Member 'UCR_HitReaction_C::BodyShot_ArmR_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, BodyShot_ArmL_Intensity) == 0x000BAC, "Member 'UCR_HitReaction_C::BodyShot_ArmL_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotL_Head_Intensity) == 0x000BB0, "Member 'UCR_HitReaction_C::ArmShotL_Head_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotL_Body_Intensity) == 0x000BB4, "Member 'UCR_HitReaction_C::ArmShotL_Body_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotL_ArmR_Intensity) == 0x000BB8, "Member 'UCR_HitReaction_C::ArmShotL_ArmR_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotL_ArmL_Intensity) == 0x000BBC, "Member 'UCR_HitReaction_C::ArmShotL_ArmL_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotR_Head_Intensity) == 0x000BC0, "Member 'UCR_HitReaction_C::ArmShotR_Head_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotR_Body_Intensity) == 0x000BC4, "Member 'UCR_HitReaction_C::ArmShotR_Body_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotR_ArmR_Intensity) == 0x000BC8, "Member 'UCR_HitReaction_C::ArmShotR_ArmR_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ArmShotR_ArmL_Intensity) == 0x000BCC, "Member 'UCR_HitReaction_C::ArmShotR_ArmL_Intensity' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, ImpactStrength) == 0x000BD0, "Member 'UCR_HitReaction_C::ImpactStrength' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, VectorAngle) == 0x000BD8, "Member 'UCR_HitReaction_C::VectorAngle' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Head_Results_Shock) == 0x000BE0, "Member 'UCR_HitReaction_C::Head_Results_Shock' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Body_Results_Shock) == 0x000C10, "Member 'UCR_HitReaction_C::Body_Results_Shock' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Arm_L_Results_Shock) == 0x000C40, "Member 'UCR_HitReaction_C::Arm_L_Results_Shock' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, Arm_R_Results_Shock) == 0x000C70, "Member 'UCR_HitReaction_C::Arm_R_Results_Shock' has a wrong offset!");
static_assert(offsetof(UCR_HitReaction_C, WeaponImpactModifier) == 0x000CA0, "Member 'UCR_HitReaction_C::WeaponImpactModifier' has a wrong offset!");

}

