#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_HEX_Antenna_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_HEX_Antenna_01_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_HEX_Antenna_01.ABP_HEX_Antenna_01_C
// 0x0370 (0x06E0 - 0x0370)
class UABP_HEX_Antenna_01_C final : public UAnimInstance
{
public:
	uint8                                         Pad_598D[0x8];                                     // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_HEX_Antenna_01::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0390(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0428(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0450(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0498(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04B8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0500(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0520(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0568(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0588(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x05C8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x05E8(0x00C8)()
	bool                                          IsActive;                                          // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPaused;                                          // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_598E[0x6];                                     // 0x06B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PF_OTP_Antenna_C*                   Antenna;                                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Play_Rate;                                         // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_598F[0x4];                                     // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PauseSpeed;                                        // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinSpeed;                                          // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnStateEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void ExecuteUbergraph_ABP_HEX_Antenna_01(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Antenna_01_AnimGraphNode_TransitionResult_D0E01B9545BCF676F024A19B362BE7BF();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_HEX_Antenna_01_AnimGraphNode_SequencePlayer_9A4B7B6143D0907FCEB3AFAC482CF0D1();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_HEX_Antenna_01_C">();
	}
	static class UABP_HEX_Antenna_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_HEX_Antenna_01_C>();
	}
};
static_assert(alignof(UABP_HEX_Antenna_01_C) == 0x000010, "Wrong alignment on UABP_HEX_Antenna_01_C");
static_assert(sizeof(UABP_HEX_Antenna_01_C) == 0x0006E0, "Wrong size on UABP_HEX_Antenna_01_C");
static_assert(offsetof(UABP_HEX_Antenna_01_C, UberGraphFrame) == 0x000370, "Member 'UABP_HEX_Antenna_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_HEX_Antenna_01_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UABP_HEX_Antenna_01_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UABP_HEX_Antenna_01_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_Root) == 0x000390, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_TransitionResult_3) == 0x0003B0, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_TransitionResult_2) == 0x0003D8, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_TransitionResult_1) == 0x000400, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_TransitionResult) == 0x000428, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_SequencePlayer_2) == 0x000450, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_StateResult_3) == 0x000498, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_SequencePlayer_1) == 0x0004B8, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_StateResult_2) == 0x000500, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_SequencePlayer) == 0x000520, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_StateResult_1) == 0x000568, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_SequenceEvaluator) == 0x000588, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_StateResult) == 0x0005C8, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, AnimGraphNode_StateMachine) == 0x0005E8, "Member 'UABP_HEX_Antenna_01_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, IsActive) == 0x0006B0, "Member 'UABP_HEX_Antenna_01_C::IsActive' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, IsPaused) == 0x0006B1, "Member 'UABP_HEX_Antenna_01_C::IsPaused' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, Antenna) == 0x0006B8, "Member 'UABP_HEX_Antenna_01_C::Antenna' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, Play_Rate) == 0x0006C0, "Member 'UABP_HEX_Antenna_01_C::Play_Rate' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, PauseSpeed) == 0x0006C8, "Member 'UABP_HEX_Antenna_01_C::PauseSpeed' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, MaxSpeed) == 0x0006D0, "Member 'UABP_HEX_Antenna_01_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UABP_HEX_Antenna_01_C, MinSpeed) == 0x0006D8, "Member 'UABP_HEX_Antenna_01_C::MinSpeed' has a wrong offset!");

}

