#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyNavRoute_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.UserConstructionScript
// 0x0080 (0x0080 - 0x0000)
struct BP_SkyNavRoute_Base_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0010)()
};
static_assert(alignof(BP_SkyNavRoute_Base_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_UserConstructionScript");
static_assert(sizeof(BP_SkyNavRoute_Base_C_UserConstructionScript) == 0x000080, "Wrong size on BP_SkyNavRoute_Base_C_UserConstructionScript");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, CallFunc_IsWithEditor_ReturnValue) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000060, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UserConstructionScript, CallFunc_Format_ReturnValue) == 0x000070, "Member 'BP_SkyNavRoute_Base_C_UserConstructionScript::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.UpdateSplinePointsDetails
// 0x02D8 (0x02D8 - 0x0000)
struct BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails final
{
public:
	struct FRotator                               L_GateRot;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_GateLoc;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable;                              // 0x0040(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA6[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA7[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA8[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BA9[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtSplinePoint_ReturnValue;    // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDirectionAtSplinePoint_ReturnValue_1;  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtSplinePoint_ReturnValue_2;  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_2;       // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAA[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue_1;            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAB[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAC[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast_1;              // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails");
static_assert(sizeof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails) == 0x0002D8, "Wrong size on BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, L_GateRot) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::L_GateRot' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, L_GateLoc) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::L_GateLoc' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, Temp_struct_Variable) == 0x000040, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, Temp_int_Variable) == 0x000058, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Subtract_IntInt_ReturnValue) == 0x000060, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Add_IntInt_ReturnValue_2) == 0x000064, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_X) == 0x000068, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Y) == 0x000070, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Z) == 0x000078, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000080, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_IsValid_ReturnValue) == 0x000094, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Less_IntInt_ReturnValue) == 0x000095, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000098, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_X_1) == 0x0000C8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Y_1) == 0x0000D0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Z_1) == 0x0000D8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Vector_Distance_ReturnValue) == 0x0000E0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_FTrunc_ReturnValue) == 0x0000F0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_FTrunc_ReturnValue_1) == 0x0000F4, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000F8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000100, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000108, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000120, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Roll) == 0x000124, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Pitch) == 0x000128, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Yaw) == 0x00012C, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_MakeVector_ReturnValue) == 0x000130, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetDirectionAtSplinePoint_ReturnValue) == 0x000148, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetDirectionAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000160, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000178, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetDirectionAtSplinePoint_ReturnValue_1) == 0x000190, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetDirectionAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetDirectionAtSplinePoint_ReturnValue_2) == 0x0001A8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetDirectionAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0001C0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_VectorToRotator_ReturnValue_2) == 0x0001D8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_VectorToRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x0001F0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000208, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_X_2) == 0x000220, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Y_2) == 0x000228, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Z_2) == 0x000230, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Roll_1) == 0x000238, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Pitch_1) == 0x00023C, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakRotator_Yaw_1) == 0x000240, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000244, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x000248, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000260, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Vector_Distance_ReturnValue_1) == 0x000268, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000270, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_FTrunc_ReturnValue_2) == 0x000274, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000278, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_X_3) == 0x000280, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Y_3) == 0x000288, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_BreakVector_Z_3) == 0x000290, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000298, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_FTrunc_ReturnValue_3) == 0x0002A0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x0002A8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_MakeVector_ReturnValue_1) == 0x0002B0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_MakeVector_Z_ImplicitCast) == 0x0002C8, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails, CallFunc_MakeVector_Z_ImplicitCast_1) == 0x0002D0, "Member 'BP_SkyNavRoute_Base_C_UpdateSplinePointsDetails::CallFunc_MakeVector_Z_ImplicitCast_1' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.SetTrajectoryValuesToGate
// 0x01D0 (0x01D0 - 0x0000)
struct BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate final
{
public:
	class ABP_SkyNavGate_C*                       GateActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTangentAtSplinePoint_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAE[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtSplinePoint_ReturnValue_1;    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BAF[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return;     // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB0[0x8];                                     // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return_1;   // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate");
static_assert(sizeof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate) == 0x0001D0, "Wrong size on BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, GateActor) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::GateActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_GetTangentAtSplinePoint_ReturnValue) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_GetTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000048, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000049, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00004C, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_GetTangentAtSplinePoint_ReturnValue_1) == 0x000050, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_GetTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_CalculateSplinePointTransform_Return) == 0x000070, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_CalculateSplinePointTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_CalculateSplinePointTransform_Return_1) == 0x000120, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_CalculateSplinePointTransform_Return_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Location_1) == 0x000180, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Rotation_1) == 0x000198, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate, CallFunc_BreakTransform_Scale_1) == 0x0001B0, "Member 'BP_SkyNavRoute_Base_C_SetTrajectoryValuesToGate::CallFunc_BreakTransform_Scale_1' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.SetActive
// 0x0010 (0x0010 - 0x0000)
struct BP_SkyNavRoute_Base_C_SetActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMissionObjective*                      Objective;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_SetActive) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_SetActive");
static_assert(sizeof(BP_SkyNavRoute_Base_C_SetActive) == 0x000010, "Wrong size on BP_SkyNavRoute_Base_C_SetActive");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetActive, bActive) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_SetActive::bActive' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_SetActive, Objective) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_SetActive::Objective' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.RouteActivation_SC
// 0x0001 (0x0001 - 0x0000)
struct BP_SkyNavRoute_Base_C_RouteActivation_SC final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_RouteActivation_SC) == 0x000001, "Wrong alignment on BP_SkyNavRoute_Base_C_RouteActivation_SC");
static_assert(sizeof(BP_SkyNavRoute_Base_C_RouteActivation_SC) == 0x000001, "Wrong size on BP_SkyNavRoute_Base_C_RouteActivation_SC");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RouteActivation_SC, IsActive) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_RouteActivation_SC::IsActive' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.RotateStartEffectTowardsFirstGate
// 0x0220 (0x0220 - 0x0000)
struct BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB2[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return;     // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB3[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0120(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate");
static_assert(sizeof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate) == 0x000220, "Wrong size on BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_CalculateSplinePointTransform_Return) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_CalculateSplinePointTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000C8, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakRotator_Roll) == 0x0000E0, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakRotator_Pitch) == 0x0000E4, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_BreakRotator_Yaw) == 0x0000E8, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_MakeRotator_ReturnValue) == 0x0000F0, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_ComposeRotators_ReturnValue) == 0x000108, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000120, "Member 'BP_SkyNavRoute_Base_C_RotateStartEffectTowardsFirstGate::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.OnPlayerFlyThrough__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature final
{
public:
	int32                                         FlyGateSplinePoint;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature) == 0x000004, "Wrong alignment on BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature, FlyGateSplinePoint) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature::FlyGateSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature, PlayerId) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_OnPlayerFlyThrough__DelegateSignature::PlayerId' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.OnGatePendingDestroyStarted
// 0x0038 (0x0038 - 0x0000)
struct BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted");
static_assert(sizeof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted) == 0x000038, "Wrong size on BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, Duration) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::Duration' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, Temp_int_Variable) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted, CallFunc_FMin_ReturnValue) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_OnGatePendingDestroyStarted::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.OnGateConsumedEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavRoute_Base_C_OnGateConsumedEvent final
{
public:
	class ABP_SkyNavGate_C*                       GateRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_OnGateConsumedEvent) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_OnGateConsumedEvent");
static_assert(sizeof(BP_SkyNavRoute_Base_C_OnGateConsumedEvent) == 0x000008, "Wrong size on BP_SkyNavRoute_Base_C_OnGateConsumedEvent");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGateConsumedEvent, GateRef) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_OnGateConsumedEvent::GateRef' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.OnGateConsumed__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature final
{
public:
	int32                                         GateIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature) == 0x000004, "Wrong alignment on BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature) == 0x000004, "Wrong size on BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature, GateIndex) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_OnGateConsumed__DelegateSignature::GateIndex' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.OnEnoughGateConsumptionStarted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature final
{
public:
	double                                        ShortestDuration;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature, ShortestDuration) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_OnEnoughGateConsumptionStarted__DelegateSignature::ShortestDuration' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.GetLocalPlayerID
// 0x0030 (0x0030 - 0x0000)
struct BP_SkyNavRoute_Base_C_GetLocalPlayerID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerController*                    CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB7[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_GetLocalPlayerID) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_GetLocalPlayerID");
static_assert(sizeof(BP_SkyNavRoute_Base_C_GetLocalPlayerID) == 0x000030, "Wrong size on BP_SkyNavRoute_Base_C_GetLocalPlayerID");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, PlayerId) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_GetLocalPlayerID, CallFunc_GetPlayerId_ReturnValue) == 0x00002C, "Member 'BP_SkyNavRoute_Base_C_GetLocalPlayerID::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.ExecuteUbergraph_BP_SkyNavRoute_Base
// 0x0428 (0x0428 - 0x0000)
struct BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewVisibility;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BB9[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBA[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBB[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character;          // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBC[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue;     // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLocalPlayerID_PlayerID;                // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBD[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBE[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     K2Node_DynamicCast_AsGz_Player_Character_1;        // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BBF[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerState*                         CallFunc_GetPersistentPlayerState_ReturnValue_1;   // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC0[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerId_ReturnValue_1;                // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC1[0x2];                                     // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLocalPlayerID_PlayerID_1;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsActive;                       // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC2[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_FlyGateSplinePoint;             // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PlayerID;                       // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CurrentProgress;                // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC3[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC4[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC5[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC6[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC7[0x3];                                     // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC8[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item_1;                         // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC9[0x2];                                     // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item_2;                         // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0335(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCA[0x2];                                     // 0x0336(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0358(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0378(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0388(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCB[0x2];                                     // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCC[0x2];                                     // 0x03A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x03A4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCD[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x03B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue_1;           // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCE[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BCF[0x3];                                     // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_SkyNavGate_C* GateRef)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x03D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD0[0x7];                                     // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMissionResourceComponent*              K2Node_ComponentBoundEvent_Resource;               // 0x03E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bActive;                              // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD1[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMissionObjective*                      K2Node_Event_Objective;                            // 0x03F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD2[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(double Duration)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x0404(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 FlyGateSplinePoint, int32 PlayerId)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0414(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base");
static_assert(sizeof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base) == 0x000428, "Wrong size on BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, EntryPoint) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CustomEvent_NewVisibility) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CustomEvent_NewVisibility' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsDedicatedServer_ReturnValue) == 0x000005, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_bool_Has_Been_Initd_Variable) == 0x000120, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_DynamicCast_AsGz_Player_Character) == 0x000128, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_DynamicCast_AsGz_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetPersistentPlayerState_ReturnValue) == 0x000138, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetPersistentPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetPlayerId_ReturnValue) == 0x000140, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetLocalPlayerID_PlayerID) == 0x000144, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetLocalPlayerID_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000148, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Array_Index_Variable) == 0x00014C, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000150, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherActor) == 0x000158, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherComp) == 0x000160, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000168, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00016C, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_DynamicCast_AsGz_Player_Character_1) == 0x000170, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_DynamicCast_AsGz_Player_Character_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_DynamicCast_bSuccess_1) == 0x000178, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetMovementComponent_ReturnValue) == 0x000180, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetPersistentPlayerState_ReturnValue_1) == 0x000188, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetPersistentPlayerState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsFalling_ReturnValue) == 0x000190, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetPlayerId_ReturnValue_1) == 0x000194, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetPlayerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsFlying_ReturnValue) == 0x000198, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_BooleanOR_ReturnValue) == 0x000199, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetLocalPlayerID_PlayerID_1) == 0x00019C, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetLocalPlayerID_PlayerID_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_bool_IsClosed_Variable) == 0x0001A0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0001A1, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CustomEvent_IsActive) == 0x0001A2, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CustomEvent_IsActive' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x0001A3, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Conv_BoolToString_ReturnValue) == 0x0001A8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue) == 0x0001B8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CustomEvent_FlyGateSplinePoint) == 0x0001C8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CustomEvent_FlyGateSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CustomEvent_PlayerID) == 0x0001CC, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CustomEvent_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CustomEvent_CurrentProgress) == 0x0001D0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CustomEvent_CurrentProgress' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Get_Item) == 0x0001D8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Length_ReturnValue) == 0x0001E0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetObjectName_ReturnValue) == 0x0001E8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetDisplayName_ReturnValue) == 0x0001F8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000208, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000218, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000228, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000238, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000248, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000258, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000268, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000278, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000288, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsValid_ReturnValue) == 0x000298, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0002A0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_11) == 0x0002B0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x0002C0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_12) == 0x0002C8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Conv_IntToString_ReturnValue) == 0x0002D8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_13) == 0x0002E8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Length_ReturnValue_1) == 0x0002F8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x0002FC, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Array_Index_Variable_1) == 0x000300, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Loop_Counter_Variable) == 0x000304, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Add_IntInt_ReturnValue) == 0x000308, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Loop_Counter_Variable_1) == 0x00030C, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Array_Index_Variable_2) == 0x000310, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Get_Item_1) == 0x000318, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsValid_ReturnValue_1) == 0x000320, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Less_IntInt_ReturnValue) == 0x000321, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Add_IntInt_ReturnValue_1) == 0x000324, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Get_Item_2) == 0x000328, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_Length_ReturnValue_2) == 0x000330, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_IsValid_ReturnValue_2) == 0x000334, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Less_IntInt_ReturnValue_1) == 0x000335, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetDisplayName_ReturnValue_1) == 0x000338, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_GetObjectName_ReturnValue_1) == 0x000348, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000358, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000368, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000378, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000388, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000398, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000399, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Add_IntInt_ReturnValue_2) == 0x00039C, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x0003A0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x0003A1, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CreateDelegate_OutputDelegate) == 0x0003A4, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0003B8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Array_IsNotEmpty_ReturnValue_1) == 0x0003C0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Array_IsNotEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, Temp_int_Loop_Counter_Variable_2) == 0x0003C4, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Less_IntInt_ReturnValue_2) == 0x0003C8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_Add_IntInt_ReturnValue_3) == 0x0003CC, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x0003D0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_HasAuthority_ReturnValue) == 0x0003E0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_ComponentBoundEvent_Resource) == 0x0003E8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_ComponentBoundEvent_Resource' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_Event_bActive) == 0x0003F0, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_Event_bActive' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_Event_Objective) == 0x0003F8, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_Event_Objective' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, CallFunc_BooleanAND_ReturnValue) == 0x000400, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CreateDelegate_OutputDelegate_2) == 0x000404, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base, K2Node_CreateDelegate_OutputDelegate_3) == 0x000414, "Member 'BP_SkyNavRoute_Base_C_ExecuteUbergraph_BP_SkyNavRoute_Base::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.DispatchPlayerFlyThrough
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough final
{
public:
	int32                                         FlyGateSplinePoint;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough) == 0x000004, "Wrong alignment on BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough");
static_assert(sizeof(BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough) == 0x000008, "Wrong size on BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough");
static_assert(offsetof(BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough, FlyGateSplinePoint) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough::FlyGateSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough, PlayerId) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_DispatchPlayerFlyThrough::PlayerId' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.CheckNumberOfGates
// 0x0030 (0x0030 - 0x0000)
struct BP_SkyNavRoute_Base_C_CheckNumberOfGates final
{
public:
	int32                                         ArrayLength;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Correct;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD4[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_CheckNumberOfGates) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_CheckNumberOfGates");
static_assert(sizeof(BP_SkyNavRoute_Base_C_CheckNumberOfGates) == 0x000030, "Wrong size on BP_SkyNavRoute_Base_C_CheckNumberOfGates");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, ArrayLength) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::ArrayLength' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, Correct) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::Correct' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CheckNumberOfGates, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_SkyNavRoute_Base_C_CheckNumberOfGates::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.ChangeMarkerVisibility_CO
// 0x0001 (0x0001 - 0x0000)
struct BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO) == 0x000001, "Wrong alignment on BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO");
static_assert(sizeof(BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO) == 0x000001, "Wrong size on BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO, NewVisibility) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_ChangeMarkerVisibility_CO::NewVisibility' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.CalculateSplinePointTransform
// 0x01B0 (0x01B0 - 0x0000)
struct BP_SkyNavRoute_Base_C_CalculateSplinePointTransform final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD5[0xB];                                     // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Return;                                            // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD6[0x4];                                     // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD7[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD8[0x8];                                     // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_CalculateSplinePointTransform");
static_assert(sizeof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform) == 0x0001B0, "Wrong size on BP_SkyNavRoute_Base_C_CalculateSplinePointTransform");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, PointIndex) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::PointIndex' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CoordinateSpace) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, Return) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x000070, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0000D0, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakTransform_Location) == 0x0000D8, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakTransform_Rotation) == 0x0000F0, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakTransform_Scale) == 0x000108, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000120, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakRotator_Roll) == 0x000124, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakRotator_Pitch) == 0x000128, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_BreakRotator_Yaw) == 0x00012C, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_MakeRotator_ReturnValue) == 0x000130, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_CalculateSplinePointTransform, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BP_SkyNavRoute_Base_C_CalculateSplinePointTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_PlayerDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature final
{
public:
	class UMissionResourceComponent*              Resource;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature");
static_assert(sizeof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature) == 0x000008, "Wrong size on BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature");
static_assert(offsetof(BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature, Resource) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_BndEvt__BP_SkyNavRoute_Base_MissionResource_K2Node_ComponentBoundEvent_2_OnResourcePendingDestroyFinished__DelegateSignature::Resource' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.B2_TeleportRouteToSavedWorldTransform
// 0x0150 (0x0150 - 0x0000)
struct BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform final
{
public:
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDA[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0050(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform) == 0x000008, "Wrong alignment on BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform");
static_assert(sizeof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform) == 0x000150, "Wrong size on BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_BreakTransform_Location) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_BreakTransform_Rotation) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_BreakTransform_Scale) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000048, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000050, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000148, "Member 'BP_SkyNavRoute_Base_C_B2_TeleportRouteToSavedWorldTransform::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.B1_SaveRouteWorldTransform
// 0x0060 (0x0060 - 0x0000)
struct BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform");
static_assert(sizeof(BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform) == 0x000060, "Wrong size on BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform");
static_assert(offsetof(BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_B1_SaveRouteWorldTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.ActivateGateByProgress
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyNavRoute_Base_C_ActivateGateByProgress final
{
public:
	int32                                         CurrentProgress;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_ActivateGateByProgress) == 0x000004, "Wrong alignment on BP_SkyNavRoute_Base_C_ActivateGateByProgress");
static_assert(sizeof(BP_SkyNavRoute_Base_C_ActivateGateByProgress) == 0x000004, "Wrong size on BP_SkyNavRoute_Base_C_ActivateGateByProgress");
static_assert(offsetof(BP_SkyNavRoute_Base_C_ActivateGateByProgress, CurrentProgress) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_ActivateGateByProgress::CurrentProgress' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.A4_CalculateAndSetTrajectoryTangents
// 0x00D0 (0x00D0 - 0x0000)
struct BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return;     // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDC[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumberOfGates_Correct;               // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents");
static_assert(sizeof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents) == 0x0000D0, "Wrong size on BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_CalculateSplinePointTransform_Return) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_CalculateSplinePointTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_BreakTransform_Location) == 0x000070, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_BreakTransform_Rotation) == 0x000088, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_BreakTransform_Scale) == 0x0000A0, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C5, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_Array_Length_ReturnValue_1) == 0x0000C8, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_BooleanAND_ReturnValue) == 0x0000CC, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents, CallFunc_CheckNumberOfGates_Correct) == 0x0000CD, "Member 'BP_SkyNavRoute_Base_C_A4_CalculateAndSetTrajectoryTangents::CallFunc_CheckNumberOfGates_Correct' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.A3_ApplySavedCustomGatesParameters
// 0x02C0 (0x02C0 - 0x0000)
struct BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters final
{
public:
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDE[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumberOfGates_Correct;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BDF[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE0[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Map_Find_Value;                           // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE1[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x01B8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters");
static_assert(sizeof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters) == 0x0002C0, "Wrong size on BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, Temp_bool_True_if_break_was_hit_Variable) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_CheckNumberOfGates_Correct) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_CheckNumberOfGates_Correct' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Less_IntInt_ReturnValue) == 0x000029, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Set_Contains_ReturnValue) == 0x00002B, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Map_Find_Value) == 0x000090, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_Map_Find_ReturnValue) == 0x0000F0, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Location) == 0x0000F8, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Rotation) == 0x000110, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Scale) == 0x000128, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Location_1) == 0x000140, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Rotation_1) == 0x000158, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_BreakTransform_Scale_1) == 0x000170, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_TransformLocation_ReturnValue) == 0x000188, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_ComposeRotators_ReturnValue) == 0x0001A0, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0001B8, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0002B0, "Member 'BP_SkyNavRoute_Base_C_A3_ApplySavedCustomGatesParameters::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.A2_UpdateCustomGatesParameters
// 0x0240 (0x0240 - 0x0000)
struct BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumberOfGates_Correct;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyNavGate_C*                       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE3[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE4[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return;     // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE5[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE6[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0140(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_TransformTransform_ReturnValue; // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters");
static_assert(sizeof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters) == 0x000240, "Wrong size on BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_CheckNumberOfGates_Correct) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_CheckNumberOfGates_Correct' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_Array_Length_ReturnValue_1) == 0x0000C8, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_CalculateSplinePointTransform_Return) == 0x0000D0, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_CalculateSplinePointTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, Temp_int_Loop_Counter_Variable) == 0x000130, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_Less_IntInt_ReturnValue) == 0x000134, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_Add_IntInt_ReturnValue) == 0x000138, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_GetTransform_ReturnValue_1) == 0x000140, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_InverseTransformLocation_ReturnValue) == 0x0001A0, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_InverseTransformRotation_ReturnValue) == 0x0001B8, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_MakeTransform_ReturnValue) == 0x0001D0, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters, CallFunc_EqualEqual_TransformTransform_ReturnValue) == 0x000230, "Member 'BP_SkyNavRoute_Base_C_A2_UpdateCustomGatesParameters::CallFunc_EqualEqual_TransformTransform_ReturnValue' has a wrong offset!");

// Function BP_SkyNavRoute_Base.BP_SkyNavRoute_Base_C.A1_TeleportAllAssignedGatesToSplinePoints
// 0x01F0 (0x01F0 - 0x0000)
struct BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints final
{
public:
	int32                                         L_EmptySplinePoint;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE7[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyNavGate_C*                       K2Node_DynamicCast_AsBP_Sky_Nav_Gate;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE8[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculateSplinePointTransform_Return;     // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00D8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BE9[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumberOfGates_Correct;               // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BEA[0x2];                                     // 0x01DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints) == 0x000010, "Wrong alignment on BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints");
static_assert(sizeof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints) == 0x0001F0, "Wrong size on BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, L_EmptySplinePoint) == 0x000000, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::L_EmptySplinePoint' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, K2Node_DynamicCast_AsBP_Sky_Nav_Gate) == 0x000020, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::K2Node_DynamicCast_AsBP_Sky_Nav_Gate' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_CalculateSplinePointTransform_Return) == 0x000030, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_CalculateSplinePointTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_BreakTransform_Location) == 0x000090, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_BreakTransform_Rotation) == 0x0000A8, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_BreakTransform_Scale) == 0x0000C0, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000D8, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001D0, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Array_Length_ReturnValue) == 0x0001D4, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Array_Length_ReturnValue_1) == 0x0001D8, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Less_IntInt_ReturnValue) == 0x0001DC, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_CheckNumberOfGates_Correct) == 0x0001DD, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_CheckNumberOfGates_Correct' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001E0, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001E4, "Member 'BP_SkyNavRoute_Base_C_A1_TeleportAllAssignedGatesToSplinePoints::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

}

