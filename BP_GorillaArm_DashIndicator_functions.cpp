#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GorillaArm_DashIndicator

#include "Basic.hpp"

#include "BP_GorillaArm_DashIndicator_classes.hpp"
#include "BP_GorillaArm_DashIndicator_parameters.hpp"


namespace SDK
{

// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.AnimateDash
// (BlueprintCallable, BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::AnimateDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "AnimateDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.AnimateParticles_Charging
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ChargeProgress                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::AnimateParticles_Charging(double ChargeProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "AnimateParticles_Charging");

	Params::BP_GorillaArm_DashIndicator_C_AnimateParticles_Charging Parms{};

	Parms.ChargeProgress = ChargeProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.ChangeParticleColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::ChangeParticleColor(const struct FLinearColor& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "ChangeParticleColor");

	Params::BP_GorillaArm_DashIndicator_C_ChangeParticleColor Parms{};

	Parms.Param = std::move(Param);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_InnerSizeAnim_Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_InnerSizeAnim_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_InnerSizeAnim_Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_InnerSizeAnim_Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_InnerSizeAnim_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_InnerSizeAnim_Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_OuterRotationAnim_Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_OuterRotationAnim_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_OuterRotationAnim_Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_OuterRotationAnim_Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_OuterRotationAnim_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_OuterRotationAnim_Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_OuterSizeAnim_Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_OuterSizeAnim_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_OuterSizeAnim_Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.Dashing_OuterSizeAnim_Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::Dashing_OuterSizeAnim_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "Dashing_OuterSizeAnim_Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.ExecuteUbergraph_BP_GorillaArm_DashIndicator
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::ExecuteUbergraph_BP_GorillaArm_DashIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "ExecuteUbergraph_BP_GorillaArm_DashIndicator");

	Params::BP_GorillaArm_DashIndicator_C_ExecuteUbergraph_BP_GorillaArm_DashIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.OnRep_BeforeClick
// (BlueprintCallable, BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::OnRep_BeforeClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "OnRep_BeforeClick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.PerformIndicatorSingleTrace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Trace_Start                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Trace_End                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bApplyOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    bBlockingHit                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::PerformIndicatorSingleTrace(const struct FVector& Trace_Start, const struct FVector& Trace_End, bool bApplyOffset, EDrawDebugTrace DebugType, struct FHitResult* Out_Hit, bool* bBlockingHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "PerformIndicatorSingleTrace");

	Params::BP_GorillaArm_DashIndicator_C_PerformIndicatorSingleTrace Parms{};

	Parms.Trace_Start = std::move(Trace_Start);
	Parms.Trace_End = std::move(Trace_End);
	Parms.bApplyOffset = bApplyOffset;
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (bBlockingHit != nullptr)
		*bBlockingHit = Parms.bBlockingHit;
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.PerformIndicatorTraces
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    bBlockingHit                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutTotalDistance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::PerformIndicatorTraces(const struct FVector& TraceStart, const struct FVector& Direction, double MaxDistance, EDrawDebugTrace DebugType, struct FHitResult* Out_Hit, bool* bBlockingHit, double* OutTotalDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "PerformIndicatorTraces");

	Params::BP_GorillaArm_DashIndicator_C_PerformIndicatorTraces Parms{};

	Parms.TraceStart = std::move(TraceStart);
	Parms.Direction = std::move(Direction);
	Parms.MaxDistance = MaxDistance;
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (bBlockingHit != nullptr)
		*bBlockingHit = Parms.bBlockingHit;

	if (OutTotalDistance != nullptr)
		*OutTotalDistance = Parms.OutTotalDistance;
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "ReceiveTick");

	Params::BP_GorillaArm_DashIndicator_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.UpdateIndicatorLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::UpdateIndicatorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "UpdateIndicatorLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.UpdateIndicatorSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Current_Charge                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::UpdateIndicatorSize(double Current_Charge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "UpdateIndicatorSize");

	Params::BP_GorillaArm_DashIndicator_C_UpdateIndicatorSize Parms{};

	Parms.Current_Charge = Current_Charge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_GorillaArm_DashIndicator_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.CalculateTraceOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::CalculateTraceOffset(struct FVector* Offset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "CalculateTraceOffset");

	Params::BP_GorillaArm_DashIndicator_C_CalculateTraceOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.GetDashDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          DashDirection                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::GetDashDirection(struct FVector* DashDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "GetDashDirection");

	Params::BP_GorillaArm_DashIndicator_C_GetDashDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashDirection != nullptr)
		*DashDirection = std::move(Parms.DashDirection);
}


// Function BP_GorillaArm_DashIndicator.BP_GorillaArm_DashIndicator_C.GetMaxDashDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  Param_DashDistance                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GorillaArm_DashIndicator_C::GetMaxDashDistance(double* Param_DashDistance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GorillaArm_DashIndicator_C", "GetMaxDashDistance");

	Params::BP_GorillaArm_DashIndicator_C_GetMaxDashDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DashDistance != nullptr)
		*Param_DashDistance = Parms.Param_DashDistance;
}

}

