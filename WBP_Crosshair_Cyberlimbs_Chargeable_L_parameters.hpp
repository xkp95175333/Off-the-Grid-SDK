#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair_Cyberlimbs_Chargeable_L

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "G01_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C.ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L
// 0x0110 (0x0110 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_BP_GetAbilityComponent_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA6[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzChargeableAbilityComponent*          K2Node_DynamicCast_AsGz_Chargeable_Ability_Component; // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA7[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzLimbType                                   K2Node_Event_LimbType_1;                           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA8[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       K2Node_Event_GaugeData;                            // 0x0080(0x0028)(ConstParm, NoDestructor)
	EGzLimbType                                   K2Node_Event_LimbType;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AA9[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGA_Charge_LimbAbility*               K2Node_DynamicCast_AsGz_GA_Charge_Limb_Ability;    // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAA[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetChargeProgress_ReturnValue;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCooldownProgress_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAB[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00E0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAC[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAD[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L) == 0x000110, "Wrong size on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_BP_GetAbilityComponent_ReturnValue) == 0x000018, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_BP_GetAbilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_MyGeometry) == 0x000020, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_InDeltaTime) == 0x000058, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_DynamicCast_AsGz_Chargeable_Ability_Component) == 0x000060, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_DynamicCast_AsGz_Chargeable_Ability_Component' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_IsDesignTime) == 0x000069, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000070, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_LimbType_1) == 0x000078, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_LimbType_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_GaugeData) == 0x000080, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_GaugeData' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_Event_LimbType) == 0x0000A8, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_Event_LimbType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_DynamicCast_AsGz_GA_Charge_Limb_Ability) == 0x0000B0, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_DynamicCast_AsGz_GA_Charge_Limb_Ability' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_GetChargeProgress_ReturnValue) == 0x0000BC, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_GetChargeProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_GetCooldownProgress_ReturnValue) == 0x0000C0, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_GetCooldownProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000C4, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, Temp_bool_IsClosed_Variable) == 0x0000C5, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C8, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_PlayAnimation_ReturnValue) == 0x0000D8, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000E0, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_IsValid_ReturnValue) == 0x0000F0, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000F4, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_ExecuteUbergraph_WBP_Crosshair_Cyberlimbs_Chargeable_L::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C.OnLimbActivated
// 0x0030 (0x0030 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzLimbGaugeData                       GaugeData;                                         // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated) == 0x000008, "Wrong alignment on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated) == 0x000030, "Wrong size on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated, LimbType) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated::LimbType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated, GaugeData) == 0x000008, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivated::GaugeData' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C.OnLimbActivationEnded
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded final
{
public:
	EGzLimbType                                   LimbType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded) == 0x000001, "Wrong alignment on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded) == 0x000001, "Wrong size on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded, LimbType) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_OnLimbActivationEnded::LimbType' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct) == 0x000001, "Wrong size on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Crosshair_Cyberlimbs_Chargeable_L.WBP_Crosshair_Cyberlimbs_Chargeable_L_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick) == 0x000004, "Wrong alignment on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick");
static_assert(sizeof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick) == 0x00003C, "Wrong size on WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Crosshair_Cyberlimbs_Chargeable_L_C_Tick::InDeltaTime' has a wrong offset!");

}

