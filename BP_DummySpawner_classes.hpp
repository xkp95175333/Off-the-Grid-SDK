#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DummySpawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DummySpawner.BP_DummySpawner_C
// 0x00F8 (0x0398 - 0x02A0)
class ABP_DummySpawner_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        AttachmentPoint;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pole;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PolePivot;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Platform;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTimeline_Alpha_0A3E65F64D22D0612D2AF6809BA07BFB; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RespawnTimeline__Direction_0A3E65F64D22D0612D2AF6809BA07BFB; // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6530[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RespawnTimeline;                                   // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         DeathTimeline_Alpha_A691D80E4BB5D815401ADFAFD9831152; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DeathTimeline__Direction_A691D80E4BB5D815401ADFAFD9831152; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6531[0x3];                                     // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DeathTimeline;                                     // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Move_Alpha_003D30E04D0B5AC877AB10B413BAA99D;       // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Move__Direction_003D30E04D0B5AC877AB10B413BAA99D;  // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6532[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Move;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveable;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMove;                                           // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6533[0x6];                                     // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Move_Timeline_Offset;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceAlongSpline;                               // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDummyDeath;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_CyberlimbsRangeController_C*        Controller;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedMovement;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Direction;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6534[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CyberlimbsDummyPlayerDummy_C*       DummyReference;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DownDurationBeforeHealthRestore;                   // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6535[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AngleSlope;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskGameplayTagAddedRemoved*    Async_Task;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskAttributeChanged*           Async_Task_0;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InitDummySpeedAttribute;                           // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6536[0x4];                                     // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentDummySpeedAttribute;                        // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDummyReactivate;                                 // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnDummyDeath__DelegateSignature();
	void Controller_OnMoveableChanged(bool Param_IsMoveable);
	void Controller_OnSpeedChanged(double Speed);
	void DeathTimeline__FinishedFunc();
	void DeathTimeline__UpdateFunc();
	void DummyDeactivate();
	void DummyReactivate();
	void DummySpeedChanged_Event(double Init, double Current, double Koef);
	void ExecuteUbergraph_BP_DummySpawner(int32 EntryPoint);
	void Move__FinishedFunc();
	void Move__UpdateFunc();
	void MoveBackwards();
	void MoveForward();
	void MovePlayRateUpdate(double SpeedMulty);
	void OnAttributeChanged_F59CE8A04D1A9EBFFFF3188E568654B6(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void OnDummyReactivate__DelegateSignature();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RespawnTimeline__FinishedFunc();
	void RespawnTimeline__UpdateFunc();
	void SetController(class ABP_CyberlimbsRangeController_C* Param_Controller);
	void SetSpeedRate();
	void SpawnDummy();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DummySpawner_C">();
	}
	static class ABP_DummySpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DummySpawner_C>();
	}
};
static_assert(alignof(ABP_DummySpawner_C) == 0x000008, "Wrong alignment on ABP_DummySpawner_C");
static_assert(sizeof(ABP_DummySpawner_C) == 0x000398, "Wrong size on ABP_DummySpawner_C");
static_assert(offsetof(ABP_DummySpawner_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_DummySpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, AttachmentPoint) == 0x0002A8, "Member 'ABP_DummySpawner_C::AttachmentPoint' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Pole) == 0x0002B0, "Member 'ABP_DummySpawner_C::Pole' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, PolePivot) == 0x0002B8, "Member 'ABP_DummySpawner_C::PolePivot' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Spline) == 0x0002C0, "Member 'ABP_DummySpawner_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Platform) == 0x0002C8, "Member 'ABP_DummySpawner_C::Platform' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Arrow) == 0x0002D0, "Member 'ABP_DummySpawner_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_DummySpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, RespawnTimeline_Alpha_0A3E65F64D22D0612D2AF6809BA07BFB) == 0x0002E0, "Member 'ABP_DummySpawner_C::RespawnTimeline_Alpha_0A3E65F64D22D0612D2AF6809BA07BFB' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, RespawnTimeline__Direction_0A3E65F64D22D0612D2AF6809BA07BFB) == 0x0002E4, "Member 'ABP_DummySpawner_C::RespawnTimeline__Direction_0A3E65F64D22D0612D2AF6809BA07BFB' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, RespawnTimeline) == 0x0002E8, "Member 'ABP_DummySpawner_C::RespawnTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DeathTimeline_Alpha_A691D80E4BB5D815401ADFAFD9831152) == 0x0002F0, "Member 'ABP_DummySpawner_C::DeathTimeline_Alpha_A691D80E4BB5D815401ADFAFD9831152' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DeathTimeline__Direction_A691D80E4BB5D815401ADFAFD9831152) == 0x0002F4, "Member 'ABP_DummySpawner_C::DeathTimeline__Direction_A691D80E4BB5D815401ADFAFD9831152' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DeathTimeline) == 0x0002F8, "Member 'ABP_DummySpawner_C::DeathTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Move_Alpha_003D30E04D0B5AC877AB10B413BAA99D) == 0x000300, "Member 'ABP_DummySpawner_C::Move_Alpha_003D30E04D0B5AC877AB10B413BAA99D' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Move__Direction_003D30E04D0B5AC877AB10B413BAA99D) == 0x000304, "Member 'ABP_DummySpawner_C::Move__Direction_003D30E04D0B5AC877AB10B413BAA99D' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Move) == 0x000308, "Member 'ABP_DummySpawner_C::Move' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, IsMoveable) == 0x000310, "Member 'ABP_DummySpawner_C::IsMoveable' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, HasMove) == 0x000311, "Member 'ABP_DummySpawner_C::HasMove' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Move_Timeline_Offset) == 0x000318, "Member 'ABP_DummySpawner_C::Move_Timeline_Offset' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DistanceAlongSpline) == 0x000320, "Member 'ABP_DummySpawner_C::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, OnDummyDeath) == 0x000328, "Member 'ABP_DummySpawner_C::OnDummyDeath' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Controller) == 0x000338, "Member 'ABP_DummySpawner_C::Controller' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, SpeedMovement) == 0x000340, "Member 'ABP_DummySpawner_C::SpeedMovement' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Direction) == 0x000348, "Member 'ABP_DummySpawner_C::Direction' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DummyReference) == 0x000350, "Member 'ABP_DummySpawner_C::DummyReference' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, DownDurationBeforeHealthRestore) == 0x000358, "Member 'ABP_DummySpawner_C::DownDurationBeforeHealthRestore' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, AngleSlope) == 0x000360, "Member 'ABP_DummySpawner_C::AngleSlope' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Async_Task) == 0x000368, "Member 'ABP_DummySpawner_C::Async_Task' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, Async_Task_0) == 0x000370, "Member 'ABP_DummySpawner_C::Async_Task_0' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, InitDummySpeedAttribute) == 0x000378, "Member 'ABP_DummySpawner_C::InitDummySpeedAttribute' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, CurrentDummySpeedAttribute) == 0x000380, "Member 'ABP_DummySpawner_C::CurrentDummySpeedAttribute' has a wrong offset!");
static_assert(offsetof(ABP_DummySpawner_C, OnDummyReactivate) == 0x000388, "Member 'ABP_DummySpawner_C::OnDummyReactivate' has a wrong offset!");

}

