#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AimingMode_DS

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_AimingMode_DS.BP_AimingMode_DS_C.ExecuteUbergraph_BP_AimingMode_DS
// 0x0028 (0x0028 - 0x0000)
struct BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGameUserSettings*                    CallFunc_GetGameUserSettings_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_NewValue;                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS) == 0x000008, "Wrong alignment on BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS");
static_assert(sizeof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS) == 0x000028, "Wrong size on BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS");
static_assert(offsetof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS, EntryPoint) == 0x000000, "Member 'BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS, CallFunc_GetGameUserSettings_ReturnValue) == 0x000008, "Member 'BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS, K2Node_Event_NewValue) == 0x000010, "Member 'BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS::K2Node_Event_NewValue' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS, K2Node_SwitchString_CmpSuccess) == 0x000020, "Member 'BP_AimingMode_DS_C_ExecuteUbergraph_BP_AimingMode_DS::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_AimingMode_DS.BP_AimingMode_DS_C.GetValue
// 0x0058 (0x0058 - 0x0000)
struct BP_AimingMode_DS_C_GetValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UGzGameUserSettings*                    CallFunc_GetGameUserSettings_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsToggleAimingMode_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B7[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimingMode_DS_C_GetValue) == 0x000008, "Wrong alignment on BP_AimingMode_DS_C_GetValue");
static_assert(sizeof(BP_AimingMode_DS_C_GetValue) == 0x000058, "Wrong size on BP_AimingMode_DS_C_GetValue");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, ReturnValue) == 0x000000, "Member 'BP_AimingMode_DS_C_GetValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, Temp_bool_Variable) == 0x000010, "Member 'BP_AimingMode_DS_C_GetValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, Temp_string_Variable) == 0x000018, "Member 'BP_AimingMode_DS_C_GetValue::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, Temp_string_Variable_1) == 0x000028, "Member 'BP_AimingMode_DS_C_GetValue::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, CallFunc_GetGameUserSettings_ReturnValue) == 0x000038, "Member 'BP_AimingMode_DS_C_GetValue::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, CallFunc_IsToggleAimingMode_ReturnValue) == 0x000040, "Member 'BP_AimingMode_DS_C_GetValue::CallFunc_IsToggleAimingMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimingMode_DS_C_GetValue, K2Node_Select_Default) == 0x000048, "Member 'BP_AimingMode_DS_C_GetValue::K2Node_Select_Default' has a wrong offset!");

// Function BP_AimingMode_DS.BP_AimingMode_DS_C.SetValue
// 0x0010 (0x0010 - 0x0000)
struct BP_AimingMode_DS_C_SetValue final
{
public:
	class FString                                 NewValue;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimingMode_DS_C_SetValue) == 0x000008, "Wrong alignment on BP_AimingMode_DS_C_SetValue");
static_assert(sizeof(BP_AimingMode_DS_C_SetValue) == 0x000010, "Wrong size on BP_AimingMode_DS_C_SetValue");
static_assert(offsetof(BP_AimingMode_DS_C_SetValue, NewValue) == 0x000000, "Member 'BP_AimingMode_DS_C_SetValue::NewValue' has a wrong offset!");

}

