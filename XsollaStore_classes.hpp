#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaStore_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "XsollaSettings_structs.hpp"


namespace SDK
{

// Class XsollaStore.CentrifugoClient
// 0x0050 (0x0078 - 0x0028)
class UCentrifugoClient final : public UObject
{
public:
	uint8                                         Pad_2869[0x50];                                    // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CentrifugoClient">();
	}
	static class UCentrifugoClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCentrifugoClient>();
	}
};
static_assert(alignof(UCentrifugoClient) == 0x000008, "Wrong alignment on UCentrifugoClient");
static_assert(sizeof(UCentrifugoClient) == 0x000078, "Wrong size on UCentrifugoClient");

// Class XsollaStore.CentrifugoServiceSubsystem
// 0x0090 (0x00C0 - 0x0030)
class UCentrifugoServiceSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_286A[0x70];                                    // 0x0030(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UCentrifugoClient*                      CentrifugoClient;                                  // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UXsollaOrderCheckObject*>        Trackers;                                          // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UXsollaLoginSubsystem*                  LoginSubsystem;                                    // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CentrifugoServiceSubsystem">();
	}
	static class UCentrifugoServiceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCentrifugoServiceSubsystem>();
	}
};
static_assert(alignof(UCentrifugoServiceSubsystem) == 0x000008, "Wrong alignment on UCentrifugoServiceSubsystem");
static_assert(sizeof(UCentrifugoServiceSubsystem) == 0x0000C0, "Wrong size on UCentrifugoServiceSubsystem");
static_assert(offsetof(UCentrifugoServiceSubsystem, CentrifugoClient) == 0x0000A0, "Member 'UCentrifugoServiceSubsystem::CentrifugoClient' has a wrong offset!");
static_assert(offsetof(UCentrifugoServiceSubsystem, Trackers) == 0x0000A8, "Member 'UCentrifugoServiceSubsystem::Trackers' has a wrong offset!");
static_assert(offsetof(UCentrifugoServiceSubsystem, LoginSubsystem) == 0x0000B8, "Member 'UCentrifugoServiceSubsystem::LoginSubsystem' has a wrong offset!");

// Class XsollaStore.XsollaOrderCheckObject
// 0x0048 (0x0070 - 0x0028)
class UXsollaOrderCheckObject final : public UObject
{
public:
	uint8                                         Pad_286B[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Destroy();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaOrderCheckObject">();
	}
	static class UXsollaOrderCheckObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaOrderCheckObject>();
	}
};
static_assert(alignof(UXsollaOrderCheckObject) == 0x000008, "Wrong alignment on UXsollaOrderCheckObject");
static_assert(sizeof(UXsollaOrderCheckObject) == 0x000070, "Wrong size on UXsollaOrderCheckObject");

// Class XsollaStore.XsollaStoreBrowserWrapper
// 0x0010 (0x02F0 - 0x02E0)
class UXsollaStoreBrowserWrapper : public UUserWidget
{
public:
	uint8                                         Pad_286C[0x10];                                    // 0x02E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExecuteBrowserClosed(bool bIsManually);
	void LoadUrl(const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreBrowserWrapper">();
	}
	static class UXsollaStoreBrowserWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreBrowserWrapper>();
	}
};
static_assert(alignof(UXsollaStoreBrowserWrapper) == 0x000008, "Wrong alignment on UXsollaStoreBrowserWrapper");
static_assert(sizeof(UXsollaStoreBrowserWrapper) == 0x0002F0, "Wrong size on UXsollaStoreBrowserWrapper");

// Class XsollaStore.XsollaStoreLibrary
// 0x0000 (0x0028 - 0x0028)
class UXsollaStoreLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool Equal_StoreCartStoreCart(const struct FStoreCart& A, const struct FStoreCart& B);
	static class FString FormatPrice(float Amount, const class FString& Currency);
	static class UDataTable* GetCurrencyLibrary();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreLibrary">();
	}
	static class UXsollaStoreLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreLibrary>();
	}
};
static_assert(alignof(UXsollaStoreLibrary) == 0x000008, "Wrong alignment on UXsollaStoreLibrary");
static_assert(sizeof(UXsollaStoreLibrary) == 0x000028, "Wrong size on UXsollaStoreLibrary");

// Class XsollaStore.XsollaStoreSave
// 0x0020 (0x0048 - 0x0028)
class UXsollaStoreSave final : public USaveGame
{
public:
	struct FXsollaStoreSaveData                   CartData;                                          // 0x0028(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreSave">();
	}
	static class UXsollaStoreSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreSave>();
	}
};
static_assert(alignof(UXsollaStoreSave) == 0x000008, "Wrong alignment on UXsollaStoreSave");
static_assert(sizeof(UXsollaStoreSave) == 0x000048, "Wrong size on UXsollaStoreSave");
static_assert(offsetof(UXsollaStoreSave, CartData) == 0x000028, "Member 'UXsollaStoreSave::CartData' has a wrong offset!");

// Class XsollaStore.XsollaStoreSubsystem
// 0x01D8 (0x0208 - 0x0030)
class UXsollaStoreSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_286F[0x10];                                    // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCartUpdate;                                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2870[0x140];                                   // 0x0050(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UXsollaStoreBrowserWrapper> DefaultBrowserWidgetClass;                         // 0x0190(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UXsollaOrderCheckObject*>        CachedOrderCheckObjects;                           // 0x0198(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UXsollaLoginSubsystem*                  LoginSubsystem;                                    // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PaymentAccessToken;                                // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PaymentRedirectURI;                                // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          PaymentEnableSandbox;                              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2871[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PaymentOrderId;                                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2872[0x20];                                    // 0x01D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsManually)>             PaymentBrowserClosedCallback;                      // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddToCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const int32 Quantity, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void BuyItemWithVirtualCurrency(const class FString& AuthToken, const class FString& ItemSKU, const class FString& CurrencySKU, const EXsollaPublishingPlatform Platform, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void BuyVirtualOrFreeItemCallback(int32 InOrderId);
	void CancelSubscription(const class FString& AuthToken, const int32 SubscriptionId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void CheckOrder(const class FString& AuthToken, const int32 OrderId, const TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus, const struct FXsollaOrderContent& OrderContent)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void CheckPendingOrder(const class FString& AccessToken, const int32 OrderId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, bool bIsUserInvolvedToPayment);
	void CheckPendingOrderSuccessCallback();
	void ClearCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void CreateOrderWithFreeCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void CreateOrderWithSpecifiedFreeItem(const class FString& AuthToken, const class FString& ItemSKU, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Quantity);
	void FetchCartPaymentToken(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Country, const class FString& Locale, const struct FXsollaParameters& CustomParameters, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& ExternalId);
	void FetchPaymentToken(const class FString& AuthToken, const class FString& ItemSKU, const class FString& Currency, const class FString& Country, const class FString& Locale, const struct FXsollaParameters& CustomParameters, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Quantity, const class FString& ExternalId);
	void FetchTokenCallback(const class FString& AccessToken, int32 InOrderId);
	void FillCartById(const class FString& AuthToken, const class FString& CartId, const TArray<struct FStoreCartItem>& Items, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetAllItemsList(const class FString& Locale, const TDelegate<void(const struct FStoreItemsList& ItemsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& AuthToken);
	void GetBundles(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreListOfBundles& ListOfBundles)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken);
	void GetDRMList(const TDelegate<void(const struct FStoreDRMList& DRMList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetGameItem(const class FString& GameSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FGameItem& Game)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetGameKeyItem(const class FString& ItemSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FGameKeyItem& GameKey)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetGameKeysListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreGameKeysList& GameKeysList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetGamesList(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FStoreGamesData& GamesData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetGamesListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreGamesList& GamesList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetItemGroups(const class FString& Locale, const TDelegate<void(TArray<struct FXsollaItemGroup>& ItemGroups)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetItemsListBySpecifiedGroup(const class FString& ExternalId, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FStoreItemsList& ItemsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken);
	void GetOwnedGames(const class FString& AuthToken, const TArray<class FString>& AdditionalFields, const TDelegate<void(const struct FOwnedGamesList& GamesList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const bool bIsSandbox);
	void GetPromocodeRewards(const class FString& AuthToken, const class FString& PromocodeCode, const TDelegate<void(const struct FStorePromocodeRewardData& RewardsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetSpecifiedBundle(const class FString& Sku, const TDelegate<void(const struct FStoreBundle& Bundle)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const class FString& AuthToken);
	void GetSubscriptionDetails(const class FString& AuthToken, const int32 SubscriptionId, const class FString& Locale, const TDelegate<void(struct FSubscriptionDetails& SubscriptionDetails)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetSubscriptionManagementUrl(const class FString& AuthToken, const class FString& Country, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetSubscriptionPlans(const class FString& AuthToken, const TArray<int32>& PlanId, const TArray<class FString>& PlanExternalId, const class FString& Country, const class FString& Locale, const TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetSubscriptionPublicPlans(const TArray<int32>& PlanId, const TArray<class FString>& PlanExternalId, const class FString& Country, const class FString& Locale, const TDelegate<void(const struct FSubscriptionPlansList& SubscriptionPlansList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetSubscriptionPurchaseUrl(const class FString& AuthToken, const class FString& PlanExternalId, const class FString& Country, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetSubscriptionRenewalUrl(const class FString& AuthToken, const int32 SubscriptionId, const TDelegate<void(const class FString& LinkToPaystation)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetSubscriptions(const class FString& AuthToken, const class FString& Locale, const TDelegate<void(const struct FSubscriptionsList& SubscriptionsList)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetVirtualCurrencies(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyData& VirtualCurrencyData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset);
	void GetVirtualCurrency(const class FString& CurrencySKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrency& Currency)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetVirtualCurrencyPackage(const class FString& PackageSKU, const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetVirtualCurrencyPackages(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FVirtualCurrencyPackagesData& Data)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken);
	void GetVirtualItems(const class FString& Locale, const class FString& Country, const TArray<class FString>& AdditionalFields, const TDelegate<void(struct FStoreItemsData& ItemsData)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const int32 Limit, const int32 Offset, const class FString& AuthToken);
	void Initialize(const class FString& InProjectId);
	void LaunchPaymentConsole(class UObject* WorldContextObject, const int32 OrderId, const class FString& AccessToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback, const TDelegate<void(bool bIsManually)>& BrowserClosedCallback);
	void PurchaseCurrencyPackage(const struct FVirtualCurrencyPackage& CurrencyPackage, const struct FXsollaPaymentTokenRequestPayload& PaymentTokenRequestPayload, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void PurchaseStoreItem(const struct FStoreItem& StoreItem, const struct FXsollaPaymentTokenRequestPayload& PaymentTokenRequestPayload, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void RedeemGameCodeByClient(const class FString& AuthToken, const class FString& Code, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void RedeemPromocode(const class FString& AuthToken, const class FString& PromocodeCode, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void RemoveFromCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void RemovePromocodeFromCart(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateCart(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Locale, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);

	const struct FStoreItem FindItemBySku(const class FString& ItemSKU, bool* bHasFound) const;
	const struct FVirtualCurrencyPackage FindVirtualCurrencyPackageBySku(const class FString& ItemSKU, bool* bHasFound) const;
	const struct FStoreCart GetCart() const;
	class FString GetItemName(const class FString& ItemSKU) const;
	const struct FStoreItemsData GetItemsData() const;
	class FString GetPendingPaystationUrl() const;
	TArray<struct FStoreItem> GetVirtualItemsWithoutGroup() const;
	bool IsItemInCart(const class FString& ItemSKU) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreSubsystem">();
	}
	static class UXsollaStoreSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreSubsystem>();
	}
};
static_assert(alignof(UXsollaStoreSubsystem) == 0x000008, "Wrong alignment on UXsollaStoreSubsystem");
static_assert(sizeof(UXsollaStoreSubsystem) == 0x000208, "Wrong size on UXsollaStoreSubsystem");
static_assert(offsetof(UXsollaStoreSubsystem, OnCartUpdate) == 0x000040, "Member 'UXsollaStoreSubsystem::OnCartUpdate' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, DefaultBrowserWidgetClass) == 0x000190, "Member 'UXsollaStoreSubsystem::DefaultBrowserWidgetClass' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, CachedOrderCheckObjects) == 0x000198, "Member 'UXsollaStoreSubsystem::CachedOrderCheckObjects' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, LoginSubsystem) == 0x0001A8, "Member 'UXsollaStoreSubsystem::LoginSubsystem' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, PaymentAccessToken) == 0x0001B0, "Member 'UXsollaStoreSubsystem::PaymentAccessToken' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, PaymentRedirectURI) == 0x0001C0, "Member 'UXsollaStoreSubsystem::PaymentRedirectURI' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, PaymentEnableSandbox) == 0x0001D0, "Member 'UXsollaStoreSubsystem::PaymentEnableSandbox' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, PaymentOrderId) == 0x0001D4, "Member 'UXsollaStoreSubsystem::PaymentOrderId' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, PaymentBrowserClosedCallback) == 0x0001F8, "Member 'UXsollaStoreSubsystem::PaymentBrowserClosedCallback' has a wrong offset!");

}

