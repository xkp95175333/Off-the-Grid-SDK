#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Lighting_Utility

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_Light_Type_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create Bulb Mesh
// 0x02D8 (0x02D8 - 0x0000)
struct BPFL_Lighting_Utility_C_Create_Bulb_Mesh final
{
public:
	class UObject*                                Self_Reference;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Bulb_Mesh;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Bulb_Light_Location;                               // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Bulb_Light_Rotation;                               // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Bulb_Mesh_Offset;                                  // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Bulb_Mesh_Rotation;                                // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Bulb_Mesh_Scale;                                   // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Bulb_Mesh_Reference;                               // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DC[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponentByClass_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalOffset_SweepHitResult;         // 0x00E0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x01D8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh) == 0x000008, "Wrong alignment on BPFL_Lighting_Utility_C_Create_Bulb_Mesh");
static_assert(sizeof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh) == 0x0002D8, "Wrong size on BPFL_Lighting_Utility_C_Create_Bulb_Mesh");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Self_Reference) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Self_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Mesh) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Light_Location) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Light_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Light_Rotation) == 0x000028, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Light_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Mesh_Offset) == 0x000040, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Mesh_Offset' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Mesh_Rotation) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Mesh_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Mesh_Scale) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Mesh_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, __WorldContext) == 0x000088, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, Bulb_Mesh_Reference) == 0x000090, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::Bulb_Mesh_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, K2Node_DynamicCast_AsActor) == 0x000098, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_ComposeRotators_ReturnValue) == 0x0000A8, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_AddComponentByClass_ReturnValue) == 0x0000C0, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C8, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_K2_AddLocalOffset_SweepHitResult) == 0x0000E0, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_K2_AddLocalOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x0001D8, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Bulb_Mesh, CallFunc_SetStaticMesh_ReturnValue) == 0x0002D0, "Member 'BPFL_Lighting_Utility_C_Create_Bulb_Mesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create LED Diode Mesh
// 0x0220 (0x0220 - 0x0000)
struct BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh final
{
public:
	class UObject*                                Self_Reference;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            LED_Diode_Mesh;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number_of_X_Duplications;                          // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DD[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X_Spacing;                                         // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number_of_Y_Duplications;                          // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DE[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Y_Spacing;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    LED_Didoe_Mesh_Reference;                          // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50DF[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E0[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          CallFunc_AddComponentByClass_ReturnValue;          // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E1[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E2[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E3[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E4[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddInstance_ReturnValue;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh) == 0x000010, "Wrong alignment on BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh");
static_assert(sizeof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh) == 0x000220, "Wrong size on BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Self_Reference) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Self_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, LED_Diode_Mesh) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::LED_Diode_Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Location) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Location' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Rotation) == 0x000028, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Scale) == 0x000040, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Number_of_X_Duplications) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Number_of_X_Duplications' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, X_Spacing) == 0x000060, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::X_Spacing' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Number_of_Y_Duplications) == 0x000068, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Number_of_Y_Duplications' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Y_Spacing) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Y_Spacing' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, __WorldContext) == 0x000078, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, LED_Didoe_Mesh_Reference) == 0x000080, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::LED_Didoe_Mesh_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, K2Node_DynamicCast_AsActor) == 0x0000F0, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Temp_int_Variable) == 0x0000FC, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_AddComponentByClass_ReturnValue) == 0x000100, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Subtract_IntInt_ReturnValue) == 0x000108, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000110, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000118, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000120, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_MakeVector_ReturnValue) == 0x000128, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Add_VectorVector_ReturnValue) == 0x000140, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000158, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Add_IntInt_ReturnValue) == 0x00015C, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, Temp_int_Variable_1) == 0x000160, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Add_IntInt_ReturnValue_1) == 0x000164, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000168, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000170, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_MakeVector_ReturnValue_1) == 0x000178, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000190, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000198, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_MakeTransform_ReturnValue_1) == 0x0001B0, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh, CallFunc_AddInstance_ReturnValue) == 0x000210, "Member 'BPFL_Lighting_Utility_C_Create_LED_Diode_Mesh::CallFunc_AddInstance_ReturnValue' has a wrong offset!");

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Create Light Component
// 0x04A0 (0x04A0 - 0x0000)
struct BPFL_Lighting_Utility_C_Create_Light_Component final
{
public:
	class UObject*                                Self_Reference;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Light_Type                                  Light_Type;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Light_Location;                                    // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Light_Rotation;                                    // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Spot_Light_Reference;                              // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Point_Light_Reference;                             // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    Rect_Light_Reference;                              // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E6[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    CallFunc_AddComponentByClass_ReturnValue;          // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   CallFunc_AddComponentByClass_ReturnValue_1;        // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0140(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult_1;     // 0x0238(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0330(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E7[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    CallFunc_AddComponentByClass_ReturnValue_2;        // 0x0398(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult_2;     // 0x03A0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Create_Light_Component) == 0x000010, "Wrong alignment on BPFL_Lighting_Utility_C_Create_Light_Component");
static_assert(sizeof(BPFL_Lighting_Utility_C_Create_Light_Component) == 0x0004A0, "Wrong size on BPFL_Lighting_Utility_C_Create_Light_Component");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Self_Reference) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Self_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Light_Type) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Light_Type' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Light_Location) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Light_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Light_Rotation) == 0x000028, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Light_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, __WorldContext) == 0x000040, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Spot_Light_Reference) == 0x000048, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Spot_Light_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Point_Light_Reference) == 0x000050, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Point_Light_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, Rect_Light_Reference) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::Rect_Light_Reference' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, K2Node_DynamicCast_AsActor) == 0x000060, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_MakeTransform_ReturnValue_1) == 0x0000D0, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_AddComponentByClass_ReturnValue) == 0x000130, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_AddComponentByClass_ReturnValue_1) == 0x000138, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_AddComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000140, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_K2_AddLocalRotation_SweepHitResult_1) == 0x000238, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_K2_AddLocalRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_MakeTransform_ReturnValue_2) == 0x000330, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, K2Node_SwitchEnum_CmpSuccess) == 0x000390, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_AddComponentByClass_ReturnValue_2) == 0x000398, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_AddComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Create_Light_Component, CallFunc_K2_AddLocalRotation_SweepHitResult_2) == 0x0003A0, "Member 'BPFL_Lighting_Utility_C_Create_Light_Component::CallFunc_K2_AddLocalRotation_SweepHitResult_2' has a wrong offset!");

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Point Light Settings
// 0x01F8 (0x01F8 - 0x0000)
struct BPFL_Lighting_Utility_C_Point_Light_Settings final
{
public:
	class UPointLightComponent*                   Point_Light;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Intensity;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Intensity;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Intensity;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Colour;                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Colour;                                            // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Preset_Colour;                                     // 0x0034(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Attenuation_Radius;                       // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EA[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Attenuation_Radius;                                // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Attenuation_Radius;                         // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Casting_Start_Distance;                     // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Radius;                                     // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soft_Source_Radius;                                // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Length;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Temperature;                                   // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Preset_Kelvin_;                                // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EB[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Preset_Kelvin;                                     // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EC[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Indirect_Lighting_Intensity;                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Scattering_Intensity;                   // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Inverse_Squared_Falloff;                       // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50ED[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Light_Falloff_Exponent;                            // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inverse_Exposure_Blend;                            // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Specular_Scale;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Bias;                                       // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Scale_Bias;                                 // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_0;                                // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_1;                                // 0x00D9(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_2;                                // 0x00DA(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadows;                           // 0x00DB(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EE[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Draw_Distance;                                 // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Distance_Fade_Range;                           // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Light_Function_Material;                           // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light_Function_Scale;                              // 0x00F8(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Function_Fade_Distance;                      // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Disabled_Brightness;                               // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureLightProfile*                   IES_Texture;                                       // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_IES_Intensity;                                 // 0x0128(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50EF[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IES_Intensity_Scale;                               // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Intensity_Output;                            // 0x0140(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Final_Colour_Output;                               // 0x0148(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Out_Color;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emissive_Only;                                     // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F0[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Final_Colour;                                      // 0x016C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F1[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Final_Intensity;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F2[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast; // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceRadius_bNewValue_ImplicitCast;   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceLength_NewValue_ImplicitCast;    // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1; // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast_1; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast; // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast; // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSpecularScale_NewValue_ImplicitCast;   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetShadowBias_NewValue_ImplicitCast;      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast; // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDrawDistance_ImplicitCast;   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast; // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast; // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast; // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast; // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Point_Light_Settings) == 0x000008, "Wrong alignment on BPFL_Lighting_Utility_C_Point_Light_Settings");
static_assert(sizeof(BPFL_Lighting_Utility_C_Point_Light_Settings) == 0x0001F8, "Wrong size on BPFL_Lighting_Utility_C_Point_Light_Settings");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Point_Light) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Point_Light' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Override_Preset_Intensity) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Override_Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Intensity) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Preset_Intensity) == 0x000018, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Override_Preset_Colour) == 0x000020, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Override_Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Colour) == 0x000024, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Preset_Colour) == 0x000034, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Override_Attenuation_Radius) == 0x000044, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Override_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Attenuation_Radius) == 0x000048, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Preset_Attenuation_Radius) == 0x000050, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Preset_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Shadow_Casting_Start_Distance) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Shadow_Casting_Start_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Source_Radius) == 0x000060, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Source_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Soft_Source_Radius) == 0x000068, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Soft_Source_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Source_Length) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Source_Length' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Use_Temperature) == 0x000078, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Use_Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Use_Preset_Kelvin_) == 0x000079, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Use_Preset_Kelvin_' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Preset_Kelvin) == 0x000080, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Preset_Kelvin' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Temperature) == 0x000088, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Cast_Shadows) == 0x000090, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Indirect_Lighting_Intensity) == 0x000098, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Volumetric_Scattering_Intensity) == 0x0000A0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Use_Inverse_Squared_Falloff) == 0x0000A8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Use_Inverse_Squared_Falloff' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Light_Falloff_Exponent) == 0x0000B0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Light_Falloff_Exponent' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Inverse_Exposure_Blend) == 0x0000B8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Inverse_Exposure_Blend' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Specular_Scale) == 0x0000C0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Specular_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Shadow_Bias) == 0x0000C8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Shadow_Bias' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Shadow_Scale_Bias) == 0x0000D0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Shadow_Scale_Bias' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Lighting_Channel_0) == 0x0000D8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Lighting_Channel_0' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Lighting_Channel_1) == 0x0000D9, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Lighting_Channel_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Lighting_Channel_2) == 0x0000DA, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Lighting_Channel_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Cast_Volumetric_Shadows) == 0x0000DB, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Cast_Volumetric_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Max_Draw_Distance) == 0x0000E0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Max_Distance_Fade_Range) == 0x0000E8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Max_Distance_Fade_Range' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Light_Function_Material) == 0x0000F0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Light_Function_Scale) == 0x0000F8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Light_Function_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Light_Function_Fade_Distance) == 0x000110, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Light_Function_Fade_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Disabled_Brightness) == 0x000118, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Disabled_Brightness' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, IES_Texture) == 0x000120, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::IES_Texture' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Use_IES_Intensity) == 0x000128, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Use_IES_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, IES_Intensity_Scale) == 0x000130, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::IES_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, __WorldContext) == 0x000138, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Final_Intensity_Output) == 0x000140, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Final_Intensity_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Final_Colour_Output) == 0x000148, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Final_Colour_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Out_Color) == 0x000158, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Out_Color' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Emissive_Only) == 0x000168, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Emissive_Only' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Final_Colour) == 0x00016C, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Final_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, Final_Intensity) == 0x000180, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::Final_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x00018C, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x000190, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast) == 0x000194, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1) == 0x000198, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast) == 0x00019C, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetSourceRadius_bNewValue_ImplicitCast) == 0x0001A0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetSourceRadius_bNewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast) == 0x0001A4, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetSourceLength_NewValue_ImplicitCast) == 0x0001A8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetSourceLength_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast) == 0x0001AC, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1) == 0x0001B0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast) == 0x0001B4, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast_1) == 0x0001B8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2) == 0x0001BC, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3) == 0x0001C0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast) == 0x0001C4, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x0001C8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast) == 0x0001CC, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast) == 0x0001D0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetSpecularScale_NewValue_ImplicitCast) == 0x0001D4, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetSpecularScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetShadowBias_NewValue_ImplicitCast) == 0x0001D8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetShadowBias_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast) == 0x0001DC, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, K2Node_VariableSet_MaxDrawDistance_ImplicitCast) == 0x0001E0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::K2Node_VariableSet_MaxDrawDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast) == 0x0001E4, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast) == 0x0001E8, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast) == 0x0001EC, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Point_Light_Settings, CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast) == 0x0001F0, "Member 'BPFL_Lighting_Utility_C_Point_Light_Settings::CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast' has a wrong offset!");

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Rect Light Settings
// 0x01C0 (0x01C0 - 0x0000)
struct BPFL_Lighting_Utility_C_Rect_Light_Settings final
{
public:
	class URectLightComponent*                    Rect_Light;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Intensity;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Intensity;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Intensity;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Colour;                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F4[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Colour;                                            // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Preset_Colour;                                     // 0x0034(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Attenuation_Radius;                       // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F5[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Attenuation_Radius;                                // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Attenuation_Radius;                         // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Casting_Start_Distance;                     // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Width;                                      // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Height;                                     // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Barn_Door_Angle;                                   // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Barn_Door_Length;                                  // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Source_Texture;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Temperature;                                   // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Preset_Kelvin_;                                // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F6[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Preset_Kelvin;                                     // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F7[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Indirect_Lighting_Intensity;                       // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Scattering_Intensity;                   // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_0;                                // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_1;                                // 0x00B9(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_2;                                // 0x00BA(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadows;                           // 0x00BB(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F8[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Draw_Distance;                                 // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Distance_Fade_Range;                           // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Light_Function_Material;                           // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light_Function_Scale;                              // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Function_Fade_Distance;                      // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Disabled_Brightness;                               // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureLightProfile*                   IES_Texture;                                       // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_IES_Intensity;                                 // 0x0108(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50F9[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IES_Intensity_Scale;                               // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Intensity_Output;                            // 0x0120(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Final_Colour_Output;                               // 0x0128(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Out_Color;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Final_Colour;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Intensity;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FA[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast; // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1; // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast; // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceWidth_NewValue_ImplicitCast;     // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceHeight_NewValue_ImplicitCast;    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBarnDoorAngle_NewValue_ImplicitCast;   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBarnDoorLength_NewValue_ImplicitCast;  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast; // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1; // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast; // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast_1; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3; // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast; // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDrawDistance_ImplicitCast;   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast; // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Rect_Light_Settings) == 0x000008, "Wrong alignment on BPFL_Lighting_Utility_C_Rect_Light_Settings");
static_assert(sizeof(BPFL_Lighting_Utility_C_Rect_Light_Settings) == 0x0001C0, "Wrong size on BPFL_Lighting_Utility_C_Rect_Light_Settings");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Rect_Light) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Rect_Light' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Override_Preset_Intensity) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Override_Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Intensity) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Preset_Intensity) == 0x000018, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Override_Preset_Colour) == 0x000020, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Override_Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Colour) == 0x000024, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Preset_Colour) == 0x000034, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Override_Attenuation_Radius) == 0x000044, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Override_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Attenuation_Radius) == 0x000048, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Preset_Attenuation_Radius) == 0x000050, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Preset_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Shadow_Casting_Start_Distance) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Shadow_Casting_Start_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Source_Width) == 0x000060, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Source_Width' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Source_Height) == 0x000068, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Source_Height' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Barn_Door_Angle) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Barn_Door_Angle' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Barn_Door_Length) == 0x000078, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Barn_Door_Length' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Source_Texture) == 0x000080, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Source_Texture' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Use_Temperature) == 0x000088, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Use_Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Use_Preset_Kelvin_) == 0x000089, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Use_Preset_Kelvin_' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Preset_Kelvin) == 0x000090, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Preset_Kelvin' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Temperature) == 0x000098, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Cast_Shadows) == 0x0000A0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Indirect_Lighting_Intensity) == 0x0000A8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Volumetric_Scattering_Intensity) == 0x0000B0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Lighting_Channel_0) == 0x0000B8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Lighting_Channel_0' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Lighting_Channel_1) == 0x0000B9, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Lighting_Channel_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Lighting_Channel_2) == 0x0000BA, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Lighting_Channel_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Cast_Volumetric_Shadows) == 0x0000BB, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Cast_Volumetric_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Max_Draw_Distance) == 0x0000C0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Max_Distance_Fade_Range) == 0x0000C8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Max_Distance_Fade_Range' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Light_Function_Material) == 0x0000D0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Light_Function_Scale) == 0x0000D8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Light_Function_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Light_Function_Fade_Distance) == 0x0000F0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Light_Function_Fade_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Disabled_Brightness) == 0x0000F8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Disabled_Brightness' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, IES_Texture) == 0x000100, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::IES_Texture' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Use_IES_Intensity) == 0x000108, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Use_IES_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, IES_Intensity_Scale) == 0x000110, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::IES_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, __WorldContext) == 0x000118, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Final_Intensity_Output) == 0x000120, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Final_Intensity_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Final_Colour_Output) == 0x000128, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Final_Colour_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Out_Color) == 0x000138, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Out_Color' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Final_Colour) == 0x000148, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Final_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, Final_Intensity) == 0x000158, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::Final_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_IsValid_ReturnValue) == 0x000160, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000164, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x000168, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast) == 0x00016C, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1) == 0x000170, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast) == 0x000174, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetSourceWidth_NewValue_ImplicitCast) == 0x000178, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetSourceWidth_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetSourceHeight_NewValue_ImplicitCast) == 0x00017C, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetSourceHeight_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetBarnDoorAngle_NewValue_ImplicitCast) == 0x000180, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetBarnDoorAngle_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetBarnDoorLength_NewValue_ImplicitCast) == 0x000184, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetBarnDoorLength_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast) == 0x000188, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1) == 0x00018C, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast) == 0x000190, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast_1) == 0x000194, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2) == 0x000198, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3) == 0x00019C, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast) == 0x0001A0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x0001A4, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, K2Node_VariableSet_MaxDrawDistance_ImplicitCast) == 0x0001A8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::K2Node_VariableSet_MaxDrawDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast) == 0x0001AC, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast) == 0x0001B0, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast) == 0x0001B4, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Rect_Light_Settings, CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast) == 0x0001B8, "Member 'BPFL_Lighting_Utility_C_Rect_Light_Settings::CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast' has a wrong offset!");

// Function BPFL_Lighting_Utility.BPFL_Lighting_Utility_C.Spot Light Settings
// 0x0208 (0x0208 - 0x0000)
struct BPFL_Lighting_Utility_C_Spot_Light_Settings final
{
public:
	class USpotLightComponent*                    Spot_Light;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Intensity;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Intensity;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Intensity;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Preset_Colour;                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FC[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Colour;                                            // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Preset_Colour;                                     // 0x0034(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Attenuation_Radius;                       // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FD[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Attenuation_Radius;                                // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preset_Attenuation_Radius;                         // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inner_Cone_Angle;                                  // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Cone_Angle;                                  // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Casting_Start_Distance;                     // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Radius;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soft_Source_Radius;                                // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Length;                                     // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Temperature;                                   // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Preset_Kelvin_;                                // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FE[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Preset_Kelvin;                                     // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50FF[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Indirect_Lighting_Intensity;                       // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Scattering_Intensity;                   // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Inverse_Squared_Falloff;                       // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5100[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Light_Falloff_Exponent;                            // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inverse_Exposure_Blend;                            // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Specular_Scale;                                    // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Bias;                                       // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Slope_Bias;                                 // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_0;                                // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_1;                                // 0x00E9(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lighting_Channel_2;                                // 0x00EA(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadows;                           // 0x00EB(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5101[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Draw_Distance;                                 // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Distance_Fade_Range;                           // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Light_Function_Material;                           // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light_Function_Scale;                              // 0x0108(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Function_Fade_Distance;                      // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Disabled_Brightness;                               // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureLightProfile*                   IES_Texture;                                       // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_IES_Intensity;                                 // 0x0138(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5102[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IES_Intensity_Scale;                               // 0x0140(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Intensity_Output;                            // 0x0150(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Final_Colour_Output;                               // 0x0158(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Out_Color;                                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Final_Colour;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Final_Intensity;                                   // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5103[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast; // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1; // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetInnerConeAngle_NewInnerConeAngle_ImplicitCast; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetOuterConeAngle_NewOuterConeAngle_ImplicitCast; // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceRadius_bNewValue_ImplicitCast;   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSourceLength_NewValue_ImplicitCast;    // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast; // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast_1; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2; // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast; // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast; // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast; // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSpecularScale_NewValue_ImplicitCast;   // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetShadowBias_NewValue_ImplicitCast;      // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast; // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDrawDistance_ImplicitCast;   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast; // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast; // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast; // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast; // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Lighting_Utility_C_Spot_Light_Settings) == 0x000008, "Wrong alignment on BPFL_Lighting_Utility_C_Spot_Light_Settings");
static_assert(sizeof(BPFL_Lighting_Utility_C_Spot_Light_Settings) == 0x000208, "Wrong size on BPFL_Lighting_Utility_C_Spot_Light_Settings");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Spot_Light) == 0x000000, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Spot_Light' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Override_Preset_Intensity) == 0x000008, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Override_Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Intensity) == 0x000010, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Preset_Intensity) == 0x000018, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Preset_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Override_Preset_Colour) == 0x000020, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Override_Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Colour) == 0x000024, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Preset_Colour) == 0x000034, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Preset_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Override_Attenuation_Radius) == 0x000044, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Override_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Attenuation_Radius) == 0x000048, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Preset_Attenuation_Radius) == 0x000050, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Preset_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Inner_Cone_Angle) == 0x000058, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Inner_Cone_Angle' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Outer_Cone_Angle) == 0x000060, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Outer_Cone_Angle' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Shadow_Casting_Start_Distance) == 0x000068, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Shadow_Casting_Start_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Source_Radius) == 0x000070, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Source_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Soft_Source_Radius) == 0x000078, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Soft_Source_Radius' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Source_Length) == 0x000080, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Source_Length' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Use_Temperature) == 0x000088, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Use_Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Use_Preset_Kelvin_) == 0x000089, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Use_Preset_Kelvin_' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Preset_Kelvin) == 0x000090, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Preset_Kelvin' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Temperature) == 0x000098, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Temperature' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Cast_Shadows) == 0x0000A0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Indirect_Lighting_Intensity) == 0x0000A8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Volumetric_Scattering_Intensity) == 0x0000B0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Use_Inverse_Squared_Falloff) == 0x0000B8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Use_Inverse_Squared_Falloff' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Light_Falloff_Exponent) == 0x0000C0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Light_Falloff_Exponent' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Inverse_Exposure_Blend) == 0x0000C8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Inverse_Exposure_Blend' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Specular_Scale) == 0x0000D0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Specular_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Shadow_Bias) == 0x0000D8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Shadow_Bias' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Shadow_Slope_Bias) == 0x0000E0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Shadow_Slope_Bias' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Lighting_Channel_0) == 0x0000E8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Lighting_Channel_0' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Lighting_Channel_1) == 0x0000E9, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Lighting_Channel_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Lighting_Channel_2) == 0x0000EA, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Lighting_Channel_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Cast_Volumetric_Shadows) == 0x0000EB, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Cast_Volumetric_Shadows' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Max_Draw_Distance) == 0x0000F0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Max_Distance_Fade_Range) == 0x0000F8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Max_Distance_Fade_Range' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Light_Function_Material) == 0x000100, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Light_Function_Scale) == 0x000108, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Light_Function_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Light_Function_Fade_Distance) == 0x000120, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Light_Function_Fade_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Disabled_Brightness) == 0x000128, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Disabled_Brightness' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, IES_Texture) == 0x000130, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::IES_Texture' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Use_IES_Intensity) == 0x000138, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Use_IES_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, IES_Intensity_Scale) == 0x000140, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::IES_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, __WorldContext) == 0x000148, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Final_Intensity_Output) == 0x000150, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Final_Intensity_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Final_Colour_Output) == 0x000158, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Final_Colour_Output' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Out_Color) == 0x000168, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Out_Color' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Final_Colour) == 0x000178, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Final_Colour' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, Final_Intensity) == 0x000188, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::Final_Intensity' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_IsValid_ReturnValue) == 0x000190, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000194, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x000198, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast) == 0x00019C, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1) == 0x0001A0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetInnerConeAngle_NewInnerConeAngle_ImplicitCast) == 0x0001A4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetInnerConeAngle_NewInnerConeAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetOuterConeAngle_NewOuterConeAngle_ImplicitCast) == 0x0001A8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetOuterConeAngle_NewOuterConeAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast) == 0x0001AC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::K2Node_VariableSet_ShadowCastingStartDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetSourceRadius_bNewValue_ImplicitCast) == 0x0001B0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetSourceRadius_bNewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast) == 0x0001B4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetSoftSourceRadius_bNewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetSourceLength_NewValue_ImplicitCast) == 0x0001B8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetSourceLength_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast) == 0x0001BC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1) == 0x0001C0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast) == 0x0001C4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetTemperature_NewTemperature_ImplicitCast_1) == 0x0001C8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetTemperature_NewTemperature_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2) == 0x0001CC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3) == 0x0001D0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_LinearColor_SetTemperature_InTemperature_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast) == 0x0001D4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetIndirectLightingIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x0001D8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast) == 0x0001DC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetLightFalloffExponent_NewLightFalloffExponent_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast) == 0x0001E0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetInverseExposureBlend_NewInverseExposureBlend_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetSpecularScale_NewValue_ImplicitCast) == 0x0001E4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetSpecularScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetShadowBias_NewValue_ImplicitCast) == 0x0001E8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetShadowBias_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast) == 0x0001EC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetShadowSlopeBias_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, K2Node_VariableSet_MaxDrawDistance_ImplicitCast) == 0x0001F0, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::K2Node_VariableSet_MaxDrawDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast) == 0x0001F4, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::K2Node_VariableSet_MaxDistanceFadeRange_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast) == 0x0001F8, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast) == 0x0001FC, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetLightFunctionDisabledBrightness_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Lighting_Utility_C_Spot_Light_Settings, CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast) == 0x000200, "Member 'BPFL_Lighting_Utility_C_Spot_Light_Settings::CallFunc_SetIESBrightnessScale_NewValue_ImplicitCast' has a wrong offset!");

}

