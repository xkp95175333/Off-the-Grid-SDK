#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PF_OTP_Antenna

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "BP_OTP_AntennaState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "BP_PrefabParent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PF_OTP_Antenna.BP_PF_OTP_Antenna_C
// 0x0198 (0x0448 - 0x02B0)
class ABP_PF_OTP_Antenna_C final : public ABP_PrefabParent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_HEX_Antenna_Level_03;                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Antenna_Level_02;                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Antenna_Level_01;                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HEX_Antenna_Base;                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        GridTerminal;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        GridAntenna;                                       // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_013;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_012;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_011;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_010;                                  // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_09;                                   // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_08;                                   // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_07;                                   // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_06;                                   // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_05;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_04;                                   // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_03;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_02;                                   // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Hex_Flare_01;                                   // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponentBudgeted*         SkeletalMeshComponentBudgeted;                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStaticAkComponent*                   AntennaImpulseEmitter;                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStaticAkComponent*                   MastStressEmitter;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStaticAkComponent*                   EmittingFieldEmitter;                              // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStaticAkComponent*                   CableStressEmitter;                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzMarkerComponent*                     GzMarker;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_HEX_Extractor_C*                    HexExtractor;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleRoyaleZone_C*                 MyZone;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          CableStressAudioEvent;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          EmmitingFieldAudioEvent;                           // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          MastStressAudioEvent;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AntennaImpulseAudioEvent;                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              AntennaLightsVFX;                                  // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FLinearColor                           VFX_Active;                                        // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VFX_Hacked;                                        // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AntennaLightMaterial;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InactiveEmissive;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveEmissive;                                    // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultColor;                                      // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HackingColor;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressColor;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VfxSpawningTime;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_OTP_AntennaState                          AntennaState;                                      // 0x0424(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57B2[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateExtractionProgressTimer;                     // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentProgressClient;                             // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGzExtractionProgressData              ExtractionProgressData;                            // 0x0438(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)

public:
	void UserConstructionScript();
	void UpdateCurrentExtractionProgressClient();
	void StopAudioEvents();
	void SetExtractionHacked();
	void SetExtractionContinued();
	void SetExtractionCompleted();
	void SetExtractionCanceled();
	void SetExtractingState();
	void ResetExtractionVFX();
	void RemoveGridDecal();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PlayAudioEvents();
	void OnRep_ExtractionProgressData();
	void OnRep_AntennaState();
	void OnExtractionPauseChanged();
	void IsAntennaActive(bool* bActive);
	void InitZoneBindings();
	void InitVFX();
	void InitMaterials();
	void InitBindings();
	void ExtractionStarted();
	void ExtractionPaused();
	void ExtractionHacked();
	void ExtractionCompleted();
	void ExtractionCanceled();
	void ExecuteUbergraph_BP_PF_OTP_Antenna(int32 EntryPoint);
	void DisplayGridDecal();
	void DisableVisibilityTickAnimation();
	void CloseAntenna();
	void AntennaWaitPeriodFeedback(float OverloadStartTime);
	void AntennaOverloadEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PF_OTP_Antenna_C">();
	}
	static class ABP_PF_OTP_Antenna_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PF_OTP_Antenna_C>();
	}
};
static_assert(alignof(ABP_PF_OTP_Antenna_C) == 0x000008, "Wrong alignment on ABP_PF_OTP_Antenna_C");
static_assert(sizeof(ABP_PF_OTP_Antenna_C) == 0x000448, "Wrong size on ABP_PF_OTP_Antenna_C");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_PF_OTP_Antenna_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, SM_HEX_Antenna_Level_03) == 0x0002B8, "Member 'ABP_PF_OTP_Antenna_C::SM_HEX_Antenna_Level_03' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, SM_HEX_Antenna_Level_02) == 0x0002C0, "Member 'ABP_PF_OTP_Antenna_C::SM_HEX_Antenna_Level_02' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, SM_HEX_Antenna_Level_01) == 0x0002C8, "Member 'ABP_PF_OTP_Antenna_C::SM_HEX_Antenna_Level_01' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, SM_HEX_Antenna_Base) == 0x0002D0, "Member 'ABP_PF_OTP_Antenna_C::SM_HEX_Antenna_Base' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, GridTerminal) == 0x0002D8, "Member 'ABP_PF_OTP_Antenna_C::GridTerminal' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, GridAntenna) == 0x0002E0, "Member 'ABP_PF_OTP_Antenna_C::GridAntenna' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_013) == 0x0002E8, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_013' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_012) == 0x0002F0, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_012' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_011) == 0x0002F8, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_011' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_010) == 0x000300, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_010' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_09) == 0x000308, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_09' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_08) == 0x000310, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_08' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_07) == 0x000318, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_07' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_06) == 0x000320, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_06' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_05) == 0x000328, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_05' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_04) == 0x000330, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_04' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_03) == 0x000338, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_03' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_02) == 0x000340, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_02' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, NS_Hex_Flare_01) == 0x000348, "Member 'ABP_PF_OTP_Antenna_C::NS_Hex_Flare_01' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, SkeletalMeshComponentBudgeted) == 0x000350, "Member 'ABP_PF_OTP_Antenna_C::SkeletalMeshComponentBudgeted' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, AntennaImpulseEmitter) == 0x000358, "Member 'ABP_PF_OTP_Antenna_C::AntennaImpulseEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, MastStressEmitter) == 0x000360, "Member 'ABP_PF_OTP_Antenna_C::MastStressEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, EmittingFieldEmitter) == 0x000368, "Member 'ABP_PF_OTP_Antenna_C::EmittingFieldEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, CableStressEmitter) == 0x000370, "Member 'ABP_PF_OTP_Antenna_C::CableStressEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, GzMarker) == 0x000378, "Member 'ABP_PF_OTP_Antenna_C::GzMarker' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, HexExtractor) == 0x000380, "Member 'ABP_PF_OTP_Antenna_C::HexExtractor' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, MyZone) == 0x000388, "Member 'ABP_PF_OTP_Antenna_C::MyZone' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, CableStressAudioEvent) == 0x000390, "Member 'ABP_PF_OTP_Antenna_C::CableStressAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, EmmitingFieldAudioEvent) == 0x000398, "Member 'ABP_PF_OTP_Antenna_C::EmmitingFieldAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, MastStressAudioEvent) == 0x0003A0, "Member 'ABP_PF_OTP_Antenna_C::MastStressAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, AntennaImpulseAudioEvent) == 0x0003A8, "Member 'ABP_PF_OTP_Antenna_C::AntennaImpulseAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, AntennaLightsVFX) == 0x0003B0, "Member 'ABP_PF_OTP_Antenna_C::AntennaLightsVFX' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, VFX_Active) == 0x0003C0, "Member 'ABP_PF_OTP_Antenna_C::VFX_Active' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, VFX_Hacked) == 0x0003D0, "Member 'ABP_PF_OTP_Antenna_C::VFX_Hacked' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, AntennaLightMaterial) == 0x0003E0, "Member 'ABP_PF_OTP_Antenna_C::AntennaLightMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, InactiveEmissive) == 0x0003E8, "Member 'ABP_PF_OTP_Antenna_C::InactiveEmissive' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, ActiveEmissive) == 0x0003EC, "Member 'ABP_PF_OTP_Antenna_C::ActiveEmissive' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, DefaultColor) == 0x0003F0, "Member 'ABP_PF_OTP_Antenna_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, HackingColor) == 0x000400, "Member 'ABP_PF_OTP_Antenna_C::HackingColor' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, ProgressColor) == 0x000410, "Member 'ABP_PF_OTP_Antenna_C::ProgressColor' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, VfxSpawningTime) == 0x000420, "Member 'ABP_PF_OTP_Antenna_C::VfxSpawningTime' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, AntennaState) == 0x000424, "Member 'ABP_PF_OTP_Antenna_C::AntennaState' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, UpdateExtractionProgressTimer) == 0x000428, "Member 'ABP_PF_OTP_Antenna_C::UpdateExtractionProgressTimer' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, CurrentProgressClient) == 0x000430, "Member 'ABP_PF_OTP_Antenna_C::CurrentProgressClient' has a wrong offset!");
static_assert(offsetof(ABP_PF_OTP_Antenna_C, ExtractionProgressData) == 0x000438, "Member 'ABP_PF_OTP_Antenna_C::ExtractionProgressData' has a wrong offset!");

}

