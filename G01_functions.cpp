#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: G01

#include "Basic.hpp"

#include "G01_classes.hpp"
#include "G01_parameters.hpp"


namespace SDK
{

// Function G01.GzMoviePlayerModel.OnAkPostEventCallback
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMoviePlayerModel::OnAkPostEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMoviePlayerModel", "OnAkPostEventCallback");

	Params::GzMoviePlayerModel_OnAkPostEventCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.BlueprintLobbyHelpers.GetCVarsThatStartWith
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           StartsWith                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   CVars                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBlueprintLobbyHelpers::GetCVarsThatStartWith(const class FString& StartsWith, TArray<class FString>* CVars)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "GetCVarsThatStartWith");

	Params::BlueprintLobbyHelpers_GetCVarsThatStartWith Parms{};

	Parms.StartsWith = std::move(StartsWith);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CVars != nullptr)
		*CVars = std::move(Parms.CVars);
}


// Function G01.BlueprintLobbyHelpers.GetInputActions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputActionKeyMapping>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FInputActionKeyMapping> UBlueprintLobbyHelpers::GetInputActions(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "GetInputActions");

	Params::BlueprintLobbyHelpers_GetInputActions Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.BlueprintLobbyHelpers.GetLocalIpAddress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBlueprintLobbyHelpers::GetLocalIpAddress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "GetLocalIpAddress");

	Params::BlueprintLobbyHelpers_GetLocalIpAddress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.BlueprintLobbyHelpers.ParseFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintLobbyHelpers::ParseFloat(const class FString& String, float* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "ParseFloat");

	Params::BlueprintLobbyHelpers_ParseFloat Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function G01.BlueprintLobbyHelpers.ParseInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintLobbyHelpers::ParseInt(const class FString& String, int32* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "ParseInt");

	Params::BlueprintLobbyHelpers_ParseInt Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function G01.BlueprintLobbyHelpers.ParseIpV4
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   C                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   D                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintLobbyHelpers::ParseIpV4(const class FString& String, uint8* A, uint8* B, uint8* C, uint8* D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintLobbyHelpers", "ParseIpV4");

	Params::BlueprintLobbyHelpers_ParseIpV4 Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (A != nullptr)
		*A = Parms.A;

	if (B != nullptr)
		*B = Parms.B;

	if (C != nullptr)
		*C = Parms.C;

	if (D != nullptr)
		*D = Parms.D;

	return Parms.ReturnValue;
}


// Function G01.GzWaterMesh.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzWaterMesh::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWaterMesh", "OnBeginOverlap");

	Params::GzWaterMesh_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWaterMesh.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzWaterMesh::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWaterMesh", "OnEndOverlap");

	Params::GzWaterMesh_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.ApplyAbilityCameraMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivatePreviousAbilityCameraMode                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayAbility::ApplyAbilityCameraMode(const struct FGameplayTag& CameraModeTag, const bool bDeactivatePreviousAbilityCameraMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "ApplyAbilityCameraMode");

	Params::GzGameplayAbility_ApplyAbilityCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);
	Parms.bDeactivatePreviousAbilityCameraMode = bDeactivatePreviousAbilityCameraMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.ApplyEffectContainerSpec
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzGameplayEffectContainerSpec   ContainerSpec                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FActiveGameplayEffectHandle>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FActiveGameplayEffectHandle> UGzGameplayAbility::ApplyEffectContainerSpec(const struct FGzGameplayEffectContainerSpec& ContainerSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "ApplyEffectContainerSpec");

	Params::GzGameplayAbility_ApplyEffectContainerSpec Parms{};

	Parms.ContainerSpec = std::move(ContainerSpec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.BP_CanActivateAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzCharacter*                     Instigator                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::BP_CanActivateAbility(const class AGzCharacter* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "BP_CanActivateAbility");

	Params::GzGameplayAbility_BP_CanActivateAbility Parms{};

	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.CallActivateAbilityOnTasksCompleted
// (Final, Native, Protected)

void UGzGameplayAbility::CallActivateAbilityOnTasksCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "CallActivateAbilityOnTasksCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.CallEndAbilityOnTasksCompleted
// (Final, Native, Protected)

void UGzGameplayAbility::CallEndAbilityOnTasksCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "CallEndAbilityOnTasksCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.DoesSatisfyTagRequirements_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::DoesSatisfyTagRequirements_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "DoesSatisfyTagRequirements_BP");

	Params::GzGameplayAbility_DoesSatisfyTagRequirements_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.LinkAbilityAnimLayer
// (Final, Native, Public, BlueprintCallable)

void UGzGameplayAbility::LinkAbilityAnimLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "LinkAbilityAnimLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.MakeEffectContainerSpecFromContainer
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzGameplayEffectContainer       Container                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayEventData               EventData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   OverrideGameplayLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzGameplayEffectContainerSpec   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzGameplayEffectContainerSpec UGzGameplayAbility::MakeEffectContainerSpecFromContainer(const struct FGzGameplayEffectContainer& Container, const struct FGameplayEventData& EventData, int32 OverrideGameplayLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "MakeEffectContainerSpecFromContainer");

	Params::GzGameplayAbility_MakeEffectContainerSpecFromContainer Parms{};

	Parms.Container = std::move(Container);
	Parms.EventData = std::move(EventData);
	Parms.OverrideGameplayLevel = OverrideGameplayLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.MakeGameplayAbilityTargetDataHandleFromActorArray
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetActors                                           (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UGzGameplayAbility::MakeGameplayAbilityTargetDataHandleFromActorArray(const TArray<class AActor*>& TargetActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "MakeGameplayAbilityTargetDataHandleFromActorArray");

	Params::GzGameplayAbility_MakeGameplayAbilityTargetDataHandleFromActorArray Parms{};

	Parms.TargetActors = std::move(TargetActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.MakeGameplayAbilityTargetDataHandleFromHitResults
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FHitResult>               HitResults                                             (ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UGzGameplayAbility::MakeGameplayAbilityTargetDataHandleFromHitResults(const TArray<struct FHitResult>& HitResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "MakeGameplayAbilityTargetDataHandleFromHitResults");

	Params::GzGameplayAbility_MakeGameplayAbilityTargetDataHandleFromHitResults Parms{};

	Parms.HitResults = std::move(HitResults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.OnAbilityTaskCanceledOrInterrupted
// (Final, Native, Protected)

void UGzGameplayAbility::OnAbilityTaskCanceledOrInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "OnAbilityTaskCanceledOrInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.OnSpecificInputEvent
// (Final, Native, Protected)

void UGzGameplayAbility::OnSpecificInputEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "OnSpecificInputEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.ProcessPostEndAbilityTasks
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::ProcessPostEndAbilityTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "ProcessPostEndAbilityTasks");

	Params::GzGameplayAbility_ProcessPostEndAbilityTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.RemoveAbilityCameraMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayAbility::RemoveAbilityCameraMode(const struct FGameplayTag& CameraModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "RemoveAbilityCameraMode");

	Params::GzGameplayAbility_RemoveAbilityCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.ResetAbilityCameraMode
// (Final, Native, Public, BlueprintCallable)

void UGzGameplayAbility::ResetAbilityCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "ResetAbilityCameraMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.SendTargetDataToServer
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayAbility::SendTargetDataToServer(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "SendTargetDataToServer");

	Params::GzGameplayAbility_SendTargetDataToServer Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.BP_IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::BP_IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "BP_IsActive");

	Params::GzGameplayAbility_BP_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.CanBindToInputEvents
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::CanBindToInputEvents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "CanBindToInputEvents");

	Params::GzGameplayAbility_CanBindToInputEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GetAbilityWidgetClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> UGzGameplayAbility::GetAbilityWidgetClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GetAbilityWidgetClass");

	Params::GzGameplayAbility_GetAbilityWidgetClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GetActivationOwnedTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UGzGameplayAbility::GetActivationOwnedTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GetActivationOwnedTags");

	Params::GzGameplayAbility_GetActivationOwnedTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GetCurrentPredictionKeyStatus
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameplayAbility::GetCurrentPredictionKeyStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GetCurrentPredictionKeyStatus");

	Params::GzGameplayAbility_GetCurrentPredictionKeyStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GetGzAbilitySystemComponentFromActorInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAbilitySystemComponent* UGzGameplayAbility::GetGzAbilitySystemComponentFromActorInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GetGzAbilitySystemComponentFromActorInfo");

	Params::GzGameplayAbility_GetGzAbilitySystemComponentFromActorInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GetOwningCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* UGzGameplayAbility::GetOwningCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GetOwningCharacter");

	Params::GzGameplayAbility_GetOwningCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.GzApplyCost
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilitySpecHandle       Handle                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActivationInfo   ActivationInfo                                         (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzGameplayAbility::GzApplyCost(const struct FGameplayAbilitySpecHandle& Handle, const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilityActivationInfo& ActivationInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GzApplyCost");

	Params::GzGameplayAbility_GzApplyCost Parms{};

	Parms.Handle = std::move(Handle);
	Parms.ActorInfo = std::move(ActorInfo);
	Parms.ActivationInfo = std::move(ActivationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayAbility.GzCheckCost
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilitySpecHandle       Handle                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::GzCheckCost(const struct FGameplayAbilitySpecHandle& Handle, const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "GzCheckCost");

	Params::GzGameplayAbility_GzCheckCost Parms{};

	Parms.Handle = std::move(Handle);
	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.HasAbilityCameraMode
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::HasAbilityCameraMode(const struct FGameplayTag& CameraModeTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "HasAbilityCameraMode");

	Params::GzGameplayAbility_HasAbilityCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.IsNotAuthorityOrStandalone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::IsNotAuthorityOrStandalone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "IsNotAuthorityOrStandalone");

	Params::GzGameplayAbility_IsNotAuthorityOrStandalone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.IsPredictionKeyValidForMorePrediction
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayAbility::IsPredictionKeyValidForMorePrediction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "IsPredictionKeyValidForMorePrediction");

	Params::GzGameplayAbility_IsPredictionKeyValidForMorePrediction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayAbility.K2_GetSourceObject
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilitySpecHandle       Handle                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGzGameplayAbility::K2_GetSourceObject(const struct FGameplayAbilitySpecHandle& Handle, const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayAbility", "K2_GetSourceObject");

	Params::GzGameplayAbility_K2_GetSourceObject Parms{};

	Parms.Handle = std::move(Handle);
	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_CharacterState.OnMovementModeChange
// (Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_CharacterState::OnMovementModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_CharacterState", "OnMovementModeChange");

	Params::GzGA_CharacterState_OnMovementModeChange Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.AddAbilityStateTag
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::AddAbilityStateTag(const struct FGameplayTag& Tag, const bool bReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "AddAbilityStateTag");

	Params::GzGA_BaseLimbAbility_AddAbilityStateTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.bReplicate = bReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.BP_OnGiveAbility
// (Event, Protected, BlueprintEvent)

void UGzGA_BaseLimbAbility::BP_OnGiveAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_OnGiveAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_BaseLimbAbility.BP_OnRemoveAbility
// (Event, Protected, BlueprintEvent)

void UGzGA_BaseLimbAbility::BP_OnRemoveAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_OnRemoveAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_BaseLimbAbility.CancelAbilityAfterInput
// (Final, Native, Private)
// Parameters:
// float                                   TimeWaited                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::CancelAbilityAfterInput(float TimeWaited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "CancelAbilityAfterInput");

	Params::GzGA_BaseLimbAbility_CancelAbilityAfterInput Parms{};

	Parms.TimeWaited = TimeWaited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.ClearAbilityStateTags
// (Final, Native, Protected, BlueprintCallable)

void UGzGA_BaseLimbAbility::ClearAbilityStateTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "ClearAbilityStateTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.EndAbilityWithAnimation
// (Final, Native, Protected, BlueprintCallable)

void UGzGA_BaseLimbAbility::EndAbilityWithAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "EndAbilityWithAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.OnChargesAttributeChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayAttribute               Attribute                                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::OnChargesAttributeChanged(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "OnChargesAttributeChanged");

	Params::GzGA_BaseLimbAbility_OnChargesAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.NewValue = NewValue;
	Parms.OldValue = OldValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.OnMontageEnded
// (Final, Native, Private)

void UGzGA_BaseLimbAbility::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.PlayAnimEffect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Effect                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::PlayAnimEffect(class UAnimMontage* Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "PlayAnimEffect");

	Params::GzGA_BaseLimbAbility_PlayAnimEffect Parms{};

	Parms.Effect = Effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.ReadAbilityConfig
// (Native, Event, Protected, BlueprintEvent)

void UGzGA_BaseLimbAbility::ReadAbilityConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "ReadAbilityConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.RemoveAbilityStateTag
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::RemoveAbilityStateTag(const struct FGameplayTag& Tag, const bool bReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "RemoveAbilityStateTag");

	Params::GzGA_BaseLimbAbility_RemoveAbilityStateTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.bReplicate = bReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.ResetCancelViaAbilityInput
// (Final, Native, Protected, BlueprintCallable)

void UGzGA_BaseLimbAbility::ResetCancelViaAbilityInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "ResetCancelViaAbilityInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.SetAimingState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bIsAiming                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::SetAimingState(bool bIsAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SetAimingState");

	Params::GzGA_BaseLimbAbility_SetAimingState Parms{};

	Parms.bIsAiming = bIsAiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.SetCancelViaAbilityInputEnabled
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bSetEnabled                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::SetCancelViaAbilityInputEnabled(const bool bSetEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SetCancelViaAbilityInputEnabled");

	Params::GzGA_BaseLimbAbility_SetCancelViaAbilityInputEnabled Parms{};

	Parms.bSetEnabled = bSetEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.SetLimbHandOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          HandOffset                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::SetLimbHandOffset(const struct FVector& HandOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SetLimbHandOffset");

	Params::GzGA_BaseLimbAbility_SetLimbHandOffset Parms{};

	Parms.HandOffset = std::move(HandOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.SetLimbHandShoulderDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::SetLimbHandShoulderDistance(const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SetLimbHandShoulderDistance");

	Params::GzGA_BaseLimbAbility_SetLimbHandShoulderDistance Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.SetLimbTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::SetLimbTargetLocation(const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SetLimbTargetLocation");

	Params::GzGA_BaseLimbAbility_SetLimbTargetLocation Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BaseLimbAbility.BP_GetAbilityComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* UGzGA_BaseLimbAbility::BP_GetAbilityComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_GetAbilityComponent");

	Params::GzGA_BaseLimbAbility_BP_GetAbilityComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.BP_GetAbilityData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartAbilityData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartAbilityData* UGzGA_BaseLimbAbility::BP_GetAbilityData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_GetAbilityData");

	Params::GzGA_BaseLimbAbility_BP_GetAbilityData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.BP_GetCurrentRemainingRechargeTimeAndDuration
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   TimeRemaining                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RechargeDuration                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::BP_GetCurrentRemainingRechargeTimeAndDuration(float* TimeRemaining, float* RechargeDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_GetCurrentRemainingRechargeTimeAndDuration");

	Params::GzGA_BaseLimbAbility_BP_GetCurrentRemainingRechargeTimeAndDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TimeRemaining != nullptr)
		*TimeRemaining = Parms.TimeRemaining;

	if (RechargeDuration != nullptr)
		*RechargeDuration = Parms.RechargeDuration;
}


// Function G01.GzGA_BaseLimbAbility.BP_GetTotalRemainingRechargeTimeAndDuration
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   TotalTimeRemaining                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalRechargeDuration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbAbility::BP_GetTotalRemainingRechargeTimeAndDuration(float* TotalTimeRemaining, float* TotalRechargeDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "BP_GetTotalRemainingRechargeTimeAndDuration");

	Params::GzGA_BaseLimbAbility_BP_GetTotalRemainingRechargeTimeAndDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TotalTimeRemaining != nullptr)
		*TotalTimeRemaining = Parms.TotalTimeRemaining;

	if (TotalRechargeDuration != nullptr)
		*TotalRechargeDuration = Parms.TotalRechargeDuration;
}


// Function G01.GzGA_BaseLimbAbility.GetAbilityChargePercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGA_BaseLimbAbility::GetAbilityChargePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetAbilityChargePercentage");

	Params::GzGA_BaseLimbAbility_GetAbilityChargePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetAbilityChargesAttribute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAttribute               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAttribute UGzGA_BaseLimbAbility::GetAbilityChargesAttribute() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetAbilityChargesAttribute");

	Params::GzGA_BaseLimbAbility_GetAbilityChargesAttribute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetActivationCost
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGA_BaseLimbAbility::GetActivationCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetActivationCost");

	Params::GzGA_BaseLimbAbility_GetActivationCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetCurrentCharges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGA_BaseLimbAbility::GetCurrentCharges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetCurrentCharges");

	Params::GzGA_BaseLimbAbility_GetCurrentCharges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartItemData*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartItemData* UGzGA_BaseLimbAbility::GetItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetItemData");

	Params::GzGA_BaseLimbAbility_GetItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetLimbComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* UGzGA_BaseLimbAbility::GetLimbComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetLimbComponent");

	Params::GzGA_BaseLimbAbility_GetLimbComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetLimbHandOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzGA_BaseLimbAbility::GetLimbHandOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetLimbHandOffset");

	Params::GzGA_BaseLimbAbility_GetLimbHandOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetLimbSocketWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzGA_BaseLimbAbility::GetLimbSocketWorldLocation(const class FName& SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetLimbSocketWorldLocation");

	Params::GzGA_BaseLimbAbility_GetLimbSocketWorldLocation Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetLimbTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzGA_BaseLimbAbility::GetLimbTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetLimbTargetLocation");

	Params::GzGA_BaseLimbAbility_GetLimbTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetMaxCharges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGA_BaseLimbAbility::GetMaxCharges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetMaxCharges");

	Params::GzGA_BaseLimbAbility_GetMaxCharges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetRechargeDuration
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGA_BaseLimbAbility::GetRechargeDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetRechargeDuration");

	Params::GzGA_BaseLimbAbility_GetRechargeDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.GetRechargeTypeTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzGA_BaseLimbAbility::GetRechargeTypeTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "GetRechargeTypeTag");

	Params::GzGA_BaseLimbAbility_GetRechargeTypeTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.IsInAimingState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_BaseLimbAbility::IsInAimingState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "IsInAimingState");

	Params::GzGA_BaseLimbAbility_IsInAimingState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.IsRecharging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_BaseLimbAbility::IsRecharging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "IsRecharging");

	Params::GzGA_BaseLimbAbility_IsRecharging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbAbility.SendLimbAbilityUsageMessage
// (Final, Native, Private, Const)

void UGzGA_BaseLimbAbility::SendLimbAbilityUsageMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbAbility", "SendLimbAbilityUsageMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.OnAbilityInputReleased
// (Native, Protected)

void UGzGA_Charge_LimbAbility::OnAbilityInputReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "OnAbilityInputReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.OnAimingShootingMontageCompleted
// (Native, Protected)

void UGzGA_Charge_LimbAbility::OnAimingShootingMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "OnAimingShootingMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.OnAssetsLoaded
// (Native, Protected)

void UGzGA_Charge_LimbAbility::OnAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "OnAssetsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.OnCooldownStopped
// (Final, Native, Protected)

void UGzGA_Charge_LimbAbility::OnCooldownStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "OnCooldownStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.StartCooldown
// (Final, Native, Protected)

void UGzGA_Charge_LimbAbility::StartCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "StartCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Charge_LimbAbility.TriggerAbility
// (Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Charge_LimbAbility::TriggerAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Charge_LimbAbility", "TriggerAbility");

	Params::GzGA_Charge_LimbAbility_TriggerAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_ChargeProjectile.Server_ReceiveClientTargetData
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_ChargeProjectile::Server_ReceiveClientTargetData(const struct FGameplayAbilityTargetDataHandle& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargeProjectile", "Server_ReceiveClientTargetData");

	Params::GzGA_ChargeProjectile_Server_ReceiveClientTargetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GameplayPerformanceTrackerSystem.PrintPerformanceStats
// (Final, Native, Protected)

void UGameplayPerformanceTrackerSystem::PrintPerformanceStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayPerformanceTrackerSystem", "PrintPerformanceStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWE_DamageAware.OnDamageRecieved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzServerDamageInfo              DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzWE_DamageAware::OnDamageRecieved(const struct FGzServerDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWE_DamageAware", "OnDamageRecieved");

	Params::GzWE_DamageAware_OnDamageRecieved Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPawnControlsComponent.OnPawnRestarted
// (Native, Protected)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPawnControlsComponent::OnPawnRestarted(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPawnControlsComponent", "OnPawnRestarted");

	Params::GzPawnControlsComponent_OnPawnRestarted Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPawnControlsComponent.PopInputMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInputConfigBindingHandle      InHandle                                               (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzPawnControlsComponent::PopInputMapping(struct FGzInputConfigBindingHandle& InHandle, const struct FModifyContextOptions& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPawnControlsComponent", "PopInputMapping");

	Params::GzPawnControlsComponent_PopInputMapping Parms{};

	Parms.InHandle = std::move(InHandle);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InHandle = std::move(Parms.InHandle);
}


// Function G01.GzPawnControlsComponent.PushInputMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzPawnInputMappingConfig*        InMappingConfig                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzInputConfigBindingHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInputConfigBindingHandle UGzPawnControlsComponent::PushInputMapping(class UGzPawnInputMappingConfig* InMappingConfig, const struct FModifyContextOptions& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPawnControlsComponent", "PushInputMapping");

	Params::GzPawnControlsComponent_PushInputMapping Parms{};

	Parms.InMappingConfig = InMappingConfig;
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPawnControlsComponent.SetupPlayerControls
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UEnhancedInputComponent*          PlayerInputComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPawnControlsComponent::SetupPlayerControls(class UEnhancedInputComponent* PlayerInputComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPawnControlsComponent", "SetupPlayerControls");

	Params::GzPawnControlsComponent_SetupPlayerControls Parms{};

	Parms.PlayerInputComponent = PlayerInputComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPawnControlsComponent.TeardownPlayerControls
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UEnhancedInputComponent*          PlayerInputComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPawnControlsComponent::TeardownPlayerControls(class UEnhancedInputComponent* PlayerInputComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPawnControlsComponent", "TeardownPlayerControls");

	Params::GzPawnControlsComponent_TeardownPlayerControls Parms{};

	Parms.PlayerInputComponent = PlayerInputComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz3DDamageIndicationSubsystem.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz3DDamageIndicationSubsystem::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz3DDamageIndicationSubsystem", "OnPawnChanged");

	Params::Gz3DDamageIndicationSubsystem_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz3DDamageIndicator.OnInit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzDamageDirectionData           InDamageData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGz3DDamageIndicator::OnInit(const struct FGzDamageDirectionData& InDamageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz3DDamageIndicator", "OnInit");

	Params::Gz3DDamageIndicator_OnInit Parms{};

	Parms.InDamageData = std::move(InDamageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.Gz3DDamageIndicator.OnRepeat
// (Event, Protected, BlueprintEvent)

void AGz3DDamageIndicator::OnRepeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz3DDamageIndicator", "OnRepeat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.Gz3DDamageIndicator.Stop
// (Final, Native, Protected, BlueprintCallable)

void AGz3DDamageIndicator::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz3DDamageIndicator", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.BP_OnDashEnded
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnDashEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnDashEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnDashStarted
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnDashStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnDashStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnFalling
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnFalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnFalling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnJumpStarted
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnJumpStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnJumpStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnLanding
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnLanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnLanding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnSmashLanding
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::BP_OnSmashLanding(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnSmashLanding");

	Params::GzGA_SmashLanding_BP_OnSmashLanding Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_SmashLanding.BP_OnTargetChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsOutOfRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::BP_OnTargetChanged(bool bIsOutOfRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnTargetChanged");

	Params::GzGA_SmashLanding_BP_OnTargetChanged Parms{};

	Parms.bIsOutOfRange = bIsOutOfRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_SmashLanding.BP_OnTargetingEnded
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnTargetingEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnTargetingEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.BP_OnTargetingStarted
// (Event, Protected, BlueprintEvent)

void UGzGA_SmashLanding::BP_OnTargetingStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "BP_OnTargetingStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmashLanding.OnAttackInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::OnAttackInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnAttackInputPressed");

	Params::GzGA_SmashLanding_OnAttackInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.OnCharacterLanded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::OnCharacterLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnCharacterLanded");

	Params::GzGA_SmashLanding_OnCharacterLanded Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.OnDashStopped
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::OnDashStopped(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnDashStopped");

	Params::GzGA_SmashLanding_OnDashStopped Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.OnDependenciesLoaded
// (Final, Native, Protected)

void UGzGA_SmashLanding::OnDependenciesLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnDependenciesLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.OnTargetingTaskEnded
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasCompleted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::OnTargetingTaskEnded(bool bWasCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnTargetingTaskEnded");

	Params::GzGA_SmashLanding_OnTargetingTaskEnded Parms{};

	Parms.bWasCompleted = bWasCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.OnTargetingTick
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::OnTargetingTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "OnTargetingTick");

	Params::GzGA_SmashLanding_OnTargetingTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmashLanding.ServerHandleClientDashHitData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_SmashLanding::ServerHandleClientDashHitData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmashLanding", "ServerHandleClientDashHitData");

	Params::GzGA_SmashLanding_ServerHandleClientDashHitData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.DispatchUIMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMission::DispatchUIMessage(const struct FGameplayTag& Tag, const class FText& Text, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "DispatchUIMessage");

	Params::GzMission_DispatchUIMessage Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Text = std::move(Text);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.HandleMissionReadyToStart
// (Native, Event, Protected, BlueprintEvent)

void AGzMission::HandleMissionReadyToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "HandleMissionReadyToStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.HandleParticipantConnectionChanged
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMission::HandleParticipantConnectionChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "HandleParticipantConnectionChanged");

	Params::GzMission_HandleParticipantConnectionChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.OnRep_MissionOwner
// (Final, Native, Private)

void AGzMission::OnRep_MissionOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "OnRep_MissionOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.OnRep_MissionState
// (Final, Native, Private)
// Parameters:
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzMission::OnRep_MissionState(const struct FGzMissionState& OldState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "OnRep_MissionState");

	Params::GzMission_OnRep_MissionState Parms{};

	Parms.OldState = std::move(OldState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMission.GetMissionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMissionData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMissionData* AGzMission::GetMissionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "GetMissionData");

	Params::GzMission_GetMissionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMission.GetMissionInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* AGzMission::GetMissionInstigator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "GetMissionInstigator");

	Params::GzMission_GetMissionInstigator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMission.GetMissionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AGzMission::GetMissionName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "GetMissionName");

	Params::GzMission_GetMissionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMission.GetMissionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzMissionState                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzMissionState AGzMission::GetMissionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "GetMissionState");

	Params::GzMission_GetMissionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMission.GetRuntimeId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzMission::GetRuntimeId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMission", "GetRuntimeId");

	Params::GzMission_GetRuntimeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.AdvanceTimeByDistanceMatching
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      SequenceEvaluator                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DistanceTraveled                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DistanceCurveName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PlayRateClamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceEvaluatorReference UGzLayerCharacterAnimInstance::AdvanceTimeByDistanceMatching(const struct FAnimUpdateContext& UpdateContext, const struct FSequenceEvaluatorReference& SequenceEvaluator, float DistanceTraveled, class FName DistanceCurveName, const struct FVector2D& PlayRateClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "AdvanceTimeByDistanceMatching");

	Params::GzLayerCharacterAnimInstance_AdvanceTimeByDistanceMatching Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.SequenceEvaluator = std::move(SequenceEvaluator);
	Parms.DistanceTraveled = DistanceTraveled;
	Parms.DistanceCurveName = DistanceCurveName;
	Parms.PlayRateClamp = std::move(PlayRateClamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.DistanceMatchToTarget
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSequenceEvaluatorReference      SequenceEvaluator                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DistanceToTarget                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DistanceCurveName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceEvaluatorReference UGzLayerCharacterAnimInstance::DistanceMatchToTarget(const struct FSequenceEvaluatorReference& SequenceEvaluator, float DistanceToTarget, class FName DistanceCurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "DistanceMatchToTarget");

	Params::GzLayerCharacterAnimInstance_DistanceMatchToTarget Parms{};

	Parms.SequenceEvaluator = std::move(SequenceEvaluator);
	Parms.DistanceToTarget = DistanceToTarget;
	Parms.DistanceCurveName = DistanceCurveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.SetDefaultAnimInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    NewAnimInstance                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLayerCharacterAnimInstance::SetDefaultAnimInstance(class UAnimInstance* NewAnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "SetDefaultAnimInstance");

	Params::GzLayerCharacterAnimInstance_SetDefaultAnimInstance Parms{};

	Parms.NewAnimInstance = NewAnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLayerCharacterAnimInstance.SetPlayrateToMatchSpeed
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSequencePlayerReference         SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedToMatch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PlayRateClamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequencePlayerReference         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequencePlayerReference UGzLayerCharacterAnimInstance::SetPlayrateToMatchSpeed(const struct FSequencePlayerReference& SequencePlayer, float SpeedToMatch, const struct FVector2D& PlayRateClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "SetPlayrateToMatchSpeed");

	Params::GzLayerCharacterAnimInstance_SetPlayrateToMatchSpeed Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.SpeedToMatch = SpeedToMatch;
	Parms.PlayRateClamp = std::move(PlayRateClamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.GetDefaultAnimInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimInstance* UGzLayerCharacterAnimInstance::GetDefaultAnimInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "GetDefaultAnimInstance");

	Params::GzLayerCharacterAnimInstance_GetDefaultAnimInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.GetLayerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLayerItemType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLayerItemType UGzLayerCharacterAnimInstance::GetLayerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "GetLayerType");

	Params::GzLayerCharacterAnimInstance_GetLayerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.PredictGroundMovementPivotLocation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Acceleration                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GroundFriction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzLayerCharacterAnimInstance::PredictGroundMovementPivotLocation(const struct FVector& Acceleration, const struct FVector& Velocity, float GroundFriction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "PredictGroundMovementPivotLocation");

	Params::GzLayerCharacterAnimInstance_PredictGroundMovementPivotLocation Parms{};

	Parms.Acceleration = std::move(Acceleration);
	Parms.Velocity = std::move(Velocity);
	Parms.GroundFriction = GroundFriction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLayerCharacterAnimInstance.PredictGroundMovementStopLocation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSeparateBrakingFriction                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BrakingFriction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GroundFriction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BrakingFrictionFactor                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BrakingDecelerationWalking                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzLayerCharacterAnimInstance::PredictGroundMovementStopLocation(const struct FVector& Velocity, bool bUseSeparateBrakingFriction, float BrakingFriction, float GroundFriction, float BrakingFrictionFactor, float BrakingDecelerationWalking) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLayerCharacterAnimInstance", "PredictGroundMovementStopLocation");

	Params::GzLayerCharacterAnimInstance_PredictGroundMovementStopLocation Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.bUseSeparateBrakingFriction = bUseSeparateBrakingFriction;
	Parms.BrakingFriction = BrakingFriction;
	Parms.GroundFriction = GroundFriction;
	Parms.BrakingFrictionFactor = BrakingFrictionFactor;
	Parms.BrakingDecelerationWalking = BrakingDecelerationWalking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterCustomizationCheatExtension.SetNextCustomizationPreset
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzCharacterCustomizationCheatExtension::SetNextCustomizationPreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationCheatExtension", "SetNextCustomizationPreset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationCheatExtension.SetPrevCustomizationPreset
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzCharacterCustomizationCheatExtension::SetPrevCustomizationPreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationCheatExtension", "SetPrevCustomizationPreset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationCheatExtension.SetJetpackVisibility
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationCheatExtension::SetJetpackVisibility(bool bNewVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationCheatExtension", "SetJetpackVisibility");

	Params::GzCharacterCustomizationCheatExtension_SetJetpackVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilityHelper.GetAvatar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzAbilityHelper::GetAvatar(class UAbilitySystemComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetAvatar");

	Params::GzAbilityHelper_GetAvatar Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityHelper.GetGameplayEffectDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGameplayEffect> UGzAbilityHelper::GetGameplayEffectDefinition(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetGameplayEffectDefinition");

	Params::GzAbilityHelper_GetGameplayEffectDefinition Parms{};

	Parms.Target = Target;
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityHelper.GetInstigatorOfEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilitySystemComponent* UGzAbilityHelper::GetInstigatorOfEffect(const struct FGameplayEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetInstigatorOfEffect");

	Params::GzAbilityHelper_GetInstigatorOfEffect Parms{};

	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityHelper.GetOwner
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzAbilityHelper::GetOwner(class UAbilitySystemComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetOwner");

	Params::GzAbilityHelper_GetOwner Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityHelper.GetPlayerIdFromASC
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          ASC                                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzAbilityHelper::GetPlayerIdFromASC(const class UAbilitySystemComponent* ASC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetPlayerIdFromASC");

	Params::GzAbilityHelper_GetPlayerIdFromASC Parms{};

	Parms.ASC = ASC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityHelper.GetTeammatesOfASCOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzCharacter*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzCharacter*> UGzAbilityHelper::GetTeammatesOfASCOwner(class UAbilitySystemComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilityHelper", "GetTeammatesOfASCOwner");

	Params::GzAbilityHelper_GetTeammatesOfASCOwner Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.SendGameplayEventToActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     EventTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzAbilitySystemComponent::SendGameplayEventToActor(class AActor* Actor, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAbilitySystemComponent", "SendGameplayEventToActor");

	Params::GzAbilitySystemComponent_SendGameplayEventToActor Parms{};

	Parms.Actor = Actor;
	Parms.EventTag = std::move(EventTag);
	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.AddGameplayCueLocal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           GameplayCueParameters                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "AddGameplayCueLocal");

	Params::GzAbilitySystemComponent_AddGameplayCueLocal Parms{};

	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.GameplayCueParameters = std::move(GameplayCueParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.BP_ApplyGameplayEffectFromActor
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EffectCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EffectOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UGzAbilitySystemComponent::BP_ApplyGameplayEffectFromActor(TSubclassOf<class UGameplayEffect> GameplayEffectClass, class AActor* EffectCauser, const struct FVector& EffectOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "BP_ApplyGameplayEffectFromActor");

	Params::GzAbilitySystemComponent_BP_ApplyGameplayEffectFromActor Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.EffectCauser = EffectCauser;
	Parms.EffectOrigin = std::move(EffectOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.BP_ApplyGameplayEffectFromActorWithCustomMagnitudes
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EffectCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, float>        SetSetByCallerMagnitudes                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          EffectOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UGzAbilitySystemComponent::BP_ApplyGameplayEffectFromActorWithCustomMagnitudes(TSubclassOf<class UGameplayEffect> GameplayEffectClass, class AActor* EffectCauser, const TMap<struct FGameplayTag, float>& SetSetByCallerMagnitudes, const struct FVector& EffectOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "BP_ApplyGameplayEffectFromActorWithCustomMagnitudes");

	Params::GzAbilitySystemComponent_BP_ApplyGameplayEffectFromActorWithCustomMagnitudes Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.EffectCauser = EffectCauser;
	Parms.SetSetByCallerMagnitudes = std::move(SetSetByCallerMagnitudes);
	Parms.EffectOrigin = std::move(EffectOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.BP_ApplyGameplayEffectToSelfWithPrediction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     EffectContext                                          (Parm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UGzAbilitySystemComponent::BP_ApplyGameplayEffectToSelfWithPrediction(TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Level, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "BP_ApplyGameplayEffectToSelfWithPrediction");

	Params::GzAbilitySystemComponent_BP_ApplyGameplayEffectToSelfWithPrediction Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Level = Level;
	Parms.EffectContext = std::move(EffectContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.BP_ApplyGameplayEffectToTargetWithPrediction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     Context                                                (Parm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UGzAbilitySystemComponent::BP_ApplyGameplayEffectToTargetWithPrediction(TSubclassOf<class UGameplayEffect> GameplayEffectClass, class UAbilitySystemComponent* Target, float Level, const struct FGameplayEffectContextHandle& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "BP_ApplyGameplayEffectToTargetWithPrediction");

	Params::GzAbilitySystemComponent_BP_ApplyGameplayEffectToTargetWithPrediction Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Target = Target;
	Parms.Level = Level;
	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.CancelAbilityByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayAbility>     InAbilityToCancel                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::CancelAbilityByClass(TSubclassOf<class UGameplayAbility> InAbilityToCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "CancelAbilityByClass");

	Params::GzAbilitySystemComponent_CancelAbilityByClass Parms{};

	Parms.InAbilityToCancel = InAbilityToCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.CancelAbilityByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::CancelAbilityByTag(const struct FGameplayTag& AbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "CancelAbilityByTag");

	Params::GzAbilitySystemComponent_CancelAbilityByTag Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.ClientPreEndAbility
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// struct FGameplayAbilitySpecHandle       AbilityToPreEnd                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActivationInfo   ActivationInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bWasCancelled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::ClientPreEndAbility(const struct FGameplayAbilitySpecHandle& AbilityToPreEnd, const struct FGameplayAbilityActivationInfo& ActivationInfo, bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "ClientPreEndAbility");

	Params::GzAbilitySystemComponent_ClientPreEndAbility Parms{};

	Parms.AbilityToPreEnd = std::move(AbilityToPreEnd);
	Parms.ActivationInfo = std::move(ActivationInfo);
	Parms.bWasCancelled = bWasCancelled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.ExecuteGameplayCueLocal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           GameplayCueParameters                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "ExecuteGameplayCueLocal");

	Params::GzAbilitySystemComponent_ExecuteGameplayCueLocal Parms{};

	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.GameplayCueParameters = std::move(GameplayCueParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.FindAbilitiesFromAbilityTag
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGameplayAbility*>         OutAbilities                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::FindAbilitiesFromAbilityTag(const struct FGameplayTag& AbilityTag, TArray<class UGameplayAbility*>* OutAbilities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "FindAbilitiesFromAbilityTag");

	Params::GzAbilitySystemComponent_FindAbilitiesFromAbilityTag Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAbilities != nullptr)
		*OutAbilities = std::move(Parms.OutAbilities);
}


// Function G01.GzAbilitySystemComponent.FindAbilitySpecHandleForClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGameplayAbility>     AbilityClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalSourceObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAbilitySpecHandle UGzAbilitySystemComponent::FindAbilitySpecHandleForClass(TSubclassOf<class UGameplayAbility> AbilityClass, class UObject* OptionalSourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "FindAbilitySpecHandleForClass");

	Params::GzAbilitySystemComponent_FindAbilitySpecHandleForClass Parms{};

	Parms.AbilityClass = AbilityClass;
	Parms.OptionalSourceObject = OptionalSourceObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.LinkAbilityAnimLayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzGameplayAbility*               ActivatingAbility                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             AnimLayer                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::LinkAbilityAnimLayer(class UGzGameplayAbility* ActivatingAbility, const TSoftClassPtr<class UClass>& AnimLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "LinkAbilityAnimLayer");

	Params::GzAbilitySystemComponent_LinkAbilityAnimLayer Parms{};

	Parms.ActivatingAbility = ActivatingAbility;
	Parms.AnimLayer = AnimLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.RemoveGameplayCueLocal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           GameplayCueParameters                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "RemoveGameplayCueLocal");

	Params::GzAbilitySystemComponent_RemoveGameplayCueLocal Parms{};

	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.GameplayCueParameters = std::move(GameplayCueParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.ServerPreEndAbility
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FGameplayAbilitySpecHandle       AbilityToPreEnd                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActivationInfo   ActivationInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPredictionKey                   PredictionKey                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasCancelled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::ServerPreEndAbility(const struct FGameplayAbilitySpecHandle& AbilityToPreEnd, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FPredictionKey& PredictionKey, bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "ServerPreEndAbility");

	Params::GzAbilitySystemComponent_ServerPreEndAbility Parms{};

	Parms.AbilityToPreEnd = std::move(AbilityToPreEnd);
	Parms.ActivationInfo = std::move(ActivationInfo);
	Parms.PredictionKey = std::move(PredictionKey);
	Parms.bWasCancelled = bWasCancelled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.TryPressAbilityInputByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilitySystemComponent::TryPressAbilityInputByTag(const struct FGameplayTag& AbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "TryPressAbilityInputByTag");

	Params::GzAbilitySystemComponent_TryPressAbilityInputByTag Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.TryReleaseAbilityInputByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilitySystemComponent::TryReleaseAbilityInputByTag(const struct FGameplayTag& AbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "TryReleaseAbilityInputByTag");

	Params::GzAbilitySystemComponent_TryReleaseAbilityInputByTag Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.UnlinkAbilityAnimLayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzGameplayAbility*               ActivatingAbility                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             AnimLayer                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::UnlinkAbilityAnimLayer(class UGzGameplayAbility* ActivatingAbility, const TSoftClassPtr<class UClass>& AnimLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "UnlinkAbilityAnimLayer");

	Params::GzAbilitySystemComponent_UnlinkAbilityAnimLayer Parms{};

	Parms.ActivatingAbility = ActivatingAbility;
	Parms.AnimLayer = AnimLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilitySystemComponent.ApplyAdditionalDamageMultipliers
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayEffectSpecHandle        SpecHandle                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, float>        AdditionalMultipliers                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAbilitySystemComponent::ApplyAdditionalDamageMultipliers(struct FGameplayEffectSpecHandle* SpecHandle, const TMap<struct FGameplayTag, float>& AdditionalMultipliers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "ApplyAdditionalDamageMultipliers");

	Params::GzAbilitySystemComponent_ApplyAdditionalDamageMultipliers Parms{};

	Parms.AdditionalMultipliers = std::move(AdditionalMultipliers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpecHandle != nullptr)
		*SpecHandle = std::move(Parms.SpecHandle);
}


// Function G01.GzAbilitySystemComponent.CanActivateAbility
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilitySystemComponent::CanActivateAbility(const struct FGameplayTag& AbilityTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "CanActivateAbility");

	Params::GzAbilitySystemComponent_CanActivateAbility Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.GetDistanceInMetersToImpact
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ImpactPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzAbilitySystemComponent::GetDistanceInMetersToImpact(const struct FVector& ImpactPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "GetDistanceInMetersToImpact");

	Params::GzAbilitySystemComponent_GetDistanceInMetersToImpact Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.GetOngoingEffectDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameplayEffect>      EffectClass                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzAbilitySystemComponent::GetOngoingEffectDuration(const TSubclassOf<class UGameplayEffect> EffectClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "GetOngoingEffectDuration");

	Params::GzAbilitySystemComponent_GetOngoingEffectDuration Parms{};

	Parms.EffectClass = EffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.IsAbilityActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     AbilityTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilitySystemComponent::IsAbilityActive(const struct FGameplayTag& AbilityTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "IsAbilityActive");

	Params::GzAbilitySystemComponent_IsAbilityActive Parms{};

	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.IsTagBlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilitySystemComponent::IsTagBlocked(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "IsTagBlocked");

	Params::GzAbilitySystemComponent_IsTagBlocked Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.K2_GetTagCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     TagToCheck                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzAbilitySystemComponent::K2_GetTagCount(const struct FGameplayTag& TagToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "K2_GetTagCount");

	Params::GzAbilitySystemComponent_K2_GetTagCount Parms{};

	Parms.TagToCheck = std::move(TagToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.MakeEffectContextWithInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EffectCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayEffectContextHandle UGzAbilitySystemComponent::MakeEffectContextWithInstigator(class AActor* Instigator, class AActor* EffectCauser) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "MakeEffectContextWithInstigator");

	Params::GzAbilitySystemComponent_MakeEffectContextWithInstigator Parms{};

	Parms.Instigator = Instigator;
	Parms.EffectCauser = EffectCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilitySystemComponent.MakeOutgoingDamageSpec
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGzGE_BaseDamage>     GameplayDamageEffectClass                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectContextHandle     Context                                                (Parm, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RangeCoefficient                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FalloffStrengthCoefficient                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpecHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayEffectSpecHandle UGzAbilitySystemComponent::MakeOutgoingDamageSpec(TSubclassOf<class UGzGE_BaseDamage> GameplayDamageEffectClass, float Level, const struct FGameplayEffectContextHandle& Context, float Distance, float RangeCoefficient, float FalloffStrengthCoefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilitySystemComponent", "MakeOutgoingDamageSpec");

	Params::GzAbilitySystemComponent_MakeOutgoingDamageSpec Parms{};

	Parms.GameplayDamageEffectClass = GameplayDamageEffectClass;
	Parms.Level = Level;
	Parms.Context = std::move(Context);
	Parms.Distance = Distance;
	Parms.RangeCoefficient = RangeCoefficient;
	Parms.FalloffStrengthCoefficient = FalloffStrengthCoefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutSlot.OnLoadoutSlotReady_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutSelectionInitializeDataLoadoutInitializeData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzLoadoutSlot::OnLoadoutSlotReady_BP(const struct FGzLoadoutSelectionInitializeData& LoadoutInitializeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSlot", "OnLoadoutSlotReady_BP");

	Params::GzLoadoutSlot_OnLoadoutSlotReady_BP Parms{};

	Parms.LoadoutInitializeData = std::move(LoadoutInitializeData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutListBase.OnButtonCreated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzLoadoutSelectionButton*        NewButton                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutListBase::OnButtonCreated(class UGzLoadoutSelectionButton* NewButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListBase", "OnButtonCreated");

	Params::GzLoadoutListBase_OnButtonCreated Parms{};

	Parms.NewButton = NewButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutListBase.OnClear
// (Event, Protected, BlueprintEvent)

void UGzLoadoutListBase::OnClear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListBase", "OnClear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzViewpointClusterBase.GetViewpointNames
// (Native, Public, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGzViewpointClusterBase::GetViewpointNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewpointClusterBase", "GetViewpointNames");

	Params::GzViewpointClusterBase_GetViewpointNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityTaskConfig.CheckActivationRequirements
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayEventData               TriggerEventData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilityTaskConfig::CheckActivationRequirements(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& TriggerEventData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilityTaskConfig", "CheckActivationRequirements");

	Params::GzAbilityTaskConfig_CheckActivationRequirements Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.TriggerEventData = std::move(TriggerEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAbilityTaskConfig.CheckNetExecutionMode
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAbilityTaskConfig::CheckNetExecutionMode(const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilityTaskConfig", "CheckNetExecutionMode");

	Params::GzAbilityTaskConfig_CheckNetExecutionMode Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommonButton.SetText
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzCommonButton::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCommonButton", "SetText");

	Params::GzCommonButton_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilityTaskBase.OnFinished
// (Native, Protected)

void UGzAbilityTaskBase::OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilityTaskBase", "OnFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilityTaskBase.OnInterrupted
// (Native, Protected)

void UGzAbilityTaskBase::OnInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilityTaskBase", "OnInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAbilityTaskBase.OnStateEvent
// (Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAbilityTaskBase::OnStateEvent(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAbilityTaskBase", "OnStateEvent");

	Params::GzAbilityTaskBase_OnStateEvent Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInvComponent.AddItem
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvComponent::AddItem(struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "AddItem");

	Params::GzInvComponent_AddItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Item = std::move(Parms.Item);

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.DecreasePocketPriority
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvComponent::DecreasePocketPriority(const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "DecreasePocketPriority");

	Params::GzInvComponent_DecreasePocketPriority Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInvComponent.GetAllSlotsFromPocketDef
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzInvPocketType                        PocketType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AllowedTag                                             (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGameplayTag>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FGameplayTag> UGzInvComponent::GetAllSlotsFromPocketDef(const EGzInvPocketType PocketType, const struct FGameplayTag& AllowedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "GetAllSlotsFromPocketDef");

	Params::GzInvComponent_GetAllSlotsFromPocketDef Parms{};

	Parms.PocketType = PocketType;
	Parms.AllowedTag = std::move(AllowedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.IncreasePocketPriority
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvComponent::IncreasePocketPriority(const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "IncreasePocketPriority");

	Params::GzInvComponent_IncreasePocketPriority Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInvComponent.RemoveAllItemFromPocket
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvComponent::RemoveAllItemFromPocket(const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "RemoveAllItemFromPocket");

	Params::GzInvComponent_RemoveAllItemFromPocket Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.RemoveAllItems
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvComponent::RemoveAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "RemoveAllItems");

	Params::GzInvComponent_RemoveAllItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.RemoveItem
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvComponent::RemoveItem(const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "RemoveItem");

	Params::GzInvComponent_RemoveItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.RemoveItemFromPocket
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvComponent::RemoveItemFromPocket(const struct FGzInvPocketId& PocketId, const int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "RemoveItemFromPocket");

	Params::GzInvComponent_RemoveItemFromPocket Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.SetVirtualItem
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvComponent::SetVirtualItem(const struct FGzInvPocketId& PocketId, class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "SetVirtualItem");

	Params::GzInvComponent_SetVirtualItem Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInvComponent.TrySwapPockets
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   LeftPocketId                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   RightPocketId                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvComponent::TrySwapPockets(const struct FGzInvPocketId& LeftPocketId, const struct FGzInvPocketId& RightPocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "TrySwapPockets");

	Params::GzInvComponent_TrySwapPockets Parms{};

	Parms.LeftPocketId = std::move(LeftPocketId);
	Parms.RightPocketId = std::move(RightPocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.GetPocketById
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzInvPocket               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocket UGzInvComponent::GetPocketById(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "GetPocketById");

	Params::GzInvComponent_GetPocketById Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.GetPocketDefById
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzInvPocketDef            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocketDef UGzInvComponent::GetPocketDefById(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "GetPocketDefById");

	Params::GzInvComponent_GetPocketDefById Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvComponent.IsValidPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvComponent::IsValidPocket(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInvComponent", "IsValidPocket");

	Params::GzInvComponent_IsValidPocket Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.OnLimbAimingStart
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     AimingTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbAbilityComponent::OnLimbAimingStart(const struct FGameplayTag& AimingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnLimbAimingStart");

	Params::GzLimbAbilityComponent_OnLimbAimingStart Parms{};

	Parms.AimingTag = std::move(AimingTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnLimbAimingStop
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     AimingTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbAbilityComponent::OnLimbAimingStop(const struct FGameplayTag& AimingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnLimbAimingStop");

	Params::GzLimbAbilityComponent_OnLimbAimingStop Parms{};

	Parms.AimingTag = std::move(AimingTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnRechargeTimerTick
// (Final, Native, Protected)

void UGzLimbAbilityComponent::OnRechargeTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnRechargeTimerTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnRep_AbilityData
// (Native, Protected)

void UGzLimbAbilityComponent::OnRep_AbilityData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnRep_AbilityData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnRep_IsRecharging
// (Final, Native, Protected)
// Parameters:
// bool                                    bOldIsRecharging                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbAbilityComponent::OnRep_IsRecharging(const bool bOldIsRecharging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnRep_IsRecharging");

	Params::GzLimbAbilityComponent_OnRep_IsRecharging Parms{};

	Parms.bOldIsRecharging = bOldIsRecharging;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnRep_LimbType
// (Native, Protected)

void UGzLimbAbilityComponent::OnRep_LimbType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnRep_LimbType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.OnRep_RechargeProgress
// (Final, Native, Protected)

void UGzLimbAbilityComponent::OnRep_RechargeProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "OnRep_RechargeProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.SetLimbUIEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbAbilityComponent::SetLimbUIEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "SetLimbUIEnabled");

	Params::GzLimbAbilityComponent_SetLimbUIEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAbilityComponent.BP_GetAbilityData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartAbilityData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartAbilityData* UGzLimbAbilityComponent::BP_GetAbilityData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "BP_GetAbilityData");

	Params::GzLimbAbilityComponent_BP_GetAbilityData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetAbilityChargePercentage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbAbilityComponent::GetAbilityChargePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetAbilityChargePercentage");

	Params::GzLimbAbilityComponent_GetAbilityChargePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetAbilityInputData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartAbilityInputData*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartAbilityInputData* UGzLimbAbilityComponent::GetAbilityInputData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetAbilityInputData");

	Params::GzLimbAbilityComponent_GetAbilityInputData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetLimbAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzGA_BaseLimbAbility*      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzGA_BaseLimbAbility* UGzLimbAbilityComponent::GetLimbAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetLimbAbility");

	Params::GzLimbAbilityComponent_GetLimbAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetLimbComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* UGzLimbAbilityComponent::GetLimbComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetLimbComponent");

	Params::GzLimbAbilityComponent_GetLimbComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetLimbSocketWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzLimbAbilityComponent::GetLimbSocketWorldLocation(const class FName& SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetLimbSocketWorldLocation");

	Params::GzLimbAbilityComponent_GetLimbSocketWorldLocation Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetLimbType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLimbType UGzLimbAbilityComponent::GetLimbType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetLimbType");

	Params::GzLimbAbilityComponent_GetLimbType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetLimbUISystem
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLimbUIActivationSubsystem*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbUIActivationSubsystem* UGzLimbAbilityComponent::GetLimbUISystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetLimbUISystem");

	Params::GzLimbAbilityComponent_GetLimbUISystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetOwnerASC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAbilitySystemComponent* UGzLimbAbilityComponent::GetOwnerASC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetOwnerASC");

	Params::GzLimbAbilityComponent_GetOwnerASC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.GetOwnerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzMultiPartCharacter*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzMultiPartCharacter* UGzLimbAbilityComponent::GetOwnerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "GetOwnerCharacter");

	Params::GzLimbAbilityComponent_GetOwnerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.HasOwnerAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLimbAbilityComponent::HasOwnerAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "HasOwnerAuthority");

	Params::GzLimbAbilityComponent_HasOwnerAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAbilityComponent.IsOwnerLocallyControlled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLimbAbilityComponent::IsOwnerLocallyControlled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAbilityComponent", "IsOwnerLocallyControlled");

	Params::GzLimbAbilityComponent_IsOwnerLocallyControlled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGrappleHookComponent.MulticastDistributeHookLaunch
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::MulticastDistributeHookLaunch(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "MulticastDistributeHookLaunch");

	Params::GzGrappleHookComponent_MulticastDistributeHookLaunch Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.OnGrappleHookProjectileDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::OnGrappleHookProjectileDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "OnGrappleHookProjectileDestroyed");

	Params::GzGrappleHookComponent_OnGrappleHookProjectileDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.OnRep_GrappleHookState
// (Final, Native, Protected)
// Parameters:
// EGzGrappleHookState                     OldGrappleHookState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::OnRep_GrappleHookState(EGzGrappleHookState OldGrappleHookState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "OnRep_GrappleHookState");

	Params::GzGrappleHookComponent_OnRep_GrappleHookState Parms{};

	Parms.OldGrappleHookState = OldGrappleHookState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.ServerPullCharacterRequest
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::ServerPullCharacterRequest(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "ServerPullCharacterRequest");

	Params::GzGrappleHookComponent_ServerPullCharacterRequest Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.ServerRequestHookLaunch
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::ServerRequestHookLaunch(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "ServerRequestHookLaunch");

	Params::GzGrappleHookComponent_ServerRequestHookLaunch Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.ServerStopGrapple
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGrappleHookComponent::ServerStopGrapple(const struct FHitResult& HitResult, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "ServerStopGrapple");

	Params::GzGrappleHookComponent_ServerStopGrapple Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGrappleHookComponent.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzGrappleHookState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzGrappleHookState UGzGrappleHookComponent::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookComponent", "GetState");

	Params::GzGrappleHookComponent_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.AreFromSameTeam
// (Final, Native, Public, Const)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPlayerToPlayerInteractionMessage::AreFromSameTeam(const class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "AreFromSameTeam");

	Params::GzPlayerToPlayerInteractionMessage_AreFromSameTeam Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetInstigatorName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzPlayerToPlayerInteractionMessage::GetInstigatorName(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetInstigatorName");

	Params::GzPlayerToPlayerInteractionMessage_GetInstigatorName Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetInstigatorPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzPlayerToPlayerInteractionMessage::GetInstigatorPlayerState(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetInstigatorPlayerState");

	Params::GzPlayerToPlayerInteractionMessage_GetInstigatorPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetUIAssetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UGzPlayerToPlayerInteractionMessage::GetUIAssetIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetUIAssetIcon");

	Params::GzPlayerToPlayerInteractionMessage_GetUIAssetIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetUIAssetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzPlayerToPlayerInteractionMessage::GetUIAssetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetUIAssetId");

	Params::GzPlayerToPlayerInteractionMessage_GetUIAssetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetVictimName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzPlayerToPlayerInteractionMessage::GetVictimName(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetVictimName");

	Params::GzPlayerToPlayerInteractionMessage_GetVictimName Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerToPlayerInteractionMessage.GetVictimPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzPlayerToPlayerInteractionMessage::GetVictimPlayerState(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerToPlayerInteractionMessage", "GetVictimPlayerState");

	Params::GzPlayerToPlayerInteractionMessage_GetVictimPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAchievementServiceCheatExtension.ResetAccountAchievementProgress
// (Final, Exec, Native, Public)

void UGzAchievementServiceCheatExtension::ResetAccountAchievementProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAchievementServiceCheatExtension", "ResetAccountAchievementProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAchievementServiceCheatExtension.ClientCompleteAchievementStage
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             AchievementId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int8                                    AchievementStageToComplete                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAchievementServiceCheatExtension::ClientCompleteAchievementStage(const class FName& AchievementId, const int8 AchievementStageToComplete) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAchievementServiceCheatExtension", "ClientCompleteAchievementStage");

	Params::GzAchievementServiceCheatExtension_ClientCompleteAchievementStage Parms{};

	Parms.AchievementId = AchievementId;
	Parms.AchievementStageToComplete = AchievementStageToComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAchievementServiceCheatExtension.ClientResetAchievementProgress
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             AchievementId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAchievementServiceCheatExtension::ClientResetAchievementProgress(const class FName& AchievementId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAchievementServiceCheatExtension", "ClientResetAchievementProgress");

	Params::GzAchievementServiceCheatExtension_ClientResetAchievementProgress Parms{};

	Parms.AchievementId = AchievementId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAchievementServiceCheatExtension.ClientResetAllAchievements
// (Final, Exec, Native, Public, Const)

void UGzAchievementServiceCheatExtension::ClientResetAllAchievements() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAchievementServiceCheatExtension", "ClientResetAllAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAchievementServiceCheatExtension.ClientUpdateAchievementsProgress
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             AchievementId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProgressToAdd                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAchievementServiceCheatExtension::ClientUpdateAchievementsProgress(const class FName& AchievementId, const float ProgressToAdd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAchievementServiceCheatExtension", "ClientUpdateAchievementsProgress");

	Params::GzAchievementServiceCheatExtension_ClientUpdateAchievementsProgress Parms{};

	Parms.AchievementId = AchievementId;
	Parms.ProgressToAdd = ProgressToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutStatics.GetAuthorityLoadoutCost
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzLoadoutStatics::GetAuthorityLoadoutCost(const class UObject* WorldContext, const class FString& PlayFabId, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetAuthorityLoadoutCost");

	Params::GzLoadoutStatics_GetAuthorityLoadoutCost Parms{};

	Parms.WorldContext = WorldContext;
	Parms.PlayFabId = std::move(PlayFabId);
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetItemFromLocalLoadoutSlot
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLoadoutSlots                         SlotType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzLoadoutStatics::GetItemFromLocalLoadoutSlot(const class UObject* WorldContext, const struct FGuid& Guid, EGzLoadoutSlots SlotType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetItemFromLocalLoadoutSlot");

	Params::GzLoadoutStatics_GetItemFromLocalLoadoutSlot Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Guid = std::move(Guid);
	Parms.SlotType = SlotType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetItemsFromAuthorityLoadout
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzLoadoutStatics::GetItemsFromAuthorityLoadout(const class UObject* WorldContext, const class FString& PlayFabId, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetItemsFromAuthorityLoadout");

	Params::GzLoadoutStatics_GetItemsFromAuthorityLoadout Parms{};

	Parms.WorldContext = WorldContext;
	Parms.PlayFabId = std::move(PlayFabId);
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetItemsFromAuthorityLoadoutConfig
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutDataConfig             Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzLoadoutStatics::GetItemsFromAuthorityLoadoutConfig(const class UObject* WorldContext, const struct FGzLoadoutDataConfig& Config, const class FString& PlayFabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetItemsFromAuthorityLoadoutConfig");

	Params::GzLoadoutStatics_GetItemsFromAuthorityLoadoutConfig Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Config = std::move(Config);
	Parms.PlayFabId = std::move(PlayFabId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetItemsFromLocalLoadout
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzLoadoutStatics::GetItemsFromLocalLoadout(const class UObject* WorldContext, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetItemsFromLocalLoadout");

	Params::GzLoadoutStatics_GetItemsFromLocalLoadout Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetItemsFromLocalLoadoutConfig
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutDataConfig             Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzLoadoutStatics::GetItemsFromLocalLoadoutConfig(const class UObject* WorldContext, const struct FGzLoadoutDataConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetItemsFromLocalLoadoutConfig");

	Params::GzLoadoutStatics_GetItemsFromLocalLoadoutConfig Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetLoadoutItemsForSlotsFromConfig
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutDataConfig             Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TMap<EGzLoadoutSlots, struct FGzInvItem>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EGzLoadoutSlots, struct FGzInvItem> UGzLoadoutStatics::GetLoadoutItemsForSlotsFromConfig(const class UObject* WorldContext, const struct FGzLoadoutDataConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetLoadoutItemsForSlotsFromConfig");

	Params::GzLoadoutStatics_GetLoadoutItemsForSlotsFromConfig Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetLoadoutItemsForSlotsFromGuid
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EGzLoadoutSlots, struct FGzInvItem>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EGzLoadoutSlots, struct FGzInvItem> UGzLoadoutStatics::GetLoadoutItemsForSlotsFromGuid(const class UObject* WorldContext, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetLoadoutItemsForSlotsFromGuid");

	Params::GzLoadoutStatics_GetLoadoutItemsForSlotsFromGuid Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetLoadoutPriceMultiplier
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLoadoutStatics::GetLoadoutPriceMultiplier(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetLoadoutPriceMultiplier");

	Params::GzLoadoutStatics_GetLoadoutPriceMultiplier Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetLocalLoadoutCost
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzLoadoutStatics::GetLocalLoadoutCost(const class UObject* WorldContext, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetLocalLoadoutCost");

	Params::GzLoadoutStatics_GetLocalLoadoutCost Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetLocalLoadoutName
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzLoadoutStatics::GetLocalLoadoutName(const class UObject* WorldContext, const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetLocalLoadoutName");

	Params::GzLoadoutStatics_GetLocalLoadoutName Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetPlayerLocalLoadoutGuids
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> UGzLoadoutStatics::GetPlayerLocalLoadoutGuids(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetPlayerLocalLoadoutGuids");

	Params::GzLoadoutStatics_GetPlayerLocalLoadoutGuids Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.GetSharedLocalLoadoutGuids
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> UGzLoadoutStatics::GetSharedLocalLoadoutGuids(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "GetSharedLocalLoadoutGuids");

	Params::GzLoadoutStatics_GetSharedLocalLoadoutGuids Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.HasPlayerLocalLoadouts
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutStatics::HasPlayerLocalLoadouts(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "HasPlayerLocalLoadouts");

	Params::GzLoadoutStatics_HasPlayerLocalLoadouts Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.HasSharedLocalLoadouts
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutStatics::HasSharedLocalLoadouts(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "HasSharedLocalLoadouts");

	Params::GzLoadoutStatics_HasSharedLocalLoadouts Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutStatics.IsValidLoadoutConfig
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzLoadoutDataConfig             Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutStatics::IsValidLoadoutConfig(const struct FGzLoadoutDataConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLoadoutStatics", "IsValidLoadoutConfig");

	Params::GzLoadoutStatics_IsValidLoadoutConfig Parms{};

	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationWidget.GetInitialMousePosition
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGzNavigationWidget::GetInitialMousePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "GetInitialMousePosition");

	Params::GzNavigationWidget_GetInitialMousePosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationWidget.OnBackAction
// (Native, Event, Protected, BlueprintEvent)

void UGzNavigationWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.OnClickAction
// (Native, Event, Protected, BlueprintEvent)

void UGzNavigationWidget::OnClickAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnClickAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.OnCloseAction
// (Native, Event, Protected, BlueprintEvent)

void UGzNavigationWidget::OnCloseAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnCloseAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.OnPawnChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationWidget::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnPawnChanged");

	Params::GzNavigationWidget_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.OnVoiceChatActive
// (Final, Native, Protected)

void UGzNavigationWidget::OnVoiceChatActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnVoiceChatActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.OnVoiceChatInactive
// (Final, Native, Protected)

void UGzNavigationWidget::OnVoiceChatInactive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "OnVoiceChatInactive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.RegisterBinding
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInputActionBindingHandle      BindingHandle                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bDisplayInBar                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConsumeInput                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             InputEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationWidget::RegisterBinding(class UInputAction* InputAction, const TDelegate<void()>& Callback, struct FGzInputActionBindingHandle* BindingHandle, bool bDisplayInBar, bool bConsumeInput, EInputEvent InputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "RegisterBinding");

	Params::GzNavigationWidget_RegisterBinding Parms{};

	Parms.InputAction = InputAction;
	Parms.Callback = Callback;
	Parms.bDisplayInBar = bDisplayInBar;
	Parms.bConsumeInput = bConsumeInput;
	Parms.InputEvent = InputEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BindingHandle != nullptr)
		*BindingHandle = std::move(Parms.BindingHandle);
}


// Function G01.GzNavigationWidget.RemoveFromLayer
// (Final, Native, Public, BlueprintCallable)

void UGzNavigationWidget::RemoveFromLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "RemoveFromLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.ShouldFlushInputOnOpening
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzNavigationWidget::ShouldFlushInputOnOpening()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "ShouldFlushInputOnOpening");

	Params::GzNavigationWidget_ShouldFlushInputOnOpening Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationWidget.UnregisterBinding
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGzInputActionBindingHandle      BindingHandle                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzNavigationWidget::UnregisterBinding(const struct FGzInputActionBindingHandle& BindingHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "UnregisterBinding");

	Params::GzNavigationWidget_UnregisterBinding Parms{};

	Parms.BindingHandle = std::move(BindingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.UpdateAcceptButton
// (Final, Native, Private)
// Parameters:
// ECommonInputType                        NewInputType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationWidget::UpdateAcceptButton(ECommonInputType NewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "UpdateAcceptButton");

	Params::GzNavigationWidget_UpdateAcceptButton Parms{};

	Parms.NewInputType = NewInputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationWidget.CanBeAddedToLayer
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzNavigationWidget::CanBeAddedToLayer(class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "CanBeAddedToLayer");

	Params::GzNavigationWidget_CanBeAddedToLayer Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationWidget.DoesAllowDuplicates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzNavigationWidget::DoesAllowDuplicates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "DoesAllowDuplicates");

	Params::GzNavigationWidget_DoesAllowDuplicates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationWidget.GetLayerKey
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzNavigationWidget::GetLayerKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationWidget", "GetLayerKey");

	Params::GzNavigationWidget_GetLayerKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionCondition.IsAutoInteractionConditionPassed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGzCharacter*                     InteractedBy                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InteractableOwner                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractionCondition::IsAutoInteractionConditionPassed(const class AGzCharacter* InteractedBy, const class AActor* InteractableOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionCondition", "IsAutoInteractionConditionPassed");

	Params::GzInteractionCondition_IsAutoInteractionConditionPassed Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.InteractableOwner = InteractableOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionCondition.IsInteractionConditionPassed
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzCharacter*                     InteractedBy                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InteractableOwner                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractionCondition::IsInteractionConditionPassed(const class AGzCharacter* InteractedBy, const class AActor* InteractableOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionCondition", "IsInteractionConditionPassed");

	Params::GzInteractionCondition_IsInteractionConditionPassed Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.InteractableOwner = InteractableOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionCondition.GetOwnerActor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzInteractionCondition::GetOwnerActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionCondition", "GetOwnerActor");

	Params::GzInteractionCondition_GetOwnerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionCondition.GetOwnerASC
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilitySystemComponent* UGzInteractionCondition::GetOwnerASC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionCondition", "GetOwnerASC");

	Params::GzInteractionCondition_GetOwnerASC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStateAction.CheckNetExecutionMode
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStateAction::CheckNetExecutionMode(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStateAction", "CheckNetExecutionMode");

	Params::GzStateAction_CheckNetExecutionMode Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStateAction.K2_CanActivate
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzGameplayAbility*               GameplayAbility                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStateAction::K2_CanActivate(const class UGzGameplayAbility* GameplayAbility, const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStateAction", "K2_CanActivate");

	Params::GzStateAction_K2_CanActivate Parms{};

	Parms.GameplayAbility = GameplayAbility;
	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzStateAction.K2_OnActivate
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzGameplayAbility*               GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStateAction::K2_OnActivate(class UGzGameplayAbility* GameplayAbility, const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStateAction", "K2_OnActivate");

	Params::GzStateAction_K2_OnActivate Parms{};

	Parms.GameplayAbility = GameplayAbility;
	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzStateAction.K2_OnDeactivate
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzGameplayAbility*               GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStateAction::K2_OnDeactivate(class UGzGameplayAbility* GameplayAbility, const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStateAction", "K2_OnDeactivate");

	Params::GzStateAction_K2_OnDeactivate Parms{};

	Parms.GameplayAbility = GameplayAbility;
	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzSA_ActionOnTimer.OnEvent
// (Final, Native, Public)
// Parameters:
// struct FGameplayEventData               TriggerEventData                                       (Parm, NativeAccessSpecifierPublic)

void UGzSA_ActionOnTimer::OnEvent(const struct FGameplayEventData& TriggerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSA_ActionOnTimer", "OnEvent");

	Params::GzSA_ActionOnTimer_OnEvent Parms{};

	Parms.TriggerEventData = std::move(TriggerEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.RefreshIcon
// (Final, Native, Protected, BlueprintCallable)

void UGzActionWidget::RefreshIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "RefreshIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetActionProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ProgressValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetActionProgress(float ProgressValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetActionProgress");

	Params::GzActionWidget_SetActionProgress Parms{};

	Parms.ProgressValue = ProgressValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetAlwaysHide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHide                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetAlwaysHide(const bool bHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetAlwaysHide");

	Params::GzActionWidget_SetAlwaysHide Parms{};

	Parms.bHide = bHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetAsHoldAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAsHoldAction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetAsHoldAction(bool bInAsHoldAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetAsHoldAction");

	Params::GzActionWidget_SetAsHoldAction Parms{};

	Parms.bInAsHoldAction = bInAsHoldAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetAssociatedInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     NewInputAction                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetAssociatedInputAction(class UInputAction* NewInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetAssociatedInputAction");

	Params::GzActionWidget_SetAssociatedInputAction Parms{};

	Parms.NewInputAction = NewInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetState(const struct FGameplayTag& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetState");

	Params::GzActionWidget_SetState Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzActionWidget.SetTheme
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     ThemeTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzActionWidget::SetTheme(const struct FGameplayTag& ThemeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzActionWidget", "SetTheme");

	Params::GzActionWidget_SetTheme Parms{};

	Parms.ThemeTag = std::move(ThemeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ToggleSprint.OnFinish
// (Final, Native, Protected)

void UGzGA_ToggleSprint::OnFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ToggleSprint", "OnFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCohtmlUserWidget.AllowTriggerEvents
// (Final, Native, Private)

void UGzCohtmlUserWidget::AllowTriggerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCohtmlUserWidget", "AllowTriggerEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCohtmlUserWidget.DeinitializeCohtmlUI
// (Final, Native, Private)

void UGzCohtmlUserWidget::DeinitializeCohtmlUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCohtmlUserWidget", "DeinitializeCohtmlUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCohtmlUserWidget.NotifyPawnChange
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCohtmlUserWidget::NotifyPawnChange(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCohtmlUserWidget", "NotifyPawnChange");

	Params::GzCohtmlUserWidget_NotifyPawnChange Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCohtmlUserWidget.SetupCohtmlUI
// (Final, Native, Private)

void UGzCohtmlUserWidget::SetupCohtmlUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCohtmlUserWidget", "SetupCohtmlUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponBehaviorAttachment.GetHiden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponBehaviorAttachment::GetHiden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "GetHiden");

	Params::GzWeaponBehaviorAttachment_GetHiden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponBehaviorAttachment.Hide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHide                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponBehaviorAttachment::Hide(bool bHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "Hide");

	Params::GzWeaponBehaviorAttachment_Hide Parms{};

	Parms.bHide = bHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponBehaviorAttachment.Initialize
// (Event, Public, BlueprintEvent)

void UGzWeaponBehaviorAttachment::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponBehaviorAttachment.OnDestroy
// (Event, Public, BlueprintEvent)

void UGzWeaponBehaviorAttachment::OnDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "OnDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponBehaviorAttachment.OnEquipped
// (Event, Public, BlueprintEvent)

void UGzWeaponBehaviorAttachment::OnEquipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "OnEquipped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponBehaviorAttachment.OnHide
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHide                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponBehaviorAttachment::OnHide(bool bHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "OnHide");

	Params::GzWeaponBehaviorAttachment_OnHide Parms{};

	Parms.bHide = bHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponBehaviorAttachment.OnHolstered
// (Event, Public, BlueprintEvent)

void UGzWeaponBehaviorAttachment::OnHolstered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "OnHolstered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponBehaviorAttachment.OnUpdate
// (Event, Public, BlueprintEvent, Const)

void UGzWeaponBehaviorAttachment::OnUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponBehaviorAttachment", "OnUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAdvancedCameraParamsComponent.LockCurrentCameraMode
// (Final, Native, Public, BlueprintCallable)

void UGzAdvancedCameraParamsComponent::LockCurrentCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "LockCurrentCameraMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.ResetOverlayCameraMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAdvancedCameraParamsComponent::ResetOverlayCameraMode(bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "ResetOverlayCameraMode");

	Params::GzAdvancedCameraParamsComponent_ResetOverlayCameraMode Parms{};

	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.SetOverlayCameraDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAdvancedCameraParamsComponent::SetOverlayCameraDistance(float Distance, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "SetOverlayCameraDistance");

	Params::GzAdvancedCameraParamsComponent_SetOverlayCameraDistance Parms{};

	Parms.Distance = Distance;
	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.SetOverlayCameraMode
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAdvancedCameraParamsComponent::SetOverlayCameraMode(const struct FGameplayTag& CameraModeTag, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "SetOverlayCameraMode");

	Params::GzAdvancedCameraParamsComponent_SetOverlayCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);
	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.SetOverlayCameraModeManually
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGzCameraOverlayModeDataAsset*    OverlayCameraMode                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAdvancedCameraParamsComponent::SetOverlayCameraModeManually(class UGzCameraOverlayModeDataAsset* OverlayCameraMode, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "SetOverlayCameraModeManually");

	Params::GzAdvancedCameraParamsComponent_SetOverlayCameraModeManually Parms{};

	Parms.OverlayCameraMode = OverlayCameraMode;
	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.UnlockCurrentCameraMode
// (Final, Native, Public, BlueprintCallable)

void UGzAdvancedCameraParamsComponent::UnlockCurrentCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "UnlockCurrentCameraMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedCameraParamsComponent.GetOverlayCameraModeFromTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCameraOverlayModeDataAsset*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCameraOverlayModeDataAsset* UGzAdvancedCameraParamsComponent::GetOverlayCameraModeFromTag(const struct FGameplayTag& CameraModeTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "GetOverlayCameraModeFromTag");

	Params::GzAdvancedCameraParamsComponent_GetOverlayCameraModeFromTag Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedCameraParamsComponent.GetOverlayLocationObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCameraOverlayLocationObject*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCameraOverlayLocationObject* UGzAdvancedCameraParamsComponent::GetOverlayLocationObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedCameraParamsComponent", "GetOverlayLocationObject");

	Params::GzAdvancedCameraParamsComponent_GetOverlayLocationObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedMission.BuildObjectiveGraph
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* AGzAdvancedMission::BuildObjectiveGraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "BuildObjectiveGraph");

	Params::GzAdvancedMission_BuildObjectiveGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedMission.CreateOrSyncTask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           TaskClass                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionTask*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMissionTask* AGzAdvancedMission::CreateOrSyncTask(const class UClass* TaskClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "CreateOrSyncTask");

	Params::GzAdvancedMission_CreateOrSyncTask Parms{};

	Parms.TaskClass = TaskClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedMission.OnRep_MissionSeed
// (Final, Native, Private)

void AGzAdvancedMission::OnRep_MissionSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "OnRep_MissionSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.OnRep_MissionState
// (Final, Native, Private)

void AGzAdvancedMission::OnRep_MissionState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "OnRep_MissionState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.OnRep_MissionTasks
// (Final, Native, Private)

void AGzAdvancedMission::OnRep_MissionTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "OnRep_MissionTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.OnRep_Template
// (Final, Native, Private)

void AGzAdvancedMission::OnRep_Template()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "OnRep_Template");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.StartMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzAdvancedMission::StartMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "StartMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.StartTracking
// (Native, Event, Protected, BlueprintEvent)

void AGzAdvancedMission::StartTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "StartTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAdvancedMission.GetMissionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AGzAdvancedMission::GetMissionName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "GetMissionName");

	Params::GzAdvancedMission_GetMissionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedMission.GetMissionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzMissionState                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzMissionState AGzAdvancedMission::GetMissionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "GetMissionState");

	Params::GzAdvancedMission_GetMissionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAdvancedMission.IsTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAdvancedMission::IsTracked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAdvancedMission", "IsTracked");

	Params::GzAdvancedMission_IsTracked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponModifier.ApplyModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               WeaponComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponModifier::ApplyModifier(class UGzWeaponComponent* WeaponComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponModifier", "ApplyModifier");

	Params::GzWeaponModifier_ApplyModifier Parms{};

	Parms.WeaponComponent = WeaponComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponModifier.IsEquipModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponModifier::IsEquipModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponModifier", "IsEquipModifier");

	Params::GzWeaponModifier_IsEquipModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponModifier.IsServerOnlyModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponModifier::IsServerOnlyModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponModifier", "IsServerOnlyModifier");

	Params::GzWeaponModifier_IsServerOnlyModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponModifier.RemoveModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               WeaponComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponModifier::RemoveModifier(class UGzWeaponComponent* WeaponComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponModifier", "RemoveModifier");

	Params::GzWeaponModifier_RemoveModifier Parms{};

	Parms.WeaponComponent = WeaponComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.CreateActivateAbilityMontageProxyObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayAbility>     InAbilityToActivate                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAIActivateAbilityAsyncTaskBlueprintProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIActivateAbilityAsyncTaskBlueprintProxy* UGzAIActivateAbilityAsyncTaskBlueprintProxy::CreateActivateAbilityMontageProxyObject(class APawn* InPawn, TSubclassOf<class UGameplayAbility> InAbilityToActivate, class UAnimMontage* AnimMontage, class FName StartSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "CreateActivateAbilityMontageProxyObject");

	Params::GzAIActivateAbilityAsyncTaskBlueprintProxy_CreateActivateAbilityMontageProxyObject Parms{};

	Parms.InPawn = InPawn;
	Parms.InAbilityToActivate = InAbilityToActivate;
	Parms.AnimMontage = AnimMontage;
	Parms.StartSection = StartSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.CreateActivateAbilityProxyObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayAbility>     InAbilityToActivate                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAIActivateAbilityAsyncTaskBlueprintProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIActivateAbilityAsyncTaskBlueprintProxy* UGzAIActivateAbilityAsyncTaskBlueprintProxy::CreateActivateAbilityProxyObject(class APawn* InPawn, TSubclassOf<class UGameplayAbility> InAbilityToActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "CreateActivateAbilityProxyObject");

	Params::GzAIActivateAbilityAsyncTaskBlueprintProxy_CreateActivateAbilityProxyObject Parms{};

	Parms.InPawn = InPawn;
	Parms.InAbilityToActivate = InAbilityToActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.CreateActivateAbilityProxyObjectFull
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayAbility>     InAbilityToActivate                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject2                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAIActivateAbilityAsyncTaskBlueprintProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIActivateAbilityAsyncTaskBlueprintProxy* UGzAIActivateAbilityAsyncTaskBlueprintProxy::CreateActivateAbilityProxyObjectFull(class APawn* InPawn, TSubclassOf<class UGameplayAbility> InAbilityToActivate, class AActor* Target, class UObject* OptionalObject, class UObject* OptionalObject2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "CreateActivateAbilityProxyObjectFull");

	Params::GzAIActivateAbilityAsyncTaskBlueprintProxy_CreateActivateAbilityProxyObjectFull Parms{};

	Parms.InPawn = InPawn;
	Parms.InAbilityToActivate = InAbilityToActivate;
	Parms.Target = Target;
	Parms.OptionalObject = OptionalObject;
	Parms.OptionalObject2 = OptionalObject2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.CreateActivateAbilityProxyObjectWithTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayAbility>     InAbilityToActivate                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAIActivateAbilityAsyncTaskBlueprintProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIActivateAbilityAsyncTaskBlueprintProxy* UGzAIActivateAbilityAsyncTaskBlueprintProxy::CreateActivateAbilityProxyObjectWithTarget(class APawn* InPawn, TSubclassOf<class UGameplayAbility> InAbilityToActivate, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "CreateActivateAbilityProxyObjectWithTarget");

	Params::GzAIActivateAbilityAsyncTaskBlueprintProxy_CreateActivateAbilityProxyObjectWithTarget Parms{};

	Parms.InPawn = InPawn;
	Parms.InAbilityToActivate = InAbilityToActivate;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.EndTask
// (Final, Native, Public, BlueprintCallable)

void UGzAIActivateAbilityAsyncTaskBlueprintProxy::EndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "EndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.OAIActivayeAbilitySimpleDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzAIActivateAbilityAsyncTaskBlueprintProxy::OAIActivayeAbilitySimpleDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "OAIActivayeAbilitySimpleDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.OnGameAbilityEnded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FAbilityEndedData                AbilityEndedData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzAIActivateAbilityAsyncTaskBlueprintProxy::OnGameAbilityEnded(const struct FAbilityEndedData& AbilityEndedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "OnGameAbilityEnded");

	Params::GzAIActivateAbilityAsyncTaskBlueprintProxy_OnGameAbilityEnded Parms{};

	Parms.AbilityEndedData = std::move(AbilityEndedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIActivateAbilityAsyncTaskBlueprintProxy.OnGameAbilityFail
// (Final, Native, Private)

void UGzAIActivateAbilityAsyncTaskBlueprintProxy::OnGameAbilityFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIActivateAbilityAsyncTaskBlueprintProxy", "OnGameAbilityFail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionTask.FlushNetDormancyOnMission
// (Final, Native, Public, BlueprintCallable)

void UGzMissionTask::FlushNetDormancyOnMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "FlushNetDormancyOnMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionTask.OnActivateAuthority_BP
// (Event, Protected, BlueprintEvent)

void UGzMissionTask::OnActivateAuthority_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "OnActivateAuthority_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionTask.OnDeactivateAuthority_BP
// (Event, Protected, BlueprintEvent)

void UGzMissionTask::OnDeactivateAuthority_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "OnDeactivateAuthority_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionTask.OnInitAuthority_BP
// (Event, Protected, BlueprintEvent)

void UGzMissionTask::OnInitAuthority_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "OnInitAuthority_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionTask.OnInitClient_BP
// (Event, Protected, BlueprintEvent)

void UGzMissionTask::OnInitClient_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "OnInitClient_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionTask.RegisterMarker
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// class AGzMissionMarker*                 Marker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionTask::RegisterMarker(class AGzMissionMarker* Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "RegisterMarker");

	Params::GzMissionTask_RegisterMarker Parms{};

	Parms.Marker = Marker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionTask.UnregisterMarker
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionTask::UnregisterMarker(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "UnregisterMarker");

	Params::GzMissionTask_UnregisterMarker Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionTask.GetGroupChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzMissionGroup            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzMissionGroup UGzMissionTask::GetGroupChecked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "GetGroupChecked");

	Params::GzMissionTask_GetGroupChecked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTask.GetGroupId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMissionTask::GetGroupId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "GetGroupId");

	Params::GzMissionTask_GetGroupId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTask.GetMissionChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzAdvancedMission*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAdvancedMission* UGzMissionTask::GetMissionChecked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "GetMissionChecked");

	Params::GzMissionTask_GetMissionChecked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTask.HasAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionTask::HasAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "HasAuthority");

	Params::GzMissionTask_HasAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTask.HasGroupMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionTask::HasGroupMember(const int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "HasGroupMember");

	Params::GzMissionTask_HasGroupMember Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTask.IsRunningOnClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionTask::IsRunningOnClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTask", "IsRunningOnClient");

	Params::GzMissionTask_IsRunningOnClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzObjective.OnRep_State
// (Final, Native, Private)

void UGzObjective::OnRep_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzObjective", "OnRep_State");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCompletedObjective.MakeCompletedObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzCompletedObjective::MakeCompletedObjective(class AGzAdvancedMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCompletedObjective", "MakeCompletedObjective");

	Params::GzCompletedObjective_MakeCompletedObjective Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestComponent.AppendBlueprintCommandDetailedLog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DetailedLog                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestComponent::AppendBlueprintCommandDetailedLog(const class FString& DetailedLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "AppendBlueprintCommandDetailedLog");

	Params::GzAutotestComponent_AppendBlueprintCommandDetailedLog Parms{};

	Parms.DetailedLog = std::move(DetailedLog);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.FinishCommand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGzAutotestComponent::FinishCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "FinishCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.InitializeTriggers
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Owner                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestComponent::InitializeTriggers(const class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "InitializeTriggers");

	Params::GzAutotestComponent_InitializeTriggers Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.OnCharacterBeginOverlap
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAutotestComponent::OnCharacterBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "OnCharacterBeginOverlap");

	Params::GzAutotestComponent_OnCharacterBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.OnStateChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EGzAutotestComponentState               CommandComponentState                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestComponent::OnStateChanged(EGzAutotestComponentState CommandComponentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "OnStateChanged");

	Params::GzAutotestComponent_OnStateChanged Parms{};

	Parms.CommandComponentState = CommandComponentState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.PrepareCommand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAutotestComponent::PrepareCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "PrepareCommand");

	Params::GzAutotestComponent_PrepareCommand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestComponent.ResetCommand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGzAutotestComponent::ResetCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "ResetCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.StartCommand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAutotestComponent::StartCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "StartCommand");

	Params::GzAutotestComponent_StartCommand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestComponent.StopCommand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGzAutotestComponent::StopCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "StopCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.UpdateTimer
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestComponent::UpdateTimer(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "UpdateTimer");

	Params::GzAutotestComponent_UpdateTimer Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestComponent.GetCheatManager
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCheatManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCheatManager* UGzAutotestComponent::GetCheatManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "GetCheatManager");

	Params::GzAutotestComponent_GetCheatManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestComponent.GetCommandState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzAutotestComponentState               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzAutotestComponentState UGzAutotestComponent::GetCommandState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "GetCommandState");

	Params::GzAutotestComponent_GetCommandState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestComponent.GetDetailedLog
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzAutotestComponent::GetDetailedLog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestComponent", "GetDetailedLog");

	Params::GzAutotestComponent_GetDetailedLog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIAutotestCommandMoveTo.OnAIReachedPatrolPoint
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAIAutotestCommandMoveTo::OnAIReachedPatrolPoint(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIAutotestCommandMoveTo", "OnAIReachedPatrolPoint");

	Params::GzAIAutotestCommandMoveTo_OnAIReachedPatrolPoint Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDComponent.OnViewTargetChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            ViewTarget                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDComponent::OnViewTargetChanged(class APawn* ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "OnViewTargetChanged");

	Params::GzHUDComponent_OnViewTargetChanged Parms{};

	Parms.ViewTarget = ViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDComponent.ReceiveBindEvents
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDComponent::ReceiveBindEvents(class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "ReceiveBindEvents");

	Params::GzHUDComponent_ReceiveBindEvents Parms{};

	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDComponent.ReceiveUnbindEvents
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDComponent::ReceiveUnbindEvents(class APawn* OldViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "ReceiveUnbindEvents");

	Params::GzHUDComponent_ReceiveUnbindEvents Parms{};

	Parms.OldViewTarget = OldViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDComponent.SubscribeToAttributeChange
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAttribute               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float NewValue, float OldValue)>OnAttributeChanged                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDComponent::SubscribeToAttributeChange(const struct FGameplayAttribute& Attribute, TDelegate<void(float NewValue, float OldValue)> OnAttributeChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "SubscribeToAttributeChange");

	Params::GzHUDComponent_SubscribeToAttributeChange Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.OnAttributeChanged = OnAttributeChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDComponent.SubscribeToTagChange
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasAdded)>         OnTagChanged                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDComponent::SubscribeToTagChange(const struct FGameplayTag& Tag, TDelegate<void(bool bWasAdded)> OnTagChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "SubscribeToTagChange");

	Params::GzHUDComponent_SubscribeToTagChange Parms{};

	Parms.Tag = std::move(Tag);
	Parms.OnTagChanged = OnTagChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDComponent.GetViewTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzHUDComponent::GetViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDComponent", "GetViewTarget");

	Params::GzHUDComponent_GetViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseLogWidget.OnLogEmpty
// (Native, Event, Protected, BlueprintEvent)

void UGzBaseLogWidget::OnLogEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseLogWidget", "OnLogEmpty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseLogWidget.OnNewEntryEnqueued
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzBaseLogEntryWidget*            Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseLogWidget::OnNewEntryEnqueued(class UGzBaseLogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseLogWidget", "OnNewEntryEnqueued");

	Params::GzBaseLogWidget_OnNewEntryEnqueued Parms{};

	Parms.Entry = Entry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBaseLogWidget.OnNewEntryShowed
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzBaseLogEntryWidget*            Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseLogWidget::OnNewEntryShowed(class UGzBaseLogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseLogWidget", "OnNewEntryShowed");

	Params::GzBaseLogWidget_OnNewEntryShowed Parms{};

	Parms.Entry = Entry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzXPLogWidget.UpdateLog
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzGameStat                      Stat                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzXPLogWidget::UpdateLog(int32 PlayerId, const struct FGzGameStat& Stat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXPLogWidget", "UpdateLog");

	Params::GzXPLogWidget_UpdateLog Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Stat = std::move(Stat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseCharacter.GetBPComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class USceneComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CompName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* AGzBaseCharacter::GetBPComponent(TSubclassOf<class USceneComponent> ComponentClass, const class FName CompName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetBPComponent");

	Params::GzBaseCharacter_GetBPComponent Parms{};

	Parms.ComponentClass = ComponentClass;
	Parms.CompName = CompName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.OnRep_PersistentPlayerState
// (Final, Native, Private)

void AGzBaseCharacter::OnRep_PersistentPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "OnRep_PersistentPlayerState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseCharacter.OnRep_ReplicatedAcceleration
// (Final, Native, Private)

void AGzBaseCharacter::OnRep_ReplicatedAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "OnRep_ReplicatedAcceleration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseCharacter.GetAliveObjectAttributeSet
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzAliveObjectAttributeSet* ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzAliveObjectAttributeSet* AGzBaseCharacter::GetAliveObjectAttributeSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetAliveObjectAttributeSet");

	Params::GzBaseCharacter_GetAliveObjectAttributeSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.GetAttributeSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzAttributeSet*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzAttributeSet* AGzBaseCharacter::GetAttributeSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetAttributeSet");

	Params::GzBaseCharacter_GetAttributeSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.GetCombatComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCombatComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCombatComponent* AGzBaseCharacter::GetCombatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetCombatComponent");

	Params::GzBaseCharacter_GetCombatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.GetGzAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAbilitySystemComponent* AGzBaseCharacter::GetGzAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetGzAbilitySystemComponent");

	Params::GzBaseCharacter_GetGzAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.GetInventoryComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInvComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInvComponent* AGzBaseCharacter::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "GetInventoryComponent");

	Params::GzBaseCharacter_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseCharacter.HasCombatComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBaseCharacter::HasCombatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseCharacter", "HasCombatComponent");

	Params::GzBaseCharacter_HasCombatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameModeObject.GetGameMode
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGameModeBase>        GameModeClass                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameModeBase*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGameModeBase* UGzGameModeObject::GetGameMode(const TSubclassOf<class AGameModeBase> GameModeClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeObject", "GetGameMode");

	Params::GzGameModeObject_GetGameMode Parms{};

	Parms.GameModeClass = GameModeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameModeObject.GetGameModeSettings
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGzGameModeSettings>  SettingsClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzGameModeSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameModeSettings* UGzGameModeObject::GetGameModeSettings(TSubclassOf<class UGzGameModeSettings> SettingsClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeObject", "GetGameModeSettings");

	Params::GzGameModeObject_GetGameModeSettings Parms{};

	Parms.SettingsClass = SettingsClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameStageBase.ExternalEnd
// (Final, Native, Public, BlueprintCallable)

void UGzGameStageBase::ExternalEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "ExternalEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameStageBase.OnEndStage
// (Event, Protected, BlueprintEvent)

void UGzGameStageBase::OnEndStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "OnEndStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGameStageBase.OnStartStage
// (Event, Protected, BlueprintEvent)

void UGzGameStageBase::OnStartStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "OnStartStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGameStageBase.Transition
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameStageBase::Transition(const class FName& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "Transition");

	Params::GzGameStageBase_Transition Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameStageBase.TransitionNext
// (Final, Native, Protected, BlueprintCallable)

void UGzGameStageBase::TransitionNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "TransitionNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameStageBase.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameStageBase::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "GetDisplayName");

	Params::GzGameStageBase_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameStageBase.GetStageTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag UGzGameStageBase::GetStageTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStageBase", "GetStageTag");

	Params::GzGameStageBase_GetStageTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.AddMarkerState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::AddMarkerState(const struct FGameplayTag& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "AddMarkerState");

	Params::GzMarkerComponent_AddMarkerState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.DelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void UGzMarkerComponent::DelayedDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "DelayedDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.HandleLocalPlayerControllerChanged
// (Final, Native, Private)
// Parameters:
// class APlayerController*                InPlayerController                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::HandleLocalPlayerControllerChanged(class APlayerController* InPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "HandleLocalPlayerControllerChanged");

	Params::GzMarkerComponent_HandleLocalPlayerControllerChanged Parms{};

	Parms.InPlayerController = InPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.OnEndDelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void UGzMarkerComponent::OnEndDelayedDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "OnEndDelayedDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.OnPlayableAreaReady
// (Final, Native, Private)

void UGzMarkerComponent::OnPlayableAreaReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "OnPlayableAreaReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.RemoveMarkerState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::RemoveMarkerState(const struct FGameplayTag& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "RemoveMarkerState");

	Params::GzMarkerComponent_RemoveMarkerState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.SetMarkerType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InMarkerType                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::SetMarkerType(const struct FGameplayTag& InMarkerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "SetMarkerType");

	Params::GzMarkerComponent_SetMarkerType Parms{};

	Parms.InMarkerType = std::move(InMarkerType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.SetPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::SetPriority(int32 InPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "SetPriority");

	Params::GzMarkerComponent_SetPriority Parms{};

	Parms.InPriority = InPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.SetWorldInstanceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InInstanceId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerComponent::SetWorldInstanceId(int32 InInstanceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "SetWorldInstanceId");

	Params::GzMarkerComponent_SetWorldInstanceId Parms{};

	Parms.InInstanceId = InInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerComponent.GetMarkerLocation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGzMarkerComponent::GetMarkerLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetMarkerLocation");

	Params::GzMarkerComponent_GetMarkerLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetMarkerLocation3D
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzMarkerComponent::GetMarkerLocation3D() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetMarkerLocation3D");

	Params::GzMarkerComponent_GetMarkerLocation3D Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetMarkerRotation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMarkerComponent::GetMarkerRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetMarkerRotation");

	Params::GzMarkerComponent_GetMarkerRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetMarkerStates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UGzMarkerComponent::GetMarkerStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetMarkerStates");

	Params::GzMarkerComponent_GetMarkerStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetMarkerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzMarkerComponent::GetMarkerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetMarkerType");

	Params::GzMarkerComponent_GetMarkerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetPingData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzPingData                      ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzPingData UGzMarkerComponent::GetPingData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetPingData");

	Params::GzMarkerComponent_GetPingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMarkerComponent::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetPriority");

	Params::GzMarkerComponent_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetServerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzMarkerServerData        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzMarkerServerData UGzMarkerComponent::GetServerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetServerData");

	Params::GzMarkerComponent_GetServerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.GetShape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMarkerShape*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMarkerShape* UGzMarkerComponent::GetShape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "GetShape");

	Params::GzMarkerComponent_GetShape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.IsCompassMarkerStickingToEdges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::IsCompassMarkerStickingToEdges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "IsCompassMarkerStickingToEdges");

	Params::GzMarkerComponent_IsCompassMarkerStickingToEdges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.IsHighlighted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::IsHighlighted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "IsHighlighted");

	Params::GzMarkerComponent_IsHighlighted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.IsNavigatable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::IsNavigatable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "IsNavigatable");

	Params::GzMarkerComponent_IsNavigatable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.IsPingable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzPingChannels                         InChannel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::IsPingable(EGzPingChannels InChannel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "IsPingable");

	Params::GzMarkerComponent_IsPingable Parms{};

	Parms.InChannel = InChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.IsSupportingRotation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::IsSupportingRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "IsSupportingRotation");

	Params::GzMarkerComponent_IsSupportingRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerComponent.RequiresDelayedDestroy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMarkerComponent::RequiresDelayedDestroy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerComponent", "RequiresDelayedDestroy");

	Params::GzMarkerComponent_RequiresDelayedDestroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionMarkerComponent.SetMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzAdvancedMission*               InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionMarkerComponent::SetMission(class AGzAdvancedMission* InMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarkerComponent", "SetMission");

	Params::GzMissionMarkerComponent_SetMission Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarkerComponent.GetMission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGzAdvancedMission*         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzAdvancedMission* UGzMissionMarkerComponent::GetMission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarkerComponent", "GetMission");

	Params::GzMissionMarkerComponent_GetMission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzConsoleSessionCheatExtension.CreateConsoleLobby
// (Final, Exec, Native, Public)

void UGzConsoleSessionCheatExtension::CreateConsoleLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConsoleSessionCheatExtension", "CreateConsoleLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConsoleSessionCheatExtension.CreateConsoleSession
// (Final, Exec, Native, Public)

void UGzConsoleSessionCheatExtension::CreateConsoleSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConsoleSessionCheatExtension", "CreateConsoleSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConsoleSessionCheatExtension.LeaveConsoleSession
// (Final, Exec, Native, Public)

void UGzConsoleSessionCheatExtension::LeaveConsoleSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConsoleSessionCheatExtension", "LeaveConsoleSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConsoleSessionCheatExtension.UpdateConsoleSessionJoinDisable
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bJoinable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzConsoleSessionCheatExtension::UpdateConsoleSessionJoinDisable(bool bJoinable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConsoleSessionCheatExtension", "UpdateConsoleSessionJoinDisable");

	Params::GzConsoleSessionCheatExtension_UpdateConsoleSessionJoinDisable Parms{};

	Parms.bJoinable = bJoinable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacter.K2_OnEndBoostSliding
// (Event, Public, BlueprintEvent)

void ALocomotionCharacter::K2_OnEndBoostSliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnEndBoostSliding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionCharacter.K2_OnEndGrapplingPull
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::K2_OnEndGrapplingPull(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnEndGrapplingPull");

	Params::LocomotionCharacter_K2_OnEndGrapplingPull Parms{};

	Parms.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionCharacter.K2_OnMovementActionChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// ELocomotionMovementAction               NewAction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionMovementAction               PreviousAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::K2_OnMovementActionChanged(ELocomotionMovementAction NewAction, ELocomotionMovementAction PreviousAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnMovementActionChanged");

	Params::LocomotionCharacter_K2_OnMovementActionChanged Parms{};

	Parms.NewAction = NewAction;
	Parms.PreviousAction = PreviousAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionCharacter.K2_OnStartBoostSliding
// (Event, Public, BlueprintEvent)

void ALocomotionCharacter::K2_OnStartBoostSliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnStartBoostSliding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionCharacter.K2_OnStartGrapplingPull
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::K2_OnStartGrapplingPull(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnStartGrapplingPull");

	Params::LocomotionCharacter_K2_OnStartGrapplingPull Parms{};

	Parms.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionCharacter.K2_OnStartLeglessState
// (Event, Public, BlueprintEvent)

void ALocomotionCharacter::K2_OnStartLeglessState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnStartLeglessState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionCharacter.K2_OnStopLeglessState
// (Event, Public, BlueprintEvent)

void ALocomotionCharacter::K2_OnStopLeglessState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "K2_OnStopLeglessState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionCharacter.OnCharacterReachedJumpApex
// (Native, Public)

void ALocomotionCharacter::OnCharacterReachedJumpApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "OnCharacterReachedJumpApex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionCharacter.OnJetpackVisualFlagsChanged__DelegateSignature
// (Public, Delegate)

void ALocomotionCharacter::OnJetpackVisualFlagsChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "OnJetpackVisualFlagsChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.LocomotionCharacter.OnMovementActionChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// ELocomotionMovementAction               PreviousAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::OnMovementActionChanged__DelegateSignature(ELocomotionMovementAction PreviousAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "OnMovementActionChanged__DelegateSignature");

	Params::LocomotionCharacter_OnMovementActionChanged__DelegateSignature Parms{};

	Parms.PreviousAction = PreviousAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionCharacter.OnRep_LocomotionFlags
// (Native, Public)
// Parameters:
// uint32                                  OldFlags                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::OnRep_LocomotionFlags(uint32 OldFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "OnRep_LocomotionFlags");

	Params::LocomotionCharacter_OnRep_LocomotionFlags Parms{};

	Parms.OldFlags = OldFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacter.SetSprintEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::SetSprintEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "SetSprintEnabled");

	Params::LocomotionCharacter_SetSprintEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacter.SetWalkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALocomotionCharacter::SetWalkEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "SetWalkEnabled");

	Params::LocomotionCharacter_SetWalkEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacter.CanUncrouch
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::CanUncrouch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "CanUncrouch");

	Params::LocomotionCharacter_CanUncrouch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.CanWingsuit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::CanWingsuit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "CanWingsuit");

	Params::LocomotionCharacter_CanWingsuit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.GetTraceDebugType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EDrawDebugTrace                         ShowTraceType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDrawDebugTrace ALocomotionCharacter::GetTraceDebugType(EDrawDebugTrace ShowTraceType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "GetTraceDebugType");

	Params::LocomotionCharacter_GetTraceDebugType Parms{};

	Parms.ShowTraceType = ShowTraceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.IsJetpackBoosterActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::IsJetpackBoosterActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "IsJetpackBoosterActive");

	Params::LocomotionCharacter_IsJetpackBoosterActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.IsJetpackDamaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::IsJetpackDamaged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "IsJetpackDamaged");

	Params::LocomotionCharacter_IsJetpackDamaged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.IsJetpackDelayed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::IsJetpackDelayed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "IsJetpackDelayed");

	Params::LocomotionCharacter_IsJetpackDelayed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacter.IsWingsuitActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALocomotionCharacter::IsWingsuitActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacter", "IsWingsuitActive");

	Params::LocomotionCharacter_IsWingsuitActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.AddAnimLayerToPool
// (Final, Native, Public, HasOutParams)
// Parameters:
// TSoftClassPtr<class UClass>             NewLayer                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::AddAnimLayerToPool(const TSoftClassPtr<class UClass>& NewLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "AddAnimLayerToPool");

	Params::GzCharacter_AddAnimLayerToPool Parms{};

	Parms.NewLayer = NewLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.AfterShootTimerEnd
// (Final, Native, Public)

void AGzCharacter::AfterShootTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "AfterShootTimerEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.ApplyFallDamage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzGE_FallDamage>     EffectClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FallHeight                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::ApplyFallDamage(TSubclassOf<class UGzGE_FallDamage> EffectClass, const float FallHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ApplyFallDamage");

	Params::GzCharacter_ApplyFallDamage Parms{};

	Parms.EffectClass = EffectClass;
	Parms.FallHeight = FallHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.BeginAimAction
// (Native, Public, BlueprintCallable)

void AGzCharacter::BeginAimAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "BeginAimAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.Client_PlayFatalHitEffects
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzWeaponResourceType                   Resource                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzCharacter::Client_PlayFatalHitEffects(class AActor* Attacker, const EGzWeaponResourceType& Resource, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "Client_PlayFatalHitEffects");

	Params::GzCharacter_Client_PlayFatalHitEffects Parms{};

	Parms.Attacker = Attacker;
	Parms.Resource = Resource;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.ClientNotifyBeingRedeployed
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGzCharacter::ClientNotifyBeingRedeployed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ClientNotifyBeingRedeployed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.DropExcessItems
// (Native, Public, HasOutParams)
// Parameters:
// TArray<struct FGzInvItem>               ExcessItems                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzCharacter::DropExcessItems(const TArray<struct FGzInvItem>& ExcessItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "DropExcessItems");

	Params::GzCharacter_DropExcessItems Parms{};

	Parms.ExcessItems = std::move(ExcessItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.EndAimAction
// (Native, Public, BlueprintCallable)

void AGzCharacter::EndAimAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "EndAimAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.ForceNotRelaxedStance
// (Final, Native, Public)

void AGzCharacter::ForceNotRelaxedStance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ForceNotRelaxedStance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzCharacter.GzCharacterKilled__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   KillerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::GzCharacterKilled__DelegateSignature(int32 KillerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GzCharacterKilled__DelegateSignature");

	Params::GzCharacter_GzCharacterKilled__DelegateSignature Parms{};

	Parms.KillerId = KillerId;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzCharacter.GzOperableObjectChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UGzOperableObjectComponent*       OperableObjectComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::GzOperableObjectChanged__DelegateSignature(class UGzOperableObjectComponent* OperableObjectComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GzOperableObjectChanged__DelegateSignature");

	Params::GzCharacter_GzOperableObjectChanged__DelegateSignature Parms{};

	Parms.OperableObjectComponent = OperableObjectComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCharacter.HandleFinishedMovingAlongZipline
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bCanceled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::HandleFinishedMovingAlongZipline(bool bCanceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "HandleFinishedMovingAlongZipline");

	Params::GzCharacter_HandleFinishedMovingAlongZipline Parms{};

	Parms.bCanceled = bCanceled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.HandleFinishedMovingToZipline
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGzCharacter::HandleFinishedMovingToZipline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "HandleFinishedMovingToZipline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.LinkActiveAnimLayer
// (Final, Native, Public, HasOutParams)
// Parameters:
// TSoftClassPtr<class UClass>             NewLayer                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::LinkActiveAnimLayer(const TSoftClassPtr<class UClass>& NewLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "LinkActiveAnimLayer");

	Params::GzCharacter_LinkActiveAnimLayer Parms{};

	Parms.NewLayer = NewLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.LinkActiveItemLayer
// (Final, Native, Public)

void AGzCharacter::LinkActiveItemLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "LinkActiveItemLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.LinkUnarmedItemLayer
// (Final, Native, Public, BlueprintCallable)

void AGzCharacter::LinkUnarmedItemLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "LinkUnarmedItemLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.MulticastOnJumpActivationFailed
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayTag                     FailedAbilityTag                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::MulticastOnJumpActivationFailed(const struct FGameplayTag& FailedAbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "MulticastOnJumpActivationFailed");

	Params::GzCharacter_MulticastOnJumpActivationFailed Parms{};

	Parms.FailedAbilityTag = std::move(FailedAbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.MulticastStartRagDoll
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FGameplayEffectSpec              DeathEffect                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzCharacter::MulticastStartRagDoll(const struct FGameplayEffectSpec& DeathEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "MulticastStartRagDoll");

	Params::GzCharacter_MulticastStartRagDoll Parms{};

	Parms.DeathEffect = std::move(DeathEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnCharacterCustomizationApplied
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGzCharacterCustomizationProfile Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzCharacter::OnCharacterCustomizationApplied(const struct FGzCharacterCustomizationProfile& Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnCharacterCustomizationApplied");

	Params::GzCharacter_OnCharacterCustomizationApplied Parms{};

	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// SparseDelegateFunction G01.GzCharacter.OnCharacterDied_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnCharacterDied_BP__DelegateSignature(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnCharacterDied_BP__DelegateSignature");

	Params::GzCharacter_OnCharacterDied_BP__DelegateSignature Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// SparseDelegateFunction G01.GzCharacter.OnCharacterKnockedDown_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnCharacterKnockedDown_BP__DelegateSignature(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnCharacterKnockedDown_BP__DelegateSignature");

	Params::GzCharacter_OnCharacterKnockedDown_BP__DelegateSignature Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// SparseDelegateFunction G01.GzCharacter.OnCharacterKnockedDownStateChanged_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KnockedDownState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnCharacterKnockedDownStateChanged_BP__DelegateSignature(class AGzCharacter* Character, bool KnockedDownState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnCharacterKnockedDownStateChanged_BP__DelegateSignature");

	Params::GzCharacter_OnCharacterKnockedDownStateChanged_BP__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.KnockedDownState = KnockedDownState;

	UObject::ProcessEvent(Func, &Parms);
}


// SparseDelegateFunction G01.GzCharacter.OnCharacterStartDied_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnCharacterStartDied_BP__DelegateSignature(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnCharacterStartDied_BP__DelegateSignature");

	Params::GzCharacter_OnCharacterStartDied_BP__DelegateSignature Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCharacter.OnComebackArenaStateChanged
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnComebackArenaStateChanged(class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnComebackArenaStateChanged");

	Params::GzCharacter_OnComebackArenaStateChanged Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnHitReaction
// (Native, Public, HasOutParams)
// Parameters:
// class AActor*                           Who                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzCharacter::OnHitReaction(const class AActor* Who, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnHitReaction");

	Params::GzCharacter_OnHitReaction Parms{};

	Parms.Who = Who;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnJumpActivationFailed
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     FailedAbilityTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnJumpActivationFailed(const struct FGameplayTag& FailedAbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnJumpActivationFailed");

	Params::GzCharacter_OnJumpActivationFailed Parms{};

	Parms.FailedAbilityTag = std::move(FailedAbilityTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCharacter.OnMontageEnded
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnMontageEnded");

	Params::GzCharacter_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnMontageStarted
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnMontageStarted");

	Params::GzCharacter_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnPlayerTeamChangedInternal
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnPlayerTeamChangedInternal(class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnPlayerTeamChangedInternal");

	Params::GzCharacter_OnPlayerTeamChangedInternal Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnRagDollEnded
// (Native, Public)
// Parameters:
// struct FGameplayEffectSpec              DeathEffect                                            (ConstParm, Parm, NativeAccessSpecifierPublic)

void AGzCharacter::OnRagDollEnded(const struct FGameplayEffectSpec& DeathEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnRagDollEnded");

	Params::GzCharacter_OnRagDollEnded Parms{};

	Parms.DeathEffect = std::move(DeathEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnRep_ActiveLayerClass
// (Final, Native, Protected)

void AGzCharacter::OnRep_ActiveLayerClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnRep_ActiveLayerClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnRep_JetpackSettings
// (Final, Native, Protected)

void AGzCharacter::OnRep_JetpackSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnRep_JetpackSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnShoot
// (Final, Native, Public)

void AGzCharacter::OnShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnShoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnSingleHitDamageReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSingleHitDamage               SingleHit                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzCharacter::OnSingleHitDamageReceived(class UGzDamageableComponent* Receiver, const struct FGzSingleHitDamage& SingleHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnSingleHitDamageReceived");

	Params::GzCharacter_OnSingleHitDamageReceived Parms{};

	Parms.Receiver = Receiver;
	Parms.SingleHit = std::move(SingleHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.OnWorldInstanceIdChanged
// (Final, Native, Public)
// Parameters:
// class AGzPlayerState*                   InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::OnWorldInstanceIdChanged(class AGzPlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "OnWorldInstanceIdChanged");

	Params::GzCharacter_OnWorldInstanceIdChanged Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.ReceiveCharacterOnStartupInitialized
// (Event, Protected, BlueprintEvent)

void AGzCharacter::ReceiveCharacterOnStartupInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ReceiveCharacterOnStartupInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCharacter.ResetAnimAbility
// (Final, Native, Public)

void AGzCharacter::ResetAnimAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ResetAnimAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.RevealActor
// (Net, NetReliable, Native, Event, Protected, NetClient, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::RevealActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "RevealActor");

	Params::GzCharacter_RevealActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.ServerOnJumpActivationFailed
// (Net, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTag                     FailedAbilityTag                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::ServerOnJumpActivationFailed(const struct FGameplayTag& FailedAbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "ServerOnJumpActivationFailed");

	Params::GzCharacter_ServerOnJumpActivationFailed Parms{};

	Parms.FailedAbilityTag = std::move(FailedAbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.SetCanDie
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCanDie                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::SetCanDie(bool bInCanDie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "SetCanDie");

	Params::GzCharacter_SetCanDie Parms{};

	Parms.bInCanDie = bInCanDie;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.SetCurrentZipline
// (Final, Native, Public)
// Parameters:
// class AGzZipline*                       NewZipline                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::SetCurrentZipline(const class AGzZipline* NewZipline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "SetCurrentZipline");

	Params::GzCharacter_SetCurrentZipline Parms{};

	Parms.NewZipline = NewZipline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.SetDefaultAnimLayer
// (Final, Native, Public)

void AGzCharacter::SetDefaultAnimLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "SetDefaultAnimLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.Shoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bStart                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::Shoot(bool bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "Shoot");

	Params::GzCharacter_Shoot Parms{};

	Parms.bStart = bStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.UnRevealActor
// (Net, NetReliable, Native, Event, Protected, NetClient, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzCharacter::UnRevealActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "UnRevealActor");

	Params::GzCharacter_UnRevealActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacter.BP_IsNewCharacter
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzCharacter::BP_IsNewCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "BP_IsNewCharacter");

	Params::GzCharacter_BP_IsNewCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.CanDie
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzCharacter::CanDie() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "CanDie");

	Params::GzCharacter_CanDie Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetAbilitiesForInventorySlots
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ItemTypes                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UGzGameplayAbility*>       OutAbilities                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGzCharacter::GetAbilitiesForInventorySlots(const struct FGameplayTagContainer& ItemTypes, TArray<class UGzGameplayAbility*>* OutAbilities) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetAbilitiesForInventorySlots");

	Params::GzCharacter_GetAbilitiesForInventorySlots Parms{};

	Parms.ItemTypes = std::move(ItemTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAbilities != nullptr)
		*OutAbilities = std::move(Parms.OutAbilities);
}


// Function G01.GzCharacter.GetActiveWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzWeaponActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWeaponActor* AGzCharacter::GetActiveWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetActiveWeapon");

	Params::GzCharacter_GetActiveWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetActiveWeaponComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponComponent* AGzCharacter::GetActiveWeaponComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetActiveWeaponComponent");

	Params::GzCharacter_GetActiveWeaponComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetAirFrictionCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetAirFrictionCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetAirFrictionCoef");

	Params::GzCharacter_GetAirFrictionCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetArmor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetArmor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetArmor");

	Params::GzCharacter_GetArmor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCharacterLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzCharacter::GetCharacterLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCharacterLevel");

	Params::GzCharacter_GetCharacterLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCrouchCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetCrouchCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCrouchCoef");

	Params::GzCharacter_GetCrouchCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCurrentEquippedPocketID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInvPocketId AGzCharacter::GetCurrentEquippedPocketID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCurrentEquippedPocketID");

	Params::GzCharacter_GetCurrentEquippedPocketID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCurrentOperableObjectComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzOperableObjectComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzOperableObjectComponent* AGzCharacter::GetCurrentOperableObjectComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCurrentOperableObjectComponent");

	Params::GzCharacter_GetCurrentOperableObjectComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCurrentVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzVehicle* AGzCharacter::GetCurrentVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCurrentVehicle");

	Params::GzCharacter_GetCurrentVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCurrentZipline
// (Final, Native, Public, Const)
// Parameters:
// const class AGzZipline*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzZipline* AGzCharacter::GetCurrentZipline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCurrentZipline");

	Params::GzCharacter_GetCurrentZipline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetCustomizationComponent
// (Final, Native, Public, Const)
// Parameters:
// class UGzCharacterCustomizationComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCharacterCustomizationComponent* AGzCharacter::GetCustomizationComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetCustomizationComponent");

	Params::GzCharacter_GetCustomizationComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetGenericTeamId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGenericTeamId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGenericTeamId AGzCharacter::GetGenericTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetGenericTeamId");

	Params::GzCharacter_GetGenericTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetInteractableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInteractableComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInteractableComponent* AGzCharacter::GetInteractableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetInteractableComponent");

	Params::GzCharacter_GetInteractableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetJumpVelocityBaseValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetJumpVelocityBaseValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetJumpVelocityBaseValue");

	Params::GzCharacter_GetJumpVelocityBaseValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetKnockedTimeToLive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetKnockedTimeToLive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetKnockedTimeToLive");

	Params::GzCharacter_GetKnockedTimeToLive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetLeftHandIKOffsetXValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetLeftHandIKOffsetXValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetLeftHandIKOffsetXValue");

	Params::GzCharacter_GetLeftHandIKOffsetXValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetLeftHandIKOffsetYValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetLeftHandIKOffsetYValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetLeftHandIKOffsetYValue");

	Params::GzCharacter_GetLeftHandIKOffsetYValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetLeftHandIKOffsetZValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetLeftHandIKOffsetZValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetLeftHandIKOffsetZValue");

	Params::GzCharacter_GetLeftHandIKOffsetZValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetLeftHandIKValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetLeftHandIKValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetLeftHandIKValue");

	Params::GzCharacter_GetLeftHandIKValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetMaxArmor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetMaxArmor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetMaxArmor");

	Params::GzCharacter_GetMaxArmor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetMovementSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetMovementSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetMovementSpeed");

	Params::GzCharacter_GetMovementSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetMovementSpeedBaseValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetMovementSpeedBaseValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetMovementSpeedBaseValue");

	Params::GzCharacter_GetMovementSpeedBaseValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetRunCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetRunCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetRunCoef");

	Params::GzCharacter_GetRunCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetSprintCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetSprintCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetSprintCoef");

	Params::GzCharacter_GetSprintCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzCharacter::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetTeamId");

	Params::GzCharacter_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetUnarmedAnimLayer
// (Final, Native, Public, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> AGzCharacter::GetUnarmedAnimLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetUnarmedAnimLayer");

	Params::GzCharacter_GetUnarmedAnimLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetWalkCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzCharacter::GetWalkCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetWalkCoef");

	Params::GzCharacter_GetWalkCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.GetWeaponAtSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   SlotID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWeaponActor* AGzCharacter::GetWeaponAtSlot(const struct FGzInvPocketId& SlotID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "GetWeaponAtSlot");

	Params::GzCharacter_GetWeaponAtSlot Parms{};

	Parms.SlotID = std::move(SlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.IsAfterShootTimerFinished
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzCharacter::IsAfterShootTimerFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "IsAfterShootTimerFinished");

	Params::GzCharacter_IsAfterShootTimerFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacter.IsKnockedDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzCharacter::IsKnockedDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacter", "IsKnockedDown");

	Params::GzCharacter_IsKnockedDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.BP_OnBackpackChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzInvPocketChangeData           Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::BP_OnBackpackChanged(const struct FGzInvPocketChangeData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "BP_OnBackpackChanged");

	Params::GzMultiPartCharacter_BP_OnBackpackChanged Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMultiPartCharacter.Multicast_PlayHitReaction
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Who                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::Multicast_PlayHitReaction(const class AActor* Who, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "Multicast_PlayHitReaction");

	Params::GzMultiPartCharacter_Multicast_PlayHitReaction Parms{};

	Parms.Who = Who;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.MulticastEndZiplineJumpOffFX
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGzMultiPartCharacter::MulticastEndZiplineJumpOffFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "MulticastEndZiplineJumpOffFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.OnActiveLimbTagChanged
// (Final, Native, Public)
// Parameters:
// struct FGameplayTag                     LimbActiveTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::OnActiveLimbTagChanged(const struct FGameplayTag& LimbActiveTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "OnActiveLimbTagChanged");

	Params::GzMultiPartCharacter_OnActiveLimbTagChanged Parms{};

	Parms.LimbActiveTag = std::move(LimbActiveTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.OnDamageableAreaDamaged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EGzCharacterDamageAreaType              DamageableArea                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::OnDamageableAreaDamaged(const EGzCharacterDamageAreaType DamageableArea, const float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "OnDamageableAreaDamaged");

	Params::GzMultiPartCharacter_OnDamageableAreaDamaged Parms{};

	Parms.DamageableArea = DamageableArea;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.OnLimbAttachCancel
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector_NetQuantize              Location                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            Rotation                                               (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             LimbInfo                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       InvItem                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::OnLimbAttachCancel(const struct FVector_NetQuantize& Location, const struct FQuat& Rotation, const struct FGzPickableSpawnInfo& LimbInfo, const struct FGzInvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "OnLimbAttachCancel");

	Params::GzMultiPartCharacter_OnLimbAttachCancel Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LimbInfo = std::move(LimbInfo);
	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.OnLimbTypeHealthChange
// (Event, Public, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::OnLimbTypeHealthChange(EGzLimbType LimbType, float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "OnLimbTypeHealthChange");

	Params::GzMultiPartCharacter_OnLimbTypeHealthChange Parms{};

	Parms.LimbType = LimbType;
	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMultiPartCharacter.OnRep_InsertedHexItemData
// (Final, Native, Public)

void AGzMultiPartCharacter::OnRep_InsertedHexItemData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "OnRep_InsertedHexItemData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.TearOffLimbByType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForced                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::TearOffLimbByType(EGzLimbType LimbType, const bool bForced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "TearOffLimbByType");

	Params::GzMultiPartCharacter_TearOffLimbByType Parms{};

	Parms.LimbType = LimbType;
	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.TearOffLimbByTypeWithTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiPartCharacter::TearOffLimbByTypeWithTag(EGzLimbType LimbType, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "TearOffLimbByTypeWithTag");

	Params::GzMultiPartCharacter_TearOffLimbByTypeWithTag Parms{};

	Parms.LimbType = LimbType;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartCharacter.GetActiveLimbAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzGA_BaseLimbAbility*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGA_BaseLimbAbility* AGzMultiPartCharacter::GetActiveLimbAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetActiveLimbAbility");

	Params::GzMultiPartCharacter_GetActiveLimbAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetActiveLimbAbilityTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AGzMultiPartCharacter::GetActiveLimbAbilityTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetActiveLimbAbilityTag");

	Params::GzMultiPartCharacter_GetActiveLimbAbilityTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetBackpackMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* AGzMultiPartCharacter::GetBackpackMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetBackpackMeshComponent");

	Params::GzMultiPartCharacter_GetBackpackMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetBoneNameByDamageArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCharacterDamageAreaType              DamageArea                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGzMultiPartCharacter::GetBoneNameByDamageArea(const EGzCharacterDamageAreaType DamageArea) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetBoneNameByDamageArea");

	Params::GzMultiPartCharacter_GetBoneNameByDamageArea Parms{};

	Parms.DamageArea = DamageArea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetDamageAreaTypeByBone
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             bone                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCharacterDamageAreaType              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzCharacterDamageAreaType AGzMultiPartCharacter::GetDamageAreaTypeByBone(const class FName& bone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetDamageAreaTypeByBone");

	Params::GzMultiPartCharacter_GetDamageAreaTypeByBone Parms{};

	Parms.bone = bone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetDamageAreaTypeByHit
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EGzCharacterDamageAreaType              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzCharacterDamageAreaType AGzMultiPartCharacter::GetDamageAreaTypeByHit(const struct FHitResult& Hit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetDamageAreaTypeByHit");

	Params::GzMultiPartCharacter_GetDamageAreaTypeByHit Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetEquippedLimbComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* AGzMultiPartCharacter::GetEquippedLimbComponent(EGzLimbType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetEquippedLimbComponent");

	Params::GzMultiPartCharacter_GetEquippedLimbComponent Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbAbilityComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbAbilityComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbAbilityComponent* AGzMultiPartCharacter::GetLimbAbilityComponent(const EGzLimbType LimbType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbAbilityComponent");

	Params::GzMultiPartCharacter_GetLimbAbilityComponent Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* AGzMultiPartCharacter::GetLimbComponent(EGzLimbType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbComponent");

	Params::GzMultiPartCharacter_GetLimbComponent Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbComponentByBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             bone                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* AGzMultiPartCharacter::GetLimbComponentByBone(class FName bone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbComponentByBone");

	Params::GzMultiPartCharacter_GetLimbComponentByBone Parms{};

	Parms.bone = bone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbComponentByPocketId
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbAbilityComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbAbilityComponent* AGzMultiPartCharacter::GetLimbComponentByPocketId(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbComponentByPocketId");

	Params::GzMultiPartCharacter_GetLimbComponentByPocketId Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMultiPartCharacter::GetLimbHealth(EGzLimbType LimbType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbHealth");

	Params::GzMultiPartCharacter_GetLimbHealth Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLimbTypeByBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             bone                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLimbType AGzMultiPartCharacter::GetLimbTypeByBone(class FName bone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLimbTypeByBone");

	Params::GzMultiPartCharacter_GetLimbTypeByBone Parms{};

	Parms.bone = bone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetLoadedLimbComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbComponent* AGzMultiPartCharacter::GetLoadedLimbComponent(EGzLimbType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetLoadedLimbComponent");

	Params::GzMultiPartCharacter_GetLoadedLimbComponent Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetMultiPartAttributeSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzMultiPartAttributeSet*   ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzMultiPartAttributeSet* AGzMultiPartCharacter::GetMultiPartAttributeSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetMultiPartAttributeSet");

	Params::GzMultiPartCharacter_GetMultiPartAttributeSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetPhysMaterialByDamageArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCharacterDamageAreaType              DamageAreaType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* AGzMultiPartCharacter::GetPhysMaterialByDamageArea(EGzCharacterDamageAreaType DamageAreaType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetPhysMaterialByDamageArea");

	Params::GzMultiPartCharacter_GetPhysMaterialByDamageArea Parms{};

	Parms.DamageAreaType = DamageAreaType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.GetTotalArmorDamageReductionFromLimbs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMultiPartCharacter::GetTotalArmorDamageReductionFromLimbs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "GetTotalArmorDamageReductionFromLimbs");

	Params::GzMultiPartCharacter_GetTotalArmorDamageReductionFromLimbs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.HasDamageAreaOfType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCharacterDamageAreaType              Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMultiPartCharacter::HasDamageAreaOfType(EGzCharacterDamageAreaType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "HasDamageAreaOfType");

	Params::GzMultiPartCharacter_HasDamageAreaOfType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.HasLimbEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMultiPartCharacter::HasLimbEquipped(EGzLimbType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "HasLimbEquipped");

	Params::GzMultiPartCharacter_HasLimbEquipped Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.HasLimbLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMultiPartCharacter::HasLimbLoaded(EGzLimbType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "HasLimbLoaded");

	Params::GzMultiPartCharacter_HasLimbLoaded Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiPartCharacter.IsSwitchingLimb
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMultiPartCharacter::IsSwitchingLimb() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartCharacter", "IsSwitchingLimb");

	Params::GzMultiPartCharacter_IsSwitchingLimb Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAICharacter.ReleaseCover
// (Final, Native, Public, BlueprintCallable)

void AGzAICharacter::ReleaseCover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAICharacter", "ReleaseCover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAICharacter.SetReplicatedCollision
// (Final, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAICharacter::SetReplicatedCollision(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAICharacter", "SetReplicatedCollision");

	Params::GzAICharacter_SetReplicatedCollision Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAICharacter.LaunchTo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          NavDestination                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAICharacter::LaunchTo(const struct FVector& NavDestination) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAICharacter", "LaunchTo");

	Params::GzAICharacter_LaunchTo Parms{};

	Parms.NavDestination = std::move(NavDestination);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAICharacter.OnRep_bIsCollisionEnabled
// (Final, Native, Public, Const)

void AGzAICharacter::OnRep_bIsCollisionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAICharacter", "OnRep_bIsCollisionEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.InitializeBehavior
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UBehaviorTree*                    BTree                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::InitializeBehavior(class UBehaviorTree* BTree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "InitializeBehavior");

	Params::GzAIController_InitializeBehavior Parms{};

	Parms.BTree = BTree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.LaunchOverObstacle
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NavDestination                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartEdgeLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndEdgeLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::LaunchOverObstacle(const struct FVector& NavDestination, const struct FVector& StartEdgeLocation, const struct FVector& EndEdgeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "LaunchOverObstacle");

	Params::GzAIController_LaunchOverObstacle Parms{};

	Parms.NavDestination = std::move(NavDestination);
	Parms.StartEdgeLocation = std::move(StartEdgeLocation);
	Parms.EndEdgeLocation = std::move(EndEdgeLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.LaunchTo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NavDestination                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::LaunchTo(const struct FVector& NavDestination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "LaunchTo");

	Params::GzAIController_LaunchTo Parms{};

	Parms.NavDestination = std::move(NavDestination);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// SparseDelegateFunction G01.GzAIController.OnAIChangeLODEvent_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGzAILOD                         AILOD                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzAIController::OnAIChangeLODEvent_BP__DelegateSignature(const struct FGzAILOD& AILOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "OnAIChangeLODEvent_BP__DelegateSignature");

	Params::GzAIController_OnAIChangeLODEvent_BP__DelegateSignature Parms{};

	Parms.AILOD = std::move(AILOD);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzAIController.OnCapsuleHitCallback
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzAIController::OnCapsuleHitCallback(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "OnCapsuleHitCallback");

	Params::GzAIController_OnCapsuleHitCallback Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.RefillAmmoStock
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    RefillOneClip                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::RefillAmmoStock(const bool RefillOneClip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "RefillAmmoStock");

	Params::GzAIController_RefillAmmoStock Parms{};

	Parms.RefillOneClip = RefillOneClip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.RequestControllerSenseTeamEvent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LastLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EventRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PassedInfoAge                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStrength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::RequestControllerSenseTeamEvent(class AActor* Target, const struct FVector& LastLocation, float EventRange, float PassedInfoAge, float InStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "RequestControllerSenseTeamEvent");

	Params::GzAIController_RequestControllerSenseTeamEvent Parms{};

	Parms.Target = Target;
	Parms.LastLocation = std::move(LastLocation);
	Parms.EventRange = EventRange;
	Parms.PassedInfoAge = PassedInfoAge;
	Parms.InStrength = InStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetCurrentActionState
// (Final, Native, Public, HasOutParams)
// Parameters:
// EGzNpcActionStates                      ActionStateRef                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::SetCurrentActionState(const EGzNpcActionStates& ActionStateRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetCurrentActionState");

	Params::GzAIController_SetCurrentActionState Parms{};

	Parms.ActionStateRef = ActionStateRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetCurrentMentalState
// (Final, Native, Public, HasOutParams)
// Parameters:
// EGzMentalState                          MentalStateRef                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::SetCurrentMentalState(const EGzMentalState& MentalStateRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetCurrentMentalState");

	Params::GzAIController_SetCurrentMentalState Parms{};

	Parms.MentalStateRef = MentalStateRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetCurrentMentalStateTime
// (Final, Native, Public, HasOutParams)
// Parameters:
// float                                   MentalStateTimeRef                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::SetCurrentMentalStateTime(const float& MentalStateTimeRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetCurrentMentalStateTime");

	Params::GzAIController_SetCurrentMentalStateTime Parms{};

	Parms.MentalStateTimeRef = MentalStateTimeRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetFocusTargetBodyPartsOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           FocusActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCharacterDamageAreaType              DamageAreaType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::SetFocusTargetBodyPartsOffset(class AActor* FocusActor, const EGzCharacterDamageAreaType DamageAreaType, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetFocusTargetBodyPartsOffset");

	Params::GzAIController_SetFocusTargetBodyPartsOffset Parms{};

	Parms.FocusActor = FocusActor;
	Parms.DamageAreaType = DamageAreaType;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetTargetNonVisibleBodyParts
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<EGzCharacterDamageAreaType>      InNonVisibleParts                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzAIController::SetTargetNonVisibleBodyParts(const TArray<EGzCharacterDamageAreaType>& InNonVisibleParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetTargetNonVisibleBodyParts");

	Params::GzAIController_SetTargetNonVisibleBodyParts Parms{};

	Parms.InNonVisibleParts = std::move(InNonVisibleParts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetTargetVisibleBodyPart
// (Final, Native, Public, HasOutParams)
// Parameters:
// EGzCharacterDamageAreaType              InVisibleParts                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIController::SetTargetVisibleBodyPart(const EGzCharacterDamageAreaType& InVisibleParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetTargetVisibleBodyPart");

	Params::GzAIController_SetTargetVisibleBodyPart Parms{};

	Parms.InVisibleParts = InVisibleParts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.SetZoneControl
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             InValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzAIController::SetZoneControl(const struct FBox& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "SetZoneControl");

	Params::GzAIController_SetZoneControl Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.StopBrain
// (Final, Native, Public, BlueprintCallable)

void AGzAIController::StopBrain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "StopBrain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIController.GetActorLastStimulusLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLoc                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::GetActorLastStimulusLocation(const class AActor* Actor, struct FVector& OutLoc) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetActorLastStimulusLocation");

	Params::GzAIController_GetActorLastStimulusLocation Parms{};

	Parms.Actor = Actor;
	Parms.OutLoc = std::move(OutLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutLoc = std::move(Parms.OutLoc);

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetAIProcessTargetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAIProcessTargetComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIProcessTargetComponent* AGzAIController::GetAIProcessTargetComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetAIProcessTargetComponent");

	Params::GzAIController_GetAIProcessTargetComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetAIVoiceComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAIVoiceComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAIVoiceComponent* AGzAIController::GetAIVoiceComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetAIVoiceComponent");

	Params::GzAIController_GetAIVoiceComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetBlockSightSenseTags
// (Final, Native, Public, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer AGzAIController::GetBlockSightSenseTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetBlockSightSenseTags");

	Params::GzAIController_GetBlockSightSenseTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetCurrentActionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzNpcActionStates                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzNpcActionStates AGzAIController::GetCurrentActionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetCurrentActionState");

	Params::GzAIController_GetCurrentActionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetCurrentMentalState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzMentalState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzMentalState AGzAIController::GetCurrentMentalState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetCurrentMentalState");

	Params::GzAIController_GetCurrentMentalState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetCurrentMentalStateTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzAIController::GetCurrentMentalStateTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetCurrentMentalStateTime");

	Params::GzAIController_GetCurrentMentalStateTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetOwningGameplayAITag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AGzAIController::GetOwningGameplayAITag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetOwningGameplayAITag");

	Params::GzAIController_GetOwningGameplayAITag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Damage*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Damage* AGzAIController::GetSenseConfigDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigDamage");

	Params::GzAIController_GetSenseConfigDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigHearing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Hearing*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Hearing* AGzAIController::GetSenseConfigHearing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigHearing");

	Params::GzAIController_GetSenseConfigHearing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigPrediction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Prediction*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Prediction* AGzAIController::GetSenseConfigPrediction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigPrediction");

	Params::GzAIController_GetSenseConfigPrediction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Sight*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Sight* AGzAIController::GetSenseConfigSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigSight");

	Params::GzAIController_GetSenseConfigSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Team*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Team* AGzAIController::GetSenseConfigTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigTeam");

	Params::GzAIController_GetSenseConfigTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetSenseConfigTouch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAISenseConfig_Touch*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAISenseConfig_Touch* AGzAIController::GetSenseConfigTouch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetSenseConfigTouch");

	Params::GzAIController_GetSenseConfigTouch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetTargetNonVisibleBodyParts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<EGzCharacterDamageAreaType>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<EGzCharacterDamageAreaType> AGzAIController::GetTargetNonVisibleBodyParts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetTargetNonVisibleBodyParts");

	Params::GzAIController_GetTargetNonVisibleBodyParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetTargetVisibleBodyPart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCharacterDamageAreaType              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzCharacterDamageAreaType AGzAIController::GetTargetVisibleBodyPart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetTargetVisibleBodyPart");

	Params::GzAIController_GetTargetVisibleBodyPart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.GetZoneControl
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox AGzAIController::GetZoneControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "GetZoneControl");

	Params::GzAIController_GetZoneControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.HasActiveDamageStimulus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::HasActiveDamageStimulus(class AActor* ActorPtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "HasActiveDamageStimulus");

	Params::GzAIController_HasActiveDamageStimulus Parms{};

	Parms.ActorPtr = ActorPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.HasActiveSightSenseStimulus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::HasActiveSightSenseStimulus(class AActor* ActorPtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "HasActiveSightSenseStimulus");

	Params::GzAIController_HasActiveSightSenseStimulus Parms{};

	Parms.ActorPtr = ActorPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.HasAnyCurrentStimulus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::HasAnyCurrentStimulus(class AActor* ActorPtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "HasAnyCurrentStimulus");

	Params::GzAIController_HasAnyCurrentStimulus Parms{};

	Parms.ActorPtr = ActorPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.HasZoneControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::HasZoneControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "HasZoneControl");

	Params::GzAIController_HasZoneControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.IsLocationReachable
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Loc                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AcceptanceRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UNavigationQueryFilter>FilterClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::IsLocationReachable(const struct FVector& Loc, float AcceptanceRadius, TSubclassOf<class UNavigationQueryFilter> FilterClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "IsLocationReachable");

	Params::GzAIController_IsLocationReachable Parms{};

	Parms.Loc = std::move(Loc);
	Parms.AcceptanceRadius = AcceptanceRadius;
	Parms.FilterClass = FilterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIController.IsPointInZoneControl
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          InValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIController::IsPointInZoneControl(const struct FVector& InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIController", "IsPointInZoneControl");

	Params::GzAIController_IsPointInZoneControl Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.OnPawnInactive
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIInfo::OnPawnInactive(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "OnPawnInactive");

	Params::GzAIInfo_OnPawnInactive Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIInfo.SetInactive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIInfo::SetInactive(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "SetInactive");

	Params::GzAIInfo_SetInactive Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIInfo.SetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIInfo::SetName(const class FString& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "SetName");

	Params::GzAIInfo_SetName Parms{};

	Parms.InName = std::move(InName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIInfo.GetAILODId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGzAIInfo::GetAILODId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetAILODId");

	Params::GzAIInfo_GetAILODId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIInfo::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetId");

	Params::GzAIInfo_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetNPCName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzAIInfo::GetNPCName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetNPCName");

	Params::GzAIInfo_GetNPCName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetNPCType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCType                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENPCType AGzAIInfo::GetNPCType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetNPCType");

	Params::GzAIInfo_GetNPCType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* AGzAIInfo::GetPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetPawn");

	Params::GzAIInfo_GetPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetSpawner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzNPCSpawner*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzNPCSpawner* AGzAIInfo::GetSpawner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetSpawner");

	Params::GzAIInfo_GetSpawner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIInfo::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "GetTeamId");

	Params::GzAIInfo_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIInfo::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "IsAlive");

	Params::GzAIInfo_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIInfo.IsInactive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIInfo::IsInactive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIInfo", "IsInactive");

	Params::GzAIInfo_IsInactive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzXPLogEntryWidget.SetStatName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FText                             Param_Name                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzXPLogEntryWidget::SetStatName(const class FText& Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXPLogEntryWidget", "SetStatName");

	Params::GzXPLogEntryWidget_SetStatName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMirrorBreakerInfo.ApplyCustomization
// (Final, Native, Public, BlueprintCallable)

void AGzMirrorBreakerInfo::ApplyCustomization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMirrorBreakerInfo", "ApplyCustomization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLootSpawner.GetLocalSocketTransforms
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> AGzLootSpawner::GetLocalSocketTransforms() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootSpawner", "GetLocalSocketTransforms");

	Params::GzLootSpawner_GetLocalSocketTransforms Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzContainerLootSpawner.OnContainerStateChanged
// (Event, Protected, BlueprintEvent)

void AGzContainerLootSpawner::OnContainerStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzContainerLootSpawner", "OnContainerStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzContainerLootSpawner.OnInteract
// (Final, Native, Private)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzContainerLootSpawner::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzContainerLootSpawner", "OnInteract");

	Params::GzContainerLootSpawner_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzContainerLootSpawner.OnRep_IsOpened
// (Final, Native, Protected)

void AGzContainerLootSpawner::OnRep_IsOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzContainerLootSpawner", "OnRep_IsOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.AddMarker
// (Final, Native, Protected)
// Parameters:
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::AddMarker(class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "AddMarker");

	Params::GzBaseMarkerContainer_AddMarker Parms{};

	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnMarkerAdded
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMarkerWidget*                  MarkerWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::OnMarkerAdded(class UGzMarkerWidget* MarkerWidget, class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnMarkerAdded");

	Params::GzBaseMarkerContainer_OnMarkerAdded Parms{};

	Parms.MarkerWidget = MarkerWidget;
	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnMarkerRemoved
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMarkerWidget*                  MarkerWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::OnMarkerRemoved(class UGzMarkerWidget* MarkerWidget, class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnMarkerRemoved");

	Params::GzBaseMarkerContainer_OnMarkerRemoved Parms{};

	Parms.MarkerWidget = MarkerWidget;
	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnMarkersDirty
// (Final, Native, Protected)

void UGzBaseMarkerContainer::OnMarkersDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnMarkersDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnMarkerStateChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            States                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::OnMarkerStateChanged(class UGzMarkerComponent* MarkerComponent, const struct FGameplayTagContainer& States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnMarkerStateChanged");

	Params::GzBaseMarkerContainer_OnMarkerStateChanged Parms{};

	Parms.MarkerComponent = MarkerComponent;
	Parms.States = std::move(States);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnMarkerWidgetRemove
// (Native, Protected)
// Parameters:
// class UGzMarkerComponent*               InMarkerComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::OnMarkerWidgetRemove(class UGzMarkerComponent* InMarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnMarkerWidgetRemove");

	Params::GzBaseMarkerContainer_OnMarkerWidgetRemove Parms{};

	Parms.InMarkerComponent = InMarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.OnPawnChanged
// (Final, Native, Protected)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "OnPawnChanged");

	Params::GzBaseMarkerContainer_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.RefreshMarker
// (Final, Native, Protected)
// Parameters:
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::RefreshMarker(class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "RefreshMarker");

	Params::GzBaseMarkerContainer_RefreshMarker Parms{};

	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.RefreshMarkers
// (Native, Protected)

void UGzBaseMarkerContainer::RefreshMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "RefreshMarkers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseMarkerContainer.RemoveMarker
// (Final, Native, Protected)
// Parameters:
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBaseMarkerContainer::RemoveMarker(class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseMarkerContainer", "RemoveMarker");

	Params::GzBaseMarkerContainer_RemoveMarker Parms{};

	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerContainer.RequestPing
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PingType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapMarkerContainer::RequestPing(const struct FGameplayTag& PingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerContainer", "RequestPing");

	Params::GzMapMarkerContainer_RequestPing Parms{};

	Parms.PingType = std::move(PingType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.AddAllAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENPCTeamAttitude                        NPCTeamAttitude                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIManager::AddAllAttitudeTeam(ENPCTeamAttitude NPCTeamAttitude, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "AddAllAttitudeTeam");

	Params::GzAIManager_AddAllAttitudeTeam Parms{};

	Parms.NPCTeamAttitude = NPCTeamAttitude;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.AddAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENPCTeamAttitude                        AttitudeType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdA                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::AddAttitudeTeam(ENPCTeamAttitude AttitudeType, int32 TeamIdA, int32 TeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "AddAttitudeTeam");

	Params::GzAIManager_AddAttitudeTeam Parms{};

	Parms.AttitudeType = AttitudeType;
	Parms.TeamIdA = TeamIdA;
	Parms.TeamIdB = TeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.AddFriendTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIdA                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::AddFriendTeam(int32 TeamIdA, int32 TeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "AddFriendTeam");

	Params::GzAIManager_AddFriendTeam Parms{};

	Parms.TeamIdA = TeamIdA;
	Parms.TeamIdB = TeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.AddHostileTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIdA                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::AddHostileTeam(int32 TeamIdA, int32 TeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "AddHostileTeam");

	Params::GzAIManager_AddHostileTeam Parms{};

	Parms.TeamIdA = TeamIdA;
	Parms.TeamIdB = TeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.AddNeutralTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIdA                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::AddNeutralTeam(int32 TeamIdA, int32 TeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "AddNeutralTeam");

	Params::GzAIManager_AddNeutralTeam Parms{};

	Parms.TeamIdA = TeamIdA;
	Parms.TeamIdB = TeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.MakeNPCTeamFriendlyToPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NPCTeamId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIManager::MakeNPCTeamFriendlyToPlayers(const int32 NPCTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "MakeNPCTeamFriendlyToPlayers");

	Params::GzAIManager_MakeNPCTeamFriendlyToPlayers Parms{};

	Parms.NPCTeamId = NPCTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.OnRep_AIInfoStorage
// (Final, Native, Private)

void AGzAIManager::OnRep_AIInfoStorage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "OnRep_AIInfoStorage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.OnRep_NPCTeamStorage
// (Final, Native, Private)

void AGzAIManager::OnRep_NPCTeamStorage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "OnRep_NPCTeamStorage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.RemoveAllAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIManager::RemoveAllAttitudeTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "RemoveAllAttitudeTeam");

	Params::GzAIManager_RemoveAllAttitudeTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.RemoveAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIdA                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIdB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::RemoveAttitudeTeam(int32 TeamIdA, int32 TeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "RemoveAttitudeTeam");

	Params::GzAIManager_RemoveAttitudeTeam Parms{};

	Parms.TeamIdA = TeamIdA;
	Parms.TeamIdB = TeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.SetAILODsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIManager::SetAILODsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "SetAILODsEnabled");

	Params::GzAIManager_SetAILODsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.SetSuppressNPCSpawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIManager::SetSuppressNPCSpawn(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "SetSuppressNPCSpawn");

	Params::GzAIManager_SetSuppressNPCSpawn Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIManager.GetAIInfoByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AGzAIInfo*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzAIInfo* AGzAIManager::GetAIInfoByIndex(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetAIInfoByIndex");

	Params::GzAIManager_GetAIInfoByIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetAudioEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     AudioTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* AGzAIManager::GetAudioEvent(const struct FGameplayTag& AudioTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetAudioEvent");

	Params::GzAIManager_GetAudioEvent Parms{};

	Parms.AudioTag = std::move(AudioTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetDangerousZones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGzBattleRoyaleZone*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzBattleRoyaleZone*> AGzAIManager::GetDangerousZones() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetDangerousZones");

	Params::GzAIManager_GetDangerousZones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetFriendlyMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APawn*>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APawn*> AGzAIManager::GetFriendlyMembers(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetFriendlyMembers");

	Params::GzAIManager_GetFriendlyMembers Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNPCData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     NPCType                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNPCData*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNPCData* AGzAIManager::GetNPCData(const struct FGameplayTag& NPCType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNPCData");

	Params::GzAIManager_GetNPCData Parms{};

	Parms.NPCType = std::move(NPCType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNPCTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzNPCTeam*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzNPCTeam* AGzAIManager::GetNPCTeam(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNPCTeam");

	Params::GzAIManager_GetNPCTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNPCTeamMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APawn*>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APawn*> AGzAIManager::GetNPCTeamMembers(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNPCTeamMembers");

	Params::GzAIManager_GetNPCTeamMembers Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNumActiveNPCs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIManager::GetNumActiveNPCs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNumActiveNPCs");

	Params::GzAIManager_GetNumActiveNPCs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNumNPCLOD
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   LodId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIManager::GetNumNPCLOD(uint8 LodId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNumNPCLOD");

	Params::GzAIManager_GetNumNPCLOD Parms{};

	Parms.LodId = LodId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNumNPCs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIManager::GetNumNPCs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNumNPCs");

	Params::GzAIManager_GetNumNPCs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetNumNPCTeams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzAIManager::GetNumNPCTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetNumNPCTeams");

	Params::GzAIManager_GetNumNPCTeams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetPredefinedCustomization
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     CustomizationTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCustomizationProfileData*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCustomizationProfileData* AGzAIManager::GetPredefinedCustomization(const struct FGameplayTag& CustomizationTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetPredefinedCustomization");

	Params::GzAIManager_GetPredefinedCustomization Parms{};

	Parms.CustomizationTag = std::move(CustomizationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.GetSafeZones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGzBattleRoyaleZone*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzBattleRoyaleZone*> AGzAIManager::GetSafeZones() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "GetSafeZones");

	Params::GzAIManager_GetSafeZones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.IsSuppressNPCSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::IsSuppressNPCSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "IsSuppressNPCSpawn");

	Params::GzAIManager_IsSuppressNPCSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.IsTeamFriends
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NPCTeamId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::IsTeamFriends(int32 NPCTeamId, int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "IsTeamFriends");

	Params::GzAIManager_IsTeamFriends Parms{};

	Parms.NPCTeamId = NPCTeamId;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIManager.IsTeamNeutrals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NPCTeamId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIManager::IsTeamNeutrals(int32 NPCTeamId, int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIManager", "IsTeamNeutrals");

	Params::GzAIManager_IsTeamNeutrals Parms{};

	Parms.NPCTeamId = NPCTeamId;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAimAssistComponent.OnInputMethodChanged
// (Final, Native, Protected)
// Parameters:
// ECommonInputType                        bNewInputType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAimAssistComponent::OnInputMethodChanged(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAimAssistComponent", "OnInputMethodChanged");

	Params::GzAimAssistComponent_OnInputMethodChanged Parms{};

	Parms.bNewInputType = bNewInputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAimAssistComponent.OnOwnerControllerChanged
// (Final, Native, Protected)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      OldController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      NewController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAimAssistComponent::OnOwnerControllerChanged(class APawn* Pawn, class AController* OldController, class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAimAssistComponent", "OnOwnerControllerChanged");

	Params::GzAimAssistComponent_OnOwnerControllerChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.OldController = OldController;
	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAimAssistComponent.OnOwnerTagAdded
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     ChangedTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAimAssistComponent::OnOwnerTagAdded(const struct FGameplayTag& ChangedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAimAssistComponent", "OnOwnerTagAdded");

	Params::GzAimAssistComponent_OnOwnerTagAdded Parms{};

	Parms.ChangedTag = std::move(ChangedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAimAssistComponent.OnOwnerTagRemoved
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     ChangedTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAimAssistComponent::OnOwnerTagRemoved(const struct FGameplayTag& ChangedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAimAssistComponent", "OnOwnerTagRemoved");

	Params::GzAimAssistComponent_OnOwnerTagRemoved Parms{};

	Parms.ChangedTag = std::move(ChangedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAimAssistComponent.OnWeaponEquipChanged
// (Final, Native, Protected)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAimAssistComponent::OnWeaponEquipChanged(const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAimAssistComponent", "OnWeaponEquipChanged");

	Params::GzAimAssistComponent_OnWeaponEquipChanged Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.OnEndedSpectating
// (Final, Native, Private)

void AGzHUDBase::OnEndedSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnEndedSpectating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.OnInit_BP
// (Event, Protected, BlueprintEvent)

void AGzHUDBase::OnInit_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnInit_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzHUDBase.OnMatchStageChanged
// (Event, Protected, BlueprintEvent)

void AGzHUDBase::OnMatchStageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnMatchStageChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzHUDBase.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUDBase::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnPawnChanged");

	Params::GzHUDBase_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.OnPlayerControllerInitialized
// (Final, Native, Private)
// Parameters:
// class AGzPlayerController*              PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUDBase::OnPlayerControllerInitialized(class AGzPlayerController* PlayerController, class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnPlayerControllerInitialized");

	Params::GzHUDBase_OnPlayerControllerInitialized Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.OnPlayerControllerInitialized_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzPlayerController*              PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUDBase::OnPlayerControllerInitialized_BP(class AGzPlayerController* PlayerController, class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnPlayerControllerInitialized_BP");

	Params::GzHUDBase_OnPlayerControllerInitialized_BP Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDBase.OnStartedSpectating
// (Final, Native, Private)

void AGzHUDBase::OnStartedSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnStartedSpectating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.OnViewTargetPlayerStateRep
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUDBase::OnViewTargetPlayerStateRep(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "OnViewTargetPlayerStateRep");

	Params::GzHUDBase_OnViewTargetPlayerStateRep Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDBase.ReceiveOnPawnChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUDBase::ReceiveOnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "ReceiveOnPawnChanged");

	Params::GzHUDBase_ReceiveOnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDBase.GetActiveStageUITags
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ActiveStageTags                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer AGzHUDBase::GetActiveStageUITags(const struct FGameplayTagContainer& ActiveStageTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "GetActiveStageUITags");

	Params::GzHUDBase_GetActiveStageUITags Parms{};

	Parms.ActiveStageTags = std::move(ActiveStageTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHUDBase.GetView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzHUDView*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzHUDView* AGzHUDBase::GetView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "GetView");

	Params::GzHUDBase_GetView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHUDBase.ShouldWaitKillerSpectateEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzHUDBase::ShouldWaitKillerSpectateEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDBase", "ShouldWaitKillerSpectateEnd");

	Params::GzHUDBase_ShouldWaitKillerSpectateEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.FindDefeatedTeammates
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludePlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzPlayerState*> UGzTeamBlueprintLibrary::FindDefeatedTeammates(class APlayerState* PlayerState, bool IncludePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "FindDefeatedTeammates");

	Params::GzTeamBlueprintLibrary_FindDefeatedTeammates Parms{};

	Parms.PlayerState = PlayerState;
	Parms.IncludePlayer = IncludePlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.FindTeammates
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludePlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzPlayerState*> UGzTeamBlueprintLibrary::FindTeammates(class APlayerState* PlayerState, bool IncludePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "FindTeammates");

	Params::GzTeamBlueprintLibrary_FindTeammates Parms{};

	Parms.PlayerState = PlayerState;
	Parms.IncludePlayer = IncludePlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.FindTeammatesInMatch
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludePlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzPlayerState*> UGzTeamBlueprintLibrary::FindTeammatesInMatch(class APlayerState* PlayerState, bool IncludePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "FindTeammatesInMatch");

	Params::GzTeamBlueprintLibrary_FindTeammatesInMatch Parms{};

	Parms.PlayerState = PlayerState;
	Parms.IncludePlayer = IncludePlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetAliveTeams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UGzTeamBlueprintLibrary::GetAliveTeams(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetAliveTeams");

	Params::GzTeamBlueprintLibrary_GetAliveTeams Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetNumAliveTeams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzTeamBlueprintLibrary::GetNumAliveTeams(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetNumAliveTeams");

	Params::GzTeamBlueprintLibrary_GetNumAliveTeams Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetNumNotDefeatedTeams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzTeamBlueprintLibrary::GetNumNotDefeatedTeams(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetNumNotDefeatedTeams");

	Params::GzTeamBlueprintLibrary_GetNumNotDefeatedTeams Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetPlayerCharacterFromPlayerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerCharacter*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerCharacter* UGzTeamBlueprintLibrary::GetPlayerCharacterFromPlayerId(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetPlayerCharacterFromPlayerId");

	Params::GzTeamBlueprintLibrary_GetPlayerCharacterFromPlayerId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetPlayerState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzTeamBlueprintLibrary::GetPlayerState(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetPlayerState");

	Params::GzTeamBlueprintLibrary_GetPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamAttitude
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           A                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           B                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude UGzTeamBlueprintLibrary::GetTeamAttitude(class AActor* A, class AActor* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamAttitude");

	Params::GzTeamBlueprintLibrary_GetTeamAttitude Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamAttitudeByPlayerIds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIdA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIdB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude UGzTeamBlueprintLibrary::GetTeamAttitudeByPlayerIds(const class UObject* WorldContextObject, int32 PlayerIdA, int32 PlayerIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamAttitudeByPlayerIds");

	Params::GzTeamBlueprintLibrary_GetTeamAttitudeByPlayerIds Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerIdA = PlayerIdA;
	Parms.PlayerIdB = PlayerIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamFromPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* UGzTeamBlueprintLibrary::GetTeamFromPlayer(const class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamFromPlayer");

	Params::GzTeamBlueprintLibrary_GetTeamFromPlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamFromPlayerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* UGzTeamBlueprintLibrary::GetTeamFromPlayerId(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamFromPlayerId");

	Params::GzTeamBlueprintLibrary_GetTeamFromPlayerId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamMembers
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UGzTeamBlueprintLibrary::GetTeamMembers(class UObject* WorldContextObject, int32 Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamMembers");

	Params::GzTeamBlueprintLibrary_GetTeamMembers Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamBlueprintLibrary.GetTeamsCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzTeamBlueprintLibrary::GetTeamsCount(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTeamBlueprintLibrary", "GetTeamsCount");

	Params::GzTeamBlueprintLibrary_GetTeamsCount Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameStatCollector.OnStartCollecting
// (Native, Event, Protected, BlueprintEvent)

void UGzGameStatCollector::OnStartCollecting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStatCollector", "OnStartCollecting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameStatCollector.OnStopCollecting
// (Native, Event, Protected, BlueprintEvent)

void UGzGameStatCollector::OnStopCollecting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStatCollector", "OnStopCollecting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.IncrementStat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::IncrementStat(const int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "IncrementStat");

	Params::GzGlobalStatsCollector_IncrementStat Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.IncrementSubStat
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SubKey                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::IncrementSubStat(const class FName& SubKey, const int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "IncrementSubStat");

	Params::GzGlobalStatsCollector_IncrementSubStat Parms{};

	Parms.SubKey = SubKey;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.SetStat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::SetStat(const int32 PlayerId, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "SetStat");

	Params::GzGlobalStatsCollector_SetStat Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.SetSubStat
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SubKey                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::SetSubStat(const class FName& SubKey, const int32 PlayerId, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "SetSubStat");

	Params::GzGlobalStatsCollector_SetSubStat Parms{};

	Parms.SubKey = SubKey;
	Parms.PlayerId = PlayerId;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.AddStat
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::AddStat(const int32 PlayerId, const float Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "AddStat");

	Params::GzGlobalStatsCollector_AddStat Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalStatsCollector.AddSubStat
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SubKey                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGlobalStatsCollector::AddSubStat(const class FName& SubKey, const int32 PlayerId, const float Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGlobalStatsCollector", "AddSubStat");

	Params::GzGlobalStatsCollector_AddSubStat Parms{};

	Parms.SubKey = SubKey;
	Parms.PlayerId = PlayerId;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIPawn.OnDeath
// (Native, Event, Public, BlueprintEvent)

void AGzAIPawn::OnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "OnDeath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIPawn.OnHealthChange
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIPawn::OnHealthChange(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "OnHealthChange");

	Params::GzAIPawn_OnHealthChange Parms{};

	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzAIPawn.OnRep_TeamId
// (Final, Native, Private)

void AGzAIPawn::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIPawn.Shoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bStart                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAIPawn::Shoot(bool bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "Shoot");

	Params::GzAIPawn_Shoot Parms{};

	Parms.bStart = bStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIPawn.GetCombatComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCombatComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCombatComponent* AGzAIPawn::GetCombatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "GetCombatComponent");

	Params::GzAIPawn_GetCombatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIPawn.GetGzAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAbilitySystemComponent* AGzAIPawn::GetGzAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "GetGzAbilitySystemComponent");

	Params::GzAIPawn_GetGzAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIPawn.GetInventoryComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInvComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInvComponent* AGzAIPawn::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "GetInventoryComponent");

	Params::GzAIPawn_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIPawn.HasCombatComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIPawn::HasCombatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "HasCombatComponent");

	Params::GzAIPawn_HasCombatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIPawn.HasInventoryComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAIPawn::HasInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawn", "HasInventoryComponent");

	Params::GzAIPawn_HasInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUserWidgetExtension.EventTick
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUserWidgetExtension::EventTick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "EventTick");

	Params::GzUserWidgetExtension_EventTick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzUserWidgetExtension.OnConstruct
// (Event, Protected, BlueprintEvent)

void UGzUserWidgetExtension::OnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "OnConstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzUserWidgetExtension.OnDestruct
// (Event, Protected, BlueprintEvent)

void UGzUserWidgetExtension::OnDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "OnDestruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzUserWidgetExtension.OnInitialize
// (Event, Protected, BlueprintEvent)

void UGzUserWidgetExtension::OnInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "OnInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzUserWidgetExtension.DoesRequiresTick
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzUserWidgetExtension::DoesRequiresTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "DoesRequiresTick");

	Params::GzUserWidgetExtension_DoesRequiresTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzUserWidgetExtension.GetWidget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGzUserWidgetExtension::GetWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUserWidgetExtension", "GetWidget");

	Params::GzUserWidgetExtension_GetWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIPawnInterface.GetAiId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IGzAIPawnInterface::GetAiId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIPawnInterface", "GetAiId");

	Params::GzAIPawnInterface_GetAiId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.GetArmorDamageReductionValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbComponent::GetArmorDamageReductionValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "GetArmorDamageReductionValue");

	Params::GzLimbComponent_GetArmorDamageReductionValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.GetBodyPartItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartItemData*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartItemData* UGzLimbComponent::GetBodyPartItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "GetBodyPartItemData");

	Params::GzLimbComponent_GetBodyPartItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.GetLimbDamageMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbComponent::GetLimbDamageMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "GetLimbDamageMultiplier");

	Params::GzLimbComponent_GetLimbDamageMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.GetType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLimbType UGzLimbComponent::GetType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "GetType");

	Params::GzLimbComponent_GetType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.HasLoadedMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLimbComponent::HasLoadedMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "HasLoadedMesh");

	Params::GzLimbComponent_HasLoadedMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbComponent.IsDetachable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLimbComponent::IsDetachable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbComponent", "IsDetachable");

	Params::GzLimbComponent_IsDetachable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageableActor.BP_OnDeath
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    HasDeathHitPoint                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DeathHitPoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDamageableActor::BP_OnDeath(bool HasDeathHitPoint, const struct FVector& DeathHitPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableActor", "BP_OnDeath");

	Params::GzDamageableActor_BP_OnDeath Parms{};

	Parms.HasDeathHitPoint = HasDeathHitPoint;
	Parms.DeathHitPoint = std::move(DeathHitPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageableActor.BP_OnHealthChange
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDamageableActor::BP_OnHealthChange(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableActor", "BP_OnHealthChange");

	Params::GzDamageableActor_BP_OnHealthChange Parms{};

	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageableActor.OnRep_AliveObjectAttributeSet
// (Final, Native, Public)

void AGzDamageableActor::OnRep_AliveObjectAttributeSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableActor", "OnRep_AliveObjectAttributeSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableActor.GetCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDamageableActor::GetCurrentHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableActor", "GetCurrentHealth");

	Params::GzDamageableActor_GetCurrentHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHitReactableActor.BP_ClientOnDiedPlayFx
// (BlueprintCosmetic, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          LastHitLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHitReactableActor::BP_ClientOnDiedPlayFx(const struct FVector& LastHitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactableActor", "BP_ClientOnDiedPlayFx");

	Params::GzHitReactableActor_BP_ClientOnDiedPlayFx Parms{};

	Parms.LastHitLocation = std::move(LastHitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHitReactableActor.BP_OnHitApplied
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzHitReactableActor::BP_OnHitApplied(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactableActor", "BP_OnHitApplied");

	Params::GzHitReactableActor_BP_OnHitApplied Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHitReactableActor.GetLastHitResult
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult                       OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzHitReactableActor::GetLastHitResult(struct FHitResult* OutHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactableActor", "GetLastHitResult");

	Params::GzHitReactableActor_GetLastHitResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);

	return Parms.ReturnValue;
}


// Function G01.GzHitReactableActor.Multicast_OnDied
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FVector_NetQuantize              LastHitLocation                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHitReactableActor::Multicast_OnDied(const struct FVector_NetQuantize& LastHitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactableActor", "Multicast_OnDied");

	Params::GzHitReactableActor_Multicast_OnDied Parms{};

	Parms.LastHitLocation = std::move(LastHitLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitReactableActor.OnRep_Hits
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FHitResult>               OldHits                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzHitReactableActor::OnRep_Hits(const TArray<struct FHitResult>& OldHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactableActor", "OnRep_Hits");

	Params::GzHitReactableActor_OnRep_Hits Parms{};

	Parms.OldHits = std::move(OldHits);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConfirmLoadoutSelectionButton.SetCooldown
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Cooldown                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzConfirmLoadoutSelectionButton::SetCooldown(const float Cooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmLoadoutSelectionButton", "SetCooldown");

	Params::GzConfirmLoadoutSelectionButton_SetCooldown Parms{};

	Parms.Cooldown = Cooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzConfirmLoadoutSelectionButton.SetDisabled
// (Event, Public, BlueprintEvent)

void UGzConfirmLoadoutSelectionButton::SetDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmLoadoutSelectionButton", "SetDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzConfirmLoadoutSelectionButton.SetEnabled
// (Event, Public, BlueprintEvent)

void UGzConfirmLoadoutSelectionButton::SetEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmLoadoutSelectionButton", "SetEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAIProcessTargetComponent.AddAlertLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   TargetId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAIProcessTargetComponent::AddAlertLocation(int32 TargetId, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "AddAlertLocation");

	Params::GzAIProcessTargetComponent_AddAlertLocation Parms{};

	Parms.TargetId = TargetId;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIProcessTargetComponent.RemoveAllAlertLocation
// (Final, Native, Public, BlueprintCallable)

void UGzAIProcessTargetComponent::RemoveAllAlertLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "RemoveAllAlertLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIProcessTargetComponent.TryAddUniqueTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::TryAddUniqueTarget(class AActor* Target, int32 TargetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "TryAddUniqueTarget");

	Params::GzAIProcessTargetComponent_TryAddUniqueTarget Parms{};

	Parms.Target = Target;
	Parms.TargetId = TargetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.TryRemoveNonActiveTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TargetId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::TryRemoveNonActiveTarget(int32 TargetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "TryRemoveNonActiveTarget");

	Params::GzAIProcessTargetComponent_TryRemoveNonActiveTarget Parms{};

	Parms.TargetId = TargetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.TryRemoveTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TargetId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::TryRemoveTarget(int32 TargetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "TryRemoveTarget");

	Params::GzAIProcessTargetComponent_TryRemoveTarget Parms{};

	Parms.TargetId = TargetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.UpdateTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAIProcessTargetComponent::UpdateTargets(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "UpdateTargets");

	Params::GzAIProcessTargetComponent_UpdateTargets Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIProcessTargetComponent.GetAIController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzAIProcessTargetComponent::GetAIController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "GetAIController");

	Params::GzAIProcessTargetComponent_GetAIController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.GetCurrentTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzAIProcessTargetComponent::GetCurrentTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "GetCurrentTarget");

	Params::GzAIProcessTargetComponent_GetCurrentTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.GetNearestAlertLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::GetNearestAlertLocation(struct FVector& OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "GetNearestAlertLocation");

	Params::GzAIProcessTargetComponent_GetNearestAlertLocation Parms{};

	Parms.OutLocation = std::move(OutLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.GetPawnOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzAIProcessTargetComponent::GetPawnOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "GetPawnOwner");

	Params::GzAIProcessTargetComponent_GetPawnOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.HasAlertLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::HasAlertLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "HasAlertLocations");

	Params::GzAIProcessTargetComponent_HasAlertLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIProcessTargetComponent.HasTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIProcessTargetComponent::HasTargets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIProcessTargetComponent", "HasTargets");

	Params::GzAIProcessTargetComponent_HasTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.AddAttacker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAITokenComponent::AddAttacker(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "AddAttacker");

	Params::GzAITokenComponent_AddAttacker Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.RemoveAttacker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAITokenComponent::RemoveAttacker(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "RemoveAttacker");

	Params::GzAITokenComponent_RemoveAttacker Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAITokenComponent.CanBeAttackedBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAITokenComponent::CanBeAttackedBy(class APawn* InPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "CanBeAttackedBy");

	Params::GzAITokenComponent_CanBeAttackedBy Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.GetNumAttackers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzAITokenComponent::GetNumAttackers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "GetNumAttackers");

	Params::GzAITokenComponent_GetNumAttackers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.HasAttacker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            InPawn                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAITokenComponent::HasAttacker(const class APawn* InPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "HasAttacker");

	Params::GzAITokenComponent_HasAttacker Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.HasFreeToken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAITokenComponent::HasFreeToken() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "HasFreeToken");

	Params::GzAITokenComponent_HasFreeToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAITokenComponent.IsValidAttacker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAITokenComponent::IsValidAttacker(class APawn* InPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAITokenComponent", "IsValidAttacker");

	Params::GzAITokenComponent_IsValidAttacker Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIVoiceComponent.OnStartSoundAccepted
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayTag                     AudioEventTag                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StopActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAIVoiceComponent::OnStartSoundAccepted(const struct FGameplayTag& AudioEventTag, bool StopActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIVoiceComponent", "OnStartSoundAccepted");

	Params::GzAIVoiceComponent_OnStartSoundAccepted Parms{};

	Parms.AudioEventTag = std::move(AudioEventTag);
	Parms.StopActive = StopActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAIVoiceComponent.StartSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     AIBarkTag                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StopActiveCooldownAndSound                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIVoiceComponent::StartSound(const struct FGameplayTag& AIBarkTag, bool StopActiveCooldownAndSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIVoiceComponent", "StartSound");

	Params::GzAIVoiceComponent_StartSound Parms{};

	Parms.AIBarkTag = std::move(AIBarkTag);
	Parms.StopActiveCooldownAndSound = StopActiveCooldownAndSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIVoiceComponent.HasActiveSound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIVoiceComponent::HasActiveSound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIVoiceComponent", "HasActiveSound");

	Params::GzAIVoiceComponent_HasActiveSound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIVoiceComponent.IsSoundActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     AIBarkTag                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIVoiceComponent::IsSoundActive(const struct FGameplayTag& AIBarkTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIVoiceComponent", "IsSoundActive");

	Params::GzAIVoiceComponent_IsSoundActive Parms{};

	Parms.AIBarkTag = std::move(AIBarkTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAIVoiceComponent.IsSoundCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     AIBarkTag                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAIVoiceComponent::IsSoundCooldown(const struct FGameplayTag& AIBarkTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAIVoiceComponent", "IsSoundCooldown");

	Params::GzAIVoiceComponent_IsSoundCooldown Parms{};

	Parms.AIBarkTag = std::move(AIBarkTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerWidget.OnPreRemoveWidget
// (Native, Event, Public, BlueprintEvent)

void UGzMarkerWidget::OnPreRemoveWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "OnPreRemoveWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerWidget.OnShow
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarkerWidget::OnShow(bool bInVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "OnShow");

	Params::GzMarkerWidget_OnShow Parms{};

	Parms.bInVisible = bInVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerWidget.SetupActiveState
// (Native, Event, Public, BlueprintEvent)

void UGzMarkerWidget::SetupActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "SetupActiveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerWidget.SetupDisabledState
// (Native, Event, Public, BlueprintEvent)

void UGzMarkerWidget::SetupDisabledState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "SetupDisabledState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerWidget.SetupHiddenState
// (Native, Event, Public, BlueprintEvent)

void UGzMarkerWidget::SetupHiddenState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "SetupHiddenState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerWidget.GetHideVisibility
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UGzMarkerWidget::GetHideVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "GetHideVisibility");

	Params::GzMarkerWidget_GetHideVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerWidget.GetShowVisibility
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UGzMarkerWidget::GetShowVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerWidget", "GetShowVisibility");

	Params::GzMarkerWidget_GetShowVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapMarkerWidget.OnNotifyMapTransformChanged
// (Final, Native, Public, BlueprintCallable)

void UGzMapMarkerWidget::OnNotifyMapTransformChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "OnNotifyMapTransformChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerWidget.ResetScaleForZoomCurve
// (Final, Native, Public, BlueprintCallable)

void UGzMapMarkerWidget::ResetScaleForZoomCurve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "ResetScaleForZoomCurve");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerWidget.ResetZoomCurveScaleFactor
// (Final, Native, Public, BlueprintCallable)

void UGzMapMarkerWidget::ResetZoomCurveScaleFactor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "ResetZoomCurveScaleFactor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerWidget.SetShouldClamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShouldClamp                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapMarkerWidget::SetShouldClamp(bool bInShouldClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "SetShouldClamp");

	Params::GzMapMarkerWidget_SetShouldClamp Parms{};

	Parms.bInShouldClamp = bInShouldClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerWidget.SetZoomCurveScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapMarkerWidget::SetZoomCurveScaleFactor(float ScaleMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "SetZoomCurveScaleFactor");

	Params::GzMapMarkerWidget_SetZoomCurveScaleFactor Parms{};

	Parms.ScaleMultiplier = ScaleMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapMarkerWidget.GetScaleByZoomCurve
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapMarkerWidget::GetScaleByZoomCurve() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "GetScaleByZoomCurve");

	Params::GzMapMarkerWidget_GetScaleByZoomCurve Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapMarkerWidget.GetZoomCurveScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapMarkerWidget::GetZoomCurveScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "GetZoomCurveScaleFactor");

	Params::GzMapMarkerWidget_GetZoomCurveScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapMarkerWidget.K2_ShouldShow
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMapMarkerWidget::K2_ShouldShow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "K2_ShouldShow");

	Params::GzMapMarkerWidget_K2_ShouldShow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapMarkerWidget.ShouldBeClamped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMapMarkerWidget::ShouldBeClamped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapMarkerWidget", "ShouldBeClamped");

	Params::GzMapMarkerWidget_ShouldBeClamped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShapeMapMarkerWidget.DrawShape
// (Native, Protected)

void UGzShapeMapMarkerWidget::DrawShape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShapeMapMarkerWidget", "DrawShape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCircleAreaMarkerWidget.OnDrawInit
// (Event, Protected, BlueprintEvent)

void UGzCircleAreaMarkerWidget::OnDrawInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCircleAreaMarkerWidget", "OnDrawInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAliveObjectAttributeSet.OnRep_Damage
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldDamage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAliveObjectAttributeSet::OnRep_Damage(const struct FGameplayAttributeData& OldDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAliveObjectAttributeSet", "OnRep_Damage");

	Params::GzAliveObjectAttributeSet_OnRep_Damage Parms{};

	Parms.OldDamage = std::move(OldDamage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAliveObjectAttributeSet.OnRep_Health
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldHealth                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAliveObjectAttributeSet::OnRep_Health(const struct FGameplayAttributeData& OldHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAliveObjectAttributeSet", "OnRep_Health");

	Params::GzAliveObjectAttributeSet_OnRep_Health Parms{};

	Parms.OldHealth = std::move(OldHealth);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAliveObjectAttributeSet.OnRep_MaxHealth
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldMaxHealth                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAliveObjectAttributeSet::OnRep_MaxHealth(const struct FGameplayAttributeData& OldMaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAliveObjectAttributeSet", "OnRep_MaxHealth");

	Params::GzAliveObjectAttributeSet_OnRep_MaxHealth Parms{};

	Parms.OldMaxHealth = std::move(OldMaxHealth);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ReloadHolsteredWeapons.OnAmmoAdded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGzInvChangeEvent                       Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ReloadHolsteredWeapons::OnAmmoAdded(const struct FGzInvItem& Item, EGzInvChangeEvent Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ReloadHolsteredWeapons", "OnAmmoAdded");

	Params::GzGA_ReloadHolsteredWeapons_OnAmmoAdded Parms{};

	Parms.Item = std::move(Item);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ReloadHolsteredWeapons.OnWeaponPocketChanged
// (Final, Native, Protected)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ReloadHolsteredWeapons::OnWeaponPocketChanged(const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ReloadHolsteredWeapons", "OnWeaponPocketChanged");

	Params::GzGA_ReloadHolsteredWeapons_OnWeaponPocketChanged Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemData.CanBeAccessBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzItemAccessPermission                 PermissionMask                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzItemData::CanBeAccessBy(EGzItemAccessPermission PermissionMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemData", "CanBeAccessBy");

	Params::GzItemData_CanBeAccessBy Parms{};

	Parms.PermissionMask = PermissionMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemData.GetHUDIconByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     IconTag                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWarnOnMissingTag                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UGzItemData::GetHUDIconByTag(const struct FGameplayTag& IconTag, bool bWarnOnMissingTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemData", "GetHUDIconByTag");

	Params::GzItemData_GetHUDIconByTag Parms{};

	Parms.IconTag = std::move(IconTag);
	Parms.bWarnOnMissingTag = bWarnOnMissingTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemData.GetIdentifierString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzItemData::GetIdentifierString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemData", "GetIdentifierString");

	Params::GzItemData_GetIdentifierString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemData.GetRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzItemRarity                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzItemRarity UGzItemData::GetRarity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemData", "GetRarity");

	Params::GzItemData_GetRarity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemData.GetShortDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UGzItemData::GetShortDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemData", "GetShortDescription");

	Params::GzItemData_GetShortDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAnimatedAi.GetMentalState
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// EGzNPCMentalState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzNPCMentalState IGzAnimatedAi::GetMentalState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAnimatedAi", "GetMentalState");

	Params::GzAnimatedAi_GetMentalState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAnimatedAi.GetTrackingTargetPosition
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IGzAnimatedAi::GetTrackingTargetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAnimatedAi", "GetTrackingTargetPosition");

	Params::GzAnimatedAi_GetTrackingTargetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionComponent.GetFailedInteractionText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UGzInteractionComponent::GetFailedInteractionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionComponent", "GetFailedInteractionText");

	Params::GzInteractionComponent_GetFailedInteractionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractionComponent.GetInteractionConditionsPassed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractionComponent::GetInteractionConditionsPassed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionComponent", "GetInteractionConditionsPassed");

	Params::GzInteractionComponent_GetInteractionConditionsPassed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPreMatchStage.CheckAllReady
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   NewPlayerState                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPreMatchStage::CheckAllReady(class AGzPlayerState* NewPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreMatchStage", "CheckAllReady");

	Params::GzPreMatchStage_CheckAllReady Parms{};

	Parms.NewPlayerState = NewPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPreMatchStage.OnMatchReady
// (Native, Protected)

void UGzPreMatchStage::OnMatchReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreMatchStage", "OnMatchReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponUdimSkinData.ApplyParametersForMesh
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponUdimSkinData::ApplyParametersForMesh(class UMeshComponent* Mesh) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponUdimSkinData", "ApplyParametersForMesh");

	Params::GzWeaponUdimSkinData_ApplyParametersForMesh Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponUdimSkinData.ApplyParametersForMeshArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UMeshComponent*>           Meshes                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzWeaponUdimSkinData::ApplyParametersForMeshArray(const TArray<class UMeshComponent*>& Meshes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponUdimSkinData", "ApplyParametersForMeshArray");

	Params::GzWeaponUdimSkinData_ApplyParametersForMeshArray Parms{};

	Parms.Meshes = std::move(Meshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponUdimSkinData.GetIndexNumbersArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           Values                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzWeaponUdimSkinData::GetIndexNumbersArray(TArray<float>* Values) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponUdimSkinData", "GetIndexNumbersArray");

	Params::GzWeaponUdimSkinData_GetIndexNumbersArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Values != nullptr)
		*Values = std::move(Parms.Values);
}


// Function G01.GzSearchZone.OnShrinkingZoneAvailable
// (Final, Native, Private)
// Parameters:
// class AGzShrinkingZone*                 Zone                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSearchZone::OnShrinkingZoneAvailable(class AGzShrinkingZone* Zone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZone", "OnShrinkingZoneAvailable");

	Params::GzSearchZone_OnShrinkingZoneAvailable Parms{};

	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnAdsUpdated
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bIsInAds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnAdsUpdated(bool bIsInAds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnAdsUpdated");

	Params::GzCrosshairContainer_OnAdsUpdated Parms{};

	Parms.bIsInAds = bIsInAds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnLimbChanged
// (Final, Native, Private)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnLimbChanged(EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnLimbChanged");

	Params::GzCrosshairContainer_OnLimbChanged Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnOperableObjectChanged
// (Final, Native, Private)
// Parameters:
// class UGzOperableObjectComponent*       OperableObjectComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnOperableObjectChanged(class UGzOperableObjectComponent* OperableObjectComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnOperableObjectChanged");

	Params::GzCrosshairContainer_OnOperableObjectChanged Parms{};

	Parms.OperableObjectComponent = OperableObjectComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnTriggerUpdateTagsUpdated
// (Final, Native, Private)
// Parameters:
// bool                                    bWasAdded                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnTriggerUpdateTagsUpdated(bool bWasAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnTriggerUpdateTagsUpdated");

	Params::GzCrosshairContainer_OnTriggerUpdateTagsUpdated Parms{};

	Parms.bWasAdded = bWasAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnVehicleSeatChanged
// (Final, Native, Private)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      NewSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      OldSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnVehicleSeatChanged(class AGzCharacter* Character, EGzVehicleSeatType NewSeat, EGzVehicleSeatType OldSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnVehicleSeatChanged");

	Params::GzCrosshairContainer_OnVehicleSeatChanged Parms{};

	Parms.Character = Character;
	Parms.NewSeat = NewSeat;
	Parms.OldSeat = OldSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.OnWeaponUpdated
// (Final, Native, Private)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnWeaponUpdated(const struct FGzInvPocketId& PocketId, class AGzWeaponActor* WeaponActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnWeaponUpdated");

	Params::GzCrosshairContainer_OnWeaponUpdated Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.WeaponActor = WeaponActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCrosshairContainer.GetCurrentCrosshair
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCrosshair*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCrosshair* UGzCrosshairContainer::GetCurrentCrosshair() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "GetCurrentCrosshair");

	Params::GzCrosshairContainer_GetCurrentCrosshair Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCrosshairContainer.OnAimUpdatedBP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          blockedLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBlocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshairContainer::OnAimUpdatedBP(const struct FVector& blockedLocation, bool bIsBlocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshairContainer", "OnAimUpdatedBP");

	Params::GzCrosshairContainer_OnAimUpdatedBP Parms{};

	Parms.blockedLocation = std::move(blockedLocation);
	Parms.bIsBlocked = bIsBlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameModeBase.GetSubsystemByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class AGzGameModeSubsystem> InClass                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzGameModeSubsystem*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzGameModeSubsystem* AGzGameModeBase::GetSubsystemByClass(TSubclassOf<class AGzGameModeSubsystem> InClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeBase", "GetSubsystemByClass");

	Params::GzGameModeBase_GetSubsystemByClass Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameModeBase.RestartPlayerInMatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameModeBase::RestartPlayerInMatch(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeBase", "RestartPlayerInMatch");

	Params::GzGameModeBase_RestartPlayerInMatch Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameModeBase.RestartPlayerInMatchAtTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*                      PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameModeBase::RestartPlayerInMatchAtTransform(class AController* PlayerController, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeBase", "RestartPlayerInMatchAtTransform");

	Params::GzGameModeBase_RestartPlayerInMatchAtTransform Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameModeBase.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzGameModeBase::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameModeBase", "GetDisplayName");

	Params::GzGameModeBase_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeBase.OnAIDied
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGzAIController*                  Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSessionGameModeBase::OnAIDied(class AGzAIController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "OnAIDied");

	Params::GzSessionGameModeBase_OnAIDied Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSessionGameModeBase.OnAISpawned
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGzAIController*                  Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSessionGameModeBase::OnAISpawned(class AGzAIController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "OnAISpawned");

	Params::GzSessionGameModeBase_OnAISpawned Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSessionGameModeBase.OnPlayerDied
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSessionGameModeBase::OnPlayerDied(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "OnPlayerDied");

	Params::GzSessionGameModeBase_OnPlayerDied Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSessionGameModeBase.OnPlayerLoggedOut
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzPlayerController*              Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzPlayerLogoutReason                   LogoutReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSessionGameModeBase::OnPlayerLoggedOut(class AGzPlayerController* Player, EGzPlayerLogoutReason LogoutReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "OnPlayerLoggedOut");

	Params::GzSessionGameModeBase_OnPlayerLoggedOut Parms{};

	Parms.Player = Player;
	Parms.LogoutReason = LogoutReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSessionGameModeBase.SpawnPlayer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSessionGameModeBase::SpawnPlayer(class AGzPlayerState* InPlayerState, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "SpawnPlayer");

	Params::GzSessionGameModeBase_SpawnPlayer Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSessionGameModeBase.CanSpawnAtPlayerStart
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeamStart*                     PlayerStart                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzSessionGameModeBase::CanSpawnAtPlayerStart(const class AGzPlayerState* PlayerState, const class AGzTeamStart* PlayerStart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "CanSpawnAtPlayerStart");

	Params::GzSessionGameModeBase_CanSpawnAtPlayerStart Parms{};

	Parms.PlayerState = PlayerState;
	Parms.PlayerStart = PlayerStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeBase.GetTotalTeamCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzSessionGameModeBase::GetTotalTeamCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "GetTotalTeamCount");

	Params::GzSessionGameModeBase_GetTotalTeamCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeBase.GetWinnerTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* AGzSessionGameModeBase::GetWinnerTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeBase", "GetWinnerTeam");

	Params::GzSessionGameModeBase_GetWinnerTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMarkerSceneContainer.GetMarkerID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzMarkerSceneContainer::GetMarkerID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerSceneContainer", "GetMarkerID");

	Params::GzMarkerSceneContainer_GetMarkerID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzArrivalMarker.GetArrivalTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzArrivalMarker::GetArrivalTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzArrivalMarker", "GetArrivalTime");

	Params::GzArrivalMarker_GetArrivalTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissileCarrier.SpawnMicroMissile
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   MissileIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMicroMissileCarrier::SpawnMicroMissile(int32 MissileIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissileCarrier", "SpawnMicroMissile");

	Params::GzMicroMissileCarrier_SpawnMicroMissile Parms{};

	Parms.MissileIndex = MissileIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzASCBlueprintFunctionLibrary.AddGameplayCue_NonReplicated
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzASCBlueprintFunctionLibrary::AddGameplayCue_NonReplicated(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzASCBlueprintFunctionLibrary", "AddGameplayCue_NonReplicated");

	Params::GzASCBlueprintFunctionLibrary_AddGameplayCue_NonReplicated Parms{};

	Parms.Target = Target;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzASCBlueprintFunctionLibrary.EffectContextAddSourceObject
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FGameplayEffectContextHandle     EffectContext                                          (Parm, NativeAccessSpecifierPublic)
// class UObject*                          SourceObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzASCBlueprintFunctionLibrary::EffectContextAddSourceObject(const struct FGameplayEffectContextHandle& EffectContext, class UObject* SourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzASCBlueprintFunctionLibrary", "EffectContextAddSourceObject");

	Params::GzASCBlueprintFunctionLibrary_EffectContextAddSourceObject Parms{};

	Parms.EffectContext = std::move(EffectContext);
	Parms.SourceObject = SourceObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzASCBlueprintFunctionLibrary.ExecuteGameplayCue_NonReplicated
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzASCBlueprintFunctionLibrary::ExecuteGameplayCue_NonReplicated(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzASCBlueprintFunctionLibrary", "ExecuteGameplayCue_NonReplicated");

	Params::GzASCBlueprintFunctionLibrary_ExecuteGameplayCue_NonReplicated Parms{};

	Parms.Target = Target;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzASCBlueprintFunctionLibrary.RemoveGameplayCue_NonReplicated
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzASCBlueprintFunctionLibrary::RemoveGameplayCue_NonReplicated(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzASCBlueprintFunctionLibrary", "RemoveGameplayCue_NonReplicated");

	Params::GzASCBlueprintFunctionLibrary_RemoveGameplayCue_NonReplicated Parms{};

	Parms.Target = Target;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.OnReceiveMultiHitDamage
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzMultiHitDamage                Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzDamageableComponent::OnReceiveMultiHitDamage(const struct FGzMultiHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "OnReceiveMultiHitDamage");

	Params::GzDamageableComponent_OnReceiveMultiHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.OnReceiveSingleHitDamage
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzSingleHitDamage               Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzDamageableComponent::OnReceiveSingleHitDamage(const struct FGzSingleHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "OnReceiveSingleHitDamage");

	Params::GzDamageableComponent_OnReceiveSingleHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.ReceiveMultiHitDamage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzMultiHitDamage                Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzDamageableComponent::ReceiveMultiHitDamage(const struct FGzMultiHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "ReceiveMultiHitDamage");

	Params::GzDamageableComponent_ReceiveMultiHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.ReceiveSingleHitDamage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzSingleHitDamage               Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzDamageableComponent::ReceiveSingleHitDamage(const struct FGzSingleHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "ReceiveSingleHitDamage");

	Params::GzDamageableComponent_ReceiveSingleHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.SetTeamOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGenericTeamId                   TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDamageableComponent::SetTeamOverride(const struct FGenericTeamId& TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "SetTeamOverride");

	Params::GzDamageableComponent_SetTeamOverride Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableComponent.GetTeamOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGenericTeamId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGenericTeamId UGzDamageableComponent::GetTeamOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableComponent", "GetTeamOverride");

	Params::GzDamageableComponent_GetTeamOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_MeleeAttack.CalculateSnapDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           CharacterActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DetectionRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutDirectionToEnemy                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistanceToEnemy                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_MeleeAttack::CalculateSnapDirection(class AActor* CharacterActor, float DetectionRadius, struct FVector* OutDirectionToEnemy, float* OutDistanceToEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGA_MeleeAttack", "CalculateSnapDirection");

	Params::GzGA_MeleeAttack_CalculateSnapDirection Parms{};

	Parms.CharacterActor = CharacterActor;
	Parms.DetectionRadius = DetectionRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirectionToEnemy != nullptr)
		*OutDirectionToEnemy = std::move(Parms.OutDirectionToEnemy);

	if (OutDistanceToEnemy != nullptr)
		*OutDistanceToEnemy = Parms.OutDistanceToEnemy;

	return Parms.ReturnValue;
}


// Function G01.GzGA_MeleeAttack.ClientPredictTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_MeleeAttack::ClientPredictTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MeleeAttack", "ClientPredictTargetData");

	Params::GzGA_MeleeAttack_ClientPredictTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MeleeAttack.OnTagetDataAccepted
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (Parm, NativeAccessSpecifierPublic)

void UGzGA_MeleeAttack::OnTagetDataAccepted(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MeleeAttack", "OnTagetDataAccepted");

	Params::GzGA_MeleeAttack_OnTagetDataAccepted Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MeleeAttack.ServerHandleClientTargetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_MeleeAttack::ServerHandleClientTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MeleeAttack", "ServerHandleClientTargetData");

	Params::GzGA_MeleeAttack_ServerHandleClientTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.AddImpulse
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Impulse                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::AddImpulse(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "AddImpulse");

	Params::GzAssaultDrone_AddImpulse Parms{};

	Parms.Impulse = std::move(Impulse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.AssignOnOwnerEvents
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::AssignOnOwnerEvents(class AActor* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "AssignOnOwnerEvents");

	Params::GzAssaultDrone_AssignOnOwnerEvents Parms{};

	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.CalculateAnimationValue
// (Final, Native, Private)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::CalculateAnimationValue(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "CalculateAnimationValue");

	Params::GzAssaultDrone_CalculateAnimationValue Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.CalculateLifeTime
// (Final, Native, Private)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::CalculateLifeTime(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "CalculateLifeTime");

	Params::GzAssaultDrone_CalculateLifeTime Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.FindNextTargetPoint
// (Final, Native, Protected)

void AGzAssaultDrone::FindNextTargetPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "FindNextTargetPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.GeneratePatrolVolume
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartPointRef                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetPointRef                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGzAssaultDrone::GeneratePatrolVolume(const struct FVector& StartPointRef, const struct FVector& TargetPointRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "GeneratePatrolVolume");

	Params::GzAssaultDrone_GeneratePatrolVolume Parms{};

	Parms.StartPointRef = std::move(StartPointRef);
	Parms.TargetPointRef = std::move(TargetPointRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAssaultDrone.OnCollisionHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzAssaultDrone::OnCollisionHit(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "OnCollisionHit");

	Params::GzAssaultDrone_OnCollisionHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzAssaultDrone.OnOwnerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::OnOwnerDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "OnOwnerDestroyed");

	Params::GzAssaultDrone_OnOwnerDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.OnOwnerKilled
// (Final, Native, Private)
// Parameters:
// int32                                   KillerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::OnOwnerKilled(int32 KillerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "OnOwnerKilled");

	Params::GzAssaultDrone_OnOwnerKilled Parms{};

	Parms.KillerId = KillerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.SetFlyPoint
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetPointRef                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::SetFlyPoint(const struct FVector& TargetPointRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "SetFlyPoint");

	Params::GzAssaultDrone_SetFlyPoint Parms{};

	Parms.TargetPointRef = std::move(TargetPointRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAssaultDrone.TryFlyToPoint
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAssaultDrone::TryFlyToPoint(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAssaultDrone", "TryFlyToPoint");

	Params::GzAssaultDrone_TryFlyToPoint Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadingScreenController.StartLoadingScreen
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UGzLoadingScreenContext*          Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsStartup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadingScreenController::StartLoadingScreen(class UGzLoadingScreenContext* Context, bool bIsStartup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadingScreenController", "StartLoadingScreen");

	Params::GzLoadingScreenController_StartLoadingScreen Parms{};

	Parms.Context = Context;
	Parms.bIsStartup = bIsStartup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarkerActiveStateFilter.EvaluateState
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UGzMarkerWidget*                  InMarker                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzMarkerActiveState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzMarkerActiveState UGzMarkerActiveStateFilter::EvaluateState(class UGzMarkerWidget* InMarker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarkerActiveStateFilter", "EvaluateState");

	Params::GzMarkerActiveStateFilter_EvaluateState Parms{};

	Parms.InMarker = InMarker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundAnimNotifyBase.SetActionType
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class FName                             InActionType                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundAnimNotifyBase::SetActionType(const class FName& InActionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSoundAnimNotifyBase", "SetActionType");

	Params::GzSoundAnimNotifyBase_SetActionType Parms{};

	Parms.InActionType = InActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundAnimNotifyBase.SetSoundSourceBodyPart
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// EGzSoundSourceBodyPart                  InSoundSourceBodyPart                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundAnimNotifyBase::SetSoundSourceBodyPart(EGzSoundSourceBodyPart InSoundSourceBodyPart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSoundAnimNotifyBase", "SetSoundSourceBodyPart");

	Params::GzSoundAnimNotifyBase_SetSoundSourceBodyPart Parms{};

	Parms.InSoundSourceBodyPart = InSoundSourceBodyPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCustomizationSoundNotify.SetSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FGameplayTag                     InSlot                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCustomizationSoundNotify::SetSlot(const struct FGameplayTag& InSlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCustomizationSoundNotify", "SetSlot");

	Params::GzCustomizationSoundNotify_SetSlot Parms{};

	Parms.InSlot = std::move(InSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInputControlsComponent.AddInputMappingDecorator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInputMappingContextInfo       MappingContextInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            OPTIONS                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzInputMappingDecoratorHandle   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInputMappingDecoratorHandle UGzInputControlsComponent::AddInputMappingDecorator(const struct FGzInputMappingContextInfo& MappingContextInfo, const struct FModifyContextOptions& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInputControlsComponent", "AddInputMappingDecorator");

	Params::GzInputControlsComponent_AddInputMappingDecorator Parms{};

	Parms.MappingContextInfo = std::move(MappingContextInfo);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInputControlsComponent.PopInputMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInputConfigBindingHandle      InHandle                                               (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzInputControlsComponent::PopInputMapping(struct FGzInputConfigBindingHandle& InHandle, const struct FModifyContextOptions& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInputControlsComponent", "PopInputMapping");

	Params::GzInputControlsComponent_PopInputMapping Parms{};

	Parms.InHandle = std::move(InHandle);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InHandle = std::move(Parms.InHandle);
}


// Function G01.GzInputControlsComponent.PushInputMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzInputMappingConfig*            InMappingConfig                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzInputConfigBindingHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInputConfigBindingHandle UGzInputControlsComponent::PushInputMapping(class UGzInputMappingConfig* InMappingConfig, const struct FModifyContextOptions& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInputControlsComponent", "PushInputMapping");

	Params::GzInputControlsComponent_PushInputMapping Parms{};

	Parms.InMappingConfig = InMappingConfig;
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInputControlsComponent.RemoveInputMappingDecorator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInputMappingDecoratorHandle   InHandle                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInputControlsComponent::RemoveInputMappingDecorator(struct FGzInputMappingDecoratorHandle* InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInputControlsComponent", "RemoveInputMappingDecorator");

	Params::GzInputControlsComponent_RemoveInputMappingDecorator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InHandle != nullptr)
		*InHandle = std::move(Parms.InHandle);
}


// Function G01.GzWeaponComponent.AddShootingBarrel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ShootingBarrelSuffix                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponComponent::AddShootingBarrel(const class FName& ShootingBarrelSuffix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "AddShootingBarrel");

	Params::GzWeaponComponent_AddShootingBarrel Parms{};

	Parms.ShootingBarrelSuffix = ShootingBarrelSuffix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.Reload
// (Final, Native, Public, BlueprintCallable)

void UGzWeaponComponent::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.RequestShotInternal
// (Final, Native, Protected)

void UGzWeaponComponent::RequestShotInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "RequestShotInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.ServerRequestSyncResources
// (Net, NetReliable, Native, Event, Public, NetServer)

void UGzWeaponComponent::ServerRequestSyncResources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "ServerRequestSyncResources");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.StartAttackRequest
// (Final, Native, Public, BlueprintCallable)

void UGzWeaponComponent::StartAttackRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "StartAttackRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.StopAttackRequest
// (Final, Native, Public, BlueprintCallable)

void UGzWeaponComponent::StopAttackRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "StopAttackRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.CanAim
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::CanAim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "CanAim");

	Params::GzWeaponComponent_CanAim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.CanAttack
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::CanAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "CanAttack");

	Params::GzWeaponComponent_CanAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.CanReload
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::CanReload() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "CanReload");

	Params::GzWeaponComponent_CanReload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.CanSimulateShooting
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::CanSimulateShooting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "CanSimulateShooting");

	Params::GzWeaponComponent_CanSimulateShooting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.CanStopAttack
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::CanStopAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "CanStopAttack");

	Params::GzWeaponComponent_CanStopAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetActiveShootingBarrel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzWeaponComponent::GetActiveShootingBarrel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetActiveShootingBarrel");

	Params::GzWeaponComponent_GetActiveShootingBarrel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAimingProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponComponent::GetAimingProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAimingProgress");

	Params::GzWeaponComponent_GetAimingProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAllScopeMagnifications
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UGzWeaponComponent::GetAllScopeMagnifications() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAllScopeMagnifications");

	Params::GzWeaponComponent_GetAllScopeMagnifications Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAnimationLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzWeaponAnimationLayerData      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzWeaponAnimationLayerData UGzWeaponComponent::GetAnimationLayer(class AActor* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAnimationLayer");

	Params::GzWeaponComponent_GetAnimationLayer Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAttackDamageEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGzGE_BaseDamage>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGzGE_BaseDamage> UGzWeaponComponent::GetAttackDamageEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAttackDamageEffect");

	Params::GzWeaponComponent_GetAttackDamageEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAvailableScopeModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGzScopeMode>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FGzScopeMode> UGzWeaponComponent::GetAvailableScopeModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAvailableScopeModes");

	Params::GzWeaponComponent_GetAvailableScopeModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetAvailibleFireModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<EGzWeaponMode>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EGzWeaponMode> UGzWeaponComponent::GetAvailibleFireModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetAvailibleFireModes");

	Params::GzWeaponComponent_GetAvailibleFireModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetClipAmmoAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponComponent::GetClipAmmoAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetClipAmmoAmount");

	Params::GzWeaponComponent_GetClipAmmoAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetCurrentFireMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzWeaponFireMode          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzWeaponFireMode UGzWeaponComponent::GetCurrentFireMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetCurrentFireMode");

	Params::GzWeaponComponent_GetCurrentFireMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetCurrentScopeMagnification
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponComponent::GetCurrentScopeMagnification() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetCurrentScopeMagnification");

	Params::GzWeaponComponent_GetCurrentScopeMagnification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetCurrentScopeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzScopeMode               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzScopeMode UGzWeaponComponent::GetCurrentScopeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetCurrentScopeMode");

	Params::GzWeaponComponent_GetCurrentScopeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetFireModeIndexByType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWeaponMode                           WeaponMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponComponent::GetFireModeIndexByType(EGzWeaponMode WeaponMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetFireModeIndexByType");

	Params::GzWeaponComponent_GetFireModeIndexByType Parms{};

	Parms.WeaponMode = WeaponMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetFireStartLocationAndRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             MuzzleSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::GetFireStartLocationAndRotation(struct FVector* OutLocation, struct FRotator* OutRotation, class FName MuzzleSocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetFireStartLocationAndRotation");

	Params::GzWeaponComponent_GetFireStartLocationAndRotation Parms{};

	Parms.MuzzleSocketName = MuzzleSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetJointTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UGzWeaponComponent::GetJointTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetJointTargetLocation");

	Params::GzWeaponComponent_GetJointTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetMaxClipAmmoAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponComponent::GetMaxClipAmmoAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetMaxClipAmmoAmount");

	Params::GzWeaponComponent_GetMaxClipAmmoAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetOverheatData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponOverheatData*      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponOverheatData* UGzWeaponComponent::GetOverheatData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetOverheatData");

	Params::GzWeaponComponent_GetOverheatData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetOverheatPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponComponent::GetOverheatPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetOverheatPercentage");

	Params::GzWeaponComponent_GetOverheatPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetOwnerCombatComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCombatComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCombatComponent* UGzWeaponComponent::GetOwnerCombatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetOwnerCombatComponent");

	Params::GzWeaponComponent_GetOwnerCombatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetRecoilData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponRecoilData*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponRecoilData* UGzWeaponComponent::GetRecoilData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetRecoilData");

	Params::GzWeaponComponent_GetRecoilData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetReloadTimeSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponComponent::GetReloadTimeSeconds(class APawn* Pawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetReloadTimeSeconds");

	Params::GzWeaponComponent_GetReloadTimeSeconds Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetSpreadData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponSpreadData*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponSpreadData* UGzWeaponComponent::GetSpreadData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetSpreadData");

	Params::GzWeaponComponent_GetSpreadData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetStockAmmoAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponComponent::GetStockAmmoAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetStockAmmoAmount");

	Params::GzWeaponComponent_GetStockAmmoAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetSwayData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponSwayData*          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponSwayData* UGzWeaponComponent::GetSwayData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetSwayData");

	Params::GzWeaponComponent_GetSwayData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzWeaponActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWeaponActor* UGzWeaponComponent::GetWeaponActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponActor");

	Params::GzWeaponComponent_GetWeaponActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponAIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponAIData*            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponAIData* UGzWeaponComponent::GetWeaponAIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponAIData");

	Params::GzWeaponComponent_GetWeaponAIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponAnimationData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponAnimationData*     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponAnimationData* UGzWeaponComponent::GetWeaponAnimationData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponAnimationData");

	Params::GzWeaponComponent_GetWeaponAnimationData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponData*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponData* UGzWeaponComponent::GetWeaponData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponData");

	Params::GzWeaponComponent_GetWeaponData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponFXData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponFXData*            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponFXData* UGzWeaponComponent::GetWeaponFXData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponFXData");

	Params::GzWeaponComponent_GetWeaponFXData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.GetWeaponSoundData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponSoundData*         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponSoundData* UGzWeaponComponent::GetWeaponSoundData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "GetWeaponSoundData");

	Params::GzWeaponComponent_GetWeaponSoundData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.HasScope
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::HasScope() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "HasScope");

	Params::GzWeaponComponent_HasScope Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsClipEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsClipEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsClipEmpty");

	Params::GzWeaponComponent_IsClipEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsClipFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsClipFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsClipFull");

	Params::GzWeaponComponent_IsClipFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsCurrentlyEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsCurrentlyEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsCurrentlyEquipped");

	Params::GzWeaponComponent_IsCurrentlyEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsLimbWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsLimbWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsLimbWeapon");

	Params::GzWeaponComponent_IsLimbWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsOverheated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsOverheated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsOverheated");

	Params::GzWeaponComponent_IsOverheated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsOwnerAiming
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsOwnerAiming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsOwnerAiming");

	Params::GzWeaponComponent_IsOwnerAiming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsPendingAttack
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsPendingAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsPendingAttack");

	Params::GzWeaponComponent_IsPendingAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.IsWeaponSilenced
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::IsWeaponSilenced() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "IsWeaponSilenced");

	Params::GzWeaponComponent_IsWeaponSilenced Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.NeedsRechambering
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::NeedsRechambering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "NeedsRechambering");

	Params::GzWeaponComponent_NeedsRechambering Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponComponent.OnWeaponAttackMontageEnded
// (Final, Native, Protected, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponComponent::OnWeaponAttackMontageEnded(class UAnimMontage* Montage, bool bInterrupted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "OnWeaponAttackMontageEnded");

	Params::GzWeaponComponent_OnWeaponAttackMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.OnWeaponReloadMontageEnded
// (Final, Native, Protected, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponComponent::OnWeaponReloadMontageEnded(class UAnimMontage* Montage, bool bInterrupted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "OnWeaponReloadMontageEnded");

	Params::GzWeaponComponent_OnWeaponReloadMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponComponent.TryFindSocketLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponComponent::TryFindSocketLocation(class FName MuzzleSocketName, struct FVector* OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponComponent", "TryFindSocketLocation");

	Params::GzWeaponComponent_TryFindSocketLocation Parms{};

	Parms.MuzzleSocketName = MuzzleSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function G01.GzAsyncTaskAttributeChanged.ListenForAttributeChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               Attribute                                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAsyncTaskAttributeChanged*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAsyncTaskAttributeChanged* UGzAsyncTaskAttributeChanged::ListenForAttributeChange(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAttribute& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAsyncTaskAttributeChanged", "ListenForAttributeChange");

	Params::GzAsyncTaskAttributeChanged_ListenForAttributeChange Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAsyncTaskAttributeChanged.ListenForAttributesChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGameplayAttribute>       Attributes                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzAsyncTaskAttributeChanged*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAsyncTaskAttributeChanged* UGzAsyncTaskAttributeChanged::ListenForAttributesChange(class UAbilitySystemComponent* AbilitySystemComponent, const TArray<struct FGameplayAttribute>& Attributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAsyncTaskAttributeChanged", "ListenForAttributesChange");

	Params::GzAsyncTaskAttributeChanged_ListenForAttributesChange Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.Attributes = std::move(Attributes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAsyncTaskAttributeChanged.EndTask
// (Final, Native, Public, BlueprintCallable)

void UGzAsyncTaskAttributeChanged::EndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAsyncTaskAttributeChanged", "EndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAsyncTaskGameplayTagAddedRemoved.ListenForGameplayTagAddedOrRemoved
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            Tags                                                   (Parm, NativeAccessSpecifierPublic)
// class UGzAsyncTaskGameplayTagAddedRemoved*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAsyncTaskGameplayTagAddedRemoved* UGzAsyncTaskGameplayTagAddedRemoved::ListenForGameplayTagAddedOrRemoved(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayTagContainer& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAsyncTaskGameplayTagAddedRemoved", "ListenForGameplayTagAddedOrRemoved");

	Params::GzAsyncTaskGameplayTagAddedRemoved_ListenForGameplayTagAddedOrRemoved Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAsyncTaskGameplayTagAddedRemoved.EndTask
// (Final, Native, Public, BlueprintCallable)

void UGzAsyncTaskGameplayTagAddedRemoved::EndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAsyncTaskGameplayTagAddedRemoved", "EndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.InitializeWithData
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGzProjectileData*                Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProjectileBase::InitializeWithData(const class UGzProjectileData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "InitializeWithData");

	Params::GzProjectileBase_InitializeWithData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.LaunchProjectile
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LaunchPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProjectileBase::LaunchProjectile(const struct FVector& LaunchPosition, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "LaunchProjectile");

	Params::GzProjectileBase_LaunchProjectile Parms{};

	Parms.LaunchPosition = std::move(LaunchPosition);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.LaunchProjectileWithSpeed
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LaunchPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProjectileBase::LaunchProjectileWithSpeed(const struct FVector& LaunchPosition, const struct FVector& Direction, const float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "LaunchProjectileWithSpeed");

	Params::GzProjectileBase_LaunchProjectileWithSpeed Parms{};

	Parms.LaunchPosition = std::move(LaunchPosition);
	Parms.Direction = std::move(Direction);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.OnMultiHitDamageReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMultiHitDamage                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzProjectileBase::OnMultiHitDamageReceived(class UGzDamageableComponent* Receiver, const struct FGzMultiHitDamage& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "OnMultiHitDamageReceived");

	Params::GzProjectileBase_OnMultiHitDamageReceived Parms{};

	Parms.Receiver = Receiver;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.OnRep_GravityScale
// (Final, Native, Public)

void AGzProjectileBase::OnRep_GravityScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "OnRep_GravityScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.OnRep_WasLaunched
// (Native, Public)

void AGzProjectileBase::OnRep_WasLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "OnRep_WasLaunched");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.OnSingleHitDamageReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSingleHitDamage               Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzProjectileBase::OnSingleHitDamageReceived(class UGzDamageableComponent* Receiver, const struct FGzSingleHitDamage& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "OnSingleHitDamageReceived");

	Params::GzProjectileBase_OnSingleHitDamageReceived Parms{};

	Parms.Receiver = Receiver;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.SetItemData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzItemData*                      Param_ItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProjectileBase::SetItemData(class UGzItemData* Param_ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "SetItemData");

	Params::GzProjectileBase_SetItemData Parms{};

	Parms.Param_ItemData = Param_ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.SetProjectileLive
// (Native, Public, BlueprintCallable)

void AGzProjectileBase::SetProjectileLive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "SetProjectileLive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileBase.WasLaunched
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzProjectileBase::WasLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileBase", "WasLaunched");

	Params::GzProjectileBase_WasLaunched Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGrappleHookProjectile.OnFlyingStop
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzGrappleHookProjectile::OnFlyingStop(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGrappleHookProjectile", "OnFlyingStop");

	Params::GzGrappleHookProjectile_OnFlyingStop Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionScreen.AbortSelection
// (Final, Native, Protected, BlueprintCallable)

void UGzLoadoutSelectionScreen::AbortSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "AbortSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionScreen.InitializeLoadoutSlots
// (Event, Protected, BlueprintEvent)

void UGzLoadoutSelectionScreen::InitializeLoadoutSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "InitializeLoadoutSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutSelectionScreen.OnAbortedSelection_BP
// (Event, Protected, BlueprintEvent)

void UGzLoadoutSelectionScreen::OnAbortedSelection_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnAbortedSelection_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutSelectionScreen.OnConfirmed_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AGzPlayerController*              ConfirmedBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreen::OnConfirmed_BP(class AGzPlayerController* ConfirmedBy, const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnConfirmed_BP");

	Params::GzLoadoutSelectionScreen_OnConfirmed_BP Parms{};

	Parms.ConfirmedBy = ConfirmedBy;
	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreen.OnLoadoutButtonClicked_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreen::OnLoadoutButtonClicked_BP(const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnLoadoutButtonClicked_BP");

	Params::GzLoadoutSelectionScreen_OnLoadoutButtonClicked_BP Parms{};

	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreen.OnLoadoutButtonDoubleClicked_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreen::OnLoadoutButtonDoubleClicked_BP(const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnLoadoutButtonDoubleClicked_BP");

	Params::GzLoadoutSelectionScreen_OnLoadoutButtonDoubleClicked_BP Parms{};

	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreen.OnLoadoutButtonHovered_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreen::OnLoadoutButtonHovered_BP(const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnLoadoutButtonHovered_BP");

	Params::GzLoadoutSelectionScreen_OnLoadoutButtonHovered_BP Parms{};

	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreen.OnLoadoutButtonUnHovered_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreen::OnLoadoutButtonUnHovered_BP(const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "OnLoadoutButtonUnHovered_BP");

	Params::GzLoadoutSelectionScreen_OnLoadoutButtonUnHovered_BP Parms{};

	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreen.TryConfirmSelection
// (Final, Native, Protected, BlueprintCallable)

void UGzLoadoutSelectionScreen::TryConfirmSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "TryConfirmSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionScreen.ValidateCompleteSelection
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutSelectionScreen::ValidateCompleteSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreen", "ValidateCompleteSelection");

	Params::GzLoadoutSelectionScreen_ValidateCompleteSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayableArea.OnRep_Data
// (Final, Native, Private)

void AGzPlayableArea::OnRep_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayableArea", "OnRep_Data");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_AbilityRechargeMultiplier
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldAbilityRechargeMultiplier                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_AbilityRechargeMultiplier(const struct FGameplayAttributeData& OldAbilityRechargeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_AbilityRechargeMultiplier");

	Params::GzMultiPartAttributeSet_OnRep_AbilityRechargeMultiplier Parms{};

	Parms.OldAbilityRechargeMultiplier = std::move(OldAbilityRechargeMultiplier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_JetpackHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_JetpackHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_JetpackHealth");

	Params::GzMultiPartAttributeSet_OnRep_JetpackHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_JetpackMaxHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_JetpackMaxHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_JetpackMaxHealth");

	Params::GzMultiPartAttributeSet_OnRep_JetpackMaxHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LeftArmAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldLeftArmAbilityCharges                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LeftArmAbilityCharges(const struct FGameplayAttributeData& OldLeftArmAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LeftArmAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_LeftArmAbilityCharges Parms{};

	Parms.OldLeftArmAbilityCharges = std::move(OldLeftArmAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LeftArmHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LeftArmHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LeftArmHealth");

	Params::GzMultiPartAttributeSet_OnRep_LeftArmHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LeftArmMaxAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldLeftArmMaxAbilityCharges                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LeftArmMaxAbilityCharges(const struct FGameplayAttributeData& OldLeftArmMaxAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LeftArmMaxAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_LeftArmMaxAbilityCharges Parms{};

	Parms.OldLeftArmMaxAbilityCharges = std::move(OldLeftArmMaxAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LeftArmMaxHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LeftArmMaxHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LeftArmMaxHealth");

	Params::GzMultiPartAttributeSet_OnRep_LeftArmMaxHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LegsAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldLegsAbilityCharges                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LegsAbilityCharges(const struct FGameplayAttributeData& OldLegsAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LegsAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_LegsAbilityCharges Parms{};

	Parms.OldLegsAbilityCharges = std::move(OldLegsAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LegsHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LegsHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LegsHealth");

	Params::GzMultiPartAttributeSet_OnRep_LegsHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LegsMaxAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldLegsMaxAbilityCharges                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LegsMaxAbilityCharges(const struct FGameplayAttributeData& OldLegsMaxAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LegsMaxAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_LegsMaxAbilityCharges Parms{};

	Parms.OldLegsMaxAbilityCharges = std::move(OldLegsMaxAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_LegsMaxHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_LegsMaxHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_LegsMaxHealth");

	Params::GzMultiPartAttributeSet_OnRep_LegsMaxHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_RightArmAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldRightArmAbilityCharges                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_RightArmAbilityCharges(const struct FGameplayAttributeData& OldRightArmAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_RightArmAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_RightArmAbilityCharges Parms{};

	Parms.OldRightArmAbilityCharges = std::move(OldRightArmAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_RightArmHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_RightArmHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_RightArmHealth");

	Params::GzMultiPartAttributeSet_OnRep_RightArmHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_RightArmMaxAbilityCharges
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldRightArmMaxAbilityCharges                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_RightArmMaxAbilityCharges(const struct FGameplayAttributeData& OldRightArmMaxAbilityCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_RightArmMaxAbilityCharges");

	Params::GzMultiPartAttributeSet_OnRep_RightArmMaxAbilityCharges Parms{};

	Parms.OldRightArmMaxAbilityCharges = std::move(OldRightArmMaxAbilityCharges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiPartAttributeSet.OnRep_RightArmMaxHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMultiPartAttributeSet::OnRep_RightArmMaxHealth(const struct FGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiPartAttributeSet", "OnRep_RightArmMaxHealth");

	Params::GzMultiPartAttributeSet_OnRep_RightArmMaxHealth Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.BP_BindEventOnGrenadeLaunched
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::BP_BindEventOnGrenadeLaunched(TDelegate<void()> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "BP_BindEventOnGrenadeLaunched");

	Params::GzGA_Throw_BP_BindEventOnGrenadeLaunched Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.BP_BindEventOnStartCookingGrenade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(float GrenadeTime)>      Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::BP_BindEventOnStartCookingGrenade(TDelegate<void(float GrenadeTime)> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "BP_BindEventOnStartCookingGrenade");

	Params::GzGA_Throw_BP_BindEventOnStartCookingGrenade Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.BP_RemoveEventOnGrenadeLaunched
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::BP_RemoveEventOnGrenadeLaunched(TDelegate<void()> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "BP_RemoveEventOnGrenadeLaunched");

	Params::GzGA_Throw_BP_RemoveEventOnGrenadeLaunched Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.BP_RemoveEventOnStartCookingGrenade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(float GrenadeTime)>      Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::BP_RemoveEventOnStartCookingGrenade(TDelegate<void(float GrenadeTime)> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "BP_RemoveEventOnStartCookingGrenade");

	Params::GzGA_Throw_BP_RemoveEventOnStartCookingGrenade Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.CancelThrow
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::CancelThrow(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "CancelThrow");

	Params::GzGA_Throw_CancelThrow Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.OnAbilityInputPressedAgain
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::OnAbilityInputPressedAgain(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "OnAbilityInputPressedAgain");

	Params::GzGA_Throw_OnAbilityInputPressedAgain Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.OnAttackInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::OnAttackInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "OnAttackInputPressed");

	Params::GzGA_Throw_OnAttackInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.OnMontageEnded
// (Final, Native, Protected)

void UGzGA_Throw::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.OnStartThrow
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::OnStartThrow(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "OnStartThrow");

	Params::GzGA_Throw_OnStartThrow Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.OnThrowAnimationNotification
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Throw::OnThrowAnimationNotification(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "OnThrowAnimationNotification");

	Params::GzGA_Throw_OnThrowAnimationNotification Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.ServerHandleClientTargetData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_Throw::ServerHandleClientTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "ServerHandleClientTargetData");

	Params::GzGA_Throw_ServerHandleClientTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Throw.GetThrowableItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzThrowableItemData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzThrowableItemData* UGzGA_Throw::GetThrowableItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "GetThrowableItemData");

	Params::GzGA_Throw_GetThrowableItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Throw.GetThrowableProjectile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGzProjectileBase*          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzProjectileBase* UGzGA_Throw::GetThrowableProjectile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Throw", "GetThrowableProjectile");

	Params::GzGA_Throw_GetThrowableProjectile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAttributeSet.OnRep_AirFrictionCoef
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldAirFrictionCoef                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_AirFrictionCoef(const struct FGameplayAttributeData& OldAirFrictionCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_AirFrictionCoef");

	Params::GzAttributeSet_OnRep_AirFrictionCoef Parms{};

	Parms.OldAirFrictionCoef = std::move(OldAirFrictionCoef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_Armor
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldArmor                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_Armor(const struct FGameplayAttributeData& OldArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_Armor");

	Params::GzAttributeSet_OnRep_Armor Parms{};

	Parms.OldArmor = std::move(OldArmor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_ClimbSpeed
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldClimbSpeed                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_ClimbSpeed(const struct FGameplayAttributeData& OldClimbSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_ClimbSpeed");

	Params::GzAttributeSet_OnRep_ClimbSpeed Parms{};

	Parms.OldClimbSpeed = std::move(OldClimbSpeed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_CrouchCoef
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldCrouchCoef                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_CrouchCoef(const struct FGameplayAttributeData& OldCrouchCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_CrouchCoef");

	Params::GzAttributeSet_OnRep_CrouchCoef Parms{};

	Parms.OldCrouchCoef = std::move(OldCrouchCoef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_GridArmor
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldGridArmor                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_GridArmor(const struct FGameplayAttributeData& OldGridArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_GridArmor");

	Params::GzAttributeSet_OnRep_GridArmor Parms{};

	Parms.OldGridArmor = std::move(OldGridArmor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_JumpVelocity
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldJumpVelocity                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_JumpVelocity(const struct FGameplayAttributeData& OldJumpVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_JumpVelocity");

	Params::GzAttributeSet_OnRep_JumpVelocity Parms{};

	Parms.OldJumpVelocity = std::move(OldJumpVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_MantleAndClimbHeight
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldMantleAndClimbHeight                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_MantleAndClimbHeight(const struct FGameplayAttributeData& OldMantleAndClimbHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_MantleAndClimbHeight");

	Params::GzAttributeSet_OnRep_MantleAndClimbHeight Parms{};

	Parms.OldMantleAndClimbHeight = std::move(OldMantleAndClimbHeight);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_MantleSpeed
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldMantleSpeed                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_MantleSpeed(const struct FGameplayAttributeData& OldMantleSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_MantleSpeed");

	Params::GzAttributeSet_OnRep_MantleSpeed Parms{};

	Parms.OldMantleSpeed = std::move(OldMantleSpeed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_MaxArmor
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldMaxArmor                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_MaxArmor(const struct FGameplayAttributeData& OldMaxArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_MaxArmor");

	Params::GzAttributeSet_OnRep_MaxArmor Parms{};

	Parms.OldMaxArmor = std::move(OldMaxArmor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_MovementSpeed
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldMovementSpeed                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_MovementSpeed(const struct FGameplayAttributeData& OldMovementSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_MovementSpeed");

	Params::GzAttributeSet_OnRep_MovementSpeed Parms{};

	Parms.OldMovementSpeed = std::move(OldMovementSpeed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_RunCoef
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldRunCoef                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_RunCoef(const struct FGameplayAttributeData& OldRunCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_RunCoef");

	Params::GzAttributeSet_OnRep_RunCoef Parms{};

	Parms.OldRunCoef = std::move(OldRunCoef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_SprintCoef
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldSprintCoef                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_SprintCoef(const struct FGameplayAttributeData& OldSprintCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_SprintCoef");

	Params::GzAttributeSet_OnRep_SprintCoef Parms{};

	Parms.OldSprintCoef = std::move(OldSprintCoef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAttributeSet.OnRep_WalkCoef
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAttributeData           OldWalkCoef                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzAttributeSet::OnRep_WalkCoef(const struct FGameplayAttributeData& OldWalkCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAttributeSet", "OnRep_WalkCoef");

	Params::GzAttributeSet_OnRep_WalkCoef Parms{};

	Parms.OldWalkCoef = std::move(OldWalkCoef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_AbilityTick.AbilityTick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_Duration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_AbilityTick*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_AbilityTick* UGzAT_AbilityTick::AbilityTick(class UGameplayAbility* OwningAbility, float Param_Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_AbilityTick", "AbilityTick");

	Params::GzAT_AbilityTick_AbilityTick Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Param_Duration = Param_Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplyRootMotionDash.ApplyRootMotionDash
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Param_TargetActor                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzDashParamsData*                Param_DashParams                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Param_InitialTargetLocation                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_DistanceTriggerDistance                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetVelocityAtEnd                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_ReachedDestinationDistance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_ApplyRootMotionDash*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ApplyRootMotionDash* UGzAT_ApplyRootMotionDash::ApplyRootMotionDash(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const class AActor* Param_TargetActor, const class UGzDashParamsData* Param_DashParams, const struct FVector& Param_InitialTargetLocation, float Param_DistanceTriggerDistance, const bool bResetVelocityAtEnd, float Param_ReachedDestinationDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ApplyRootMotionDash", "ApplyRootMotionDash");

	Params::GzAT_ApplyRootMotionDash_ApplyRootMotionDash Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_TargetActor = Param_TargetActor;
	Parms.Param_DashParams = Param_DashParams;
	Parms.Param_InitialTargetLocation = std::move(Param_InitialTargetLocation);
	Parms.Param_DistanceTriggerDistance = Param_DistanceTriggerDistance;
	Parms.bResetVelocityAtEnd = bResetVelocityAtEnd;
	Parms.Param_ReachedDestinationDistance = Param_ReachedDestinationDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplyRootMotionDash.OnAvatarActorHitEvent
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAT_ApplyRootMotionDash::OnAvatarActorHitEvent(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_ApplyRootMotionDash", "OnAvatarActorHitEvent");

	Params::GzAT_ApplyRootMotionDash_OnAvatarActorHitEvent Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_ApplyRootMotionDash.OnRep_TargetLocation
// (Final, Native, Protected)

void UGzAT_ApplyRootMotionDash::OnRep_TargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_ApplyRootMotionDash", "OnRep_TargetLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSquadPanel.Init
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   InViewTargetPlayerState                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSquadPanel::Init(class AGzPlayerState* InViewTargetPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "Init");

	Params::GzSquadPanel_Init Parms{};

	Parms.InViewTargetPlayerState = InViewTargetPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSquadPanel.OnPlayerChangeTeam
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSquadPanel::OnPlayerChangeTeam(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "OnPlayerChangeTeam");

	Params::GzSquadPanel_OnPlayerChangeTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSquadPanel.OnTeammatesUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FGzTeamMember>            TeamMembers                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzSquadPanel::OnTeammatesUpdated(const TArray<struct FGzTeamMember>& TeamMembers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "OnTeammatesUpdated");

	Params::GzSquadPanel_OnTeammatesUpdated Parms{};

	Parms.TeamMembers = std::move(TeamMembers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSquadPanel.TryBindOnTeamChanged
// (Final, Native, Private)

void UGzSquadPanel::TryBindOnTeamChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "TryBindOnTeamChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSquadPanel.UpdateTeamEntries
// (Final, Native, Private)

void UGzSquadPanel::UpdateTeamEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "UpdateTeamEntries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSquadPanel.GetViewTargetTeamMembers
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzTeamMember>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzTeamMember> UGzSquadPanel::GetViewTargetTeamMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSquadPanel", "GetViewTargetTeamMembers");

	Params::GzSquadPanel_GetViewTargetTeamMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplyRootMotionInteractable.ApplyRootMotionInteractable
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Param_InteractableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableTransitionSettings*Param_InteractableTransitionSettings                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInteractionData               InInteractionData                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGzAT_ApplyRootMotionInteractable*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ApplyRootMotionInteractable* UGzAT_ApplyRootMotionInteractable::ApplyRootMotionInteractable(class UGameplayAbility* OwningAbility, const class UGzInteractableComponent* Param_InteractableComponent, const class UGzInteractableTransitionSettings* Param_InteractableTransitionSettings, const struct FGzInteractionData& InInteractionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ApplyRootMotionInteractable", "ApplyRootMotionInteractable");

	Params::GzAT_ApplyRootMotionInteractable_ApplyRootMotionInteractable Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Param_InteractableComponent = Param_InteractableComponent;
	Parms.Param_InteractableTransitionSettings = Param_InteractableTransitionSettings;
	Parms.InInteractionData = std::move(InInteractionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBodyPartAbilityData.GetRechargeTypeTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzBodyPartAbilityData::GetRechargeTypeTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBodyPartAbilityData", "GetRechargeTypeTag");

	Params::GzBodyPartAbilityData_GetRechargeTypeTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplyRootMotionZipline.ApplyRootMotionZipline
// (Final, Native, Static, Public)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzZipline*                       Param_Zipline                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzZiplineMovementSettings*       ZiplineMovementSettings                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_ApplyRootMotionZipline*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ApplyRootMotionZipline* UGzAT_ApplyRootMotionZipline::ApplyRootMotionZipline(class UGameplayAbility* OwningAbility, class AGzZipline* Param_Zipline, class UGzZiplineMovementSettings* ZiplineMovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ApplyRootMotionZipline", "ApplyRootMotionZipline");

	Params::GzAT_ApplyRootMotionZipline_ApplyRootMotionZipline Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Param_Zipline = Param_Zipline;
	Parms.ZiplineMovementSettings = ZiplineMovementSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplyRootMotionZiplineJumpOff.ApplyRootMotionZiplineJumpOff
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzZiplineMovementRuntimeData    ZiplineData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UGzZiplineMovementSettings*       ZiplineMovementSettings                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_ApplyRootMotionZiplineJumpOff*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ApplyRootMotionZiplineJumpOff* UGzAT_ApplyRootMotionZiplineJumpOff::ApplyRootMotionZiplineJumpOff(class UGameplayAbility* OwningAbility, const struct FGzZiplineMovementRuntimeData& ZiplineData, const class UGzZiplineMovementSettings* ZiplineMovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ApplyRootMotionZiplineJumpOff", "ApplyRootMotionZiplineJumpOff");

	Params::GzAT_ApplyRootMotionZiplineJumpOff_ApplyRootMotionZiplineJumpOff Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.ZiplineData = std::move(ZiplineData);
	Parms.ZiplineMovementSettings = ZiplineMovementSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ApplySmoothRotation.ApplySmoothRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      Param_RotationOverTime                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TargetRotation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UGzAT_ApplySmoothRotation*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ApplySmoothRotation* UGzAT_ApplySmoothRotation::ApplySmoothRotation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Duration, class UCurveFloat* Param_RotationOverTime, const struct FRotator& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ApplySmoothRotation", "ApplySmoothRotation");

	Params::GzAT_ApplySmoothRotation_ApplySmoothRotation Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Duration = Duration;
	Parms.Param_RotationOverTime = Param_RotationOverTime;
	Parms.TargetRotation = std::move(TargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_AsyncSweep.AsyncSweepByBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzAsyncTraceType                       TraceType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Endpoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            Rotation                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxHalfExtend                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_AsyncSweep*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_AsyncSweep* UGzAT_AsyncSweep::AsyncSweepByBox(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGzAsyncTraceType TraceType, const struct FVector& StartPoint, const struct FVector& Endpoint, const struct FQuat& Rotation, ECollisionChannel Channel, const struct FVector& BoxHalfExtend, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_AsyncSweep", "AsyncSweepByBox");

	Params::GzAT_AsyncSweep_AsyncSweepByBox Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.TraceType = TraceType;
	Parms.StartPoint = std::move(StartPoint);
	Parms.Endpoint = std::move(Endpoint);
	Parms.Rotation = std::move(Rotation);
	Parms.Channel = Channel;
	Parms.BoxHalfExtend = std::move(BoxHalfExtend);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.bIgnoreSelf = bIgnoreSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_AsyncSweep.AsyncSweepBySphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzAsyncTraceType                       TraceType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Endpoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            Rotation                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_AsyncSweep*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_AsyncSweep* UGzAT_AsyncSweep::AsyncSweepBySphere(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGzAsyncTraceType TraceType, const struct FVector& StartPoint, const struct FVector& Endpoint, const struct FQuat& Rotation, ECollisionChannel Channel, float SphereRadius, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_AsyncSweep", "AsyncSweepBySphere");

	Params::GzAT_AsyncSweep_AsyncSweepBySphere Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.TraceType = TraceType;
	Parms.StartPoint = std::move(StartPoint);
	Parms.Endpoint = std::move(Endpoint);
	Parms.Rotation = std::move(Rotation);
	Parms.Channel = Channel;
	Parms.SphereRadius = SphereRadius;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.bIgnoreSelf = bIgnoreSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Sprint.OnFinish
// (Final, Native, Protected)

void UGzGA_Sprint::OnFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Sprint", "OnFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBodyPartArchetype.GetSuitableSkinNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzBodyPartArchetype::GetSuitableSkinNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBodyPartArchetype", "GetSuitableSkinNames");

	Params::GzBodyPartArchetype_GetSuitableSkinNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_AsyncTrace.AsyncTrace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzAsyncTraceType                       TraceType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Endpoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_AsyncTrace*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_AsyncTrace* UGzAT_AsyncTrace::AsyncTrace(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGzAsyncTraceType TraceType, const struct FVector& StartPoint, const struct FVector& Endpoint, ECollisionChannel Channel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_AsyncTrace", "AsyncTrace");

	Params::GzAT_AsyncTrace_AsyncTrace Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.TraceType = TraceType;
	Parms.StartPoint = std::move(StartPoint);
	Parms.Endpoint = std::move(Endpoint);
	Parms.Channel = Channel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.bIgnoreSelf = bIgnoreSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_JetpackDelayedActivation.JetpackDelayActivation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InActivationDelay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InbInterruptDelayedJetpackIfWeCantExecuteAbility       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_JetpackDelayedActivation*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_JetpackDelayedActivation* UGzAT_JetpackDelayedActivation::JetpackDelayActivation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float InActivationDelay, bool InbInterruptDelayedJetpackIfWeCantExecuteAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_JetpackDelayedActivation", "JetpackDelayActivation");

	Params::GzAT_JetpackDelayedActivation_JetpackDelayActivation Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.InActivationDelay = InActivationDelay;
	Parms.InbInterruptDelayedJetpackIfWeCantExecuteAbility = InbInterruptDelayedJetpackIfWeCantExecuteAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpawnArea.GetZoneTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag AGzSpawnArea::GetZoneTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnArea", "GetZoneTag");

	Params::GzSpawnArea_GetZoneTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_LimbAbilityMonitor.MonitorLimbAbility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableImpulseTreshold                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseThreshold                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bListenForLimbLoss                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_LimbAbilityMonitor*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_LimbAbilityMonitor* UGzAT_LimbAbilityMonitor::MonitorLimbAbility(class UGameplayAbility* OwningAbility, const bool bEnableImpulseTreshold, const float ImpulseThreshold, const bool bListenForLimbLoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_LimbAbilityMonitor", "MonitorLimbAbility");

	Params::GzAT_LimbAbilityMonitor_MonitorLimbAbility Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.bEnableImpulseTreshold = bEnableImpulseTreshold;
	Parms.ImpulseThreshold = ImpulseThreshold;
	Parms.bListenForLimbLoss = bListenForLimbLoss;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzAT_LimbAbilityMonitor.GzLimbMonitorDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzAT_LimbAbilityMonitor::GzLimbMonitorDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_LimbAbilityMonitor", "GzLimbMonitorDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAT_MortarLegs_Scanner.MortarLegs_Scanner
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerCharacter*               Param_OwnerPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OwnerForwardVector                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             Param_ScannedTargetMarkerActorClass                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzBodyPartAbilityData_MortarLegs*Param_AbilityData                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RoofCheckDistance                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_MortarLegs_Scanner*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_MortarLegs_Scanner* UGzAT_MortarLegs_Scanner::MortarLegs_Scanner(class UGameplayAbility* OwningAbility, class AGzPlayerCharacter* Param_OwnerPlayer, const struct FVector& OwnerForwardVector, TSoftClassPtr<class UClass> Param_ScannedTargetMarkerActorClass, class UGzBodyPartAbilityData_MortarLegs* Param_AbilityData, const float RoofCheckDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_MortarLegs_Scanner", "MortarLegs_Scanner");

	Params::GzAT_MortarLegs_Scanner_MortarLegs_Scanner Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Param_OwnerPlayer = Param_OwnerPlayer;
	Parms.OwnerForwardVector = std::move(OwnerForwardVector);
	Parms.Param_ScannedTargetMarkerActorClass = Param_ScannedTargetMarkerActorClass;
	Parms.Param_AbilityData = Param_AbilityData;
	Parms.RoofCheckDistance = RoofCheckDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_MortarLegs_Scanner.OnScanDelayFinished
// (Final, Native, Protected)

void UGzAT_MortarLegs_Scanner::OnScanDelayFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_MortarLegs_Scanner", "OnScanDelayFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_MovementMonitor.MonitorMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableSpeedTreshold                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedThreshold                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bListenForMovementInput                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovementInputThreshold                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyTriggerOnce                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_MovementMonitor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_MovementMonitor* UGzAT_MovementMonitor::MonitorMovement(class UGameplayAbility* OwningAbility, const bool bEnableSpeedTreshold, const float SpeedThreshold, const bool bListenForMovementInput, const float MovementInputThreshold, const bool bOnlyTriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_MovementMonitor", "MonitorMovement");

	Params::GzAT_MovementMonitor_MonitorMovement Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.bEnableSpeedTreshold = bEnableSpeedTreshold;
	Parms.SpeedThreshold = SpeedThreshold;
	Parms.bListenForMovementInput = bListenForMovementInput;
	Parms.MovementInputThreshold = MovementInputThreshold;
	Parms.bOnlyTriggerOnce = bOnlyTriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzAT_MovementMonitor.GzMovementMonitorDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzAT_MovementMonitor::GzMovementMonitorDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_MovementMonitor", "GzMovementMonitorDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAT_PlayMontageAndWaitForEvent.PlayMontageAndWaitForEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Param_MontageToPlay                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            Param_EventTags                                        (Parm, NativeAccessSpecifierPublic)
// float                                   Param_Rate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Param_StartSection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bStopWhenAbilityEnds                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_AnimRootMotionTranslationScale                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_PlayMontageAndWaitForEvent* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_PlayMontageAndWaitForEvent* UGzAT_PlayMontageAndWaitForEvent::PlayMontageAndWaitForEvent(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimMontage* Param_MontageToPlay, const struct FGameplayTagContainer& Param_EventTags, float Param_Rate, class FName Param_StartSection, bool Param_bStopWhenAbilityEnds, float Param_AnimRootMotionTranslationScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_PlayMontageAndWaitForEvent", "PlayMontageAndWaitForEvent");

	Params::GzAT_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_MontageToPlay = Param_MontageToPlay;
	Parms.Param_EventTags = std::move(Param_EventTags);
	Parms.Param_Rate = Param_Rate;
	Parms.Param_StartSection = Param_StartSection;
	Parms.Param_bStopWhenAbilityEnds = Param_bStopWhenAbilityEnds;
	Parms.Param_AnimRootMotionTranslationScale = Param_AnimRootMotionTranslationScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_PlayMontageAndWaitForEvent.OnNotifyBeginReceived
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBranchingPointNotifyPayload     BranchingPointNotifyPayload                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzAT_PlayMontageAndWaitForEvent::OnNotifyBeginReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_PlayMontageAndWaitForEvent", "OnNotifyBeginReceived");

	Params::GzAT_PlayMontageAndWaitForEvent_OnNotifyBeginReceived Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPointNotifyPayload = std::move(BranchingPointNotifyPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_PlayMontageAndWaitForEvent.OnNotifyEndReceived
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBranchingPointNotifyPayload     BranchingPointNotifyPayload                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzAT_PlayMontageAndWaitForEvent::OnNotifyEndReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_PlayMontageAndWaitForEvent", "OnNotifyEndReceived");

	Params::GzAT_PlayMontageAndWaitForEvent_OnNotifyEndReceived Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPointNotifyPayload = std::move(BranchingPointNotifyPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_ServerWaitForTargetData.ServerWaitForClientTargetData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TriggerOnce                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_ServerWaitForTargetData*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_ServerWaitForTargetData* UGzAT_ServerWaitForTargetData::ServerWaitForClientTargetData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool TriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_ServerWaitForTargetData", "ServerWaitForClientTargetData");

	Params::GzAT_ServerWaitForTargetData_ServerWaitForClientTargetData Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.TriggerOnce = TriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_ServerWaitForTargetData.OnTargetDataReplicatedCallback
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ActivationTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAT_ServerWaitForTargetData::OnTargetDataReplicatedCallback(const struct FGameplayAbilityTargetDataHandle& Data, const struct FGameplayTag& ActivationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_ServerWaitForTargetData", "OnTargetDataReplicatedCallback");

	Params::GzAT_ServerWaitForTargetData_OnTargetDataReplicatedCallback Parms{};

	Parms.Data = std::move(Data);
	Parms.ActivationTag = std::move(ActivationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.DefaultInteractionBehavior.ExternalEndInteraction
// (Native, Public, BlueprintCallable)

void UDefaultInteractionBehavior::ExternalEndInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "ExternalEndInteraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.DefaultInteractionBehavior.OnInteractionEnds
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasAuthority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDefaultInteractionBehavior::OnInteractionEnds(class AActor* InteractedBy, bool bHasAuthority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "OnInteractionEnds");

	Params::DefaultInteractionBehavior_OnInteractionEnds Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.bHasAuthority = bHasAuthority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.DefaultInteractionBehavior.CanBeInteractedBy
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UGzInteractionComponent*          InteractedBy                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDefaultInteractionBehavior::CanBeInteractedBy(class UGzInteractionComponent* InteractedBy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "CanBeInteractedBy");

	Params::DefaultInteractionBehavior_CanBeInteractedBy Parms{};

	Parms.InteractedBy = InteractedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.DefaultInteractionBehavior.GetOwnerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UDefaultInteractionBehavior::GetOwnerActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "GetOwnerActor");

	Params::DefaultInteractionBehavior_GetOwnerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.DefaultInteractionBehavior.GetOwnerASC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilitySystemComponent* UDefaultInteractionBehavior::GetOwnerASC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "GetOwnerASC");

	Params::DefaultInteractionBehavior_GetOwnerASC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.DefaultInteractionBehavior.GetOwnerInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInteractableComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInteractableComponent* UDefaultInteractionBehavior::GetOwnerInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DefaultInteractionBehavior", "GetOwnerInteractable");

	Params::DefaultInteractionBehavior_GetOwnerInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.MontageInteractionBehavior.OnMontageEnded
// (Final, Native, Protected)

void UMontageInteractionBehavior::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MontageInteractionBehavior", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.MontageInteractionBehavior.OnMontageInterrupted
// (Final, Native, Protected)

void UMontageInteractionBehavior::OnMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MontageInteractionBehavior", "OnMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.MontageInteractionBehavior.OnMontageNotify
// (Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMontageInteractionBehavior::OnMontageNotify(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MontageInteractionBehavior", "OnMontageNotify");

	Params::MontageInteractionBehavior_OnMontageNotify Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_W8AttributeChangeThreshold.WaitForAttributeChangeThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               Attribute                                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWaitAttributeChangeComparison          ComparisonType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ComparisonValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTriggerOnce                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OptionalExternalOwner                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_W8AttributeChangeThreshold* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_W8AttributeChangeThreshold* UGzAT_W8AttributeChangeThreshold::WaitForAttributeChangeThreshold(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& Attribute, EWaitAttributeChangeComparison ComparisonType, float ComparisonValue, bool bTriggerOnce, class AActor* OptionalExternalOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_W8AttributeChangeThreshold", "WaitForAttributeChangeThreshold");

	Params::GzAT_W8AttributeChangeThreshold_WaitForAttributeChangeThreshold Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Attribute = std::move(Attribute);
	Parms.ComparisonType = ComparisonType;
	Parms.ComparisonValue = ComparisonValue;
	Parms.bTriggerOnce = bTriggerOnce;
	Parms.OptionalExternalOwner = OptionalExternalOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitComponentOverlap.WaitForOverlap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OverlapWithComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEndTaskAfterFirstOverlap                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReceiveHit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReceiveBeginOverlap                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitComponentOverlap*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitComponentOverlap* UGzAT_WaitComponentOverlap::WaitForOverlap(class UGameplayAbility* OwningAbility, class UPrimitiveComponent* OverlapWithComponent, bool bEndTaskAfterFirstOverlap, bool bReceiveHit, bool bReceiveBeginOverlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitComponentOverlap", "WaitForOverlap");

	Params::GzAT_WaitComponentOverlap_WaitForOverlap Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.OverlapWithComponent = OverlapWithComponent;
	Parms.bEndTaskAfterFirstOverlap = bEndTaskAfterFirstOverlap;
	Parms.bReceiveHit = bReceiveHit;
	Parms.bReceiveBeginOverlap = bReceiveBeginOverlap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitComponentOverlap.OnBeginOverlapCallback
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAT_WaitComponentOverlap::OnBeginOverlapCallback(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_WaitComponentOverlap", "OnBeginOverlapCallback");

	Params::GzAT_WaitComponentOverlap_OnBeginOverlapCallback Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_WaitComponentOverlap.OnHitCallback
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzAT_WaitComponentOverlap::OnHitCallback(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_WaitComponentOverlap", "OnHitCallback");

	Params::GzAT_WaitComponentOverlap_OnHitCallback Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInWorldHitmarkSubsystem.OnHitResponse
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzHitResponseData               HitResponseData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzInWorldHitmarkSubsystem::OnHitResponse(const struct FGzHitResponseData& HitResponseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInWorldHitmarkSubsystem", "OnHitResponse");

	Params::GzInWorldHitmarkSubsystem_OnHitResponse Parms{};

	Parms.HitResponseData = std::move(HitResponseData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_WaitCustomInputBase.OnInputCallback
// (Final, Native, Private)

void UGzAT_WaitCustomInputBase::OnInputCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_WaitCustomInputBase", "OnInputCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_WaitCustomInputPress.WaitCustomAnyInputPress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             InputActions                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyPressed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCustomInputEvent                     EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitCustomInputPress*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitCustomInputPress* UGzAT_WaitCustomInputPress::WaitCustomAnyInputPress(class UGameplayAbility* OwningAbility, const TArray<class UInputAction*>& InputActions, bool bTestAlreadyPressed, EGzCustomInputEvent EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitCustomInputPress", "WaitCustomAnyInputPress");

	Params::GzAT_WaitCustomInputPress_WaitCustomAnyInputPress Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.InputActions = std::move(InputActions);
	Parms.bTestAlreadyPressed = bTestAlreadyPressed;
	Parms.EventId = EventId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitCustomInputPress.WaitCustomInputPress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyPressed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCustomInputEvent                     EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitCustomInputPress*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitCustomInputPress* UGzAT_WaitCustomInputPress::WaitCustomInputPress(class UGameplayAbility* OwningAbility, class UInputAction* InputAction, bool bTestAlreadyPressed, EGzCustomInputEvent EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitCustomInputPress", "WaitCustomInputPress");

	Params::GzAT_WaitCustomInputPress_WaitCustomInputPress Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.InputAction = InputAction;
	Parms.bTestAlreadyPressed = bTestAlreadyPressed;
	Parms.EventId = EventId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitCustomInputRelease.WaitCustomAnyInputRelease
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             InputActions                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyReleased_NotImplemented                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCustomInputEvent                     EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitCustomInputRelease*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitCustomInputRelease* UGzAT_WaitCustomInputRelease::WaitCustomAnyInputRelease(class UGameplayAbility* OwningAbility, const TArray<class UInputAction*>& InputActions, bool bTestAlreadyReleased_NotImplemented, EGzCustomInputEvent EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitCustomInputRelease", "WaitCustomAnyInputRelease");

	Params::GzAT_WaitCustomInputRelease_WaitCustomAnyInputRelease Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.InputActions = std::move(InputActions);
	Parms.bTestAlreadyReleased_NotImplemented = bTestAlreadyReleased_NotImplemented;
	Parms.EventId = EventId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitCustomInputRelease.WaitCustomInputRelease
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyReleased_NotImplemented                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCustomInputEvent                     EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitCustomInputRelease*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitCustomInputRelease* UGzAT_WaitCustomInputRelease::WaitCustomInputRelease(class UGameplayAbility* OwningAbility, class UInputAction* InputAction, bool bTestAlreadyReleased_NotImplemented, EGzCustomInputEvent EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitCustomInputRelease", "WaitCustomInputRelease");

	Params::GzAT_WaitCustomInputRelease_WaitCustomInputRelease Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.InputAction = InputAction;
	Parms.bTestAlreadyReleased_NotImplemented = bTestAlreadyReleased_NotImplemented;
	Parms.EventId = EventId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitDelayRepeated.WaitDelayRepeated
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RepetionAmount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTriggerOnStart                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitDelayRepeated*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitDelayRepeated* UGzAT_WaitDelayRepeated::WaitDelayRepeated(class UGameplayAbility* OwningAbility, float Time, int32 RepetionAmount, bool bTriggerOnStart, const uint8 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitDelayRepeated", "WaitDelayRepeated");

	Params::GzAT_WaitDelayRepeated_WaitDelayRepeated Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Time = Time;
	Parms.RepetionAmount = RepetionAmount;
	Parms.bTriggerOnStart = bTriggerOnStart;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzAT_WaitDelayRepeated.TaskDelayDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzAT_WaitDelayRepeated::TaskDelayDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_WaitDelayRepeated", "TaskDelayDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzInventoryScreen.SetReadOnlyState
// (Event, Protected, BlueprintEvent)

void UGzInventoryScreen::SetReadOnlyState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryScreen", "SetReadOnlyState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzInventoryScreen.SetReadWriteState
// (Event, Protected, BlueprintEvent)

void UGzInventoryScreen::SetReadWriteState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryScreen", "SetReadWriteState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAT_WaitEquip.WaitEquipAbilityTask
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEventData               Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGzAbilityTaskConfig*             AbilityTaskConfig                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitEquip*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitEquip* UGzAT_WaitEquip::WaitEquipAbilityTask(class UGameplayAbility* OwningAbility, const struct FGameplayEventData& Payload, class UGzAbilityTaskConfig* AbilityTaskConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitEquip", "WaitEquipAbilityTask");

	Params::GzAT_WaitEquip_WaitEquipAbilityTask Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Payload = std::move(Payload);
	Parms.AbilityTaskConfig = AbilityTaskConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitEquip.OnWeaponEquiped
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   InvPocketId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAT_WaitEquip::OnWeaponEquiped(const struct FGzInvPocketId& InvPocketId, const class AGzWeaponActor* WeaponActor, bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAT_WaitEquip", "OnWeaponEquiped");

	Params::GzAT_WaitEquip_OnWeaponEquiped Parms{};

	Parms.InvPocketId = std::move(InvPocketId);
	Parms.WeaponActor = WeaponActor;
	Parms.bEquipped = bEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAT_WaitGameplayEventAny.WaitGameplayEventAny
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            EventTags                                              (Parm, NativeAccessSpecifierPublic)
// class AActor*                           Param_OptionalExternalTarget                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyTriggerOnce                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitGameplayEventAny*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitGameplayEventAny* UGzAT_WaitGameplayEventAny::WaitGameplayEventAny(class UGameplayAbility* OwningAbility, const struct FGameplayTagContainer& EventTags, class AActor* Param_OptionalExternalTarget, bool OnlyTriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitGameplayEventAny", "WaitGameplayEventAny");

	Params::GzAT_WaitGameplayEventAny_WaitGameplayEventAny Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.EventTags = std::move(EventTags);
	Parms.Param_OptionalExternalTarget = Param_OptionalExternalTarget;
	Parms.OnlyTriggerOnce = OnlyTriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractorMenu.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGzItemExtractor*                 InHexExtractor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractorMenu::Init(class AGzItemExtractor* InHexExtractor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractorMenu", "Init");

	Params::GzHexExtractorMenu_Init Parms{};

	Parms.InHexExtractor = InHexExtractor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractorMenu.GetPlayerCurrency
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzHexExtractorMenu::GetPlayerCurrency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractorMenu", "GetPlayerCurrency");

	Params::GzHexExtractorMenu_GetPlayerCurrency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPreviewPathActor.SetPathData
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPredictProjectilePathResult     NewPathData                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzPreviewPathActor::SetPathData(const struct FPredictProjectilePathResult& NewPathData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "SetPathData");

	Params::GzPreviewPathActor_SetPathData Parms{};

	Parms.NewPathData = std::move(NewPathData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPreviewPathActor.SetVisible
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPreviewPathActor::SetVisible(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "SetVisible");

	Params::GzPreviewPathActor_SetVisible Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPreviewPathActor.UpdatePredictedProjectilePath
// (Native, Event, Protected, BlueprintEvent)

void AGzPreviewPathActor::UpdatePredictedProjectilePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "UpdatePredictedProjectilePath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPreviewPathActor.GetNiagaraComponents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UNiagaraComponent*>  ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UNiagaraComponent*> AGzPreviewPathActor::GetNiagaraComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "GetNiagaraComponents");

	Params::GzPreviewPathActor_GetNiagaraComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPreviewPathActor.GetPathEndLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGzPreviewPathActor::GetPathEndLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "GetPathEndLocation");

	Params::GzPreviewPathActor_GetPathEndLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPreviewPathActor.GetSplineMeshComponents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class USplineMeshComponent*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class USplineMeshComponent*> AGzPreviewPathActor::GetSplineMeshComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPreviewPathActor", "GetSplineMeshComponents");

	Params::GzPreviewPathActor_GetSplineMeshComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.Multicast_SetMatchEndResult
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGzMatchEndResult                Result                                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzGameState::Multicast_SetMatchEndResult(const struct FGzMatchEndResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "Multicast_SetMatchEndResult");

	Params::GzGameState_Multicast_SetMatchEndResult Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameState.OnRep_ConsoleMatchInfo
// (Final, Native, Protected)

void AGzGameState::OnRep_ConsoleMatchInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "OnRep_ConsoleMatchInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameState.OnRep_GameModeSettings
// (Final, Native, Protected)

void AGzGameState::OnRep_GameModeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "OnRep_GameModeSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameState.OnRep_LocalSubsystem
// (Final, Native, Protected)

void AGzGameState::OnRep_LocalSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "OnRep_LocalSubsystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameState.FindLocalSubsystem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGzGameModeSubsystem> SubsystemClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzGameModeSubsystem*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzGameModeSubsystem* AGzGameState::FindLocalSubsystem(TSubclassOf<class AGzGameModeSubsystem> SubsystemClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "FindLocalSubsystem");

	Params::GzGameState_FindLocalSubsystem Parms{};

	Parms.SubsystemClass = SubsystemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.FindPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* AGzGameState::FindPlayerState(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "FindPlayerState");

	Params::GzGameState_FindPlayerState Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.GetMatchEndResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzMatchEndResult          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzMatchEndResult AGzGameState::GetMatchEndResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "GetMatchEndResult");

	Params::GzGameState_GetMatchEndResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.GetMatchId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzGameState::GetMatchId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "GetMatchId");

	Params::GzGameState_GetMatchId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.GetPlayerStates
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGzPlayerState*>           PlayerStates                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGzGameState::GetPlayerStates(TArray<class AGzPlayerState*>* PlayerStates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "GetPlayerStates");

	Params::GzGameState_GetPlayerStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PlayerStates != nullptr)
		*PlayerStates = std::move(Parms.PlayerStates);
}


// Function G01.GzGameState.HasMatchEndResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzGameState::HasMatchEndResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "HasMatchEndResult");

	Params::GzGameState_HasMatchEndResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameState.IsGameRuleEnabled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Rule                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzGameState::IsGameRuleEnabled(const struct FGameplayTag& Rule) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameState", "IsGameRuleEnabled");

	Params::GzGameState_IsGameRuleEnabled Parms{};

	Parms.Rule = std::move(Rule);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Base.InjectTimer
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzMTW_Timer*                     CurrentTimer                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Base::InjectTimer(class UGzMTW_Timer* CurrentTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Base", "InjectTimer");

	Params::GzMTW_Base_InjectTimer Parms{};

	Parms.CurrentTimer = CurrentTimer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMTW_Base.OnBecomeActive
// (Native, Event, Protected, BlueprintEvent)

void UGzMTW_Base::OnBecomeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Base", "OnBecomeActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Base.OnBecomeInactive
// (Native, Event, Protected, BlueprintEvent)

void UGzMTW_Base::OnBecomeInactive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Base", "OnBecomeInactive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Timer.OnStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzConditionState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Timer::OnStateChanged_BP(EGzConditionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Timer", "OnStateChanged_BP");

	Params::GzMTW_Timer_OnStateChanged_BP Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMTW_Timer.OnTimerStateChanged
// (Final, Native, Private)
// Parameters:
// EGzConditionState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Timer::OnTimerStateChanged(EGzConditionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Timer", "OnTimerStateChanged");

	Params::GzMTW_Timer_OnTimerStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Timer.GetRemainingTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMTW_Timer::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Timer", "GetRemainingTime");

	Params::GzMTW_Timer_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Timer.IsInActiveState
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// EGzConditionState                       State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMTW_Timer::IsInActiveState(const EGzConditionState State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Timer", "IsInActiveState");

	Params::GzMTW_Timer_IsInActiveState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioAnnouncer.OnAnnouncementEnded
// (Final, Native, Public, HasOutParams)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAudioAnnouncer::OnAnnouncementEnded(const class AActor* Actor, class UAkAudioEvent* Event, const struct FGameplayTag& VoiceLineTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioAnnouncer", "OnAnnouncementEnded");

	Params::GzAudioAnnouncer_OnAnnouncementEnded Parms{};

	Parms.Actor = Actor;
	Parms.Event = Event;
	Parms.VoiceLineTag = std::move(VoiceLineTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioAnnouncer.PostAnnouncement
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       AnnouncementEndDelegate                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzAudioAnnouncer::PostAnnouncement(const struct FGameplayTag& VoiceLineTag, bool bStarted, const TDelegate<void()>& AnnouncementEndDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioAnnouncer", "PostAnnouncement");

	Params::GzAudioAnnouncer_PostAnnouncement Parms{};

	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.bStarted = bStarted;
	Parms.AnnouncementEndDelegate = AnnouncementEndDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCheatManager.AddConsumable
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddConsumable(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddConsumable");

	Params::GzCheatManager_AddConsumable Parms{};

	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddCyberLimb
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CyberLimbName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddCyberLimb(const class FString& CyberLimbName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddCyberLimb");

	Params::GzCheatManager_AddCyberLimb Parms{};

	Parms.CyberLimbName = std::move(CyberLimbName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddMeNPCTeamFriend
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddMeNPCTeamFriend(const int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddMeNPCTeamFriend");

	Params::GzCheatManager_AddMeNPCTeamFriend Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddPlayerXp
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Xp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddPlayerXp(int32 Xp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddPlayerXp");

	Params::GzCheatManager_AddPlayerXp Parms{};

	Parms.Xp = Xp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           WeaponName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddWeapon(const class FString& WeaponName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddWeapon");

	Params::GzCheatManager_AddWeapon Parms{};

	Parms.WeaponName = std::move(WeaponName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddWidget
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           WidgetClassName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddWidget(const class FString& WidgetClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddWidget");

	Params::GzCheatManager_AddWidget Parms{};

	Parms.WidgetClassName = std::move(WidgetClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ChangeTeam
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   NewTeamIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::ChangeTeam(int32 NewTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ChangeTeam");

	Params::GzCheatManager_ChangeTeam Parms{};

	Parms.NewTeamIndex = NewTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ClientTeleportPlayerToMe
// (Final, Exec, Native, Public)

void UGzCheatManager::ClientTeleportPlayerToMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ClientTeleportPlayerToMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.CompleteSelectedJob
// (Final, Exec, Native, Public)

void UGzCheatManager::CompleteSelectedJob()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "CompleteSelectedJob");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DebugGetHit
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasDefaults)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStartOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEndOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisualizeTrace                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::DebugGetHit(float DamageAmount, const struct FVector& TraceStartOffset, const struct FVector& TraceEndOffset, bool bVisualizeTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DebugGetHit");

	Params::GzCheatManager_DebugGetHit Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.TraceStartOffset = std::move(TraceStartOffset);
	Parms.TraceEndOffset = std::move(TraceEndOffset);
	Parms.bVisualizeTrace = bVisualizeTrace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DebugGetHitFromTop
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisualizeTrace                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::DebugGetHitFromTop(float DamageAmount, bool bVisualizeTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DebugGetHitFromTop");

	Params::GzCheatManager_DebugGetHitFromTop Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.bVisualizeTrace = bVisualizeTrace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DisableServerNetProfile
// (Final, Exec, Native, Public)

void UGzCheatManager::DisableServerNetProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DisableServerNetProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DisableStall
// (Final, Exec, Native, Public)

void UGzCheatManager::DisableStall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DisableStall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DismissAllNotifications
// (Final, Exec, Native, Public)

void UGzCheatManager::DismissAllNotifications()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DismissAllNotifications");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DrawCoversInOrigin
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// float                                   Extent                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::DrawCoversInOrigin(const float& Extent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DrawCoversInOrigin");

	Params::GzCheatManager_DrawCoversInOrigin Parms{};

	Parms.Extent = Extent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.DropCurrentWeapon
// (Final, Exec, Native, Public)

void UGzCheatManager::DropCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "DropCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.EnableServerNetProfile
// (Final, Exec, Native, Public)

void UGzCheatManager::EnableServerNetProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "EnableServerNetProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.EnableStall
// (Final, Exec, Native, Public)
// Parameters:
// float                                   MinInterval                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxInterval                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinStallTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxStallTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::EnableStall(float MinInterval, float MaxInterval, float MinStallTime, float MaxStallTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "EnableStall");

	Params::GzCheatManager_EnableStall Parms{};

	Parms.MinInterval = MinInterval;
	Parms.MaxInterval = MaxInterval;
	Parms.MinStallTime = MinStallTime;
	Parms.MaxStallTime = MaxStallTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.FullAmmo
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, BlueprintCallable)

void UGzCheatManager::FullAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "FullAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.Immortal
// (Final, Exec, Native, Public)

void UGzCheatManager::Immortal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "Immortal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.Interact
// (Final, Native, Private)

void UGzCheatManager::Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "Interact");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.JoinOnlineMatch
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           NetworkAddress                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::JoinOnlineMatch(const class FString& NetworkAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "JoinOnlineMatch");

	Params::GzCheatManager_JoinOnlineMatch Parms{};

	Parms.NetworkAddress = std::move(NetworkAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.KillAll
// (Final, Exec, Native, Public)

void UGzCheatManager::KillAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "KillAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.KillMe
// (Final, Exec, Native, Public)

void UGzCheatManager::KillMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "KillMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.KillNpc
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::KillNpc(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "KillNpc");

	Params::GzCheatManager_KillNpc Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.KnockMe
// (Final, Exec, Native, Public)

void UGzCheatManager::KnockMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "KnockMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.MarkAllReady
// (Final, Exec, Native, Public)

void UGzCheatManager::MarkAllReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "MarkAllReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.PublishLoadouts
// (Final, Exec, Native, Public)

void UGzCheatManager::PublishLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "PublishLoadouts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.PublishWeaponConfigurations
// (Final, Exec, Native, Public)

void UGzCheatManager::PublishWeaponConfigurations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "PublishWeaponConfigurations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.PullAvailableAssignments
// (Final, Exec, Native, Public)

void UGzCheatManager::PullAvailableAssignments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "PullAvailableAssignments");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.RemoveMeNPCTeamFriend
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::RemoveMeNPCTeamFriend(const int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "RemoveMeNPCTeamFriend");

	Params::GzCheatManager_RemoveMeNPCTeamFriend Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.RepeatInteract
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   RepeatCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::RepeatInteract(int32 RepeatCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "RepeatInteract");

	Params::GzCheatManager_RepeatInteract Parms{};

	Parms.RepeatCount = RepeatCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ResetAllJobs
// (Final, Exec, Native, Public)

void UGzCheatManager::ResetAllJobs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ResetAllJobs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ResetLimbCharges
// (Final, Exec, Native, Public)

void UGzCheatManager::ResetLimbCharges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ResetLimbCharges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ResetPlayerAccount
// (Final, Exec, Native, Public)

void UGzCheatManager::ResetPlayerAccount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ResetPlayerAccount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ResetProgression
// (Final, Exec, Native, Public)

void UGzCheatManager::ResetProgression()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ResetProgression");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.RespawnMe
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzCheatManager::RespawnMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "RespawnMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.RestartServer
// (Final, Exec, Native, Public)

void UGzCheatManager::RestartServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "RestartServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ReviveMe
// (Final, Exec, Native, Public)

void UGzCheatManager::ReviveMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ReviveMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetAICoversDebug
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetAICoversDebug(bool bEnabled, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetAICoversDebug");

	Params::GzCheatManager_SetAICoversDebug Parms{};

	Parms.bEnabled = bEnabled;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetAILODsEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetAILODsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetAILODsEnabled");

	Params::GzCheatManager_SetAILODsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetBotFarmMode
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetBotFarmMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetBotFarmMode");

	Params::GzCheatManager_SetBotFarmMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetDataLayerPreset
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasOutParams)
// Parameters:
// class FName                             PresetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetDataLayerPreset(const class FName& PresetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetDataLayerPreset");

	Params::GzCheatManager_SetDataLayerPreset Parms{};

	Parms.PresetName = PresetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetDebugFreeCam
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetDebugFreeCam(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetDebugFreeCam");

	Params::GzCheatManager_SetDebugFreeCam Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetGzCheatsEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetGzCheatsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetGzCheatsEnabled");

	Params::GzCheatManager_SetGzCheatsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetJetpackHealth
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetJetpackHealth(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetJetpackHealth");

	Params::GzCheatManager_SetJetpackHealth Parms{};

	Parms.Health = Health;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetMaxNPCDeathMatchMode
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetMaxNPCDeathMatchMode(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetMaxNPCDeathMatchMode");

	Params::GzCheatManager_SetMaxNPCDeathMatchMode Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetMovementSpeed
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetMovementSpeed(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetMovementSpeed");

	Params::GzCheatManager_SetMovementSpeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetQuitGameTime
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetQuitGameTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetQuitGameTime");

	Params::GzCheatManager_SetQuitGameTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetReadyToStart
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// bool                                    bReadyToStart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetReadyToStart(bool bReadyToStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetReadyToStart");

	Params::GzCheatManager_SetReadyToStart Parms{};

	Parms.bReadyToStart = bReadyToStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetRespawnInMatch
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// bool                                    bRespawnPlayers                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRespawnAfterZoneActivation                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetRespawnInMatch(bool bRespawnPlayers, bool bRespawnAfterZoneActivation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetRespawnInMatch");

	Params::GzCheatManager_SetRespawnInMatch Parms{};

	Parms.bRespawnPlayers = bRespawnPlayers;
	Parms.bRespawnAfterZoneActivation = bRespawnAfterZoneActivation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetRTPCValue
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           RTPC                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetRTPCValue(const class FString& RTPC, float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetRTPCValue");

	Params::GzCheatManager_SetRTPCValue Parms{};

	Parms.RTPC = std::move(RTPC);
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetServerFPSAccTime
// (Final, Exec, Native, Public)
// Parameters:
// float                                   FPSAccTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetServerFPSAccTime(float FPSAccTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetServerFPSAccTime");

	Params::GzCheatManager_SetServerFPSAccTime Parms{};

	Parms.FPSAccTime = FPSAccTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetTargetFpsClient
// (Final, Exec, Native, Public)
// Parameters:
// float                                   TargetFps                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetTargetFpsClient(float TargetFps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetTargetFpsClient");

	Params::GzCheatManager_SetTargetFpsClient Parms{};

	Parms.TargetFps = TargetFps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetTargetFpsServer
// (Final, Exec, Native, Public)
// Parameters:
// float                                   TargetFps                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetTargetFpsServer(float TargetFps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetTargetFpsServer");

	Params::GzCheatManager_SetTargetFpsServer Parms{};

	Parms.TargetFps = TargetFps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetTeamChangeUnlocked
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// bool                                    bUnlocked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetTeamChangeUnlocked(bool bUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetTeamChangeUnlocked");

	Params::GzCheatManager_SetTeamChangeUnlocked Parms{};

	Parms.bUnlocked = bUnlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetVoiceState
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetVoiceState(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetVoiceState");

	Params::GzCheatManager_SetVoiceState Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ShowAICharacterOutline
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::ShowAICharacterOutline(uint8 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ShowAICharacterOutline");

	Params::GzCheatManager_ShowAICharacterOutline Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ShowCheats
// (Final, Exec, Native, Public)

void UGzCheatManager::ShowCheats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ShowCheats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ShowGameNotification
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FName                             TestNotificationID                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::ShowGameNotification(const class FName& TestNotificationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ShowGameNotification");

	Params::GzCheatManager_ShowGameNotification Parms{};

	Parms.TestNotificationID = TestNotificationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ShowPlayerNames
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::ShowPlayerNames(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ShowPlayerNames");

	Params::GzCheatManager_ShowPlayerNames Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SimulateKeyAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SimulateKeyAxis(const struct FKey& Key, float Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SimulateKeyAxis");

	Params::GzCheatManager_SimulateKeyAxis Parms{};

	Parms.Key = std::move(Key);
	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SimulateKeyPressed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SimulateKeyPressed(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SimulateKeyPressed");

	Params::GzCheatManager_SimulateKeyPressed Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SimulateKeyPressedAndReleased
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SimulateKeyPressedAndReleased(const struct FKey& Key, float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SimulateKeyPressedAndReleased");

	Params::GzCheatManager_SimulateKeyPressedAndReleased Parms{};

	Parms.Key = std::move(Key);
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SimulateKeyReleased
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SimulateKeyReleased(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SimulateKeyReleased");

	Params::GzCheatManager_SimulateKeyReleased Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SpawnAI
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SpawnAI(const class FString& Param_Name, int32 TeamID, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SpawnAI");

	Params::GzCheatManager_SpawnAI Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.TeamID = TeamID;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SpawnMirrorBreaker
// (Final, Exec, Native, Public)

void UGzCheatManager::SpawnMirrorBreaker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SpawnMirrorBreaker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SpawnNPC
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTeamSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SpawnNPC(int32 Count, float Radius, int32 TeamID, int32 MaxTeamSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SpawnNPC");

	Params::GzCheatManager_SpawnNPC Parms{};

	Parms.Count = Count;
	Parms.Radius = Radius;
	Parms.TeamID = TeamID;
	Parms.MaxTeamSize = MaxTeamSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.StartRecording
// (Final, Exec, Native, Public)

void UGzCheatManager::StartRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "StartRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.StartVisualLogOnServer
// (Final, Exec, Native, Public)

void UGzCheatManager::StartVisualLogOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "StartVisualLogOnServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.StopRecording
// (Final, Exec, Native, Public)

void UGzCheatManager::StopRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "StopRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.StopVisualLogOnServer
// (Final, Exec, Native, Public)

void UGzCheatManager::StopVisualLogOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "StopVisualLogOnServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SweepShape
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   ShapeType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShapeRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShapeHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartZ                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndZ                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SweepShape(uint8 ShapeType, float ShapeRadius, float ShapeHeight, bool bIgnoreCharacter, float StartX, float StartY, float StartZ, float EndX, float EndY, float EndZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SweepShape");

	Params::GzCheatManager_SweepShape Parms{};

	Parms.ShapeType = ShapeType;
	Parms.ShapeRadius = ShapeRadius;
	Parms.ShapeHeight = ShapeHeight;
	Parms.bIgnoreCharacter = bIgnoreCharacter;
	Parms.StartX = StartX;
	Parms.StartY = StartY;
	Parms.StartZ = StartZ;
	Parms.EndX = EndX;
	Parms.EndY = EndY;
	Parms.EndZ = EndZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SweepShapeByDelta
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   ShapeType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShapeRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShapeHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartZ                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaZ                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SweepShapeByDelta(uint8 ShapeType, float ShapeRadius, float ShapeHeight, bool bIgnoreCharacter, float StartX, float StartY, float StartZ, float DeltaX, float DeltaY, float DeltaZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SweepShapeByDelta");

	Params::GzCheatManager_SweepShapeByDelta Parms{};

	Parms.ShapeType = ShapeType;
	Parms.ShapeRadius = ShapeRadius;
	Parms.ShapeHeight = ShapeHeight;
	Parms.bIgnoreCharacter = bIgnoreCharacter;
	Parms.StartX = StartX;
	Parms.StartY = StartY;
	Parms.StartZ = StartZ;
	Parms.DeltaX = DeltaX;
	Parms.DeltaY = DeltaY;
	Parms.DeltaZ = DeltaZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TearOffLimb
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForced                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::TearOffLimb(const class FString& Param_Name, const bool bForced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TearOffLimb");

	Params::GzCheatManager_TearOffLimb Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TeleportToCoordinates
// (Final, Exec, Native, Public)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::TeleportToCoordinates(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TeleportToCoordinates");

	Params::GzCheatManager_TeleportToCoordinates Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TeleportToNextAICharacter
// (Final, Exec, Native, Public)

void UGzCheatManager::TeleportToNextAICharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TeleportToNextAICharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TeleportToNextPlayer
// (Final, Exec, Native, Public)

void UGzCheatManager::TeleportToNextPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TeleportToNextPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ToggleCharacterCustomizationDebug
// (Final, Exec, Native, Public)

void UGzCheatManager::ToggleCharacterCustomizationDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ToggleCharacterCustomizationDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TriggerServerCrash
// (Final, Exec, Native, Public)

void UGzCheatManager::TriggerServerCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TriggerServerCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TryServerPause
// (Final, Exec, Native, Public)

void UGzCheatManager::TryServerPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TryServerPause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ZoomDebugFreeCamAction
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FInputActionValue                Instance                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzCheatManager::ZoomDebugFreeCamAction(const struct FInputActionValue& Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ZoomDebugFreeCamAction");

	Params::GzCheatManager_ZoomDebugFreeCamAction Parms{};

	Parms.Instance = std::move(Instance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.AddBlockchainCoins
// (Final, Exec, Native, Public, Const)
// Parameters:
// double                                  CurrencyAmount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::AddBlockchainCoins(double CurrencyAmount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "AddBlockchainCoins");

	Params::GzCheatManager_AddBlockchainCoins Parms{};

	Parms.CurrencyAmount = CurrencyAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.EnterOfflineSession
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::EnterOfflineSession(const class FString& LevelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "EnterOfflineSession");

	Params::GzCheatManager_EnterOfflineSession Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ExitOfflineSession
// (Final, Exec, Native, Public, Const)

void UGzCheatManager::ExitOfflineSession() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ExitOfflineSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.KickMe
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzCheatManager::KickMe() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "KickMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.Logout
// (Final, Exec, Native, Public, Const)

void UGzCheatManager::Logout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "Logout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.PostVoiceLine
// (Final, BlueprintCosmetic, Exec, Native, Public, Const)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::PostVoiceLine(const class FString& EventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "PostVoiceLine");

	Params::GzCheatManager_PostVoiceLine Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetLeglessState
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetLeglessState(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetLeglessState");

	Params::GzCheatManager_SetLeglessState Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetQuickOrderCooldown
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetQuickOrderCooldown(const float Time) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetQuickOrderCooldown");

	Params::GzCheatManager_SetQuickOrderCooldown Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetRespawnCheatUnlocked
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// bool                                    bUnlocked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetRespawnCheatUnlocked(bool bUnlocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetRespawnCheatUnlocked");

	Params::GzCheatManager_SetRespawnCheatUnlocked Parms{};

	Parms.bUnlocked = bUnlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SetVirtualCurrency
// (Final, Exec, Native, Public, Const)
// Parameters:
// uint8                                   CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrencyAmount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SetVirtualCurrency(uint8 CurrencyType, int32 CurrencyAmount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SetVirtualCurrency");

	Params::GzCheatManager_SetVirtualCurrency Parms{};

	Parms.CurrencyType = CurrencyType;
	Parms.CurrencyAmount = CurrencyAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.ShowCurrentCoordinates
// (Final, Exec, Native, Public, Const)

void UGzCheatManager::ShowCurrentCoordinates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "ShowCurrentCoordinates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.SubtractBlockchainCoins
// (Final, Exec, Native, Public, Const)
// Parameters:
// double                                  CurrencyAmount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheatManager::SubtractBlockchainCoins(double CurrencyAmount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "SubtractBlockchainCoins");

	Params::GzCheatManager_SubtractBlockchainCoins Parms{};

	Parms.CurrencyAmount = CurrencyAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheatManager.TriggerMotionInput
// (Final, BlueprintCosmetic, Exec, Native, Public, Const)

void UGzCheatManager::TriggerMotionInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheatManager", "TriggerMotionInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.GetMissionVoiceLineTag
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionState                           MissionState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzAudioControllerComponent::GetMissionVoiceLineTag(class AGzMission* InMission, EMissionState MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "GetMissionVoiceLineTag");

	Params::GzAudioControllerComponent_GetMissionVoiceLineTag Parms{};

	Parms.InMission = InMission;
	Parms.MissionState = MissionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioControllerComponent.OnMatchStateChanged
// (Final, Native, Public, BlueprintCallable)

void UGzAudioControllerComponent::OnMatchStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnMatchStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnMessageReceived
// (Final, Native, Private)
// Parameters:
// class UGzGameMessage*                   Message                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnMessageReceived(const class UGzGameMessage* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnMessageReceived");

	Params::GzAudioControllerComponent_OnMessageReceived Parms{};

	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnMissionStateChanged");

	Params::GzAudioControllerComponent_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnPingAdded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzPingData                      PingData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnPingAdded(const struct FGzPingData& PingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnPingAdded");

	Params::GzAudioControllerComponent_OnPingAdded Parms{};

	Parms.PingData = std::move(PingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnPingAgreementChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPingData                      PingData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAgree                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnPingAgreementChanged(class AGzPlayerState* PlayerState, const struct FGzPingData& PingData, bool bAgree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnPingAgreementChanged");

	Params::GzAudioControllerComponent_OnPingAgreementChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.PingData = std::move(PingData);
	Parms.bAgree = bAgree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnPingCanceled
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzPingData                      PingData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnPingCanceled(const struct FGzPingData& PingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnPingCanceled");

	Params::GzAudioControllerComponent_OnPingCanceled Parms{};

	Parms.PingData = std::move(PingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnTeamDied
// (Final, Native, Private)
// Parameters:
// class AGzTeam*                          DefeatedTeam                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnTeamDied(class AGzTeam* DefeatedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnTeamDied");

	Params::GzAudioControllerComponent_OnTeamDied Parms{};

	Parms.DefeatedTeam = DefeatedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnViewTargetChanged(class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnViewTargetChanged");

	Params::GzAudioControllerComponent_OnViewTargetChanged Parms{};

	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.OnVoiceLineEventHit
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioControllerComponent::OnVoiceLineEventHit(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "OnVoiceLineEventHit");

	Params::GzAudioControllerComponent_OnVoiceLineEventHit Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioControllerComponent.PostCharacterActionVoiceLine
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVoiceLinePriority                    Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAudioControllerComponent::PostCharacterActionVoiceLine(class AActor* Actor, class UAkAudioEvent* Event, const struct FGameplayTag& VoiceLineTag, EGzVoiceLinePriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "PostCharacterActionVoiceLine");

	Params::GzAudioControllerComponent_PostCharacterActionVoiceLine Parms{};

	Parms.Actor = Actor;
	Parms.Event = Event;
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioControllerComponent.PostLocalAkEvent
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzAudioControllerComponent::PostLocalAkEvent(class UAkAudioEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "PostLocalAkEvent");

	Params::GzAudioControllerComponent_PostLocalAkEvent Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioControllerComponent.PostVoiceLine
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVoiceLinePriority                    Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzAudioControllerComponent::PostVoiceLine(class AActor* Actor, class UAkAudioEvent* Event, const struct FGameplayTag& VoiceLineTag, EGzVoiceLinePriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioControllerComponent", "PostVoiceLine");

	Params::GzAudioControllerComponent_PostVoiceLine Parms{};

	Parms.Actor = Actor;
	Parms.Event = Event;
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioEngineSubsystem.OnInputMethodChanged
// (Final, Native, Private)
// Parameters:
// struct FPlatformUserId                  UserId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputDeviceId                   InputDeviceId                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioEngineSubsystem::OnInputMethodChanged(const struct FPlatformUserId& UserId, const struct FInputDeviceId& InputDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioEngineSubsystem", "OnInputMethodChanged");

	Params::GzAudioEngineSubsystem_OnInputMethodChanged Parms{};

	Parms.UserId = std::move(UserId);
	Parms.InputDeviceId = std::move(InputDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLootUtility.GetLootModifiableNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzLootUtility::GetLootModifiableNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLootUtility", "GetLootModifiableNames");

	Params::GzLootUtility_GetLootModifiableNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootUtility.MergeLootModifiers
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UGzLootModifierTableData*> ModifierTables                                         (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FGzLootModifier>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzLootModifier> UGzLootUtility::MergeLootModifiers(const TArray<class UGzLootModifierTableData*>& ModifierTables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLootUtility", "MergeLootModifiers");

	Params::GzLootUtility_MergeLootModifiers Parms{};

	Parms.ModifierTables = std::move(ModifierTables);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryTooltip.InitFromItem_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzInvItem                       InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryTooltip::InitFromItem_BP(const struct FGzInvItem& InItem, const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryTooltip", "InitFromItem_BP");

	Params::GzInventoryTooltip_InitFromItem_BP Parms{};

	Parms.InItem = std::move(InItem);
	Parms.PocketId = std::move(PocketId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzAudioHintComponent.StartEvent
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzAudioHintComponent::StartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioHintComponent", "StartEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioHintComponent.StopEvent
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzAudioHintComponent::StopEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioHintComponent", "StopEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Minigun.HandleAbilityInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Minigun::HandleAbilityInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Minigun", "HandleAbilityInputPressed");

	Params::GzGA_Minigun_HandleAbilityInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Minigun.HandleShootingInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Minigun::HandleShootingInputPressed(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Minigun", "HandleShootingInputPressed");

	Params::GzGA_Minigun_HandleShootingInputPressed Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Minigun.HandleShootingInputReleased
// (Final, Native, Protected)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Minigun::HandleShootingInputReleased(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Minigun", "HandleShootingInputReleased");

	Params::GzGA_Minigun_HandleShootingInputReleased Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Minigun.OnMontageCompleted
// (Final, Native, Protected)

void UGzGA_Minigun::OnMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Minigun", "OnMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAudioManagerSubsystem.GetAudioAnnouncer
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAudioAnnouncer*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAudioAnnouncer* UGzAudioManagerSubsystem::GetAudioAnnouncer(const class UObject* WorldContext, const struct FGameplayTag& AnnouncerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAudioManagerSubsystem", "GetAudioAnnouncer");

	Params::GzAudioManagerSubsystem_GetAudioAnnouncer Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnnouncerTag = std::move(AnnouncerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAudioManagerSubsystem.ResetLoadedStateEvent
// (Final, Native, Public)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAudioManagerSubsystem::ResetLoadedStateEvent(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAudioManagerSubsystem", "ResetLoadedStateEvent");

	Params::GzAudioManagerSubsystem_ResetLoadedStateEvent Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBTBaseService.GetBlackboardComponent
// (Final, Native, Protected, Const)
// Parameters:
// class UBlackboardComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* UGzBTBaseService::GetBlackboardComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTBaseService", "GetBlackboardComponent");

	Params::GzBTBaseService_GetBlackboardComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBTBaseService.GetGzAIController
// (Final, Native, Protected, Const)
// Parameters:
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzBTBaseService::GetGzAIController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTBaseService", "GetGzAIController");

	Params::GzBTBaseService_GetGzAIController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBTServiceAttack.OnTakeDamage
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBTServiceAttack::OnTakeDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTServiceAttack", "OnTakeDamage");

	Params::GzBTServiceAttack_OnTakeDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.AutoLogin
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::AutoLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "AutoLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.GetConsoleAuth
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::GetConsoleAuth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "GetConsoleAuth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.Relogin
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::Relogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "Relogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.ShowAccountId
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::ShowAccountId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "ShowAccountId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.ShowAuthCode
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::ShowAuthCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "ShowAuthCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.ShowLoginUI
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::ShowLoginUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "ShowLoginUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAuthenticationCheatExtension.ShowTitleInfo
// (Final, Exec, Native, Public)

void UGzAuthenticationCheatExtension::ShowTitleInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAuthenticationCheatExtension", "ShowTitleInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGlobalSettings.GetGlobalSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzGlobalSettings*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGlobalSettings* UGzGlobalSettings::GetGlobalSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGlobalSettings", "GetGlobalSettings");

	Params::GzGlobalSettings_GetGlobalSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBTServiceSwitchFireMode.GetCurrentFireMode
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWeaponMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzWeaponMode UGzBTServiceSwitchFireMode::GetCurrentFireMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTServiceSwitchFireMode", "GetCurrentFireMode");

	Params::GzBTServiceSwitchFireMode_GetCurrentFireMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzQuickOrderComponent.EndSelectingDeliveryLocation
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzQuickOrderComponent::EndSelectingDeliveryLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "EndSelectingDeliveryLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzQuickOrderComponent.Server_SpawnDeliveryDrone
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InDeliveryLocation                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzQuickOrderComponent::Server_SpawnDeliveryDrone(const struct FGuid& LoadoutGuid, const struct FVector& InDeliveryLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "Server_SpawnDeliveryDrone");

	Params::GzQuickOrderComponent_Server_SpawnDeliveryDrone Parms{};

	Parms.LoadoutGuid = std::move(LoadoutGuid);
	Parms.InDeliveryLocation = std::move(InDeliveryLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzQuickOrderComponent.StartSelectingDeliveryLocation
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzQuickOrderComponent::StartSelectingDeliveryLocation(const struct FGuid& LoadoutGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "StartSelectingDeliveryLocation");

	Params::GzQuickOrderComponent_StartSelectingDeliveryLocation Parms{};

	Parms.LoadoutGuid = std::move(LoadoutGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzQuickOrderComponent.TryCallDrone
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzQuickOrderComponent::TryCallDrone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "TryCallDrone");

	Params::GzQuickOrderComponent_TryCallDrone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzQuickOrderComponent.CanCallDeliveryDrone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzQuickOrderComponent::CanCallDeliveryDrone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "CanCallDeliveryDrone");

	Params::GzQuickOrderComponent_CanCallDeliveryDrone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzQuickOrderComponent.GetCallDroneAvailableTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzQuickOrderComponent::GetCallDroneAvailableTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "GetCallDroneAvailableTime");

	Params::GzQuickOrderComponent_GetCallDroneAvailableTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzQuickOrderComponent.GetDroneRemainingCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzQuickOrderComponent::GetDroneRemainingCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "GetDroneRemainingCooldown");

	Params::GzQuickOrderComponent_GetDroneRemainingCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzQuickOrderComponent.IsSelectingLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzQuickOrderComponent::IsSelectingLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzQuickOrderComponent", "IsSelectingLocation");

	Params::GzQuickOrderComponent_IsSelectingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutoReplaySubsystem.OnReplayPlaybackComplete
// (Final, Native, Protected)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutoReplaySubsystem::OnReplayPlaybackComplete(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoReplaySubsystem", "OnReplayPlaybackComplete");

	Params::GzAutoReplaySubsystem_OnReplayPlaybackComplete Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutoRespawnAvailabilityMessage.GetAutoRespawnChangeTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzAutoRespawnAvailabilityMessage::GetAutoRespawnChangeTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoRespawnAvailabilityMessage", "GetAutoRespawnChangeTime");

	Params::GzAutoRespawnAvailabilityMessage_GetAutoRespawnChangeTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutoRespawnAvailabilityMessage.GetNewAvailabilityStatus
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzAutoRespawnAvailabilityMessage::GetNewAvailabilityStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoRespawnAvailabilityMessage", "GetNewAvailabilityStatus");

	Params::GzAutoRespawnAvailabilityMessage_GetNewAvailabilityStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCoreBlueprintFunctionLibrary.LogStreamingGridInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCoreBlueprintFunctionLibrary::LogStreamingGridInfo(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCoreBlueprintFunctionLibrary", "LogStreamingGridInfo");

	Params::GzCoreBlueprintFunctionLibrary_LogStreamingGridInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutotestCommandInteract.OnInteract
// (Final, Native, Protected)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interaction                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestCommandInteract::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestCommandInteract", "OnInteract");

	Params::GzAutotestCommandInteract_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interaction = Interaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHealthInterface.GetHealth
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IGzHealthInterface::GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHealthInterface", "GetHealth");

	Params::GzHealthInterface_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHealthInterface.GetMaxHealth
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IGzHealthInterface::GetMaxHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHealthInterface", "GetMaxHealth");

	Params::GzHealthInterface_GetMaxHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHealthInterface.IsAlive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzHealthInterface::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHealthInterface", "IsAlive");

	Params::GzHealthInterface_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidgetExtension.OnMapReady
// (Native, Protected)

void UGzMapWidgetExtension::OnMapReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidgetExtension", "OnMapReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.OnPropagationPointActivated
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// int32                                   PropagationPointID                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PointLifespan                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPropagationActor::OnPropagationPointActivated(const int32 PropagationPointID, const struct FVector& Location, const struct FVector& Normal, const float PointLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "OnPropagationPointActivated");

	Params::GzPropagationActor_OnPropagationPointActivated Parms{};

	Parms.PropagationPointID = PropagationPointID;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.PointLifespan = PointLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.OnPropagationPointDeactivated
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// int32                                   PropagationPointID                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPropagationActor::OnPropagationPointDeactivated(const int32 PropagationPointID, const struct FVector& Location, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "OnPropagationPointDeactivated");

	Params::GzPropagationActor_OnPropagationPointDeactivated Parms{};

	Parms.PropagationPointID = PropagationPointID;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.RegisterCollisionComponentWithPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   PropagationPointID                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              CollisionComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPropagationActor::RegisterCollisionComponentWithPoint(const int32 PropagationPointID, class UPrimitiveComponent* CollisionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "RegisterCollisionComponentWithPoint");

	Params::GzPropagationActor_RegisterCollisionComponentWithPoint Parms{};

	Parms.PropagationPointID = PropagationPointID;
	Parms.CollisionComponent = CollisionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.RegisterVisualComponentWithPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   PropagationPointID                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  VisualComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPropagationActor::RegisterVisualComponentWithPoint(const int32 PropagationPointID, class USceneComponent* VisualComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "RegisterVisualComponentWithPoint");

	Params::GzPropagationActor_RegisterVisualComponentWithPoint Parms{};

	Parms.PropagationPointID = PropagationPointID;
	Parms.VisualComponent = VisualComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.StartPropagation
// (Final, Native, Public, BlueprintCallable)

void AGzPropagationActor::StartPropagation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "StartPropagation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationActor.GetAdjustedLifespan
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   TotalLifespan                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPropagationActor::GetAdjustedLifespan(const float TotalLifespan) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "GetAdjustedLifespan");

	Params::GzPropagationActor_GetAdjustedLifespan Parms{};

	Parms.TotalLifespan = TotalLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPropagationActor.MakeEffectContext
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayEffectContextHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayEffectContextHandle AGzPropagationActor::MakeEffectContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationActor", "MakeEffectContext");

	Params::GzPropagationActor_MakeEffectContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStickyGooPropagationActor.OnPawnBeginOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStickyGooPropagationActor::OnPawnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "OnPawnBeginOverlap");

	Params::GzStickyGooPropagationActor_OnPawnBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooPropagationActor.OnPawnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStickyGooPropagationActor::OnPawnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "OnPawnEndOverlap");

	Params::GzStickyGooPropagationActor_OnPawnEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooPropagationActor.OnRep_AbilityData
// (Final, Native, Protected)

void AGzStickyGooPropagationActor::OnRep_AbilityData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "OnRep_AbilityData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooPropagationActor.OnScaleDownStart
// (Final, Native, Protected)

void AGzStickyGooPropagationActor::OnScaleDownStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "OnScaleDownStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooPropagationActor.SpawnDecalNiagaraComponent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* AGzStickyGooPropagationActor::SpawnDecalNiagaraComponent(const struct FVector& WorldLocation, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "SpawnDecalNiagaraComponent");

	Params::GzStickyGooPropagationActor_SpawnDecalNiagaraComponent Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzStickyGooPropagationActor.SpawnPrimaryNiagaraComponent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* AGzStickyGooPropagationActor::SpawnPrimaryNiagaraComponent(const struct FVector& WorldLocation, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "SpawnPrimaryNiagaraComponent");

	Params::GzStickyGooPropagationActor_SpawnPrimaryNiagaraComponent Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzStickyGooPropagationActor.SpawnSecondaryNiagaraComponent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* AGzStickyGooPropagationActor::SpawnSecondaryNiagaraComponent(const struct FVector& WorldLocation, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "SpawnSecondaryNiagaraComponent");

	Params::GzStickyGooPropagationActor_SpawnSecondaryNiagaraComponent Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzStickyGooPropagationActor.UpdateVFX
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                Instance                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleProgress                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxRadius                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStickyGooPropagationActor::UpdateVFX(const float DeltaSeconds, class UNiagaraComponent* Instance, const float ScaleProgress, const float MaxRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooPropagationActor", "UpdateVFX");

	Params::GzStickyGooPropagationActor_UpdateVFX Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Instance = Instance;
	Parms.ScaleProgress = ScaleProgress;
	Parms.MaxRadius = MaxRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBTService_MirrorLimbMove.CheckIsFalling
// (Final, Native, Private)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBTService_MirrorLimbMove::CheckIsFalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTService_MirrorLimbMove", "CheckIsFalling");

	Params::GzBTService_MirrorLimbMove_CheckIsFalling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBTService_MirrorLimbMove.StartMove
// (Final, Native, Private)

void UGzBTService_MirrorLimbMove::StartMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTService_MirrorLimbMove", "StartMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBTService_MirrorLimbMove.StopMovement
// (Final, Native, Private)

void UGzBTService_MirrorLimbMove::StopMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTService_MirrorLimbMove", "StopMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBTService_MirrorLimbMove.CheckIsNeedStop
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBTService_MirrorLimbMove::CheckIsNeedStop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBTService_MirrorLimbMove", "CheckIsNeedStop");

	Params::GzBTService_MirrorLimbMove_CheckIsNeedStop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestCommandUseLimb.OnLimbActivated
// (Native, Protected)

void UGzAutotestCommandUseLimb::OnLimbActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestCommandUseLimb", "OnLimbActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLootSpawnerComponent.SpawnLoot
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzSpawnContentsParameters       SpawnContentParameters                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzLootSpawnerComponent::SpawnLoot(const struct FGzSpawnContentsParameters& SpawnContentParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootSpawnerComponent", "SpawnLoot");

	Params::GzLootSpawnerComponent_SpawnLoot Parms{};

	Parms.SpawnContentParameters = std::move(SpawnContentParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInitialShrinkingZoneSetup.GetCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzCircle2D                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzCircle2D AGzInitialShrinkingZoneSetup::GetCircle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInitialShrinkingZoneSetup", "GetCircle");

	Params::GzInitialShrinkingZoneSetup_GetCircle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInitialShrinkingZoneSetup.GetRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzInitialShrinkingZoneSetup::GetRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInitialShrinkingZoneSetup", "GetRadius");

	Params::GzInitialShrinkingZoneSetup_GetRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInitialShrinkingZoneSetup.GetSpawnHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzInitialShrinkingZoneSetup::GetSpawnHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInitialShrinkingZoneSetup", "GetSpawnHeight");

	Params::GzInitialShrinkingZoneSetup_GetSpawnHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInitialShrinkingZoneSetup.GetZoneTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag AGzInitialShrinkingZoneSetup::GetZoneTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInitialShrinkingZoneSetup", "GetZoneTag");

	Params::GzInitialShrinkingZoneSetup_GetZoneTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestStateCheckerAbilitySystem.RetargetCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     NewTargetCharacter                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestStateCheckerAbilitySystem::RetargetCharacter(class AGzCharacter* NewTargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestStateCheckerAbilitySystem", "RetargetCharacter");

	Params::GzAutotestStateCheckerAbilitySystem_RetargetCharacter Parms{};

	Parms.NewTargetCharacter = NewTargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.AddInteractableHighlightState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzInteractableHighlightState           State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDepthStencilValue                      InHighlightStateStencilValue                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractableComponent::AddInteractableHighlightState(EGzInteractableHighlightState State, EDepthStencilValue InHighlightStateStencilValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "AddInteractableHighlightState");

	Params::GzInteractableComponent_AddInteractableHighlightState Parms{};

	Parms.State = State;
	Parms.InHighlightStateStencilValue = InHighlightStateStencilValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.AddInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDefaultInteractionBehavior*      Interaction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractableComponent::AddInteraction(class UDefaultInteractionBehavior* Interaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "AddInteraction");

	Params::GzInteractableComponent_AddInteraction Parms{};

	Parms.Interaction = Interaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.BroadcastFocusedObjectForced
// (Final, Native, Public, BlueprintCallable)

void UGzInteractableComponent::BroadcastFocusedObjectForced()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "BroadcastFocusedObjectForced");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.RemoveInteractableHighlightState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzInteractableHighlightState           State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractableComponent::RemoveInteractableHighlightState(EGzInteractableHighlightState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "RemoveInteractableHighlightState");

	Params::GzInteractableComponent_RemoveInteractableHighlightState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.SetInteractionAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewInteractionAllowed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractableComponent::SetInteractionAllowed(bool bNewInteractionAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "SetInteractionAllowed");

	Params::GzInteractableComponent_SetInteractionAllowed Parms{};

	Parms.bNewInteractionAllowed = bNewInteractionAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.ShiftToNextInteractionInterval
// (Final, Native, Protected)
// Parameters:
// class AGzCharacter*                     InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractableComponent::ShiftToNextInteractionInterval(class AGzCharacter* InteractedBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "ShiftToNextInteractionInterval");

	Params::GzInteractableComponent_ShiftToNextInteractionInterval Parms{};

	Parms.InteractedBy = InteractedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.FindInteractionDataByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInteractionData               OutInteractionData                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractableComponent::FindInteractionDataByTag(const struct FGameplayTag& Tag, struct FGzInteractionData* OutInteractionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "FindInteractionDataByTag");

	Params::GzInteractableComponent_FindInteractionDataByTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInteractionData != nullptr)
		*OutInteractionData = std::move(Parms.OutInteractionData);

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.GetCurrentMontagePlayLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInteractableComponent::GetCurrentMontagePlayLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "GetCurrentMontagePlayLength");

	Params::GzInteractableComponent_GetCurrentMontagePlayLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.GetInteractionDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInteractableComponent::GetInteractionDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "GetInteractionDuration");

	Params::GzInteractableComponent_GetInteractionDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.GetLastSavedInteractionProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInteractableComponent::GetLastSavedInteractionProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "GetLastSavedInteractionProgress");

	Params::GzInteractableComponent_GetLastSavedInteractionProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.GetResetProgressBarOnRelease
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractableComponent::GetResetProgressBarOnRelease() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "GetResetProgressBarOnRelease");

	Params::GzInteractableComponent_GetResetProgressBarOnRelease Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.HasDefaultInteractionSetup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractableComponent::HasDefaultInteractionSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "HasDefaultInteractionSetup");

	Params::GzInteractableComponent_HasDefaultInteractionSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.IsInteractionCapturedBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InteractedBy                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractableComponent::IsInteractionCapturedBy(const class AActor* InteractedBy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "IsInteractionCapturedBy");

	Params::GzInteractableComponent_IsInteractionCapturedBy Parms{};

	Parms.InteractedBy = InteractedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInteractableComponent.OnRep_InteractionOwners
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class AActor*>                   OldInteractionOwners                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzInteractableComponent::OnRep_InteractionOwners(const TArray<class AActor*>& OldInteractionOwners) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "OnRep_InteractionOwners");

	Params::GzInteractableComponent_OnRep_InteractionOwners Parms{};

	Parms.OldInteractionOwners = std::move(OldInteractionOwners);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractableComponent.TryGetCurrentInteractionData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInteractionData               OutInteractionData                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInteractableComponent::TryGetCurrentInteractionData(struct FGzInteractionData* OutInteractionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractableComponent", "TryGetCurrentInteractionData");

	Params::GzInteractableComponent_TryGetCurrentInteractionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInteractionData != nullptr)
		*OutInteractionData = std::move(Parms.OutInteractionData);

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.AddAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENPCTeamAttitude                        TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::AddAttitudeTeam(ENPCTeamAttitude TeamAttitude, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "AddAttitudeTeam");

	Params::GzNPCTeam_AddAttitudeTeam Parms{};

	Parms.TeamAttitude = TeamAttitude;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.AddFriendlyTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::AddFriendlyTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "AddFriendlyTeam");

	Params::GzNPCTeam_AddFriendlyTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.AddHostileTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::AddHostileTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "AddHostileTeam");

	Params::GzNPCTeam_AddHostileTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.AddNeutralTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::AddNeutralTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "AddNeutralTeam");

	Params::GzNPCTeam_AddNeutralTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.AddNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzAIInfo*                        NPCAIInfo                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::AddNPC(class AGzAIInfo* NPCAIInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "AddNPC");

	Params::GzNPCTeam_AddNPC Parms{};

	Parms.NPCAIInfo = NPCAIInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.OnRep_NPCTeamAttitudes
// (Final, Native, Private)

void AGzNPCTeam::OnRep_NPCTeamAttitudes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "OnRep_NPCTeamAttitudes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.RemoveAllAttitude
// (Final, Native, Public, BlueprintCallable)

void AGzNPCTeam::RemoveAllAttitude()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "RemoveAllAttitude");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.RemoveAttitudeTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::RemoveAttitudeTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "RemoveAttitudeTeam");

	Params::GzNPCTeam_RemoveAttitudeTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.RemoveNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzAIInfo*                        NPCAIInfo                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::RemoveNPC(class AGzAIInfo* NPCAIInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "RemoveNPC");

	Params::GzNPCTeam_RemoveNPC Parms{};

	Parms.NPCAIInfo = NPCAIInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.SetDefaultTeamAttitude
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENPCTeamAttitude                        InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::SetDefaultTeamAttitude(ENPCTeamAttitude InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "SetDefaultTeamAttitude");

	Params::GzNPCTeam_SetDefaultTeamAttitude Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.SetTeamName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InTeamName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCTeam::SetTeamName(const class FString& InTeamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "SetTeamName");

	Params::GzNPCTeam_SetTeamName Parms{};

	Parms.InTeamName = std::move(InTeamName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCTeam.GetDefaultTeamAttitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCTeamAttitude                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENPCTeamAttitude AGzNPCTeam::GetDefaultTeamAttitude() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetDefaultTeamAttitude");

	Params::GzNPCTeam_GetDefaultTeamAttitude Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.GetFriendsTeamsIds
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           TeamsIdsRef                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGzNPCTeam::GetFriendsTeamsIds(TArray<int32>* TeamsIdsRef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetFriendsTeamsIds");

	Params::GzNPCTeam_GetFriendsTeamsIds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TeamsIdsRef != nullptr)
		*TeamsIdsRef = std::move(Parms.TeamsIdsRef);
}


// Function G01.GzNPCTeam.GetNPCTeamAttitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENPCTeamAttitude                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENPCTeamAttitude AGzNPCTeam::GetNPCTeamAttitude(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetNPCTeamAttitude");

	Params::GzNPCTeam_GetNPCTeamAttitude Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.GetTeamAttitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude AGzNPCTeam::GetTeamAttitude(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetTeamAttitude");

	Params::GzNPCTeam_GetTeamAttitude Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzNPCTeam::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetTeamId");

	Params::GzNPCTeam_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.GetTeamName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzNPCTeam::GetTeamName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "GetTeamName");

	Params::GzNPCTeam_GetTeamName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCTeam::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "IsEmpty");

	Params::GzNPCTeam_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.IsFriendlyTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCTeam::IsFriendlyTeam(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "IsFriendlyTeam");

	Params::GzNPCTeam_IsFriendlyTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.IsHostileTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCTeam::IsHostileTeam(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "IsHostileTeam");

	Params::GzNPCTeam_IsHostileTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCTeam.IsNeutralTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCTeam::IsNeutralTeam(int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCTeam", "IsNeutralTeam");

	Params::GzNPCTeam_IsNeutralTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutotestStateCheckerCustom.SetCondtionState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EGzCustomCheckingState                  CheckingState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzAutotestStateCheckerCustom::SetCondtionState(EGzCustomCheckingState CheckingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutotestStateCheckerCustom", "SetCondtionState");

	Params::GzAutotestStateCheckerCustom_SetCondtionState Parms{};

	Parms.CheckingState = CheckingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeamSubsystem.CanChangeTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerState*                   Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewTeamId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeamSubsystem::CanChangeTeam(const class AGzPlayerState* Player, const int32 NewTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "CanChangeTeam");

	Params::GzTeamSubsystem_CanChangeTeam Parms{};

	Parms.Player = Player;
	Parms.NewTeamId = NewTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.GetMaxTeamCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeamSubsystem::GetMaxTeamCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "GetMaxTeamCapacity");

	Params::GzTeamSubsystem_GetMaxTeamCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.GetMaxTeamCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeamSubsystem::GetMaxTeamCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "GetMaxTeamCount");

	Params::GzTeamSubsystem_GetMaxTeamCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* AGzTeamSubsystem::GetTeam(const int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "GetTeam");

	Params::GzTeamSubsystem_GetTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.GetTeams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGzTeam*>            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzTeam*> AGzTeamSubsystem::GetTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "GetTeams");

	Params::GzTeamSubsystem_GetTeams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.GetTeamsCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeamSubsystem::GetTeamsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "GetTeamsCount");

	Params::GzTeamSubsystem_GetTeamsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeamSubsystem.IsTeamExist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeamSubsystem::IsTeamExist(const int32 TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeamSubsystem", "IsTeamExist");

	Params::GzTeamSubsystem_IsTeamExist Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTargetType.GetTargets
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AGzCharacter*                     TargetingCharacter                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetingActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEventData               EventData                                              (Parm, NativeAccessSpecifierPublic)
// TArray<struct FGameplayAbilityTargetDataHandle>OutTargetData                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               OutHitResults                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzTargetType::GetTargets(class AGzCharacter* TargetingCharacter, class AActor* TargetingActor, const struct FGameplayEventData& EventData, TArray<struct FGameplayAbilityTargetDataHandle>* OutTargetData, TArray<struct FHitResult>* OutHitResults, TArray<class AActor*>* OutActors) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTargetType", "GetTargets");

	Params::GzTargetType_GetTargets Parms{};

	Parms.TargetingCharacter = TargetingCharacter;
	Parms.TargetingActor = TargetingActor;
	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetData != nullptr)
		*OutTargetData = std::move(Parms.OutTargetData);

	if (OutHitResults != nullptr)
		*OutHitResults = std::move(Parms.OutHitResults);

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);
}


// Function G01.GzTrackTransport.EnableSplineAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTrackTransport::EnableSplineAlignment(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "EnableSplineAlignment");

	Params::GzTrackTransport_EnableSplineAlignment Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.OnRep_CurrentDistance
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzTrackDistance                 OldDistance                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzTrackTransport::OnRep_CurrentDistance(const struct FGzTrackDistance& OldDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "OnRep_CurrentDistance");

	Params::GzTrackTransport_OnRep_CurrentDistance Parms{};

	Parms.OldDistance = std::move(OldDistance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.OnRep_TargetDistance
// (Final, Native, Private)

void AGzTrackTransport::OnRep_TargetDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "OnRep_TargetDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.OnRep_Track
// (Native, Protected)
// Parameters:
// class AGzTrack*                         OldTrack                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTrackTransport::OnRep_Track(class AGzTrack* OldTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "OnRep_Track");

	Params::GzTrackTransport_OnRep_Track Parms{};

	Parms.OldTrack = OldTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.ReceiveMovementEnd
// (Event, Protected, BlueprintEvent)

void AGzTrackTransport::ReceiveMovementEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "ReceiveMovementEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzTrackTransport.ReceiveMovementStart
// (Event, Protected, BlueprintEvent)

void AGzTrackTransport::ReceiveMovementStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "ReceiveMovementStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzTrackTransport.SetMaxSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxSpeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTrackTransport::SetMaxSpeed(float InMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "SetMaxSpeed");

	Params::GzTrackTransport_SetMaxSpeed Parms{};

	Parms.InMaxSpeed = InMaxSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.StopMoving
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StopDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTrackTransport::StopMoving(float StopDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "StopMoving");

	Params::GzTrackTransport_StopMoving Parms{};

	Parms.StopDistance = StopDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackTransport.GetCurrentSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzTrackTransport::GetCurrentSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "GetCurrentSpeed");

	Params::GzTrackTransport_GetCurrentSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrackTransport.GetDistanceAlongSpline
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrackTransport::GetDistanceAlongSpline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "GetDistanceAlongSpline");

	Params::GzTrackTransport_GetDistanceAlongSpline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrackTransport.GetDistanceAlongTrack
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrackTransport::GetDistanceAlongTrack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "GetDistanceAlongTrack");

	Params::GzTrackTransport_GetDistanceAlongTrack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrackTransport.GetTargetSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzTrackTransport::GetTargetSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "GetTargetSpeed");

	Params::GzTrackTransport_GetTargetSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrackTransport.GetTurnInclineRoll
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzTrackTransport::GetTurnInclineRoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "GetTurnInclineRoll");

	Params::GzTrackTransport_GetTurnInclineRoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrackTransport.HasReachedTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTrackTransport::HasReachedTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackTransport", "HasReachedTarget");

	Params::GzTrackTransport_HasReachedTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutoTrackTransport.ContinueAutoMovement
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzAutoTrackTransport::ContinueAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "ContinueAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutoTrackTransport.MoveToNextStop
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzAutoTrackTransport::MoveToNextStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "MoveToNextStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutoTrackTransport.OnRep_StopIndex
// (Final, Native, Private)

void AGzAutoTrackTransport::OnRep_StopIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "OnRep_StopIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzAutoTrackTransport.ReceiveManualStop
// (Event, Public, BlueprintEvent)

void AGzAutoTrackTransport::ReceiveManualStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "ReceiveManualStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzAutoTrackTransport.ReceiveWaitOnStop
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzAutoTrackTransport::ReceiveWaitOnStop(int32 Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "ReceiveWaitOnStop");

	Params::GzAutoTrackTransport_ReceiveWaitOnStop Parms{};

	Parms.Stop = Stop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzAutoTrackTransport.GetArrivalTimeToNextStop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzAutoTrackTransport::GetArrivalTimeToNextStop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "GetArrivalTimeToNextStop");

	Params::GzAutoTrackTransport_GetArrivalTimeToNextStop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutoTrackTransport.GetArrivalTimeToStop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InStopIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzAutoTrackTransport::GetArrivalTimeToStop(int32 InStopIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "GetArrivalTimeToStop");

	Params::GzAutoTrackTransport_GetArrivalTimeToStop Parms{};

	Parms.InStopIndex = InStopIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAutoTrackTransport.GetDistanceToNextStop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzAutoTrackTransport::GetDistanceToNextStop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzAutoTrackTransport", "GetDistanceToNextStop");

	Params::GzAutoTrackTransport_GetDistanceToNextStop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.Gz_BTService_MentalStateSelection.ChooseAndSetTarget
// (Final, Native, Public, Const)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz_BTService_MentalStateSelection::ChooseAndSetTarget(float DeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "ChooseAndSetTarget");

	Params::Gz_BTService_MentalStateSelection_ChooseAndSetTarget Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.GetBlackboardComponent
// (Final, Native, Public, Const)
// Parameters:
// class UBlackboardComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* UGz_BTService_MentalStateSelection::GetBlackboardComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "GetBlackboardComponent");

	Params::Gz_BTService_MentalStateSelection_GetBlackboardComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.Gz_BTService_MentalStateSelection.GetGzAIController
// (Final, Native, Public, Const)
// Parameters:
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGz_BTService_MentalStateSelection::GetGzAIController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "GetGzAIController");

	Params::Gz_BTService_MentalStateSelection_GetGzAIController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.Gz_BTService_MentalStateSelection.MakeAlerted
// (Final, Native, Public, Const)

void UGz_BTService_MentalStateSelection::MakeAlerted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "MakeAlerted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.MakeCombat
// (Final, Native, Public, Const)

void UGz_BTService_MentalStateSelection::MakeCombat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "MakeCombat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.MakeFree
// (Final, Native, Public, Const)

void UGz_BTService_MentalStateSelection::MakeFree() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "MakeFree");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.SetMentalState
// (Final, Native, Public, Const)
// Parameters:
// EGzMentalState                          GzMentalState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz_BTService_MentalStateSelection::SetMentalState(EGzMentalState GzMentalState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "SetMentalState");

	Params::Gz_BTService_MentalStateSelection_SetMentalState Parms{};

	Parms.GzMentalState = GzMentalState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.SetStimulusLocation
// (Final, Native, Private, HasOutParams, HasDefaults, Const)
// Parameters:
// struct FVector                          StimulusLocationRef                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz_BTService_MentalStateSelection::SetStimulusLocation(const struct FVector& StimulusLocationRef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "SetStimulusLocation");

	Params::Gz_BTService_MentalStateSelection_SetStimulusLocation Parms{};

	Parms.StimulusLocationRef = std::move(StimulusLocationRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.SetTargetEnemy
// (Final, Native, Private, Const)
// Parameters:
// class AActor*                           TargetEnemyPtr                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz_BTService_MentalStateSelection::SetTargetEnemy(class AActor* TargetEnemyPtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "SetTargetEnemy");

	Params::Gz_BTService_MentalStateSelection_SetTargetEnemy Parms{};

	Parms.TargetEnemyPtr = TargetEnemyPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_MentalStateSelection.SetTargetVisible
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGz_BTService_MentalStateSelection::SetTargetVisible(bool bVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_MentalStateSelection", "SetTargetVisible");

	Params::Gz_BTService_MentalStateSelection_SetTargetVisible Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzKillLogEntryWidget.SetActionInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             ActionText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzAdvancedIdType                InVictimId                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzKillLogEntryWidget::SetActionInfo(const class FText& ActionText, const struct FGzAdvancedIdType& InVictimId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzKillLogEntryWidget", "SetActionInfo");

	Params::GzKillLogEntryWidget_SetActionInfo Parms{};

	Parms.ActionText = std::move(ActionText);
	Parms.InVictimId = std::move(InVictimId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzKillLogEntryWidget.GetVictimId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzAdvancedIdType          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGzAdvancedIdType UGzKillLogEntryWidget::GetVictimId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzKillLogEntryWidget", "GetVictimId");

	Params::GzKillLogEntryWidget_GetVictimId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_WeaponReload.OnMontageEnded
// (Final, Native, Protected)

void UGzGA_WeaponReload::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponReload", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WeaponReload.OnMontageInterrupted
// (Final, Native, Protected)

void UGzGA_WeaponReload::OnMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponReload", "OnMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WeaponReload.OnReloadEvent
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_WeaponReload::OnReloadEvent(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponReload", "OnReloadEvent");

	Params::GzGA_WeaponReload_OnReloadEvent Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleLookUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleLookUp(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleLookUp");

	Params::GzCharacterControlsComponent_HandleLookUp Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleMoveForward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleMoveForward(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleMoveForward");

	Params::GzCharacterControlsComponent_HandleMoveForward Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleMoveRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleMoveRight(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleMoveRight");

	Params::GzCharacterControlsComponent_HandleMoveRight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleTurn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleTurn(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleTurn");

	Params::GzCharacterControlsComponent_HandleTurn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleWingsuitMovementPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ForwardAxisValue                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightAxisValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleWingsuitMovementPitch(const float ForwardAxisValue, const float RightAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleWingsuitMovementPitch");

	Params::GzCharacterControlsComponent_HandleWingsuitMovementPitch Parms{};

	Parms.ForwardAxisValue = ForwardAxisValue;
	Parms.RightAxisValue = RightAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.HandleWingsuitMovementYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ForwardAxisValue                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightAxisValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::HandleWingsuitMovementYaw(const float ForwardAxisValue, const float RightAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "HandleWingsuitMovementYaw");

	Params::GzCharacterControlsComponent_HandleWingsuitMovementYaw Parms{};

	Parms.ForwardAxisValue = ForwardAxisValue;
	Parms.RightAxisValue = RightAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterControlsComponent.SetMovementEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterControlsComponent::SetMovementEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterControlsComponent", "SetMovementEnabled");

	Params::GzCharacterControlsComponent_SetMovementEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationAchievement
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationAchievement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationAchievement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationBattlePassLevelUp
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationBattlePassLevelUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationBattlePassLevelUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationChallenge
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationChallenge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationChallenge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationMarketLotBought
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationMarketLotBought() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationMarketLotBought");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationMarketLotExpired
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationMarketLotExpired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationMarketLotExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationMarketLotSold
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationMarketLotSold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationMarketLotSold");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationMint
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationMint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationMint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.PostMetaNotificationPlayerLevelUp
// (Final, Exec, Native, Public, Const)

void UGzNotificationsCheatExtension::PostMetaNotificationPlayerLevelUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "PostMetaNotificationPlayerLevelUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationsCheatExtension.SimulateLotSoldNotification
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           ItemGuid                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNotificationsCheatExtension::SimulateLotSoldNotification(const class FString& ItemGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationsCheatExtension", "SimulateLotSoldNotification");

	Params::GzNotificationsCheatExtension_SimulateLotSoldNotification Parms{};

	Parms.ItemGuid = std::move(ItemGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayTagHandler.OnTagCountChanged
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UGzAbilitySystemComponent*        Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayTagHandler::OnTagCountChanged(class UGzAbilitySystemComponent* Target, const struct FGameplayTag& Tag, int32 Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayTagHandler", "OnTagCountChanged");

	Params::GzGameplayTagHandler_OnTagCountChanged Parms{};

	Parms.Target = Target;
	Parms.Tag = std::move(Tag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.ApplyCurrentProfile
// (Final, Native, Protected)

void UGzCharacterCustomizationComponent::ApplyCurrentProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "ApplyCurrentProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.ApplyCustomizationItem
// (Final, Native, Protected)
// Parameters:
// struct FGzCharacterCustomizationItem    CustomizationItem                                      (Parm, NativeAccessSpecifierPublic)
// bool                                    bDefaultProfile                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationComponent::ApplyCustomizationItem(const struct FGzCharacterCustomizationItem& CustomizationItem, const bool bDefaultProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "ApplyCustomizationItem");

	Params::GzCharacterCustomizationComponent_ApplyCustomizationItem Parms{};

	Parms.CustomizationItem = std::move(CustomizationItem);
	Parms.bDefaultProfile = bDefaultProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.ApplyCustomizationServer
// (Final, Native, Protected)

void UGzCharacterCustomizationComponent::ApplyCustomizationServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "ApplyCustomizationServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.OnCharacterLimbChanged
// (Final, Native, Protected)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationComponent::OnCharacterLimbChanged(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "OnCharacterLimbChanged");

	Params::GzCharacterCustomizationComponent_OnCharacterLimbChanged Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.OnHasDefaultLegsTagChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     DefaultLegsPresentTag                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationComponent::OnHasDefaultLegsTagChanged(const struct FGameplayTag& DefaultLegsPresentTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "OnHasDefaultLegsTagChanged");

	Params::GzCharacterCustomizationComponent_OnHasDefaultLegsTagChanged Parms{};

	Parms.DefaultLegsPresentTag = std::move(DefaultLegsPresentTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.OnHasInitialLegsTagChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     InitialLegsPresentTag                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationComponent::OnHasInitialLegsTagChanged(const struct FGameplayTag& InitialLegsPresentTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "OnHasInitialLegsTagChanged");

	Params::GzCharacterCustomizationComponent_OnHasInitialLegsTagChanged Parms{};

	Parms.InitialLegsPresentTag = std::move(InitialLegsPresentTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.SetNewCustomizationProfile
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzCharacterCustomizationProfile NewProfile                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzCharacterCustomizationComponent::SetNewCustomizationProfile(const struct FGzCharacterCustomizationProfile& NewProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "SetNewCustomizationProfile");

	Params::GzCharacterCustomizationComponent_SetNewCustomizationProfile Parms{};

	Parms.NewProfile = std::move(NewProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterCustomizationComponent.GetCurrentCharacterCustomizationProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCharacterCustomizationProfileReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzCharacterCustomizationProfile UGzCharacterCustomizationComponent::GetCurrentCharacterCustomizationProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationComponent", "GetCurrentCharacterCustomizationProfile");

	Params::GzCharacterCustomizationComponent_GetCurrentCharacterCustomizationProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCIT_Emote.GetEmoteId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzCIT_Emote::GetEmoteId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCIT_Emote", "GetEmoteId");

	Params::GzCIT_Emote_GetEmoteId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCIT_Emote.GetEmoteMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGzCIT_Emote::GetEmoteMontage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCIT_Emote", "GetEmoteMontage");

	Params::GzCIT_Emote_GetEmoteMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCIT_Emote.GetEmoteName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzCIT_Emote::GetEmoteName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCIT_Emote", "GetEmoteName");

	Params::GzCIT_Emote_GetEmoteName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCIT_Emote.GetEmoteTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGzCIT_Emote::GetEmoteTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCIT_Emote", "GetEmoteTexture");

	Params::GzCIT_Emote_GetEmoteTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpawnZone.Activate
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzSpawnZone::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnZone", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpawnZone.Deactivate
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzSpawnZone::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnZone", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpawnZone.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSpawnZone::OnEndOverlap(class UPrimitiveComponent* Component, class AActor* Actor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnZone", "OnEndOverlap");

	Params::GzSpawnZone_OnEndOverlap Parms{};

	Parms.Component = Component;
	Parms.Actor = Actor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpawnZone.GetSpawnHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzSpawnZone::GetSpawnHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnZone", "GetSpawnHeight");

	Params::GzSpawnZone_GetSpawnHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpawnZone.GetSpawnRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzSpawnZone::GetSpawnRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpawnZone", "GetSpawnRadius");

	Params::GzSpawnZone_GetSpawnRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBackendPlayerDataHelper.GetPlayerAvatar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTexture2D*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTexture2D* UGzBackendPlayerDataHelper::GetPlayerAvatar(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBackendPlayerDataHelper", "GetPlayerAvatar");

	Params::GzBackendPlayerDataHelper_GetPlayerAvatar Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBackendPlayerDataHelper.GetPlayerClanTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBackendPlayerDataHelper::GetPlayerClanTag(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBackendPlayerDataHelper", "GetPlayerClanTag");

	Params::GzBackendPlayerDataHelper_GetPlayerClanTag Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBackendPlayerDataHelper.GetPlayerProgression
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzLevelProgression        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzLevelProgression UGzBackendPlayerDataHelper::GetPlayerProgression(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBackendPlayerDataHelper", "GetPlayerProgression");

	Params::GzBackendPlayerDataHelper_GetPlayerProgression Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBackendPlayerDataHelper.HasPlayerValidSubscription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBackendPlayerDataHelper::HasPlayerValidSubscription(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBackendPlayerDataHelper", "HasPlayerValidSubscription");

	Params::GzBackendPlayerDataHelper_HasPlayerValidSubscription Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzBackendSubsystem.OnCallLoadout__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           InitiatorObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CharacterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBackendSubsystem::OnCallLoadout__DelegateSignature(class AActor* InitiatorObject, const class FString& PlayFabId, const class FString& CharacterId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBackendSubsystem", "OnCallLoadout__DelegateSignature");

	Params::GzBackendSubsystem_OnCallLoadout__DelegateSignature Parms{};

	Parms.InitiatorObject = InitiatorObject;
	Parms.PlayFabId = std::move(PlayFabId);
	Parms.CharacterId = std::move(CharacterId);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzBackendSubsystem.OnCallSaveLoadout__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CharacterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBackendSubsystem::OnCallSaveLoadout__DelegateSignature(const class FString& PlayFabId, const class FString& CharacterId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBackendSubsystem", "OnCallSaveLoadout__DelegateSignature");

	Params::GzBackendSubsystem_OnCallSaveLoadout__DelegateSignature Parms{};

	Parms.PlayFabId = std::move(PlayFabId);
	Parms.CharacterId = std::move(CharacterId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBackendSubsystem.SpawnLootChest
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           InitiatorObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInventoryItemContent>  LootList                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzBackendSubsystem::SpawnLootChest(class AActor* InitiatorObject, const TArray<struct FGzInventoryItemContent>& LootList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBackendSubsystem", "SpawnLootChest");

	Params::GzBackendSubsystem_SpawnLootChest Parms{};

	Parms.InitiatorObject = InitiatorObject;
	Parms.LootList = std::move(LootList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBackpackItemData.GetBackpackPocketDefsCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzBackpackItemData::GetBackpackPocketDefsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBackpackItemData", "GetBackpackPocketDefsCount");

	Params::GzBackpackItemData_GetBackpackPocketDefsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBackpackItemData.GetPocketCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzBackpackItemData::GetPocketCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBackpackItemData", "GetPocketCount");

	Params::GzBackpackItemData_GetPocketCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Wingsuit.CanActivateJetpack
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Wingsuit::CanActivateJetpack(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGA_Wingsuit", "CanActivateJetpack");

	Params::GzGA_Wingsuit_CanActivateJetpack Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Wingsuit.IsJetpackActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Wingsuit::IsJetpackActive(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGA_Wingsuit", "IsJetpackActive");

	Params::GzGA_Wingsuit_IsJetpackActive Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Wingsuit.BP_DeactivateJetpack
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Wingsuit::BP_DeactivateJetpack(const bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "BP_DeactivateJetpack");

	Params::GzGA_Wingsuit_BP_DeactivateJetpack Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_Wingsuit.OnHitReactionInJetpackTagChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     HitReactionInJetpackTag                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Wingsuit::OnHitReactionInJetpackTagChanged(const struct FGameplayTag& HitReactionInJetpackTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "OnHitReactionInJetpackTagChanged");

	Params::GzGA_Wingsuit_OnHitReactionInJetpackTagChanged Parms{};

	Parms.HitReactionInJetpackTag = std::move(HitReactionInJetpackTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Wingsuit.OnMontageEnded
// (Final, Native, Private)

void UGzGA_Wingsuit::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Wingsuit.OnMontageNotify
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Wingsuit::OnMontageNotify(const class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "OnMontageNotify");

	Params::GzGA_Wingsuit_OnMontageNotify Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Wingsuit.OnMovementModeChangeWingsuit
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Wingsuit::OnMovementModeChangeWingsuit(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "OnMovementModeChangeWingsuit");

	Params::GzGA_Wingsuit_OnMovementModeChangeWingsuit Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Wingsuit.IsDamaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Wingsuit::IsDamaged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "IsDamaged");

	Params::GzGA_Wingsuit_IsDamaged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Wingsuit.IsStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Wingsuit::IsStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Wingsuit", "IsStarted");

	Params::GzGA_Wingsuit_IsStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterAkComponent.OnLocalPlayerInitialized
// (Final, Native, Private)
// Parameters:
// class AGzPlayerController*              Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterAkComponent::OnLocalPlayerInitialized(class AGzPlayerController* Controller, class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterAkComponent", "OnLocalPlayerInitialized");

	Params::GzCharacterAkComponent_OnLocalPlayerInitialized Parms{};

	Parms.Controller = Controller;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterAkComponent.OnPlayerStateReplicated
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterAkComponent::OnPlayerStateReplicated(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterAkComponent", "OnPlayerStateReplicated");

	Params::GzCharacterAkComponent_OnPlayerStateReplicated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterAkComponent.OnTeamChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterAkComponent::OnTeamChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterAkComponent", "OnTeamChanged");

	Params::GzCharacterAkComponent_OnTeamChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMetaSubsystem.DestroyMetaCharacter
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMetaSubsystem::DestroyMetaCharacter(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMetaSubsystem", "DestroyMetaCharacter");

	Params::GzCharacterMetaSubsystem_DestroyMetaCharacter Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCameraLocationObject.HidePlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGzPlayerCharacter*               Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCameraLocationObject::HidePlayer(class AGzPlayerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCameraLocationObject", "HidePlayer");

	Params::GzCameraLocationObject_HidePlayer Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCameraLocationObject.ShowPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGzPlayerCharacter*               Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCameraLocationObject::ShowPlayer(class AGzPlayerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCameraLocationObject", "ShowPlayer");

	Params::GzCameraLocationObject_ShowPlayer Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBaseInventoryWidget.GetInventoryComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInvComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInvComponent* UGzBaseInventoryWidget::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseInventoryWidget", "GetInventoryComponent");

	Params::GzBaseInventoryWidget_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCloakComponent.OnBackpackChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzInvPocketChangeData           Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnBackpackChanged(const struct FGzInvPocketChangeData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnBackpackChanged");

	Params::GzCloakComponent_OnBackpackChanged Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnBlockingTagsAddedRemoved
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnBlockingTagsAddedRemoved(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnBlockingTagsAddedRemoved");

	Params::GzCloakComponent_OnBlockingTagsAddedRemoved Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnCharacterReceivedDamage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGameplayAttribute               Attribute                                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnCharacterReceivedDamage(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnCharacterReceivedDamage");

	Params::GzCloakComponent_OnCharacterReceivedDamage Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.NewValue = NewValue;
	Parms.OldValue = OldValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnInited
// (Event, Protected, BlueprintEvent)

void UGzCloakComponent::OnInited()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnInited");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCloakComponent.OnLimbChanged
// (Final, Native, Private)
// Parameters:
// EGzLimbType                             ChangedLimbType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnLimbChanged(EGzLimbType ChangedLimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnLimbChanged");

	Params::GzCloakComponent_OnLimbChanged Parms{};

	Parms.ChangedLimbType = ChangedLimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnPartiallyBlockingTagsAddedRemoved
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnPartiallyBlockingTagsAddedRemoved(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnPartiallyBlockingTagsAddedRemoved");

	Params::GzCloakComponent_OnPartiallyBlockingTagsAddedRemoved Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnRep_InitInfo
// (Final, Native, Private)

void UGzCloakComponent::OnRep_InitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnRep_InitInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnShoot
// (Final, Native, Private)

void UGzCloakComponent::OnShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnShoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloakComponent.OnWeaponeEquiped
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   InvPocketId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCloakComponent::OnWeaponeEquiped(const struct FGzInvPocketId& InvPocketId, const class AGzWeaponActor* WeaponActor, bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloakComponent", "OnWeaponeEquiped");

	Params::GzCloakComponent_OnWeaponeEquiped Parms{};

	Parms.InvPocketId = std::move(InvPocketId);
	Parms.WeaponActor = WeaponActor;
	Parms.bEquipped = bEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHideoutStatics.CurrentMapIsHideout
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzHideoutStatics::CurrentMapIsHideout(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "CurrentMapIsHideout");

	Params::GzHideoutStatics_CurrentMapIsHideout Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHideoutStatics.GetLoadoutServiceChecked
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzClientLoadoutService*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzClientLoadoutService* UGzHideoutStatics::GetLoadoutServiceChecked(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "GetLoadoutServiceChecked");

	Params::GzHideoutStatics_GetLoadoutServiceChecked Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHideoutStatics.GetSceneManager
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzSceneManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSceneManager* UGzHideoutStatics::GetSceneManager(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "GetSceneManager");

	Params::GzHideoutStatics_GetSceneManager Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHideoutStatics.GetSceneManagerChecked
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzSceneManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSceneManager* UGzHideoutStatics::GetSceneManagerChecked(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "GetSceneManagerChecked");

	Params::GzHideoutStatics_GetSceneManagerChecked Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHideoutStatics.GetScenePuppeteerChecked
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzScenePuppeteer*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzScenePuppeteer* UGzHideoutStatics::GetScenePuppeteerChecked(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "GetScenePuppeteerChecked");

	Params::GzHideoutStatics_GetScenePuppeteerChecked Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHideoutStatics.ResetCharacterRotation
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHideoutStatics::ResetCharacterRotation(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "ResetCharacterRotation");

	Params::GzHideoutStatics_ResetCharacterRotation Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHideoutStatics.RotateCharacter
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHideoutStatics::RotateCharacter(const class UObject* WorldContext, double Pitch, double Yaw, double Roll, double Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "RotateCharacter");

	Params::GzHideoutStatics_RotateCharacter Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;
	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHideoutStatics.RotateSpawnedWeapon
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHideoutStatics::RotateSpawnedWeapon(const class UObject* WorldContext, double Pitch, double Yaw, double Roll, double Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "RotateSpawnedWeapon");

	Params::GzHideoutStatics_RotateSpawnedWeapon Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;
	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHideoutStatics.ToggleCohtmlInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHideoutStatics::ToggleCohtmlInput(bool bEnable, const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzHideoutStatics", "ToggleCohtmlInput");

	Params::GzHideoutStatics_ToggleCohtmlInput Parms{};

	Parms.bEnable = bEnable;
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseTerminal.OnRep_Active
// (Final, Native, Private)

void AGzBaseTerminal::OnRep_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "OnRep_Active");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseTerminal.OnZoneSideSwitched
// (Final, Native, Private)
// Parameters:
// bool                                    bInOverloadZone                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBaseTerminal::OnZoneSideSwitched(bool bInOverloadZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "OnZoneSideSwitched");

	Params::GzBaseTerminal_OnZoneSideSwitched Parms{};

	Parms.bInOverloadZone = bInOverloadZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseTerminal.ReceiveActiveStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBaseTerminal::ReceiveActiveStateChanged(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "ReceiveActiveStateChanged");

	Params::GzBaseTerminal_ReceiveActiveStateChanged Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBaseTerminal.ReceiveZoneOverloadSwitched
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInOverloadZone                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBaseTerminal::ReceiveZoneOverloadSwitched(bool bInOverloadZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "ReceiveZoneOverloadSwitched");

	Params::GzBaseTerminal_ReceiveZoneOverloadSwitched Parms{};

	Parms.bInOverloadZone = bInOverloadZone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBaseTerminal.SetIsActive
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBaseTerminal::SetIsActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "SetIsActive");

	Params::GzBaseTerminal_SetIsActive Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseTerminal.UpdateMarkerActiveState
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void AGzBaseTerminal::UpdateMarkerActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "UpdateMarkerActiveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBaseTerminal.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBaseTerminal::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "IsActive");

	Params::GzBaseTerminal_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBaseTerminal.IsInsideOverloadZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBaseTerminal::IsInsideOverloadZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBaseTerminal", "IsInsideOverloadZone");

	Params::GzBaseTerminal_IsInsideOverloadZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTagSwitcherHorizontal.InitializedTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InParentWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetTagSettings                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzTagVisibilitySettings         InTagSettings                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGzTagSwitcherHorizontal::InitializedTag(class UUserWidget* InParentWidget, const bool bResetTagSettings, const struct FGzTagVisibilitySettings& InTagSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTagSwitcherHorizontal", "InitializedTag");

	Params::GzTagSwitcherHorizontal_InitializedTag Parms{};

	Parms.InParentWidget = InParentWidget;
	Parms.bResetTagSettings = bResetTagSettings;
	Parms.InTagSettings = std::move(InTagSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTagSwitcherHorizontal.SetTagVisibility
// (Final, Native, Private)
// Parameters:
// EGzTargetUITagsState                    TagsState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTagSwitcherHorizontal::SetTagVisibility(EGzTargetUITagsState TagsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTagSwitcherHorizontal", "SetTagVisibility");

	Params::GzTagSwitcherHorizontal_SetTagVisibility Parms{};

	Parms.TagsState = TagsState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPartyHelper.IsInParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPartyHelper::IsInParty(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPartyHelper", "IsInParty");

	Params::GzPartyHelper_IsInParty Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.CancelJetpack
// (Final, Native, Public, BlueprintCallable)

void UGzCharacterMovementComponent::CancelJetpack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "CancelJetpack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.GetGroundInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLyraCharacterGroundInfo   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FLyraCharacterGroundInfo UGzCharacterMovementComponent::GetGroundInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "GetGroundInfo");

	Params::GzCharacterMovementComponent_GetGroundInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.ResetRotationRateToDefault
// (Final, Native, Public, BlueprintCallable)

void UGzCharacterMovementComponent::ResetRotationRateToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "ResetRotationRateToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.SetCurrentDashParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzDashParamsData*                NewDashParamsData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::SetCurrentDashParams(const class UGzDashParamsData* NewDashParamsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "SetCurrentDashParams");

	Params::GzCharacterMovementComponent_SetCurrentDashParams Parms{};

	Parms.NewDashParamsData = NewDashParamsData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.SetCurrentHoverParams
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzHoverParams                   HoverParams                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::SetCurrentHoverParams(const struct FGzHoverParams& HoverParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "SetCurrentHoverParams");

	Params::GzCharacterMovementComponent_SetCurrentHoverParams Parms{};

	Parms.HoverParams = std::move(HoverParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.StartDashing
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::StartDashing(bool bClientSimulation, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "StartDashing");

	Params::GzCharacterMovementComponent_StartDashing Parms{};

	Parms.bClientSimulation = bClientSimulation;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.StartHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::StartHover(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "StartHover");

	Params::GzCharacterMovementComponent_StartHover Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.StopDashing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::StopDashing(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "StopDashing");

	Params::GzCharacterMovementComponent_StopDashing Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.StopHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCharacterMovementComponent::StopHover(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "StopHover");

	Params::GzCharacterMovementComponent_StopHover Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterMovementComponent.GetDashingDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzCharacterMovementComponent::GetDashingDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "GetDashingDirection");

	Params::GzCharacterMovementComponent_GetDashingDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.GetJumpZVelocity
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzCharacterMovementComponent::GetJumpZVelocity(float Height) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "GetJumpZVelocity");

	Params::GzCharacterMovementComponent_GetJumpZVelocity Parms{};

	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.GetMaxJumpTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZVelocity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzCharacterMovementComponent::GetMaxJumpTime(float Height, float ZVelocity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "GetMaxJumpTime");

	Params::GzCharacterMovementComponent_GetMaxJumpTime Parms{};

	Parms.Height = Height;
	Parms.ZVelocity = ZVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.HasAppliedRootMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzRootMotionSourceType                 RMSType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::HasAppliedRootMotion(EGzRootMotionSourceType RMSType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "HasAppliedRootMotion");

	Params::GzCharacterMovementComponent_HasAppliedRootMotion Parms{};

	Parms.RMSType = RMSType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.HasQueuedRootMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzRootMotionSourceType                 RMSType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::HasQueuedRootMotion(EGzRootMotionSourceType RMSType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "HasQueuedRootMotion");

	Params::GzCharacterMovementComponent_HasQueuedRootMotion Parms{};

	Parms.RMSType = RMSType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.IsDashing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::IsDashing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "IsDashing");

	Params::GzCharacterMovementComponent_IsDashing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.IsHovering
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::IsHovering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "IsHovering");

	Params::GzCharacterMovementComponent_IsHovering Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.IsInWingsuitLandingRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::IsInWingsuitLandingRoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "IsInWingsuitLandingRoll");

	Params::GzCharacterMovementComponent_IsInWingsuitLandingRoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterMovementComponent.IsWingsuit
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCharacterMovementComponent::IsWingsuit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterMovementComponent", "IsWingsuit");

	Params::GzCharacterMovementComponent_IsWingsuit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.BeginAimAction
// (Final, Native, Public, BlueprintCallable)

void UGzCombatComponent::BeginAimAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "BeginAimAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.ClientSetHostOverheatChanged
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bOverheated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ClientSetHostOverheatChanged(bool bOverheated, const struct FGzInvPocketId& PocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ClientSetHostOverheatChanged");

	Params::GzCombatComponent_ClientSetHostOverheatChanged Parms{};

	Parms.bOverheated = bOverheated;
	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.ClientSyncResourceInClip
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGzWeaponInvItem                 Item                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountResourceInClip                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   LastProcessedShotId                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ClientSyncResourceInClip(const struct FGzWeaponInvItem& Item, const struct FGzInvPocketId& PocketId, int32 AmountResourceInClip, uint8 LastProcessedShotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ClientSyncResourceInClip");

	Params::GzCombatComponent_ClientSyncResourceInClip Parms{};

	Parms.Item = std::move(Item);
	Parms.PocketId = std::move(PocketId);
	Parms.AmountResourceInClip = AmountResourceInClip;
	Parms.LastProcessedShotId = LastProcessedShotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.DistributeBullets
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// TArray<struct FGzBulletNetData>         BulletsData                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzShotData                      ShotData                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bBulletFromWeapon                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::DistributeBullets(const TArray<struct FGzBulletNetData>& BulletsData, const struct FGzShotData& ShotData, bool bBulletFromWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "DistributeBullets");

	Params::GzCombatComponent_DistributeBullets Parms{};

	Parms.BulletsData = std::move(BulletsData);
	Parms.ShotData = std::move(ShotData);
	Parms.bBulletFromWeapon = bBulletFromWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.EndAimAction
// (Final, Native, Public, BlueprintCallable)

void UGzCombatComponent::EndAimAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "EndAimAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.EquipPreviousWeaponImmediately
// (Final, Native, Public, BlueprintCallable)

void UGzCombatComponent::EquipPreviousWeaponImmediately()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "EquipPreviousWeaponImmediately");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.HolsterCurrentWeapon
// (Final, Native, Public, BlueprintCallable)

void UGzCombatComponent::HolsterCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "HolsterCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.HolsterCurrentWeaponImmediately
// (Final, Native, Public, BlueprintCallable)

void UGzCombatComponent::HolsterCurrentWeaponImmediately()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "HolsterCurrentWeaponImmediately");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::Initialize(class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "Initialize");

	Params::GzCombatComponent_Initialize Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.InitializeWithSockets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::InitializeWithSockets(class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "InitializeWithSockets");

	Params::GzCombatComponent_InitializeWithSockets Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.OnAbilityActivationFailed
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGameplayAbility*                 FailedAbility                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            FailureReasonTags                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzCombatComponent::OnAbilityActivationFailed(const class UGameplayAbility* FailedAbility, const struct FGameplayTagContainer& FailureReasonTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "OnAbilityActivationFailed");

	Params::GzCombatComponent_OnAbilityActivationFailed Parms{};

	Parms.FailedAbility = FailedAbility;
	Parms.FailureReasonTags = std::move(FailureReasonTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.OnRep_EquippedPocket
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   OldPocketID                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::OnRep_EquippedPocket(const struct FGzInvPocketId& OldPocketID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "OnRep_EquippedPocket");

	Params::GzCombatComponent_OnRep_EquippedPocket Parms{};

	Parms.OldPocketID = std::move(OldPocketID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.OnRep_IsAiming
// (Final, Native, Private)

void UGzCombatComponent::OnRep_IsAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "OnRep_IsAiming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.OnRep_WeaponInitialSeed
// (Final, Native, Protected)

void UGzCombatComponent::OnRep_WeaponInitialSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "OnRep_WeaponInitialSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.ServerDistributeBullets
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// TArray<struct FGzBulletNetData>         BulletsData                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzShotData                      ShotData                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bBulletFromWeapon                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ServerDistributeBullets(const TArray<struct FGzBulletNetData>& BulletsData, const struct FGzShotData& ShotData, bool bBulletFromWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ServerDistributeBullets");

	Params::GzCombatComponent_ServerDistributeBullets Parms{};

	Parms.BulletsData = std::move(BulletsData);
	Parms.ShotData = std::move(ShotData);
	Parms.bBulletFromWeapon = bBulletFromWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.ServerProcessBulletHit
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGzBulletID                      BulletID                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   SyncedWorldTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ServerProcessBulletHit(const struct FGzBulletID& BulletID, const struct FHitResult& Hit, float SyncedWorldTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ServerProcessBulletHit");

	Params::GzCombatComponent_ServerProcessBulletHit Parms{};

	Parms.BulletID = std::move(BulletID);
	Parms.Hit = std::move(Hit);
	Parms.SyncedWorldTime = SyncedWorldTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.SetAllWeaponsHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHideWeapons                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::SetAllWeaponsHidden(bool bHideWeapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "SetAllWeaponsHidden");

	Params::GzCombatComponent_SetAllWeaponsHidden Parms{};

	Parms.bHideWeapons = bHideWeapons;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.SwitchEquippedWeaponSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseUnholserAnim                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::SwitchEquippedWeaponSocket(bool bUseUnholserAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "SwitchEquippedWeaponSocket");

	Params::GzCombatComponent_SwitchEquippedWeaponSocket Parms{};

	Parms.bUseUnholserAnim = bUseUnholserAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.ActivateEquipPreviousWeaponAbility
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ActivateEquipPreviousWeaponAbility(const class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ActivateEquipPreviousWeaponAbility");

	Params::GzCombatComponent_ActivateEquipPreviousWeaponAbility Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.CanEquip
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   WeaponPocket                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::CanEquip(const struct FGzInvPocketId& WeaponPocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "CanEquip");

	Params::GzCombatComponent_CanEquip Parms{};

	Parms.WeaponPocket = std::move(WeaponPocket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.EquippedWeaponCanAttack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::EquippedWeaponCanAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "EquippedWeaponCanAttack");

	Params::GzCombatComponent_EquippedWeaponCanAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.EquipPreviousWeapon
// (Final, Native, Public, BlueprintCallable, Const)

void UGzCombatComponent::EquipPreviousWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "EquipPreviousWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.EquipWeaponAtPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::EquipWeaponAtPocket(const struct FGzInvPocketId& PocketId, const class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "EquipWeaponAtPocket");

	Params::GzCombatComponent_EquipWeaponAtPocket Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.GetAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAbilitySystemComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAbilitySystemComponent* UGzCombatComponent::GetAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetAbilitySystemComponent");

	Params::GzCombatComponent_GetAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetAdvancedCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UATPCCameraComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UATPCCameraComponent* UGzCombatComponent::GetAdvancedCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetAdvancedCameraComponent");

	Params::GzCombatComponent_GetAdvancedCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetAllWeaponComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UGzWeaponComponent*>       OutWeapons                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzCombatComponent::GetAllWeaponComponents(TArray<class UGzWeaponComponent*>* OutWeapons) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetAllWeaponComponents");

	Params::GzCombatComponent_GetAllWeaponComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeapons != nullptr)
		*OutWeapons = std::move(Parms.OutWeapons);
}


// Function G01.GzCombatComponent.GetAllWeapons
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGzWeaponActor*>           OutWeapons                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzCombatComponent::GetAllWeapons(TArray<class AGzWeaponActor*>* OutWeapons) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetAllWeapons");

	Params::GzCombatComponent_GetAllWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeapons != nullptr)
		*OutWeapons = std::move(Parms.OutWeapons);
}


// Function G01.GzCombatComponent.GetDesiredPocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInvPocketId UGzCombatComponent::GetDesiredPocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetDesiredPocket");

	Params::GzCombatComponent_GetDesiredPocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetEquippedPocketID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzInvPocketId             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGzInvPocketId UGzCombatComponent::GetEquippedPocketID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetEquippedPocketID");

	Params::GzCombatComponent_GetEquippedPocketID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetEquippedWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzWeaponActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWeaponActor* UGzCombatComponent::GetEquippedWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetEquippedWeapon");

	Params::GzCombatComponent_GetEquippedWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetEquippedWeaponComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponComponent* UGzCombatComponent::GetEquippedWeaponComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetEquippedWeaponComponent");

	Params::GzCombatComponent_GetEquippedWeaponComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetInventoryComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInvComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInvComponent* UGzCombatComponent::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetInventoryComponent");

	Params::GzCombatComponent_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetIsAiming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::GetIsAiming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetIsAiming");

	Params::GzCombatComponent_GetIsAiming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UGzCombatComponent::GetMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetMesh");

	Params::GzCombatComponent_GetMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetOwnerPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzCombatComponent::GetOwnerPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetOwnerPawn");

	Params::GzCombatComponent_GetOwnerPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetPocketByWeaponComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               WeaponComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInvPocketId UGzCombatComponent::GetPocketByWeaponComponent(const class UGzWeaponComponent* WeaponComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetPocketByWeaponComponent");

	Params::GzCombatComponent_GetPocketByWeaponComponent Parms{};

	Parms.WeaponComponent = WeaponComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetPreviousEquippedPocketID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGzInvPocketId UGzCombatComponent::GetPreviousEquippedPocketID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetPreviousEquippedPocketID");

	Params::GzCombatComponent_GetPreviousEquippedPocketID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetViewHitResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FHitResult                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FHitResult UGzCombatComponent::GetViewHitResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetViewHitResult");

	Params::GzCombatComponent_GetViewHitResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetWeaponAtPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWeaponActor* UGzCombatComponent::GetWeaponAtPocket(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetWeaponAtPocket");

	Params::GzCombatComponent_GetWeaponAtPocket Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.GetWeaponComponentAtPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzWeaponComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponComponent* UGzCombatComponent::GetWeaponComponentAtPocket(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "GetWeaponComponentAtPocket");

	Params::GzCombatComponent_GetWeaponComponentAtPocket Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.HasEquippedWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::HasEquippedWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "HasEquippedWeapon");

	Params::GzCombatComponent_HasEquippedWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.HasSingleSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::HasSingleSocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "HasSingleSocket");

	Params::GzCombatComponent_HasSingleSocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.HolsterWeaponAtPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::HolsterWeaponAtPocket(const struct FGzInvPocketId& PocketId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "HolsterWeaponAtPocket");

	Params::GzCombatComponent_HolsterWeaponAtPocket Parms{};

	Parms.PocketId = std::move(PocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.IsDesiredWeaponPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   WeaponPocket                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::IsDesiredWeaponPocket(const struct FGzInvPocketId& WeaponPocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "IsDesiredWeaponPocket");

	Params::GzCombatComponent_IsDesiredWeaponPocket Parms{};

	Parms.WeaponPocket = std::move(WeaponPocket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.IsEquippedWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               GzWeaponComponent                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::IsEquippedWeapon(const class UGzWeaponComponent* GzWeaponComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "IsEquippedWeapon");

	Params::GzCombatComponent_IsEquippedWeapon Parms{};

	Parms.GzWeaponComponent = GzWeaponComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.IsEquippedWeaponPocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvPocketId                   WeaponPocket                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::IsEquippedWeaponPocket(const struct FGzInvPocketId& WeaponPocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "IsEquippedWeaponPocket");

	Params::GzCombatComponent_IsEquippedWeaponPocket Parms{};

	Parms.WeaponPocket = std::move(WeaponPocket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCombatComponent::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "IsInitialized");

	Params::GzCombatComponent_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCombatComponent.ServerProcessAttackRequest
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// struct FGzWeaponInvItem                 Item                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzBulletNetData>         BulletsData                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   AmountResourceInClip                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   InNumberOfSequencedShots                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::ServerProcessAttackRequest(const struct FGzWeaponInvItem& Item, const struct FGzInvPocketId& PocketId, const TArray<struct FGzBulletNetData>& BulletsData, int32 AmountResourceInClip, uint8 InNumberOfSequencedShots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "ServerProcessAttackRequest");

	Params::GzCombatComponent_ServerProcessAttackRequest Parms{};

	Parms.Item = std::move(Item);
	Parms.PocketId = std::move(PocketId);
	Parms.BulletsData = std::move(BulletsData);
	Parms.AmountResourceInClip = AmountResourceInClip;
	Parms.InNumberOfSequencedShots = InNumberOfSequencedShots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCombatComponent.TryActivateEquipWeaponAbility
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCombatComponent::TryActivateEquipWeaponAbility(const struct FGzInvPocketId& PocketId, const class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCombatComponent", "TryActivateEquipWeaponAbility");

	Params::GzCombatComponent_TryActivateEquipWeaponAbility Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Stun.HandleMontageFinished
// (Final, Native, Protected)

void UGzGA_Stun::HandleMontageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Stun", "HandleMontageFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionMessageBase.IsExtractionTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzHexExtractionMessageBase::IsExtractionTeam(const class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "IsExtractionTeam");

	Params::GzHexExtractionMessageBase_IsExtractionTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionMessageBase.SetAssetID
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPrimaryAssetId                  InAssetID                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionMessageBase::SetAssetID(const struct FPrimaryAssetId& InAssetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "SetAssetID");

	Params::GzHexExtractionMessageBase_SetAssetID Parms{};

	Parms.InAssetID = std::move(InAssetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionMessageBase.SetExtractingPlayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPlayerId                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionMessageBase::SetExtractingPlayerId(const int32 InPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "SetExtractingPlayerId");

	Params::GzHexExtractionMessageBase_SetExtractingPlayerId Parms{};

	Parms.InPlayerId = InPlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionMessageBase.SetExtractionTeamID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionMessageBase::SetExtractionTeamID(const int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "SetExtractionTeamID");

	Params::GzHexExtractionMessageBase_SetExtractionTeamID Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionMessageBase.GetExtractingPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzHexExtractionMessageBase::GetExtractingPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "GetExtractingPlayerId");

	Params::GzHexExtractionMessageBase_GetExtractingPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionMessageBase.GetExtractionTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzHexExtractionMessageBase::GetExtractionTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "GetExtractionTeamID");

	Params::GzHexExtractionMessageBase_GetExtractionTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionMessageBase.GetItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzItemData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzItemData* UGzHexExtractionMessageBase::GetItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionMessageBase", "GetItemData");

	Params::GzHexExtractionMessageBase_GetItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionHackBaseMessage.SetHackedTeamID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionHackBaseMessage::SetHackedTeamID(const int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionHackBaseMessage", "SetHackedTeamID");

	Params::GzHexExtractionHackBaseMessage_SetHackedTeamID Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionHackBaseMessage.GetHackedPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzHexExtractionHackBaseMessage::GetHackedPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionHackBaseMessage", "GetHackedPlayerId");

	Params::GzHexExtractionHackBaseMessage_GetHackedPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionHackBaseMessage.GetHackedTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzHexExtractionHackBaseMessage::GetHackedTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionHackBaseMessage", "GetHackedTeamID");

	Params::GzHexExtractionHackBaseMessage_GetHackedTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionHackBaseMessage.IsHackedTeamMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzHexExtractionHackBaseMessage::IsHackedTeamMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionHackBaseMessage", "IsHackedTeamMessage");

	Params::GzHexExtractionHackBaseMessage_IsHackedTeamMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_SmokeWall.OnAttackInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SmokeWall::OnAttackInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "OnAttackInputPressed");

	Params::GzGA_SmokeWall_OnAttackInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmokeWall.OnMissileSpawned
// (Event, Protected, BlueprintEvent)

void UGzGA_SmokeWall::OnMissileSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "OnMissileSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SmokeWall.SpawnSmokeMissile
// (Final, Native, Protected)

void UGzGA_SmokeWall::SpawnSmokeMissile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "SpawnSmokeMissile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmokeWall.TargetDataReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_SmokeWall::TargetDataReceived(const struct FGameplayAbilityTargetDataHandle& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "TargetDataReceived");

	Params::GzGA_SmokeWall_TargetDataReceived Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmokeWall.WaitForNetSyncShootingFinished
// (Final, Native, Protected)

void UGzGA_SmokeWall::WaitForNetSyncShootingFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "WaitForNetSyncShootingFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SmokeWall.GetLaunchSocketLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzGA_SmokeWall::GetLaunchSocketLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SmokeWall", "GetLaunchSocketLocation");

	Params::GzGA_SmokeWall_GetLaunchSocketLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.OnRep_ActiveStages
// (Final, Native, Private)

void AGzMultiStageGameState::OnRep_ActiveStages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "OnRep_ActiveStages");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiStageGameState.SetMatchStartTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMatchStartTime                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiStageGameState::SetMatchStartTime(float NewMatchStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "SetMatchStartTime");

	Params::GzMultiStageGameState_SetMatchStartTime Parms{};

	Parms.NewMatchStartTime = NewMatchStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiStageGameState.SetStageEndTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewStageEndTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiStageGameState::SetStageEndTime(float NewStageEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "SetStageEndTime");

	Params::GzMultiStageGameState_SetStageEndTime Parms{};

	Parms.NewStageEndTime = NewStageEndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiStageGameState.SetStageStartTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewStageStartTime                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMultiStageGameState::SetStageStartTime(float NewStageStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "SetStageStartTime");

	Params::GzMultiStageGameState_SetStageStartTime Parms{};

	Parms.NewStageStartTime = NewStageStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMultiStageGameState.GetActiveStageTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer AGzMultiStageGameState::GetActiveStageTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "GetActiveStageTags");

	Params::GzMultiStageGameState_GetActiveStageTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.GetDeploymentPawnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzMultiStageGameState::GetDeploymentPawnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "GetDeploymentPawnCount");

	Params::GzMultiStageGameState_GetDeploymentPawnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.GetStageRemainingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMultiStageGameState::GetStageRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "GetStageRemainingTime");

	Params::GzMultiStageGameState_GetStageRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.GetTimeFromMatchStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMultiStageGameState::GetTimeFromMatchStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "GetTimeFromMatchStart");

	Params::GzMultiStageGameState_GetTimeFromMatchStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.GetTimeFromStageStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMultiStageGameState::GetTimeFromStageStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "GetTimeFromStageStart");

	Params::GzMultiStageGameState_GetTimeFromStageStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMultiStageGameState.OnRep_DeploymentPawnCount
// (Final, Native, Private, Const)

void AGzMultiStageGameState::OnRep_DeploymentPawnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMultiStageGameState", "OnRep_DeploymentPawnCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.OnClick
// (Native, Event, Protected, BlueprintEvent)

void UGzPocketWidget::OnClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.OnHoldCompleted
// (Native, Protected, HasOutParams)
// Parameters:
// class UCommonButtonBase*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             HoldingKey                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPocketWidget::OnHoldCompleted(class UCommonButtonBase* Button, const struct FKey& HoldingKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnHoldCompleted");

	Params::GzPocketWidget_OnHoldCompleted Parms{};

	Parms.Button = Button;
	Parms.HoldingKey = std::move(HoldingKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.OnHovered
// (Final, Native, Protected)

void UGzPocketWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.OnPocketChanged_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzInvItem                       NewItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzPocketWidget::OnPocketChanged_BP(const struct FGzInvItem& NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnPocketChanged_BP");

	Params::GzPocketWidget_OnPocketChanged_BP Parms{};

	Parms.NewItem = std::move(NewItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPocketWidget.OnRightClick
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UCommonButtonBase*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPocketWidget::OnRightClick(class UCommonButtonBase* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnRightClick");

	Params::GzPocketWidget_OnRightClick Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.OnUnhovered
// (Final, Native, Protected)

void UGzPocketWidget::OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "OnUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPocketWidget.GetPocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzInvPocket               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocket UGzPocketWidget::GetPocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketWidget", "GetPocket");

	Params::GzPocketWidget_GetPocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPocketWidget.OnLimbHealthChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   OldHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbPocketWidget::OnLimbHealthChanged_BP(float OldHealth, float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPocketWidget", "OnLimbHealthChanged_BP");

	Params::GzLimbPocketWidget_OnLimbHealthChanged_BP Parms{};

	Parms.OldHealth = OldHealth;
	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLimbPocketWidget.GetAbilitySystemComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilitySystemComponent* UGzLimbPocketWidget::GetAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPocketWidget", "GetAbilitySystemComponent");

	Params::GzLimbPocketWidget_GetAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPocketWidget.GetHealthAttribute
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAttribute               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAttribute UGzLimbPocketWidget::GetHealthAttribute() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPocketWidget", "GetHealthAttribute");

	Params::GzLimbPocketWidget_GetHealthAttribute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.AntiCheatSendToClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::AntiCheatSendToClient(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "AntiCheatSendToClient");

	Params::GzPlayerController_AntiCheatSendToClient Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.AntiCheatSendToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::AntiCheatSendToServer(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "AntiCheatSendToServer");

	Params::GzPlayerController_AntiCheatSendToServer Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_NotifyReceivedHitResponse
// (Net, Native, Event, Public, NetClient)
// Parameters:
// struct FGzHitResponseData               HitResponseData                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_NotifyReceivedHitResponse(const struct FGzHitResponseData& HitResponseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_NotifyReceivedHitResponse");

	Params::GzPlayerController_Client_NotifyReceivedHitResponse Parms{};

	Parms.HitResponseData = std::move(HitResponseData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_NotifyRespawnTime
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   RespawnTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_NotifyRespawnTime(float RespawnTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_NotifyRespawnTime");

	Params::GzPlayerController_Client_NotifyRespawnTime Parms{};

	Parms.RespawnTime = RespawnTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_NotifyTeamRespawnTimeReduced
// (Net, Native, Event, Public, NetClient)
// Parameters:
// float                                   TimeBonus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_NotifyTeamRespawnTimeReduced(float TimeBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_NotifyTeamRespawnTimeReduced");

	Params::GzPlayerController_Client_NotifyTeamRespawnTimeReduced Parms{};

	Parms.TimeBonus = TimeBonus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_NotifyUpdateRecentPlayers
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<class FString>                   PlatformUserIds                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_NotifyUpdateRecentPlayers(const TArray<class FString>& PlatformUserIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_NotifyUpdateRecentPlayers");

	Params::GzPlayerController_Client_NotifyUpdateRecentPlayers Parms{};

	Parms.PlatformUserIds = std::move(PlatformUserIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_NotifyViewTargetReceivedDamage
// (Net, Native, Event, Public, NetClient)
// Parameters:
// struct FGzServerDamageInfo              ServerDamageInfo                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_NotifyViewTargetReceivedDamage(const struct FGzServerDamageInfo& ServerDamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_NotifyViewTargetReceivedDamage");

	Params::GzPlayerController_Client_NotifyViewTargetReceivedDamage Parms{};

	Parms.ServerDamageInfo = std::move(ServerDamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_ResetSpectatorCameraMode
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_ResetSpectatorCameraMode(const struct FGameplayTag& CameraModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_ResetSpectatorCameraMode");

	Params::GzPlayerController_Client_ResetSpectatorCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_ResetSpectatorOverlayCameraMode
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_ResetSpectatorOverlayCameraMode(bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_ResetSpectatorOverlayCameraMode");

	Params::GzPlayerController_Client_ResetSpectatorOverlayCameraMode Parms{};

	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_SendAudioAnnouncement
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_SendAudioAnnouncement(const struct FGameplayTag& AnnouncerTag, const struct FGameplayTag& VoiceLineTag, bool bStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_SendAudioAnnouncement");

	Params::GzPlayerController_Client_SendAudioAnnouncement Parms{};

	Parms.AnnouncerTag = std::move(AnnouncerTag);
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.bStarted = bStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_SendGameMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGzMessageNetData                MessageData                                            (Parm, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_SendGameMessage(const struct FGzMessageNetData& MessageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_SendGameMessage");

	Params::GzPlayerController_Client_SendGameMessage Parms{};

	Parms.MessageData = std::move(MessageData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_SendVoiceableActionEvent
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                           ActionInstigator                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_SendVoiceableActionEvent(class AActor* ActionInstigator, const struct FGameplayTag& Tag, bool bStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_SendVoiceableActionEvent");

	Params::GzPlayerController_Client_SendVoiceableActionEvent Parms{};

	Parms.ActionInstigator = ActionInstigator;
	Parms.Tag = std::move(Tag);
	Parms.bStarted = bStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_SetSpectatorCameraMode
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_SetSpectatorCameraMode(const struct FGameplayTag& CameraModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_SetSpectatorCameraMode");

	Params::GzPlayerController_Client_SetSpectatorCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Client_SetSpectatorOverlayCameraMode
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGameplayTag                     CameraModeTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Client_SetSpectatorOverlayCameraMode(const struct FGameplayTag& CameraModeTag, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Client_SetSpectatorOverlayCameraMode");

	Params::GzPlayerController_Client_SetSpectatorOverlayCameraMode Parms{};

	Parms.CameraModeTag = std::move(CameraModeTag);
	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ClientSetMatchResult
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGzMatchResult                   InMatchResult                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::ClientSetMatchResult(const struct FGzMatchResult& InMatchResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ClientSetMatchResult");

	Params::GzPlayerController_ClientSetMatchResult Parms{};

	Parms.InMatchResult = std::move(InMatchResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ClientSetSoundState
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// struct FGzSoundStateKey                 State                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::ClientSetSoundState(const struct FGzSoundStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ClientSetSoundState");

	Params::GzPlayerController_ClientSetSoundState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ClientUpdateWorldTime
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:
// float                                   ClientTimestamp                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ServerTimestamp                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ClientUpdateWorldTime(float ClientTimestamp, float ServerTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ClientUpdateWorldTime");

	Params::GzPlayerController_ClientUpdateWorldTime Parms{};

	Parms.ClientTimestamp = ClientTimestamp;
	Parms.ServerTimestamp = ServerTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ConnectToVoiceChatRoom
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// struct FGuid                            RoomGuid                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JoinUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JoinToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ConnectToVoiceChatRoom(const struct FGuid& RoomGuid, const class FString& JoinUrl, const class FString& JoinToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ConnectToVoiceChatRoom");

	Params::GzPlayerController_ConnectToVoiceChatRoom Parms{};

	Parms.RoomGuid = std::move(RoomGuid);
	Parms.JoinUrl = std::move(JoinUrl);
	Parms.JoinToken = std::move(JoinToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.DisplayDamage
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FDamageDisplayData               DamageData                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ImpactNormal                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::DisplayDamage(const struct FDamageDisplayData& DamageData, const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "DisplayDamage");

	Params::GzPlayerController_DisplayDamage Parms{};

	Parms.DamageData = std::move(DamageData);
	Parms.ImpactNormal = std::move(ImpactNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.DrawDebugCovers
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<struct FDrawCovers>              TakeCovers                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::DrawDebugCovers(const TArray<struct FDrawCovers>& TakeCovers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "DrawDebugCovers");

	Params::GzPlayerController_DrawDebugCovers Parms{};

	Parms.TakeCovers = std::move(TakeCovers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.K2_DisplayDamage
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FDamageDisplayData               DamageData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::K2_DisplayDamage(const struct FDamageDisplayData& DamageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "K2_DisplayDamage");

	Params::GzPlayerController_K2_DisplayDamage Parms{};

	Parms.DamageData = std::move(DamageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPlayerController.LeaveMatch
// (Final, Native, Private, BlueprintCallable)

void AGzPlayerController::LeaveMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "LeaveMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ListenLandedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bChangeSoundState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ListenLandedEvent(bool bChangeSoundState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ListenLandedEvent");

	Params::GzPlayerController_ListenLandedEvent Parms{};

	Parms.bChangeSoundState = bChangeSoundState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnCinematicModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewCinematicMode                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnCinematicModeChanged(bool bNewCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnCinematicModeChanged");

	Params::GzPlayerController_OnCinematicModeChanged Parms{};

	Parms.bNewCinematicMode = bNewCinematicMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPlayerController.OnConnectionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnConnectionStateChanged(class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnConnectionStateChanged");

	Params::GzPlayerController_OnConnectionStateChanged Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnObservedPlayerConnectionChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnObservedPlayerConnectionChanged(class AGzPlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnObservedPlayerConnectionChanged");

	Params::GzPlayerController_OnObservedPlayerConnectionChanged Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnRep_ActiveHexExtractions
// (Final, Native, Private)

void AGzPlayerController::OnRep_ActiveHexExtractions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnRep_ActiveHexExtractions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnRep_QuickOrderArrivals
// (Final, Native, Private)

void AGzPlayerController::OnRep_QuickOrderArrivals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnRep_QuickOrderArrivals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnRep_RevealedActors
// (Final, Native, Private)

void AGzPlayerController::OnRep_RevealedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnRep_RevealedActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnRep_RevealedZoneCircles
// (Final, Native, Private)

void AGzPlayerController::OnRep_RevealedZoneCircles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnRep_RevealedZoneCircles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnRep_SpectateKiller
// (Final, Native, Private)
// Parameters:
// bool                                    bPrevSpectateKiller                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnRep_SpectateKiller(bool bPrevSpectateKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnRep_SpectateKiller");

	Params::GzPlayerController_OnRep_SpectateKiller Parms{};

	Parms.bPrevSpectateKiller = bPrevSpectateKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnTeamChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnTeamChanged(class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnTeamChanged");

	Params::GzPlayerController_OnTeamChanged Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.OnTeammateAliveStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::OnTeammateAliveStateChanged(class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "OnTeammateAliveStateChanged");

	Params::GzPlayerController_OnTeammateAliveStateChanged Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.RemoveActiveHexExtraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ExtractionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::RemoveActiveHexExtraction(int32 ExtractionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "RemoveActiveHexExtraction");

	Params::GzPlayerController_RemoveActiveHexExtraction Parms{};

	Parms.ExtractionId = ExtractionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.RequestSuicide
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void AGzPlayerController::RequestSuicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "RequestSuicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SendServerFloorToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FFindFloorResult                 FloorResult                                            (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzPlayerController::SendServerFloorToClient(const struct FFindFloorResult& FloorResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SendServerFloorToClient");

	Params::GzPlayerController_SendServerFloorToClient Parms{};

	Parms.FloorResult = std::move(FloorResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Server_CallRedeployment
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AGzRedeploymentTerminal*          RedeploymentTerminal                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           TeammatesIds                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::Server_CallRedeployment(class AGzRedeploymentTerminal* RedeploymentTerminal, const TArray<int32>& TeammatesIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Server_CallRedeployment");

	Params::GzPlayerController_Server_CallRedeployment Parms{};

	Parms.RedeploymentTerminal = RedeploymentTerminal;
	Parms.TeammatesIds = std::move(TeammatesIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Server_SendMinigameBytes
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// uint8                                   Bytes                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Server_SendMinigameBytes(uint8 Bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Server_SendMinigameBytes");

	Params::GzPlayerController_Server_SendMinigameBytes Parms{};

	Parms.Bytes = Bytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Server_SendPlatformUserInfo
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlatformUserId                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Server_SendPlatformUserInfo(const class FString& PlayFabId, const class FString& PlatformUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Server_SendPlatformUserInfo");

	Params::GzPlayerController_Server_SendPlatformUserInfo Parms{};

	Parms.PlayFabId = std::move(PlayFabId);
	Parms.PlatformUserId = std::move(PlatformUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.Server_SetVirtualItem
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::Server_SetVirtualItem(const struct FGzInvPocketId& PocketId, class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "Server_SetVirtualItem");

	Params::GzPlayerController_Server_SetVirtualItem Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerHandleDeliberateLeave
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void AGzPlayerController::ServerHandleDeliberateLeave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerHandleDeliberateLeave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerNotifyBuildHealthChecked
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGzPlayerController::ServerNotifyBuildHealthChecked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerNotifyBuildHealthChecked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerNotifyPlayerStateReceived
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGzPlayerController::ServerNotifyPlayerStateReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerNotifyPlayerStateReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerRemoveItem
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerRemoveItem(const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerRemoveItem");

	Params::GzPlayerController_ServerRemoveItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerRemoveSlot
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerRemoveSlot(const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerRemoveSlot");

	Params::GzPlayerController_ServerRemoveSlot Parms{};

	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerRename
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FString                           BaseName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerRename(const class FString& BaseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerRename");

	Params::GzPlayerController_ServerRename Parms{};

	Parms.BaseName = std::move(BaseName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerRequestWorldTime
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// float                                   ClientTimestamp                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerRequestWorldTime(float ClientTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerRequestWorldTime");

	Params::GzPlayerController_ServerRequestWorldTime Parms{};

	Parms.ClientTimestamp = ClientTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerStartPostLoadoutSelectionTimer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerStartPostLoadoutSelectionTimer(const struct FGuid& LoadoutGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerStartPostLoadoutSelectionTimer");

	Params::GzPlayerController_ServerStartPostLoadoutSelectionTimer Parms{};

	Parms.LoadoutGuid = std::move(LoadoutGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.ServerSwapPockets
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGzInvPocketId                   LeftPocketId                                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   RightPocketId                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::ServerSwapPockets(const struct FGzInvPocketId& LeftPocketId, const struct FGzInvPocketId& RightPocketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "ServerSwapPockets");

	Params::GzPlayerController_ServerSwapPockets Parms{};

	Parms.LeftPocketId = std::move(LeftPocketId);
	Parms.RightPocketId = std::move(RightPocketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetActiveHexExtraction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzExtractionData                InExtractionData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::SetActiveHexExtraction(const struct FGzExtractionData& InExtractionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetActiveHexExtraction");

	Params::GzPlayerController_SetActiveHexExtraction Parms{};

	Parms.InExtractionData = std::move(InExtractionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetAimingInputScale
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::SetAimingInputScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetAimingInputScale");

	Params::GzPlayerController_SetAimingInputScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetFlushKeysOnViewportFocusChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInFlushKeysOnViewportFocusChange                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::SetFlushKeysOnViewportFocusChange(bool bInFlushKeysOnViewportFocusChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetFlushKeysOnViewportFocusChange");

	Params::GzPlayerController_SetFlushKeysOnViewportFocusChange Parms{};

	Parms.bInFlushKeysOnViewportFocusChange = bInFlushKeysOnViewportFocusChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetInputPitchYawScale
// (Final, Exec, Native, Public)
// Parameters:
// float                                   PitchScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YawScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::SetInputPitchYawScale(float PitchScale, float YawScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetInputPitchYawScale");

	Params::GzPlayerController_SetInputPitchYawScale Parms{};

	Parms.PitchScale = PitchScale;
	Parms.YawScale = YawScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetPreciseControlRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerController::SetPreciseControlRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetPreciseControlRotation");

	Params::GzPlayerController_SetPreciseControlRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SetSniperScopeInputScale
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::SetSniperScopeInputScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SetSniperScopeInputScale");

	Params::GzPlayerController_SetSniperScopeInputScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.StartPostLoadoutSelectionTimer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerController::StartPostLoadoutSelectionTimer(const struct FGuid& LoadoutGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "StartPostLoadoutSelectionTimer");

	Params::GzPlayerController_StartPostLoadoutSelectionTimer Parms{};

	Parms.LoadoutGuid = std::move(LoadoutGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.StopListenLandedEvent
// (Final, Native, Public, BlueprintCallable)

void AGzPlayerController::StopListenLandedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "StopListenLandedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.SubscribeToTeamChange
// (Final, Native, Private)

void AGzPlayerController::SubscribeToTeamChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "SubscribeToTeamChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerController.GetActiveHexExtractions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGzExtractionData>  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGzExtractionData> AGzPlayerController::GetActiveHexExtractions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetActiveHexExtractions");

	Params::GzPlayerController_GetActiveHexExtractions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetInputControlsComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInputControlsComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInputControlsComponent* AGzPlayerController::GetInputControlsComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetInputControlsComponent");

	Params::GzPlayerController_GetInputControlsComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetKillerInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzKillerInfo              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzKillerInfo AGzPlayerController::GetKillerInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetKillerInfo");

	Params::GzPlayerController_GetKillerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetMarkersHolderComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzPlayerMarkersHolderComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPlayerMarkersHolderComponent* AGzPlayerController::GetMarkersHolderComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetMarkersHolderComponent");

	Params::GzPlayerController_GetMarkersHolderComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetMatchResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzMatchResult             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzMatchResult AGzPlayerController::GetMatchResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetMatchResult");

	Params::GzPlayerController_GetMatchResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetServerWorldTimeDelta
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerController::GetServerWorldTimeDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetServerWorldTimeDelta");

	Params::GzPlayerController_GetServerWorldTimeDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.GetSyncedServerWorldTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerController::GetSyncedServerWorldTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "GetSyncedServerWorldTime");

	Params::GzPlayerController_GetSyncedServerWorldTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.IsMatchResultSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerController::IsMatchResultSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "IsMatchResultSet");

	Params::GzPlayerController_IsMatchResultSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerController.IsPartyMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerController::IsPartyMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerController", "IsPartyMember");

	Params::GzPlayerController_IsPartyMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTimeSurvivedStatsCollector.UpdatePlayerTimeSurvived
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTimeSurvivedStatsCollector::UpdatePlayerTimeSurvived(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTimeSurvivedStatsCollector", "UpdatePlayerTimeSurvived");

	Params::GzTimeSurvivedStatsCollector_UpdatePlayerTimeSurvived Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyalePlayerController.OnRep_SelectedLastZoneData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGzSelectedZoneData              OldZoneData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzBattleRoyalePlayerController::OnRep_SelectedLastZoneData(const struct FGzSelectedZoneData& OldZoneData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyalePlayerController", "OnRep_SelectedLastZoneData");

	Params::GzBattleRoyalePlayerController_OnRep_SelectedLastZoneData Parms{};

	Parms.OldZoneData = std::move(OldZoneData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyalePlayerController.GetSelectedLastZoneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzSelectedZoneData        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzSelectedZoneData AGzBattleRoyalePlayerController::GetSelectedLastZoneIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyalePlayerController", "GetSelectedLastZoneIndex");

	Params::GzBattleRoyalePlayerController_GetSelectedLastZoneIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyalePlayerController.HasSelectedLastZoneData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyalePlayerController::HasSelectedLastZoneData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyalePlayerController", "HasSelectedLastZoneData");

	Params::GzBattleRoyalePlayerController_HasSelectedLastZoneData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShootHitStatCollector.PlayerHit
// (Final, Native, Private)
// Parameters:
// class APawn*                            Instigator                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             WeaponName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzCharacterDamageAreaType              CharacterDamageAreaType                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzShootHitStatCollector::PlayerHit(const class APawn* Instigator, class FName WeaponName, EGzCharacterDamageAreaType CharacterDamageAreaType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShootHitStatCollector", "PlayerHit");

	Params::GzShootHitStatCollector_PlayerHit Parms{};

	Parms.Instigator = Instigator;
	Parms.WeaponName = WeaponName;
	Parms.CharacterDamageAreaType = CharacterDamageAreaType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.Client_NotifyConsoleUserInfos
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<class FString>                   InConsoleUserIds                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   InPlayFabIds                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerState::Client_NotifyConsoleUserInfos(const TArray<class FString>& InConsoleUserIds, const TArray<class FString>& InPlayFabIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "Client_NotifyConsoleUserInfos");

	Params::GzPlayerState_Client_NotifyConsoleUserInfos Parms{};

	Parms.InConsoleUserIds = std::move(InConsoleUserIds);
	Parms.InPlayFabIds = std::move(InPlayFabIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerState::OnPawnChanged(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnPawnChanged");

	Params::GzPlayerState_OnPawnChanged Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_AliveState
// (Final, Native, Private)

void AGzPlayerState::OnRep_AliveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_AliveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_ComebackArenaState
// (Final, Native, Private)

void AGzPlayerState::OnRep_ComebackArenaState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_ComebackArenaState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_Connected
// (Final, Native, Private)

void AGzPlayerState::OnRep_Connected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_Connected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_CustomizationProfile
// (Final, Native, Private)

void AGzPlayerState::OnRep_CustomizationProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_CustomizationProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_PlayerClanTag
// (Final, Native, Private)

void AGzPlayerState::OnRep_PlayerClanTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_PlayerClanTag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_PlayerSubscriptionIsValid
// (Final, Native, Private)

void AGzPlayerState::OnRep_PlayerSubscriptionIsValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_PlayerSubscriptionIsValid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_RedeployedCount
// (Final, Native, Private)

void AGzPlayerState::OnRep_RedeployedCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_RedeployedCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_RespawnTime
// (Final, Native, Private)

void AGzPlayerState::OnRep_RespawnTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_RespawnTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_StoredInGameCurrencyQuantity
// (Final, Native, Private)

void AGzPlayerState::OnRep_StoredInGameCurrencyQuantity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_StoredInGameCurrencyQuantity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_Team
// (Final, Native, Private)

void AGzPlayerState::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.OnRep_WorldInstanceId
// (Final, Native, Private)

void AGzPlayerState::OnRep_WorldInstanceId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "OnRep_WorldInstanceId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.Server_QueryConsoleUserIds
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class FString>                   InPlayFabIds                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPlayerState::Server_QueryConsoleUserIds(const TArray<class FString>& InPlayFabIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "Server_QueryConsoleUserIds");

	Params::GzPlayerState_Server_QueryConsoleUserIds Parms{};

	Parms.InPlayFabIds = std::move(InPlayFabIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.Server_SaveConsoleUserId
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           InPlayfabId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InConsoleUserId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerState::Server_SaveConsoleUserId(const class FString& InPlayfabId, const class FString& InConsoleUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "Server_SaveConsoleUserId");

	Params::GzPlayerState_Server_SaveConsoleUserId Parms{};

	Parms.InPlayfabId = std::move(InPlayfabId);
	Parms.InConsoleUserId = std::move(InConsoleUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.SetPreMatchStartTime
// (Final, Native, Public)
// Parameters:
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerState::SetPreMatchStartTime(const float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "SetPreMatchStartTime");

	Params::GzPlayerState_SetPreMatchStartTime Parms{};

	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerState.GetBackendCharacterId
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName AGzPlayerState::GetBackendCharacterId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetBackendCharacterId");

	Params::GzPlayerState_GetBackendCharacterId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetComebackArenaState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzComebackArenaCandidateState          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzComebackArenaCandidateState AGzPlayerState::GetComebackArenaState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetComebackArenaState");

	Params::GzPlayerState_GetComebackArenaState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetConnectionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzConnectionState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzConnectionState AGzPlayerState::GetConnectionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetConnectionState");

	Params::GzPlayerState_GetConnectionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetCustomizationProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCharacterCustomizationProfileReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzCharacterCustomizationProfile AGzPlayerState::GetCustomizationProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetCustomizationProfile");

	Params::GzPlayerState_GetCustomizationProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetEpicProductUserId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPlayerState::GetEpicProductUserId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetEpicProductUserId");

	Params::GzPlayerState_GetEpicProductUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzFaction                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzFaction AGzPlayerState::GetFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetFaction");

	Params::GzPlayerState_GetFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetFactionId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzPlayerState::GetFactionId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetFactionId");

	Params::GzPlayerState_GetFactionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetGenericTeamId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGenericTeamId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGenericTeamId AGzPlayerState::GetGenericTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetGenericTeamId");

	Params::GzPlayerState_GetGenericTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetInitialRespawnTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerState::GetInitialRespawnTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetInitialRespawnTime");

	Params::GzPlayerState_GetInitialRespawnTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetOldRespawnTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerState::GetOldRespawnTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetOldRespawnTime");

	Params::GzPlayerState_GetOldRespawnTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetPlayerAliveState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzAliveState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzAliveState AGzPlayerState::GetPlayerAliveState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetPlayerAliveState");

	Params::GzPlayerState_GetPlayerAliveState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetPlayerClanTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPlayerState::GetPlayerClanTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetPlayerClanTag");

	Params::GzPlayerState_GetPlayerClanTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetPlayerSubscriptionIsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::GetPlayerSubscriptionIsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetPlayerSubscriptionIsValid");

	Params::GzPlayerState_GetPlayerSubscriptionIsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetPlayFabId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPlayerState::GetPlayFabId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetPlayFabId");

	Params::GzPlayerState_GetPlayFabId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetQuickOrderDroneAvailableTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerState::GetQuickOrderDroneAvailableTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetQuickOrderDroneAvailableTime");

	Params::GzPlayerState_GetQuickOrderDroneAvailableTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetRedeploymentCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzPlayerState::GetRedeploymentCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetRedeploymentCost");

	Params::GzPlayerState_GetRedeploymentCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetRedeploymentCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzPlayerState::GetRedeploymentCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetRedeploymentCount");

	Params::GzPlayerState_GetRedeploymentCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetRespawnTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerState::GetRespawnTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetRespawnTime");

	Params::GzPlayerState_GetRespawnTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetSessionTeamId
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPlayerState::GetSessionTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetSessionTeamId");

	Params::GzPlayerState_GetSessionTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetStoredInGameCurrencyQuantity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzPlayerState::GetStoredInGameCurrencyQuantity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetStoredInGameCurrencyQuantity");

	Params::GzPlayerState_GetStoredInGameCurrencyQuantity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* AGzPlayerState::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetTeam");

	Params::GzPlayerState_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzPlayerState::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetTeamId");

	Params::GzPlayerState_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.GetTitleAccountId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPlayerState::GetTitleAccountId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "GetTitleAccountId");

	Params::GzPlayerState_GetTitleAccountId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.HasLeftMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::HasLeftMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "HasLeftMatch");

	Params::GzPlayerState_HasLeftMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsConnected");

	Params::GzPlayerState_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsInComebackArena
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsInComebackArena() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsInComebackArena");

	Params::GzPlayerState_IsInComebackArena Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsInComebackArenaQueue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsInComebackArenaQueue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsInComebackArenaQueue");

	Params::GzPlayerState_IsInComebackArenaQueue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsInMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsInMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsInMatch");

	Params::GzPlayerState_IsInMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsReadyToStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsReadyToStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsReadyToStart");

	Params::GzPlayerState_IsReadyToStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerState.IsSecondChanceAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerState::IsSecondChanceAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerState", "IsSecondChanceAvailable");

	Params::GzPlayerState_IsSecondChanceAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeSettings.CanReconnect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSessionGameModeSettings::CanReconnect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeSettings", "CanReconnect");

	Params::GzSessionGameModeSettings_CanReconnect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeSettings.GetHexExtractionSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzItemRarity                           ItemRarity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzHexExtractionSettings         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzHexExtractionSettings UGzSessionGameModeSettings::GetHexExtractionSetting(EGzItemRarity ItemRarity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeSettings", "GetHexExtractionSetting");

	Params::GzSessionGameModeSettings_GetHexExtractionSetting Parms{};

	Parms.ItemRarity = ItemRarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeSettings.GetRedeploymentCostAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzSessionGameModeSettings::GetRedeploymentCostAtLevel(int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeSettings", "GetRedeploymentCostAtLevel");

	Params::GzSessionGameModeSettings_GetRedeploymentCostAtLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSessionGameModeSettings.ShouldKillPlayerOnLeave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSessionGameModeSettings::ShouldKillPlayerOnLeave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSessionGameModeSettings", "ShouldKillPlayerOnLeave");

	Params::GzSessionGameModeSettings_ShouldKillPlayerOnLeave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Zipline.OnJumpOffFromCancelFinished
// (Final, Native, Protected)

void UGzGA_Zipline::OnJumpOffFromCancelFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Zipline", "OnJumpOffFromCancelFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzBattleRoyaleZone.GzOnRadiusUpdated__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   NewRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBattleRoyaleZone::GzOnRadiusUpdated__DelegateSignature(float NewRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GzOnRadiusUpdated__DelegateSignature");

	Params::GzBattleRoyaleZone_GzOnRadiusUpdated__DelegateSignature Parms{};

	Parms.NewRadius = NewRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzBattleRoyaleZone.NotifyOverloadComplete
// (Net, Native, Event, NetMulticast, Protected)

void AGzBattleRoyaleZone::NotifyOverloadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "NotifyOverloadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.NotifyOverloadStart
// (Net, Native, Event, NetMulticast, Protected)

void AGzBattleRoyaleZone::NotifyOverloadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "NotifyOverloadStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.OnRep_OverloadData
// (Final, Native, Private)

void AGzBattleRoyaleZone::OnRep_OverloadData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "OnRep_OverloadData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.OverloadExpanding
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzBattleRoyaleZone::OverloadExpanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "OverloadExpanding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.OverloadShrinking
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzBattleRoyaleZone::OverloadShrinking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "OverloadShrinking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.ReceiveOnOverloadDataUpdate
// (Event, Protected, BlueprintEvent)

void AGzBattleRoyaleZone::ReceiveOnOverloadDataUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "ReceiveOnOverloadDataUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzBattleRoyaleZone.ReceiveOnOverloadEnd
// (Event, Protected, BlueprintEvent)

void AGzBattleRoyaleZone::ReceiveOnOverloadEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "ReceiveOnOverloadEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzBattleRoyaleZone.ReceiveOnOverloadStart
// (Event, Protected, BlueprintEvent)

void AGzBattleRoyaleZone::ReceiveOnOverloadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "ReceiveOnOverloadStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzBattleRoyaleZone.ReceiveOverloadRestart
// (Event, Protected, BlueprintEvent)

void AGzBattleRoyaleZone::ReceiveOverloadRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "ReceiveOverloadRestart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzBattleRoyaleZone.ResetOverload
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzBattleRoyaleZone::ResetOverload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "ResetOverload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.SetOverloadPaused
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPaused                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBattleRoyaleZone::SetOverloadPaused(bool bPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "SetOverloadPaused");

	Params::GzBattleRoyaleZone_SetOverloadPaused Parms{};

	Parms.bPaused = bPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZone.GetCurrentRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZone::GetCurrentRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetCurrentRadius");

	Params::GzBattleRoyaleZone_GetCurrentRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetLandingZoneOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AGzBattleRoyaleZone::GetLandingZoneOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetLandingZoneOrigin");

	Params::GzBattleRoyaleZone_GetLandingZoneOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetOverloadStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZone::GetOverloadStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetOverloadStartTime");

	Params::GzBattleRoyaleZone_GetOverloadStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetOverloadState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzZoneOverloadState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzZoneOverloadState AGzBattleRoyaleZone::GetOverloadState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetOverloadState");

	Params::GzBattleRoyaleZone_GetOverloadState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetZoneCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AGzBattleRoyaleZone::GetZoneCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZoneCenter");

	Params::GzBattleRoyaleZone_GetZoneCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetZoneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzBattleRoyaleZone::GetZoneIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZoneIndex");

	Params::GzBattleRoyaleZone_GetZoneIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetZoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGzBattleRoyaleZone::GetZoneName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZoneName");

	Params::GzBattleRoyaleZone_GetZoneName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetZoneOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AGzBattleRoyaleZone::GetZoneOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZoneOrigin");

	Params::GzBattleRoyaleZone_GetZoneOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.GetZonePoints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector2D>                ZonePoints                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGzBattleRoyaleZone::GetZonePoints(TArray<struct FVector2D>* ZonePoints) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZonePoints");

	Params::GzBattleRoyaleZone_GetZonePoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ZonePoints != nullptr)
		*ZonePoints = std::move(Parms.ZonePoints);
}


// Function G01.GzBattleRoyaleZone.GetZoneText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGzBattleRoyaleZone::GetZoneText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "GetZoneText");

	Params::GzBattleRoyaleZone_GetZoneText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsFullyOverloaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsFullyOverloaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsFullyOverloaded");

	Params::GzBattleRoyaleZone_IsFullyOverloaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsInOverloadedZone
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsInOverloadedZone(const struct FVector2D& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsInOverloadedZone");

	Params::GzBattleRoyaleZone_IsInOverloadedZone Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsInOverloadingZoneRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsInOverloadingZoneRadius(const struct FVector2D& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsInOverloadingZoneRadius");

	Params::GzBattleRoyaleZone_IsInOverloadingZoneRadius Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsOverloading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsOverloading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsOverloading");

	Params::GzBattleRoyaleZone_IsOverloading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsOverloadStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsOverloadStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsOverloadStarted");

	Params::GzBattleRoyaleZone_IsOverloadStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.IsShrinking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZone::IsShrinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "IsShrinking");

	Params::GzBattleRoyaleZone_IsShrinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZone.OnRep_OverloadStartTime
// (Final, Native, Private, Const)

void AGzBattleRoyaleZone::OnRep_OverloadStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZone", "OnRep_OverloadStartTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneCheatExtension.OverloadZone
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// class FString                           ZoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBattleRoyaleZoneCheatExtension::OverloadZone(const class FString& ZoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneCheatExtension", "OverloadZone");

	Params::GzBattleRoyaleZoneCheatExtension_OverloadZone Parms{};

	Parms.ZoneName = std::move(ZoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneCheatExtension.ResetOverload
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzBattleRoyaleZoneCheatExtension::ResetOverload() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneCheatExtension", "ResetOverload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneCheatExtension.ResetZone
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// class FString                           ZoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBattleRoyaleZoneCheatExtension::ResetZone(const class FString& ZoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneCheatExtension", "ResetZone");

	Params::GzBattleRoyaleZoneCheatExtension_ResetZone Parms{};

	Parms.ZoneName = std::move(ZoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneCheatExtension.SelectLastZoneAndStartOverload
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// class FString                           ZoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LandingZoneIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBattleRoyaleZoneCheatExtension::SelectLastZoneAndStartOverload(const class FString& ZoneName, const int32 LandingZoneIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneCheatExtension", "SelectLastZoneAndStartOverload");

	Params::GzBattleRoyaleZoneCheatExtension_SelectLastZoneAndStartOverload Parms{};

	Parms.ZoneName = std::move(ZoneName);
	Parms.LandingZoneIndex = LandingZoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddAttachmentToActiveWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           AttachmentItemName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddAttachmentToActiveWeapon(const class FString& AttachmentItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddAttachmentToActiveWeapon");

	Params::GzInventoryCheatExtension_AddAttachmentToActiveWeapon Parms{};

	Parms.AttachmentItemName = std::move(AttachmentItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddBackpack
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BackpackName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddBackpack(const class FString& BackpackName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddBackpack");

	Params::GzInventoryCheatExtension_AddBackpack Parms{};

	Parms.BackpackName = std::move(BackpackName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddConsumableWithQuantity
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddConsumableWithQuantity(const class FString& ItemName, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddConsumableWithQuantity");

	Params::GzInventoryCheatExtension_AddConsumableWithQuantity Parms{};

	Parms.ItemName = std::move(ItemName);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddContainerItem
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddContainerItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddContainerItem");

	Params::GzInventoryCheatExtension_AddContainerItem Parms{};

	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddMiscItem
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddMiscItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddMiscItem");

	Params::GzInventoryCheatExtension_AddMiscItem Parms{};

	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.AddMiscItemWithQuantity
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::AddMiscItemWithQuantity(const class FString& ItemName, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "AddMiscItemWithQuantity");

	Params::GzInventoryCheatExtension_AddMiscItemWithQuantity Parms{};

	Parms.ItemName = std::move(ItemName);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ApplySkinForActiveWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           SkinItemName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::ApplySkinForActiveWeapon(const class FString& SkinItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ApplySkinForActiveWeapon");

	Params::GzInventoryCheatExtension_ApplySkinForActiveWeapon Parms{};

	Parms.SkinItemName = std::move(SkinItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ApplySkinForLimb
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinItemName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::ApplySkinForLimb(int32 LimbType, const class FString& SkinItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ApplySkinForLimb");

	Params::GzInventoryCheatExtension_ApplySkinForLimb Parms{};

	Parms.LimbType = LimbType;
	Parms.SkinItemName = std::move(SkinItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.DropCurrentWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzInventoryCheatExtension::DropCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "DropCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.RemoveAttachmentFromActiveWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           AttachmentTypeStr                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::RemoveAttachmentFromActiveWeapon(const class FString& AttachmentTypeStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "RemoveAttachmentFromActiveWeapon");

	Params::GzInventoryCheatExtension_RemoveAttachmentFromActiveWeapon Parms{};

	Parms.AttachmentTypeStr = std::move(AttachmentTypeStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.RemoveSkinFromActiveWeapon
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzInventoryCheatExtension::RemoveSkinFromActiveWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "RemoveSkinFromActiveWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.RemoveSkinFromLimb
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::RemoveSkinFromLimb(int32 LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "RemoveSkinFromLimb");

	Params::GzInventoryCheatExtension_RemoveSkinFromLimb Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.SaveInventoryForRespawn
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzInventoryCheatExtension::SaveInventoryForRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "SaveInventoryForRespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowEquippedItems
// (Final, Exec, Native, Public)

void UGzInventoryCheatExtension::ShowEquippedItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowEquippedItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.PrintInventoryItems
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::PrintInventoryItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "PrintInventoryItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowAllAttachments
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowAllAttachments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowAllAttachments");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowAllConsumables
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowAllConsumables() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowAllConsumables");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowAllCyberLimbs
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowAllCyberLimbs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowAllCyberLimbs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowAllMiscItems
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowAllMiscItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowAllMiscItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowAllWeapons
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowAllWeapons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowAllWeapons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowCurrentSkinForActiveWeapon
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowCurrentSkinForActiveWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowCurrentSkinForActiveWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowSuitableAttachmentsOfTypeForActiveWeapon
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           AttachmentTypeStr                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInventoryCheatExtension::ShowSuitableAttachmentsOfTypeForActiveWeapon(const class FString& AttachmentTypeStr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowSuitableAttachmentsOfTypeForActiveWeapon");

	Params::GzInventoryCheatExtension_ShowSuitableAttachmentsOfTypeForActiveWeapon Parms{};

	Parms.AttachmentTypeStr = std::move(AttachmentTypeStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInventoryCheatExtension.ShowSuitableSkinsForActiveWeapon
// (Final, Exec, Native, Public, Const)

void UGzInventoryCheatExtension::ShowSuitableSkinsForActiveWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInventoryCheatExtension", "ShowSuitableSkinsForActiveWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzSceneManager.GzSceneChangedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGameplayTag                     SceneTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSceneChangedEventData         EventData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzSceneManager::GzSceneChangedDynamic__DelegateSignature(const struct FGameplayTag& SceneTag, const struct FGzSceneChangedEventData& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSceneManager", "GzSceneChangedDynamic__DelegateSignature");

	Params::GzSceneManager_GzSceneChangedDynamic__DelegateSignature Parms{};

	Parms.SceneTag = std::move(SceneTag);
	Parms.EventData = std::move(EventData);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzSceneManager.GzSceneUpdatedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGameplayTag                     SceneTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSceneChangedEventData         EventData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzSceneManager::GzSceneUpdatedDynamic__DelegateSignature(const struct FGameplayTag& SceneTag, const struct FGzSceneChangedEventData& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSceneManager", "GzSceneUpdatedDynamic__DelegateSignature");

	Params::GzSceneManager_GzSceneUpdatedDynamic__DelegateSignature Parms{};

	Parms.SceneTag = std::move(SceneTag);
	Parms.EventData = std::move(EventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSceneManager.GetTransitionParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     From                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     To                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzSceneTransitionParametersReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzSceneTransitionParameters AGzSceneManager::GetTransitionParameters(const struct FGameplayTag& From, const struct FGameplayTag& To) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSceneManager", "GetTransitionParameters");

	Params::GzSceneManager_GetTransitionParameters Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.Instance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzBattleRoyaleZoneManager*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBattleRoyaleZoneManager* AGzBattleRoyaleZoneManager::Instance(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBattleRoyaleZoneManager", "Instance");

	Params::GzBattleRoyaleZoneManager_Instance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.OnRep_CurrentStageData
// (Final, Native, Private)

void AGzBattleRoyaleZoneManager::OnRep_CurrentStageData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "OnRep_CurrentStageData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneManager.ResetLastOverloadedZone
// (Final, Native, Public, BlueprintCallable)

void AGzBattleRoyaleZoneManager::ResetLastOverloadedZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "ResetLastOverloadedZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneManager.SelectLastOverloadedZoneByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SelectedZoneName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SelectedLastZoneIndex                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SelectedZonePlayerID                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzBattleRoyaleZoneManager::SelectLastOverloadedZoneByName(const class FName& SelectedZoneName, const int32 SelectedLastZoneIndex, const int32 SelectedZonePlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "SelectLastOverloadedZoneByName");

	Params::GzBattleRoyaleZoneManager_SelectLastOverloadedZoneByName Parms{};

	Parms.SelectedZoneName = SelectedZoneName;
	Parms.SelectedLastZoneIndex = SelectedLastZoneIndex;
	Parms.SelectedZonePlayerID = SelectedZonePlayerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBattleRoyaleZoneManager.ExpandZone
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   CurrentRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxExpansionRadius                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZoneManager::ExpandZone(float CurrentRadius, float MaxExpansionRadius, float DeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "ExpandZone");

	Params::GzBattleRoyaleZoneManager_ExpandZone Parms{};

	Parms.CurrentRadius = CurrentRadius;
	Parms.MaxExpansionRadius = MaxExpansionRadius;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetAvailableLastZoneData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzZoneSelectionData>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzZoneSelectionData> AGzBattleRoyaleZoneManager::GetAvailableLastZoneData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetAvailableLastZoneData");

	Params::GzBattleRoyaleZoneManager_GetAvailableLastZoneData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetCurrentStageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzBattleRoyaleZoneManager::GetCurrentStageIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetCurrentStageIndex");

	Params::GzBattleRoyaleZoneManager_GetCurrentStageIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetLastOverloadedZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzBattleRoyaleZone*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBattleRoyaleZone* AGzBattleRoyaleZoneManager::GetLastOverloadedZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetLastOverloadedZone");

	Params::GzBattleRoyaleZoneManager_GetLastOverloadedZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetOverloadTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZoneManager::GetOverloadTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetOverloadTime");

	Params::GzBattleRoyaleZoneManager_GetOverloadTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetOverloadWaitPeriodTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZoneManager::GetOverloadWaitPeriodTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetOverloadWaitPeriodTime");

	Params::GzBattleRoyaleZoneManager_GetOverloadWaitPeriodTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetPlayerActivatedOverload
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzBattleRoyaleZoneManager::GetPlayerActivatedOverload() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetPlayerActivatedOverload");

	Params::GzBattleRoyaleZoneManager_GetPlayerActivatedOverload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetWaitPeriodEndTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZoneManager::GetWaitPeriodEndTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetWaitPeriodEndTime");

	Params::GzBattleRoyaleZoneManager_GetWaitPeriodEndTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetZoneByPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzBattleRoyaleZone*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBattleRoyaleZone* AGzBattleRoyaleZoneManager::GetZoneByPosition(const struct FVector& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetZoneByPosition");

	Params::GzBattleRoyaleZoneManager_GetZoneByPosition Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.GetZoneCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzBattleRoyaleZoneManager::GetZoneCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "GetZoneCount");

	Params::GzBattleRoyaleZoneManager_GetZoneCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.IsInAnyOverloadedZone
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZoneManager::IsInAnyOverloadedZone(const struct FVector& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "IsInAnyOverloadedZone");

	Params::GzBattleRoyaleZoneManager_IsInAnyOverloadedZone Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.IsInOverloadedZoneRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzBattleRoyaleZone*              Zone                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZoneManager::IsInOverloadedZoneRadius(class AGzBattleRoyaleZone* Zone, const struct FVector& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "IsInOverloadedZoneRadius");

	Params::GzBattleRoyaleZoneManager_IsInOverloadedZoneRadius Parms{};

	Parms.Zone = Zone;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.IsOverloadStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBattleRoyaleZoneManager::IsOverloadStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "IsOverloadStarted");

	Params::GzBattleRoyaleZoneManager_IsOverloadStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBattleRoyaleZoneManager.ShrinkZone
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   CurrentRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxExpansionRadius                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzBattleRoyaleZoneManager::ShrinkZone(float CurrentRadius, float MaxExpansionRadius, float DeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBattleRoyaleZoneManager", "ShrinkZone");

	Params::GzBattleRoyaleZoneManager_ShrinkZone Parms{};

	Parms.CurrentRadius = CurrentRadius;
	Parms.MaxExpansionRadius = MaxExpansionRadius;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutSelectionComponent.TryGiveLoadout
// (Final, BlueprintCosmetic, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionComponent::TryGiveLoadout(class AGzCharacter* Player, const struct FGuid& LoadoutGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionComponent", "TryGiveLoadout");

	Params::GzLoadoutSelectionComponent_TryGiveLoadout Parms{};

	Parms.Player = Player;
	Parms.LoadoutGuid = std::move(LoadoutGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionComponent.CanGiveLoadout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutSelectionComponent::CanGiveLoadout(const class AGzCharacter* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionComponent", "CanGiveLoadout");

	Params::GzLoadoutSelectionComponent_CanGiveLoadout Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutSelectionComponent.OnRep_LoadoutGrantedPlayerIds
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<int32>                           OldLoadoutGrantedPlayerIds                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionComponent::OnRep_LoadoutGrantedPlayerIds(const TArray<int32>& OldLoadoutGrantedPlayerIds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionComponent", "OnRep_LoadoutGrantedPlayerIds");

	Params::GzLoadoutSelectionComponent_OnRep_LoadoutGrantedPlayerIds Parms{};

	Parms.OldLoadoutGrantedPlayerIds = std::move(OldLoadoutGrantedPlayerIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlackboardCoverData.FreeCover
// (Final, Native, Public, BlueprintCallable)

void UGzBlackboardCoverData::FreeCover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlackboardCoverData", "FreeCover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlackboardCoverData.HasData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlackboardCoverData::HasData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlackboardCoverData", "HasData");

	Params::GzBlackboardCoverData_HasData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintCVarHelper.SetCVarName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintCVarHelper::SetCVarName(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "SetCVarName");

	Params::GzBlueprintCVarHelper_SetCVarName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintCVarHelper.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintCVarHelper::SetValue(const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "SetValue");

	Params::GzBlueprintCVarHelper_SetValue Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintCVarHelper.GetCVarName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintCVarHelper::GetCVarName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "GetCVarName");

	Params::GzBlueprintCVarHelper_GetCVarName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintCVarHelper.GetDesciptionMultiline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzBlueprintCVarHelper::GetDesciptionMultiline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "GetDesciptionMultiline");

	Params::GzBlueprintCVarHelper_GetDesciptionMultiline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintCVarHelper.GetDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintCVarHelper::GetDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "GetDescription");

	Params::GzBlueprintCVarHelper_GetDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintCVarHelper.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintCVarHelper::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBlueprintCVarHelper", "GetValue");

	Params::GzBlueprintCVarHelper_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.BindObjectInputDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ObjectBindTo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            Pawn                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::BindObjectInputDelegates(class UObject* ObjectBindTo, const class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "BindObjectInputDelegates");

	Params::GzBlueprintFunctionLibrary_BindObjectInputDelegates Parms{};

	Parms.ObjectBindTo = ObjectBindTo;
	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.CanSpectateSomebodyElse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzPlayerController*              Viewer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::CanSpectateSomebodyElse(class AGzPlayerController* Viewer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "CanSpectateSomebodyElse");

	Params::GzBlueprintFunctionLibrary_CanSpectateSomebodyElse Parms{};

	Parms.Viewer = Viewer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.CircleAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzCircle2D                      Circle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintFunctionLibrary::CircleAsString(const struct FGzCircle2D& Circle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "CircleAsString");

	Params::GzBlueprintFunctionLibrary_CircleAsString Parms{};

	Parms.Circle = std::move(Circle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.ClearStencilValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::ClearStencilValue(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "ClearStencilValue");

	Params::GzBlueprintFunctionLibrary_ClearStencilValue Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.ConvertWorldLocationToWidgetPositionWithScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldOrigin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GameplayArea                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleFactor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WidgetPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::ConvertWorldLocationToWidgetPositionWithScale(const struct FVector& WorldLocation, const struct FVector& WorldOrigin, float GameplayArea, float ScaleFactor, struct FVector2D* WidgetPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "ConvertWorldLocationToWidgetPositionWithScale");

	Params::GzBlueprintFunctionLibrary_ConvertWorldLocationToWidgetPositionWithScale Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.WorldOrigin = std::move(WorldOrigin);
	Parms.GameplayArea = GameplayArea;
	Parms.ScaleFactor = ScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WidgetPosition != nullptr)
		*WidgetPosition = std::move(Parms.WidgetPosition);
}


// Function G01.GzBlueprintFunctionLibrary.DoesSupportRayTracing
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::DoesSupportRayTracing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "DoesSupportRayTracing");

	Params::GzBlueprintFunctionLibrary_DoesSupportRayTracing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.FilterGameplayTagContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            Container                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            OtherContainer                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bFilterExact                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGzBlueprintFunctionLibrary::FilterGameplayTagContainer(const struct FGameplayTagContainer& Container, const struct FGameplayTagContainer& OtherContainer, const bool bFilterExact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "FilterGameplayTagContainer");

	Params::GzBlueprintFunctionLibrary_FilterGameplayTagContainer Parms{};

	Parms.Container = std::move(Container);
	Parms.OtherContainer = std::move(OtherContainer);
	Parms.bFilterExact = bFilterExact;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.FindClosestBone
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpactPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzAttachmentPoint               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGzAttachmentPoint UGzBlueprintFunctionLibrary::FindClosestBone(class AActor* ActorPtr, const struct FVector& ImpactPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "FindClosestBone");

	Params::GzBlueprintFunctionLibrary_FindClosestBone Parms{};

	Parms.ActorPtr = ActorPtr;
	Parms.ImpactPoint = std::move(ImpactPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetAiInfo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AiId                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AGzAIInfo*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzAIInfo* UGzBlueprintFunctionLibrary::GetAiInfo(const class UObject* WorldContextObject, int32 AiId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetAiInfo");

	Params::GzBlueprintFunctionLibrary_GetAiInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AiId = AiId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetAiManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAIManager*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIManager* UGzBlueprintFunctionLibrary::GetAiManager(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetAiManager");

	Params::GzBlueprintFunctionLibrary_GetAiManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetChangelistBuiltFrom
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UGzBlueprintFunctionLibrary::GetChangelistBuiltFrom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetChangelistBuiltFrom");

	Params::GzBlueprintFunctionLibrary_GetChangelistBuiltFrom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetConsoleAccountId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintFunctionLibrary::GetConsoleAccountId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetConsoleAccountId");

	Params::GzBlueprintFunctionLibrary_GetConsoleAccountId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetEnumMaxValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                            Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UGzBlueprintFunctionLibrary::GetEnumMaxValue(const class UEnum* Enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetEnumMaxValue");

	Params::GzBlueprintFunctionLibrary_GetEnumMaxValue Parms{};

	Parms.Enum = Enum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetEnumValueByNameString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                            Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UGzBlueprintFunctionLibrary::GetEnumValueByNameString(const class UEnum* Enum, const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetEnumValueByNameString");

	Params::GzBlueprintFunctionLibrary_GetEnumValueByNameString Parms{};

	Parms.Enum = Enum;
	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetFirstLocalPlayerController
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerController* UGzBlueprintFunctionLibrary::GetFirstLocalPlayerController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetFirstLocalPlayerController");

	Params::GzBlueprintFunctionLibrary_GetFirstLocalPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetGameUserSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameUserSettings* UGzBlueprintFunctionLibrary::GetGameUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetGameUserSettings");

	Params::GzBlueprintFunctionLibrary_GetGameUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetLimbUIActivationSubsystem
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLimbUIActivationSubsystem*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbUIActivationSubsystem* UGzBlueprintFunctionLibrary::GetLimbUIActivationSubsystem(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetLimbUIActivationSubsystem");

	Params::GzBlueprintFunctionLibrary_GetLimbUIActivationSubsystem Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetNameStringByEnumValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                            Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzBlueprintFunctionLibrary::GetNameStringByEnumValue(const class UEnum* Enum, int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetNameStringByEnumValue");

	Params::GzBlueprintFunctionLibrary_GetNameStringByEnumValue Parms{};

	Parms.Enum = Enum;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetNetworkLag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzBlueprintFunctionLibrary::GetNetworkLag(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetNetworkLag");

	Params::GzBlueprintFunctionLibrary_GetNetworkLag Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPawnByCharacterId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CharacterIdInterfaceActor                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzBlueprintFunctionLibrary::GetPawnByCharacterId(const class UObject* WorldContextObject, class AActor* CharacterIdInterfaceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPawnByCharacterId");

	Params::GzBlueprintFunctionLibrary_GetPawnByCharacterId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CharacterIdInterfaceActor = CharacterIdInterfaceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPawnById
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzAdvancedIdType                ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzBlueprintFunctionLibrary::GetPawnById(const class UObject* WorldContextObject, const struct FGzAdvancedIdType& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPawnById");

	Params::GzBlueprintFunctionLibrary_GetPawnById Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPersistentPlayerState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzBlueprintFunctionLibrary::GetPersistentPlayerState(const class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPersistentPlayerState");

	Params::GzBlueprintFunctionLibrary_GetPersistentPlayerState Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPlatformMasks
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzPlatformMasks                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzPlatformMasks UGzBlueprintFunctionLibrary::GetPlatformMasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPlatformMasks");

	Params::GzBlueprintFunctionLibrary_GetPlatformMasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* UGzBlueprintFunctionLibrary::GetPlayerController(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPlayerController");

	Params::GzBlueprintFunctionLibrary_GetPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPlayerPostProcessControllerComponent
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzPostProcessControllerComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPostProcessControllerComponent* UGzBlueprintFunctionLibrary::GetPlayerPostProcessControllerComponent(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPlayerPostProcessControllerComponent");

	Params::GzBlueprintFunctionLibrary_GetPlayerPostProcessControllerComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetPlayerState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzBlueprintFunctionLibrary::GetPlayerState(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetPlayerState");

	Params::GzBlueprintFunctionLibrary_GetPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetRandomDeviationFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Deviation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzBlueprintFunctionLibrary::GetRandomDeviationFloat(float Value, float Deviation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetRandomDeviationFloat");

	Params::GzBlueprintFunctionLibrary_GetRandomDeviationFloat Parms{};

	Parms.Value = Value;
	Parms.Deviation = Deviation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetSignedAngle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzBlueprintFunctionLibrary::GetSignedAngle(const struct FVector2D& A, const struct FVector2D& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetSignedAngle");

	Params::GzBlueprintFunctionLibrary_GetSignedAngle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetStencilValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDepthStencilValue                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDepthStencilValue UGzBlueprintFunctionLibrary::GetStencilValue(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetStencilValue");

	Params::GzBlueprintFunctionLibrary_GetStencilValue Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetTimeMinutesSeconds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InSeconds                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutMinutes                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSeconds                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::GetTimeMinutesSeconds(float InSeconds, float* OutMinutes, float* OutSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetTimeMinutesSeconds");

	Params::GzBlueprintFunctionLibrary_GetTimeMinutesSeconds Parms{};

	Parms.InSeconds = InSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMinutes != nullptr)
		*OutMinutes = Parms.OutMinutes;

	if (OutSeconds != nullptr)
		*OutSeconds = Parms.OutSeconds;
}


// Function G01.GzBlueprintFunctionLibrary.GetUIDeveloperSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UGzUISettings*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzUISettings* UGzBlueprintFunctionLibrary::GetUIDeveloperSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetUIDeveloperSettings");

	Params::GzBlueprintFunctionLibrary_GetUIDeveloperSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.GetWorldSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWorldSettings*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzWorldSettings* UGzBlueprintFunctionLibrary::GetWorldSettings(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "GetWorldSettings");

	Params::GzBlueprintFunctionLibrary_GetWorldSettings Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsAlive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsAlive(const class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsAlive");

	Params::GzBlueprintFunctionLibrary_IsAlive Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsConsole
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsConsole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsConsole");

	Params::GzBlueprintFunctionLibrary_IsConsole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsCoverValid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           ObserverActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CoverLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsCoverValid(class AActor* ObserverActor, class AActor* TargetActor, const struct FVector& CoverLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsCoverValid");

	Params::GzBlueprintFunctionLibrary_IsCoverValid Parms{};

	Parms.ObserverActor = ObserverActor;
	Parms.TargetActor = TargetActor;
	Parms.CoverLocation = std::move(CoverLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsLocalViewTarget
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                            InPawn                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsLocalViewTarget(const class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsLocalViewTarget");

	Params::GzBlueprintFunctionLibrary_IsLocalViewTarget Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsPeerToPeer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsPeerToPeer(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsPeerToPeer");

	Params::GzBlueprintFunctionLibrary_IsPeerToPeer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsPointInCircle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzCircle2D                      Circle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsPointInCircle(const struct FVector2D& Point, const struct FGzCircle2D& Circle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsPointInCircle");

	Params::GzBlueprintFunctionLibrary_IsPointInCircle Parms{};

	Parms.Point = std::move(Point);
	Parms.Circle = std::move(Circle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsPointInPolygon
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                PolygonBorder                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsPointInPolygon(const struct FVector2D& Point, const TArray<struct FVector2D>& PolygonBorder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsPointInPolygon");

	Params::GzBlueprintFunctionLibrary_IsPointInPolygon Parms{};

	Parms.Point = std::move(Point);
	Parms.PolygonBorder = std::move(PolygonBorder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsSameLocalPlayerTeamId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CallerTeamId                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsSameLocalPlayerTeamId(const class UObject* WorldContextObject, const int32 CallerTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsSameLocalPlayerTeamId");

	Params::GzBlueprintFunctionLibrary_IsSameLocalPlayerTeamId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CallerTeamId = CallerTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsShipping
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsShipping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsShipping");

	Params::GzBlueprintFunctionLibrary_IsShipping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsSpectatedViewTarget
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                            InPawn                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsSpectatedViewTarget(const class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsSpectatedViewTarget");

	Params::GzBlueprintFunctionLibrary_IsSpectatedViewTarget Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.IsWatermarkEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::IsWatermarkEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "IsWatermarkEnabled");

	Params::GzBlueprintFunctionLibrary_IsWatermarkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.RefreshCharactersVisibilityStates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::RefreshCharactersVisibilityStates(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "RefreshCharactersVisibilityStates");

	Params::GzBlueprintFunctionLibrary_RefreshCharactersVisibilityStates Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.SetInputMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzInputMode                            InputMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          WidgetToFocus                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::SetInputMode(const class UObject* WorldContextObject, EGzInputMode InputMode, class UWidget* WidgetToFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "SetInputMode");

	Params::GzBlueprintFunctionLibrary_SetInputMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputMode = InputMode;
	Parms.WidgetToFocus = WidgetToFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.SetStencilValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDepthStencilValue                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWriteInCustomDepthOnZeroStencil                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::SetStencilValue(const class AActor* Actor, EDepthStencilValue Value, bool bWriteInCustomDepthOnZeroStencil)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "SetStencilValue");

	Params::GzBlueprintFunctionLibrary_SetStencilValue Parms{};

	Parms.Actor = Actor;
	Parms.Value = Value;
	Parms.bWriteInCustomDepthOnZeroStencil = bWriteInCustomDepthOnZeroStencil;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.ShouldShowComparisonTooltip
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::ShouldShowComparisonTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "ShouldShowComparisonTooltip");

	Params::GzBlueprintFunctionLibrary_ShouldShowComparisonTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.SpawnNSAtTransformsWithDelay
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       WorldTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDelayedVFXSpawnData           DelayedVFXSpawnData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::SpawnNSAtTransformsWithDelay(class UObject* WorldContextObject, const struct FTransform& WorldTransform, const struct FGzDelayedVFXSpawnData& DelayedVFXSpawnData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "SpawnNSAtTransformsWithDelay");

	Params::GzBlueprintFunctionLibrary_SpawnNSAtTransformsWithDelay Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldTransform = std::move(WorldTransform);
	Parms.DelayedVFXSpawnData = std::move(DelayedVFXSpawnData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.StartListening
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::StartListening(class UObject* WorldContextObject, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "StartListening");

	Params::GzBlueprintFunctionLibrary_StartListening Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.SupportsQualityMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::SupportsQualityMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "SupportsQualityMode");

	Params::GzBlueprintFunctionLibrary_SupportsQualityMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.TriggerEquipWeaponAtSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     PocketSlot                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzBlueprintFunctionLibrary::TriggerEquipWeaponAtSlot(class APawn* Character, const struct FGameplayTag& PocketSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "TriggerEquipWeaponAtSlot");

	Params::GzBlueprintFunctionLibrary_TriggerEquipWeaponAtSlot Parms{};

	Parms.Character = Character;
	Parms.PocketSlot = std::move(PocketSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBlueprintFunctionLibrary.UnbindObjectInputDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          BindingOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            Pawn                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::UnbindObjectInputDelegates(class UObject* BindingOwner, const class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "UnbindObjectInputDelegates");

	Params::GzBlueprintFunctionLibrary_UnbindObjectInputDelegates Parms{};

	Parms.BindingOwner = BindingOwner;
	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.UnsetConsoleVariable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ConsoleVariableToUnset                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBlueprintFunctionLibrary::UnsetConsoleVariable(const class FString& ConsoleVariableToUnset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "UnsetConsoleVariable");

	Params::GzBlueprintFunctionLibrary_UnsetConsoleVariable Parms{};

	Parms.ConsoleVariableToUnset = std::move(ConsoleVariableToUnset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBlueprintFunctionLibrary.WorldRotationToAzimuth
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         WorldRotation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzBlueprintFunctionLibrary::WorldRotationToAzimuth(const struct FRotator& WorldRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBlueprintFunctionLibrary", "WorldRotationToAzimuth");

	Params::GzBlueprintFunctionLibrary_WorldRotationToAzimuth Parms{};

	Parms.WorldRotation = std::move(WorldRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCarTrackTransport.ReceiveCarTransformUpdated
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AGzCarTrackTransport::ReceiveCarTransformUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCarTrackTransport", "ReceiveCarTransformUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCarTrackTransport.GetHullTransformLocal
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTransform AGzCarTrackTransport::GetHullTransformLocal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCarTrackTransport", "GetHullTransformLocal");

	Params::GzCarTrackTransport_GetHullTransformLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCarTrackTransport.GetWheelTransform
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTransform AGzCarTrackTransport::GetWheelTransform(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCarTrackTransport", "GetWheelTransform");

	Params::GzCarTrackTransport_GetWheelTransform Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbUIActivationSubsystem.EndActivation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbUIActivationSubsystem::EndActivation(EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbUIActivationSubsystem", "EndActivation");

	Params::GzLimbUIActivationSubsystem_EndActivation Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbUIActivationSubsystem.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbUIActivationSubsystem::OnViewTargetChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbUIActivationSubsystem", "OnViewTargetChanged");

	Params::GzLimbUIActivationSubsystem_OnViewTargetChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbUIActivationSubsystem.SetActivationValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbUIActivationSubsystem::SetActivationValue(EGzLimbType LimbType, float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbUIActivationSubsystem", "SetActivationValue");

	Params::GzLimbUIActivationSubsystem_SetActivationValue Parms{};

	Parms.LimbType = LimbType;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbUIActivationSubsystem.StartActivation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbGaugeData                 ActivationData                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzLimbUIActivationSubsystem::StartActivation(EGzLimbType LimbType, const struct FGzLimbGaugeData& ActivationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbUIActivationSubsystem", "StartActivation");

	Params::GzLimbUIActivationSubsystem_StartActivation Parms{};

	Parms.LimbType = LimbType;
	Parms.ActivationData = std::move(ActivationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbUIActivationSubsystem.UpdateActivationValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AddValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbUIActivationSubsystem::UpdateActivationValue(EGzLimbType LimbType, float AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbUIActivationSubsystem", "UpdateActivationValue");

	Params::GzLimbUIActivationSubsystem_UpdateActivationValue Parms{};

	Parms.LimbType = LimbType;
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLaserAttachmentBehaviour.Enable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLaserAttachmentBehaviour::Enable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLaserAttachmentBehaviour", "Enable");

	Params::GzLaserAttachmentBehaviour_Enable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLaserAttachmentBehaviour.UpdatePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult UGzLaserAttachmentBehaviour::UpdatePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLaserAttachmentBehaviour", "UpdatePoint");

	Params::GzLaserAttachmentBehaviour_UpdatePoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicleConfig.HasSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzVehicleSeatType                      VehicleSeatType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzVehicleConfig::HasSeat(const EGzVehicleSeatType VehicleSeatType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleConfig", "HasSeat");

	Params::GzVehicleConfig_HasSeat Parms{};

	Parms.VehicleSeatType = VehicleSeatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCondition.OnRep_State
// (Final, Native, Private)

void UGzCondition::OnRep_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCondition", "OnRep_State");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUnlockCondition.MakeUnlockCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Key                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_LockedCondition                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzUnlockCondition::MakeUnlockCondition(class AGzAdvancedMission* Mission, class UGzCondition* Key, class UGzCondition* Param_LockedCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUnlockCondition", "MakeUnlockCondition");

	Params::GzUnlockCondition_MakeUnlockCondition Parms{};

	Parms.Mission = Mission;
	Parms.Key = Key;
	Parms.Param_LockedCondition = Param_LockedCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.OnOnwerControllerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      OldController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      NewController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzChaosWheeledVehicleMovementComponent::OnOnwerControllerChanged(class APawn* Pawn, class AController* OldController, class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "OnOnwerControllerChanged");

	Params::GzChaosWheeledVehicleMovementComponent_OnOnwerControllerChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.OldController = OldController;
	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetBrakeInput_Replicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetBrakeInput_Replicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetBrakeInput_Replicated");

	Params::GzChaosWheeledVehicleMovementComponent_GetBrakeInput_Replicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetEngineRPM
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetEngineRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetEngineRPM");

	Params::GzChaosWheeledVehicleMovementComponent_GetEngineRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetHandbrakeInput_Replicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChaosWheeledVehicleMovementComponent::GetHandbrakeInput_Replicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetHandbrakeInput_Replicated");

	Params::GzChaosWheeledVehicleMovementComponent_GetHandbrakeInput_Replicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetSteerInput_Replicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetSteerInput_Replicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetSteerInput_Replicated");

	Params::GzChaosWheeledVehicleMovementComponent_GetSteerInput_Replicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetTargetGear_Replicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzChaosWheeledVehicleMovementComponent::GetTargetGear_Replicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetTargetGear_Replicated");

	Params::GzChaosWheeledVehicleMovementComponent_GetTargetGear_Replicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetThrottleInput_Replicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetThrottleInput_Replicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetThrottleInput_Replicated");

	Params::GzChaosWheeledVehicleMovementComponent_GetThrottleInput_Replicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChaosWheeledVehicleMovementComponent::GetVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetVelocity");

	Params::GzChaosWheeledVehicleMovementComponent_GetVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetWheelCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzChaosWheeledVehicleMovementComponent::GetWheelCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetWheelCount");

	Params::GzChaosWheeledVehicleMovementComponent_GetWheelCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetWheelPhysicalMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* UGzChaosWheeledVehicleMovementComponent::GetWheelPhysicalMaterial(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetWheelPhysicalMaterial");

	Params::GzChaosWheeledVehicleMovementComponent_GetWheelPhysicalMaterial Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetWheelSteeringAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetWheelSteeringAngle(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetWheelSteeringAngle");

	Params::GzChaosWheeledVehicleMovementComponent_GetWheelSteeringAngle Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.GetWheelSuspensionPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChaosWheeledVehicleMovementComponent::GetWheelSuspensionPercentage(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "GetWheelSuspensionPercentage");

	Params::GzChaosWheeledVehicleMovementComponent_GetWheelSuspensionPercentage Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.IsAnyWheelOnGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChaosWheeledVehicleMovementComponent::IsAnyWheelOnGround() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "IsAnyWheelOnGround");

	Params::GzChaosWheeledVehicleMovementComponent_IsAnyWheelOnGround Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.IsWheelOnGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChaosWheeledVehicleMovementComponent::IsWheelOnGround(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "IsWheelOnGround");

	Params::GzChaosWheeledVehicleMovementComponent_IsWheelOnGround Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.IsWheelSkidding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChaosWheeledVehicleMovementComponent::IsWheelSkidding(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "IsWheelSkidding");

	Params::GzChaosWheeledVehicleMovementComponent_IsWheelSkidding Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChaosWheeledVehicleMovementComponent.IsWheelSlipping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChaosWheeledVehicleMovementComponent::IsWheelSlipping(int32 WheelIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChaosWheeledVehicleMovementComponent", "IsWheelSlipping");

	Params::GzChaosWheeledVehicleMovementComponent_IsWheelSlipping Parms{};

	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.CooldownFinished
// (Native, Protected)

void UGzChargeableAbilityComponent::CooldownFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "CooldownFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzChargeableAbilityComponent.GzChargeAbilityEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzChargeableAbilityComponent::GzChargeAbilityEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GzChargeAbilityEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.GzChargeableAbilityComponent.GzLimbAbilityAimAssistTargetChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           PreviousTarget                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzChargeableAbilityComponent::GzLimbAbilityAimAssistTargetChanged__DelegateSignature(class AActor* PreviousTarget, class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GzLimbAbilityAimAssistTargetChanged__DelegateSignature");

	Params::GzChargeableAbilityComponent_GzLimbAbilityAimAssistTargetChanged__DelegateSignature Parms{};

	Parms.PreviousTarget = PreviousTarget;
	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzChargeableAbilityComponent.OnAssetsLoaded
// (Native, Protected)

void UGzChargeableAbilityComponent::OnAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "OnAssetsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChargeableAbilityComponent.CanShoot
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChargeableAbilityComponent::CanShoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "CanShoot");

	Params::GzChargeableAbilityComponent_CanShoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetAimAssistRange
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetAimAssistRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetAimAssistRange");

	Params::GzChargeableAbilityComponent_GetAimAssistRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetAimAssistSingleTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzChargeableAbilityComponent::GetAimAssistSingleTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetAimAssistSingleTarget");

	Params::GzChargeableAbilityComponent_GetAimAssistSingleTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetAimAssistTargets
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AActor*>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AActor*> UGzChargeableAbilityComponent::GetAimAssistTargets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetAimAssistTargets");

	Params::GzChargeableAbilityComponent_GetAimAssistTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetAimAssistViewDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetAimAssistViewDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetAimAssistViewDirection");

	Params::GzChargeableAbilityComponent_GetAimAssistViewDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetAimAssistViewLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetAimAssistViewLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetAimAssistViewLocation");

	Params::GzChargeableAbilityComponent_GetAimAssistViewLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetChargeProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetChargeProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetChargeProgress");

	Params::GzChargeableAbilityComponent_GetChargeProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetCooldownDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetCooldownDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetCooldownDuration");

	Params::GzChargeableAbilityComponent_GetCooldownDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetCooldownProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetCooldownProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetCooldownProgress");

	Params::GzChargeableAbilityComponent_GetCooldownProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetLaunchDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetLaunchDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetLaunchDirection");

	Params::GzChargeableAbilityComponent_GetLaunchDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetLaunchSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetLaunchSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetLaunchSpeed");

	Params::GzChargeableAbilityComponent_GetLaunchSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetLaunchWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetLaunchWorldLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetLaunchWorldLocation");

	Params::GzChargeableAbilityComponent_GetLaunchWorldLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetLaunchWorldLocation_Offset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetLaunchWorldLocation_Offset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetLaunchWorldLocation_Offset");

	Params::GzChargeableAbilityComponent_GetLaunchWorldLocation_Offset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetLaunchWorldLocation_Socket
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzChargeableAbilityComponent::GetLaunchWorldLocation_Socket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetLaunchWorldLocation_Socket");

	Params::GzChargeableAbilityComponent_GetLaunchWorldLocation_Socket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.GetProjectileGravityMultiplier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzChargeableAbilityComponent::GetProjectileGravityMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "GetProjectileGravityMultiplier");

	Params::GzChargeableAbilityComponent_GetProjectileGravityMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.IsCharging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChargeableAbilityComponent::IsCharging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "IsCharging");

	Params::GzChargeableAbilityComponent_IsCharging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargeableAbilityComponent.ShouldIgnoreActorForAimAssist
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzChargeableAbilityComponent::ShouldIgnoreActorForAimAssist(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargeableAbilityComponent", "ShouldIgnoreActorForAimAssist");

	Params::GzChargeableAbilityComponent_ShouldIgnoreActorForAimAssist Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzGorillaArmComponent.GzGorillaArmStateDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzGorillaArmComponent::GzGorillaArmStateDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGorillaArmComponent", "GzGorillaArmStateDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGorillaArmComponent.GetDashDirectionAndLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGorillaArmComponent::GetDashDirectionAndLocation(struct FVector* OutDirection, struct FVector* OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGorillaArmComponent", "GetDashDirectionAndLocation");

	Params::GzGorillaArmComponent_GetDashDirectionAndLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);
}


// Function G01.GzHUDStatesSubsystem.OnComebackArenaStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnComebackArenaStateChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnComebackArenaStateChanged");

	Params::GzHUDStatesSubsystem_OnComebackArenaStateChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnDeploymentStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnDeploymentStateChanged(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnDeploymentStateChanged");

	Params::GzHUDStatesSubsystem_OnDeploymentStateChanged Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnEndedSpectating
// (Final, Native, Private)

void UGzHUDStatesSubsystem::OnEndedSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnEndedSpectating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnMatchStateTagsChanged
// (Final, Native, Private)

void UGzHUDStatesSubsystem::OnMatchStateTagsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnMatchStateTagsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnPlayerTagsChanged
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnPlayerTagsChanged(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnPlayerTagsChanged");

	Params::GzHUDStatesSubsystem_OnPlayerTagsChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnSpectatingKillerChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bSpectatingKiller                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnSpectatingKillerChanged(bool bSpectatingKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnSpectatingKillerChanged");

	Params::GzHUDStatesSubsystem_OnSpectatingKillerChanged Parms{};

	Parms.bSpectatingKiller = bSpectatingKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnStartedSpectating
// (Final, Native, Private)

void UGzHUDStatesSubsystem::OnStartedSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnStartedSpectating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnVehicleSeatChanged
// (Final, Native, Private)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      NewSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      OldSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnVehicleSeatChanged(class AGzCharacter* Character, EGzVehicleSeatType NewSeat, EGzVehicleSeatType OldSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnVehicleSeatChanged");

	Params::GzHUDStatesSubsystem_OnVehicleSeatChanged Parms{};

	Parms.Character = Character;
	Parms.NewSeat = NewSeat;
	Parms.OldSeat = OldSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnViewTargetChanged(class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnViewTargetChanged");

	Params::GzHUDStatesSubsystem_OnViewTargetChanged Parms{};

	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.OnViewTargetWeaponChanged
// (Final, Native, Private)
// Parameters:
// struct FGzInvPocketId                   PocketId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDStatesSubsystem::OnViewTargetWeaponChanged(const struct FGzInvPocketId& PocketId, class AGzWeaponActor* WeaponActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "OnViewTargetWeaponChanged");

	Params::GzHUDStatesSubsystem_OnViewTargetWeaponChanged Parms{};

	Parms.PocketId = std::move(PocketId);
	Parms.WeaponActor = WeaponActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDStatesSubsystem.UpdateHUDVisibility
// (Final, Native, Public, BlueprintCallable, Const)

void UGzHUDStatesSubsystem::UpdateHUDVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDStatesSubsystem", "UpdateHUDVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehiclesCheatExtension.DestroyCurrentVehicle
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzVehiclesCheatExtension::DestroyCurrentVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehiclesCheatExtension", "DestroyCurrentVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehiclesCheatExtension.SpawnVehicle
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// int32                                   VehicleClassIndex                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehiclesCheatExtension::SpawnVehicle(const int32 VehicleClassIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehiclesCheatExtension", "SpawnVehicle");

	Params::GzVehiclesCheatExtension_SpawnVehicle Parms{};

	Parms.VehicleClassIndex = VehicleClassIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapController.CreateControllerForMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMapWidget*                     Param_MapWidget                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGzMapController>     ControllerType                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMapController*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMapController* UGzMapController::CreateControllerForMap(class UObject* Parent, class UGzMapWidget* Param_MapWidget, TSubclassOf<class UGzMapController> ControllerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMapController", "CreateControllerForMap");

	Params::GzMapController_CreateControllerForMap Parms{};

	Parms.Parent = Parent;
	Parms.Param_MapWidget = Param_MapWidget;
	Parms.ControllerType = ControllerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.OnInit
// (Event, Protected, BlueprintEvent)

void UGzMapController::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMapController.OnMapClick
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnMapClick(const struct FVector2D& ScreenPosition, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnMapClick");

	Params::GzMapController_OnMapClick Parms{};

	Parms.ScreenPosition = std::move(ScreenPosition);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnMapDoubleClick
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnMapDoubleClick(const struct FVector2D& Vector2D, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnMapDoubleClick");

	Params::GzMapController_OnMapDoubleClick Parms{};

	Parms.Vector2D = std::move(Vector2D);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnMapHover
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnMapHover(const struct FVector2D& Vector2D, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnMapHover");

	Params::GzMapController_OnMapHover Parms{};

	Parms.Vector2D = std::move(Vector2D);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnMapReady
// (Event, Protected, BlueprintEvent)

void UGzMapController::OnMapReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnMapReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMapController.OnMouseButtonUp
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGzMapController::OnMouseButtonUp(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnMouseButtonUp");

	Params::GzMapController_OnMouseButtonUp Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.OnPanelDoubleClick
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGzMapController::OnPanelDoubleClick(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnPanelDoubleClick");

	Params::GzMapController_OnPanelDoubleClick Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.OnPanelHover
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGzMapController::OnPanelHover(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnPanelHover");

	Params::GzMapController_OnPanelHover Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.OnTick
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnTick");

	Params::GzMapController_OnTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapController.OnZoneClick
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UGzMapZoneWidget*                 ZoneWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnZoneClick(class UGzMapZoneWidget* ZoneWidget, const struct FVector2D& Vector2D, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnZoneClick");

	Params::GzMapController_OnZoneClick Parms{};

	Parms.ZoneWidget = ZoneWidget;
	Parms.Vector2D = std::move(Vector2D);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnZoneDoubleClick
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UGzMapZoneWidget*                 ZoneWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnZoneDoubleClick(class UGzMapZoneWidget* ZoneWidget, const struct FVector2D& Vector2D, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnZoneDoubleClick");

	Params::GzMapController_OnZoneDoubleClick Parms{};

	Parms.ZoneWidget = ZoneWidget;
	Parms.Vector2D = std::move(Vector2D);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnZoneEndHover
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMapZoneWidget*                 ZoneWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnZoneEndHover(class UGzMapZoneWidget* ZoneWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnZoneEndHover");

	Params::GzMapController_OnZoneEndHover Parms{};

	Parms.ZoneWidget = ZoneWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.OnZoneStartHover
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UGzMapZoneWidget*                 ZoneWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::OnZoneStartHover(class UGzMapZoneWidget* ZoneWidget, const struct FVector2D& Vector2D, const struct FVector2D& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "OnZoneStartHover");

	Params::GzMapController_OnZoneStartHover Parms{};

	Parms.ZoneWidget = ZoneWidget;
	Parms.Vector2D = std::move(Vector2D);
	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapController.SetMapCenter
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Center                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::SetMapCenter(const struct FVector2D& Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "SetMapCenter");

	Params::GzMapController_SetMapCenter Parms{};

	Parms.Center = std::move(Center);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapController.SetMapRotation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   RotationAngle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::SetMapRotation(float RotationAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "SetMapRotation");

	Params::GzMapController_SetMapRotation Parms{};

	Parms.RotationAngle = RotationAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapController.SetMapZoom
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Zoom                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapController::SetMapZoom(float Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "SetMapZoom");

	Params::GzMapController_SetMapZoom Parms{};

	Parms.Zoom = Zoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapController.CanInteractWithZone
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FName                             ZoneName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMapController::CanInteractWithZone(const class FName& ZoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "CanInteractWithZone");

	Params::GzMapController_CanInteractWithZone Parms{};

	Parms.ZoneName = ZoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.GetMapWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMapWidget*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMapWidget* UGzMapController::GetMapWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "GetMapWidget");

	Params::GzMapController_GetMapWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapController.GetMapWidth
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapController::GetMapWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapController", "GetMapWidth");

	Params::GzMapController_GetMapWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzXRZoneExtension.OnGameModeStageChanged
// (Final, Native, Private)

void UGzXRZoneExtension::OnGameModeStageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXRZoneExtension", "OnGameModeStageChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXRZoneExtension.OnPlayableAreaReady
// (Final, Native, Private)

void UGzXRZoneExtension::OnPlayableAreaReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXRZoneExtension", "OnPlayableAreaReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXRZoneExtension.OnStageChanged
// (Final, Native, Private)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXRZoneExtension::OnStageChanged(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXRZoneExtension", "OnStageChanged");

	Params::GzXRZoneExtension_OnStageChanged Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXRZoneExtension.OnZoneAvailable
// (Final, Native, Private)
// Parameters:
// class AGzShrinkingZone*                 Zone                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXRZoneExtension::OnZoneAvailable(class AGzShrinkingZone* Zone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXRZoneExtension", "OnZoneAvailable");

	Params::GzXRZoneExtension_OnZoneAvailable Parms{};

	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatStateWidget.OnControllerInit
// (Final, Native, Private)
// Parameters:
// class AGzPlayerController*              PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatStateWidget::OnControllerInit(class AGzPlayerController* PlayerController, class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnControllerInit");

	Params::GzVoiceChatStateWidget_OnControllerInit Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatStateWidget.OnLocalPlayerTeamChanged
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatStateWidget::OnLocalPlayerTeamChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnLocalPlayerTeamChanged");

	Params::GzVoiceChatStateWidget_OnLocalPlayerTeamChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatStateWidget.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatStateWidget::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnPawnChanged");

	Params::GzVoiceChatStateWidget_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatStateWidget.OnRoomEnter
// (Event, Protected, BlueprintEvent)

void UGzVoiceChatStateWidget::OnRoomEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnRoomEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVoiceChatStateWidget.OnRoomExit
// (Event, Protected, BlueprintEvent)

void UGzVoiceChatStateWidget::OnRoomExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnRoomExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVoiceChatStateWidget.OnTalkerAdded
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGzVoiceChatTalker               NewTalker                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatStateWidget::OnTalkerAdded(const struct FGzVoiceChatTalker& NewTalker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "OnTalkerAdded");

	Params::GzVoiceChatStateWidget_OnTalkerAdded Parms{};

	Parms.NewTalker = std::move(NewTalker);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatStateWidget.SetNormalizedPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatStateWidget::SetNormalizedPosition(const struct FVector2D& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatStateWidget", "SetNormalizedPosition");

	Params::GzVoiceChatStateWidget_SetNormalizedPosition Parms{};

	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteriorCameraVolume.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzInteriorCameraVolume::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteriorCameraVolume", "OnBeginOverlap");

	Params::GzInteriorCameraVolume_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteriorCameraVolume.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzInteriorCameraVolume::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteriorCameraVolume", "OnEndOverlap");

	Params::GzInteriorCameraVolume_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBoundaryZone.GetTeamSpawnPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   TeammatesSpawnOffset                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeammatesCount                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpawnHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDistFromCenter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzTeamSpawnPoints               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzTeamSpawnPoints AGzBoundaryZone::GetTeamSpawnPoints(float TeammatesSpawnOffset, const int32 TeammatesCount, float SpawnHeight, float MaxDistFromCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBoundaryZone", "GetTeamSpawnPoints");

	Params::GzBoundaryZone_GetTeamSpawnPoints Parms{};

	Parms.TeammatesSpawnOffset = TeammatesSpawnOffset;
	Parms.TeammatesCount = TeammatesCount;
	Parms.SpawnHeight = SpawnHeight;
	Parms.MaxDistFromCenter = MaxDistFromCenter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzBoundaryZone.OnRep_ZoneNames
// (Final, Native, Private)

void AGzBoundaryZone::OnRep_ZoneNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBoundaryZone", "OnRep_ZoneNames");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBoundaryZone.SetBounds
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Zones                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzBoundaryZone::SetBounds(const TArray<class FName>& Zones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBoundaryZone", "SetBounds");

	Params::GzBoundaryZone_SetBounds Parms{};

	Parms.Zones = std::move(Zones);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBoundaryZone.IsInsideBoxZoneBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Loc2d                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzBoundaryZone::IsInsideBoxZoneBounds(const struct FVector2D& Loc2d) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBoundaryZone", "IsInsideBoxZoneBounds");

	Params::GzBoundaryZone_IsInsideBoxZoneBounds Parms{};

	Parms.Loc2d = std::move(Loc2d);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSubscriptionManagingComponent.OnSubscriptionsFetchSuccess
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FSubscriptionPlansList           SubscriptionPlansList                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzSubscriptionManagingComponent::OnSubscriptionsFetchSuccess(const struct FSubscriptionPlansList& SubscriptionPlansList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSubscriptionManagingComponent", "OnSubscriptionsFetchSuccess");

	Params::GzSubscriptionManagingComponent_OnSubscriptionsFetchSuccess Parms{};

	Parms.SubscriptionPlansList = std::move(SubscriptionPlansList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBR_LootAndShootStage.OnGridOverloadStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bOverloadActivated                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBR_LootAndShootStage::OnGridOverloadStateChanged(bool bOverloadActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBR_LootAndShootStage", "OnGridOverloadStateChanged");

	Params::GzBR_LootAndShootStage_OnGridOverloadStateChanged Parms{};

	Parms.bOverloadActivated = bOverloadActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBR_LootAndShootStage.OnTeamDefeated
// (Final, Native, Private)
// Parameters:
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBR_LootAndShootStage::OnTeamDefeated(class AGzTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBR_LootAndShootStage", "OnTeamDefeated");

	Params::GzBR_LootAndShootStage_OnTeamDefeated Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBR_MatchInProgressStage.OnTeamChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrevTeamID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewTeamId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBR_MatchInProgressStage::OnTeamChanged(class AGzPlayerState* PlayerState, int32 PrevTeamID, int32 NewTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBR_MatchInProgressStage", "OnTeamChanged");

	Params::GzBR_MatchInProgressStage_OnTeamChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.PrevTeamID = PrevTeamID;
	Parms.NewTeamId = NewTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBR_MatchInProgressStage.OnTeamDefeated
// (Final, Native, Private)
// Parameters:
// class AGzTeam*                          DefeatedTeam                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzBR_MatchInProgressStage::OnTeamDefeated(class AGzTeam* DefeatedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzBR_MatchInProgressStage", "OnTeamDefeated");

	Params::GzBR_MatchInProgressStage_OnTeamDefeated Parms{};

	Parms.DefeatedTeam = DefeatedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXsollaCoreComponent.LaunchPaymentConsole
// (Final, Native, Public)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXsollaCoreComponent::LaunchPaymentConsole(const class FString& AccessToken, int32 OrderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXsollaCoreComponent", "LaunchPaymentConsole");

	Params::GzXsollaCoreComponent_LaunchPaymentConsole Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.OrderId = OrderId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXsollaCoreComponent.OnGeneralXsollaError
// (Final, Native, Public, Const)
// Parameters:
// int32                                   StatusCode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXsollaCoreComponent::OnGeneralXsollaError(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXsollaCoreComponent", "OnGeneralXsollaError");

	Params::GzXsollaCoreComponent_OnGeneralXsollaError Parms{};

	Parms.StatusCode = StatusCode;
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXsollaCoreComponent.OnPaymentBrowserClosed
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bIsManually                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXsollaCoreComponent::OnPaymentBrowserClosed(bool bIsManually) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXsollaCoreComponent", "OnPaymentBrowserClosed");

	Params::GzXsollaCoreComponent_OnPaymentBrowserClosed Parms{};

	Parms.bIsManually = bIsManually;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXsollaCoreComponent.OnStoreSuccessPayment
// (Final, Native, Private, Const)

void UGzXsollaCoreComponent::OnStoreSuccessPayment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXsollaCoreComponent", "OnStoreSuccessPayment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatHelper.BlockPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EpicUserId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatHelper::BlockPlayer(const class UObject* WorldContextObject, const class FString& EpicUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "BlockPlayer");

	Params::GzVoiceChatHelper_BlockPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EpicUserId = std::move(EpicUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatHelper.GetBlockedPlayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzVoiceChatHelper::GetBlockedPlayers(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "GetBlockedPlayers");

	Params::GzVoiceChatHelper_GetBlockedPlayers Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVoiceChatHelper.GetInputDevices
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzVoiceChatAudioDevice>  Result                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzVoiceChatHelper::GetInputDevices(const class UObject* WorldContextObject, TArray<struct FGzVoiceChatAudioDevice>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "GetInputDevices");

	Params::GzVoiceChatHelper_GetInputDevices Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function G01.GzVoiceChatHelper.GetOutputDevices
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzVoiceChatAudioDevice>  Result                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzVoiceChatHelper::GetOutputDevices(const class UObject* WorldContextObject, TArray<struct FGzVoiceChatAudioDevice>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "GetOutputDevices");

	Params::GzVoiceChatHelper_GetOutputDevices Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function G01.GzVoiceChatHelper.GetVoiceChatEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzVoiceChatBlueprintEventsComponent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzVoiceChatBlueprintEventsComponent* UGzVoiceChatHelper::GetVoiceChatEvents(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "GetVoiceChatEvents");

	Params::GzVoiceChatHelper_GetVoiceChatEvents Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVoiceChatHelper.IsPlayerBlocked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EpicUserId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzVoiceChatHelper::IsPlayerBlocked(const class UObject* WorldContextObject, const class FString& EpicUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "IsPlayerBlocked");

	Params::GzVoiceChatHelper_IsPlayerBlocked Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EpicUserId = std::move(EpicUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVoiceChatHelper.SetVoiceState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatHelper::SetVoiceState(const class UObject* WorldContextObject, bool bState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "SetVoiceState");

	Params::GzVoiceChatHelper_SetVoiceState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bState = bState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVoiceChatHelper.UnblockPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EpicUserId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatHelper::UnblockPlayer(const class UObject* WorldContextObject, const class FString& EpicUserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzVoiceChatHelper", "UnblockPlayer");

	Params::GzVoiceChatHelper_UnblockPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EpicUserId = std::move(EpicUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadingScreenView.OnShutdownAvailable
// (Native, Event, Protected, BlueprintEvent)

void UGzLoadingScreenView::OnShutdownAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadingScreenView", "OnShutdownAvailable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadingScreenView.OnStartup
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzLoadingScreenContext*          InContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadingScreenView::OnStartup(class UGzLoadingScreenContext* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadingScreenView", "OnStartup");

	Params::GzLoadingScreenView_OnStartup Parms{};

	Parms.InContext = InContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadingScreenView.GetBackgroundWidgets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<class UWidget*>                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UWidget*> UGzLoadingScreenView::GetBackgroundWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadingScreenView", "GetBackgroundWidgets");

	Params::GzLoadingScreenView_GetBackgroundWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadingScreenView.GetInputType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLoadingInputType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLoadingInputType UGzLoadingScreenView::GetInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadingScreenView", "GetInputType");

	Params::GzLoadingScreenView_GetInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponRecoilSystem.OnPostRecoilTravelCooldown
// (Final, Native, Protected)

void UGzWeaponRecoilSystem::OnPostRecoilTravelCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponRecoilSystem", "OnPostRecoilTravelCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponRecoilSystem.OnRecoilPatternOverCompensating
// (Final, Native, Protected)

void UGzWeaponRecoilSystem::OnRecoilPatternOverCompensating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponRecoilSystem", "OnRecoilPatternOverCompensating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponRecoilSystem.OnRecoilShotCooldown
// (Final, Native, Protected)

void UGzWeaponRecoilSystem::OnRecoilShotCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponRecoilSystem", "OnRecoilShotCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJetpackComponent.DetachJetpackBoostVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGzJetpackComponent::DetachJetpackBoostVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "DetachJetpackBoostVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_EndZiplineJumpOffVFX
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_EndZiplineJumpOffVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_EndZiplineJumpOffVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_EndZiplineJumpOnVFX
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_EndZiplineJumpOnVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_EndZiplineJumpOnVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_OnEndWingsuit
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_OnEndWingsuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_OnEndWingsuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_OnPlayerHit
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_OnPlayerHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_OnPlayerHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_OnStartWingsuit
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_OnStartWingsuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_OnStartWingsuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_StartZiplineJumpOffVFX
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_StartZiplineJumpOffVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_StartZiplineJumpOffVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.K2_StartZiplineJumpOnVFX
// (Event, Protected, BlueprintEvent)

void UGzJetpackComponent::K2_StartZiplineJumpOnVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "K2_StartZiplineJumpOnVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzJetpackComponent.OnAkEventEnd
// (Final, Native, Protected)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzJetpackComponent::OnAkEventEnd(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "OnAkEventEnd");

	Params::GzJetpackComponent_OnAkEventEnd Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJetpackComponent.OnVisualMeshSet
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   NewVisualComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzJetpackComponent::OnVisualMeshSet(class UMeshComponent* NewVisualComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "OnVisualMeshSet");

	Params::GzJetpackComponent_OnVisualMeshSet Parms{};

	Parms.NewVisualComponent = NewVisualComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzJetpackComponent.SetJetpackBoostVisual
// (Event, Public, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      JetpackBoostVisual                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzJetpackComponent::SetJetpackBoostVisual(class UStaticMesh* JetpackBoostVisual, bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "SetJetpackBoostVisual");

	Params::GzJetpackComponent_SetJetpackBoostVisual Parms{};

	Parms.JetpackBoostVisual = JetpackBoostVisual;
	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzJetpackComponent.GetOwnerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzMultiPartCharacter*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzMultiPartCharacter* UGzJetpackComponent::GetOwnerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "GetOwnerCharacter");

	Params::GzJetpackComponent_GetOwnerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzJetpackComponent.GetVisualComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* UGzJetpackComponent::GetVisualComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJetpackComponent", "GetVisualComponent");

	Params::GzJetpackComponent_GetVisualComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayObjective_SingleTarget.OnObjectReceived
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective_SingleTarget::OnObjectReceived(class AActor* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective_SingleTarget", "OnObjectReceived");

	Params::GzGameplayObjective_SingleTarget_OnObjectReceived Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective_SingleTarget.OnPreviousObjectInvalidated
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           InvalidatedObject                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective_SingleTarget::OnPreviousObjectInvalidated(class AActor* InvalidatedObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective_SingleTarget", "OnPreviousObjectInvalidated");

	Params::GzGameplayObjective_SingleTarget_OnPreviousObjectInvalidated Parms{};

	Parms.InvalidatedObject = InvalidatedObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective_SingleTarget.OnRep_ObjectId
// (Final, Native, Protected)

void UGzGameplayObjective_SingleTarget::OnRep_ObjectId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective_SingleTarget", "OnRep_ObjectId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective_SingleTarget.SetTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMissionResourceRef              InTarget                                               (Parm, NativeAccessSpecifierPublic)

void UGzGameplayObjective_SingleTarget::SetTarget(const struct FMissionResourceRef& InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective_SingleTarget", "SetTarget");

	Params::GzGameplayObjective_SingleTarget_SetTarget Parms{};

	Parms.InTarget = std::move(InTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjective_Interact.OnInteractionCancelledWithoutTime
// (Final, Native, Private)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjective_Interact::OnInteractionCancelledWithoutTime(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjective_Interact", "OnInteractionCancelledWithoutTime");

	Params::GzMissionObjective_Interact_OnInteractionCancelledWithoutTime Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjective_Interact.OnInteractionEnded
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         GzInteractableComponent                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjective_Interact::OnInteractionEnded(class AActor* Actor, const class UGzInteractableComponent* GzInteractableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjective_Interact", "OnInteractionEnded");

	Params::GzMissionObjective_Interact_OnInteractionEnded Parms{};

	Parms.Actor = Actor;
	Parms.GzInteractableComponent = GzInteractableComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCameraOverlayLocationObject.SetOverlayCameraDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithInterpolation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCameraOverlayLocationObject::SetOverlayCameraDistance(float Distance, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCameraOverlayLocationObject", "SetOverlayCameraDistance");

	Params::GzCameraOverlayLocationObject_SetOverlayCameraDistance Parms{};

	Parms.Distance = Distance;
	Parms.bWithInterpolation = bWithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChallengeServiceCheatExtension.ClientCompleteChallenge
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             ChallengeAssetId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzChallengeServiceCheatExtension::ClientCompleteChallenge(const class FName& ChallengeAssetId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChallengeServiceCheatExtension", "ClientCompleteChallenge");

	Params::GzChallengeServiceCheatExtension_ClientCompleteChallenge Parms{};

	Parms.ChallengeAssetId = ChallengeAssetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChallengeServiceCheatExtension.ClientRegenerateChallenges
// (Final, Exec, Native, Public, Const)

void UGzChallengeServiceCheatExtension::ClientRegenerateChallenges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChallengeServiceCheatExtension", "ClientRegenerateChallenges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChallengeServiceCheatExtension.ClientResetAllChallenges
// (Final, Exec, Native, Public, Const)

void UGzChallengeServiceCheatExtension::ClientResetAllChallenges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChallengeServiceCheatExtension", "ClientResetAllChallenges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChallengeServiceCheatExtension.ClientResetChallenge
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             ChallengeAssetId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzChallengeServiceCheatExtension::ClientResetChallenge(const class FName& ChallengeAssetId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChallengeServiceCheatExtension", "ClientResetChallenge");

	Params::GzChallengeServiceCheatExtension_ClientResetChallenge Parms{};

	Parms.ChallengeAssetId = ChallengeAssetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzChallengeServiceCheatExtension.ClientUpdateChallengeProgress
// (Final, Exec, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             ChallengeAssetId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewProgress                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzChallengeServiceCheatExtension::ClientUpdateChallengeProgress(const class FName& ChallengeAssetId, const float NewProgress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChallengeServiceCheatExtension", "ClientUpdateChallengeProgress");

	Params::GzChallengeServiceCheatExtension_ClientUpdateChallengeProgress Parms{};

	Parms.ChallengeAssetId = ChallengeAssetId;
	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLootChooserComponent.GetInvItems
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InteractActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipRarityValidation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzLootChooserComponent::GetInvItems(class AActor* InteractActor, const bool bSkipRarityValidation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootChooserComponent", "GetInvItems");

	Params::GzLootChooserComponent_GetInvItems Parms{};

	Parms.InteractActor = InteractActor;
	Parms.bSkipRarityValidation = bSkipRarityValidation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterCustomizationDebugWidget.Refresh
// (Event, Public, BlueprintEvent)

void UGzCharacterCustomizationDebugWidget::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterCustomizationDebugWidget", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.GzVoiceChatBlueprintEventsComponent.GzVoiceChatMemberBlockStateUpdatedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           ProductUserId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBlocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatBlueprintEventsComponent::GzVoiceChatMemberBlockStateUpdatedDynamic__DelegateSignature(const class FString& ProductUserId, bool bIsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatBlueprintEventsComponent", "GzVoiceChatMemberBlockStateUpdatedDynamic__DelegateSignature");

	Params::GzVoiceChatBlueprintEventsComponent_GzVoiceChatMemberBlockStateUpdatedDynamic__DelegateSignature Parms{};

	Parms.ProductUserId = std::move(ProductUserId);
	Parms.bIsBlocked = bIsBlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVoiceChatBlueprintEventsComponent.GzVoiceChatMemberStateUpdatedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMuted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatBlueprintEventsComponent::GzVoiceChatMemberStateUpdatedDynamic__DelegateSignature(const class FString& PlayFabId, bool bIsMuted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatBlueprintEventsComponent", "GzVoiceChatMemberStateUpdatedDynamic__DelegateSignature");

	Params::GzVoiceChatBlueprintEventsComponent_GzVoiceChatMemberStateUpdatedDynamic__DelegateSignature Parms{};

	Parms.PlayFabId = std::move(PlayFabId);
	Parms.bIsMuted = bIsMuted;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVoiceChatBlueprintEventsComponent.GzVoiceChatMembersUpdatedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzVoiceChatBlueprintEventsComponent::GzVoiceChatMembersUpdatedDynamic__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatBlueprintEventsComponent", "GzVoiceChatMembersUpdatedDynamic__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.GzVoiceChatBlueprintEventsComponent.GzVoiceChatMemberTalkingStateUpdatedDynamic__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTalkingState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVoiceChatBlueprintEventsComponent::GzVoiceChatMemberTalkingStateUpdatedDynamic__DelegateSignature(const class FString& PlayFabId, bool bTalkingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceChatBlueprintEventsComponent", "GzVoiceChatMemberTalkingStateUpdatedDynamic__DelegateSignature");

	Params::GzVoiceChatBlueprintEventsComponent_GzVoiceChatMemberTalkingStateUpdatedDynamic__DelegateSignature Parms{};

	Parms.PlayFabId = std::move(PlayFabId);
	Parms.bTalkingState = bTalkingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWeaponActor.OnInitBehaviorAttachments
// (Final, Native, Protected)

void AGzWeaponActor::OnInitBehaviorAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "OnInitBehaviorAttachments");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponActor.OnInitWeaponConstructionInfo
// (Native, Protected)

void AGzWeaponActor::OnInitWeaponConstructionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "OnInitWeaponConstructionInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponActor.DestroyBehaviorSpawnedComponent
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UActorComponent*                  ComponentToDestroy                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzWeaponActor::DestroyBehaviorSpawnedComponent(class UActorComponent* ComponentToDestroy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "DestroyBehaviorSpawnedComponent");

	Params::GzWeaponActor_DestroyBehaviorSpawnedComponent Parms{};

	Parms.ComponentToDestroy = ComponentToDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponActor.GetDedicatedPocketID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzInvPocketId             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGzInvPocketId AGzWeaponActor::GetDedicatedPocketID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetDedicatedPocketID");

	Params::GzWeaponActor_GetDedicatedPocketID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponItemData*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponItemData* AGzWeaponActor::GetItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetItemData");

	Params::GzWeaponActor_GetItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetLeftHandIKTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERelativeTransformSpace                 CurrentSpace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform AGzWeaponActor::GetLeftHandIKTransform(ERelativeTransformSpace CurrentSpace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetLeftHandIKTransform");

	Params::GzWeaponActor_GetLeftHandIKTransform Parms{};

	Parms.CurrentSpace = CurrentSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AGzWeaponActor::GetSkeletalMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetSkeletalMeshComponent");

	Params::GzWeaponActor_GetSkeletalMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetSkinItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponSkinItemData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponSkinItemData* AGzWeaponActor::GetSkinItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetSkinItemData");

	Params::GzWeaponActor_GetSkinItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetWeaponAttachment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWeaponAttachmentType                 Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzWeaponAttachmentComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponAttachmentComponent* AGzWeaponActor::GetWeaponAttachment(EGzWeaponAttachmentType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetWeaponAttachment");

	Params::GzWeaponActor_GetWeaponAttachment Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetWeaponComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzWeaponComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWeaponComponent* AGzWeaponActor::GetWeaponComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetWeaponComponent");

	Params::GzWeaponActor_GetWeaponComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.GetWeaponSupportHoldType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWeaponSupportHoldType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzWeaponSupportHoldType AGzWeaponActor::GetWeaponSupportHoldType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "GetWeaponSupportHoldType");

	Params::GzWeaponActor_GetWeaponSupportHoldType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponActor.HasLeftHandIKHandling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzWeaponActor::HasLeftHandIKHandling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponActor", "HasLeftHandIKHandling");

	Params::GzWeaponActor_HasLeftHandIKHandling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAnimNotifyState.GetSpawnedEffect
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UMeshComponent*                   MeshComp                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* UGzLimbAnimNotifyState::GetSpawnedEffect(class UMeshComponent* MeshComp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAnimNotifyState", "GetSpawnedEffect");

	Params::GzLimbAnimNotifyState_GetSpawnedEffect Parms{};

	Parms.MeshComp = MeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrialsControllerComponent.GetOwnedTrials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FGzGameplayTrial>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGzGameplayTrial> UGzTrialsControllerComponent::GetOwnedTrials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialsControllerComponent", "GetOwnedTrials");

	Params::GzTrialsControllerComponent_GetOwnedTrials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutsGrid.Clear
// (Event, Public, BlueprintEvent)

void UGzLoadoutsGrid::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutsGrid", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutsGrid.SetDataToSlot
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzLoadoutDataConfig             LoadoutConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutsGrid::SetDataToSlot(const struct FGzLoadoutDataConfig& LoadoutConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutsGrid", "SetDataToSlot");

	Params::GzLoadoutsGrid_SetDataToSlot Parms{};

	Parms.LoadoutConfig = std::move(LoadoutConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCharacterWorldVisibilityComponent.OnOwnerShoot
// (Final, Native, Private)

void UGzCharacterWorldVisibilityComponent::OnOwnerShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterWorldVisibilityComponent", "OnOwnerShoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterWorldVisibilityComponent.Refresh
// (Native, Public)

void UGzCharacterWorldVisibilityComponent::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterWorldVisibilityComponent", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCharacterWorldVisibilityComponent.GetVisibilityState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWorldVisibilityState                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzWorldVisibilityState UGzCharacterWorldVisibilityComponent::GetVisibilityState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterWorldVisibilityComponent", "GetVisibilityState");

	Params::GzCharacterWorldVisibilityComponent_GetVisibilityState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCharacterWorldVisibilityComponent.GetVisibilityStateStencil
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWorldVisibilityState                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzWorldVisibilityState UGzCharacterWorldVisibilityComponent::GetVisibilityStateStencil() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCharacterWorldVisibilityComponent", "GetVisibilityStateStencil");

	Params::GzCharacterWorldVisibilityComponent_GetVisibilityStateStencil Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzChargePreviewPathActor.GetAbilityComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzChargeableAbilityComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzChargeableAbilityComponent* AGzChargePreviewPathActor::GetAbilityComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzChargePreviewPathActor", "GetAbilityComponent");

	Params::GzChargePreviewPathActor_GetAbilityComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzCheckedOverlapSphereComponent.GzComponentBeginOverlapSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzCheckedOverlapSphereComponent::GzComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheckedOverlapSphereComponent", "GzComponentBeginOverlapSignature__DelegateSignature");

	Params::GzCheckedOverlapSphereComponent_GzComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzCheckedOverlapSphereComponent.GzComponentEndOverlapSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheckedOverlapSphereComponent::GzComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheckedOverlapSphereComponent", "GzComponentEndOverlapSignature__DelegateSignature");

	Params::GzCheckedOverlapSphereComponent_GzComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCheckedOverlapSphereComponent.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzCheckedOverlapSphereComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheckedOverlapSphereComponent", "OnBeginOverlap");

	Params::GzCheckedOverlapSphereComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCheckedOverlapSphereComponent.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCheckedOverlapSphereComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCheckedOverlapSphereComponent", "OnEndOverlap");

	Params::GzCheckedOverlapSphereComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCircleMarkerShape.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCircleMarkerShape::SetRadius(float InRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCircleMarkerShape", "SetRadius");

	Params::GzCircleMarkerShape_SetRadius Parms{};

	Parms.InRadius = InRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCircleMarkerShape.GetAreaRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzCircleMarkerShape::GetAreaRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCircleMarkerShape", "GetAreaRadius");

	Params::GzCircleMarkerShape_GetAreaRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_WeaponAim.OnHoldBreathPressedInput
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_WeaponAim::OnHoldBreathPressedInput(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponAim", "OnHoldBreathPressedInput");

	Params::GzGA_WeaponAim_OnHoldBreathPressedInput Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WeaponAim.OnHoldBreathReleasedInput
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_WeaponAim::OnHoldBreathReleasedInput(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponAim", "OnHoldBreathReleasedInput");

	Params::GzGA_WeaponAim_OnHoldBreathReleasedInput Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCyberLimbsPanel_Limb.InitializeLimbInfo
// (Event, Protected, BlueprintEvent)

void UGzCyberLimbsPanel_Limb::InitializeLimbInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "InitializeLimbInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCyberLimbsPanel_Limb.OnActivationStateUpdated
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbWidgetState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnActivationStateUpdated(EGzLimbWidgetState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnActivationStateUpdated");

	Params::GzCyberLimbsPanel_Limb_OnActivationStateUpdated Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbAbilityComponentUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bLimbAbilityComponentValid                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbAbilityComponentUpdated(bool bLimbAbilityComponentValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbAbilityComponentUpdated");

	Params::GzCyberLimbsPanel_Limb_OnLimbAbilityComponentUpdated Parms{};

	Parms.bLimbAbilityComponentValid = bLimbAbilityComponentValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbAbilityUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bLimbAbilityValid                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbAbilityUpdated(bool bLimbAbilityValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbAbilityUpdated");

	Params::GzCyberLimbsPanel_Limb_OnLimbAbilityUpdated Parms{};

	Parms.bLimbAbilityValid = bLimbAbilityValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbAtMaxCharges
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHaveMaxCharges                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbAtMaxCharges(bool bHaveMaxCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbAtMaxCharges");

	Params::GzCyberLimbsPanel_Limb_OnLimbAtMaxCharges Parms{};

	Parms.bHaveMaxCharges = bHaveMaxCharges;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbChanged
// (Final, Native, Private)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbChanged(EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbChanged");

	Params::GzCyberLimbsPanel_Limb_OnLimbChanged Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbCooldown
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bOnCooldown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbCooldown(bool bOnCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbCooldown");

	Params::GzCyberLimbsPanel_Limb_OnLimbCooldown Parms{};

	Parms.bOnCooldown = bOnCooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbRecharging
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bRecharging                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbRecharging(bool bRecharging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbRecharging");

	Params::GzCyberLimbsPanel_Limb_OnLimbRecharging Parms{};

	Parms.bRecharging = bRecharging;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.OnLimbUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bLimbValid                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCyberLimbsPanel_Limb::OnLimbUpdated(bool bLimbValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "OnLimbUpdated");

	Params::GzCyberLimbsPanel_Limb_OnLimbUpdated Parms{};

	Parms.bLimbValid = bLimbValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCyberLimbsPanel_Limb.UpdateLimbData
// (Final, Native, Private)

void UGzCyberLimbsPanel_Limb::UpdateLimbData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCyberLimbsPanel_Limb", "UpdateLimbData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlatformsCheatExtension.SetPlatformType
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           PlatformType                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlatformsCheatExtension::SetPlatformType(const class FString& PlatformType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlatformsCheatExtension", "SetPlatformType");

	Params::GzPlatformsCheatExtension_SetPlatformType Parms{};

	Parms.PlatformType = std::move(PlatformType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WingsuitBoost.IsBoostActivate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_WingsuitBoost::IsBoostActivate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WingsuitBoost", "IsBoostActivate");

	Params::GzGA_WingsuitBoost_IsBoostActivate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundNotifyStateBase.SetActionType
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class FName                             InActionType                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundNotifyStateBase::SetActionType(const class FName& InActionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSoundNotifyStateBase", "SetActionType");

	Params::GzSoundNotifyStateBase_SetActionType Parms{};

	Parms.InActionType = InActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundNotifyStateBase.SetSoundSourceBodyPart
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// EGzSoundSourceBodyPart                  InSoundSourceBodyPart                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundNotifyStateBase::SetSoundSourceBodyPart(EGzSoundSourceBodyPart InSoundSourceBodyPart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSoundNotifyStateBase", "SetSoundSourceBodyPart");

	Params::GzSoundNotifyStateBase_SetSoundSourceBodyPart Parms{};

	Parms.InSoundSourceBodyPart = InSoundSourceBodyPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCustomizationSoundNotifyState.SetSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FGameplayTag                     InSlot                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCustomizationSoundNotifyState::SetSlot(const struct FGameplayTag& InSlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCustomizationSoundNotifyState", "SetSlot");

	Params::GzCustomizationSoundNotifyState_SetSlot Parms{};

	Parms.InSlot = std::move(InSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponItemData.GetSuitableAndOverriddenDefaultAttachments
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EGzWeaponAttachmentType, struct FGzSuitableAttachmentsCategory>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EGzWeaponAttachmentType, struct FGzSuitableAttachmentsCategory> UGzWeaponItemData::GetSuitableAndOverriddenDefaultAttachments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponItemData", "GetSuitableAndOverriddenDefaultAttachments");

	Params::GzWeaponItemData_GetSuitableAndOverriddenDefaultAttachments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponItemData.GetSuitableAttachmentsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeDefaults                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGzWeaponAttachmentItemData*> UGzWeaponItemData::GetSuitableAttachmentsList(bool bIncludeDefaults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponItemData", "GetSuitableAttachmentsList");

	Params::GzWeaponItemData_GetSuitableAttachmentsList Parms{};

	Parms.bIncludeDefaults = bIncludeDefaults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHUDView.ApplyUIAspectRatio
// (Final, Native, Protected)

void UGzHUDView::ApplyUIAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "ApplyUIAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDView.NotifyOnAbilityActivated
// (Final, Native, Private)
// Parameters:
// class UGameplayAbility*                 GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::NotifyOnAbilityActivated(class UGameplayAbility* GameplayAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "NotifyOnAbilityActivated");

	Params::GzHUDView_NotifyOnAbilityActivated Parms{};

	Parms.GameplayAbility = GameplayAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDView.NotifyOnAbilityEnded
// (Final, Native, Private)
// Parameters:
// class UGameplayAbility*                 GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::NotifyOnAbilityEnded(class UGameplayAbility* GameplayAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "NotifyOnAbilityEnded");

	Params::GzHUDView_NotifyOnAbilityEnded Parms{};

	Parms.GameplayAbility = GameplayAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDView.OnAbilityActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzGameplayAbility*               GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::OnAbilityActivated(class UGzGameplayAbility* GameplayAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "OnAbilityActivated");

	Params::GzHUDView_OnAbilityActivated Parms{};

	Parms.GameplayAbility = GameplayAbility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDView.OnAbilityEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzGameplayAbility*               GameplayAbility                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::OnAbilityEnded(class UGzGameplayAbility* GameplayAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "OnAbilityEnded");

	Params::GzHUDView_OnAbilityEnded Parms{};

	Parms.GameplayAbility = GameplayAbility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDView.OnViewTargetChanged
// (Event, Protected, BlueprintEvent)

void UGzHUDView::OnViewTargetChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "OnViewTargetChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzHUDView.ReceiveBindEvents
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::ReceiveBindEvents(class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "ReceiveBindEvents");

	Params::GzHUDView_ReceiveBindEvents Parms{};

	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDView.ReceiveUnbindEvents
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::ReceiveUnbindEvents(class APawn* OldViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "ReceiveUnbindEvents");

	Params::GzHUDView_ReceiveUnbindEvents Parms{};

	Parms.OldViewTarget = OldViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzHUDView.SubscribeToAttributeChange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAttribute               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float NewValue, float OldValue)>OnAttributeChanged                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::SubscribeToAttributeChange(const struct FGameplayAttribute& Attribute, TDelegate<void(float NewValue, float OldValue)> OnAttributeChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "SubscribeToAttributeChange");

	Params::GzHUDView_SubscribeToAttributeChange Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.OnAttributeChanged = OnAttributeChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDView.SubscribeToTagChange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasAdded)>         OnTagChanged                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHUDView::SubscribeToTagChange(const struct FGameplayTag& Tag, TDelegate<void(bool bWasAdded)> OnTagChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "SubscribeToTagChange");

	Params::GzHUDView_SubscribeToTagChange Parms{};

	Parms.Tag = std::move(Tag);
	Parms.OnTagChanged = OnTagChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDView.IsSpectating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzHUDView::IsSpectating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDView", "IsSpectating");

	Params::GzHUDView_IsSpectating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_SuperSprint.BP_OnStartedSprint
// (Event, Protected, BlueprintEvent)

void UGzGA_SuperSprint::BP_OnStartedSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "BP_OnStartedSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SuperSprint.BP_OnStoppedSprint
// (Event, Protected, BlueprintEvent)

void UGzGA_SuperSprint::BP_OnStoppedSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "BP_OnStoppedSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SuperSprint.EndSprintCamera
// (Final, Native, Protected)

void UGzGA_SuperSprint::EndSprintCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "EndSprintCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint.OnAssetsLoaded
// (Final, Native, Protected)

void UGzGA_SuperSprint::OnAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "OnAssetsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint.OnMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SuperSprint::OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "OnMovementModeChanged");

	Params::GzGA_SuperSprint_OnMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint.OnSprintCameraDelayEnd
// (Final, Native, Protected)

void UGzGA_SuperSprint::OnSprintCameraDelayEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "OnSprintCameraDelayEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint.OnSuperSprintConditionChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bCanSuperSprint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SuperSprint::OnSuperSprintConditionChanged(bool bCanSuperSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "OnSuperSprintConditionChanged");

	Params::GzGA_SuperSprint_OnSuperSprintConditionChanged Parms{};

	Parms.bCanSuperSprint = bCanSuperSprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint.OnSuperSprintDurationFinished
// (Final, Native, Protected)

void UGzGA_SuperSprint::OnSuperSprintDurationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint", "OnSuperSprintDurationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzViewportMarkerWidget.GetArrowRotationAngle
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzViewportMarkerWidget::GetArrowRotationAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "GetArrowRotationAngle");

	Params::GzViewportMarkerWidget_GetArrowRotationAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzViewportMarkerWidget.OnMarkerFocusChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzViewportMarkerWidget::OnMarkerFocusChanged(bool bIsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "OnMarkerFocusChanged");

	Params::GzViewportMarkerWidget_OnMarkerFocusChanged Parms{};

	Parms.bIsFocused = bIsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzViewportMarkerWidget.OnMarkerFocusChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzViewportMarkerWidget::OnMarkerFocusChangedBP(bool bIsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "OnMarkerFocusChangedBP");

	Params::GzViewportMarkerWidget_OnMarkerFocusChangedBP Parms{};

	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzViewportMarkerWidget.RotateArrow
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UGzViewportMarkerWidget::RotateArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "RotateArrow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzViewportMarkerWidget.UpdateDistanceToViewTarget
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzViewportMarkerWidget::UpdateDistanceToViewTarget(float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "UpdateDistanceToViewTarget");

	Params::GzViewportMarkerWidget_UpdateDistanceToViewTarget Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzViewportMarkerWidget.UpdateInputTooltip
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UGzViewportMarkerWidget::UpdateInputTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "UpdateInputTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzViewportMarkerWidget.GetDistanceToTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzViewportMarkerWidget::GetDistanceToTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewportMarkerWidget", "GetDistanceToTarget");

	Params::GzViewportMarkerWidget_GetDistanceToTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZoneEvent.Trigger
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzZoneEvent::Trigger(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneEvent", "Trigger");

	Params::GzZoneEvent_Trigger Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageIndicatorSettings.GetDamageIndicatorSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzDamageIndicatorSettings*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzDamageIndicatorSettings* UGzDamageIndicatorSettings::GetDamageIndicatorSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageIndicatorSettings", "GetDamageIndicatorSettings");

	Params::GzDamageIndicatorSettings_GetDamageIndicatorSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSyncCutscene.ResetViewTarget
// (Final, Native, Private)

void AGzSyncCutscene::ResetViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSyncCutscene", "ResetViewTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSyncCutscene.StartPlaying
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzSyncCutscene::StartPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSyncCutscene", "StartPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzClientLoadoutService.GzOnLoadoutScreenClosedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzClientLoadoutService::GzOnLoadoutScreenClosedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzClientLoadoutService", "GzOnLoadoutScreenClosedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.GzClientLoadoutService.GzOnLoadoutScreenOpenedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzClientLoadoutService::GzOnLoadoutScreenOpenedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzClientLoadoutService", "GzOnLoadoutScreenOpenedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDamageableCar.OnRep_AliveObjectAttributeSet
// (Final, Native, Protected)

void AGzDamageableCar::OnRep_AliveObjectAttributeSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableCar", "OnRep_AliveObjectAttributeSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageableCar.ReceiveDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDamageableCar::ReceiveDamage(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableCar", "ReceiveDamage");

	Params::GzDamageableCar_ReceiveDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageableCar.ReceiveHealthChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDamageableCar::ReceiveHealthChanged(float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableCar", "ReceiveHealthChanged");

	Params::GzDamageableCar_ReceiveHealthChanged Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageableCar.ReceiveOnDeath
// (Event, Protected, BlueprintEvent)

void AGzDamageableCar::ReceiveOnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableCar", "ReceiveOnDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSmokeMissile.OnProjectileStopped
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzSmokeMissile::OnProjectileStopped(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSmokeMissile", "OnProjectileStopped");

	Params::GzSmokeMissile_OnProjectileStopped Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageIndicator.DestroyIndicator
// (Final, Native, Protected, BlueprintCallable)

void UGzDamageIndicator::DestroyIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicator", "DestroyIndicator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageIndicator.OnDirectionAngleChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewDirectionAngle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDamageIndicator::OnDirectionAngleChanged(float NewDirectionAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicator", "OnDirectionAngleChanged");

	Params::GzDamageIndicator_OnDirectionAngleChanged Parms{};

	Parms.NewDirectionAngle = NewDirectionAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageIndicator.OnInit
// (Event, Protected, BlueprintEvent)

void UGzDamageIndicator::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicator", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDamageIndicator.OnRepeat
// (Event, Protected, BlueprintEvent)

void UGzDamageIndicator::OnRepeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicator", "OnRepeat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponSkinItemData.IsUdimDataValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponSkinItemData::IsUdimDataValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponSkinItemData", "IsUdimDataValid");

	Params::GzWeaponSkinItemData_IsUdimDataValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_PhosphorousDart.BP_OnMaxChargeVelocityReached
// (Event, Protected, BlueprintEvent)

void UGzGA_PhosphorousDart::BP_OnMaxChargeVelocityReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_PhosphorousDart", "BP_OnMaxChargeVelocityReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_PhosphorousDart.BP_OnShoot
// (Event, Protected, BlueprintEvent)

void UGzGA_PhosphorousDart::BP_OnShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_PhosphorousDart", "BP_OnShoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_PhosphorousDart.OnChargeEnded
// (Final, Native, Protected)

void UGzGA_PhosphorousDart::OnChargeEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_PhosphorousDart", "OnChargeEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSceneViewpoint.ReceiveTransitionFromStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzTransitionEventParameters     Parameters                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzSceneViewpoint::ReceiveTransitionFromStarted(const struct FGzTransitionEventParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSceneViewpoint", "ReceiveTransitionFromStarted");

	Params::GzSceneViewpoint_ReceiveTransitionFromStarted Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSceneViewpoint.ReceiveTransitionToStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzTransitionEventParameters     Parameters                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzSceneViewpoint::ReceiveTransitionToStarted(const struct FGzTransitionEventParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSceneViewpoint", "ReceiveTransitionToStarted");

	Params::GzSceneViewpoint_ReceiveTransitionToStarted Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzTextStylesDataAsset.GetTextStyle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonTextStyle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommonTextStyle* UGzTextStylesDataAsset::GetTextStyle(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTextStylesDataAsset", "GetTextStyle");

	Params::GzTextStylesDataAsset_GetTextStyle Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTextStylesDataAsset.GetTextStyleClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCommonTextStyle>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCommonTextStyle> UGzTextStylesDataAsset::GetTextStyleClass(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTextStylesDataAsset", "GetTextStyleClass");

	Params::GzTextStylesDataAsset_GetTextStyleClass Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionActivatable.SetActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGzMissionActivatable::SetActive(bool bActive, class UMissionObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionActivatable", "SetActive");

	Params::GzMissionActivatable_SetActive Parms{};

	Parms.bActive = bActive;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCloak_Gadget.Init
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class AGzMultiPartCharacter*            GadgetOwningPlayer                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzCloak_Gadget_InitInfo         InInitInfo                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzCloak_Gadget::Init(class AGzMultiPartCharacter* GadgetOwningPlayer, const struct FGzCloak_Gadget_InitInfo& InInitInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCloak_Gadget", "Init");

	Params::GzCloak_Gadget_Init Parms{};

	Parms.GadgetOwningPlayer = GadgetOwningPlayer;
	Parms.InInitInfo = std::move(InInitInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Montage.OnMontageCompleted
// (Final, Native, Private)

void UGzGA_Montage::OnMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Montage", "OnMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Montage.OnMontageInterrupt
// (Final, Native, Private)

void UGzGA_Montage::OnMontageInterrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Montage", "OnMontageInterrupt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArena.AddComebackArenaStart
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzComebackArena::AddComebackArenaStart(int32 TeamIndex, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArena", "AddComebackArenaStart");

	Params::GzComebackArena_AddComebackArenaStart Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArena.WinComebackArenaMatch
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            WinnerActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzComebackArena::WinComebackArenaMatch(class APawn* WinnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArena", "WinComebackArenaMatch");

	Params::GzComebackArena_WinComebackArenaMatch Parms{};

	Parms.WinnerActor = WinnerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArena.GetComebackArenaInstanceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzComebackArena::GetComebackArenaInstanceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArena", "GetComebackArenaInstanceId");

	Params::GzComebackArena_GetComebackArenaInstanceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComebackArenaContextComponent.GetComebackArena
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzComebackArena*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzComebackArena* UGzComebackArenaContextComponent::GetComebackArena() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaContextComponent", "GetComebackArena");

	Params::GzComebackArenaContextComponent_GetComebackArena Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComebackArenaContextComponent.GetComebackArenaEndTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzComebackArenaContextComponent::GetComebackArenaEndTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaContextComponent", "GetComebackArenaEndTime");

	Params::GzComebackArenaContextComponent_GetComebackArenaEndTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComebackArenaContextComponent.GetComebackArenaQueueEnteredTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzComebackArenaContextComponent::GetComebackArenaQueueEnteredTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaContextComponent", "GetComebackArenaQueueEnteredTime");

	Params::GzComebackArenaContextComponent_GetComebackArenaQueueEnteredTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComebackArenaContextComponent.IsValidContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzComebackArenaContextComponent::IsValidContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaContextComponent", "IsValidContext");

	Params::GzComebackArenaContextComponent_IsValidContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.PSOWeaponsLogger.IsReady
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APSOWeaponsLogger::IsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PSOWeaponsLogger", "IsReady");

	Params::PSOWeaponsLogger_IsReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.PSOWeaponsLogger.StartWeaponEnumeration
// (Final, Native, Public, BlueprintCallable)

void APSOWeaponsLogger::StartWeaponEnumeration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PSOWeaponsLogger", "StartWeaponEnumeration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArenaManager.OnComebackArenaMatchEnded
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzComebackArena*                 ComebackArena                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzComebackArenaManager::OnComebackArenaMatchEnded(class AGzComebackArena* ComebackArena)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaManager", "OnComebackArenaMatchEnded");

	Params::GzComebackArenaManager_OnComebackArenaMatchEnded Parms{};

	Parms.ComebackArena = ComebackArena;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArenaManager.OnPlayerDisconnected
// (Final, Native, Private)
// Parameters:
// class AGzPlayerController*              PC                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzPlayerLogoutReason                   LogoutReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzComebackArenaManager::OnPlayerDisconnected(class AGzPlayerController* PC, EGzPlayerLogoutReason LogoutReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaManager", "OnPlayerDisconnected");

	Params::GzComebackArenaManager_OnPlayerDisconnected Parms{};

	Parms.PC = PC;
	Parms.LogoutReason = LogoutReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComebackArenaManager.SetIsActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzComebackArenaManager::SetIsActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzComebackArenaManager", "SetIsActive");

	Params::GzComebackArenaManager_SetIsActive Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCommandLineOptions.GetBackendEnvName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetBackendEnvName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetBackendEnvName");

	Params::GzCommandLineOptions_GetBackendEnvName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetCoherentApiTestClientMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzClientMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzClientMode UGzCommandLineOptions::GetCoherentApiTestClientMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetCoherentApiTestClientMode");

	Params::GzCommandLineOptions_GetCoherentApiTestClientMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetCoherentApiTestParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ApiTestArgs                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCommandLineOptions::GetCoherentApiTestParams(class FString* ApiTestArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetCoherentApiTestParams");

	Params::GzCommandLineOptions_GetCoherentApiTestParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ApiTestArgs != nullptr)
		*ApiTestArgs = std::move(Parms.ApiTestArgs);

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetCoherentApiTestPort
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzCommandLineOptions::GetCoherentApiTestPort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetCoherentApiTestPort");

	Params::GzCommandLineOptions_GetCoherentApiTestPort Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetEpicAuthLogin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetEpicAuthLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetEpicAuthLogin");

	Params::GzCommandLineOptions_GetEpicAuthLogin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetEpicAuthPassword
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetEpicAuthPassword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetEpicAuthPassword");

	Params::GzCommandLineOptions_GetEpicAuthPassword Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetEpicAuthType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetEpicAuthType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetEpicAuthType");

	Params::GzCommandLineOptions_GetEpicAuthType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetGameRegisterArgs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetGameRegisterArgs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetGameRegisterArgs");

	Params::GzCommandLineOptions_GetGameRegisterArgs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetMatchmakingType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzMatchmakingType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzMatchmakingType UGzCommandLineOptions::GetMatchmakingType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetMatchmakingType");

	Params::GzCommandLineOptions_GetMatchmakingType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetNoPlayfab
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCommandLineOptions::GetNoPlayfab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetNoPlayfab");

	Params::GzCommandLineOptions_GetNoPlayfab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.GetRegisterGameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzCommandLineOptions::GetRegisterGameName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "GetRegisterGameName");

	Params::GzCommandLineOptions_GetRegisterGameName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.HasEpicParams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCommandLineOptions::HasEpicParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "HasEpicParams");

	Params::GzCommandLineOptions_HasEpicParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.IsAllowJoiningUnexpectedPlayers
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCommandLineOptions::IsAllowJoiningUnexpectedPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "IsAllowJoiningUnexpectedPlayers");

	Params::GzCommandLineOptions_IsAllowJoiningUnexpectedPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCommandLineOptions.IsRunningUnattended
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCommandLineOptions::IsRunningUnattended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCommandLineOptions", "IsRunningUnattended");

	Params::GzCommandLineOptions_IsRunningUnattended Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzToxicSmokeMissile.OnProjectileStopped
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzToxicSmokeMissile::OnProjectileStopped(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzToxicSmokeMissile", "OnProjectileStopped");

	Params::GzToxicSmokeMissile_OnProjectileStopped Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCompassMarkerContainer.SetParentCompassSizeBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USizeBox*                         InSizeBox                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCompassMarkerContainer::SetParentCompassSizeBox(class USizeBox* InSizeBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCompassMarkerContainer", "SetParentCompassSizeBox");

	Params::GzCompassMarkerContainer_SetParentCompassSizeBox Parms{};

	Parms.InSizeBox = InSizeBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzCompassMarkerContainer.SetParentScaleImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UImage*                           InScaleImage                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCompassMarkerContainer::SetParentScaleImage(class UImage* InScaleImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCompassMarkerContainer", "SetParentScaleImage");

	Params::GzCompassMarkerContainer_SetParentScaleImage Parms{};

	Parms.InScaleImage = InScaleImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUISystem.GetHUDRuntimeSettings
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzHUDRuntimeSettings*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzHUDRuntimeSettings* UGzUISystem::GetHUDRuntimeSettings(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUISystem", "GetHUDRuntimeSettings");

	Params::GzUISystem_GetHUDRuntimeSettings Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetUISystem
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzUISystem*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzUISystem* UGzUISystem::GetUISystem(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUISystem", "GetUISystem");

	Params::GzUISystem_GetUISystem Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.OverrideChannelsVisibility
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// EGzUIChannels                           Channels                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUISystem::OverrideChannelsVisibility(EGzUIChannels Channels, bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "OverrideChannelsVisibility");

	Params::GzUISystem_OverrideChannelsVisibility Parms{};

	Parms.Channels = Channels;
	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUISystem.SetGlobalVisibility
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUISystem::SetGlobalVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "SetGlobalVisibility");

	Params::GzUISystem_SetGlobalVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUISystem.SetVisibleChannels
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// EGzUIChannels                           Channels                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUISystem::SetVisibleChannels(EGzUIChannels Channels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "SetVisibleChannels");

	Params::GzUISystem_SetVisibleChannels Parms{};

	Parms.Channels = Channels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUISystem.ToggleGlobalVisibility
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzUISystem::ToggleGlobalVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "ToggleGlobalVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUISystem.GetHUD
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzHUDBase*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzHUDBase* UGzUISystem::GetHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetHUD");

	Params::GzUISystem_GetHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetHUDView
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzHUDView*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzHUDView* UGzUISystem::GetHUDView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetHUDView");

	Params::GzUISystem_GetHUDView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetLoadingScreenController
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLoadingScreenController*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLoadingScreenController* UGzUISystem::GetLoadingScreenController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetLoadingScreenController");

	Params::GzUISystem_GetLoadingScreenController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetLoadingScreenManager
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLoadingScreenManager*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLoadingScreenManager* UGzUISystem::GetLoadingScreenManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetLoadingScreenManager");

	Params::GzUISystem_GetLoadingScreenManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetTargetMinimapWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzUISystem::GetTargetMinimapWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetTargetMinimapWidth");

	Params::GzUISystem_GetTargetMinimapWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUISystem.GetVisibleChannels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzUIChannels                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzUIChannels UGzUISystem::GetVisibleChannels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUISystem", "GetVisibleChannels");

	Params::GzUISystem_GetVisibleChannels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComposedCondition.MakeAndCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzCondition*>             Conditions                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzComposedCondition::MakeAndCondition(class AGzAdvancedMission* Mission, const TArray<class UGzCondition*>& Conditions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzComposedCondition", "MakeAndCondition");

	Params::GzComposedCondition_MakeAndCondition Parms{};

	Parms.Mission = Mission;
	Parms.Conditions = std::move(Conditions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComposedCondition.MakeOrCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzCondition*>             Conditions                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzComposedCondition::MakeOrCondition(class AGzAdvancedMission* Mission, const TArray<class UGzCondition*>& Conditions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzComposedCondition", "MakeOrCondition");

	Params::GzComposedCondition_MakeOrCondition Parms{};

	Parms.Mission = Mission;
	Parms.Conditions = std::move(Conditions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_WeaponRechamber.OnMontageEnded
// (Final, Native, Protected)

void UGzGA_WeaponRechamber::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponRechamber", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WeaponRechamber.OnMontageInterrupted
// (Final, Native, Protected)

void UGzGA_WeaponRechamber::OnMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponRechamber", "OnMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_WeaponRechamber.OnRechamberEvent
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_WeaponRechamber::OnRechamberEvent(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_WeaponRechamber", "OnRechamberEvent");

	Params::GzGA_WeaponRechamber_OnRechamberEvent Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzComposedObjective.MakeAllObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzObjective*>             Objectives                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzComposedObjective::MakeAllObjective(class AGzAdvancedMission* Mission, const TArray<class UGzObjective*>& Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzComposedObjective", "MakeAllObjective");

	Params::GzComposedObjective_MakeAllObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objectives = std::move(Objectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComposedObjective.MakeAnyObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzObjective*>             Objectives                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzComposedObjective::MakeAnyObjective(class AGzAdvancedMission* Mission, const TArray<class UGzObjective*>& Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzComposedObjective", "MakeAnyObjective");

	Params::GzComposedObjective_MakeAnyObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objectives = std::move(Objectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzComposedObjective.MakeFirstObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzObjective*>             Objectives                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzComposedObjective::MakeFirstObjective(class AGzAdvancedMission* Mission, const TArray<class UGzObjective*>& Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzComposedObjective", "MakeFirstObjective");

	Params::GzComposedObjective_MakeFirstObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objectives = std::move(Objectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzConfirmationWidget.InitCancellation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzConfirmationWidget::InitCancellation(const TDelegate<void()> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmationWidget", "InitCancellation");

	Params::GzConfirmationWidget_InitCancellation Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConfirmationWidget.InitConfirmation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ConfirmationText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzConfirmationWidget::InitConfirmation(const TDelegate<void()> Delegate, const class FText& ConfirmationText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmationWidget", "InitConfirmation");

	Params::GzConfirmationWidget_InitConfirmation Parms{};

	Parms.Delegate = Delegate;
	Parms.ConfirmationText = std::move(ConfirmationText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConfirmationWidget.OnCanceled
// (Final, Native, Protected, BlueprintCallable)

void UGzConfirmationWidget::OnCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmationWidget", "OnCanceled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzConfirmationWidget.OnConfirmed
// (Final, Native, Protected, BlueprintCallable)

void UGzConfirmationWidget::OnConfirmed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzConfirmationWidget", "OnConfirmed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.OnOperationStart
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzCharacter*                     NewOperatorCharacter                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOperableObjectComponent::OnOperationStart(class AGzCharacter* NewOperatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "OnOperationStart");

	Params::GzOperableObjectComponent_OnOperationStart Parms{};

	Parms.NewOperatorCharacter = NewOperatorCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.OnOperationStop
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzCharacter*                     PreviousOperatorCharacter                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOperableObjectComponent::OnOperationStop(class AGzCharacter* PreviousOperatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "OnOperationStop");

	Params::GzOperableObjectComponent_OnOperationStop Parms{};

	Parms.PreviousOperatorCharacter = PreviousOperatorCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.OnRep_OperatorCharacter
// (Native, Protected)
// Parameters:
// class AGzCharacter*                     PreviousOperatorCharacter                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOperableObjectComponent::OnRep_OperatorCharacter(class AGzCharacter* PreviousOperatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "OnRep_OperatorCharacter");

	Params::GzOperableObjectComponent_OnRep_OperatorCharacter Parms{};

	Parms.PreviousOperatorCharacter = PreviousOperatorCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.TryStartOperation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     NewOperatorCharacter                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOperableObjectComponent::TryStartOperation(class AGzCharacter* NewOperatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "TryStartOperation");

	Params::GzOperableObjectComponent_TryStartOperation Parms{};

	Parms.NewOperatorCharacter = NewOperatorCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.TryStopOperation
// (Final, Native, Public, BlueprintCallable)

void UGzOperableObjectComponent::TryStopOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "TryStopOperation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOperableObjectComponent.CanOperate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     NewOperatorCharacter                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzOperableObjectComponent::CanOperate(class AGzCharacter* NewOperatorCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "CanOperate");

	Params::GzOperableObjectComponent_CanOperate Parms{};

	Parms.NewOperatorCharacter = NewOperatorCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzOperableObjectComponent.GetOperatingCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* UGzOperableObjectComponent::GetOperatingCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOperableObjectComponent", "GetOperatingCharacter");

	Params::GzOperableObjectComponent_GetOperatingCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTurretComponent.OnRep_TurretWeaponActor
// (Final, Native, Protected)

void UGzTurretComponent::OnRep_TurretWeaponActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "OnRep_TurretWeaponActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTurretComponent.OnTurretOwnerDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTurretComponent::OnTurretOwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "OnTurretOwnerDestroyed");

	Params::GzTurretComponent_OnTurretOwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTurretComponent.OnTurretWeaponActorOwnerChanged
// (Final, Native, Protected)
// Parameters:
// class AActor*                           NewWeaponOwner                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTurretComponent::OnTurretWeaponActorOwnerChanged(class AActor* NewWeaponOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "OnTurretWeaponActorOwnerChanged");

	Params::GzTurretComponent_OnTurretWeaponActorOwnerChanged Parms{};

	Parms.NewWeaponOwner = NewWeaponOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTurretComponent.GetRelativeGunnerTurretOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzTurretComponent::GetRelativeGunnerTurretOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "GetRelativeGunnerTurretOffset");

	Params::GzTurretComponent_GetRelativeGunnerTurretOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTurretComponent.GetRelativeTurretRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bUseLocalRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGzTurretComponent::GetRelativeTurretRotation(bool bUseLocalRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "GetRelativeTurretRotation");

	Params::GzTurretComponent_GetRelativeTurretRotation Parms{};

	Parms.bUseLocalRotation = bUseLocalRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTurretComponent.GetTurretSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UGzTurretComponent::GetTurretSkeletalMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "GetTurretSkeletalMeshComponent");

	Params::GzTurretComponent_GetTurretSkeletalMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTurretComponent.GetTurretWeaponActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzTurretWeaponActor*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTurretWeaponActor* UGzTurretComponent::GetTurretWeaponActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretComponent", "GetTurretWeaponActor");

	Params::GzTurretComponent_GetTurretWeaponActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionReconstitutedMessage.SetExtractionProgressTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionReconstitutedMessage::SetExtractionProgressTime(const float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionReconstitutedMessage", "SetExtractionProgressTime");

	Params::GzHexExtractionReconstitutedMessage_SetExtractionProgressTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionReconstitutedMessage.GetExtractionProgressTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzHexExtractionReconstitutedMessage::GetExtractionProgressTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionReconstitutedMessage", "GetExtractionProgressTime");

	Params::GzHexExtractionReconstitutedMessage_GetExtractionProgressTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCrosshair.OnAdsUpdated
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsInAds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshair::OnAdsUpdated(bool bIsInAds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshair", "OnAdsUpdated");

	Params::GzCrosshair_OnAdsUpdated Parms{};

	Parms.bIsInAds = bIsInAds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCrosshair.OnInit_BP
// (Event, Protected, BlueprintEvent)

void UGzCrosshair::OnInit_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshair", "OnInit_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCrosshair.OnLimbChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshair::OnLimbChanged(EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshair", "OnLimbChanged");

	Params::GzCrosshair_OnLimbChanged Parms{};

	Parms.LimbType = LimbType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzCrosshair.OnReset_BP
// (Event, Protected, BlueprintEvent)

void UGzCrosshair::OnReset_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshair", "OnReset_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzCrosshair.OnAimUpdated
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          blockedLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBlocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzCrosshair::OnAimUpdated(const struct FVector& blockedLocation, bool bIsBlocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzCrosshair", "OnAimUpdated");

	Params::GzCrosshair_OnAimUpdated Parms{};

	Parms.blockedLocation = std::move(blockedLocation);
	Parms.bIsBlocked = bIsBlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWeaponAdsSystem.UpdateScopeMeshLocation
// (Final, Native, Private)
// Parameters:
// float                                   InFOV                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponAdsSystem::UpdateScopeMeshLocation(float InFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAdsSystem", "UpdateScopeMeshLocation");

	Params::GzWeaponAdsSystem_UpdateScopeMeshLocation Parms{};

	Parms.InFOV = InFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponAdsSystem.GetCurrenMagnification
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponAdsSystem::GetCurrenMagnification() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAdsSystem", "GetCurrenMagnification");

	Params::GzWeaponAdsSystem_GetCurrenMagnification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponAdsSystem.GetCurrentScopeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzScopeMode               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzScopeMode UGzWeaponAdsSystem::GetCurrentScopeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAdsSystem", "GetCurrentScopeMode");

	Params::GzWeaponAdsSystem_GetCurrentScopeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShield.HandleHit
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHitFromFront                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShield::HandleHit(const bool bHitFromFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShield", "HandleHit");

	Params::GzShield_HandleHit Parms{};

	Parms.bHitFromFront = bHitFromFront;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzShield.OnHealthChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShield::OnHealthChanged(const struct FGameplayEffectSpec& Spec, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShield", "OnHealthChanged");

	Params::GzShield_OnHealthChanged Parms{};

	Parms.Spec = std::move(Spec);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShield.SpawnBulletImpactVFX
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShield::SpawnBulletImpactVFX(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShield", "SpawnBulletImpactVFX");

	Params::GzShield_SpawnBulletImpactVFX Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzThrowableShield.HandleShieldMeshBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResul                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzThrowableShield::HandleShieldMeshBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShield", "HandleShieldMeshBeginOverlap");

	Params::GzThrowableShield_HandleShieldMeshBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResul = std::move(SweepResul);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShield.HandleTargetingSphereBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResul                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzThrowableShield::HandleTargetingSphereBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShield", "HandleTargetingSphereBeginOverlap");

	Params::GzThrowableShield_HandleTargetingSphereBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResul = std::move(SweepResul);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShield.HandleTargetingSphereEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzThrowableShield::HandleTargetingSphereEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShield", "HandleTargetingSphereEndOverlap");

	Params::GzThrowableShield_HandleTargetingSphereEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShield.OnRep_ShieldState
// (Final, Native, Protected)

void AGzThrowableShield::OnRep_ShieldState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShield", "OnRep_ShieldState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShield.GetInterpolatedComponent
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* AGzThrowableShield::GetInterpolatedComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShield", "GetInterpolatedComponent");

	Params::GzThrowableShield_GetInterpolatedComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzItemExtractor.CancelItemExtraction
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AGzItemExtractor::CancelItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "CancelItemExtraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.CompleteItemExtraction
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AGzItemExtractor::CompleteItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "CompleteItemExtraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.OnCancelItemExtraction
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnCancelItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnCancelItemExtraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnCompleteItemExtraction
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnCompleteItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnCompleteItemExtraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnExtractionEnded
// (Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnExtractionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnExtractionEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnExtractionStateChanged
// (Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnExtractionStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnExtractionStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnHackItemExtraction
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnHackItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnHackItemExtraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnPauseChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void AGzItemExtractor::OnPauseChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnPauseChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnRep_ExtractionData
// (Final, Native, Protected)

void AGzItemExtractor::OnRep_ExtractionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnRep_ExtractionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.OnRestoreItemExtraction
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)

void AGzItemExtractor::OnRestoreItemExtraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnRestoreItemExtraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzItemExtractor.OnStartItemExtraction
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// class AGzPlayerState*                   Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzItemExtractor::OnStartItemExtraction(class AGzPlayerState* Player, class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "OnStartItemExtraction");

	Params::GzItemExtractor_OnStartItemExtraction Parms{};

	Parms.Player = Player;
	Parms.ItemData = ItemData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzItemExtractor.PostHexExtractionCancelMessage
// (Final, Native, Protected, BlueprintCallable)

void AGzItemExtractor::PostHexExtractionCancelMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "PostHexExtractionCancelMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.PostHexExtractionHackMessage
// (Final, Native, Protected, BlueprintCallable)

void AGzItemExtractor::PostHexExtractionHackMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "PostHexExtractionHackMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.PostHexExtractionReconstitutedMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ExtractionProgressTime                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzItemExtractor::PostHexExtractionReconstitutedMessage(const float ExtractionProgressTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "PostHexExtractionReconstitutedMessage");

	Params::GzItemExtractor_PostHexExtractionReconstitutedMessage Parms{};

	Parms.ExtractionProgressTime = ExtractionProgressTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.RemoveHackingState
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AGzItemExtractor::RemoveHackingState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "RemoveHackingState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.SetHackingState
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   HackerPS                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzItemExtractor::SetHackingState(class AGzPlayerState* HackerPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "SetHackingState");

	Params::GzItemExtractor_SetHackingState Parms{};

	Parms.HackerPS = HackerPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.SetPaused
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bInPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzItemExtractor::SetPaused(bool bInPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "SetPaused");

	Params::GzItemExtractor_SetPaused Parms{};

	Parms.bInPaused = bInPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.StartItemExtraction
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtractTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzItemExtractor::StartItemExtraction(class AGzPlayerState* Player, class UGzItemData* ItemData, const float ExtractTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "StartItemExtraction");

	Params::GzItemExtractor_StartItemExtraction Parms{};

	Parms.Player = Player;
	Parms.ItemData = ItemData;
	Parms.ExtractTime = ExtractTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzItemExtractor.GetExtractionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzExtractionData          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzExtractionData AGzItemExtractor::GetExtractionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "GetExtractionData");

	Params::GzItemExtractor_GetExtractionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemExtractor.GetLocalHexItemTransforms
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> AGzItemExtractor::GetLocalHexItemTransforms() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "GetLocalHexItemTransforms");

	Params::GzItemExtractor_GetLocalHexItemTransforms Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzItemExtractor.HasHexInside
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzItemExtractor::HasHexInside() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzItemExtractor", "HasHexInside");

	Params::GzItemExtractor_HasHexInside Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetHandSocketName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzCyberlimbFunctionLibrary::GetHandSocketName(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetHandSocketName");

	Params::GzCyberlimbFunctionLibrary_GetHandSocketName Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetLimbChargeAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAttribute UGzCyberlimbFunctionLibrary::GetLimbChargeAttribute(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetLimbChargeAttribute");

	Params::GzCyberlimbFunctionLibrary_GetLimbChargeAttribute Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetLimbCurrentCharges
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           AbilityOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzCyberlimbFunctionLibrary::GetLimbCurrentCharges(class AActor* AbilityOwner, const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetLimbCurrentCharges");

	Params::GzCyberlimbFunctionLibrary_GetLimbCurrentCharges Parms{};

	Parms.AbilityOwner = AbilityOwner;
	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetLimbMaxCharges
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           AbilityOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzCyberlimbFunctionLibrary::GetLimbMaxCharges(class AActor* AbilityOwner, const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetLimbMaxCharges");

	Params::GzCyberlimbFunctionLibrary_GetLimbMaxCharges Parms{};

	Parms.AbilityOwner = AbilityOwner;
	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetLimbMaxChargesAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAttribute UGzCyberlimbFunctionLibrary::GetLimbMaxChargesAttribute(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetLimbMaxChargesAttribute");

	Params::GzCyberlimbFunctionLibrary_GetLimbMaxChargesAttribute Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetLimbRechargeTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzCyberlimbFunctionLibrary::GetLimbRechargeTag(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetLimbRechargeTag");

	Params::GzCyberlimbFunctionLibrary_GetLimbRechargeTag Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.GetShoulderSocketName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzCyberlimbFunctionLibrary::GetShoulderSocketName(const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "GetShoulderSocketName");

	Params::GzCyberlimbFunctionLibrary_GetShoulderSocketName Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.IsLimbAtMaxCharges
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           AbilityOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCyberlimbFunctionLibrary::IsLimbAtMaxCharges(class AActor* AbilityOwner, const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "IsLimbAtMaxCharges");

	Params::GzCyberlimbFunctionLibrary_IsLimbAtMaxCharges Parms{};

	Parms.AbilityOwner = AbilityOwner;
	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.IsLimbRecharging
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           AbilityOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             LimbType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCyberlimbFunctionLibrary::IsLimbRecharging(class AActor* AbilityOwner, const EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "IsLimbRecharging");

	Params::GzCyberlimbFunctionLibrary_IsLimbRecharging Parms{};

	Parms.AbilityOwner = AbilityOwner;
	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzCyberlimbFunctionLibrary.StartDashing
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     TargetCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzDashParamsData*                DashParams                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            TagsToApply                                            (Parm, NativeAccessSpecifierPublic)
// class AActor*                           AimAssistTarget                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExtraOverlapExtents                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExtraOverlapOffset                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ExtraOverlapCollisionProfile                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInResetVelocityAtEnd                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzCyberlimbFunctionLibrary::StartDashing(class AGzCharacter* TargetCharacter, class UGzDashParamsData* DashParams, const struct FVector& TargetLocation, const struct FGameplayTagContainer& TagsToApply, class AActor* AimAssistTarget, const struct FVector& ExtraOverlapExtents, const struct FVector& ExtraOverlapOffset, class FName ExtraOverlapCollisionProfile, const bool bInResetVelocityAtEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzCyberlimbFunctionLibrary", "StartDashing");

	Params::GzCyberlimbFunctionLibrary_StartDashing Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.DashParams = DashParams;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TagsToApply = std::move(TagsToApply);
	Parms.AimAssistTarget = AimAssistTarget;
	Parms.ExtraOverlapExtents = std::move(ExtraOverlapExtents);
	Parms.ExtraOverlapOffset = std::move(ExtraOverlapOffset);
	Parms.ExtraOverlapCollisionProfile = ExtraOverlapCollisionProfile;
	Parms.bInResetVelocityAtEnd = bInResetVelocityAtEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNegativeCondition.MakeNegativeCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzNegativeCondition::MakeNegativeCondition(class AGzAdvancedMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzNegativeCondition", "MakeNegativeCondition");

	Params::GzNegativeCondition_MakeNegativeCondition Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageableRepProxy.OnRep_Items
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FGzFastStaticDamageableItem>OldItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzDamageableRepProxy::OnRep_Items(const TArray<struct FGzFastStaticDamageableItem>& OldItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageableRepProxy", "OnRep_Items");

	Params::GzDamageableRepProxy_OnRep_Items Parms{};

	Parms.OldItems = std::move(OldItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDamageIndicatorContainer.AddIndicator
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzDamageIndicator*               NewIndicator                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDamageIndicatorContainer::AddIndicator(class UGzDamageIndicator* NewIndicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicatorContainer", "AddIndicator");

	Params::GzDamageIndicatorContainer_AddIndicator Parms{};

	Parms.NewIndicator = NewIndicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageIndicatorContainer.ClearIndicators
// (Event, Protected, BlueprintEvent)

void UGzDamageIndicatorContainer::ClearIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicatorContainer", "ClearIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDamageIndicatorContainer.GetDamageIndicatorClass
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzDamageDirectionData           DamageData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UGzDamageIndicator>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGzDamageIndicator> UGzDamageIndicatorContainer::GetDamageIndicatorClass(const struct FGzDamageDirectionData& DamageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicatorContainer", "GetDamageIndicatorClass");

	Params::GzDamageIndicatorContainer_GetDamageIndicatorClass Parms{};

	Parms.DamageData = std::move(DamageData);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzDamageIndicatorContainer.RemoveIndicator
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzDamageIndicator*               DamageIndicator                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDamageIndicatorContainer::RemoveIndicator(class UGzDamageIndicator* DamageIndicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDamageIndicatorContainer", "RemoveIndicator");

	Params::GzDamageIndicatorContainer_RemoveIndicator Parms{};

	Parms.DamageIndicator = DamageIndicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDamageSettings.GetDamageSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzDamageSettings*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzDamageSettings* UGzDamageSettings::GetDamageSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageSettings", "GetDamageSettings");

	Params::GzDamageSettings_GetDamageSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageStatics.GetBaseMultiHitDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzMultiHitDamage                Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDamageStatics::GetBaseMultiHitDamage(const struct FGzMultiHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageStatics", "GetBaseMultiHitDamage");

	Params::GzDamageStatics_GetBaseMultiHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageStatics.GetBaseSimpleHitDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzSingleHitDamage               Damage                                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDamageStatics::GetBaseSimpleHitDamage(const struct FGzSingleHitDamage& Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageStatics", "GetBaseSimpleHitDamage");

	Params::GzDamageStatics_GetBaseSimpleHitDamage Parms{};

	Parms.Damage = std::move(Damage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageStatics.MakeAreaAttack
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzAreaAttackParams              Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UGzDamageStatics::MakeAreaAttack(const struct FGzAreaAttackParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageStatics", "MakeAreaAttack");

	Params::GzDamageStatics_MakeAreaAttack Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDamageStatics.MakeTargetAttack
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzTargetAttackParams            Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDamageStatics::MakeTargetAttack(const struct FGzTargetAttackParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDamageStatics", "MakeTargetAttack");

	Params::GzDamageStatics_MakeTargetAttack Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDatacubeDecoder.FinalizeDecode
// (Final, Native, Protected, BlueprintCallable)

void AGzDatacubeDecoder::FinalizeDecode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "FinalizeDecode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDatacubeDecoder.ReceiveDatacubeSet
// (Event, Protected, BlueprintEvent)

void AGzDatacubeDecoder::ReceiveDatacubeSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "ReceiveDatacubeSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDatacubeDecoder.ReceiveDecodeStarted
// (Event, Protected, BlueprintEvent)

void AGzDatacubeDecoder::ReceiveDecodeStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "ReceiveDecodeStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDatacubeDecoder.GetDatacube
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzContainerItemData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzContainerItemData* AGzDatacubeDecoder::GetDatacube() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "GetDatacube");

	Params::GzDatacubeDecoder_GetDatacube Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDatacubeDecoder.GetDatacubeRarity
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzItemRarity                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzItemRarity AGzDatacubeDecoder::GetDatacubeRarity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "GetDatacubeRarity");

	Params::GzDatacubeDecoder_GetDatacubeRarity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDatacubeDecoder.IsDatacubeSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDatacubeDecoder::IsDatacubeSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDatacubeDecoder", "IsDatacubeSet");

	Params::GzDatacubeDecoder_IsDatacubeSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrialTracker.OnTrackingStarted
// (Native, Event, Protected, BlueprintEvent)

void UGzTrialTracker::OnTrackingStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialTracker", "OnTrackingStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrialTracker.CommitProgress
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// float                                   ProgressMade                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTrialTracker::CommitProgress(const float ProgressMade) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialTracker", "CommitProgress");

	Params::GzTrialTracker_CommitProgress Parms{};

	Parms.ProgressMade = ProgressMade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeathMatchCheatManager.RandomizeAllTeamsSpawn
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzDeathMatchCheatManager::RandomizeAllTeamsSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeathMatchCheatManager", "RandomizeAllTeamsSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeathMatchCheatManager.RandomizeMyTeamSpawn
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzDeathMatchCheatManager::RandomizeMyTeamSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeathMatchCheatManager", "RandomizeMyTeamSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionData.GetMapAssetNames
// (Final, Native, Static, Private)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzMissionData::GetMapAssetNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionData", "GetMapAssetNames");

	Params::GzMissionData_GetMapAssetNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzOnlineMatchManager.LeaveMatch
// (Final, Native, Public, BlueprintCallable)

void UGzOnlineMatchManager::LeaveMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOnlineMatchManager", "LeaveMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOnlineMatchManager.OnNetworkFailure
// (Final, Native, Private)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNetDriver*                       NetDriver                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENetworkFailure                         Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOnlineMatchManager::OnNetworkFailure(class UWorld* World, class UNetDriver* NetDriver, ENetworkFailure Arg, const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOnlineMatchManager", "OnNetworkFailure");

	Params::GzOnlineMatchManager_OnNetworkFailure Parms{};

	Parms.World = World;
	Parms.NetDriver = NetDriver;
	Parms.Arg = Arg;
	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOnlineMatchManager.OnTravelFailure
// (Final, Native, Private)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETravelFailure                          Arg                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOnlineMatchManager::OnTravelFailure(class UWorld* World, ETravelFailure Arg, const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOnlineMatchManager", "OnTravelFailure");

	Params::GzOnlineMatchManager_OnTravelFailure Parms{};

	Parms.World = World;
	Parms.Arg = Arg;
	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOnlineMatchManager.GetLastMatchResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzMatchResult             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzMatchResult UGzOnlineMatchManager::GetLastMatchResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOnlineMatchManager", "GetLastMatchResult");

	Params::GzOnlineMatchManager_GetLastMatchResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzOnlineMatchManager.HasLastMatchResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzOnlineMatchManager::HasLastMatchResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOnlineMatchManager", "HasLastMatchResult");

	Params::GzOnlineMatchManager_HasLastMatchResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLegacyCameraShake.BlueprintGetCameraManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerCameraManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerCameraManager* UGzLegacyCameraShake::BlueprintGetCameraManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLegacyCameraShake", "BlueprintGetCameraManager");

	Params::GzLegacyCameraShake_BlueprintGetCameraManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLegacyCameraShake.GetDefaultFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLegacyCameraShake::GetDefaultFOV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLegacyCameraShake", "GetDefaultFOV");

	Params::GzLegacyCameraShake_GetDefaultFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetBoolValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzDebugMenuVariableInfo         VariableInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::GetBoolValue(const struct FGzDebugMenuVariableInfo& VariableInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetBoolValue");

	Params::GzDebugMenuFunctionLibrary_GetBoolValue Parms{};

	Parms.VariableInfo = std::move(VariableInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetCategory
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuCategory             OutCategory                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::GetCategory(const class FString& Param_Name, struct FGzDebugMenuCategory* OutCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetCategory");

	Params::GzDebugMenuFunctionLibrary_GetCategory Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCategory != nullptr)
		*OutCategory = std::move(Parms.OutCategory);

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetFloatValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzDebugMenuVariableInfo         VariableInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDebugMenuFunctionLibrary::GetFloatValue(const struct FGzDebugMenuVariableInfo& VariableInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetFloatValue");

	Params::GzDebugMenuFunctionLibrary_GetFloatValue Parms{};

	Parms.VariableInfo = std::move(VariableInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetIntValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzDebugMenuVariableInfo         VariableInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzDebugMenuFunctionLibrary::GetIntValue(const struct FGzDebugMenuVariableInfo& VariableInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetIntValue");

	Params::GzDebugMenuFunctionLibrary_GetIntValue Parms{};

	Parms.VariableInfo = std::move(VariableInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetStringValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzDebugMenuVariableInfo         VariableInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzDebugMenuFunctionLibrary::GetStringValue(const struct FGzDebugMenuVariableInfo& VariableInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetStringValue");

	Params::GzDebugMenuFunctionLibrary_GetStringValue Parms{};

	Parms.VariableInfo = std::move(VariableInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.GetVariableInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuVariableInfo         VariableInfoOut                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bExists                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDebugMenuFunctionLibrary::GetVariableInfo(const class FString& Param_Name, struct FGzDebugMenuVariableInfo* VariableInfoOut, bool* bExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "GetVariableInfo");

	Params::GzDebugMenuFunctionLibrary_GetVariableInfo Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (VariableInfoOut != nullptr)
		*VariableInfoOut = std::move(Parms.VariableInfoOut);

	if (bExists != nullptr)
		*bExists = Parms.bExists;
}


// Function G01.GzDebugMenuFunctionLibrary.IsBool
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::IsBool(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "IsBool");

	Params::GzDebugMenuFunctionLibrary_IsBool Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.IsFloat
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::IsFloat(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "IsFloat");

	Params::GzDebugMenuFunctionLibrary_IsFloat Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.IsInt
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::IsInt(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "IsInt");

	Params::GzDebugMenuFunctionLibrary_IsInt Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.IsString
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDebugMenuFunctionLibrary::IsString(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "IsString");

	Params::GzDebugMenuFunctionLibrary_IsString Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.RegisterBoolVariable
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuVariableInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzDebugMenuVariableInfo UGzDebugMenuFunctionLibrary::RegisterBoolVariable(const class FString& Param_Name, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "RegisterBoolVariable");

	Params::GzDebugMenuFunctionLibrary_RegisterBoolVariable Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.RegisterFloatVariable
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuVariableInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzDebugMenuVariableInfo UGzDebugMenuFunctionLibrary::RegisterFloatVariable(const class FString& Param_Name, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "RegisterFloatVariable");

	Params::GzDebugMenuFunctionLibrary_RegisterFloatVariable Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.RegisterIntVariable
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuVariableInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzDebugMenuVariableInfo UGzDebugMenuFunctionLibrary::RegisterIntVariable(const class FString& Param_Name, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "RegisterIntVariable");

	Params::GzDebugMenuFunctionLibrary_RegisterIntVariable Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuFunctionLibrary.RegisterStringVariable
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzDebugMenuVariableInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzDebugMenuVariableInfo UGzDebugMenuFunctionLibrary::RegisterStringVariable(const class FString& Param_Name, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzDebugMenuFunctionLibrary", "RegisterStringVariable");

	Params::GzDebugMenuFunctionLibrary_RegisterStringVariable Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuItemComboBox.InitializeList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzItemType                             InItemType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDebugMenuItemComboBox::InitializeList(EGzItemType InItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "InitializeList");

	Params::GzDebugMenuItemComboBox_InitializeList Parms{};

	Parms.InItemType = InItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDebugMenuItemComboBox.InitializeListForLimb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzItemType                             InItemType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             InLimbType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDebugMenuItemComboBox::InitializeListForLimb(EGzItemType InItemType, EGzLimbType InLimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "InitializeListForLimb");

	Params::GzDebugMenuItemComboBox_InitializeListForLimb Parms{};

	Parms.InItemType = InItemType;
	Parms.InLimbType = InLimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDebugMenuItemComboBox.SetItemRarity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzItemRarity                           Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDebugMenuItemComboBox::SetItemRarity(EGzItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "SetItemRarity");

	Params::GzDebugMenuItemComboBox_SetItemRarity Parms{};

	Parms.Rarity = Rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDebugMenuItemComboBox.SetShowHiddenItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldShow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDebugMenuItemComboBox::SetShowHiddenItems(bool bShouldShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "SetShowHiddenItems");

	Params::GzDebugMenuItemComboBox_SetShowHiddenItems Parms{};

	Parms.bShouldShow = bShouldShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDebugMenuItemComboBox.FindItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGzItemData*                ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzItemData* UGzDebugMenuItemComboBox::FindItemData(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "FindItemData");

	Params::GzDebugMenuItemComboBox_FindItemData Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDebugMenuItemComboBox.GetSelectedItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzItemData*                ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzItemData* UGzDebugMenuItemComboBox::GetSelectedItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDebugMenuItemComboBox", "GetSelectedItemData");

	Params::GzDebugMenuItemComboBox_GetSelectedItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_MortarLegs.HideMapScreenAndPrepareShooting
// (Final, Native, Protected)

void UGzGA_MortarLegs::HideMapScreenAndPrepareShooting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "HideMapScreenAndPrepareShooting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.Initialize
// (Final, Native, Protected)

void UGzGA_MortarLegs::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnLimbMonitorEvent
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnLimbMonitorEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnLimbMonitorEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnScanFinished
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnScanFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnScanFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnScanStarted
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnScanStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnScanStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnScanUpdate
// (Final, Native, Protected)
// Parameters:
// float                                   NewProgress                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_MortarLegs::OnScanUpdate(const float NewProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnScanUpdate");

	Params::GzGA_MortarLegs_OnScanUpdate Parms{};

	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnShootingFinished
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnShootingFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnShootingFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnTargetingCancelled
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnTargetingCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnTargetingCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.OnTargetSelectionFinished
// (Final, Native, Protected)

void UGzGA_MortarLegs::OnTargetSelectionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "OnTargetSelectionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.ReceiveTargetData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_MortarLegs::ReceiveTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "ReceiveTargetData");

	Params::GzGA_MortarLegs_ReceiveTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.SendWorldTargetsToServer
// (Final, Native, Protected)

void UGzGA_MortarLegs::SendWorldTargetsToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "SendWorldTargetsToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.ShowMapScreen
// (Final, Native, Protected)

void UGzGA_MortarLegs::ShowMapScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "ShowMapScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.SpawnProjectile
// (Final, Native, Protected)

void UGzGA_MortarLegs::SpawnProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "SpawnProjectile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.StartShooting
// (Final, Native, Protected)

void UGzGA_MortarLegs::StartShooting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "StartShooting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.WaitNetSyncForAnimationFinished
// (Final, Native, Protected)

void UGzGA_MortarLegs::WaitNetSyncForAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "WaitNetSyncForAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.WaitNetSyncForShooting
// (Final, Native, Protected)

void UGzGA_MortarLegs::WaitNetSyncForShooting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "WaitNetSyncForShooting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MortarLegs.WaitNetSyncForShootingFinished
// (Final, Native, Protected)

void UGzGA_MortarLegs::WaitNetSyncForShootingFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MortarLegs", "WaitNetSyncForShootingFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine_PreviewComponent.DestroyWidget
// (Final, Native, Private)

void UGzSpiderMine_PreviewComponent::DestroyWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "DestroyWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine_PreviewComponent.OnRep_CurrentActiveMines
// (Final, Native, Private)

void UGzSpiderMine_PreviewComponent::OnRep_CurrentActiveMines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "OnRep_CurrentActiveMines");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine_PreviewComponent.PlayClientShootFX
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UGzSpiderMine_PreviewComponent::PlayClientShootFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "PlayClientShootFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine_PreviewComponent.SetPreviewEnabled
// (Final, Native, Public, BlueprintCallable)

void UGzSpiderMine_PreviewComponent::SetPreviewEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "SetPreviewEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine_PreviewComponent.SpawnSpiderMine_PreviewActor
// (Event, Public, BlueprintEvent)

void UGzSpiderMine_PreviewComponent::SpawnSpiderMine_PreviewActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "SpawnSpiderMine_PreviewActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSpiderMine_PreviewComponent.UpdateLinkPreviewActor
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    bCanShow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValid                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSpiderMine_PreviewComponent::UpdateLinkPreviewActor(bool bCanShow, bool bValid, const struct FVector& Start, const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine_PreviewComponent", "UpdateLinkPreviewActor");

	Params::GzSpiderMine_PreviewComponent_UpdateLinkPreviewActor Parms{};

	Parms.bCanShow = bCanShow;
	Parms.bValid = bValid;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreenQuickOrder.HandleDroneCallAvailability
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            Guid                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreenQuickOrder::HandleDroneCallAvailability(const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreenQuickOrder", "HandleDroneCallAvailability");

	Params::GzLoadoutSelectionScreenQuickOrder_HandleDroneCallAvailability Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionScreenQuickOrder.OnValidationFailed
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzQuickOrderCallValidationFailReason   FailReason                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutSelectionScreenQuickOrder::OnValidationFailed(EGzQuickOrderCallValidationFailReason FailReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreenQuickOrder", "OnValidationFailed");

	Params::GzLoadoutSelectionScreenQuickOrder_OnValidationFailed Parms{};

	Parms.FailReason = FailReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutSelectionScreenQuickOrder.OnValidationPassed
// (Event, Protected, BlueprintEvent)

void UGzLoadoutSelectionScreenQuickOrder::OnValidationPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreenQuickOrder", "OnValidationPassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutSelectionScreenQuickOrder.StartCallingDrone
// (Final, Native, Protected, BlueprintCallable)

void UGzLoadoutSelectionScreenQuickOrder::StartCallingDrone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionScreenQuickOrder", "StartCallingDrone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.ModularCharacterAnimInstance.GetModularCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzMultiPartCharacter*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzMultiPartCharacter* UModularCharacterAnimInstance::GetModularCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModularCharacterAnimInstance", "GetModularCharacter");

	Params::ModularCharacterAnimInstance_GetModularCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.CheckParaFallActivation
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::CheckParaFallActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "CheckParaFallActivation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.GetAnimCache
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimCache                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAnimCache UGzDefaultCharacterAnimInstance::GetAnimCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetAnimCache");

	Params::GzDefaultCharacterAnimInstance_GetAnimCache Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetAnimHitReactionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGzAnimHitReactionData>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzAnimHitReactionData> UGzDefaultCharacterAnimInstance::GetAnimHitReactionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetAnimHitReactionData");

	Params::GzDefaultCharacterAnimInstance_GetAnimHitReactionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetOppositeCardinalDirectionNative
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// ECardinalDirectionType                  CurrentDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECardinalDirectionType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECardinalDirectionType UGzDefaultCharacterAnimInstance::GetOppositeCardinalDirectionNative(ECardinalDirectionType CurrentDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetOppositeCardinalDirectionNative");

	Params::GzDefaultCharacterAnimInstance_GetOppositeCardinalDirectionNative Parms{};

	Parms.CurrentDirection = CurrentDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.ProcessTurnYawCurveNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::ProcessTurnYawCurveNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "ProcessTurnYawCurveNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.ResetAnimAbilityState
// (Final, Native, Public)

void UGzDefaultCharacterAnimInstance::ResetAnimAbilityState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "ResetAnimAbilityState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SelectCardinalDirectionFromAngleNative
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeadZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECardinalDirectionType                  CurrentDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseCurrentDirection                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECardinalDirectionType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECardinalDirectionType UGzDefaultCharacterAnimInstance::SelectCardinalDirectionFromAngleNative(float Angle, float DeadZone, ECardinalDirectionType CurrentDirection, bool UseCurrentDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SelectCardinalDirectionFromAngleNative");

	Params::GzDefaultCharacterAnimInstance_SelectCardinalDirectionFromAngleNative Parms{};

	Parms.Angle = Angle;
	Parms.DeadZone = DeadZone;
	Parms.CurrentDirection = CurrentDirection;
	Parms.UseCurrentDirection = UseCurrentDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.SetAnimAbilityState
// (Final, Native, Public)
// Parameters:
// bool                                    bIsActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetAnimAbilityState(bool bIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetAnimAbilityState");

	Params::GzDefaultCharacterAnimInstance_SetAnimAbilityState Parms{};

	Parms.bIsActive = bIsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetAnimLayerInstance
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class UAnimInstance>        NewLayer                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetAnimLayerInstance(TSubclassOf<class UAnimInstance> NewLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetAnimLayerInstance");

	Params::GzDefaultCharacterAnimInstance_SetAnimLayerInstance Parms{};

	Parms.NewLayer = NewLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetAnimStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAnimStances                            Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetAnimStance(EAnimStances Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetAnimStance");

	Params::GzDefaultCharacterAnimInstance_SetAnimStance Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetDefaultAnimLayer
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::SetDefaultAnimLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetDefaultAnimLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetLastLinkedLayer
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    NewInstance                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetLastLinkedLayer(class UAnimInstance* NewInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetLastLinkedLayer");

	Params::GzDefaultCharacterAnimInstance_SetLastLinkedLayer Parms{};

	Parms.NewInstance = NewInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetLastPivotTime
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetLastPivotTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetLastPivotTime");

	Params::GzDefaultCharacterAnimInstance_SetLastPivotTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetLinkedLayerChanged
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetLinkedLayerChanged(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetLinkedLayerChanged");

	Params::GzDefaultCharacterAnimInstance_SetLinkedLayerChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetRootYawOffsetNative
// (Final, Native, Private)
// Parameters:
// float                                   InRootYawOffset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetRootYawOffsetNative(float InRootYawOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetRootYawOffsetNative");

	Params::GzDefaultCharacterAnimInstance_SetRootYawOffsetNative Parms{};

	Parms.InRootYawOffset = InRootYawOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetUpPivotStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetUpPivotStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetUpPivotStateNative");

	Params::GzDefaultCharacterAnimInstance_SetUpPivotStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SetUpStartStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SetUpStartStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SetUpStartStateNative");

	Params::GzDefaultCharacterAnimInstance_SetUpStartStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.StartLeglessState
// (Final, Native, Public)

void UGzDefaultCharacterAnimInstance::StartLeglessState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "StartLeglessState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.StopLeglessState
// (Final, Native, Public)

void UGzDefaultCharacterAnimInstance::StopLeglessState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "StopLeglessState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SwitchAnimLayer
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EGzLayerItemType                        LayerIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SwitchAnimLayer(const EGzLayerItemType LayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SwitchAnimLayer");

	Params::GzDefaultCharacterAnimInstance_SwitchAnimLayer Parms{};

	Parms.LayerIndex = LayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.SwitchAnimLayerInstance
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UAnimInstance>        NewLayer                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::SwitchAnimLayerInstance(TSubclassOf<class UAnimInstance> NewLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "SwitchAnimLayerInstance");

	Params::GzDefaultCharacterAnimInstance_SwitchAnimLayerInstance Parms{};

	Parms.NewLayer = NewLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateAbilityAnimWeight
// (Final, Native, Private)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateAbilityAnimWeight(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateAbilityAnimWeight");

	Params::GzDefaultCharacterAnimInstance_UpdateAbilityAnimWeight Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateAccelerationDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateAccelerationDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateAccelerationDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateAimingDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateAimingDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateAimingDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateBlendWeightDataNative
// (Final, Native, Private)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateBlendWeightDataNative(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateBlendWeightDataNative");

	Params::GzDefaultCharacterAnimInstance_UpdateBlendWeightDataNative Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateCacheLimbFlags
// (Final, Native, Public)
// Parameters:
// int32                                   NewLimbFlags                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateCacheLimbFlags(const int32 NewLimbFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateCacheLimbFlags");

	Params::GzDefaultCharacterAnimInstance_UpdateCacheLimbFlags Parms{};

	Parms.NewLimbFlags = NewLimbFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateCharacterStateDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateCharacterStateDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateCharacterStateDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateGrappleLimbData
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateGrappleLimbData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateGrappleLimbData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateIdleStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateIdleStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateIdleStateNative");

	Params::GzDefaultCharacterAnimInstance_UpdateIdleStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateJumpFallDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateJumpFallDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateJumpFallDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateLeanDataNative
// (Final, Native, Private)
// Parameters:
// class UGzCharacterMovementComponent*    CharacterMovementCmpRef                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateLeanDataNative(const class UGzCharacterMovementComponent* CharacterMovementCmpRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateLeanDataNative");

	Params::GzDefaultCharacterAnimInstance_UpdateLeanDataNative Parms{};

	Parms.CharacterMovementCmpRef = CharacterMovementCmpRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateLocationDataNative
// (Final, Native, Private)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateLocationDataNative(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateLocationDataNative");

	Params::GzDefaultCharacterAnimInstance_UpdateLocationDataNative Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateLocomotionStateMachineNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateLocomotionStateMachineNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateLocomotionStateMachineNative");

	Params::GzDefaultCharacterAnimInstance_UpdateLocomotionStateMachineNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateMirrorData
// (Final, Native, Public)

void UGzDefaultCharacterAnimInstance::UpdateMirrorData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateMirrorData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdatePivotStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdatePivotStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdatePivotStateNative");

	Params::GzDefaultCharacterAnimInstance_UpdatePivotStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateRootYawOffsetNative
// (Final, Native, Private)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateRootYawOffsetNative(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateRootYawOffsetNative");

	Params::GzDefaultCharacterAnimInstance_UpdateRootYawOffsetNative Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateRotationDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateRotationDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateRotationDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateStartStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateStartStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateStartStateNative");

	Params::GzDefaultCharacterAnimInstance_UpdateStartStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateStopStateNative
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzDefaultCharacterAnimInstance::UpdateStopStateNative(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateStopStateNative");

	Params::GzDefaultCharacterAnimInstance_UpdateStopStateNative Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateVelocityDataNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateVelocityDataNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateVelocityDataNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.UpdateWallDetectionHeuristicNative
// (Final, Native, Private)

void UGzDefaultCharacterAnimInstance::UpdateWallDetectionHeuristicNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "UpdateWallDetectionHeuristicNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDefaultCharacterAnimInstance.GetActiveLimbType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EGzLimbType                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EGzLimbType UGzDefaultCharacterAnimInstance::GetActiveLimbType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetActiveLimbType");

	Params::GzDefaultCharacterAnimInstance_GetActiveLimbType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetAimPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UGzDefaultCharacterAnimInstance::GetAimPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetAimPoint");

	Params::GzDefaultCharacterAnimInstance_GetAimPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetAnimStance
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAnimStances                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimStances UGzDefaultCharacterAnimInstance::GetAnimStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetAnimStance");

	Params::GzDefaultCharacterAnimInstance_GetAnimStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetAnimStanceBlendValue
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetAnimStanceBlendValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetAnimStanceBlendValue");

	Params::GzDefaultCharacterAnimInstance_GetAnimStanceBlendValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetCurrentLayerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EGzLayerItemType                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EGzLayerItemType UGzDefaultCharacterAnimInstance::GetCurrentLayerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetCurrentLayerType");

	Params::GzDefaultCharacterAnimInstance_GetCurrentLayerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetCurrentLogicalLayerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLayerItemType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLayerItemType UGzDefaultCharacterAnimInstance::GetCurrentLogicalLayerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetCurrentLogicalLayerType");

	Params::GzDefaultCharacterAnimInstance_GetCurrentLogicalLayerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundFeetIKMaxDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetGroundFeetIKMaxDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundFeetIKMaxDistance");

	Params::GzDefaultCharacterAnimInstance_GetGroundFeetIKMaxDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundFootIKPositionLeftCurveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetGroundFootIKPositionLeftCurveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundFootIKPositionLeftCurveName");

	Params::GzDefaultCharacterAnimInstance_GetGroundFootIKPositionLeftCurveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundFootIKPositionRightCurveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetGroundFootIKPositionRightCurveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundFootIKPositionRightCurveName");

	Params::GzDefaultCharacterAnimInstance_GetGroundFootIKPositionRightCurveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundHandsIKMaxDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetGroundHandsIKMaxDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundHandsIKMaxDistance");

	Params::GzDefaultCharacterAnimInstance_GetGroundHandsIKMaxDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundHandsIKPositionLeftCurveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetGroundHandsIKPositionLeftCurveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundHandsIKPositionLeftCurveName");

	Params::GzDefaultCharacterAnimInstance_GetGroundHandsIKPositionLeftCurveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundHandsIKPositionRightCurveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetGroundHandsIKPositionRightCurveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundHandsIKPositionRightCurveName");

	Params::GzDefaultCharacterAnimInstance_GetGroundHandsIKPositionRightCurveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGroundHandsIKStartOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetGroundHandsIKStartOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGroundHandsIKStartOffset");

	Params::GzDefaultCharacterAnimInstance_GetGroundHandsIKStartOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetGzCharacter
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* UGzDefaultCharacterAnimInstance::GetGzCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetGzCharacter");

	Params::GzDefaultCharacterAnimInstance_GetGzCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetJointTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UGzDefaultCharacterAnimInstance::GetJointTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetJointTargetLocation");

	Params::GzDefaultCharacterAnimInstance_GetJointTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKBlendValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetLeftHandIKBlendValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKBlendValue");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKBlendValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKCurveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetLeftHandIKCurveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKCurveName");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKCurveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzDefaultCharacterAnimInstance::GetLeftHandIKLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKLocation");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetLocation");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetRotation");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetXName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetXName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetXName");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetXName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetXValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetXValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetXValue");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetXValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetYName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetYName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetYName");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetYName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetYValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetYValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetYValue");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetYValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetZName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetZName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetZName");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetZName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKOffsetZValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzDefaultCharacterAnimInstance::GetLeftHandIKOffsetZValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKOffsetZValue");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKOffsetZValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetLeftHandIKRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGzDefaultCharacterAnimInstance::GetLeftHandIKRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetLeftHandIKRotation");

	Params::GzDefaultCharacterAnimInstance_GetLeftHandIKRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetOwnerMovementState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELocomotionMovementState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELocomotionMovementState UGzDefaultCharacterAnimInstance::GetOwnerMovementState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetOwnerMovementState");

	Params::GzDefaultCharacterAnimInstance_GetOwnerMovementState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetOwnerStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELocomotionStance                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELocomotionStance UGzDefaultCharacterAnimInstance::GetOwnerStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetOwnerStance");

	Params::GzDefaultCharacterAnimInstance_GetOwnerStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.GetWeaponUnderBarrelGripType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EGzWeaponSupportHoldType          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EGzWeaponSupportHoldType UGzDefaultCharacterAnimInstance::GetWeaponUnderBarrelGripType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "GetWeaponUnderBarrelGripType");

	Params::GzDefaultCharacterAnimInstance_GetWeaponUnderBarrelGripType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefaultCharacterAnimInstance.IsMovingPerpendicularToInitialPivotNative
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzDefaultCharacterAnimInstance::IsMovingPerpendicularToInitialPivotNative() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefaultCharacterAnimInstance", "IsMovingPerpendicularToInitialPivotNative");

	Params::GzDefaultCharacterAnimInstance_IsMovingPerpendicularToInitialPivotNative Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefilerTarget.CanScanOnAnyDistance
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzDefilerTarget::CanScanOnAnyDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefilerTarget", "CanScanOnAnyDistance");

	Params::GzDefilerTarget_CanScanOnAnyDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefilerTarget.OnDefilerEffectApplied
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzDefilerTarget::OnDefilerEffectApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefilerTarget", "OnDefilerEffectApplied");

	Params::GzDefilerTarget_OnDefilerEffectApplied Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefilerTarget.OnDefilerEffectRemoved
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzDefilerTarget::OnDefilerEffectRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefilerTarget", "OnDefilerEffectRemoved");

	Params::GzDefilerTarget_OnDefilerEffectRemoved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDefilerTarget.GetDefilerTargetType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EGzDefilerTargetType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzDefilerTargetType IGzDefilerTarget::GetDefilerTargetType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDefilerTarget", "GetDefilerTargetType");

	Params::GzDefilerTarget_GetDefilerTargetType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeliveryDrone.OnRep_LocationData
// (Final, Native, Private)

void AGzDeliveryDrone::OnRep_LocationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeliveryDrone", "OnRep_LocationData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeliveryDrone.GetCallerTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzDeliveryDrone::GetCallerTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeliveryDrone", "GetCallerTeamID");

	Params::GzDeliveryDrone_GetCallerTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeliveryDrone.GetDeliveryLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGzDeliveryDrone::GetDeliveryLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeliveryDrone", "GetDeliveryLocation");

	Params::GzDeliveryDrone_GetDeliveryLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeliveryPreviewMarker.UpdateDeliveryPreview
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHasHit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValidHit                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDeliveryPreviewMarker::UpdateDeliveryPreview(bool bHasHit, bool bValidHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeliveryPreviewMarker", "UpdateDeliveryPreview");

	Params::GzDeliveryPreviewMarker_UpdateDeliveryPreview Parms{};

	Parms.bHasHit = bHasHit;
	Parms.bValidHit = bValidHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzKatanaComponent.ShouldDashVertically
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzKatanaComponent::ShouldDashVertically() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzKatanaComponent", "ShouldDashVertically");

	Params::GzKatanaComponent_ShouldDashVertically Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSettingEditConditionBP.GetDisableType
// (Event, Public, BlueprintEvent)
// Parameters:
// EGzDisableSettingType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzDisableSettingType UGzSettingEditConditionBP::GetDisableType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingEditConditionBP", "GetDisableType");

	Params::GzSettingEditConditionBP_GetDisableType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzPhysicsSimulationSyncComponent.ForceSleep
// (Final, Native, Public, BlueprintCallable)

void UGzPhysicsSimulationSyncComponent::ForceSleep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "ForceSleep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.OnPhysicsStartSleeping
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPhysicsSimulationSyncComponent::OnPhysicsStartSleeping(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "OnPhysicsStartSleeping");

	Params::GzPhysicsSimulationSyncComponent_OnPhysicsStartSleeping Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.OnPoseUpdatedOfSleepingObject
// (Final, Native, Public)

void UGzPhysicsSimulationSyncComponent::OnPoseUpdatedOfSleepingObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "OnPoseUpdatedOfSleepingObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.OnRep_PhysicsState
// (Final, Native, Private)
// Parameters:
// struct FGzPhysicsSimulationState        PrevState                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzPhysicsSimulationSyncComponent::OnRep_PhysicsState(const struct FGzPhysicsSimulationState& PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "OnRep_PhysicsState");

	Params::GzPhysicsSimulationSyncComponent_OnRep_PhysicsState Parms{};

	Parms.PrevState = std::move(PrevState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.OnRep_TransformSyncData
// (Final, Native, Private)

void UGzPhysicsSimulationSyncComponent::OnRep_TransformSyncData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "OnRep_TransformSyncData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.Reset
// (Final, Native, Public, BlueprintCallable)

void UGzPhysicsSimulationSyncComponent::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.SetClientReadyForSimulation
// (Final, Native, Public, BlueprintCallable)

void UGzPhysicsSimulationSyncComponent::SetClientReadyForSimulation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "SetClientReadyForSimulation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.SetPoseReplicationFrequency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReplicationsPerSecond                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPhysicsSimulationSyncComponent::SetPoseReplicationFrequency(const float ReplicationsPerSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "SetPoseReplicationFrequency");

	Params::GzPhysicsSimulationSyncComponent_SetPoseReplicationFrequency Parms{};

	Parms.ReplicationsPerSecond = ReplicationsPerSecond;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.SetUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   InMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPhysicsSimulationSyncComponent::SetUp(class UMeshComponent* InMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "SetUp");

	Params::GzPhysicsSimulationSyncComponent_SetUp Parms{};

	Parms.InMeshComponent = InMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.TryStartSimulating
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzImpulseInfo                   InImpulseInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzPhysicsSimulationSyncComponent::TryStartSimulating(const struct FGzImpulseInfo& InImpulseInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "TryStartSimulating");

	Params::GzPhysicsSimulationSyncComponent_TryStartSimulating Parms{};

	Parms.InImpulseInfo = std::move(InImpulseInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhysicsSimulationSyncComponent.GetPhysicsSimulationStateType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzPhysicsSimulationStateType           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzPhysicsSimulationStateType UGzPhysicsSimulationSyncComponent::GetPhysicsSimulationStateType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhysicsSimulationSyncComponent", "GetPhysicsSimulationStateType");

	Params::GzPhysicsSimulationSyncComponent_GetPhysicsSimulationStateType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentPathSetup.GetTransportOffset
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// int32                                   TransportIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumOfTransport                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGzDeploymentPathSetup::GetTransportOffset(int32 TransportIndex, int32 NumOfTransport) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPathSetup", "GetTransportOffset");

	Params::GzDeploymentPathSetup_GetTransportOffset Parms{};

	Parms.TransportIndex = TransportIndex;
	Parms.NumOfTransport = NumOfTransport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentPathSetup.GetZoneTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag AGzDeploymentPathSetup::GetZoneTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPathSetup", "GetZoneTag");

	Params::GzDeploymentPathSetup_GetZoneTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentPawn.OnRep_DeploymentTransport
// (Final, Native, Private)

void AGzDeploymentPawn::OnRep_DeploymentTransport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "OnRep_DeploymentTransport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentPawn.ReceiveDeploymentAllowed
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanPawnDeploy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDeploymentPawn::ReceiveDeploymentAllowed(bool bCanPawnDeploy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "ReceiveDeploymentAllowed");

	Params::GzDeploymentPawn_ReceiveDeploymentAllowed Parms{};

	Parms.bCanPawnDeploy = bCanPawnDeploy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDeploymentPawn.ServerDeploy
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// float                                   ViewRotationYaw                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDeploymentPawn::ServerDeploy(float ViewRotationYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "ServerDeploy");

	Params::GzDeploymentPawn_ServerDeploy Parms{};

	Parms.ViewRotationYaw = ViewRotationYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentPawn.TryDeploy
// (Final, Native, Public, BlueprintCallable)

void AGzDeploymentPawn::TryDeploy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "TryDeploy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentPawn.CanDeploy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDeploymentPawn::CanDeploy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "CanDeploy");

	Params::GzDeploymentPawn_CanDeploy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentPawn.GetDeploymentTransport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzDeploymentTransport*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzDeploymentTransport* AGzDeploymentPawn::GetDeploymentTransport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentPawn", "GetDeploymentTransport");

	Params::GzDeploymentPawn_GetDeploymentTransport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentTransport.AddDeploymentPawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AGzDeploymentPawn*                DeploymentPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDeploymentTransport::AddDeploymentPawn(class AGzDeploymentPawn* DeploymentPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "AddDeploymentPawn");

	Params::GzDeploymentTransport_AddDeploymentPawn Parms{};

	Parms.DeploymentPawn = DeploymentPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentTransport.ForceDeployAll
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzDeploymentTransport::ForceDeployAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "ForceDeployAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentTransport.GetDeploymentAvailableTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDeploymentTransport::GetDeploymentAvailableTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "GetDeploymentAvailableTime");

	Params::GzDeploymentTransport_GetDeploymentAvailableTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDeploymentTransport.OnEndReached
// (Event, Protected, BlueprintEvent)

void AGzDeploymentTransport::OnEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "OnEndReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDeploymentTransport.OnRep_CanPawnsDeploy
// (Final, Native, Protected)

void AGzDeploymentTransport::OnRep_CanPawnsDeploy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "OnRep_CanPawnsDeploy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDeploymentTransport.SetDeploymentEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDeploymentTransport::SetDeploymentEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDeploymentTransport", "SetDeploymentEnabled");

	Params::GzDeploymentTransport_SetDeploymentEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzImpulseAffectedInterface.AddDampedImpulse
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGzImpulseAffectedInterface::AddDampedImpulse(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzImpulseAffectedInterface", "AddDampedImpulse");

	Params::GzImpulseAffectedInterface_AddDampedImpulse Parms{};

	Parms.Impulse = std::move(Impulse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzFloatingStatusBarWidget.SetHealthPercentage
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HealthPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzFloatingStatusBarWidget::SetHealthPercentage(float HealthPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFloatingStatusBarWidget", "SetHealthPercentage");

	Params::GzFloatingStatusBarWidget_SetHealthPercentage Parms{};

	Parms.HealthPercentage = HealthPercentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzFloatingStatusBarWidget.SetName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzFloatingStatusBarWidget::SetName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFloatingStatusBarWidget", "SetName");

	Params::GzFloatingStatusBarWidget_SetName Parms{};

	Parms.NewName = std::move(NewName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzFloatingStatusBarWidget.SetOwnerActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzFloatingStatusBarWidget::SetOwnerActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFloatingStatusBarWidget", "SetOwnerActor");

	Params::GzFloatingStatusBarWidget_SetOwnerActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzFloatingStatusBarWidget.ShouldShow
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzFloatingStatusBarWidget::ShouldShow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFloatingStatusBarWidget", "ShouldShow");

	Params::GzFloatingStatusBarWidget_ShouldShow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPhosphorousDartProjectile.BP_OnHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzPhosphorousDartProjectile::BP_OnHit(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "BP_OnHit");

	Params::GzPhosphorousDartProjectile_BP_OnHit Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPhosphorousDartProjectile.BP_OnLaunched
// (Event, Protected, BlueprintEvent)

void AGzPhosphorousDartProjectile::BP_OnLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "BP_OnLaunched");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPhosphorousDartProjectile.BP_OnSpawnOverlap
// (Event, Protected, BlueprintEvent)

void AGzPhosphorousDartProjectile::BP_OnSpawnOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "BP_OnSpawnOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPhosphorousDartProjectile.OnRep_ImpactHit
// (Final, Native, Protected)

void AGzPhosphorousDartProjectile::OnRep_ImpactHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "OnRep_ImpactHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhosphorousDartProjectile.OnSphereOverlapBegin
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzPhosphorousDartProjectile::OnSphereOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "OnSphereOverlapBegin");

	Params::GzPhosphorousDartProjectile_OnSphereOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPhosphorousDartProjectile.OnSphereOverlapEnd
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPhosphorousDartProjectile::OnSphereOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPhosphorousDartProjectile", "OnSphereOverlapEnd");

	Params::GzPhosphorousDartProjectile_OnSphereOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleActor.OnHealthChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDestructibleActor::OnHealthChanged(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleActor", "OnHealthChanged");

	Params::GzDestructibleActor_OnHealthChanged Parms{};

	Parms.Health = Health;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleActor.IsDestructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDestructibleActor::IsDestructed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleActor", "IsDestructed");

	Params::GzDestructibleActor_IsDestructed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDestructibleBase.DestroyOnClient
// (Final, Native, Protected, BlueprintCallable)

void AGzDestructibleBase::DestroyOnClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "DestroyOnClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleBase.OnRep_AuthorityDestroyed
// (Final, Native, Private)

void AGzDestructibleBase::OnRep_AuthorityDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "OnRep_AuthorityDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleBase.ReceiveDestructibleDestroyed
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          DestructionImpulse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDestructibleBase::ReceiveDestructibleDestroyed(const struct FVector& DestructionImpulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "ReceiveDestructibleDestroyed");

	Params::GzDestructibleBase_ReceiveDestructibleDestroyed Parms{};

	Parms.DestructionImpulse = std::move(DestructionImpulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDestructibleBase.ReceiveDestructibleHit
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitImpulse                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDestructibleBase::ReceiveDestructibleHit(const struct FVector& HitImpulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "ReceiveDestructibleHit");

	Params::GzDestructibleBase_ReceiveDestructibleHit Parms{};

	Parms.HitImpulse = std::move(HitImpulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDestructibleBase.GetDestroyHitMask
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzDestructibleHitType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzDestructibleHitType AGzDestructibleBase::GetDestroyHitMask() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "GetDestroyHitMask");

	Params::GzDestructibleBase_GetDestroyHitMask Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDestructibleBase.GetHitMask
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzDestructibleHitType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzDestructibleHitType AGzDestructibleBase::GetHitMask() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleBase", "GetHitMask");

	Params::GzDestructibleBase_GetHitMask Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.CanAddItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAllowSwap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::CanAddItem(const class UGzInvComponent* Inventory, const struct FGzInvItem& Item, bool bAllowSwap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "CanAddItem");

	Params::GzInvStatics_CanAddItem Parms{};

	Parms.Inventory = Inventory;
	Parms.Item = std::move(Item);
	Parms.bAllowSwap = bAllowSwap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.EquipLoadout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bDropReplacedItems                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvStatics::EquipLoadout(class UGzInvComponent* Inventory, const TArray<struct FGzInvItem>& Items, bool bDropReplacedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "EquipLoadout");

	Params::GzInvStatics_EquipLoadout Parms{};

	Parms.Inventory = Inventory;
	Parms.Items = std::move(Items);
	Parms.bDropReplacedItems = bDropReplacedItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInvStatics.GetAllItems
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvStatics::GetAllItems(const class UGzInvComponent* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetAllItems");

	Params::GzInvStatics_GetAllItems Parms{};

	Parms.Inventory = Inventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetAttributeFromItemByTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInvStatics::GetAttributeFromItemByTag(const struct FGzInvItem& Item, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetAttributeFromItemByTag");

	Params::GzInvStatics_GetAttributeFromItemByTag Parms{};

	Parms.Item = std::move(Item);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetCapacityToAutoStack
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzInvStatics::GetCapacityToAutoStack(const class UGzInvComponent* Inventory, const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetCapacityToAutoStack");

	Params::GzInvStatics_GetCapacityToAutoStack Parms{};

	Parms.Inventory = Inventory;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetDefaultAttributeFromItemByTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInvStatics::GetDefaultAttributeFromItemByTag(const struct FGzInvItem& Item, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetDefaultAttributeFromItemByTag");

	Params::GzInvStatics_GetDefaultAttributeFromItemByTag Parms{};

	Parms.Item = std::move(Item);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetDefaultAttributeFromItemDataByTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzInvStatics::GetDefaultAttributeFromItemDataByTag(const class UGzItemData* ItemData, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetDefaultAttributeFromItemDataByTag");

	Params::GzInvStatics_GetDefaultAttributeFromItemDataByTag Parms{};

	Parms.ItemData = ItemData;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetDefaultPockets
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvPocket>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvPocket> UGzInvStatics::GetDefaultPockets(const class UGzInvComponent* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetDefaultPockets");

	Params::GzInvStatics_GetDefaultPockets Parms{};

	Parms.Inventory = Inventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetHighestRarityItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGzInvItem>               Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvStatics::GetHighestRarityItem(const TArray<struct FGzInvItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetHighestRarityItem");

	Params::GzInvStatics_GetHighestRarityItem Parms{};

	Parms.Items = std::move(Items);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemCountByItemData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzInvStatics::GetItemCountByItemData(const class UGzInvComponent* Inventory, const class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemCountByItemData");

	Params::GzInvStatics_GetItemCountByItemData Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemCountByType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzInvStatics::GetItemCountByType(const class UGzInvComponent* Inventory, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemCountByType");

	Params::GzInvStatics_GetItemCountByType Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGzItemData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzItemData* UGzInvStatics::GetItemData(const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemData");

	Params::GzInvStatics_GetItemData Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemDataByItemType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzItemData* UGzInvStatics::GetItemDataByItemType(const class UGzInvComponent* Inventory, const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemDataByItemType");

	Params::GzInvStatics_GetItemDataByItemType Parms{};

	Parms.Inventory = Inventory;
	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemQuantity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzInvStatics::GetItemQuantity(const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemQuantity");

	Params::GzInvStatics_GetItemQuantity Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemsByItemData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvStatics::GetItemsByItemData(const class UGzInvComponent* Inventory, const class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemsByItemData");

	Params::GzInvStatics_GetItemsByItemData Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemsByItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvStatics::GetItemsByItemType(const class UGzInvComponent* Inventory, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemsByItemType");

	Params::GzInvStatics_GetItemsByItemType Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetItemsBySlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvStatics::GetItemsBySlot(const class UGzInvComponent* Inventory, const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetItemsBySlot");

	Params::GzInvStatics_GetItemsBySlot Parms{};

	Parms.Inventory = Inventory;
	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetLimbItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGzExecResult                           ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbInvItem                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzLimbInvItem UGzInvStatics::GetLimbItem(const struct FGzInvItem& Item, EGzExecResult* ExecResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetLimbItem");

	Params::GzInvStatics_GetLimbItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetLimbTypeBySlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzLimbType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLimbType UGzInvStatics::GetLimbTypeBySlot(const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetLimbTypeBySlot");

	Params::GzInvStatics_GetLimbTypeBySlot Parms{};

	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketByItemData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzInvPocket               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocket UGzInvStatics::GetPocketByItemData(const class UGzInvComponent* Inventory, const class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketByItemData");

	Params::GzInvStatics_GetPocketByItemData Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketByItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzInvPocket               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocket UGzInvStatics::GetPocketByItemType(const class UGzInvComponent* Inventory, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketByItemType");

	Params::GzInvStatics_GetPocketByItemType Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketBySlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzInvPocket               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzInvPocket UGzInvStatics::GetPocketBySlot(const class UGzInvComponent* Inventory, const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketBySlot");

	Params::GzInvStatics_GetPocketBySlot Parms{};

	Parms.Inventory = Inventory;
	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketsByItemData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvPocket>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvPocket> UGzInvStatics::GetPocketsByItemData(const class UGzInvComponent* Inventory, const class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketsByItemData");

	Params::GzInvStatics_GetPocketsByItemData Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketsByItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvPocket>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvPocket> UGzInvStatics::GetPocketsByItemType(const class UGzInvComponent* Inventory, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketsByItemType");

	Params::GzInvStatics_GetPocketsByItemType Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetPocketsBySlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvPocket>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvPocket> UGzInvStatics::GetPocketsBySlot(const class UGzInvComponent* Inventory, const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetPocketsBySlot");

	Params::GzInvStatics_GetPocketsBySlot Parms{};

	Parms.Inventory = Inventory;
	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetSimpleItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGzExecResult                           ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSimpleInvItem                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzSimpleInvItem UGzInvStatics::GetSimpleItem(const struct FGzInvItem& Item, EGzExecResult* ExecResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetSimpleItem");

	Params::GzInvStatics_GetSimpleItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetSortedByRarity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGzInvItem>               Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAscending                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvItem> UGzInvStatics::GetSortedByRarity(const TArray<struct FGzInvItem>& Items, bool bAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetSortedByRarity");

	Params::GzInvStatics_GetSortedByRarity Parms{};

	Parms.Items = std::move(Items);
	Parms.bAscending = bAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetVirtualPockets
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInvPocket>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInvPocket> UGzInvStatics::GetVirtualPockets(const class UGzInvComponent* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetVirtualPockets");

	Params::GzInvStatics_GetVirtualPockets Parms{};

	Parms.Inventory = Inventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.GetWeaponItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGzExecResult                           ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzWeaponInvItem                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzWeaponInvItem UGzInvStatics::GetWeaponItem(const struct FGzInvItem& Item, EGzExecResult* ExecResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "GetWeaponItem");

	Params::GzInvStatics_GetWeaponItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.HasItemInSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Slot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::HasItemInSlot(const class UGzInvComponent* Inventory, const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "HasItemInSlot");

	Params::GzInvStatics_HasItemInSlot Parms{};

	Parms.Inventory = Inventory;
	Parms.Slot = std::move(Slot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.HasItemOfType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::HasItemOfType(const class UGzInvComponent* Inventory, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "HasItemOfType");

	Params::GzInvStatics_HasItemOfType Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.HasItemWithData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      ItemData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::HasItemWithData(const class UGzInvComponent* Inventory, const class UGzItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "HasItemWithData");

	Params::GzInvStatics_HasItemWithData Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemData = ItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsAmmoItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsAmmoItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsAmmoItemType");

	Params::GzInvStatics_IsAmmoItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsBackpackItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsBackpackItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsBackpackItemType");

	Params::GzInvStatics_IsBackpackItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsConsumableItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsConsumableItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsConsumableItemType");

	Params::GzInvStatics_IsConsumableItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsEmptyPocket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvPocket                     Pocket                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsEmptyPocket(const struct FGzInvPocket& Pocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsEmptyPocket");

	Params::GzInvStatics_IsEmptyPocket Parms{};

	Parms.Pocket = std::move(Pocket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsEqualPocketIds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvPocketId                   LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsEqualPocketIds(const struct FGzInvPocketId& LHS, const struct FGzInvPocketId& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsEqualPocketIds");

	Params::GzInvStatics_IsEqualPocketIds Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsInGameCurrencyItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsInGameCurrencyItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsInGameCurrencyItemType");

	Params::GzInvStatics_IsInGameCurrencyItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsLimbItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsLimbItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsLimbItemType");

	Params::GzInvStatics_IsLimbItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsPrimaryWeaponItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsPrimaryWeaponItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsPrimaryWeaponItemType");

	Params::GzInvStatics_IsPrimaryWeaponItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsSidearmItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsSidearmItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsSidearmItemType");

	Params::GzInvStatics_IsSidearmItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsValidItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsValidItem(const struct FGzInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsValidItem");

	Params::GzInvStatics_IsValidItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsValidPocket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInvPocket                     Pocket                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsValidPocket(const struct FGzInvPocket& Pocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsValidPocket");

	Params::GzInvStatics_IsValidPocket Parms{};

	Parms.Pocket = std::move(Pocket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.IsWeaponItemType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::IsWeaponItemType(const struct FGameplayTag& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "IsWeaponItemType");

	Params::GzInvStatics_IsWeaponItemType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.MakeItemFromContent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzInventoryItemContent          Content                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvStatics::MakeItemFromContent(const struct FGzInventoryItemContent& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "MakeItemFromContent");

	Params::GzInvStatics_MakeItemFromContent Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.MakeItemFromLimb
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzLimbInvItem                   Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvStatics::MakeItemFromLimb(const struct FGzLimbInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "MakeItemFromLimb");

	Params::GzInvStatics_MakeItemFromLimb Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.MakeItemFromSimple
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzSimpleInvItem                 Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvStatics::MakeItemFromSimple(const struct FGzSimpleInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "MakeItemFromSimple");

	Params::GzInvStatics_MakeItemFromSimple Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.MakeItemFromWeapon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzWeaponInvItem                 Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzInvStatics::MakeItemFromWeapon(const struct FGzWeaponInvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "MakeItemFromWeapon");

	Params::GzInvStatics_MakeItemFromWeapon Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.MatchItemToType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInvItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::MatchItemToType(const struct FGzInvItem& Item, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "MatchItemToType");

	Params::GzInvStatics_MatchItemToType Parms{};

	Parms.Item = std::move(Item);
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.SubscribeToInventoryItemChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzItemChangeHandle              Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGzInvItem& Item, EGzInvChangeEvent ChangeEvent)>Filter                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGzInvItem& ItemDelta, EGzInvChangeEvent Event)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvStatics::SubscribeToInventoryItemChange(class UGzInvComponent* Inventory, struct FGzItemChangeHandle& Handle, const TDelegate<void(struct FGzInvItem& Item, EGzInvChangeEvent ChangeEvent)>& Filter, const TDelegate<void(struct FGzInvItem& ItemDelta, EGzInvChangeEvent Event)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "SubscribeToInventoryItemChange");

	Params::GzInvStatics_SubscribeToInventoryItemChange Parms{};

	Parms.Inventory = Inventory;
	Parms.Handle = std::move(Handle);
	Parms.Filter = Filter;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function G01.GzInvStatics.SubscribeToInventoryPocketChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPocketChangeHandle            Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGzInvPocketDef& PocketDef, struct FGzInvPocket& Pocket)>Filter                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGzInvPocketChangeData& PocketChangeData)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvStatics::SubscribeToInventoryPocketChange(class UGzInvComponent* Inventory, struct FGzPocketChangeHandle& Handle, const TDelegate<void(struct FGzInvPocketDef& PocketDef, struct FGzInvPocket& Pocket)>& Filter, const TDelegate<void(struct FGzInvPocketChangeData& PocketChangeData)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "SubscribeToInventoryPocketChange");

	Params::GzInvStatics_SubscribeToInventoryPocketChange Parms{};

	Parms.Inventory = Inventory;
	Parms.Handle = std::move(Handle);
	Parms.Filter = Filter;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function G01.GzInvStatics.TryConsumeInGameCurrency
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzInvComponent*                  Inventory                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInvStatics::TryConsumeInGameCurrency(class UGzInvComponent* Inventory, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "TryConsumeInGameCurrency");

	Params::GzInvStatics_TryConsumeInGameCurrency Parms{};

	Parms.Inventory = Inventory;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInvStatics.UnsubscribeFromItemChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzItemChangeHandle              Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvStatics::UnsubscribeFromItemChange(struct FGzItemChangeHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "UnsubscribeFromItemChange");

	Params::GzInvStatics_UnsubscribeFromItemChange Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function G01.GzInvStatics.UnsubscribeFromPocketChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzPocketChangeHandle            Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInvStatics::UnsubscribeFromPocketChange(struct FGzPocketChangeHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInvStatics", "UnsubscribeFromPocketChange");

	Params::GzInvStatics_UnsubscribeFromPocketChange Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function G01.GzDestructibleHeatSink.OnMultiHit
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMultiHitDamage                MultiHit                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzDestructibleHeatSink::OnMultiHit(class UGzDamageableComponent* Receiver, const struct FGzMultiHitDamage& MultiHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "OnMultiHit");

	Params::GzDestructibleHeatSink_OnMultiHit Parms{};

	Parms.Receiver = Receiver;
	Parms.MultiHit = std::move(MultiHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleHeatSink.OnSingleHit
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSingleHitDamage               SingleHit                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzDestructibleHeatSink::OnSingleHit(class UGzDamageableComponent* Receiver, const struct FGzSingleHitDamage& SingleHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "OnSingleHit");

	Params::GzDestructibleHeatSink_OnSingleHit Parms{};

	Parms.Receiver = Receiver;
	Parms.SingleHit = std::move(SingleHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDestructibleHeatSink.ReceiveDestroy
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDestructibleHeatSink::ReceiveDestroy(const struct FHitResult& HitResult, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "ReceiveDestroy");

	Params::GzDestructibleHeatSink_ReceiveDestroy Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.bInstant = bInstant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDestructibleHeatSink.ReceiveReset
// (Event, Protected, BlueprintEvent)

void AGzDestructibleHeatSink::ReceiveReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "ReceiveReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzDestructibleHeatSink.SetOwningTeam
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDestructibleHeatSink::SetOwningTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "SetOwningTeam");

	Params::GzDestructibleHeatSink_SetOwningTeam Parms{};

	Parms.TeamID = TeamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDestructibleHeatSink.IsDestroyed
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDestructibleHeatSink::IsDestroyed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDestructibleHeatSink", "IsDestroyed");

	Params::GzDestructibleHeatSink_IsDestroyed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRewardData.GetIdentifierString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzRewardData::GetIdentifierString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRewardData", "GetIdentifierString");

	Params::GzRewardData_GetIdentifierString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDomeShield.SpawnBulletImpactVFX
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         HitRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzDomeShield::SpawnBulletImpactVFX(const struct FVector& HitLocation, const struct FRotator& HitRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDomeShield", "SpawnBulletImpactVFX");

	Params::GzDomeShield_SpawnBulletImpactVFX Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitRotation = std::move(HitRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDoorBase.GetShowInteractionTooltipIfDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::GetShowInteractionTooltipIfDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetShowInteractionTooltipIfDisabled");

	Params::GzDoorBase_GetShowInteractionTooltipIfDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.OnComponentBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzDoorBase::OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "OnComponentBeginOverlap");

	Params::GzDoorBase_OnComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.OnComponentEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "OnComponentEndOverlap");

	Params::GzDoorBase_OnComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.OnInteract
// (Final, Native, Protected)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "OnInteract");

	Params::GzDoorBase_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.OnRep_Locked
// (Final, Native, Protected)

void AGzDoorBase::OnRep_Locked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "OnRep_Locked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.OnRep_State
// (Final, Native, Protected)
// Parameters:
// EGzDoorState                            OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::OnRep_State(EGzDoorState OldState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "OnRep_State");

	Params::GzDoorBase_OnRep_State Parms{};

	Parms.OldState = OldState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.ReceiveDynamicStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bOpening                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::ReceiveDynamicStateChanged(bool bOpening)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "ReceiveDynamicStateChanged");

	Params::GzDoorBase_ReceiveDynamicStateChanged Parms{};

	Parms.bOpening = bOpening;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDoorBase.ReceiveLockedStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::ReceiveLockedStateChanged(bool bNewLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "ReceiveLockedStateChanged");

	Params::GzDoorBase_ReceiveLockedStateChanged Parms{};

	Parms.bNewLocked = bNewLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDoorBase.ReceiveStaticStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bOpened                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::ReceiveStaticStateChanged(bool bOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "ReceiveStaticStateChanged");

	Params::GzDoorBase_ReceiveStaticStateChanged Parms{};

	Parms.bOpened = bOpened;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzDoorBase.SetIsLocked
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewLocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::SetIsLocked(bool bNewLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "SetIsLocked");

	Params::GzDoorBase_SetIsLocked Parms{};

	Parms.bNewLocked = bNewLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.SetOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInOpen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::SetOpen(bool bInOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "SetOpen");

	Params::GzDoorBase_SetOpen Parms{};

	Parms.bInOpen = bInOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.SetShowInteractionTooltipIfDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewShowTooltip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::SetShowInteractionTooltipIfDisabled(bool bNewShowTooltip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "SetShowInteractionTooltipIfDisabled");

	Params::GzDoorBase_SetShowInteractionTooltipIfDisabled Parms{};

	Parms.bNewShowTooltip = bNewShowTooltip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.SetTransitionTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzDoorBase::SetTransitionTime(const float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "SetTransitionTime");

	Params::GzDoorBase_SetTransitionTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzDoorBase.ShouldReactToOverlappedActor
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::ShouldReactToOverlappedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "ShouldReactToOverlappedActor");

	Params::GzDoorBase_ShouldReactToOverlappedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.GetDoorState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzDoorState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzDoorState AGzDoorBase::GetDoorState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetDoorState");

	Params::GzDoorBase_GetDoorState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.GetMontagePlaybackRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDoorBase::GetMontagePlaybackRate(const class UAnimMontage* Montage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetMontagePlaybackRate");

	Params::GzDoorBase_GetMontagePlaybackRate Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.GetMontageStartingPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOpenMontage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDoorBase::GetMontageStartingPosition(const class UAnimMontage* Montage, bool bOpenMontage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetMontageStartingPosition");

	Params::GzDoorBase_GetMontageStartingPosition Parms{};

	Parms.Montage = Montage;
	Parms.bOpenMontage = bOpenMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.GetTransitionProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDoorBase::GetTransitionProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetTransitionProgress");

	Params::GzDoorBase_GetTransitionProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.GetTransitionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzDoorBase::GetTransitionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "GetTransitionTime");

	Params::GzDoorBase_GetTransitionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.IsAutomaticDoor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::IsAutomaticDoor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "IsAutomaticDoor");

	Params::GzDoorBase_IsAutomaticDoor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.IsCloseState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::IsCloseState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "IsCloseState");

	Params::GzDoorBase_IsCloseState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "IsLocked");

	Params::GzDoorBase_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDoorBase.IsOpenState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzDoorBase::IsOpenState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDoorBase", "IsOpenState");

	Params::GzDoorBase_IsOpenState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDormantCapableActor.FlushNetworkDormancy
// (Final, Native, Protected, BlueprintCallable)

void AGzDormantCapableActor::FlushNetworkDormancy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDormantCapableActor", "FlushNetworkDormancy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_QuickMeleeAttack.OnMeleeAttackAnimationNotification
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_QuickMeleeAttack::OnMeleeAttackAnimationNotification(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_QuickMeleeAttack", "OnMeleeAttackAnimationNotification");

	Params::GzGA_QuickMeleeAttack_OnMeleeAttackAnimationNotification Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_QuickMeleeAttack.OnMontageEnded
// (Final, Native, Protected)

void UGzGA_QuickMeleeAttack::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_QuickMeleeAttack", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionStartedMessage.SetTerminalLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionStartedMessage::SetTerminalLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionStartedMessage", "SetTerminalLocation");

	Params::GzHexExtractionStartedMessage_SetTerminalLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionStartedMessage.SetTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzHexExtractionStartedMessage::SetTime(const float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionStartedMessage", "SetTime");

	Params::GzHexExtractionStartedMessage_SetTime Parms{};

	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHexExtractionStartedMessage.GetTerminalLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzHexExtractionStartedMessage::GetTerminalLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionStartedMessage", "GetTerminalLocation");

	Params::GzHexExtractionStartedMessage_GetTerminalLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHexExtractionStartedMessage.GetTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzHexExtractionStartedMessage::GetTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHexExtractionStartedMessage", "GetTime");

	Params::GzHexExtractionStartedMessage_GetTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDroneGoblinSpawner.TriggerDroneSpawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AGzDroneGoblin*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzDroneGoblin* AGzDroneGoblinSpawner::TriggerDroneSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDroneGoblinSpawner", "TriggerDroneSpawn");

	Params::GzDroneGoblinSpawner_TriggerDroneSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDroneGoblinSpawner.GetTrackSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGzTrack*>           ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzTrack*> AGzDroneGoblinSpawner::GetTrackSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDroneGoblinSpawner", "GetTrackSet");

	Params::GzDroneGoblinSpawner_GetTrackSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzDropTableData.RollItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInventoryItemContent          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInventoryItemContent UGzDropTableData::RollItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzDropTableData", "RollItem");

	Params::GzDropTableData_RollItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessFX.OnFadeInEnded
// (Native, Event, Protected, BlueprintEvent)

void UGzPostProcessFX::OnFadeInEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "OnFadeInEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPostProcessFX.StartBP
// (Event, Protected, BlueprintEvent)

void UGzPostProcessFX::StartBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "StartBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPostProcessFX.StopBP
// (Event, Protected, BlueprintEvent)

void UGzPostProcessFX::StopBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "StopBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPostProcessFX.StopSelf
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPostProcessFX::StopSelf(bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "StopSelf");

	Params::GzPostProcessFX_StopSelf Parms{};

	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPostProcessFX.TickBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPostProcessFX::TickBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "TickBP");

	Params::GzPostProcessFX_TickBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPostProcessFX.GetFadeInProgress
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzPostProcessFX::GetFadeInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "GetFadeInProgress");

	Params::GzPostProcessFX_GetFadeInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessFX.GetFadeOutProgress
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzPostProcessFX::GetFadeOutProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "GetFadeOutProgress");

	Params::GzPostProcessFX_GetFadeOutProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessFX.IsFadingIn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPostProcessFX::IsFadingIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "IsFadingIn");

	Params::GzPostProcessFX_IsFadingIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessFX.IsFadingOut
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPostProcessFX::IsFadingOut() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessFX", "IsFadingOut");

	Params::GzPostProcessFX_IsFadingOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzEditorPreviewCharacter.EditorInitMeshComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzCharacterCustomizationComponent*EditorCustomizationComponent                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzEditorPreviewCharacter::EditorInitMeshComponents(class UGzCharacterCustomizationComponent* EditorCustomizationComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEditorPreviewCharacter", "EditorInitMeshComponents");

	Params::GzEditorPreviewCharacter_EditorInitMeshComponents Parms{};

	Parms.EditorCustomizationComponent = EditorCustomizationComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzEffectPropagationActor.OnPawnBeginOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzEffectPropagationActor::OnPawnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEffectPropagationActor", "OnPawnBeginOverlap");

	Params::GzEffectPropagationActor_OnPawnBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzEffectPropagationActor.OnPawnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzEffectPropagationActor::OnPawnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEffectPropagationActor", "OnPawnEndOverlap");

	Params::GzEffectPropagationActor_OnPawnEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzBPEmoteHelper.GetEmoteCIT
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzEmoteCustomizationData        CustomizationData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UGzCIT_Emote*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzCIT_Emote* UGzBPEmoteHelper::GetEmoteCIT(const struct FGzEmoteCustomizationData& CustomizationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzBPEmoteHelper", "GetEmoteCIT");

	Params::GzBPEmoteHelper_GetEmoteCIT Parms{};

	Parms.CustomizationData = std::move(CustomizationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerMarkersHolderComponent.GetMarkerById
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMarkerComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMarkerComponent* UGzPlayerMarkersHolderComponent::GetMarkerById(int32 MarkerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "GetMarkerById");

	Params::GzPlayerMarkersHolderComponent_GetMarkerById Parms{};

	Parms.MarkerId = MarkerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerMarkersHolderComponent.OnControllerInit
// (Final, Native, Private)
// Parameters:
// class AGzPlayerController*              PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnControllerInit(class AGzPlayerController* PlayerController, class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnControllerInit");

	Params::GzPlayerMarkersHolderComponent_OnControllerInit Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnMarkersDirty
// (Final, Native, Private)

void UGzPlayerMarkersHolderComponent::OnMarkersDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnMarkersDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnMissionStarted
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnMissionStarted(class AGzMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnMissionStarted");

	Params::GzPlayerMarkersHolderComponent_OnMissionStarted Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnMissionStateChanged");

	Params::GzPlayerMarkersHolderComponent_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnMissionTrackingChanged
// (Final, Native, Private)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTracked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnMissionTrackingChanged(class AGzAdvancedMission* Mission, bool bIsTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnMissionTrackingChanged");

	Params::GzPlayerMarkersHolderComponent_OnMissionTrackingChanged Parms{};

	Parms.Mission = Mission;
	Parms.bIsTracked = bIsTracked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnPawnChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnPawnChanged");

	Params::GzPlayerMarkersHolderComponent_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnPlayerChangeTeam
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnPlayerChangeTeam(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnPlayerChangeTeam");

	Params::GzPlayerMarkersHolderComponent_OnPlayerChangeTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnRedeployPriceChanged
// (Final, Native, Private)
// Parameters:
// class AGzGameState*                     GS                                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnRedeployPriceChanged(const class AGzGameState* GS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnRedeployPriceChanged");

	Params::GzPlayerMarkersHolderComponent_OnRedeployPriceChanged Parms{};

	Parms.GS = GS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnSubscribeToTeammateEvents
// (Final, Native, Private)

void UGzPlayerMarkersHolderComponent::OnSubscribeToTeammateEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnSubscribeToTeammateEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnTeammateAliveStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnTeammateAliveStateChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnTeammateAliveStateChanged");

	Params::GzPlayerMarkersHolderComponent_OnTeammateAliveStateChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.OnWorldInstanceIdChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPlayerMarkersHolderComponent::OnWorldInstanceIdChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "OnWorldInstanceIdChanged");

	Params::GzPlayerMarkersHolderComponent_OnWorldInstanceIdChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerMarkersHolderComponent.GetActiveMarkers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UGzMarkerComponent*> ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UGzMarkerComponent*> UGzPlayerMarkersHolderComponent::GetActiveMarkers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "GetActiveMarkers");

	Params::GzPlayerMarkersHolderComponent_GetActiveMarkers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerMarkersHolderComponent.GetClosestMarkerByOwnerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           OwnerClass                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMarkerComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMarkerComponent* UGzPlayerMarkersHolderComponent::GetClosestMarkerByOwnerClass(class UClass* OwnerClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerMarkersHolderComponent", "GetClosestMarkerByOwnerClass");

	Params::GzPlayerMarkersHolderComponent_GetClosestMarkerByOwnerClass Parms{};

	Parms.OwnerClass = OwnerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzEnvironmentZoneComponent.GetPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzEnvironmentZoneComponent::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEnvironmentZoneComponent", "GetPriority");

	Params::GzEnvironmentZoneComponent_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzEnvironmentZoneComponent.IsLocationInside
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzEnvironmentZoneComponent::IsLocationInside(const struct FVector& Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEnvironmentZoneComponent", "IsLocationInside");

	Params::GzEnvironmentZoneComponent_IsLocationInside Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzEnvironmentZoneManagerComponent.TryUpdateEnvironmentZones
// (Final, Native, Public, BlueprintCallable)

void UGzEnvironmentZoneManagerComponent::TryUpdateEnvironmentZones()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEnvironmentZoneManagerComponent", "TryUpdateEnvironmentZones");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzEnvironmentZoneManagerComponent.GetHighestPriorityEnvironmentZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzEnvironmentZoneComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzEnvironmentZoneComponent* UGzEnvironmentZoneManagerComponent::GetHighestPriorityEnvironmentZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEnvironmentZoneManagerComponent", "GetHighestPriorityEnvironmentZone");

	Params::GzEnvironmentZoneManagerComponent_GetHighestPriorityEnvironmentZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzEnvironmentZoneManagerComponent.GetHighestPriorityEnvironmentZoneType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzEnvironmentZoneType           OutEnvZoneType                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzEnvironmentZoneManagerComponent::GetHighestPriorityEnvironmentZoneType(struct FGzEnvironmentZoneType* OutEnvZoneType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEnvironmentZoneManagerComponent", "GetHighestPriorityEnvironmentZoneType");

	Params::GzEnvironmentZoneManagerComponent_GetHighestPriorityEnvironmentZoneType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEnvZoneType != nullptr)
		*OutEnvZoneType = std::move(Parms.OutEnvZoneType);

	return Parms.ReturnValue;
}


// Function G01.GzKillLogWidget.AddKillMark
// (Event, Protected, BlueprintEvent)

void UGzKillLogWidget::AddKillMark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzKillLogWidget", "AddKillMark");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzKillLogWidget.OnEntryAddedOrUpdated
// (Event, Protected, BlueprintEvent)

void UGzKillLogWidget::OnEntryAddedOrUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzKillLogWidget", "OnEntryAddedOrUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzEpicVoiceChatService.OnSettingsApplied
// (Final, Native, Private)

void UGzEpicVoiceChatService::OnSettingsApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEpicVoiceChatService", "OnSettingsApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzErrorNotificationsCheatExtension.PostMetaErrorFromAzureCode
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   InCode                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzErrorNotificationsCheatExtension::PostMetaErrorFromAzureCode(const int32 InCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzErrorNotificationsCheatExtension", "PostMetaErrorFromAzureCode");

	Params::GzErrorNotificationsCheatExtension_PostMetaErrorFromAzureCode Parms{};

	Parms.InCode = InCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzErrorNotificationsCheatExtension.PostMetaErrorFromCustomError
// (Final, Exec, Native, Public, Const)

void UGzErrorNotificationsCheatExtension::PostMetaErrorFromCustomError() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzErrorNotificationsCheatExtension", "PostMetaErrorFromCustomError");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzErrorNotificationsCheatExtension.PostMetaErrorFromErrorNotification
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   InCode                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzErrorNotificationsCheatExtension::PostMetaErrorFromErrorNotification(const int32 InCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzErrorNotificationsCheatExtension", "PostMetaErrorFromErrorNotification");

	Params::GzErrorNotificationsCheatExtension_PostMetaErrorFromErrorNotification Parms{};

	Parms.InCode = InCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzErrorNotificationsCheatExtension.PostMetaErrorFromPlayFabCode
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   InCode                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzErrorNotificationsCheatExtension::PostMetaErrorFromPlayFabCode(const int32 InCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzErrorNotificationsCheatExtension", "PostMetaErrorFromPlayFabCode");

	Params::GzErrorNotificationsCheatExtension_PostMetaErrorFromPlayFabCode Parms{};

	Parms.InCode = InCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzEventLogWidget.AddPlayerOutOfHealthNotification_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzPlayerOutOfHealthMessage*      PlayerOutOfHealthMessage                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzEventLogWidget::AddPlayerOutOfHealthNotification_BP(const class UGzPlayerOutOfHealthMessage* PlayerOutOfHealthMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzEventLogWidget", "AddPlayerOutOfHealthNotification_BP");

	Params::GzEventLogWidget_AddPlayerOutOfHealthNotification_BP Parms{};

	Parms.PlayerOutOfHealthMessage = PlayerOutOfHealthMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzExplosionComponent.Explode
// (Native, Public, BlueprintCallable)

void UGzExplosionComponent::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.ExplodeAtClients
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGzProjectileImpactData          ImpactData                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzExplosionComponent::ExplodeAtClients(const struct FGzProjectileImpactData& ImpactData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "ExplodeAtClients");

	Params::GzExplosionComponent_ExplodeAtClients Parms{};

	Parms.ImpactData = std::move(ImpactData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.ExplodeWithInstigator
// (Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InstigatorPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CharacterIdAccessActor                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzExplosionComponent::ExplodeWithInstigator(class APawn* InstigatorPawn, class AActor* CharacterIdAccessActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "ExplodeWithInstigator");

	Params::GzExplosionComponent_ExplodeWithInstigator Parms{};

	Parms.InstigatorPawn = InstigatorPawn;
	Parms.CharacterIdAccessActor = CharacterIdAccessActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.ExplodeWithParameters
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzExplosionParameters           Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzExplosionComponent::ExplodeWithParameters(const struct FGzExplosionParameters& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "ExplodeWithParameters");

	Params::GzExplosionComponent_ExplodeWithParameters Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.SetCharge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Charge                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzExplosionComponent::SetCharge(float Charge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "SetCharge");

	Params::GzExplosionComponent_SetCharge Parms{};

	Parms.Charge = Charge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.SetExplosionData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzExplosionData*                 Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzExplosionComponent::SetExplosionData(class UGzExplosionData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "SetExplosionData");

	Params::GzExplosionComponent_SetExplosionData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExplosionComponent.GetExplosionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzExplosionData*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzExplosionData* UGzExplosionComponent::GetExplosionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "GetExplosionData");

	Params::GzExplosionComponent_GetExplosionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExplosionComponent.GetExplosionTraceTypes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<ECollisionChannel>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<ECollisionChannel> UGzExplosionComponent::GetExplosionTraceTypes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExplosionComponent", "GetExplosionTraceTypes");

	Params::GzExplosionComponent_GetExplosionTraceTypes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleCheatExtension.NotificationRecieved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzEventNotificationData         GzEventNotificationData                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzExtractionRoyaleCheatExtension::NotificationRecieved(const struct FGzEventNotificationData& GzEventNotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleCheatExtension", "NotificationRecieved");

	Params::GzExtractionRoyaleCheatExtension_NotificationRecieved Parms{};

	Parms.GzEventNotificationData = std::move(GzEventNotificationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleCheatExtension.TeleportToNextLandingLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzExtractionRoyaleCheatExtension::TeleportToNextLandingLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleCheatExtension", "TeleportToNextLandingLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleCheatExtension.TriggerAllDropPodDelivery
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzExtractionRoyaleCheatExtension::TriggerAllDropPodDelivery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleCheatExtension", "TriggerAllDropPodDelivery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleGameState.Multicast_PostEventNotification
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// struct FGzEventNotificationData         EventData                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzExtractionRoyaleGameState::Multicast_PostEventNotification(const struct FGzEventNotificationData& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "Multicast_PostEventNotification");

	Params::GzExtractionRoyaleGameState_Multicast_PostEventNotification Parms{};

	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleGameState.GetActivePersistantNotifications
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGzEventNotificationData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGzEventNotificationData> AGzExtractionRoyaleGameState::GetActivePersistantNotifications() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "GetActivePersistantNotifications");

	Params::GzExtractionRoyaleGameState_GetActivePersistantNotifications Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleGameState.GetRedeployPriceMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzExtractionRoyaleGameState::GetRedeployPriceMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "GetRedeployPriceMultiplier");

	Params::GzExtractionRoyaleGameState_GetRedeployPriceMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleGameState.IsNextStageShift
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzExtractionRoyaleGameState::IsNextStageShift() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "IsNextStageShift");

	Params::GzExtractionRoyaleGameState_IsNextStageShift Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleGameState.OnRep_ActiveGlobalEvents
// (Final, Native, Private, Const)

void AGzExtractionRoyaleGameState::OnRep_ActiveGlobalEvents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "OnRep_ActiveGlobalEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleGameState.OnRep_LoadoutPriceMultiplier
// (Final, Native, Private, Const)

void AGzExtractionRoyaleGameState::OnRep_LoadoutPriceMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "OnRep_LoadoutPriceMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleGameState.OnRep_RedeployPriceMultiplier
// (Final, Native, Private, Const)

void AGzExtractionRoyaleGameState::OnRep_RedeployPriceMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleGameState", "OnRep_RedeployPriceMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayCameraRecorder.Client_Recording
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGzReplayCameraRecorder::Client_Recording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayCameraRecorder", "Client_Recording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayCameraRecorder.Server_ReportError
// (Net, NetReliable, Native, Event, Public, NetServer)

void AGzReplayCameraRecorder::Server_ReportError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayCameraRecorder", "Server_ReportError");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayCameraRecorder.Server_UpdateLocation
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FVector                          InLocation                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzReplayCameraRecorder::Server_UpdateLocation(const struct FVector& InLocation, const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayCameraRecorder", "Server_UpdateLocation");

	Params::GzReplayCameraRecorder_Server_UpdateLocation Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyalePlayerState.GetRespawnBonusTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzExtractionRoyalePlayerState::GetRespawnBonusTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyalePlayerState", "GetRespawnBonusTime");

	Params::GzExtractionRoyalePlayerState_GetRespawnBonusTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetMinPlayersForCountdown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzExtractionRoyaleSettings::GetMinPlayersForCountdown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetMinPlayersForCountdown");

	Params::GzExtractionRoyaleSettings_GetMinPlayersForCountdown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetMinPlayersForPreMatchTimeReduction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzExtractionRoyaleSettings::GetMinPlayersForPreMatchTimeReduction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetMinPlayersForPreMatchTimeReduction");

	Params::GzExtractionRoyaleSettings_GetMinPlayersForPreMatchTimeReduction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetPostMatchDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzExtractionRoyaleSettings::GetPostMatchDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetPostMatchDuration");

	Params::GzExtractionRoyaleSettings_GetPostMatchDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetPreMatchCountdownDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzExtractionRoyaleSettings::GetPreMatchCountdownDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetPreMatchCountdownDuration");

	Params::GzExtractionRoyaleSettings_GetPreMatchCountdownDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetPreMatchDurationRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzExtractionRoyaleSettings::GetPreMatchDurationRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetPreMatchDurationRange");

	Params::GzExtractionRoyaleSettings_GetPreMatchDurationRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetPreMatchReducedDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzExtractionRoyaleSettings::GetPreMatchReducedDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetPreMatchReducedDuration");

	Params::GzExtractionRoyaleSettings_GetPreMatchReducedDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetRequiredPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzExtractionRoyaleSettings::GetRequiredPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetRequiredPlayers");

	Params::GzExtractionRoyaleSettings_GetRequiredPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleSettings.GetZoneSetupIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzExtractionRoyaleSettings::GetZoneSetupIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleSettings", "GetZoneSetupIndex");

	Params::GzExtractionRoyaleSettings_GetZoneSetupIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractionRoyaleZoneCheatExtension.ContinueZoneShrinking
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzExtractionRoyaleZoneCheatExtension::ContinueZoneShrinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleZoneCheatExtension", "ContinueZoneShrinking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractionRoyaleZoneCheatExtension.PauseZoneShrinking
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)

void UGzExtractionRoyaleZoneCheatExtension::PauseZoneShrinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractionRoyaleZoneCheatExtension", "PauseZoneShrinking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutListPreMatch.MemorizeLastChoosenGuid
// (Final, Native, Private, HasOutParams)
// Parameters:
// bool                                    bSuccessfull                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerController*              Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutDataConfig             CompletedWithConfig                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzLoadoutListPreMatch::MemorizeLastChoosenGuid(bool bSuccessfull, const class AGzPlayerController* Controller, const struct FGzLoadoutDataConfig& CompletedWithConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListPreMatch", "MemorizeLastChoosenGuid");

	Params::GzLoadoutListPreMatch_MemorizeLastChoosenGuid Parms{};

	Parms.bSuccessfull = bSuccessfull;
	Parms.Controller = Controller;
	Parms.CompletedWithConfig = std::move(CompletedWithConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.CollectHeatSinks
// (Event, Protected, BlueprintEvent)
// Parameters:
// TArray<class AGzDestructibleHeatSink*>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzDestructibleHeatSink*> AGzExtractorTowerSupply::CollectHeatSinks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "CollectHeatSinks");

	Params::GzExtractorTowerSupply_CollectHeatSinks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.Multicast_HeatSinkDestroyed
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzExtractorTowerSupply::Multicast_HeatSinkDestroyed(int32 Param_Index, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "Multicast_HeatSinkDestroyed");

	Params::GzExtractorTowerSupply_Multicast_HeatSinkDestroyed Parms{};

	Parms.Param_Index = Param_Index;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.Multicast_ResetState
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGzExtractorTowerSupply::Multicast_ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "Multicast_ResetState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.OnExtractionDataChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzExtractionData                Current                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzExtractorTowerSupply::OnExtractionDataChanged(const struct FGzExtractionData& Current)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "OnExtractionDataChanged");

	Params::GzExtractorTowerSupply_OnExtractionDataChanged Parms{};

	Parms.Current = std::move(Current);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.OnRep_HeatSinksState
// (Final, Native, Private)

void AGzExtractorTowerSupply::OnRep_HeatSinksState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "OnRep_HeatSinksState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.OnRep_ProtectionDown
// (Final, Native, Private)

void AGzExtractorTowerSupply::OnRep_ProtectionDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "OnRep_ProtectionDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.ReceiveProtectionDownChanged
// (Event, Protected, BlueprintEvent)

void AGzExtractorTowerSupply::ReceiveProtectionDownChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "ReceiveProtectionDownChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzExtractorTowerSupply.ReceiveRequiredHeatSinksDestroyed
// (Event, Protected, BlueprintEvent)

void AGzExtractorTowerSupply::ReceiveRequiredHeatSinksDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "ReceiveRequiredHeatSinksDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzExtractorTowerSupply.ResetState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzExtractorTowerSupply::ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "ResetState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.SetExtractionOwnerTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzExtractorTowerSupply::SetExtractionOwnerTeam(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "SetExtractionOwnerTeam");

	Params::GzExtractorTowerSupply_SetExtractionOwnerTeam Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.SetProtectionDown
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInProtectionDown                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzExtractorTowerSupply::SetProtectionDown(bool bInProtectionDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "SetProtectionDown");

	Params::GzExtractorTowerSupply_SetProtectionDown Parms{};

	Parms.bInProtectionDown = bInProtectionDown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzExtractorTowerSupply.GetDestroyedHeatSinkNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzExtractorTowerSupply::GetDestroyedHeatSinkNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "GetDestroyedHeatSinkNum");

	Params::GzExtractorTowerSupply_GetDestroyedHeatSinkNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.GetHeatSinks
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGzDestructibleHeatSink*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzDestructibleHeatSink*> AGzExtractorTowerSupply::GetHeatSinks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "GetHeatSinks");

	Params::GzExtractorTowerSupply_GetHeatSinks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.GetItemExtractor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzItemExtractor*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzItemExtractor* AGzExtractorTowerSupply::GetItemExtractor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "GetItemExtractor");

	Params::GzExtractorTowerSupply_GetItemExtractor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.GetRemainingHeatSinkNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzExtractorTowerSupply::GetRemainingHeatSinkNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "GetRemainingHeatSinkNum");

	Params::GzExtractorTowerSupply_GetRemainingHeatSinkNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.IsHeatSinkDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzExtractorTowerSupply::IsHeatSinkDestroyed(const int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "IsHeatSinkDestroyed");

	Params::GzExtractorTowerSupply_IsHeatSinkDestroyed Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzExtractorTowerSupply.IsProtectionDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzExtractorTowerSupply::IsProtectionDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzExtractorTowerSupply", "IsProtectionDown");

	Params::GzExtractorTowerSupply_IsProtectionDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionSettings.GetFactionSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UGzFactionSettings*         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzFactionSettings* UGzFactionSettings::GetFactionSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionSettings", "GetFactionSettings");

	Params::GzFactionSettings_GetFactionSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetFactionData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzFactionKey                    Faction                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzFaction                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzFaction UGzFactionUtility::GetFactionData(const struct FGzFactionKey& Faction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetFactionData");

	Params::GzFactionUtility_GetFactionData Parms{};

	Parms.Faction = std::move(Faction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetFactionId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzFactionKey                    Faction                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzFactionUtility::GetFactionId(const struct FGzFactionKey& Faction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetFactionId");

	Params::GzFactionUtility_GetFactionId Parms{};

	Parms.Faction = std::move(Faction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetFactionsNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzFactionUtility::GetFactionsNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetFactionsNames");

	Params::GzFactionUtility_GetFactionsNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetPlayerFactionIds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UGzFactionUtility::GetPlayerFactionIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetPlayerFactionIds");

	Params::GzFactionUtility_GetPlayerFactionIds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetPlayerFactionsNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzFactionUtility::GetPlayerFactionsNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetPlayerFactionsNames");

	Params::GzFactionUtility_GetPlayerFactionsNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFactionUtility.GetRandomFactionId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzFactionUtility::GetRandomFactionId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFactionUtility", "GetRandomFactionId");

	Params::GzFactionUtility_GetRandomFactionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPolygonMarkerShape.GetWorldPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UGzPolygonMarkerShape::GetWorldPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPolygonMarkerShape", "GetWorldPoints");

	Params::GzPolygonMarkerShape_GetWorldPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFailedObjective.MakeCompletedObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzFailedObjective::MakeCompletedObjective(class AGzAdvancedMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzFailedObjective", "MakeCompletedObjective");

	Params::GzFailedObjective_MakeCompletedObjective Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFeedbackProviderSubsystem.PlayHitResponse
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzHitResponseData               HitResponseData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzFeedbackProviderSubsystem::PlayHitResponse(class AActor* TargetActor, class AActor* Instigator, const struct FGzHitResponseData& HitResponseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFeedbackProviderSubsystem", "PlayHitResponse");

	Params::GzFeedbackProviderSubsystem_PlayHitResponse Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Instigator = Instigator;
	Parms.HitResponseData = std::move(HitResponseData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJobZeroPlayerController.ClientSetJobZeroResult
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGzJobZeroMatchResult            Result                                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzJobZeroPlayerController::ClientSetJobZeroResult(const struct FGzJobZeroMatchResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroPlayerController", "ClientSetJobZeroResult");

	Params::GzJobZeroPlayerController_ClientSetJobZeroResult Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJobZeroPlayerController.HasJobZeroResults
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzJobZeroPlayerController::HasJobZeroResults() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroPlayerController", "HasJobZeroResults");

	Params::GzJobZeroPlayerController_HasJobZeroResults Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzFlowStateManagerCheatExtension.LoginWithPlayFab
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Login                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzFlowStateManagerCheatExtension::LoginWithPlayFab(const class FString& Login, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFlowStateManagerCheatExtension", "LoginWithPlayFab");

	Params::GzFlowStateManagerCheatExtension_LoginWithPlayFab Parms{};

	Parms.Login = std::move(Login);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzFlowStateManagerCheatExtension.SetPlayFabId
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzFlowStateManagerCheatExtension::SetPlayFabId(const class FString& PlayFabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFlowStateManagerCheatExtension", "SetPlayFabId");

	Params::GzFlowStateManagerCheatExtension_SetPlayFabId Parms{};

	Parms.PlayFabId = std::move(PlayFabId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzFlowStateManagerCheatExtension.LogCurrentFlowState
// (Final, Exec, Native, Public, Const)

void UGzFlowStateManagerCheatExtension::LogCurrentFlowState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzFlowStateManagerCheatExtension", "LogCurrentFlowState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.FallFromAttach
// (Final, Native, Private)

void UGzGadgetMovementComponent::FallFromAttach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "FallFromAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.Move
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzGadgetMoveData                Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzGadgetMovementComponent::Move(const struct FGzGadgetMoveData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "Move");

	Params::GzGadgetMovementComponent_Move Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.OnParentDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGadgetMovementComponent::OnParentDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "OnParentDestroyed");

	Params::GzGadgetMovementComponent_OnParentDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.OnParentRecieveDamage
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSingleHitDamage               Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGadgetMovementComponent::OnParentRecieveDamage(class UGzDamageableComponent* Receiver, const struct FGzSingleHitDamage& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "OnParentRecieveDamage");

	Params::GzGadgetMovementComponent_OnParentRecieveDamage Parms{};

	Parms.Receiver = Receiver;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.OnParentRecieveMultiDamage
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGzDamageableComponent*           Receiver                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMultiHitDamage                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGadgetMovementComponent::OnParentRecieveMultiDamage(class UGzDamageableComponent* Receiver, const struct FGzMultiHitDamage& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "OnParentRecieveMultiDamage");

	Params::GzGadgetMovementComponent_OnParentRecieveMultiDamage Parms{};

	Parms.Receiver = Receiver;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetMovementComponent.OnRep_MoveData
// (Final, Native, Private)

void UGzGadgetMovementComponent::OnRep_MoveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetMovementComponent", "OnRep_MoveData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGadgetValidAttachment.CanAttachTo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzGadgetValidAttachment::CanAttachTo(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetValidAttachment", "CanAttachTo");

	Params::GzGadgetValidAttachment_CanAttachTo Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGadgetValidAttachment.IsValidAttachment
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzGadgetValidAttachment::IsValidAttachment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGadgetValidAttachment", "IsValidAttachment");

	Params::GzGadgetValidAttachment_IsValidAttachment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameMessageSubsystem.BP_PostMessage
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// class UGzGameMessage*                   Message                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::BP_PostMessage(class UGzGameMessage* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameMessageSubsystem", "BP_PostMessage");

	Params::GzGameMessageSubsystem_BP_PostMessage Parms{};

	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameMessageSubsystem.BP_PostMessageToPlayers
// (Final, Native, Static, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzGameMessage*                   Message                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerController*>      Receivers                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::BP_PostMessageToPlayers(class UGzGameMessage* Message, const TArray<class AGzPlayerController*>& Receivers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameMessageSubsystem", "BP_PostMessageToPlayers");

	Params::GzGameMessageSubsystem_BP_PostMessageToPlayers Parms{};

	Parms.Message = Message;
	Parms.Receivers = std::move(Receivers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameMessageSubsystem.BP_PostMessageToTeam
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// class UGzGameMessage*                   Message                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::BP_PostMessageToTeam(class UGzGameMessage* Message, class AGzTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameMessageSubsystem", "BP_PostMessageToTeam");

	Params::GzGameMessageSubsystem_BP_PostMessageToTeam Parms{};

	Parms.Message = Message;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameMessageSubsystem.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzGameMessageSubsystem*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzGameMessageSubsystem* AGzGameMessageSubsystem::GetInstance(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameMessageSubsystem", "GetInstance");

	Params::GzGameMessageSubsystem_GetInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameMessageSubsystem.DistributeMessage
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// struct FGzMessageNetData                MessageData                                            (Parm, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::DistributeMessage(const struct FGzMessageNetData& MessageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameMessageSubsystem", "DistributeMessage");

	Params::GzGameMessageSubsystem_DistributeMessage Parms{};

	Parms.MessageData = std::move(MessageData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameMessageSubsystem.SubscribeToMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzGameMessage>       MessageClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGzGameMessage* Message)>BPCallback                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::SubscribeToMessage(TSubclassOf<class UGzGameMessage> MessageClass, TDelegate<void(class UGzGameMessage* Message)> BPCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameMessageSubsystem", "SubscribeToMessage");

	Params::GzGameMessageSubsystem_SubscribeToMessage Parms{};

	Parms.MessageClass = MessageClass;
	Parms.BPCallback = BPCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameMessageSubsystem.UnsubscribeToMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzGameMessage>       MessageClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          DelegateObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGameMessageSubsystem::UnsubscribeToMessage(TSubclassOf<class UGzGameMessage> MessageClass, class UObject* DelegateObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameMessageSubsystem", "UnsubscribeToMessage");

	Params::GzGameMessageSubsystem_UnsubscribeToMessage Parms{};

	Parms.MessageClass = MessageClass;
	Parms.DelegateObject = DelegateObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationBody.SetNotificationData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzGameNotificationSpec          InNotificationSpec                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGzNotificationDisplayData*       InDisplayData                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationBody::SetNotificationData(const struct FGzGameNotificationSpec& InNotificationSpec, class UGzNotificationDisplayData* InDisplayData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationBody", "SetNotificationData");

	Params::GzGameNotificationBody_SetNotificationData Parms{};

	Parms.InNotificationSpec = std::move(InNotificationSpec);
	Parms.InDisplayData = InDisplayData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationBody.UpdateNotificationData
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationBody::UpdateNotificationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationBody", "UpdateNotificationData");

	Params::GzGameNotificationBody_UpdateNotificationData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationBody.GetDisplayData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzNotificationDisplayData*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNotificationDisplayData* UGzGameNotificationBody::GetDisplayData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationBody", "GetDisplayData");

	Params::GzGameNotificationBody_GetDisplayData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationBody.GetNotificationSpec
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzGameNotificationSpec    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzGameNotificationSpec UGzGameNotificationBody::GetNotificationSpec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationBody", "GetNotificationSpec");

	Params::GzGameNotificationBody_GetNotificationSpec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_MicroMissiles.OnMissileShootingFinished
// (Final, Native, Protected)
// Parameters:
// int32                                   MissileIndex                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_MicroMissiles::OnMissileShootingFinished(const int32 MissileIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MicroMissiles", "OnMissileShootingFinished");

	Params::GzGA_MicroMissiles_OnMissileShootingFinished Parms{};

	Parms.MissileIndex = MissileIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MicroMissiles.ShootMissile
// (Final, Native, Protected)
// Parameters:
// int32                                   MissileIndex                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_MicroMissiles::ShootMissile(const int32 MissileIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MicroMissiles", "ShootMissile");

	Params::GzGA_MicroMissiles_ShootMissile Parms{};

	Parms.MissileIndex = MissileIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MicroMissiles.StartShootingMissiles
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetDataHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_MicroMissiles::StartShootingMissiles(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MicroMissiles", "StartShootingMissiles");

	Params::GzGA_MicroMissiles_StartShootingMissiles Parms{};

	Parms.TargetDataHandle = std::move(TargetDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_MicroMissiles.WaitNetSyncPostFiring
// (Final, Native, Protected)

void UGzGA_MicroMissiles::WaitNetSyncPostFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_MicroMissiles", "WaitNetSyncPostFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsMenuWidget.AddMappingUpdateNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FGzInputActionMappingChange>InputActionMappingChanges                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzSettingsMenuWidget::AddMappingUpdateNotification(const TArray<struct FGzInputActionMappingChange>& InputActionMappingChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "AddMappingUpdateNotification");

	Params::GzSettingsMenuWidget_AddMappingUpdateNotification Parms{};

	Parms.InputActionMappingChanges = std::move(InputActionMappingChanges);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSettingsMenuWidget.HandleApplySettings
// (Event, Protected, BlueprintEvent)

void UGzSettingsMenuWidget::HandleApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "HandleApplySettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSettingsMenuWidget.InitResetConfirmation
// (Final, Native, Protected)
// Parameters:
// class UGzNavigationWidget*              NavigationWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingsMenuWidget::InitResetConfirmation(class UGzNavigationWidget* NavigationWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "InitResetConfirmation");

	Params::GzSettingsMenuWidget_InitResetConfirmation Parms{};

	Parms.NavigationWidget = NavigationWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsMenuWidget.OnResetToDefaultApplied
// (Event, Protected, BlueprintEvent)

void UGzSettingsMenuWidget::OnResetToDefaultApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "OnResetToDefaultApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSettingsMenuWidget.OnResetToDefaultCanceled
// (Event, Protected, BlueprintEvent)

void UGzSettingsMenuWidget::OnResetToDefaultCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "OnResetToDefaultCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSettingsMenuWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class FName                             TabId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingsMenuWidget::OnTabSelected(class FName TabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "OnTabSelected");

	Params::GzSettingsMenuWidget_OnTabSelected Parms{};

	Parms.TabId = TabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsMenuWidget.ResetToDefault
// (Final, Native, Protected)

void UGzSettingsMenuWidget::ResetToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsMenuWidget", "ResetToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLootArchetypeTableData.RollItemArchetype
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLootModifierTableData*         ModifiersTable                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzLootArchetypeData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLootArchetypeData* UGzLootArchetypeTableData::RollItemArchetype(const class UGzLootModifierTableData* ModifiersTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootArchetypeTableData", "RollItemArchetype");

	Params::GzLootArchetypeTableData_RollItemArchetype Parms{};

	Parms.ModifiersTable = ModifiersTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootArchetypeTableData.RollItemArchetypeWithModArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzLootModifier>          ModifiersTable                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UGzLootArchetypeData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLootArchetypeData* UGzLootArchetypeTableData::RollItemArchetypeWithModArray(const TArray<struct FGzLootModifier>& ModifiersTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootArchetypeTableData", "RollItemArchetypeWithModArray");

	Params::GzLootArchetypeTableData_RollItemArchetypeWithModArray Parms{};

	Parms.ModifiersTable = std::move(ModifiersTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationConditionAudioFinished.OnPostedVoiceLineEnded
// (Final, Native, Protected)

void UGzGameNotificationConditionAudioFinished::OnPostedVoiceLineEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationConditionAudioFinished", "OnPostedVoiceLineEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationContainerBase.GetNotificationSettings
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzNotificationSettings          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzNotificationSettings UGzNotificationContainerBase::GetNotificationSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationContainerBase", "GetNotificationSettings");

	Params::GzNotificationContainerBase_GetNotificationSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNotificationContainerBase.UpdateAllQueueSlots
// (Final, Native, Protected)

void UGzNotificationContainerBase::UpdateAllQueueSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationContainerBase", "UpdateAllQueueSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationContainer.CanCreateNotification
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InNotificationID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationContainer::CanCreateNotification(const class FName InNotificationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationContainer", "CanCreateNotification");

	Params::GzGameNotificationContainer_CanCreateNotification Parms{};

	Parms.InNotificationID = InNotificationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationContainer.CreateNotifiction
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             InNotificationID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzGameNotificationDisplayData*   NotificationData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationContainer::CreateNotifiction(const class FName InNotificationID, class UGzGameNotificationDisplayData* NotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationContainer", "CreateNotifiction");

	Params::GzGameNotificationContainer_CreateNotifiction Parms{};

	Parms.InNotificationID = InNotificationID;
	Parms.NotificationData = NotificationData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationContainer.CreateNotifictionDisplayData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             InNotificationID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGzGameNotificationDisplayData>GameNotificationClass                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzGameNotificationSpec          CustomeDisplaySpec                                     (ConstParm, Parm, NativeAccessSpecifierPublic)
// class UGzGameNotificationDisplayData*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameNotificationDisplayData* UGzGameNotificationContainer::CreateNotifictionDisplayData(const class FName InNotificationID, const TSubclassOf<class UGzGameNotificationDisplayData> GameNotificationClass, const struct FGzGameNotificationSpec& CustomeDisplaySpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationContainer", "CreateNotifictionDisplayData");

	Params::GzGameNotificationContainer_CreateNotifictionDisplayData Parms{};

	Parms.InNotificationID = InNotificationID;
	Parms.GameNotificationClass = GameNotificationClass;
	Parms.CustomeDisplaySpec = std::move(CustomeDisplaySpec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationContainer.ForceClearCurrentNotification
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             InNotificationID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationContainer::ForceClearCurrentNotification(const class FName InNotificationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationContainer", "ForceClearCurrentNotification");

	Params::GzGameNotificationContainer_ForceClearCurrentNotification Parms{};

	Parms.InNotificationID = InNotificationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationDisplayData.SetBodyIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetBodyIcon(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetBodyIcon");

	Params::GzGameNotificationDisplayData_SetBodyIcon Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.SetBodyIconColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetBodyIconColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetBodyIconColor");

	Params::GzGameNotificationDisplayData_SetBodyIconColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.SetDefaultHeaderText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetDefaultHeaderText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetDefaultHeaderText");

	Params::GzGameNotificationDisplayData_SetDefaultHeaderText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.SetDisplayShowTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetDisplayShowTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetDisplayShowTime");

	Params::GzGameNotificationDisplayData_SetDisplayShowTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.SetRemainingTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetRemainingTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetRemainingTime");

	Params::GzGameNotificationDisplayData_SetRemainingTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.SetVoiceLineTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     VoiceLineTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayData::SetVoiceLineTag(const struct FGameplayTag& VoiceLineTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "SetVoiceLineTag");

	Params::GzGameNotificationDisplayData_SetVoiceLineTag Parms{};

	Parms.VoiceLineTag = std::move(VoiceLineTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationDisplayData.GetDefaultHeaderText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGzGameNotificationDisplayData::GetDefaultHeaderText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "GetDefaultHeaderText");

	Params::GzGameNotificationDisplayData_GetDefaultHeaderText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationDisplayData.GetNotificationSpec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzGameNotificationSpec    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzGameNotificationSpec UGzGameNotificationDisplayData::GetNotificationSpec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "GetNotificationSpec");

	Params::GzGameNotificationDisplayData_GetNotificationSpec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationDisplayData.IsEnableDefaultHeaderText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationDisplayData::IsEnableDefaultHeaderText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayData", "IsEnableDefaultHeaderText");

	Params::GzGameNotificationDisplayData_IsEnableDefaultHeaderText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSelectObjective.MakeSelectObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     If                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Success                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Fail                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzSelectObjective::MakeSelectObjective(class AGzAdvancedMission* Mission, class UGzObjective* If, class UGzObjective* Success, class UGzObjective* Fail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSelectObjective", "MakeSelectObjective");

	Params::GzSelectObjective_MakeSelectObjective Parms{};

	Parms.Mission = Mission;
	Parms.If = If;
	Parms.Success = Success;
	Parms.Fail = Fail;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationDisplayDataMission.SetMissionData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzMissionData*                   InMissionData                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayDataMission::SetMissionData(class UGzMissionData* InMissionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayDataMission", "SetMissionData");

	Params::GzGameNotificationDisplayDataMission_SetMissionData Parms{};

	Parms.InMissionData = InMissionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressLogUISubsystem.CancelProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProgressLogUISubsystem::CancelProgress(int32 Handle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogUISubsystem", "CancelProgress");

	Params::GzProgressLogUISubsystem_CancelProgress Parms{};

	Parms.Handle = Handle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressLogUISubsystem.SetCurrentProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProgressLogUISubsystem::SetCurrentProgress(int32 Handle, float NewDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogUISubsystem", "SetCurrentProgress");

	Params::GzProgressLogUISubsystem_SetCurrentProgress Parms{};

	Parms.Handle = Handle;
	Parms.NewDuration = NewDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressLogUISubsystem.StartProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UGzProgressLogEntryWidget>ProgressWidgetClass                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzProgressLogUISubsystem::StartProgress(const TSubclassOf<class UGzProgressLogEntryWidget>& ProgressWidgetClass, float Duration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogUISubsystem", "StartProgress");

	Params::GzProgressLogUISubsystem_StartProgress Parms{};

	Parms.ProgressWidgetClass = ProgressWidgetClass;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationDisplayDataPlayer.SetDisplayDataInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InPlayerName                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   InPlayerIndexInTeam                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             InPlayerClanTag                                        (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGzGameNotificationDisplayDataPlayer::SetDisplayDataInfo(const class FText& InPlayerName, const int32 InPlayerIndexInTeam, const class FText& InPlayerClanTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationDisplayDataPlayer", "SetDisplayDataInfo");

	Params::GzGameNotificationDisplayDataPlayer_SetDisplayDataInfo Parms{};

	Parms.InPlayerName = std::move(InPlayerName);
	Parms.InPlayerIndexInTeam = InPlayerIndexInTeam;
	Parms.InPlayerClanTag = std::move(InPlayerClanTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationHeader.GetDisplayData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzGameNotificationDisplayData*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameNotificationDisplayData* UGzGameNotificationHeader::GetDisplayData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationHeader", "GetDisplayData");

	Params::GzGameNotificationHeader_GetDisplayData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationHeader.GetNotificationText
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzTextBlock*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzTextBlock* UGzGameNotificationHeader::GetNotificationText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationHeader", "GetNotificationText");

	Params::GzGameNotificationHeader_GetNotificationText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationHeader.SetHeaderText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameNotificationHeader::SetHeaderText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationHeader", "SetHeaderText");

	Params::GzGameNotificationHeader_SetHeaderText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationHeader.UpdateHeaderNotification
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzGameNotificationDisplayData*   InNotificationData                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameNotificationHeader::UpdateHeaderNotification(const class UGzGameNotificationDisplayData* InNotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationHeader", "UpdateHeaderNotification");

	Params::GzGameNotificationHeader_UpdateHeaderNotification Parms{};

	Parms.InNotificationData = InNotificationData;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzNotificationSlotBase.GetNotificationSpec
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzGameNotificationSpec          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzGameNotificationSpec UGzNotificationSlotBase::GetNotificationSpec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationSlotBase", "GetNotificationSpec");

	Params::GzNotificationSlotBase_GetNotificationSpec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNotificationSlotBase.PlayAnimationById
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             AnimationID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNotificationSlotBase::PlayAnimationById(const class FName& AnimationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationSlotBase", "PlayAnimationById");

	Params::GzNotificationSlotBase_PlayAnimationById Parms{};

	Parms.AnimationID = AnimationID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzNotificationSlotBase.SetActivateAnimation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bActivated                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNotificationSlotBase::SetActivateAnimation(const bool bActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationSlotBase", "SetActivateAnimation");

	Params::GzNotificationSlotBase_SetActivateAnimation Parms{};

	Parms.bActivated = bActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNotificationSlotBase.UpdateNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGzNotificationQueue             Notification                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzNotificationSlotBase::UpdateNotification(const struct FGzNotificationQueue& Notification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationSlotBase", "UpdateNotification");

	Params::GzNotificationSlotBase_UpdateNotification Parms{};

	Parms.Notification = std::move(Notification);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzNotificationSlotBase.GetNotificationData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzNotificationQueue       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzNotificationQueue UGzNotificationSlotBase::GetNotificationData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNotificationSlotBase", "GetNotificationData");

	Params::GzNotificationSlotBase_GetNotificationData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameNotificationSubsystem.EventNotificationStage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NotificationID                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzNotificationStageType                StageType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCustomData                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzEventNotificationData         NotificationData                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzGameNotificationSubsystem::EventNotificationStage(const class FName& NotificationID, EGzNotificationStageType StageType, const bool bCustomData, const struct FGzEventNotificationData& NotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationSubsystem", "EventNotificationStage");

	Params::GzGameNotificationSubsystem_EventNotificationStage Parms{};

	Parms.NotificationID = NotificationID;
	Parms.StageType = StageType;
	Parms.bCustomData = bCustomData;
	Parms.NotificationData = std::move(NotificationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationSubsystem.RequestGameNotification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NotificationID                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationSubsystem::RequestGameNotification(const class FName NotificationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationSubsystem", "RequestGameNotification");

	Params::GzGameNotificationSubsystem_RequestGameNotification Parms{};

	Parms.NotificationID = NotificationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameNotificationSubsystem.ShowDebugGameNotification
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TestNotificationID                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameNotificationSubsystem::ShowDebugGameNotification(const class FName& TestNotificationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameNotificationSubsystem", "ShowDebugGameNotification");

	Params::GzGameNotificationSubsystem_ShowDebugGameNotification Parms{};

	Parms.TestNotificationID = TestNotificationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.AddActiveFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGzGamepadFeedbackSpec           FoundSpec                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzGamepadFeedbackController::AddActiveFeedback(const struct FGzGamepadFeedbackSpec& FoundSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "AddActiveFeedback");

	Params::GzGamepadFeedbackController_AddActiveFeedback Parms{};

	Parms.FoundSpec = std::move(FoundSpec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.OnEquippedWeaponChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   InvPocketId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGamepadFeedbackController::OnEquippedWeaponChanged(const struct FGzInvPocketId& InvPocketId, const class AGzWeaponActor* WeaponActor, bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "OnEquippedWeaponChanged");

	Params::GzGamepadFeedbackController_OnEquippedWeaponChanged Parms{};

	Parms.InvPocketId = std::move(InvPocketId);
	Parms.WeaponActor = WeaponActor;
	Parms.bEquipped = bEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.OnOwningPawnShot
// (Final, Native, Private)

void UGzGamepadFeedbackController::OnOwningPawnShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "OnOwningPawnShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGamepadFeedbackController::OnPawnChanged(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "OnPawnChanged");

	Params::GzGamepadFeedbackController_OnPawnChanged Parms{};

	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.PushFeedbackByTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddition                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGamepadFeedbackController::PushFeedbackByTag(const struct FGameplayTag& GameplayTag, bool bAddition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "PushFeedbackByTag");

	Params::GzGamepadFeedbackController_PushFeedbackByTag Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bAddition = bAddition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGamepadFeedbackController.RemoveActiveFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGzGamepadFeedbackSpec           FoundSpec                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzGamepadFeedbackController::RemoveActiveFeedback(const struct FGzGamepadFeedbackSpec& FoundSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGamepadFeedbackController", "RemoveActiveFeedback");

	Params::GzGamepadFeedbackController_RemoveActiveFeedback Parms{};

	Parms.FoundSpec = std::move(FoundSpec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationStrategyConfig.GetTileExtents
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UGzPropagationStrategyConfig::GetTileExtents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationStrategyConfig", "GetTileExtents");

	Params::GzPropagationStrategyConfig_GetTileExtents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPropagationStrategyConfig_Grid.GetHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzPropagationStrategyConfig_Grid::GetHeight(const int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationStrategyConfig_Grid", "GetHeight");

	Params::GzPropagationStrategyConfig_Grid_GetHeight Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPropagationStrategyConfig_Grid.GetLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzPropagationStrategyConfig_Grid::GetLength(const int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationStrategyConfig_Grid", "GetLength");

	Params::GzPropagationStrategyConfig_Grid_GetLength Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPropagationStrategyConfig_Grid.GetWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzPropagationStrategyConfig_Grid::GetWidth(const int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationStrategyConfig_Grid", "GetWidth");

	Params::GzPropagationStrategyConfig_Grid_GetWidth Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPropagationStrategyConfig_Grid.IsCenteredAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCenterLocation                       CenterLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPropagationStrategyConfig_Grid::IsCenteredAt(EGzCenterLocation CenterLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationStrategyConfig_Grid", "IsCenteredAt");

	Params::GzPropagationStrategyConfig_Grid_IsCenteredAt Parms{};

	Parms.CenterLocation = CenterLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayCondition.OnPlayerJoined
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayCondition::OnPlayerJoined(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayCondition", "OnPlayerJoined");

	Params::GzGameplayCondition_OnPlayerJoined Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameplayCondition.OnPlayerLeft
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayCondition::OnPlayerLeft(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayCondition", "OnPlayerLeft");

	Params::GzGameplayCondition_OnPlayerLeft Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameplayCondition.OnStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzConditionState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayCondition::OnStateChanged_BP(EGzConditionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayCondition", "OnStateChanged_BP");

	Params::GzGameplayCondition_OnStateChanged_BP Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameplayCondition.Signal
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayCondition::Signal(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayCondition", "Signal");

	Params::GzGameplayCondition_Signal Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayCondition.GetPlayerState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzConditionState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzConditionState UGzGameplayCondition::GetPlayerState(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayCondition", "GetPlayerState");

	Params::GzGameplayCondition_GetPlayerState Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSettingsChangeAction.Trigger
// (Native, Event, Public, BlueprintEvent)

void UGzSettingsChangeAction::Trigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsChangeAction", "Trigger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJZ_MatchInProgressStage.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzMissionState                         NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzJZ_MatchInProgressStage::OnMissionStateChanged(class AGzAdvancedMission* Mission, EGzMissionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJZ_MatchInProgressStage", "OnMissionStateChanged");

	Params::GzJZ_MatchInProgressStage_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingIsInProgress
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingIsInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingIsInProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingIsReady
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingIsReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingIsReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingPingsDump
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingPingsDump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingPingsDump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingPingsFake
// (Final, Exec, Native, Public, Const)
// Parameters:
// uint32                                  Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  Latency                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PacketLoss                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMatchmakingCheatExtension::MatchmakingPingsFake(uint32 Param_Index, uint32 Latency, float PacketLoss) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingPingsFake");

	Params::GzMatchmakingCheatExtension_MatchmakingPingsFake Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Latency = Latency;
	Parms.PacketLoss = PacketLoss;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingPingsFakeDeleteRegion
// (Final, Exec, Native, Public, Const)
// Parameters:
// uint32                                  Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMatchmakingCheatExtension::MatchmakingPingsFakeDeleteRegion(uint32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingPingsFakeDeleteRegion");

	Params::GzMatchmakingCheatExtension_MatchmakingPingsFakeDeleteRegion Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingPingsFakeStop
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingPingsFakeStop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingPingsFakeStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingPingsRefresh
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingPingsRefresh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingPingsRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingQueueDump
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingQueueDump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingQueueDump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingQueueSet
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           QueueName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMatchmakingCheatExtension::MatchmakingQueueSet(const class FString& QueueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingQueueSet");

	Params::GzMatchmakingCheatExtension_MatchmakingQueueSet Parms{};

	Parms.QueueName = std::move(QueueName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingReadyStatusesDump
// (Final, Exec, Native, Public, Const)

void UGzMatchmakingCheatExtension::MatchmakingReadyStatusesDump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingReadyStatusesDump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMatchmakingCheatExtension.MatchmakingSetReady
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bReady                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMatchmakingCheatExtension::MatchmakingSetReady(bool bReady) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMatchmakingCheatExtension", "MatchmakingSetReady");

	Params::GzMatchmakingCheatExtension_MatchmakingSetReady Parms{};

	Parms.bReady = bReady;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMarketplaceCheatExtension.ReportPlayerMarketplaceLot
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           LotId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMarketplaceCheatExtension::ReportPlayerMarketplaceLot(const class FString& LotId, const class FString& Reason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMarketplaceCheatExtension", "ReportPlayerMarketplaceLot");

	Params::GzMarketplaceCheatExtension_ReportPlayerMarketplaceLot Parms{};

	Parms.LotId = std::move(LotId);
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.FinishObjective
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccessful                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::FinishObjective(const bool bSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "FinishObjective");

	Params::GzGameplayObjective_FinishObjective Parms{};

	Parms.bSuccessful = bSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.IncrementProgress
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGzGameplayObjective::IncrementProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "IncrementProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.OnPlayerJoined
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::OnPlayerJoined(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "OnPlayerJoined");

	Params::GzGameplayObjective_OnPlayerJoined Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameplayObjective.OnPlayerLeft
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::OnPlayerLeft(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "OnPlayerLeft");

	Params::GzGameplayObjective_OnPlayerLeft Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameplayObjective.OnRep_Progress
// (Final, Native, Private)

void UGzGameplayObjective::OnRep_Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "OnRep_Progress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.SetProgress
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::SetProgress(float NewProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "SetProgress");

	Params::GzGameplayObjective_SetProgress Parms{};

	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.SubscribeOnProgressChange
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnProgressChanged                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::SubscribeOnProgressChange(const TDelegate<void()>& OnProgressChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "SubscribeOnProgressChange");

	Params::GzGameplayObjective_SubscribeOnProgressChange Parms{};

	Parms.OnProgressChanged = OnProgressChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.TryFinishObjective
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccessful                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayObjective::TryFinishObjective(const bool bSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "TryFinishObjective");

	Params::GzGameplayObjective_TryFinishObjective Parms{};

	Parms.bSuccessful = bSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayObjective.GetObjectiveState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzObjectiveState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzObjectiveState UGzGameplayObjective::GetObjectiveState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "GetObjectiveState");

	Params::GzGameplayObjective_GetObjectiveState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayObjective.GetProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayObjective::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "GetProgress");

	Params::GzGameplayObjective_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayObjective.GetRequiredProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayObjective::GetRequiredProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "GetRequiredProgress");

	Params::GzGameplayObjective_GetRequiredProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayObjective.IsSupportingProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayObjective::IsSupportingProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayObjective", "IsSupportingProgress");

	Params::GzGameplayObjective_IsSupportingProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayPerformanceTrackerExtension.SetClientGameplayPerformanceTrackerInterval
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayPerformanceTrackerExtension::SetClientGameplayPerformanceTrackerInterval(float Interval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayPerformanceTrackerExtension", "SetClientGameplayPerformanceTrackerInterval");

	Params::GzGameplayPerformanceTrackerExtension_SetClientGameplayPerformanceTrackerInterval Parms{};

	Parms.Interval = Interval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayPerformanceTrackerExtension.SetServerGameplayPerformanceTrackerInterval
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, Const)
// Parameters:
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayPerformanceTrackerExtension::SetServerGameplayPerformanceTrackerInterval(float Interval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayPerformanceTrackerExtension", "SetServerGameplayPerformanceTrackerInterval");

	Params::GzGameplayPerformanceTrackerExtension_SetServerGameplayPerformanceTrackerInterval Parms{};

	Parms.Interval = Interval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.AddDynamicTagGameplayEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzAbilitySystemComponent*        TargetASC                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::AddDynamicTagGameplayEffect(class UGzAbilitySystemComponent* TargetASC, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "AddDynamicTagGameplayEffect");

	Params::GzGameplayStatics_AddDynamicTagGameplayEffect Parms{};

	Parms.TargetASC = TargetASC;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.Blueprint_PredictProjectilePath_Advanced_WithDrag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPredictProjectilePathParams   PredictParams                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPredictProjectilePathResult     PredictResult                                          (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::Blueprint_PredictProjectilePath_Advanced_WithDrag(const class UObject* WorldContextObject, const struct FGzPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "Blueprint_PredictProjectilePath_Advanced_WithDrag");

	Params::GzGameplayStatics_Blueprint_PredictProjectilePath_Advanced_WithDrag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PredictParams = std::move(PredictParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PredictResult != nullptr)
		*PredictResult = std::move(Parms.PredictResult);

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.Blueprint_PredictProjectilePath_Advanced_WithHoming
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPredictProjectilePathParams_WithHomingPredictParams                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPredictProjectilePathResult     PredictResult                                          (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::Blueprint_PredictProjectilePath_Advanced_WithHoming(const class UObject* WorldContextObject, const struct FGzPredictProjectilePathParams_WithHoming& PredictParams, struct FPredictProjectilePathResult* PredictResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "Blueprint_PredictProjectilePath_Advanced_WithHoming");

	Params::GzGameplayStatics_Blueprint_PredictProjectilePath_Advanced_WithHoming Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PredictParams = std::move(PredictParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PredictResult != nullptr)
		*PredictResult = std::move(Parms.PredictResult);

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.BulletMultiTraceSkipOwner
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipRecursively                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseComplex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TraceTag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FHitResult> UGzGameplayStatics::BulletMultiTraceSkipOwner(const class AActor* Owner, const bool bSkipRecursively, const struct FVector& Start, const struct FVector& End, bool bUseComplex, class FName TraceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "BulletMultiTraceSkipOwner");

	Params::GzGameplayStatics_BulletMultiTraceSkipOwner Parms{};

	Parms.Owner = Owner;
	Parms.bSkipRecursively = bSkipRecursively;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.bUseComplex = bUseComplex;
	Parms.TraceTag = TraceTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.BulletTraceSkipOwner
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipRecursively                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseComplex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult UGzGameplayStatics::BulletTraceSkipOwner(const class AActor* Owner, const bool bSkipRecursively, const struct FVector& Start, const struct FVector& End, bool bUseComplex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "BulletTraceSkipOwner");

	Params::GzGameplayStatics_BulletTraceSkipOwner Parms{};

	Parms.Owner = Owner;
	Parms.bSkipRecursively = bSkipRecursively;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.bUseComplex = bUseComplex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.CreateBoundaryZone
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGzBoundaryZone>      BoundaryZoneClass                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzBoundaryZone*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBoundaryZone* UGzGameplayStatics::CreateBoundaryZone(TSubclassOf<class AGzBoundaryZone> BoundaryZoneClass, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "CreateBoundaryZone");

	Params::GzGameplayStatics_CreateBoundaryZone Parms{};

	Parms.BoundaryZoneClass = BoundaryZoneClass;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.CreateSyncCutscene
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzSyncCutscene>      CutsceneClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzSyncCutscene*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSyncCutscene* UGzGameplayStatics::CreateSyncCutscene(const class UObject* WorldContextObject, TSubclassOf<class AGzSyncCutscene> CutsceneClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "CreateSyncCutscene");

	Params::GzGameplayStatics_CreateSyncCutscene Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CutsceneClass = CutsceneClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.DeprojectSignNormalizedScreenToWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldDirection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::DeprojectSignNormalizedScreenToWorld(class APlayerController* PlayerController, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "DeprojectSignNormalizedScreenToWorld");

	Params::GzGameplayStatics_DeprojectSignNormalizedScreenToWorld Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ScreenPosition = std::move(ScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorldPosition != nullptr)
		*WorldPosition = std::move(Parms.WorldPosition);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.DestroyNetForce
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::DestroyNetForce(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "DestroyNetForce");

	Params::GzGameplayStatics_DestroyNetForce Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.EstimateAttributeValueChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UGameplayEffect*>          Effects                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::EstimateAttributeValueChange(const TArray<class UGameplayEffect*>& Effects, const struct FGameplayAttribute& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "EstimateAttributeValueChange");

	Params::GzGameplayStatics_EstimateAttributeValueChange Parms{};

	Parms.Effects = std::move(Effects);
	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.ExitOfflineSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::ExitOfflineSession(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "ExitOfflineSession");

	Params::GzGameplayStatics_ExitOfflineSession Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.FindClosestEnemy
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzBaseCharacter*                 MyPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDist                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDist                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGzGameplayStatics::FindClosestEnemy(class AGzBaseCharacter* MyPawn, float MinDist, float MaxDist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "FindClosestEnemy");

	Params::GzGameplayStatics_FindClosestEnemy Parms{};

	Parms.MyPawn = MyPawn;
	Parms.MinDist = MinDist;
	Parms.MaxDist = MaxDist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.FindClosestPlayerLocationToTarget
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::FindClosestPlayerLocationToTarget(class AGzTeam* Team, const struct FVector& Location, struct FVector* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "FindClosestPlayerLocationToTarget");

	Params::GzGameplayStatics_FindClosestPlayerLocationToTarget Parms{};

	Parms.Team = Team;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetAllLevelTypes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Param_Class                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzGameplayStatics::GetAllLevelTypes(const class UObject* WorldContextObject, TSubclassOf<class AActor> Param_Class, TArray<class UClass*>* OutClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetAllLevelTypes");

	Params::GzGameplayStatics_GetAllLevelTypes Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);
}


// Function G01.GzGameplayStatics.GetBoundaryZone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzBoundaryZone*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBoundaryZone* UGzGameplayStatics::GetBoundaryZone(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetBoundaryZone");

	Params::GzGameplayStatics_GetBoundaryZone Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetCharacterIdAccessActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzCharacterIdAccess             CharacterIdAccess                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzGameplayStatics::GetCharacterIdAccessActor(const struct FGzCharacterIdAccess& CharacterIdAccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetCharacterIdAccessActor");

	Params::GzGameplayStatics_GetCharacterIdAccessActor Parms{};

	Parms.CharacterIdAccess = std::move(CharacterIdAccess);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetCurrentAimAssistSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGzAimAssistPresetSettings ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzAimAssistPresetSettings UGzGameplayStatics::GetCurrentAimAssistSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetCurrentAimAssistSettings");

	Params::GzGameplayStatics_GetCurrentAimAssistSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetCurrentTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::GetCurrentTime(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetCurrentTime");

	Params::GzGameplayStatics_GetCurrentTime Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetHexExtractionCostMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::GetHexExtractionCostMultiplier(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetHexExtractionCostMultiplier");

	Params::GzGameplayStatics_GetHexExtractionCostMultiplier Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetHexExtractionTimeMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::GetHexExtractionTimeMultiplier(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetHexExtractionTimeMultiplier");

	Params::GzGameplayStatics_GetHexExtractionTimeMultiplier Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetImpactPhysicalMaterial
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bHitArmor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* UGzGameplayStatics::GetImpactPhysicalMaterial(const struct FHitResult& Hit, bool bHitArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetImpactPhysicalMaterial");

	Params::GzGameplayStatics_GetImpactPhysicalMaterial Parms{};

	Parms.Hit = std::move(Hit);
	Parms.bHitArmor = bHitArmor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetItemExtractionCost
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzItemData*                      Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameplayStatics::GetItemExtractionCost(const class UObject* WorldContextObject, const class UGzItemData* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetItemExtractionCost");

	Params::GzGameplayStatics_GetItemExtractionCost Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetLocalPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerController* UGzGameplayStatics::GetLocalPlayerController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetLocalPlayerController");

	Params::GzGameplayStatics_GetLocalPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetLocalViewTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzGameplayStatics::GetLocalViewTarget(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetLocalViewTarget");

	Params::GzGameplayStatics_GetLocalViewTarget Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetPickupsInRadius
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPickableBase*>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzPickableBase*> UGzGameplayStatics::GetPickupsInRadius(const class UObject* WorldContextObject, const struct FVector& Location, const float Radius, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetPickupsInRadius");

	Params::GzGameplayStatics_GetPickupsInRadius Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetPlayerStateFromContext
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ActorContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzGameplayStatics::GetPlayerStateFromContext(class AActor* ActorContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetPlayerStateFromContext");

	Params::GzGameplayStatics_GetPlayerStateFromContext Parms{};

	Parms.ActorContext = ActorContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetPlayerStateFromPlayerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzGameplayStatics::GetPlayerStateFromPlayerId(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetPlayerStateFromPlayerId");

	Params::GzGameplayStatics_GetPlayerStateFromPlayerId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetPlayerStateFromPlayFabId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayFabId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* UGzGameplayStatics::GetPlayerStateFromPlayFabId(const class UObject* WorldContextObject, const class FString& PlayFabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetPlayerStateFromPlayFabId");

	Params::GzGameplayStatics_GetPlayerStateFromPlayFabId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayFabId = std::move(PlayFabId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetRandomActorOfClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Param_Class                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzGameplayStatics::GetRandomActorOfClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetRandomActorOfClass");

	Params::GzGameplayStatics_GetRandomActorOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetServerWorldTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::GetServerWorldTimeSeconds(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetServerWorldTimeSeconds");

	Params::GzGameplayStatics_GetServerWorldTimeSeconds Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetSubsystem
// (Final, BlueprintAuthorityOnly, Native, Static, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzGameModeSubsystem> InClass                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzGameModeSubsystem*             OutSubsystem                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzGetSubsystemResult                   OutExecNodes                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::GetSubsystem(class UObject* WorldContextObject, TSubclassOf<class AGzGameModeSubsystem> InClass, class AGzGameModeSubsystem** OutSubsystem, EGzGetSubsystemResult* OutExecNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetSubsystem");

	Params::GzGameplayStatics_GetSubsystem Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubsystem != nullptr)
		*OutSubsystem = Parms.OutSubsystem;

	if (OutExecNodes != nullptr)
		*OutExecNodes = Parms.OutExecNodes;
}


// Function G01.GzGameplayStatics.GetTeamFromPlayerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzTeam* UGzGameplayStatics::GetTeamFromPlayerId(const class UObject* WorldContextObject, const int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetTeamFromPlayerId");

	Params::GzGameplayStatics_GetTeamFromPlayerId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetTotalRedeployCostModifier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameplayStatics::GetTotalRedeployCostModifier(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetTotalRedeployCostModifier");

	Params::GzGameplayStatics_GetTotalRedeployCostModifier Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.GetWorldZoneGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWorldZone*                     WorldZone                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzGameplayStatics::GetWorldZoneGameplayTag(class UGzWorldZone* WorldZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "GetWorldZoneGameplayTag");

	Params::GzGameplayStatics_GetWorldZoneGameplayTag Parms{};

	Parms.WorldZone = WorldZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.HasWeaponLOSToCharacter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzCharacter*                     MyPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzCharacter*                     TargetCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnyCharacter                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* UGzGameplayStatics::HasWeaponLOSToCharacter(class AGzCharacter* MyPawn, class AGzCharacter* TargetCharacter, const bool bAnyCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "HasWeaponLOSToCharacter");

	Params::GzGameplayStatics_HasWeaponLOSToCharacter Parms{};

	Parms.MyPawn = MyPawn;
	Parms.TargetCharacter = TargetCharacter;
	Parms.bAnyCharacter = bAnyCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.IsGameRuleEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Rule                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::IsGameRuleEnabled(const class UObject* WorldContextObject, const struct FGameplayTag& Rule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "IsGameRuleEnabled");

	Params::GzGameplayStatics_IsGameRuleEnabled Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Rule = std::move(Rule);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.IsLocalPlayerCommunicationRestricted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::IsLocalPlayerCommunicationRestricted(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "IsLocalPlayerCommunicationRestricted");

	Params::GzGameplayStatics_IsLocalPlayerCommunicationRestricted Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.IsWithEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::IsWithEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "IsWithEditor");

	Params::GzGameplayStatics_IsWithEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.LineTraceSkipOwner
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipRecursively                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseComplex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult UGzGameplayStatics::LineTraceSkipOwner(const class AActor* Owner, const bool bSkipRecursively, ECollisionChannel CollisionChannel, const struct FVector& Start, const struct FVector& End, bool bUseComplex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "LineTraceSkipOwner");

	Params::GzGameplayStatics_LineTraceSkipOwner Parms{};

	Parms.Owner = Owner;
	Parms.bSkipRecursively = bSkipRecursively;
	Parms.CollisionChannel = CollisionChannel;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.bUseComplex = bUseComplex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.MarkSplineEdited
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 Spline                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEdited                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::MarkSplineEdited(class USplineComponent* Spline, bool bEdited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "MarkSplineEdited");

	Params::GzGameplayStatics_MarkSplineEdited Parms{};

	Parms.Spline = Spline;
	Parms.bEdited = bEdited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.PlaySyncCutscene
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzSyncCutscene>      CutsceneClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzSyncCutscene*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSyncCutscene* UGzGameplayStatics::PlaySyncCutscene(const class UObject* WorldContextObject, TSubclassOf<class AGzSyncCutscene> CutsceneClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "PlaySyncCutscene");

	Params::GzGameplayStatics_PlaySyncCutscene Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CutsceneClass = CutsceneClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.PrintCallstack_BP
// (Final, Native, Static, Public, BlueprintCallable)

void UGzGameplayStatics::PrintCallstack_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "PrintCallstack_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.PrintCallstack_CPP
// (Final, Native, Static, Public, BlueprintCallable)

void UGzGameplayStatics::PrintCallstack_CPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "PrintCallstack_CPP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.PrintCallstack_FULL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bCollapseVMStack                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::PrintCallstack_FULL(const bool bCollapseVMStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "PrintCallstack_FULL");

	Params::GzGameplayStatics_PrintCallstack_FULL Parms{};

	Parms.bCollapseVMStack = bCollapseVMStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.ReportPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   PlayerToReport                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EGzReportReason>                 Reasons                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayStatics::ReportPlayer(class AGzPlayerState* PlayerToReport, const TArray<EGzReportReason>& Reasons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "ReportPlayer");

	Params::GzGameplayStatics_ReportPlayer Parms{};

	Parms.PlayerToReport = PlayerToReport;
	Parms.Reasons = std::move(Reasons);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.SetCharacterIdAccessActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzCharacterIdAccess             CharacterIdAccess                                      (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::SetCharacterIdAccessActor(struct FGzCharacterIdAccess& CharacterIdAccess, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SetCharacterIdAccessActor");

	Params::GzGameplayStatics_SetCharacterIdAccessActor Parms{};

	Parms.CharacterIdAccess = std::move(CharacterIdAccess);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	CharacterIdAccess = std::move(Parms.CharacterIdAccess);
}


// Function G01.GzGameplayStatics.SetNetAddressable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::SetNetAddressable(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SetNetAddressable");

	Params::GzGameplayStatics_SetNetAddressable Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.SortActorsArrayByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayStatics::SortActorsArrayByName(TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SortActorsArrayByName");

	Params::GzGameplayStatics_SortActorsArrayByName Parms{};

	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Actors = std::move(Parms.Actors);
}


// Function G01.GzGameplayStatics.SpawnAI
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BotName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseTransform                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzAIController>      ControllerClass                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzGameplayStatics::SpawnAI(const class UObject* WorldContextObject, const class FString& BotName, const struct FTransform& Transform, bool bUseTransform, int32 TeamID, const TSubclassOf<class AGzAIController> ControllerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SpawnAI");

	Params::GzGameplayStatics_SpawnAI Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BotName = std::move(BotName);
	Parms.Transform = std::move(Transform);
	Parms.bUseTransform = bUseTransform;
	Parms.TeamID = TeamID;
	Parms.ControllerClass = ControllerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.SpawnMirrorBreaker
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerCharacter*               InPlayerCharacter                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     NPCTypeTag                                             (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzGameplayStatics::SpawnMirrorBreaker(const class UObject* WorldContextObject, const struct FTransform& Transform, const class AGzPlayerCharacter* InPlayerCharacter, const struct FGameplayTag& NPCTypeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SpawnMirrorBreaker");

	Params::GzGameplayStatics_SpawnMirrorBreaker Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Transform = std::move(Transform);
	Parms.InPlayerCharacter = InPlayerCharacter;
	Parms.NPCTypeTag = std::move(NPCTypeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.SpawnNPC
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NPCName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzAIController>      ControllerClass                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APawn>                NonPlayerCharacterClass                                (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENPCType                                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBehaviorTree*                    BehaviorTree                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzGameplayStatics::SpawnNPC(const class UObject* WorldContextObject, const class FString& NPCName, const struct FTransform& Transform, int32 TeamID, const TSubclassOf<class AGzAIController> ControllerClass, const TSubclassOf<class APawn> NonPlayerCharacterClass, ENPCType Type, class UBehaviorTree* BehaviorTree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SpawnNPC");

	Params::GzGameplayStatics_SpawnNPC Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NPCName = std::move(NPCName);
	Parms.Transform = std::move(Transform);
	Parms.TeamID = TeamID;
	Parms.ControllerClass = ControllerClass;
	Parms.NonPlayerCharacterClass = NonPlayerCharacterClass;
	Parms.Type = Type;
	Parms.BehaviorTree = BehaviorTree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.SpawnNPCByTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     NPCTypeTag                                             (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGzGameplayStatics::SpawnNPCByTag(const class UObject* WorldContextObject, const struct FTransform& Transform, int32 TeamID, const struct FGameplayTag& NPCTypeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SpawnNPCByTag");

	Params::GzGameplayStatics_SpawnNPCByTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Transform = std::move(Transform);
	Parms.TeamID = TeamID;
	Parms.NPCTypeTag = std::move(NPCTypeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.SphereSweepSkipOwner
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipRecursively                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult UGzGameplayStatics::SphereSweepSkipOwner(const class AActor* Owner, const bool bSkipRecursively, ECollisionChannel CollisionChannel, const struct FVector& Start, const struct FVector& End, const float SphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "SphereSweepSkipOwner");

	Params::GzGameplayStatics_SphereSweepSkipOwner Parms{};

	Parms.Owner = Owner;
	Parms.bSkipRecursively = bSkipRecursively;
	Parms.CollisionChannel = CollisionChannel;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameplayStatics.TriggerLocalGameplayTagEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayStatics::TriggerLocalGameplayTagEvent(class AActor* TargetActor, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "TriggerLocalGameplayTagEvent");

	Params::GzGameplayStatics_TriggerLocalGameplayTagEvent Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayStatics.TryGetWorldZoneSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzWorldZoneSetup                OutSetup                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameplayStatics::TryGetWorldZoneSetup(const class UObject* WorldContextObject, struct FGzWorldZoneSetup* OutSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGameplayStatics", "TryGetWorldZoneSetup");

	Params::GzGameplayStatics_TryGetWorldZoneSetup Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSetup != nullptr)
		*OutSetup = std::move(Parms.OutSetup);

	return Parms.ReturnValue;
}


// Function G01.GzGameplayEffectHandler.OnEffectAdded
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UGzAbilitySystemComponent*        Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayEffectHandler::OnEffectAdded(class UGzAbilitySystemComponent* Target, const struct FGameplayEffectSpec& Spec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayEffectHandler", "OnEffectAdded");

	Params::GzGameplayEffectHandler_OnEffectAdded Parms{};

	Parms.Target = Target;
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayEffectHandler.OnEffectRemoved
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UGzAbilitySystemComponent*        Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayEffectHandler::OnEffectRemoved(class UGzAbilitySystemComponent* Target, const struct FGameplayEffectSpec& Spec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayEffectHandler", "OnEffectRemoved");

	Params::GzGameplayEffectHandler_OnEffectRemoved Parms{};

	Parms.Target = Target;
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayTagHandlingComponent.OnGameplayEffectAddedToSelf
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UAbilitySystemComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      Handle                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameplayTagHandlingComponent::OnGameplayEffectAddedToSelf(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpec& Spec, const struct FActiveGameplayEffectHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayTagHandlingComponent", "OnGameplayEffectAddedToSelf");

	Params::GzGameplayTagHandlingComponent_OnGameplayEffectAddedToSelf Parms{};

	Parms.Target = Target;
	Parms.Spec = std::move(Spec);
	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameplayTagHandlingComponent.OnGameplayEffectRemoved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FActiveGameplayEffect            Effect                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGameplayTagHandlingComponent::OnGameplayEffectRemoved(const struct FActiveGameplayEffect& Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameplayTagHandlingComponent", "OnGameplayEffectRemoved");

	Params::GzGameplayTagHandlingComponent_OnGameplayEffectRemoved Parms{};

	Parms.Effect = std::move(Effect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapDeploymentTrackExtension.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapDeploymentTrackExtension::OnViewTargetChanged(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapDeploymentTrackExtension", "OnViewTargetChanged");

	Params::GzMapDeploymentTrackExtension_OnViewTargetChanged Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameSettingDiscreteDataSourceBP.GetValue
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameSettingDiscreteDataSourceBP::GetValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingDiscreteDataSourceBP", "GetValue");

	Params::GzGameSettingDiscreteDataSourceBP_GetValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzGameSettingDiscreteDataSourceBP.SetValue
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           NewValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameSettingDiscreteDataSourceBP::SetValue(const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingDiscreteDataSourceBP", "SetValue");

	Params::GzGameSettingDiscreteDataSourceBP_SetValue Parms{};

	Parms.NewValue = std::move(NewValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameSettingDiscreteDataSourceBP.GetUserSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameUserSettings* UGzGameSettingDiscreteDataSourceBP::GetUserSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingDiscreteDataSourceBP", "GetUserSettings");

	Params::GzGameSettingDiscreteDataSourceBP_GetUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHitReactionInterface.CalculateHitReactionPowerValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   InPowerValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IGzHitReactionInterface::CalculateHitReactionPowerValue(const float InPowerValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitReactionInterface", "CalculateHitReactionPowerValue");

	Params::GzHitReactionInterface_CalculateHitReactionPowerValue Parms{};

	Parms.InPowerValue = InPowerValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameSettingScalarDataSourceBP.GetValue
// (Event, Public, BlueprintEvent)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGzGameSettingScalarDataSourceBP::GetValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingScalarDataSourceBP", "GetValue");

	Params::GzGameSettingScalarDataSourceBP_GetValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzGameSettingScalarDataSourceBP.SetValue
// (Event, Public, BlueprintEvent)
// Parameters:
// double                                  NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameSettingScalarDataSourceBP::SetValue(double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingScalarDataSourceBP", "SetValue");

	Params::GzGameSettingScalarDataSourceBP_SetValue Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGameSettingScalarDataSourceBP.GetUserSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzGameUserSettings* UGzGameSettingScalarDataSourceBP::GetUserSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameSettingScalarDataSourceBP", "GetUserSettings");

	Params::GzGameSettingScalarDataSourceBP_GetUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.OnInteract
// (Final, Native, Protected)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPickableBase::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "OnInteract");

	Params::GzPickableBase_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPickableBase.OnRep_bDeferredDestructionStarted
// (Final, Native, Private)

void AGzPickableBase::OnRep_bDeferredDestructionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "OnRep_bDeferredDestructionStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPickableBase.OnRep_TransformAfterSimulation
// (Final, Native, Private)

void AGzPickableBase::OnRep_TransformAfterSimulation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "OnRep_TransformAfterSimulation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPickableBase.OnSettingsApplied
// (Final, Native, Protected)

void AGzPickableBase::OnSettingsApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "OnSettingsApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPickableBase.GetEffectsComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzPickableEffectsComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPickableEffectsComponent* AGzPickableBase::GetEffectsComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetEffectsComponent");

	Params::GzPickableBase_GetEffectsComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetInteractableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInteractableComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInteractableComponent* AGzPickableBase::GetInteractableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetInteractableComponent");

	Params::GzPickableBase_GetInteractableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetInventoryItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem AGzPickableBase::GetInventoryItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetInventoryItem");

	Params::GzPickableBase_GetInventoryItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetItemAttributeValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutSuccessful                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzItemAttribute                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzItemAttribute AGzPickableBase::GetItemAttributeValue(const struct FGameplayTag& Tag, bool* OutSuccessful) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetItemAttributeValue");

	Params::GzPickableBase_GetItemAttributeValue Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSuccessful != nullptr)
		*OutSuccessful = Parms.OutSuccessful;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetItemAttributeValueMax
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutSuccessful                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzItemAttribute                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzItemAttribute AGzPickableBase::GetItemAttributeValueMax(const struct FGameplayTag& Tag, bool* OutSuccessful) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetItemAttributeValueMax");

	Params::GzPickableBase_GetItemAttributeValueMax Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSuccessful != nullptr)
		*OutSuccessful = Parms.OutSuccessful;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetItemData
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzItemData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzItemData* AGzPickableBase::GetItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetItemData");

	Params::GzPickableBase_GetItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableBase.GetMeshComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* AGzPickableBase::GetMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableBase", "GetMeshComponent");

	Params::GzPickableBase_GetMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameStatTemplate.GetStatDisplayName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGzGameStatTemplate::GetStatDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameStatTemplate", "GetStatDisplayName");

	Params::GzGameStatTemplate_GetStatDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Tether.SpawnTetherLink
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_Tether::SpawnTetherLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Tether", "SpawnTetherLink");

	Params::GzGA_Tether_SpawnTetherLink Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.ApplyAndSaveSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCheckForConsoleOverrides                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::ApplyAndSaveSettings(bool bCheckForConsoleOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ApplyAndSaveSettings");

	Params::GzGameUserSettings_ApplyAndSaveSettings Parms{};

	Parms.bCheckForConsoleOverrides = bCheckForConsoleOverrides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.GetAudioPresetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetAudioPresetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAudioPresetName");

	Params::GzGameUserSettings_GetAudioPresetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetPersonalAssistantVoiceType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetPersonalAssistantVoiceType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetPersonalAssistantVoiceType");

	Params::GzGameUserSettings_GetPersonalAssistantVoiceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.SaveNonVideoSettings
// (Final, Native, Public, BlueprintCallable)

void UGzGameUserSettings::SaveNonVideoSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SaveNonVideoSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAcesGamutCompression
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamutCompression                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAcesGamutCompression(const float InGamutCompression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAcesGamutCompression");

	Params::GzGameUserSettings_SetAcesGamutCompression Parms{};

	Parms.InGamutCompression = InGamutCompression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAcesSceneColorMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InAcesSceneColorMultiplier                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAcesSceneColorMultiplier(const float InAcesSceneColorMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAcesSceneColorMultiplier");

	Params::GzGameUserSettings_SetAcesSceneColorMultiplier Parms{};

	Parms.InAcesSceneColorMultiplier = InAcesSceneColorMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAimAssistPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InAimAssistPreset                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAimAssistPreset(const class FString& InAimAssistPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAimAssistPreset");

	Params::GzGameUserSettings_SetAimAssistPreset Parms{};

	Parms.InAimAssistPreset = std::move(InAimAssistPreset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAlignMinimap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAlignMinimap                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAlignMinimap(const bool bInAlignMinimap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAlignMinimap");

	Params::GzGameUserSettings_SetAlignMinimap Parms{};

	Parms.bInAlignMinimap = bInAlignMinimap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAntiAliasingMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAntiAliasingMethod(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAntiAliasingMethod");

	Params::GzGameUserSettings_SetAntiAliasingMethod Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAudioPresetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InAudioPresetName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAudioPresetName(const class FString& InAudioPresetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAudioPresetName");

	Params::GzGameUserSettings_SetAudioPresetName Parms{};

	Parms.InAudioPresetName = std::move(InAudioPresetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAutoLoginEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAutoLoginEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAutoLoginEnabled");

	Params::GzGameUserSettings_SetAutoLoginEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAutomaticallyConnectToHostHideout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAutomaticallyConnectToHostHideout(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAutomaticallyConnectToHostHideout");

	Params::GzGameUserSettings_SetAutomaticallyConnectToHostHideout Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetAutoPickUpEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetAutoPickUpEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetAutoPickUpEnabled");

	Params::GzGameUserSettings_SetAutoPickUpEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetCharacterVoiceVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetCharacterVoiceVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetCharacterVoiceVolumeScale");

	Params::GzGameUserSettings_SetCharacterVoiceVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetColorVisionDeficiency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EColorVisionDeficiency                  InDeficiency                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetColorVisionDeficiency(EColorVisionDeficiency InDeficiency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetColorVisionDeficiency");

	Params::GzGameUserSettings_SetColorVisionDeficiency Parms{};

	Parms.InDeficiency = InDeficiency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetDeadZone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeadZone                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetDeadZone(const float InDeadZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetDeadZone");

	Params::GzGameUserSettings_SetDeadZone Parms{};

	Parms.InDeadZone = InDeadZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetDevNotificationsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetDevNotificationsEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetDevNotificationsEnabled");

	Params::GzGameUserSettings_SetDevNotificationsEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetDisplayGamma
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamma                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetDisplayGamma(float InGamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetDisplayGamma");

	Params::GzGameUserSettings_SetDisplayGamma Parms{};

	Parms.InGamma = InGamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetDisplayIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetDisplayIndex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetDisplayIndex");

	Params::GzGameUserSettings_SetDisplayIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetEnableAdaptiveTriggers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetEnableAdaptiveTriggers(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetEnableAdaptiveTriggers");

	Params::GzGameUserSettings_SetEnableAdaptiveTriggers Parms{};

	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetEnableHapticsFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetEnableHapticsFeedback(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetEnableHapticsFeedback");

	Params::GzGameUserSettings_SetEnableHapticsFeedback Parms{};

	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetFullCatalogAccessEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetFullCatalogAccessEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetFullCatalogAccessEnabled");

	Params::GzGameUserSettings_SetFullCatalogAccessEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGameMeshMinLODQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InQuality                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGameMeshMinLODQuality(int32 InQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGameMeshMinLODQuality");

	Params::GzGameUserSettings_SetGameMeshMinLODQuality Parms{};

	Parms.InQuality = InQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadHorizontalAimSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadHorizontalAimSensitivityScale                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadHorizontalAimSensitivityScale(float InGamepadHorizontalAimSensitivityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadHorizontalAimSensitivityScale");

	Params::GzGameUserSettings_SetGamepadHorizontalAimSensitivityScale Parms{};

	Parms.InGamepadHorizontalAimSensitivityScale = InGamepadHorizontalAimSensitivityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadHorizontalLookSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadHorizontalLookSensitivityScale                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadHorizontalLookSensitivityScale(float InGamepadHorizontalLookSensitivityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadHorizontalLookSensitivityScale");

	Params::GzGameUserSettings_SetGamepadHorizontalLookSensitivityScale Parms{};

	Parms.InGamepadHorizontalLookSensitivityScale = InGamepadHorizontalLookSensitivityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadHorizontalSnipeSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadHorizontalSnipeSensitivityScale               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadHorizontalSnipeSensitivityScale(float InGamepadHorizontalSnipeSensitivityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadHorizontalSnipeSensitivityScale");

	Params::GzGameUserSettings_SetGamepadHorizontalSnipeSensitivityScale Parms{};

	Parms.InGamepadHorizontalSnipeSensitivityScale = InGamepadHorizontalSnipeSensitivityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadVerticalAimSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadVerticalAimSensitivityScaleFactor             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadVerticalAimSensitivityScale(float InGamepadVerticalAimSensitivityScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadVerticalAimSensitivityScale");

	Params::GzGameUserSettings_SetGamepadVerticalAimSensitivityScale Parms{};

	Parms.InGamepadVerticalAimSensitivityScaleFactor = InGamepadVerticalAimSensitivityScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadVerticalLookSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadVerticalLookSensitivityScale                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadVerticalLookSensitivityScale(float InGamepadVerticalLookSensitivityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadVerticalLookSensitivityScale");

	Params::GzGameUserSettings_SetGamepadVerticalLookSensitivityScale Parms{};

	Parms.InGamepadVerticalLookSensitivityScale = InGamepadVerticalLookSensitivityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGamepadVerticalSnipeSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamepadVerticalSnipeSensitivityScale                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGamepadVerticalSnipeSensitivityScale(float InGamepadVerticalSnipeSensitivityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGamepadVerticalSnipeSensitivityScale");

	Params::GzGameUserSettings_SetGamepadVerticalSnipeSensitivityScale Parms{};

	Parms.InGamepadVerticalSnipeSensitivityScale = InGamepadVerticalSnipeSensitivityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzAntiAliasingQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzAntiAliasingQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzAntiAliasingQuality");

	Params::GzGameUserSettings_SetGzAntiAliasingQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzFoliageQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzFoliageQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzFoliageQuality");

	Params::GzGameUserSettings_SetGzFoliageQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzFrameRateLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLimit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzFrameRateLimit(float NewLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzFrameRateLimit");

	Params::GzGameUserSettings_SetGzFrameRateLimit Parms{};

	Parms.NewLimit = NewLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzFullscreenMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWindowMode                             InFullscreenMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzFullscreenMode(EWindowMode InFullscreenMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzFullscreenMode");

	Params::GzGameUserSettings_SetGzFullscreenMode Parms{};

	Parms.InFullscreenMode = InFullscreenMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzGlobalIlluminationQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzGlobalIlluminationQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzGlobalIlluminationQuality");

	Params::GzGameUserSettings_SetGzGlobalIlluminationQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzOverallScalabilityLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzOverallScalabilityLevel(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzOverallScalabilityLevel");

	Params::GzGameUserSettings_SetGzOverallScalabilityLevel Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzPostProcessingQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzPostProcessingQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzPostProcessingQuality");

	Params::GzGameUserSettings_SetGzPostProcessingQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzReflectionQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzReflectionQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzReflectionQuality");

	Params::GzGameUserSettings_SetGzReflectionQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzScreenResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        Resolution                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzScreenResolution(const struct FIntPoint& Resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzScreenResolution");

	Params::GzGameUserSettings_SetGzScreenResolution Parms{};

	Parms.Resolution = std::move(Resolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzShadingQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzShadingQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzShadingQuality");

	Params::GzGameUserSettings_SetGzShadingQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzShadowQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzShadowQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzShadowQuality");

	Params::GzGameUserSettings_SetGzShadowQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzTextureQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzTextureQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzTextureQuality");

	Params::GzGameUserSettings_SetGzTextureQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzViewDistanceQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzViewDistanceQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzViewDistanceQuality");

	Params::GzGameUserSettings_SetGzViewDistanceQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzVisualEffectQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzVisualEffectQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzVisualEffectQuality");

	Params::GzGameUserSettings_SetGzVisualEffectQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetGzVSyncEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetGzVSyncEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetGzVSyncEnabled");

	Params::GzGameUserSettings_SetGzVSyncEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHardwareRayTracingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInHardwareRayTracingEnabled                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHardwareRayTracingEnabled(const bool bInHardwareRayTracingEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHardwareRayTracingEnabled");

	Params::GzGameUserSettings_SetHardwareRayTracingEnabled Parms{};

	Parms.bInHardwareRayTracingEnabled = bInHardwareRayTracingEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHDROutputEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHDROutputEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHDROutputEnabled");

	Params::GzGameUserSettings_SetHDROutputEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHDRUiLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InHDRUiLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHDRUiLevel(float InHDRUiLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHDRUiLevel");

	Params::GzGameUserSettings_SetHDRUiLevel Parms{};

	Parms.InHDRUiLevel = InHDRUiLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHideoutMeshMinLODQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InQuality                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHideoutMeshMinLODQuality(int32 InQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHideoutMeshMinLODQuality");

	Params::GzGameUserSettings_SetHideoutMeshMinLODQuality Parms{};

	Parms.InQuality = InQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHorizontalAimSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHorizontalAimSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHorizontalAimSensitivityScaleFactor");

	Params::GzGameUserSettings_SetHorizontalAimSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHorizontalInputInverted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInverted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHorizontalInputInverted(bool bInverted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHorizontalInputInverted");

	Params::GzGameUserSettings_SetHorizontalInputInverted Parms{};

	Parms.bInverted = bInverted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHorizontalLookSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHorizontalLookSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHorizontalLookSensitivityScaleFactor");

	Params::GzGameUserSettings_SetHorizontalLookSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetHorizontalSnipeSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetHorizontalSnipeSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetHorizontalSnipeSensitivityScaleFactor");

	Params::GzGameUserSettings_SetHorizontalSnipeSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetIsAdvancedKeyBindings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAdvanced                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetIsAdvancedKeyBindings(bool bIsAdvanced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetIsAdvancedKeyBindings");

	Params::GzGameUserSettings_SetIsAdvancedKeyBindings Parms{};

	Parms.bIsAdvanced = bIsAdvanced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetLanguage
// (Final, Native, Public)
// Parameters:
// class FString                           LanguageId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetLanguage(const class FString& LanguageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetLanguage");

	Params::GzGameUserSettings_SetLanguage Parms{};

	Parms.LanguageId = std::move(LanguageId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetLootBeamsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetLootBeamsEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetLootBeamsEnabled");

	Params::GzGameUserSettings_SetLootBeamsEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMainVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMainVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMainVolumeScale");

	Params::GzGameUserSettings_SetMainVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMatchStateAnnouncerVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMatchStateAnnouncerVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMatchStateAnnouncerVolumeScale");

	Params::GzGameUserSettings_SetMatchStateAnnouncerVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMicrophoneSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMicrophoneSensitivity(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMicrophoneSensitivity");

	Params::GzGameUserSettings_SetMicrophoneSensitivity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMidLuminance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMidLuminance                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMidLuminance(const float InMidLuminance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMidLuminance");

	Params::GzGameUserSettings_SetMidLuminance Parms{};

	Parms.InMidLuminance = InMidLuminance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMinLuminanceLog10
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinLuminanceLog10                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMinLuminanceLog10(const float InMinLuminanceLog10)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMinLuminanceLog10");

	Params::GzGameUserSettings_SetMinLuminanceLog10 Parms{};

	Parms.InMinLuminanceLog10 = InMinLuminanceLog10;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMotionBlurActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMotionBlurActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMotionBlurActive");

	Params::GzGameUserSettings_SetMotionBlurActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMusicVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMusicVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMusicVolumeScale");

	Params::GzGameUserSettings_SetMusicVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetMuteAudioWhenUnfocused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetMuteAudioWhenUnfocused(bool bMute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetMuteAudioWhenUnfocused");

	Params::GzGameUserSettings_SetMuteAudioWhenUnfocused Parms{};

	Parms.bMute = bMute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetPerformanceStatsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetPerformanceStatsEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetPerformanceStatsEnabled");

	Params::GzGameUserSettings_SetPerformanceStatsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetPersonalAssistantVoiceType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InPersonalAssistantVoiceType                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetPersonalAssistantVoiceType(const class FString& InPersonalAssistantVoiceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetPersonalAssistantVoiceType");

	Params::GzGameUserSettings_SetPersonalAssistantVoiceType Parms{};

	Parms.InPersonalAssistantVoiceType = std::move(InPersonalAssistantVoiceType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetPersonalAssistantVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetPersonalAssistantVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetPersonalAssistantVolumeScale");

	Params::GzGameUserSettings_SetPersonalAssistantVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetQualityMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsPerformanceMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetQualityMode(bool bInIsPerformanceMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetQualityMode");

	Params::GzGameUserSettings_SetQualityMode Parms{};

	Parms.bInIsPerformanceMode = bInIsPerformanceMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetResolutionScaleValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetResolutionScaleValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetResolutionScaleValue");

	Params::GzGameUserSettings_SetResolutionScaleValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetResolutionScalingMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ScalingMethod                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetResolutionScalingMethod(const class FString& ScalingMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetResolutionScalingMethod");

	Params::GzGameUserSettings_SetResolutionScalingMethod Parms{};

	Parms.ScalingMethod = std::move(ScalingMethod);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetSfxVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetSfxVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetSfxVolumeScale");

	Params::GzGameUserSettings_SetSfxVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetShowLobbyOldScreenEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShowOldScreenEffect                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetShowLobbyOldScreenEffect(bool bInShowOldScreenEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetShowLobbyOldScreenEffect");

	Params::GzGameUserSettings_SetShowLobbyOldScreenEffect Parms{};

	Parms.bInShowOldScreenEffect = bInShowOldScreenEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetSidearmAmmoAutoPickUpEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetSidearmAmmoAutoPickUpEnabled(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetSidearmAmmoAutoPickUpEnabled");

	Params::GzGameUserSettings_SetSidearmAmmoAutoPickUpEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetToggleAimingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bToggle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetToggleAimingMode(bool bToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetToggleAimingMode");

	Params::GzGameUserSettings_SetToggleAimingMode Parms{};

	Parms.bToggle = bToggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetToggleSprint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bToggle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetToggleSprint(bool bToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetToggleSprint");

	Params::GzGameUserSettings_SetToggleSprint Parms{};

	Parms.bToggle = bToggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetUIAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Ratio                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetUIAspectRatio(const float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetUIAspectRatio");

	Params::GzGameUserSettings_SetUIAspectRatio Parms{};

	Parms.Ratio = Ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVerticalAimSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVerticalAimSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVerticalAimSensitivityScaleFactor");

	Params::GzGameUserSettings_SetVerticalAimSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVerticalInputInverted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInverted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVerticalInputInverted(bool bInverted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVerticalInputInverted");

	Params::GzGameUserSettings_SetVerticalInputInverted Parms{};

	Parms.bInverted = bInverted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVerticalLookSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVerticalLookSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVerticalLookSensitivityScaleFactor");

	Params::GzGameUserSettings_SetVerticalLookSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVerticalSnipeSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVerticalSnipeSensitivityScaleFactor(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVerticalSnipeSensitivityScaleFactor");

	Params::GzGameUserSettings_SetVerticalSnipeSensitivityScaleFactor Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVoiceChatInputDeviceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVoiceChatInputDeviceId(const class FString& DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVoiceChatInputDeviceId");

	Params::GzGameUserSettings_SetVoiceChatInputDeviceId Parms{};

	Parms.DeviceID = std::move(DeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVoiceChatOutputDeviceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVoiceChatOutputDeviceId(const class FString& DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVoiceChatOutputDeviceId");

	Params::GzGameUserSettings_SetVoiceChatOutputDeviceId Parms{};

	Parms.DeviceID = std::move(DeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVoiceChatState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzVoiceChatState                       NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVoiceChatState(EGzVoiceChatState NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVoiceChatState");

	Params::GzGameUserSettings_SetVoiceChatState Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVoiceChatVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVoiceChatVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVoiceChatVolumeScale");

	Params::GzGameUserSettings_SetVoiceChatVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.SetVovVolumeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScaleFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::SetVovVolumeScale(float NewScaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "SetVovVolumeScale");

	Params::GzGameUserSettings_SetVovVolumeScale Parms{};

	Parms.NewScaleFactor = NewScaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.ShowDamageNumbers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShowDamageNumbers                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::ShowDamageNumbers(bool bInShowDamageNumbers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ShowDamageNumbers");

	Params::GzGameUserSettings_ShowDamageNumbers Parms{};

	Parms.bInShowDamageNumbers = bInShowDamageNumbers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.ShowShowComparisonTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShowComparisonTooltip                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGameUserSettings::ShowShowComparisonTooltip(bool bInShowComparisonTooltip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ShowShowComparisonTooltip");

	Params::GzGameUserSettings_ShowShowComparisonTooltip Parms{};

	Parms.bInShowComparisonTooltip = bInShowComparisonTooltip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGameUserSettings.AreLootBeamsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::AreLootBeamsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "AreLootBeamsEnabled");

	Params::GzGameUserSettings_AreLootBeamsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.ArePerformanceStatsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::ArePerformanceStatsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ArePerformanceStatsEnabled");

	Params::GzGameUserSettings_ArePerformanceStatsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.AreSettingsDirty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::AreSettingsDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "AreSettingsDirty");

	Params::GzGameUserSettings_AreSettingsDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.AreVideoSettingsDirty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::AreVideoSettingsDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "AreVideoSettingsDirty");

	Params::GzGameUserSettings_AreVideoSettingsDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAcesGamutCompression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetAcesGamutCompression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAcesGamutCompression");

	Params::GzGameUserSettings_GetAcesGamutCompression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAcesSceneColorMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetAcesSceneColorMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAcesSceneColorMultiplier");

	Params::GzGameUserSettings_GetAcesSceneColorMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetActiveMonitorResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UGzGameUserSettings::GetActiveMonitorResolution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetActiveMonitorResolution");

	Params::GzGameUserSettings_GetActiveMonitorResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAimAssistPreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetAimAssistPreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAimAssistPreset");

	Params::GzGameUserSettings_GetAimAssistPreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAntialiasingMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameUserSettings::GetAntialiasingMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAntialiasingMethod");

	Params::GzGameUserSettings_GetAntialiasingMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAutoLoginEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetAutoLoginEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAutoLoginEnabled");

	Params::GzGameUserSettings_GetAutoLoginEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAutomaticallyConnectToHostHideout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetAutomaticallyConnectToHostHideout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAutomaticallyConnectToHostHideout");

	Params::GzGameUserSettings_GetAutomaticallyConnectToHostHideout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetAutoPickUpEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetAutoPickUpEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetAutoPickUpEnabled");

	Params::GzGameUserSettings_GetAutoPickUpEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetCharacterVoiceVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetCharacterVoiceVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetCharacterVoiceVolumeScale");

	Params::GzGameUserSettings_GetCharacterVoiceVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetColorVisionDeficiency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EColorVisionDeficiency                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EColorVisionDeficiency UGzGameUserSettings::GetColorVisionDeficiency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetColorVisionDeficiency");

	Params::GzGameUserSettings_GetColorVisionDeficiency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetCurrentLanguage
// (Final, Native, Public, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetCurrentLanguage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetCurrentLanguage");

	Params::GzGameUserSettings_GetCurrentLanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetDeadZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetDeadZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetDeadZone");

	Params::GzGameUserSettings_GetDeadZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetDevNotificationsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetDevNotificationsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetDevNotificationsEnabled");

	Params::GzGameUserSettings_GetDevNotificationsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetDisplayGamma
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetDisplayGamma() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetDisplayGamma");

	Params::GzGameUserSettings_GetDisplayGamma Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetDisplayIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameUserSettings::GetDisplayIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetDisplayIndex");

	Params::GzGameUserSettings_GetDisplayIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetEnableAdaptiveTriggers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetEnableAdaptiveTriggers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetEnableAdaptiveTriggers");

	Params::GzGameUserSettings_GetEnableAdaptiveTriggers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetEnableHapticsFeedback
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetEnableHapticsFeedback() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetEnableHapticsFeedback");

	Params::GzGameUserSettings_GetEnableHapticsFeedback Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetFullCatalogAccessEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetFullCatalogAccessEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetFullCatalogAccessEnabled");

	Params::GzGameUserSettings_GetFullCatalogAccessEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGameMeshMinLODQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameUserSettings::GetGameMeshMinLODQuality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGameMeshMinLODQuality");

	Params::GzGameUserSettings_GetGameMeshMinLODQuality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadHorizontalAimSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadHorizontalAimSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadHorizontalAimSensitivityScale");

	Params::GzGameUserSettings_GetGamepadHorizontalAimSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadHorizontalLookSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadHorizontalLookSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadHorizontalLookSensitivityScale");

	Params::GzGameUserSettings_GetGamepadHorizontalLookSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadHorizontalSnipeSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadHorizontalSnipeSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadHorizontalSnipeSensitivityScale");

	Params::GzGameUserSettings_GetGamepadHorizontalSnipeSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadProfileIdentifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGameplayTag UGzGameUserSettings::GetGamepadProfileIdentifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadProfileIdentifier");

	Params::GzGameUserSettings_GetGamepadProfileIdentifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadVerticalAimSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadVerticalAimSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadVerticalAimSensitivityScale");

	Params::GzGameUserSettings_GetGamepadVerticalAimSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadVerticalLookSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadVerticalLookSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadVerticalLookSensitivityScale");

	Params::GzGameUserSettings_GetGamepadVerticalLookSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetGamepadVerticalSnipeSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetGamepadVerticalSnipeSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetGamepadVerticalSnipeSensitivityScale");

	Params::GzGameUserSettings_GetGamepadVerticalSnipeSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetHDRUILevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetHDRUILevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetHDRUILevel");

	Params::GzGameUserSettings_GetHDRUILevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetHideoutMeshMinLODQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameUserSettings::GetHideoutMeshMinLODQuality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetHideoutMeshMinLODQuality");

	Params::GzGameUserSettings_GetHideoutMeshMinLODQuality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetHorizontalAimSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetHorizontalAimSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetHorizontalAimSensitivityScaleFactor");

	Params::GzGameUserSettings_GetHorizontalAimSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetHorizontalLookSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetHorizontalLookSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetHorizontalLookSensitivityScaleFactor");

	Params::GzGameUserSettings_GetHorizontalLookSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetHorizontalSnipeSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetHorizontalSnipeSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetHorizontalSnipeSensitivityScaleFactor");

	Params::GzGameUserSettings_GetHorizontalSnipeSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetIsAdvancedKeyBindings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetIsAdvancedKeyBindings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetIsAdvancedKeyBindings");

	Params::GzGameUserSettings_GetIsAdvancedKeyBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetLanguages
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzGameUserSettings::GetLanguages() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetLanguages");

	Params::GzGameUserSettings_GetLanguages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetLastConfirmedDisplayIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzGameUserSettings::GetLastConfirmedDisplayIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetLastConfirmedDisplayIndex");

	Params::GzGameUserSettings_GetLastConfirmedDisplayIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMainVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMainVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMainVolumeScale");

	Params::GzGameUserSettings_GetMainVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMatchStateAnnouncerVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMatchStateAnnouncerVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMatchStateAnnouncerVolumeScale");

	Params::GzGameUserSettings_GetMatchStateAnnouncerVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMicrophoneSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMicrophoneSensitivity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMicrophoneSensitivity");

	Params::GzGameUserSettings_GetMicrophoneSensitivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMidLuminance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMidLuminance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMidLuminance");

	Params::GzGameUserSettings_GetMidLuminance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMinLuminanceLog10
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMinLuminanceLog10() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMinLuminanceLog10");

	Params::GzGameUserSettings_GetMinLuminanceLog10 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMusicVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetMusicVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMusicVolumeScale");

	Params::GzGameUserSettings_GetMusicVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetMuteAudioWhenUnfocused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetMuteAudioWhenUnfocused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetMuteAudioWhenUnfocused");

	Params::GzGameUserSettings_GetMuteAudioWhenUnfocused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetPersonalAssistantVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetPersonalAssistantVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetPersonalAssistantVolumeScale");

	Params::GzGameUserSettings_GetPersonalAssistantVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetResolutionScaleValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetResolutionScaleValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetResolutionScaleValue");

	Params::GzGameUserSettings_GetResolutionScaleValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetResolutionScalingMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetResolutionScalingMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetResolutionScalingMethod");

	Params::GzGameUserSettings_GetResolutionScalingMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetSfxVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetSfxVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetSfxVolumeScale");

	Params::GzGameUserSettings_GetSfxVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetShowLobbyOldScreenEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetShowLobbyOldScreenEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetShowLobbyOldScreenEffect");

	Params::GzGameUserSettings_GetShowLobbyOldScreenEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetSidearmAmmoAutoPickUpEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::GetSidearmAmmoAutoPickUpEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetSidearmAmmoAutoPickUpEnabled");

	Params::GzGameUserSettings_GetSidearmAmmoAutoPickUpEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetUIAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetUIAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetUIAspectRatio");

	Params::GzGameUserSettings_GetUIAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVerticalAimSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetVerticalAimSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVerticalAimSensitivityScaleFactor");

	Params::GzGameUserSettings_GetVerticalAimSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVerticalLookSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetVerticalLookSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVerticalLookSensitivityScaleFactor");

	Params::GzGameUserSettings_GetVerticalLookSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVerticalSnipeSensitivityScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetVerticalSnipeSensitivityScaleFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVerticalSnipeSensitivityScaleFactor");

	Params::GzGameUserSettings_GetVerticalSnipeSensitivityScaleFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVoiceChatInputDeviceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetVoiceChatInputDeviceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVoiceChatInputDeviceId");

	Params::GzGameUserSettings_GetVoiceChatInputDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVoiceChatOutputDeviceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzGameUserSettings::GetVoiceChatOutputDeviceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVoiceChatOutputDeviceId");

	Params::GzGameUserSettings_GetVoiceChatOutputDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVoiceChatState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzVoiceChatState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzVoiceChatState UGzGameUserSettings::GetVoiceChatState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVoiceChatState");

	Params::GzGameUserSettings_GetVoiceChatState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVoiceChatVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetVoiceChatVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVoiceChatVolumeScale");

	Params::GzGameUserSettings_GetVoiceChatVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.GetVovVolumeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGameUserSettings::GetVovVolumeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "GetVovVolumeScale");

	Params::GzGameUserSettings_GetVovVolumeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.HasMonitorChanged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::HasMonitorChanged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "HasMonitorChanged");

	Params::GzGameUserSettings_HasMonitorChanged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsAlignMinimap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsAlignMinimap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsAlignMinimap");

	Params::GzGameUserSettings_IsAlignMinimap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsDLSSSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsDLSSSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsDLSSSupported");

	Params::GzGameUserSettings_IsDLSSSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsHardwareRayTracingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsHardwareRayTracingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsHardwareRayTracingEnabled");

	Params::GzGameUserSettings_IsHardwareRayTracingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsHDROutputEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsHDROutputEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsHDROutputEnabled");

	Params::GzGameUserSettings_IsHDROutputEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsHorizontalInputInverted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsHorizontalInputInverted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsHorizontalInputInverted");

	Params::GzGameUserSettings_IsHorizontalInputInverted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsMotionBlurActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsMotionBlurActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsMotionBlurActive");

	Params::GzGameUserSettings_IsMotionBlurActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsPerformanceMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsPerformanceMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsPerformanceMode");

	Params::GzGameUserSettings_IsPerformanceMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsToggleAimingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsToggleAimingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsToggleAimingMode");

	Params::GzGameUserSettings_IsToggleAimingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsToggleSprintMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsToggleSprintMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsToggleSprintMode");

	Params::GzGameUserSettings_IsToggleSprintMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.IsVerticalInputInverted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::IsVerticalInputInverted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "IsVerticalInputInverted");

	Params::GzGameUserSettings_IsVerticalInputInverted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.ShouldShowComparisonTooltip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::ShouldShowComparisonTooltip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ShouldShowComparisonTooltip");

	Params::GzGameUserSettings_ShouldShowComparisonTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGameUserSettings.ShouldShowDamageNumbers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGameUserSettings::ShouldShowDamageNumbers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGameUserSettings", "ShouldShowDamageNumbers");

	Params::GzGameUserSettings_ShouldShowDamageNumbers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGateObjective.MakeUntilObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_Condition                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Param_Objective                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzGateObjective::MakeUntilObjective(class AGzAdvancedMission* Mission, class UGzCondition* Param_Condition, class UGzObjective* Param_Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGateObjective", "MakeUntilObjective");

	Params::GzGateObjective_MakeUntilObjective Parms{};

	Parms.Mission = Mission;
	Parms.Param_Condition = Param_Condition;
	Parms.Param_Objective = Param_Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGateObjective.MakeWhileObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_Condition                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Param_Objective                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzGateObjective::MakeWhileObjective(class AGzAdvancedMission* Mission, class UGzCondition* Param_Condition, class UGzObjective* Param_Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzGateObjective", "MakeWhileObjective");

	Params::GzGateObjective_MakeWhileObjective Parms{};

	Parms.Mission = Mission;
	Parms.Param_Condition = Param_Condition;
	Parms.Param_Objective = Param_Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionMarker.Hide
// (Native, Public, BlueprintCallable)

void AGzMissionMarker::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.OnHide
// (Event, Protected, BlueprintEvent)

void AGzMissionMarker::OnHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "OnHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionMarker.OnShow
// (Event, Protected, BlueprintEvent)

void AGzMissionMarker::OnShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "OnShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionMarker.SetMarkerLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionMarker::SetMarkerLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "SetMarkerLocation");

	Params::GzMissionMarker_SetMarkerLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.SetMarkerTargetAttached
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionMarker::SetMarkerTargetAttached(class AActor* Target, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "SetMarkerTargetAttached");

	Params::GzMissionMarker_SetMarkerTargetAttached Parms{};

	Parms.Target = Target;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.SetMarkerTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionMarker::SetMarkerTargetLocation(const class AActor* Target, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "SetMarkerTargetLocation");

	Params::GzMissionMarker_SetMarkerTargetLocation Parms{};

	Parms.Target = Target;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.SetVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionMarker::SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "SetVisibility");

	Params::GzMissionMarker_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.Show
// (Native, Public, BlueprintCallable)

void AGzMissionMarker::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.TriggerDestroy
// (Native, Event, Public, BlueprintEvent)

void AGzMissionMarker::TriggerDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "TriggerDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarker.IsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMissionMarker::IsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarker", "IsVisible");

	Params::GzMissionMarker_IsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_BaseLimbInteraction.OnMontageNotify
// (Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BaseLimbInteraction::OnMontageNotify(const class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BaseLimbInteraction", "OnMontageNotify");

	Params::GzGA_BaseLimbInteraction_OnMontageNotify Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_AttachLimb.InitiateCancelByPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UGzGA_AttachLimb::InitiateCancelByPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_AttachLimb", "InitiateCancelByPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_AttachLimb.RecallCancelByPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UGzGA_AttachLimb::RecallCancelByPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_AttachLimb", "RecallCancelByPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_AttachLimb.SendLimbAttachedMessage
// (Final, Native, Protected, Const)

void UGzGA_AttachLimb::SendLimbAttachedMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_AttachLimb", "SendLimbAttachedMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPositiveCondition.MakePositiveCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzPositiveCondition::MakePositiveCondition(class AGzAdvancedMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPositiveCondition", "MakePositiveCondition");

	Params::GzPositiveCondition_MakePositiveCondition Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZone.Init
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzCircle2D                      InInitialCircle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzShrinkingZone::Init(const struct FGzCircle2D& InInitialCircle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "Init");

	Params::GzShrinkingZone_Init Parms{};

	Parms.InInitialCircle = std::move(InInitialCircle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZone.OnRep_ShrinkingParams
// (Final, Native, Private)

void AGzShrinkingZone::OnRep_ShrinkingParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "OnRep_ShrinkingParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZone.SetTarget
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzCircle2D                      InTargetCircle                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShrinkingZone::SetTarget(const struct FGzCircle2D& InTargetCircle, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "SetTarget");

	Params::GzShrinkingZone_SetTarget Parms{};

	Parms.InTargetCircle = std::move(InTargetCircle);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZone.GetCurrentCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCircle2D                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzCircle2D AGzShrinkingZone::GetCurrentCircle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "GetCurrentCircle");

	Params::GzShrinkingZone_GetCurrentCircle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZone.GetShrinkingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzShrinkingZone::GetShrinkingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "GetShrinkingTime");

	Params::GzShrinkingZone_GetShrinkingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZone.GetTargetCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCircle2D                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzCircle2D AGzShrinkingZone::GetTargetCircle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "GetTargetCircle");

	Params::GzShrinkingZone_GetTargetCircle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZone.OnCurrentCircleChanged
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGzCircle2D                      NewCurrentCircle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzShrinkingZone::OnCurrentCircleChanged(const struct FGzCircle2D& NewCurrentCircle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZone", "OnCurrentCircleChanged");

	Params::GzShrinkingZone_OnCurrentCircleChanged Parms{};

	Parms.NewCurrentCircle = std::move(NewCurrentCircle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_BoostSlide.OnSlideConditionsEnds
// (Final, Native, Protected)

void UGzGA_BoostSlide::OnSlideConditionsEnds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BoostSlide", "OnSlideConditionsEnds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_BoostSlide.OnTickTaskEnds
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasCompleted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_BoostSlide::OnTickTaskEnds(bool bWasCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_BoostSlide", "OnTickTaskEnds");

	Params::GzGA_BoostSlide_OnTickTaskEnds Parms{};

	Parms.bWasCompleted = bWasCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ChargedJump.CreateChargingWidget
// (Event, Protected, BlueprintEvent)

void UGzGA_ChargedJump::CreateChargingWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargedJump", "CreateChargingWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_ChargedJump.OnChargeUpComplete
// (Final, Native, Public)
// Parameters:
// float                                   AmountOfTimeHeld                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ChargedJump::OnChargeUpComplete(float AmountOfTimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargedJump", "OnChargeUpComplete");

	Params::GzGA_ChargedJump_OnChargeUpComplete Parms{};

	Parms.AmountOfTimeHeld = AmountOfTimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ChargedJump.OnMovementModeChange
// (Final, Native, Public)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ChargedJump::OnMovementModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargedJump", "OnMovementModeChange");

	Params::GzGA_ChargedJump_OnMovementModeChange Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ChargedJump.RemoveChargingWidget
// (Event, Protected, BlueprintEvent)

void UGzGA_ChargedJump::RemoveChargingWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargedJump", "RemoveChargingWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_ChargedJump.GetChargePercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGA_ChargedJump::GetChargePercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ChargedJump", "GetChargePercent");

	Params::GzGA_ChargedJump_GetChargePercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllBackpacks
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllBackpacks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllBackpacks");

	Params::GzInventoryFunctionLibrary_GetAllBackpacks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllConsumables
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllConsumables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllConsumables");

	Params::GzInventoryFunctionLibrary_GetAllConsumables Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllContainerItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllContainerItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllContainerItems");

	Params::GzInventoryFunctionLibrary_GetAllContainerItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllCyberLimbs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllCyberLimbs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllCyberLimbs");

	Params::GzInventoryFunctionLibrary_GetAllCyberLimbs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllMiscItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllMiscItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllMiscItems");

	Params::GzInventoryFunctionLibrary_GetAllMiscItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllWeapons
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllWeapons");

	Params::GzInventoryFunctionLibrary_GetAllWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetAllWeaponsByRarity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGzItemRarity                           WeaponRarity                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetAllWeaponsByRarity(EGzItemRarity WeaponRarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetAllWeaponsByRarity");

	Params::GzInventoryFunctionLibrary_GetAllWeaponsByRarity Parms{};

	Parms.WeaponRarity = WeaponRarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetCyberLimbs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetCyberLimbs(EGzLimbType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetCyberLimbs");

	Params::GzInventoryFunctionLibrary_GetCyberLimbs Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetCyberLimbsByRarity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGzLimbType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzItemRarity                           LimbRarity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetCyberLimbsByRarity(EGzLimbType Type, EGzItemRarity LimbRarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetCyberLimbsByRarity");

	Params::GzInventoryFunctionLibrary_GetCyberLimbsByRarity Parms{};

	Parms.Type = Type;
	Parms.LimbRarity = LimbRarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetSuitableWeaponAttachmentsOfType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGzWeaponActor*                   WeaponActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzWeaponAttachmentType                 AttachmentType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetSuitableWeaponAttachmentsOfType(class AGzWeaponActor* WeaponActor, EGzWeaponAttachmentType AttachmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetSuitableWeaponAttachmentsOfType");

	Params::GzInventoryFunctionLibrary_GetSuitableWeaponAttachmentsOfType Parms{};

	Parms.WeaponActor = WeaponActor;
	Parms.AttachmentType = AttachmentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.GetSuitableWeaponAttachmentsOfTypeFromItemData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzWeaponAttachmentType                 AttachmentType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzInventoryFunctionLibrary::GetSuitableWeaponAttachmentsOfTypeFromItemData(class UGzWeaponItemData* WeaponItemData, EGzWeaponAttachmentType AttachmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "GetSuitableWeaponAttachmentsOfTypeFromItemData");

	Params::GzInventoryFunctionLibrary_GetSuitableWeaponAttachmentsOfTypeFromItemData Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentType = AttachmentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzInventoryFunctionLibrary.MatchItemContentToType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzInventoryItemContent          ItemContent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzInventoryFunctionLibrary::MatchItemContentToType(const struct FGzInventoryItemContent& ItemContent, const struct FGameplayTag& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzInventoryFunctionLibrary", "MatchItemContentToType");

	Params::GzInventoryFunctionLibrary_MatchItemContentToType Parms{};

	Parms.ItemContent = std::move(ItemContent);
	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbDoubleAbilityComponent.SetCurrentSecondaryCharges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbDoubleAbilityComponent::SetCurrentSecondaryCharges(float Current)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "SetCurrentSecondaryCharges");

	Params::GzLimbDoubleAbilityComponent_SetCurrentSecondaryCharges Parms{};

	Parms.Current = Current;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbDoubleAbilityComponent.SetSecondaryChargesAvailable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAvailable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbDoubleAbilityComponent::SetSecondaryChargesAvailable(bool bAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "SetSecondaryChargesAvailable");

	Params::GzLimbDoubleAbilityComponent_SetSecondaryChargesAvailable Parms{};

	Parms.bAvailable = bAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbDoubleAbilityComponent.GetCurrentSecondaryCharges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbDoubleAbilityComponent::GetCurrentSecondaryCharges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "GetCurrentSecondaryCharges");

	Params::GzLimbDoubleAbilityComponent_GetCurrentSecondaryCharges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbDoubleAbilityComponent.GetMaxSecondaryCharges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbDoubleAbilityComponent::GetMaxSecondaryCharges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "GetMaxSecondaryCharges");

	Params::GzLimbDoubleAbilityComponent_GetMaxSecondaryCharges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbDoubleAbilityComponent.GetSecondaryChargeDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzLimbDoubleAbilityComponent::GetSecondaryChargeDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "GetSecondaryChargeDuration");

	Params::GzLimbDoubleAbilityComponent_GetSecondaryChargeDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbDoubleAbilityComponent.GetSecondaryChargesAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLimbDoubleAbilityComponent::GetSecondaryChargesAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbDoubleAbilityComponent", "GetSecondaryChargesAvailable");

	Params::GzLimbDoubleAbilityComponent_GetSecondaryChargesAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_CloakArm.ParseGadgetSpawnData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzMultiPartCharacter*            Character                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              SpawnLocation                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              TargetLocation                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_CloakArm::ParseGadgetSpawnData(const struct FGameplayAbilityTargetDataHandle& TargetData, class AGzMultiPartCharacter** Character, struct FVector_NetQuantize* SpawnLocation, struct FVector_NetQuantize* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_CloakArm", "ParseGadgetSpawnData");

	Params::GzGA_CloakArm_ParseGadgetSpawnData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Character != nullptr)
		*Character = Parms.Character;

	if (SpawnLocation != nullptr)
		*SpawnLocation = std::move(Parms.SpawnLocation);

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function G01.GzGA_CloakArm.SendGadgetSpawnData
// (Final, Native, Public, BlueprintCallable)

void UGzGA_CloakArm::SendGadgetSpawnData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_CloakArm", "SendGadgetSpawnData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutSelectionButton.OnInitialized_BP
// (Event, Public, BlueprintEvent)

void UGzLoadoutSelectionButton::OnInitialized_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionButton", "OnInitialized_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutSelectionButton.Refresh
// (Event, Public, BlueprintEvent)

void UGzLoadoutSelectionButton::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionButton", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzLoadoutSelectionButton.GetIsRandomLoadout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutSelectionButton::GetIsRandomLoadout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionButton", "GetIsRandomLoadout");

	Params::GzLoadoutSelectionButton_GetIsRandomLoadout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutSelectionButton.GetLoadoutData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzLoadoutDataConfig       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FGzLoadoutDataConfig UGzLoadoutSelectionButton::GetLoadoutData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionButton", "GetLoadoutData");

	Params::GzLoadoutSelectionButton_GetLoadoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutSelectionButton.GetShowLoadoutPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutSelectionButton::GetShowLoadoutPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutSelectionButton", "GetShowLoadoutPrice");

	Params::GzLoadoutSelectionButton_GetShowLoadoutPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetDistanceAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrack::GetDistanceAt(const int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetDistanceAt");

	Params::GzTrack_GetDistanceAt Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetDistanceAtTrackPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TrackPointIndex                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrack::GetDistanceAtTrackPoint(const int32 TrackPointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetDistanceAtTrackPoint");

	Params::GzTrack_GetDistanceAtTrackPoint Parms{};

	Parms.TrackPointIndex = TrackPointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetLoopLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrack::GetLoopLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetLoopLength");

	Params::GzTrack_GetLoopLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetTrackLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzTrack::GetTrackLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetTrackLength");

	Params::GzTrack_GetTrackLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetTrackStop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StopIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzTrackStop               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzTrackStop AGzTrack::GetTrackStop(const int32 StopIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetTrackStop");

	Params::GzTrack_GetTrackStop Parms{};

	Parms.StopIndex = StopIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrack.GetTrackStopsCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTrack::GetTrackStopsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrack", "GetTrackStopsCount");

	Params::GzTrack_GetTrackStopsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_ConsumeHold.GetCurrentHoldProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzGA_ConsumeHold::GetCurrentHoldProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ConsumeHold", "GetCurrentHoldProgress");

	Params::GzGA_ConsumeHold_GetCurrentHoldProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Crouch.OnUncrouchEvent
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               TriggerEventData                                       (Parm, NativeAccessSpecifierPublic)

void UGzGA_Crouch::OnUncrouchEvent(const struct FGameplayEventData& TriggerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Crouch", "OnUncrouchEvent");

	Params::GzGA_Crouch_OnUncrouchEvent Parms{};

	Parms.TriggerEventData = std::move(TriggerEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnCancelEvent
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               EventData                                              (Parm, NativeAccessSpecifierPublic)

void UGzGA_Dash::OnCancelEvent(const struct FGameplayEventData& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnCancelEvent");

	Params::GzGA_Dash_OnCancelEvent Parms{};

	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnDashFinished
// (Final, Native, Protected, HasDefaults)
// Parameters:
// bool                                    DestinationReached                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TimedOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          FinalTargetLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Dash::OnDashFinished(bool DestinationReached, bool TimedOut, const struct FVector& FinalTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnDashFinished");

	Params::GzGA_Dash_OnDashFinished Parms{};

	Parms.DestinationReached = DestinationReached;
	Parms.TimedOut = TimedOut;
	Parms.FinalTargetLocation = std::move(FinalTargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnDashHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_Dash::OnDashHit(class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnDashHit");

	Params::GzGA_Dash_OnDashHit Parms{};

	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnDashHitCharacter
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AGzMultiPartCharacter*            HitCharacter                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_Dash::OnDashHitCharacter(class AGzMultiPartCharacter* HitCharacter, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnDashHitCharacter");

	Params::GzGA_Dash_OnDashHitCharacter Parms{};

	Parms.HitCharacter = HitCharacter;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnDashTriggerDistanceReached
// (Final, Native, Protected)

void UGzGA_Dash::OnDashTriggerDistanceReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnDashTriggerDistanceReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Dash.OnExtraCollisionBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_Dash::OnExtraCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Dash", "OnExtraCollisionBeginOverlap");

	Params::GzGA_Dash_OnExtraCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractionTooltip.OnFocusChange
// (Final, Native, Protected)
// Parameters:
// class UGzInteractableComponent*         Interactable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInInteractionRange                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractionTooltip::OnFocusChange(class UGzInteractableComponent* Interactable, bool bInInteractionRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionTooltip", "OnFocusChange");

	Params::GzInteractionTooltip_OnFocusChange Parms{};

	Parms.Interactable = Interactable;
	Parms.bInInteractionRange = bInInteractionRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractionTooltip.OnFocusChange_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzInteractableComponent*         Interactable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFocused                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractionTooltip::OnFocusChange_BP(class UGzInteractableComponent* Interactable, bool bFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionTooltip", "OnFocusChange_BP");

	Params::GzInteractionTooltip_OnFocusChange_BP Parms{};

	Parms.Interactable = Interactable;
	Parms.bFocused = bFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzInteractionTooltip.OnFollowFocusable_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShouldFollow                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractionTooltip::OnFollowFocusable_BP(bool bShouldFollow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionTooltip", "OnFollowFocusable_BP");

	Params::GzInteractionTooltip_OnFollowFocusable_BP Parms{};

	Parms.bShouldFollow = bShouldFollow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzInteractionTooltip.SetFollowFocusable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldFollow                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractionTooltip::SetFollowFocusable(bool bShouldFollow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionTooltip", "SetFollowFocusable");

	Params::GzInteractionTooltip_SetFollowFocusable Parms{};

	Parms.bShouldFollow = bShouldFollow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractionTooltip.SetTooltipOffset
// (Native, Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzInteractionTooltip::SetTooltipOffset(const struct FVector& InOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionTooltip", "SetTooltipOffset");

	Params::GzInteractionTooltip_SetTooltipOffset Parms{};

	Parms.InOffset = std::move(InOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Emotion.OnCancelEmotePressed
// (Final, Native, Protected)
// Parameters:
// float                                   WaitTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Emotion::OnCancelEmotePressed(float WaitTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Emotion", "OnCancelEmotePressed");

	Params::GzGA_Emotion_OnCancelEmotePressed Parms{};

	Parms.WaitTime = WaitTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Equip.OnTaskEvent
// (Final, Native, Private)
// Parameters:
// class UGzAbilityTaskBase*               AbilityTask                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Equip::OnTaskEvent(class UGzAbilityTaskBase* AbilityTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Equip", "OnTaskEvent");

	Params::GzGA_Equip_OnTaskEvent Parms{};

	Parms.AbilityTask = AbilityTask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.BP_OnDashEnded
// (Event, Protected, BlueprintEvent)

void UGzGA_GorillaArm::BP_OnDashEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "BP_OnDashEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_GorillaArm.BP_OnDashStarted
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_GorillaArm::BP_OnDashStarted(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "BP_OnDashStarted");

	Params::GzGA_GorillaArm_BP_OnDashStarted Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_GorillaArm.BP_OnMaxChargeReached
// (Event, Protected, BlueprintEvent)

void UGzGA_GorillaArm::BP_OnMaxChargeReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "BP_OnMaxChargeReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_GorillaArm.BP_OnPunch
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_GorillaArm::BP_OnPunch(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "BP_OnPunch");

	Params::GzGA_GorillaArm_BP_OnPunch Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGA_GorillaArm.OnChargeStopped
// (Final, Native, Protected)

void UGzGA_GorillaArm::OnChargeStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnChargeStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.OnDashEvent
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_GorillaArm::OnDashEvent(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnDashEvent");

	Params::GzGA_GorillaArm_OnDashEvent Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.OnDashFinished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_GorillaArm::OnDashFinished(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnDashFinished");

	Params::GzGA_GorillaArm_OnDashFinished Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.OnPunchAnimEnded
// (Final, Native, Protected)

void UGzGA_GorillaArm::OnPunchAnimEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnPunchAnimEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.OnPunchAnimNotify
// (Final, Native, Protected)

void UGzGA_GorillaArm::OnPunchAnimNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnPunchAnimNotify");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.OnServerPunchTimeOut
// (Final, Native, Protected)

void UGzGA_GorillaArm::OnServerPunchTimeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "OnServerPunchTimeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GorillaArm.ServerHandleClientPunchTargetData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_GorillaArm::ServerHandleClientPunchTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GorillaArm", "ServerHandleClientPunchTargetData");

	Params::GzGA_GorillaArm_ServerHandleClientPunchTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHook.OnMontageInterupted
// (Final, Native, Protected)

void UGzGA_GrappleHook::OnMontageInterupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHook", "OnMontageInterupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHook.OnPullCharacterAnimationNotification
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_GrappleHook::OnPullCharacterAnimationNotification(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHook", "OnPullCharacterAnimationNotification");

	Params::GzGA_GrappleHook_OnPullCharacterAnimationNotification Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHook.OnThrowAnimationNotification
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_GrappleHook::OnThrowAnimationNotification(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHook", "OnThrowAnimationNotification");

	Params::GzGA_GrappleHook_OnThrowAnimationNotification Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHook.IsTargetInRange
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_GrappleHook::IsTargetInRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHook", "IsTargetInRange");

	Params::GzGA_GrappleHook_IsTargetInRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_GrappleHookEnemy.OnCancelInputReleased
// (Final, Native, Protected)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_GrappleHookEnemy::OnCancelInputReleased(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHookEnemy", "OnCancelInputReleased");

	Params::GzGA_GrappleHookEnemy_OnCancelInputReleased Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHookEnemy.OnMaxActivationTimeReached
// (Final, Native, Protected)

void UGzGA_GrappleHookEnemy::OnMaxActivationTimeReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHookEnemy", "OnMaxActivationTimeReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHookEnemy.OnMinActivationTimeReached
// (Final, Native, Protected)

void UGzGA_GrappleHookEnemy::OnMinActivationTimeReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHookEnemy", "OnMinActivationTimeReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrappleHookEnemy.OnPullEnded
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_GrappleHookEnemy::OnPullEnded(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrappleHookEnemy", "OnPullEnded");

	Params::GzGA_GrappleHookEnemy_OnPullEnded Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.OnArrivedToGrappling
// (Final, Native, Protected)

void UGzGA_GrapplePull::OnArrivedToGrappling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "OnArrivedToGrappling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.OnCancelInputReleased
// (Final, Native, Protected)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_GrapplePull::OnCancelInputReleased(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "OnCancelInputReleased");

	Params::GzGA_GrapplePull_OnCancelInputReleased Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.OnHookReturned
// (Final, Native, Protected)

void UGzGA_GrapplePull::OnHookReturned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "OnHookReturned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.OnMinActivationTimeReached
// (Final, Native, Protected)

void UGzGA_GrapplePull::OnMinActivationTimeReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "OnMinActivationTimeReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.OnTimeoutReached
// (Final, Native, Protected)

void UGzGA_GrapplePull::OnTimeoutReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "OnTimeoutReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_GrapplePull.WaitNetSyncHookReturn
// (Final, Native, Protected)

void UGzGA_GrapplePull::WaitNetSyncHookReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_GrapplePull", "WaitNetSyncHookReturn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_HexInsertion.OnAnimNotifyReceived
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_HexInsertion::OnAnimNotifyReceived(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_HexInsertion", "OnAnimNotifyReceived");

	Params::GzGA_HexInsertion_OnAnimNotifyReceived Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_HexInsertion.StartPlayMontageAbilityTask
// (Final, Native, Protected)

void UGzGA_HexInsertion::StartPlayMontageAbilityTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_HexInsertion", "StartPlayMontageAbilityTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.OnConnectionChanged
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerState*                   InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Interact::OnConnectionChanged(class AGzPlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "OnConnectionChanged");

	Params::GzGA_Interact_OnConnectionChanged Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.OnInteractionComplete
// (Final, Native, Private)

void UGzGA_Interact::OnInteractionComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "OnInteractionComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.OnInteractionStageFinished
// (Final, Native, Public)

void UGzGA_Interact::OnInteractionStageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "OnInteractionStageFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.OnMontageNotify
// (Final, Native, Protected)
// Parameters:
// class FName                             NotifyName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Interact::OnMontageNotify(const class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "OnMontageNotify");

	Params::GzGA_Interact_OnMontageNotify Parms{};

	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.ProcessInteractionStages
// (Final, Native, Protected)

void UGzGA_Interact::ProcessInteractionStages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "ProcessInteractionStages");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.StartInteraction
// (Final, Native, Protected)

void UGzGA_Interact::StartInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "StartInteraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Interact.TryStartTransitionToInteractable
// (Final, Native, Protected)

void UGzGA_Interact::TryStartTransitionToInteractable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Interact", "TryStartTransitionToInteractable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_JumpBoost.OnCharacterHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzGA_JumpBoost::OnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_JumpBoost", "OnCharacterHit");

	Params::GzGA_JumpBoost_OnCharacterHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_JumpBoost.OnMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_JumpBoost::OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_JumpBoost", "OnMovementModeChanged");

	Params::GzGA_JumpBoost_OnMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_JumpBoost.UpdateNotifyApex
// (Final, Native, Protected)

void UGzGA_JumpBoost::UpdateNotifyApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_JumpBoost", "UpdateNotifyApex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KatanaArm.OnAttackStart
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_KatanaArm::OnAttackStart(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KatanaArm", "OnAttackStart");

	Params::GzGA_KatanaArm_OnAttackStart Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KatanaArm.OnAttackTimeout
// (Final, Native, Protected)

void UGzGA_KatanaArm::OnAttackTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KatanaArm", "OnAttackTimeout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KatanaArm.OnDashEvent
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_KatanaArm::OnDashEvent(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KatanaArm", "OnDashEvent");

	Params::GzGA_KatanaArm_OnDashEvent Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KatanaArm.OnDashFinished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_KatanaArm::OnDashFinished(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KatanaArm", "OnDashFinished");

	Params::GzGA_KatanaArm_OnDashFinished Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KatanaArm.ReceiveTargetData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_KatanaArm::ReceiveTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KatanaArm", "ReceiveTargetData");

	Params::GzGA_KatanaArm_ReceiveTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUDRuntimeSettings.ApplySettings
// (Final, Native, Public, BlueprintCallable)

void UGzHUDRuntimeSettings::ApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUDRuntimeSettings", "ApplySettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KineticShield.ApplyBlastDamage
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       TargetHitResult                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzGA_KineticShield::ApplyBlastDamage(const struct FHitResult& TargetHitResult, const float DamageAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KineticShield", "ApplyBlastDamage");

	Params::GzGA_KineticShield_ApplyBlastDamage Parms{};

	Parms.TargetHitResult = std::move(TargetHitResult);
	Parms.DamageAmount = DamageAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_KneeSlide.OnMontageEnded
// (Final, Native, Private)

void UGzGA_KneeSlide::OnMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KneeSlide", "OnMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_KneeSlide.OnMontageInterrupted
// (Final, Native, Private)

void UGzGA_KneeSlide::OnMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_KneeSlide", "OnMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjectInteractionBehavior.RegisterObjective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzObjective*                     Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjectInteractionBehavior::RegisterObjective(class UGzObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjectInteractionBehavior", "RegisterObjective");

	Params::GzMissionObjectInteractionBehavior_RegisterObjective Parms{};

	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjectInteractionBehavior.UnregisterObjective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzObjective*                     Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjectInteractionBehavior::UnregisterObjective(class UGzObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjectInteractionBehavior", "UnregisterObjective");

	Params::GzMissionObjectInteractionBehavior_UnregisterObjective Parms{};

	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileAttackStrategy.NotifyAttack
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UGzProjectileAttackStrategy::NotifyAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileAttackStrategy", "NotifyAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileAttackStrategy.ProcessAttackRequest
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ShotID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileAttackStrategy::ProcessAttackRequest(const struct FVector& Location, const struct FVector& Direction, uint8 ShotID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileAttackStrategy", "ProcessAttackRequest");

	Params::GzProjectileAttackStrategy_ProcessAttackRequest Parms{};

	Parms.Location = std::move(Location);
	Parms.Direction = std::move(Direction);
	Parms.ShotID = ShotID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_LimbPassive.ReadAbilityConfig
// (Native, Event, Protected, BlueprintEvent)

void UGzGA_LimbPassive::ReadAbilityConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_LimbPassive", "ReadAbilityConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_LimbPassive.GetAbilityData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzBodyPartAbilityData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzBodyPartAbilityData* UGzGA_LimbPassive::GetAbilityData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_LimbPassive", "GetAbilityData");

	Params::GzGA_LimbPassive_GetAbilityData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_Mantle.OnCancelPressed
// (Final, Native, Public)

void UGzGA_Mantle::OnCancelPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Mantle", "OnCancelPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_Mantle.UpdateTick
// (Final, Native, Public)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_Mantle::UpdateTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_Mantle", "UpdateTick");

	Params::GzGA_Mantle_UpdateTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponPickable.GetWeaponItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzWeaponInvItem           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzWeaponInvItem AGzWeaponPickable::GetWeaponItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPickable", "GetWeaponItem");

	Params::GzWeaponPickable_GetWeaponItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_SpiderMine.ActivationAfterDelay
// (Final, Native, Private)

void UGzGA_SpiderMine::ActivationAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "ActivationAfterDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SpiderMine.AssignOnFinish
// (Event, Protected, BlueprintEvent)

void UGzGA_SpiderMine::AssignOnFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "AssignOnFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SpiderMine.GetHandTransform
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzGA_SpiderMine::GetHandTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "GetHandTransform");

	Params::GzGA_SpiderMine_GetHandTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzGA_SpiderMine.OnMineInputRelease
// (Final, Native, Private)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_SpiderMine::OnMineInputRelease(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "OnMineInputRelease");

	Params::GzGA_SpiderMine_OnMineInputRelease Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SpiderMine.OnMineShootRequested
// (Event, Protected, BlueprintEvent)

void UGzGA_SpiderMine::OnMineShootRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "OnMineShootRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzGA_SpiderMine.OnReceiveTargetLocationOnServer
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetDataHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_SpiderMine::OnReceiveTargetLocationOnServer(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "OnReceiveTargetLocationOnServer");

	Params::GzGA_SpiderMine_OnReceiveTargetLocationOnServer Parms{};

	Parms.TargetDataHandle = std::move(TargetDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SpiderMine.SpawnMine
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzSpiderMine_SpawnInfo          SpawnInfo                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AGzSpiderMine*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSpiderMine* UGzGA_SpiderMine::SpawnMine(const struct FTransform& Transform, const struct FGzSpiderMine_SpawnInfo& SpawnInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SpiderMine", "SpawnMine");

	Params::GzGA_SpiderMine_SpawnMine Parms{};

	Parms.Transform = std::move(Transform);
	Parms.SpawnInfo = std::move(SpawnInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzGA_SuperSprint_Sprint.OnAssetsLoaded
// (Final, Native, Protected)

void UGzGA_SuperSprint_Sprint::OnAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint_Sprint", "OnAssetsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SuperSprint_Sprint.OnSprintConditionFailed
// (Final, Native, Protected)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UGzGA_SuperSprint_Sprint::OnSprintConditionFailed(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SuperSprint_Sprint", "OnSprintConditionFailed");

	Params::GzGA_SuperSprint_Sprint_OnSprintConditionFailed Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SwapLimb.Detach
// (Final, Native, Private)

void UGzGA_SwapLimb::Detach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SwapLimb", "Detach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SwapLimb.InitiateCancelByPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UGzGA_SwapLimb::InitiateCancelByPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SwapLimb", "InitiateCancelByPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SwapLimb.LimbSwitchedMessage
// (Final, Native, Protected, Const)

void UGzGA_SwapLimb::LimbSwitchedMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SwapLimb", "LimbSwitchedMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_SwapLimb.RecallCancelByPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UGzGA_SwapLimb::RecallCancelByPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_SwapLimb", "RecallCancelByPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ThrowableShield.HandleAbilityInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ThrowableShield::HandleAbilityInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ThrowableShield", "HandleAbilityInputPressed");

	Params::GzGA_ThrowableShield_HandleAbilityInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ThrowableShield.HandleLaunchInputPressed
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ThrowableShield::HandleLaunchInputPressed(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ThrowableShield", "HandleLaunchInputPressed");

	Params::GzGA_ThrowableShield_HandleLaunchInputPressed Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ThrowableShield.HandleLaunchInputReleased
// (Final, Native, Protected)
// Parameters:
// float                                   TimeHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGA_ThrowableShield::HandleLaunchInputReleased(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ThrowableShield", "HandleLaunchInputReleased");

	Params::GzGA_ThrowableShield_HandleLaunchInputReleased Parms{};

	Parms.TimeHeld = TimeHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGA_ThrowableShield.ReceiveClientTargetData
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzGA_ThrowableShield::ReceiveClientTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGA_ThrowableShield", "ReceiveClientTargetData");

	Params::GzGA_ThrowableShield_ReceiveClientTargetData Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGenericCharacter.OnDeath
// (Native, Event, Public, BlueprintEvent)

void AGzGenericCharacter::OnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGenericCharacter", "OnDeath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzGenericCharacter.OnHealthChange
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzGenericCharacter::OnHealthChange(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGenericCharacter", "OnHealthChange");

	Params::GzGenericCharacter_OnHealthChange Parms{};

	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzGridOverloadStatCollector.OnOverloadActivated
// (Final, Native, Private)
// Parameters:
// bool                                    bActivated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzGridOverloadStatCollector::OnOverloadActivated(bool bActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzGridOverloadStatCollector", "OnOverloadActivated");

	Params::GzGridOverloadStatCollector_OnOverloadActivated Parms{};

	Parms.bActivated = bActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXR_MatchInProgressStage.OnTeamAliveStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXR_MatchInProgressStage::OnTeamAliveStateChanged(class AGzTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXR_MatchInProgressStage", "OnTeamAliveStateChanged");

	Params::GzXR_MatchInProgressStage_OnTeamAliveStateChanged Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXR_MatchInProgressStage.OnTeamChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrevTeamID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewTeamId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXR_MatchInProgressStage::OnTeamChanged(class AGzPlayerState* PlayerState, int32 PrevTeamID, int32 NewTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXR_MatchInProgressStage", "OnTeamChanged");

	Params::GzXR_MatchInProgressStage_OnTeamChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.PrevTeamID = PrevTeamID;
	Parms.NewTeamId = NewTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzXR_MatchInProgressStage.SetupInitialAutoRedeploy
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzXR_MatchInProgressStage::SetupInitialAutoRedeploy(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXR_MatchInProgressStage", "SetupInitialAutoRedeploy");

	Params::GzXR_MatchInProgressStage_SetupInitialAutoRedeploy Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTetherLink.ApplySlowEffect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          TargetASC                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTetherLink::ApplySlowEffect(class UAbilitySystemComponent* TargetASC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTetherLink", "ApplySlowEffect");

	Params::GzTetherLink_ApplySlowEffect Parms{};

	Parms.TargetASC = TargetASC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTetherLink.ApplyTrapDamage
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          TargetASC                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExplosionOrigin                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTetherLink::ApplyTrapDamage(class UAbilitySystemComponent* TargetASC, const struct FVector& ExplosionOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTetherLink", "ApplyTrapDamage");

	Params::GzTetherLink_ApplyTrapDamage Parms{};

	Parms.TargetASC = TargetASC;
	Parms.ExplosionOrigin = std::move(ExplosionOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitmark.Play
// (Native, Event, Public, BlueprintEvent)

void UGzHitmark::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitmark", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitmark.GetDisplayAnimation
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UGzHitmark::GetDisplayAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitmark", "GetDisplayAnimation");

	Params::GzHitmark_GetDisplayAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHitmarkContainer.NotifyHitResponse
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGzHitResponseData               HitResponseData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzHitmarkContainer::NotifyHitResponse(const struct FGzHitResponseData& HitResponseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitmarkContainer", "NotifyHitResponse");

	Params::GzHitmarkContainer_NotifyHitResponse Parms{};

	Parms.HitResponseData = std::move(HitResponseData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitScanAttackStrategy.ClientProcessValidationInfo
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// struct FGzHitValidationInfo             ValidationInfo                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzHitScanAttackStrategy::ClientProcessValidationInfo(const struct FGzHitValidationInfo& ValidationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitScanAttackStrategy", "ClientProcessValidationInfo");

	Params::GzHitScanAttackStrategy_ClientProcessValidationInfo Parms{};

	Parms.ValidationInfo = std::move(ValidationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitScanAttackStrategy.NotifyAttack
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          SpawnLocation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SpawnRotation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzShootNotificationInfo         NotificationInfo                                       (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzHitScanAttackStrategy::NotifyAttack(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FGzShootNotificationInfo& NotificationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitScanAttackStrategy", "NotifyAttack");

	Params::GzHitScanAttackStrategy_NotifyAttack Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.NotificationInfo = std::move(NotificationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHitScanAttackStrategy.ServerProcessAttackRequest
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          SpawnLocation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SpawnRotation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzHitReport                     HitReport                                              (ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzHitScanAttackStrategy::ServerProcessAttackRequest(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FGzHitReport& HitReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHitScanAttackStrategy", "ServerProcessAttackRequest");

	Params::GzHitScanAttackStrategy_ServerProcessAttackRequest Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.HitReport = std::move(HitReport);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUD.AddWidget
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     WidgetId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AGzHUD::AddWidget(TSubclassOf<class UUserWidget> WidgetClass, const struct FGameplayTag& WidgetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUD", "AddWidget");

	Params::GzHUD_AddWidget Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.WidgetId = std::move(WidgetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHUD.EnableCohtmlInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFocus                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzHUD::EnableCohtmlInput(bool bFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUD", "EnableCohtmlInput");

	Params::GzHUD_EnableCohtmlInput Parms{};

	Parms.bFocus = bFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzHUD.RemoveWidget
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     WidgetId                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUD::RemoveWidget(const struct FGameplayTag& WidgetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUD", "RemoveWidget");

	Params::GzHUD_RemoveWidget Parms{};

	Parms.WidgetId = std::move(WidgetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzHUD.ToggleCohtmlUIVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFocus                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzHUD::ToggleCohtmlUIVisibility(bool bFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzHUD", "ToggleCohtmlUIVisibility");

	Params::GzHUD_ToggleCohtmlUIVisibility Parms{};

	Parms.bFocus = bFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzInteractionDataInterface.GetCurrentInteractionInfo
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     InteractedBy                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInteractionInfo>       InteractionInfoArray                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameplayTag                     OutInteractionTag                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInteractionData               OutInteractionData                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzInteractionDataInterface::GetCurrentInteractionInfo(const class AGzCharacter* InteractedBy, const TArray<struct FGzInteractionInfo>& InteractionInfoArray, struct FGameplayTag* OutInteractionTag, struct FGzInteractionData* OutInteractionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzInteractionDataInterface", "GetCurrentInteractionInfo");

	Params::GzInteractionDataInterface_GetCurrentInteractionInfo Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.InteractionInfoArray = std::move(InteractionInfoArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInteractionTag != nullptr)
		*OutInteractionTag = std::move(Parms.OutInteractionTag);

	if (OutInteractionData != nullptr)
		*OutInteractionData = std::move(Parms.OutInteractionData);

	return Parms.ReturnValue;
}


// Function G01.GzSymbolEncodeWidget.SetHexString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSymbolEncodeWidget::SetHexString(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSymbolEncodeWidget", "SetHexString");

	Params::GzSymbolEncodeWidget_SetHexString Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWorldSettings.GetLayerWorldZones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UGzWorldZone*>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UGzWorldZone*> AGzWorldSettings::GetLayerWorldZones(class FName Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldSettings", "GetLayerWorldZones");

	Params::GzWorldSettings_GetLayerWorldZones Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzJobZeroCheatManager.EndPostMatch
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzJobZeroCheatManager::EndPostMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroCheatManager", "EndPostMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJobZeroCheatManager.ForceLoseMatch
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzJobZeroCheatManager::ForceLoseMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroCheatManager", "ForceLoseMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJobZeroCheatManager.ForceWinMatch
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzJobZeroCheatManager::ForceWinMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroCheatManager", "ForceWinMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzJobZeroCheatManager.StartMatch
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UGzJobZeroCheatManager::StartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzJobZeroCheatManager", "StartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWorldZonesSubsystem.GetNumActorsInWorldZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           Param_Class                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzWorldZone*                     InZone                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWorldZonesSubsystem::GetNumActorsInWorldZone(class UClass* Param_Class, class UGzWorldZone* InZone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "GetNumActorsInWorldZone");

	Params::GzWorldZonesSubsystem_GetNumActorsInWorldZone Parms{};

	Parms.Param_Class = Param_Class;
	Parms.InZone = InZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZonesSubsystem.GetWorldZoneNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzWorldZonesSubsystem::GetWorldZoneNames(class FName Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "GetWorldZoneNames");

	Params::GzWorldZonesSubsystem_GetWorldZoneNames Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZonesSubsystem.GetZoneByPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGzWorldZone*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWorldZone* UGzWorldZonesSubsystem::GetZoneByPosition(class FName Layer, const struct FVector2D& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "GetZoneByPosition");

	Params::GzWorldZonesSubsystem_GetZoneByPosition Parms{};

	Parms.Layer = Layer;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZonesSubsystem.GetZoneDisplayName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGzWorldZonesSubsystem::GetZoneDisplayName(class FName Layer, const struct FVector& Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "GetZoneDisplayName");

	Params::GzWorldZonesSubsystem_GetZoneDisplayName Parms{};

	Parms.Layer = Layer;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZonesSubsystem.GetZoneName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzWorldZonesSubsystem::GetZoneName(class FName Layer, const struct FVector& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "GetZoneName");

	Params::GzWorldZonesSubsystem_GetZoneName Parms{};

	Parms.Layer = Layer;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZonesSubsystem.HasWorldZone
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Param_Name                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWorldZonesSubsystem::HasWorldZone(const class FName& Layer, const class FName& Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZonesSubsystem", "HasWorldZone");

	Params::GzWorldZonesSubsystem_HasWorldZone Parms{};

	Parms.Layer = Layer;
	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsSubsystem.NotifyNewCollectionStage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EGzGameStatCollectionStage              NewCollectionStage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzStatsSubsystem::NotifyNewCollectionStage(EGzGameStatCollectionStage NewCollectionStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "NotifyNewCollectionStage");

	Params::GzStatsSubsystem_NotifyNewCollectionStage Parms{};

	Parms.NewCollectionStage = NewCollectionStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStatsSubsystem.ResetStats
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGzStatsSubsystem::ResetStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "ResetStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStatsSubsystem.GetAllPlayerStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGzGameStat>        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGzGameStat> UGzStatsSubsystem::GetAllPlayerStats(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "GetAllPlayerStats");

	Params::GzStatsSubsystem_GetAllPlayerStats Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsSubsystem.GetStatTemplates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UGzGameStatTemplate*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UGzGameStatTemplate*> UGzStatsSubsystem::GetStatTemplates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "GetStatTemplates");

	Params::GzStatsSubsystem_GetStatTemplates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsSubsystem.GetStatValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzStatsSubsystem::GetStatValue(int32 PlayerId, const class FName& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "GetStatValue");

	Params::GzStatsSubsystem_GetStatValue Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsSubsystem.HasPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStatsSubsystem::HasPlayer(const int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "HasPlayer");

	Params::GzStatsSubsystem_HasPlayer Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsSubsystem.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzStatsSubsystem::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsSubsystem", "IsInitialized");

	Params::GzStatsSubsystem_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbAttachingReplica.CancelAttaching
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGzLimbAttachingReplica::CancelAttaching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAttachingReplica", "CancelAttaching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbAttachingReplica.StartAttaching
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AGzMultiPartCharacter*            InCharacter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzBodyPartItemData*              InBodyPartItemData                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbAttachingParams           Params_0                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AGzLimbPickable*                  Pickable                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzLimbAttachingReplica::StartAttaching(class AGzMultiPartCharacter* InCharacter, const class UGzBodyPartItemData* InBodyPartItemData, const struct FGzLimbAttachingParams& Params_0, const class AGzLimbPickable* Pickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbAttachingReplica", "StartAttaching");

	Params::GzLimbAttachingReplica_StartAttaching Parms{};

	Parms.InCharacter = InCharacter;
	Parms.InBodyPartItemData = InBodyPartItemData;
	Parms.Params_0 = std::move(Params_0);
	Parms.Pickable = Pickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbCrosshair.OnLimbActivated
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbGaugeData                 GaugeData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzLimbCrosshair::OnLimbActivated(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbCrosshair", "OnLimbActivated");

	Params::GzLimbCrosshair_OnLimbActivated Parms{};

	Parms.LimbType = LimbType;
	Parms.GaugeData = std::move(GaugeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbCrosshair.OnLimbActivationEnded
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbCrosshair::OnLimbActivationEnded(EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbCrosshair", "OnLimbActivationEnded");

	Params::GzLimbCrosshair_OnLimbActivationEnded Parms{};

	Parms.LimbType = LimbType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbCrosshair.OnLimbActivationReachedFinalValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbGaugeData                 GaugeData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzLimbCrosshair::OnLimbActivationReachedFinalValue(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbCrosshair", "OnLimbActivationReachedFinalValue");

	Params::GzLimbCrosshair_OnLimbActivationReachedFinalValue Parms{};

	Parms.LimbType = LimbType;
	Parms.GaugeData = std::move(GaugeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbCrosshair.OnLimbActivationUpdate
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbType                             LimbType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLimbGaugeData                 GaugeData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzLimbCrosshair::OnLimbActivationUpdate(EGzLimbType LimbType, const struct FGzLimbGaugeData& GaugeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbCrosshair", "OnLimbActivationUpdate");

	Params::GzLimbCrosshair_OnLimbActivationUpdate Parms{};

	Parms.LimbType = LimbType;
	Parms.GaugeData = std::move(GaugeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbGaugeWidget.NotifyReachedFinal
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbGaugeWidget::NotifyReachedFinal(float CurrentValue, float MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbGaugeWidget", "NotifyReachedFinal");

	Params::GzLimbGaugeWidget_NotifyReachedFinal Parms{};

	Parms.CurrentValue = CurrentValue;
	Parms.MaxValue = MaxValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbGaugeWidget.SetCurrentValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLimbGaugeWidget::SetCurrentValue(float CurrentValue, float MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbGaugeWidget", "SetCurrentValue");

	Params::GzLimbGaugeWidget_SetCurrentValue Parms{};

	Parms.CurrentValue = CurrentValue;
	Parms.MaxValue = MaxValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbPickable.OnPickedUp
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGzLimbPickable::OnPickedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "OnPickedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbPickable.OnRep_Health
// (Final, Native, Private)
// Parameters:
// float                                   OldHealth                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzLimbPickable::OnRep_Health(const float OldHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "OnRep_Health");

	Params::GzLimbPickable_OnRep_Health Parms{};

	Parms.OldHealth = OldHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbPickable.OnRep_LimbStatus
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzLimbStatusData                OldStatus                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzLimbPickable::OnRep_LimbStatus(const struct FGzLimbStatusData& OldStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "OnRep_LimbStatus");

	Params::GzLimbPickable_OnRep_LimbStatus Parms{};

	Parms.OldStatus = std::move(OldStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLimbPickable.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzLimbPickable::GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetHealth");

	Params::GzLimbPickable_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPickable.GetHealthNormalized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzLimbPickable::GetHealthNormalized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetHealthNormalized");

	Params::GzLimbPickable_GetHealthNormalized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPickable.GetHealthToAllowPickup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzLimbPickable::GetHealthToAllowPickup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetHealthToAllowPickup");

	Params::GzLimbPickable_GetHealthToAllowPickup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPickable.GetLimbStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzLimbStatusData          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzLimbStatusData AGzLimbPickable::GetLimbStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetLimbStatus");

	Params::GzLimbPickable_GetLimbStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPickable.GetLimbType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzLimbType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLimbType AGzLimbPickable::GetLimbType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetLimbType");

	Params::GzLimbPickable_GetLimbType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLimbPickable.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzLimbPickable::GetMaxHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLimbPickable", "GetMaxHealth");

	Params::GzLimbPickable_GetMaxHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzViewpointManager.GetViewpointNames
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGzViewpointManager::GetViewpointNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzViewpointManager", "GetViewpointNames");

	Params::GzViewpointManager_GetViewpointNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWaitSubsystem.WaitSubsystem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzGameModeSubsystem> Param_Class                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzWaitSubsystem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWaitSubsystem* UGzWaitSubsystem::WaitSubsystem(const class UObject* Param_WorldContextObject, const TSubclassOf<class AGzGameModeSubsystem> Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWaitSubsystem", "WaitSubsystem");

	Params::GzWaitSubsystem_WaitSubsystem Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWaitSubsystem.OnSubsystemReady
// (Final, Native, Private)
// Parameters:
// class AGzGameModeSubsystem*             Subsystem                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWaitSubsystem::OnSubsystemReady(class AGzGameModeSubsystem* Subsystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWaitSubsystem", "OnSubsystemReady");

	Params::GzWaitSubsystem_OnSubsystemReady Parms{};

	Parms.Subsystem = Subsystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutListMultiTab.OnTabAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzLoadoutListTab*                NewTab                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutListMultiTab::OnTabAdded(class UGzLoadoutListTab* NewTab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListMultiTab", "OnTabAdded");

	Params::GzLoadoutListMultiTab_OnTabAdded Parms{};

	Parms.NewTab = NewTab;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutListMultiTab.OnTabSelected
// (Final, Native, Protected)
// Parameters:
// class FName                             TabId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLoadoutListMultiTab::OnTabSelected(class FName TabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListMultiTab", "OnTabSelected");

	Params::GzLoadoutListMultiTab_OnTabSelected Parms{};

	Parms.TabId = TabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrackEventHandlerComponent.HandleTrackEvent
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UGzTrackEventBase*                Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTrackEventHandlerComponent::HandleTrackEvent(class UGzTrackEventBase* Event, int32 TrackPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrackEventHandlerComponent", "HandleTrackEvent");

	Params::GzTrackEventHandlerComponent_HandleTrackEvent Parms{};

	Parms.Event = Event;
	Parms.TrackPoint = TrackPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzLoadoutListTab.BP_Init
// (Event, Public, BlueprintEvent)
// Parameters:
// EGzLoadoutListTabOptions                TabOf                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzLoadoutSelectionTabShowData   Data                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzLoadoutListTab::BP_Init(EGzLoadoutListTabOptions TabOf, const struct FGzLoadoutSelectionTabShowData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListTab", "BP_Init");

	Params::GzLoadoutListTab_BP_Init Parms{};

	Parms.TabOf = TabOf;
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLoadoutListTab.GetCategory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzLoadoutListTabOptions                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzLoadoutListTabOptions UGzLoadoutListTab::GetCategory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListTab", "GetCategory");

	Params::GzLoadoutListTab_GetCategory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutListTab.GetIsInitialized
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzLoadoutListTab::GetIsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListTab", "GetIsInitialized");

	Params::GzLoadoutListTab_GetIsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLoadoutListTab.GetShowData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGzLoadoutSelectionTabShowData   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGzLoadoutSelectionTabShowData UGzLoadoutListTab::GetShowData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLoadoutListTab", "GetShowData");

	Params::GzLoadoutListTab_GetShowData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSettingEntryScalarWidget.HandleOnValueChanged
// (Final, Native, Private)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingEntryScalarWidget::HandleOnValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingEntryScalarWidget", "HandleOnValueChanged");

	Params::GzSettingEntryScalarWidget_HandleOnValueChanged Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingEntryScalarWidget.OnDefaultValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// double                                  NewDefaultValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingEntryScalarWidget::OnDefaultValueChanged(double NewDefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingEntryScalarWidget", "OnDefaultValueChanged");

	Params::GzSettingEntryScalarWidget_OnDefaultValueChanged Parms{};

	Parms.NewDefaultValue = NewDefaultValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzSettingEntryScalarWidget.OnValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingEntryScalarWidget::OnValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingEntryScalarWidget", "OnValueChanged");

	Params::GzSettingEntryScalarWidget_OnValueChanged Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzLootArchetypeData.GetItemByRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzItemRarity                           Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGzLootItemVariationsTableData*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzLootItemVariationsTableData* UGzLootArchetypeData::GetItemByRarity(EGzItemRarity Rarity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootArchetypeData", "GetItemByRarity");

	Params::GzLootArchetypeData_GetItemByRarity Parms{};

	Parms.Rarity = Rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootRarityTableData.RollItemRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLootModifierTableData*         ModifiersTable                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzItemRarity                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzItemRarity UGzLootRarityTableData::RollItemRarity(const class UGzLootModifierTableData* ModifiersTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootRarityTableData", "RollItemRarity");

	Params::GzLootRarityTableData_RollItemRarity Parms{};

	Parms.ModifiersTable = ModifiersTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootRarityTableData.RollItemRarityWithModArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzLootModifier>          Modifiers                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EGzItemRarity                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzItemRarity UGzLootRarityTableData::RollItemRarityWithModArray(const TArray<struct FGzLootModifier>& Modifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootRarityTableData", "RollItemRarityWithModArray");

	Params::GzLootRarityTableData_RollItemRarityWithModArray Parms{};

	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootSpawnInterface.GetInitialWorldSpawnTransforms
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> IGzLootSpawnInterface::GetInitialWorldSpawnTransforms() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootSpawnInterface", "GetInitialWorldSpawnTransforms");

	Params::GzLootSpawnInterface_GetInitialWorldSpawnTransforms Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootSpawnInterface.GetLootSpawnerComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UGzLootSpawnerComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLootSpawnerComponent* IGzLootSpawnInterface::GetLootSpawnerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootSpawnInterface", "GetLootSpawnerComponent");

	Params::GzLootSpawnInterface_GetLootSpawnerComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootItemVariationsTableData.RollItemVariation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzLootModifierTableData*         ModifiersTable                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInventoryItemContent          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInventoryItemContent UGzLootItemVariationsTableData::RollItemVariation(const class UGzLootModifierTableData* ModifiersTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootItemVariationsTableData", "RollItemVariation");

	Params::GzLootItemVariationsTableData_RollItemVariation Parms{};

	Parms.ModifiersTable = ModifiersTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLootItemVariationsTableData.RollItemVariationWithModArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzLootModifier>          Modifiers                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInventoryItemContent          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInventoryItemContent UGzLootItemVariationsTableData::RollItemVariationWithModArray(const TArray<struct FGzLootModifier>& Modifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzLootItemVariationsTableData", "RollItemVariationWithModArray");

	Params::GzLootItemVariationsTableData_RollItemVariationWithModArray Parms{};

	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.UGzMantleNavLink.TryRunMantleAbility
// (Final, Native, Private)

void AUGzMantleNavLink::TryRunMantleAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGzMantleNavLink", "TryRunMantleAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzScenePuppeteer.GzOnPlayAnimationRequested__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EGzAnimationActionType                  AnimationAction                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzScenePuppeteer::GzOnPlayAnimationRequested__DelegateSignature(const EGzAnimationActionType AnimationAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzScenePuppeteer", "GzOnPlayAnimationRequested__DelegateSignature");

	Params::GzScenePuppeteer_GzOnPlayAnimationRequested__DelegateSignature Parms{};

	Parms.AnimationAction = AnimationAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzManualTrackTransport.ForceSetPosition
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// double                                  Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzManualTrackTransport::ForceSetPosition(double Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzManualTrackTransport", "ForceSetPosition");

	Params::GzManualTrackTransport_ForceSetPosition Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzManualTrackTransport.MoveToDistance
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// double                                  Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzManualTrackTransport::MoveToDistance(double Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzManualTrackTransport", "MoveToDistance");

	Params::GzManualTrackTransport_MoveToDistance Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzManualTrackTransport.MoveToEnd
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzManualTrackTransport::MoveToEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzManualTrackTransport", "MoveToEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzManualTrackTransport.MulticastForceSetPosition
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// double                                  Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzManualTrackTransport::MulticastForceSetPosition(double Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzManualTrackTransport", "MulticastForceSetPosition");

	Params::GzManualTrackTransport_MulticastForceSetPosition Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzScoreboard.OnStatChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzGameStat                      Stat                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzScoreboard::OnStatChanged(int32 PlayerId, const struct FGzGameStat& Stat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzScoreboard", "OnStatChanged");

	Params::GzScoreboard_OnStatChanged Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Stat = std::move(Stat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzScoreboard.RefreshStats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzScoreboard::RefreshStats(bool bClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzScoreboard", "RefreshStats");

	Params::GzScoreboard_RefreshStats Parms{};

	Parms.bClear = bClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapDecoration.SetMaxZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxZoom                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapDecoration::SetMaxZoom(float InMaxZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapDecoration", "SetMaxZoom");

	Params::GzMapDecoration_SetMaxZoom Parms{};

	Parms.InMaxZoom = InMaxZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapDecoration.SetMinZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinZoom                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapDecoration::SetMinZoom(float InMinZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapDecoration", "SetMinZoom");

	Params::GzMapDecoration_SetMinZoom Parms{};

	Parms.InMinZoom = InMinZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapTextDecoration.OnTextSet
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMapTextDecoration::OnTextSet(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapTextDecoration", "OnTextSet");

	Params::GzMapTextDecoration_OnTextSet Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapTextDecoration.UpdateVisibilityInPlayableArea
// (Final, Native, Private)

void UGzMapTextDecoration::UpdateVisibilityInPlayableArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapTextDecoration", "UpdateVisibilityInPlayableArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.AddDecoration
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InWidget                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZOrder                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::AddDecoration(class UUserWidget* InWidget, const struct FVector2D& WorldPosition, int32 ZOrder, bool bOverlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "AddDecoration");

	Params::GzMapWidget_AddDecoration Parms{};

	Parms.InWidget = InWidget;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.ZOrder = ZOrder;
	Parms.bOverlay = bOverlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.AddDecorationToScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InWidget                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvasPanelSlot*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCanvasPanelSlot* UGzMapWidget::AddDecorationToScreen(class UUserWidget* InWidget, bool bOverlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "AddDecorationToScreen");

	Params::GzMapWidget_AddDecorationToScreen Parms{};

	Parms.InWidget = InWidget;
	Parms.bOverlay = bOverlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.AddSplineDecoration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzSplineMapWidget*               InWidget                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::AddSplineDecoration(class UGzSplineMapWidget* InWidget, bool bOverlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "AddSplineDecoration");

	Params::GzMapWidget_AddSplineDecoration Parms{};

	Parms.InWidget = InWidget;
	Parms.bOverlay = bOverlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.AddZoneFillLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               InMaterial                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZOrder                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzZoneFillLayerWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzZoneFillLayerWidget* UGzMapWidget::AddZoneFillLayer(class UMaterialInterface* InMaterial, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "AddZoneFillLayer");

	Params::GzMapWidget_AddZoneFillLayer Parms{};

	Parms.InMaterial = InMaterial;
	Parms.ZOrder = ZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.RemoveDecoration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InWidget                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::RemoveDecoration(class UUserWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "RemoveDecoration");

	Params::GzMapWidget_RemoveDecoration Parms{};

	Parms.InWidget = InWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.RemoveZoneFillLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzZoneFillLayerWidget*           LayerWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::RemoveZoneFillLayer(class UGzZoneFillLayerWidget* LayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "RemoveZoneFillLayer");

	Params::GzMapWidget_RemoveZoneFillLayer Parms{};

	Parms.LayerWidget = LayerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.SetBoundingGeometryOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        InGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGzMapWidget::SetBoundingGeometryOverride(const struct FGeometry& InGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "SetBoundingGeometryOverride");

	Params::GzMapWidget_SetBoundingGeometryOverride Parms{};

	Parms.InGeometry = std::move(InGeometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.SetCaptureEveryFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCaptureEveryFram                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::SetCaptureEveryFrame(bool bCaptureEveryFram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "SetCaptureEveryFrame");

	Params::GzMapWidget_SetCaptureEveryFrame Parms{};

	Parms.bCaptureEveryFram = bCaptureEveryFram;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.SetMapZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Zoom                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::SetMapZoom(float Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "SetMapZoom");

	Params::GzMapWidget_SetMapZoom Parms{};

	Parms.Zoom = Zoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.ZoomToExtent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox2D                           Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ZoomMultiplier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::ZoomToExtent(const struct FBox2D& Box, float ZoomMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "ZoomToExtent");

	Params::GzMapWidget_ZoomToExtent Parms{};

	Parms.Box = std::move(Box);
	Parms.ZoomMultiplier = ZoomMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.ZoomToFit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector2D>                InWorldPoints                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ZoomMultiplier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapWidget::ZoomToFit(const TArray<struct FVector2D>& InWorldPoints, float ZoomMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "ZoomToFit");

	Params::GzMapWidget_ZoomToFit Parms{};

	Parms.InWorldPoints = std::move(InWorldPoints);
	Parms.ZoomMultiplier = ZoomMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMapWidget.GetBoundingGeometry
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FGeometry                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FGeometry UGzMapWidget::GetBoundingGeometry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetBoundingGeometry");

	Params::GzMapWidget_GetBoundingGeometry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMapRotationAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapWidget::GetMapRotationAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMapRotationAngle");

	Params::GzMapWidget_GetMapRotationAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMapSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UGzMapWidget::GetMapSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMapSize");

	Params::GzMapWidget_GetMapSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMapZoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapWidget::GetMapZoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMapZoom");

	Params::GzMapWidget_GetMapZoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMarkerContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMapMarkerContainer*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMapMarkerContainer* UGzMapWidget::GetMarkerContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMarkerContainer");

	Params::GzMapWidget_GetMarkerContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMaxZoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapWidget::GetMaxZoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMaxZoom");

	Params::GzMapWidget_GetMaxZoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.GetMinZoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapWidget::GetMinZoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "GetMinZoom");

	Params::GzMapWidget_GetMinZoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.IsMinimap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMapWidget::IsMinimap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "IsMinimap");

	Params::GzMapWidget_IsMinimap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.IsReady
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMapWidget::IsReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "IsReady");

	Params::GzMapWidget_IsReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.TransformScreenToWorldSpace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGzMapWidget::TransformScreenToWorldSpace(const struct FVector2D& Pos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "TransformScreenToWorldSpace");

	Params::GzMapWidget_TransformScreenToWorldSpace Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.TransformWorldToScreenRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ActorRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMapWidget::TransformWorldToScreenRotation(float ActorRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "TransformWorldToScreenRotation");

	Params::GzMapWidget_TransformWorldToScreenRotation Parms{};

	Parms.ActorRotation = ActorRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapWidget.TransformWorldToScreenSpace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGzMapWidget::TransformWorldToScreenSpace(const struct FVector2D& Pos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapWidget", "TransformWorldToScreenSpace");

	Params::GzMapWidget_TransformWorldToScreenSpace Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMapZoneWidget.OnBecomeLastZone
// (Event, Protected, BlueprintEvent)

void UGzMapZoneWidget::OnBecomeLastZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapZoneWidget", "OnBecomeLastZone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMapZoneWidget.OnInit
// (Event, Protected, BlueprintEvent)

void UGzMapZoneWidget::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapZoneWidget", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMapZoneWidget.OnRadiusChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMapZoneWidget::OnRadiusChange(float NewRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapZoneWidget", "OnRadiusChange");

	Params::GzMapZoneWidget_OnRadiusChange Parms{};

	Parms.NewRadius = NewRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMapZoneWidget.GetLandingZonesPositions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGzLandingZoneUIData>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzLandingZoneUIData> UGzMapZoneWidget::GetLandingZonesPositions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMapZoneWidget", "GetLandingZonesPositions");

	Params::GzMapZoneWidget_GetLandingZonesPositions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSeethroughScope.GetScopeMesh
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* AGzSeethroughScope::GetScopeMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSeethroughScope", "GetScopeMesh");

	Params::GzSeethroughScope_GetScopeMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzReplayPlayerController.GotoReplayTimeInSeconds
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReplayPlayerController::GotoReplayTimeInSeconds(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayPlayerController", "GotoReplayTimeInSeconds");

	Params::GzReplayPlayerController_GotoReplayTimeInSeconds Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayPlayerController.SetReplayPlayRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReplayPlayerController::SetReplayPlayRate(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayPlayerController", "SetReplayPlayRate");

	Params::GzReplayPlayerController_SetReplayPlayRate Parms{};

	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayPlayerController.ShowReplayCurrentTimeInSeconds
// (Final, Exec, Native, Public)

void AGzReplayPlayerController::ShowReplayCurrentTimeInSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayPlayerController", "ShowReplayCurrentTimeInSeconds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayPlayerController.ShowReplayTotalTimeInSeconds
// (Final, Exec, Native, Public)

void AGzReplayPlayerController::ShowReplayTotalTimeInSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayPlayerController", "ShowReplayTotalTimeInSeconds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplayPlayerController.SwitchPlayerByName
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReplayPlayerController::SwitchPlayerByName(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplayPlayerController", "SwitchPlayerByName");

	Params::GzReplayPlayerController_SwitchPlayerByName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.AddItem
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLimitAndMint                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::AddItem(const class FString& AssetId, const bool bLimitAndMint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "AddItem");

	Params::GzMetaPlayerInventoryCheatExtension_AddItem Parms{};

	Parms.AssetId = std::move(AssetId);
	Parms.bLimitAndMint = bLimitAndMint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.AddItemsByFilters
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Rarity                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InventoryType                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLimitAndMint                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::AddItemsByFilters(const class FString& Type, const class FString& Rarity, const class FString& InventoryType, const bool bLimitAndMint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "AddItemsByFilters");

	Params::GzMetaPlayerInventoryCheatExtension_AddItemsByFilters Parms{};

	Parms.Type = std::move(Type);
	Parms.Rarity = std::move(Rarity);
	Parms.InventoryType = std::move(InventoryType);
	Parms.bLimitAndMint = bLimitAndMint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.AddItemsOfTypeV2
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLimitAndMint                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::AddItemsOfTypeV2(const class FString& ItemType, const bool bLimitAndMint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "AddItemsOfTypeV2");

	Params::GzMetaPlayerInventoryCheatExtension_AddItemsOfTypeV2 Parms{};

	Parms.ItemType = std::move(ItemType);
	Parms.bLimitAndMint = bLimitAndMint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.DisableSingleItemFromUICatalog
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           AssetId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::DisableSingleItemFromUICatalog(const class FString& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "DisableSingleItemFromUICatalog");

	Params::GzMetaPlayerInventoryCheatExtension_DisableSingleItemFromUICatalog Parms{};

	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.DumpAllCITsForSlot
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           SlotID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::DumpAllCITsForSlot(const class FString& SlotID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "DumpAllCITsForSlot");

	Params::GzMetaPlayerInventoryCheatExtension_DumpAllCITsForSlot Parms{};

	Parms.SlotID = std::move(SlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.EnableAllItemsInUICatalog
// (Final, Exec, Native, Public)

void UGzMetaPlayerInventoryCheatExtension::EnableAllItemsInUICatalog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "EnableAllItemsInUICatalog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.MarkInventoryItemReviewed
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemGuid                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::MarkInventoryItemReviewed(const class FString& ItemGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "MarkInventoryItemReviewed");

	Params::GzMetaPlayerInventoryCheatExtension_MarkInventoryItemReviewed Parms{};

	Parms.ItemGuid = std::move(ItemGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.PerformClientInventoryIntegrityCheck
// (Final, Exec, Native, Public)

void UGzMetaPlayerInventoryCheatExtension::PerformClientInventoryIntegrityCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "PerformClientInventoryIntegrityCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.RevokeItemsByFilters
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Rarity                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InventoryType                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::RevokeItemsByFilters(const class FString& Type, const class FString& Rarity, const class FString& InventoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "RevokeItemsByFilters");

	Params::GzMetaPlayerInventoryCheatExtension_RevokeItemsByFilters Parms{};

	Parms.Type = std::move(Type);
	Parms.Rarity = std::move(Rarity);
	Parms.InventoryType = std::move(InventoryType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.RevokeItemsOfTypeV2
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMetaPlayerInventoryCheatExtension::RevokeItemsOfTypeV2(const class FString& ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "RevokeItemsOfTypeV2");

	Params::GzMetaPlayerInventoryCheatExtension_RevokeItemsOfTypeV2 Parms{};

	Parms.ItemType = std::move(ItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaPlayerInventoryCheatExtension.SaveInventoryReviewedState
// (Final, Exec, Native, Public)

void UGzMetaPlayerInventoryCheatExtension::SaveInventoryReviewedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaPlayerInventoryCheatExtension", "SaveInventoryReviewedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaSupportCheatExtension.OnlineSessionReportCheating
// (Final, Exec, Native, Public, Const)

void UGzMetaSupportCheatExtension::OnlineSessionReportCheating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaSupportCheatExtension", "OnlineSessionReportCheating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaSupportCheatExtension.OnlineSessionReportCheatingIdle
// (Final, Exec, Native, Public, Const)

void UGzMetaSupportCheatExtension::OnlineSessionReportCheatingIdle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaSupportCheatExtension", "OnlineSessionReportCheatingIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaSupportCheatExtension.OnlineSessionReportIdle
// (Final, Exec, Native, Public, Const)

void UGzMetaSupportCheatExtension::OnlineSessionReportIdle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaSupportCheatExtension", "OnlineSessionReportIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaTelemetryCheatExtension.MockMatchFinishedEvent
// (Final, Exec, Native, Public, Const)

void UGzMetaTelemetryCheatExtension::MockMatchFinishedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaTelemetryCheatExtension", "MockMatchFinishedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaTelemetryCheatExtension.MockOpportunityStartedEvent
// (Final, Exec, Native, Public, Const)

void UGzMetaTelemetryCheatExtension::MockOpportunityStartedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaTelemetryCheatExtension", "MockOpportunityStartedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetaTelemetryCheatExtension.RequestImmediateTelemetryWrite
// (Final, Exec, Native, Public, Const)

void UGzMetaTelemetryCheatExtension::RequestImmediateTelemetryWrite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetaTelemetryCheatExtension", "RequestImmediateTelemetryWrite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMetricsSubsystem.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzMetricsSubsystem::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMetricsSubsystem", "OnMissionStateChanged");

	Params::GzMetricsSubsystem_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissilesComponent.Client_AckLockonTarget
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// int32                                   SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMicroMissilesComponent::Client_AckLockonTarget(const int32 SlotNumber, const bool bIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "Client_AckLockonTarget");

	Params::GzMicroMissilesComponent_Client_AckLockonTarget Parms{};

	Parms.SlotNumber = SlotNumber;
	Parms.bIsValid = bIsValid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissilesComponent.GetCurrentLockOnDataAsAbilityTargetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayAbilityTargetDataHandle ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayAbilityTargetDataHandle UGzMicroMissilesComponent::GetCurrentLockOnDataAsAbilityTargetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "GetCurrentLockOnDataAsAbilityTargetData");

	Params::GzMicroMissilesComponent_GetCurrentLockOnDataAsAbilityTargetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzMicroMissilesComponent.GzLockOnChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzMicroMissilesComponent::GzLockOnChanged__DelegateSignature(const struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "GzLockOnChanged__DelegateSignature");

	Params::GzMicroMissilesComponent_GzLockOnChanged__DelegateSignature Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzMicroMissilesComponent.GzMicroMissileTargetingEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzMicroMissilesComponent::GzMicroMissileTargetingEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "GzMicroMissileTargetingEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMicroMissilesComponent.Server_RemoveLockonTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// int32                                   SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMicroMissilesComponent::Server_RemoveLockonTarget(const int32 SlotNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "Server_RemoveLockonTarget");

	Params::GzMicroMissilesComponent_Server_RemoveLockonTarget Parms{};

	Parms.SlotNumber = SlotNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissilesComponent.Server_ValidateLockonTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    LockOnTargetData                                       (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMicroMissilesComponent::Server_ValidateLockonTarget(const struct FGzMicroMissiles_LockOnTarget& LockOnTargetData, const int32 SlotNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "Server_ValidateLockonTarget");

	Params::GzMicroMissilesComponent_Server_ValidateLockonTarget Parms{};

	Parms.LockOnTargetData = std::move(LockOnTargetData);
	Parms.SlotNumber = SlotNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissilesComponent.StartLockOn
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzMicroMissilesComponent::StartLockOn(struct FGzMicroMissiles_LockOnTarget& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "StartLockOn");

	Params::GzMicroMissilesComponent_StartLockOn Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TargetData = std::move(Parms.TargetData);
}


// Function G01.GzMicroMissilesComponent.GetCurrentLockOnTargetLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMicroMissilesComponent::GetCurrentLockOnTargetLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "GetCurrentLockOnTargetLimit");

	Params::GzMicroMissilesComponent_GetCurrentLockOnTargetLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissilesComponent.GetLockOnTargetAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMicroMissilesComponent::GetLockOnTargetAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "GetLockOnTargetAmount");

	Params::GzMicroMissilesComponent_GetLockOnTargetAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissilesComponent.IsTargetInRange
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMicroMissilesComponent::IsTargetInRange(const struct FGzMicroMissiles_LockOnTarget& TargetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "IsTargetInRange");

	Params::GzMicroMissilesComponent_IsTargetInRange Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissilesComponent.IsTargetVisible
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMicroMissilesComponent::IsTargetVisible(const struct FGzMicroMissiles_LockOnTarget& TargetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "IsTargetVisible");

	Params::GzMicroMissilesComponent_IsTargetVisible Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissilesComponent.IsValidLockOnTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzMicroMissiles_LockOnTarget    TargetData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMicroMissilesComponent::IsValidLockOnTarget(const struct FGzMicroMissiles_LockOnTarget& TargetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesComponent", "IsValidLockOnTarget");

	Params::GzMicroMissilesComponent_IsValidLockOnTarget Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissilesLockOnIndicator.GetLockOnProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzMicroMissilesLockOnIndicator::GetLockOnProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissilesLockOnIndicator", "GetLockOnProgress");

	Params::GzMicroMissilesLockOnIndicator_GetLockOnProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProjectileGrenade.SetMaxGrenadeTimerSeconds
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   MaxTimer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProjectileGrenade::SetMaxGrenadeTimerSeconds(float MaxTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileGrenade", "SetMaxGrenadeTimerSeconds");

	Params::GzProjectileGrenade_SetMaxGrenadeTimerSeconds Parms{};

	Parms.MaxTimer = MaxTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileGrenade.TriggerGrenade
// (Native, Public, BlueprintCallable)

void AGzProjectileGrenade::TriggerGrenade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileGrenade", "TriggerGrenade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileGrenade.GetCurrentGrenadeTimerSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzProjectileGrenade::GetCurrentGrenadeTimerSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileGrenade", "GetCurrentGrenadeTimerSeconds");

	Params::GzProjectileGrenade_GetCurrentGrenadeTimerSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProjectileGrenade.GetMaxGrenadeTimerSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzProjectileGrenade::GetMaxGrenadeTimerSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileGrenade", "GetMaxGrenadeTimerSeconds");

	Params::GzProjectileGrenade_GetMaxGrenadeTimerSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMicroMissiles_Missile.EnableHoming
// (Final, Native, Protected, BlueprintCallable)

void AGzMicroMissiles_Missile::EnableHoming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "EnableHoming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.LaunchMissile
// (Final, Native, Public)

void AGzMicroMissiles_Missile::LaunchMissile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "LaunchMissile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.LaunchWithDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DelaySeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMicroMissiles_Missile::LaunchWithDelay(const float DelaySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "LaunchWithDelay");

	Params::GzMicroMissiles_Missile_LaunchWithDelay Parms{};

	Parms.DelaySeconds = DelaySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.OnMissileLaunched
// (Final, Native, Public)

void AGzMicroMissiles_Missile::OnMissileLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "OnMissileLaunched");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.OnRep_MissileWasLaunched
// (Final, Native, Protected)

void AGzMicroMissiles_Missile::OnRep_MissileWasLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "OnRep_MissileWasLaunched");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.OnRep_SecondaryMotionActive
// (Final, Native, Protected)

void AGzMicroMissiles_Missile::OnRep_SecondaryMotionActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "OnRep_SecondaryMotionActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMicroMissiles_Missile.OnRep_TargetData
// (Final, Native, Protected)

void AGzMicroMissiles_Missile::OnRep_TargetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMicroMissiles_Missile", "OnRep_TargetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShootingAbilityComponent.OnRep_AttackStrategy
// (Final, Native, Protected)

void UGzShootingAbilityComponent::OnRep_AttackStrategy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShootingAbilityComponent", "OnRep_AttackStrategy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingDiscreteWindowMode.OnSettingsApplied
// (Final, Native, Private)

void UGzSettingDiscreteWindowMode::OnSettingsApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingDiscreteWindowMode", "OnSettingsApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMinigunComponent.ClientNotifyHostEndShooting
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// bool                                    bOverheated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMinigunComponent::ClientNotifyHostEndShooting(bool bOverheated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMinigunComponent", "ClientNotifyHostEndShooting");

	Params::GzMinigunComponent_ClientNotifyHostEndShooting Parms{};

	Parms.bOverheated = bOverheated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMinigunComponent.GetOverheatPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMinigunComponent::GetOverheatPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMinigunComponent", "GetOverheatPercentage");

	Params::GzMinigunComponent_GetOverheatPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMinigunComponent.GetRemainingAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMinigunComponent::GetRemainingAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMinigunComponent", "GetRemainingAmmo");

	Params::GzMinigunComponent_GetRemainingAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMinigunComponent.GetSpreadScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMinigunComponent::GetSpreadScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMinigunComponent", "GetSpreadScale");

	Params::GzMinigunComponent_GetSpreadScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMinigunComponent.IsOverheated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMinigunComponent::IsOverheated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMinigunComponent", "IsOverheated");

	Params::GzMinigunComponent_IsOverheated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionAction_FailOnObjectiveConsumption.OnOwningObjectiveStateChanged
// (Final, Native, Private)
// Parameters:
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionObjectiveState                  OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionObjectiveState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionAction_FailOnObjectiveConsumption::OnOwningObjectiveStateChanged(class UMissionObjective* Objective, EMissionObjectiveState OldState, EMissionObjectiveState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionAction_FailOnObjectiveConsumption", "OnOwningObjectiveStateChanged");

	Params::GzMissionAction_FailOnObjectiveConsumption_OnOwningObjectiveStateChanged Parms{};

	Parms.Objective = Objective;
	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionAction_FailOnObjectiveConsumption.OnStageChanged
// (Final, Native, Private)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionAction_FailOnObjectiveConsumption::OnStageChanged(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionAction_FailOnObjectiveConsumption", "OnStageChanged");

	Params::GzMissionAction_FailOnObjectiveConsumption_OnStageChanged Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionAction_PlayCutscene.OnCutsceneFinished
// (Final, Native, Private)

void UGzMissionAction_PlayCutscene::OnCutsceneFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionAction_PlayCutscene", "OnCutsceneFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionAction_PlayCutscene.OnRep_Play
// (Final, Native, Private)

void UGzMissionAction_PlayCutscene::OnRep_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionAction_PlayCutscene", "OnRep_Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionBaseMessage.SetMissionData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzMissionData*                   InMissionData                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionBaseMessage::SetMissionData(class UGzMissionData* InMissionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionBaseMessage", "SetMissionData");

	Params::GzMissionBaseMessage_SetMissionData Parms{};

	Parms.InMissionData = InMissionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionBaseMessage.GetMissionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzMissionData*             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzMissionData* UGzMissionBaseMessage::GetMissionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionBaseMessage", "GetMissionData");

	Params::GzMissionBaseMessage_GetMissionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionBlueprintFunctionLibrary.GenerateMissionUI
// (Final, BlueprintCosmetic, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzUIBuilderParams               Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UGzMTW_Base*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMTW_Base* UGzMissionBlueprintFunctionLibrary::GenerateMissionUI(class AGzAdvancedMission* Mission, const struct FGzUIBuilderParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionBlueprintFunctionLibrary", "GenerateMissionUI");

	Params::GzMissionBlueprintFunctionLibrary_GenerateMissionUI Parms{};

	Parms.Mission = Mission;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionBlueprintFunctionLibrary.GetAllPlayerMissionsOfClass
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGzAdvancedMission>   ClassType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzAdvancedMission*>       Missions                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzMissionBlueprintFunctionLibrary::GetAllPlayerMissionsOfClass(const class UObject* WorldContextObject, TSubclassOf<class AGzAdvancedMission> ClassType, TArray<class AGzAdvancedMission*>* Missions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionBlueprintFunctionLibrary", "GetAllPlayerMissionsOfClass");

	Params::GzMissionBlueprintFunctionLibrary_GetAllPlayerMissionsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ClassType = ClassType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Missions != nullptr)
		*Missions = std::move(Parms.Missions);
}


// Function G01.GzMissionCheatExtension.CompleteActiveMissions
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)

void UGzMissionCheatExtension::CompleteActiveMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "CompleteActiveMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.DebugListMissions
// (Final, Exec, Native, Private)

void UGzMissionCheatExtension::DebugListMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "DebugListMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.DumpMissionStateByMissionId
// (Final, Exec, Native, Private)
// Parameters:
// class FString                           MissionId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCheatExtension::DumpMissionStateByMissionId(const class FString& MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "DumpMissionStateByMissionId");

	Params::GzMissionCheatExtension_DumpMissionStateByMissionId Parms{};

	Parms.MissionId = std::move(MissionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.DumpMissionStateByRuntimeId
// (Final, Exec, Native, Private)
// Parameters:
// int32                                   RuntimeId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCheatExtension::DumpMissionStateByRuntimeId(int32 RuntimeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "DumpMissionStateByRuntimeId");

	Params::GzMissionCheatExtension_DumpMissionStateByRuntimeId Parms{};

	Parms.RuntimeId = RuntimeId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.FailActiveMissions
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)

void UGzMissionCheatExtension::FailActiveMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "FailActiveMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.StartAllMissionsForMap
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)

void UGzMissionCheatExtension::StartAllMissionsForMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "StartAllMissionsForMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCheatExtension.StartMissionForPlayer
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)
// Parameters:
// class FString                           MissionId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCheatExtension::StartMissionForPlayer(const class FString& MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCheatExtension", "StartMissionForPlayer");

	Params::GzMissionCheatExtension_StartMissionForPlayer Parms{};

	Parms.MissionId = std::move(MissionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCondition_IsPlayerInLocation.OnActorEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCondition_IsPlayerInLocation::OnActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCondition_IsPlayerInLocation", "OnActorEndOverlap");

	Params::GzMissionCondition_IsPlayerInLocation_OnActorEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCondition_IsPlayerInLocation.OnActorOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCondition_IsPlayerInLocation::OnActorOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCondition_IsPlayerInLocation", "OnActorOverlap");

	Params::GzMissionCondition_IsPlayerInLocation_OnActorOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.BookTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionResourceComponent*        MissionResourceComponent                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCreator::BookTarget(class UMissionResourceComponent* MissionResourceComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "BookTarget");

	Params::GzMissionCreator_BookTarget Parms{};

	Parms.MissionResourceComponent = MissionResourceComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.CreateMission
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     InInstigator                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   InMissionData                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InMissionStarterActor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionCreator::CreateMission(class APlayerState* InInstigator, class UGzMissionData* InMissionData, class AActor* InMissionStarterActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "CreateMission");

	Params::GzMissionCreator_CreateMission Parms{};

	Parms.InInstigator = InInstigator;
	Parms.InMissionData = InMissionData;
	Parms.InMissionStarterActor = InMissionStarterActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionCreator.GatherMissionResources
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGzMissionData*                   InMissionData                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InMissionStarterActor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionCreator::GatherMissionResources(class UGzMissionData* InMissionData, class AActor* InMissionStarterActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "GatherMissionResources");

	Params::GzMissionCreator_GatherMissionResources Parms{};

	Parms.InMissionData = InMissionData;
	Parms.InMissionStarterActor = InMissionStarterActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionCreator.OnBookedTargetDestroyed
// (Final, Native, Protected)
// Parameters:
// class UMissionResourceComponent*        Resource                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCreator::OnBookedTargetDestroyed(class UMissionResourceComponent* Resource, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "OnBookedTargetDestroyed");

	Params::GzMissionCreator_OnBookedTargetDestroyed Parms{};

	Parms.Resource = Resource;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.OnBookedTargetReserved
// (Final, Native, Protected)
// Parameters:
// class UMissionResourceComponent*        Resource                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReservedBy                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCreator::OnBookedTargetReserved(class UMissionResourceComponent* Resource, class UObject* ReservedBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "OnBookedTargetReserved");

	Params::GzMissionCreator_OnBookedTargetReserved Parms{};

	Parms.Resource = Resource;
	Parms.ReservedBy = ReservedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.OnStageChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionCreator::OnStageChanged(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "OnStageChanged");

	Params::GzMissionCreator_OnStageChanged Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.RemoveAllBookings
// (Final, Native, Public, BlueprintCallable)

void UGzMissionCreator::RemoveAllBookings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "RemoveAllBookings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.RemoveAllBookingsAndRetry
// (Final, Native, Protected, BlueprintCallable)

void UGzMissionCreator::RemoveAllBookingsAndRetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "RemoveAllBookingsAndRetry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.ReserveAllBookings
// (Final, Native, Public, BlueprintCallable)

void UGzMissionCreator::ReserveAllBookings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "ReserveAllBookings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionCreator.GetMissionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMissionData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMissionData* UGzMissionCreator::GetMissionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "GetMissionData");

	Params::GzMissionCreator_GetMissionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionCreator.IsCulledByStageCount
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionCreator::IsCulledByStageCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionCreator", "IsCulledByStageCount");

	Params::GzMissionCreator_IsCulledByStageCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionEntryWidget.NotifyMissionStateChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::NotifyMissionStateChanged(const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "NotifyMissionStateChanged");

	Params::GzMissionEntryWidget_NotifyMissionStateChanged Parms{};

	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionEntryWidget.OnMissionSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnMissionSet(class AGzMission* InMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnMissionSet");

	Params::GzMissionEntryWidget_OnMissionSet Parms{};

	Parms.InMission = InMission;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionEntryWidget.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnMissionStateChanged(class AGzMission* InMission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnMissionStateChanged");

	Params::GzMissionEntryWidget_OnMissionStateChanged Parms{};

	Parms.InMission = InMission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionEntryWidget.OnMissionStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnMissionStateChanged_BP(class AGzMission* InMission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnMissionStateChanged_BP");

	Params::GzMissionEntryWidget_OnMissionStateChanged_BP Parms{};

	Parms.InMission = InMission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionEntryWidget.OnMissionTrackedChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTracked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnMissionTrackedChanged(class AGzMission* InMission, bool bTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnMissionTrackedChanged");

	Params::GzMissionEntryWidget_OnMissionTrackedChanged Parms{};

	Parms.InMission = InMission;
	Parms.bTracked = bTracked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionEntryWidget.OnMissionTrackedStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTracked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnMissionTrackedStateChanged_BP(class AGzMission* InMission, bool bTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnMissionTrackedStateChanged_BP");

	Params::GzMissionEntryWidget_OnMissionTrackedStateChanged_BP Parms{};

	Parms.InMission = InMission;
	Parms.bTracked = bTracked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionEntryWidget.OnRootWidgetCreated_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMissionObjectiveWidget*        RootWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionEntryWidget::OnRootWidgetCreated_BP(class UGzMissionObjectiveWidget* RootWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionEntryWidget", "OnRootWidgetCreated_BP");

	Params::GzMissionEntryWidget_OnRootWidgetCreated_BP Parms{};

	Parms.RootWidget = RootWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzShootingRangeSettings.GetInitTransitionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzShootingRangeSettings::GetInitTransitionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShootingRangeSettings", "GetInitTransitionTime");

	Params::GzShootingRangeSettings_GetInitTransitionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionExtension_Marker.GetTextForTarget
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class AActor>            Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGzMissionExtension_Marker::GetTextForTarget(const TSoftObjectPtr<class AActor>& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionExtension_Marker", "GetTextForTarget");

	Params::GzMissionExtension_Marker_GetTextForTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionExtension_Marker.OnMissionTrackedStateChanged
// (Final, Native, Public)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTracked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionExtension_Marker::OnMissionTrackedStateChanged(class AGzMission* Mission, bool bTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionExtension_Marker", "OnMissionTrackedStateChanged");

	Params::GzMissionExtension_Marker_OnMissionTrackedStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.bTracked = bTracked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionExtension_Marker.ShouldDisplayMarkers
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionExtension_Marker::ShouldDisplayMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionExtension_Marker", "ShouldDisplayMarkers");

	Params::GzMissionExtension_Marker_ShouldDisplayMarkers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionExtension_Marker.UpdateMarkerVisibility
// (Final, Native, Public, BlueprintCallable)

void UGzMissionExtension_Marker::UpdateMarkerVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionExtension_Marker", "UpdateMarkerVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProceduralTrackTransport.OnRep_DeliveryData
// (Final, Native, Private)

void AGzProceduralTrackTransport::OnRep_DeliveryData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProceduralTrackTransport", "OnRep_DeliveryData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionHelper.BindOnMissionAccepted
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGzMissionData* MissionData)>OnMissionAccepted                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionHelper::BindOnMissionAccepted(const class UObject* WorldContextObject, const TDelegate<void(class UGzMissionData* MissionData)>& OnMissionAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionHelper", "BindOnMissionAccepted");

	Params::GzMissionHelper_BindOnMissionAccepted Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OnMissionAccepted = OnMissionAccepted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzMissionHelper.GzMissionAccepted__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UGzMissionData*                   MissionData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionHelper::GzMissionAccepted__DelegateSignature(const class UGzMissionData* MissionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionHelper", "GzMissionAccepted__DelegateSignature");

	Params::GzMissionHelper_GzMissionAccepted__DelegateSignature Parms{};

	Parms.MissionData = MissionData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionInteractable.DisableAnimation
// (Final, Native, Protected, BlueprintCallable)

void AGzMissionInteractable::DisableAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "DisableAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.EnableAnimationForDuration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionInteractable::EnableAnimationForDuration(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "EnableAnimationForDuration");

	Params::GzMissionInteractable_EnableAnimationForDuration Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.HandleClose
// (Native, Event, Protected, BlueprintEvent)

void AGzMissionInteractable::HandleClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "HandleClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.HandleOpen
// (Native, Event, Protected, BlueprintEvent)

void AGzMissionInteractable::HandleOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "HandleOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.OnDetectionSphereBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzMissionInteractable::OnDetectionSphereBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "OnDetectionSphereBeginOverlap");

	Params::GzMissionInteractable_OnDetectionSphereBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.OnDetectionSphereEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionInteractable::OnDetectionSphereEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "OnDetectionSphereEndOverlap");

	Params::GzMissionInteractable_OnDetectionSphereEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionInteractable.OnRep_IsOpen
// (Final, Native, Protected)

void AGzMissionInteractable::OnRep_IsOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionInteractable", "OnRep_IsOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionListWidget.OnMissionEntryAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMissionEntryWidget*            MissionEntryWidget                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionListWidget::OnMissionEntryAdded(class UGzMissionEntryWidget* MissionEntryWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionListWidget", "OnMissionEntryAdded");

	Params::GzMissionListWidget_OnMissionEntryAdded Parms{};

	Parms.MissionEntryWidget = MissionEntryWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionListWidget.OnMissionEntryStateChanged
// (Final, Native, Protected)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionListWidget::OnMissionEntryStateChanged(class AGzMission* InMission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionListWidget", "OnMissionEntryStateChanged");

	Params::GzMissionListWidget_OnMissionEntryStateChanged Parms{};

	Parms.InMission = InMission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionLogWidget.ClearList_BP
// (Event, Protected, BlueprintEvent)

void UGzMissionLogWidget::ClearList_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "ClearList_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionLogWidget.ClearLog
// (Final, Native, Protected, BlueprintCallable)

void UGzMissionLogWidget::ClearLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "ClearLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionLogWidget.OnListWidgetAdded_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMissionListWidget*             MissionListWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionLogWidget::OnListWidgetAdded_BP(class UGzMissionListWidget* MissionListWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "OnListWidgetAdded_BP");

	Params::GzMissionLogWidget_OnListWidgetAdded_BP Parms{};

	Parms.MissionListWidget = MissionListWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionLogWidget.OnLogEmpty
// (Event, Protected, BlueprintEvent)

void UGzMissionLogWidget::OnLogEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "OnLogEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionLogWidget.OnLogNotEmpty
// (Event, Protected, BlueprintEvent)

void UGzMissionLogWidget::OnLogNotEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "OnLogNotEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMissionLogWidget.OnMissionTrackedStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTracked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionLogWidget::OnMissionTrackedStateChanged(class AGzMission* InMission, bool bTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "OnMissionTrackedStateChanged");

	Params::GzMissionLogWidget_OnMissionTrackedStateChanged Parms{};

	Parms.InMission = InMission;
	Parms.bTracked = bTracked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionLogWidget.OnNewMissionStarted
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       NewMission                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionLogWidget::OnNewMissionStarted(class AGzMission* NewMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionLogWidget", "OnNewMissionStarted");

	Params::GzMissionLogWidget_OnNewMissionStarted Parms{};

	Parms.NewMission = NewMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressionSettings.GetProgressionSettings
// (Final, Native, Static, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UGzProgressionSettings*     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzProgressionSettings* UGzProgressionSettings::GetProgressionSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzProgressionSettings", "GetProgressionSettings");

	Params::GzProgressionSettings_GetProgressionSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionManager.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzMissionState                         NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionManager::OnMissionStateChanged(class AGzAdvancedMission* Mission, const EGzMissionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionManager", "OnMissionStateChanged");

	Params::GzMissionManager_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionManager.OnRep_Groups
// (Final, Native, Private)

void AGzMissionManager::OnRep_Groups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionManager", "OnRep_Groups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionManager.SetMissionTrackingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzAdvancedMission*               InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMissionManager::SetMissionTrackingEnabled(class AGzAdvancedMission* InMission, bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionManager", "SetMissionTrackingEnabled");

	Params::GzMissionManager_SetMissionTrackingEnabled Parms{};

	Parms.InMission = InMission;
	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionManager.StartMissions
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzMissionManager::StartMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionManager", "StartMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionManager.IsMissionTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzAdvancedMission*               InMission                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMissionManager::IsMissionTracked(const class AGzAdvancedMission* InMission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionManager", "IsMissionTracked");

	Params::GzMissionManager_IsMissionTracked Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionMarkerActor.Activate
// (Native, Event, Public, BlueprintEvent)

void AGzMissionMarkerActor::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarkerActor", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarkerActor.Deactivate
// (Native, Event, Public, BlueprintEvent)

void AGzMissionMarkerActor::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarkerActor", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionMarkerActor.SetOwningMarkerExtension
// (Final, Native, Public)
// Parameters:
// class UGzMissionExtension_Marker*       InMarkerExtension                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionMarkerActor::SetOwningMarkerExtension(class UGzMissionExtension_Marker* InMarkerExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionMarkerActor", "SetOwningMarkerExtension");

	Params::GzMissionMarkerActor_SetOwningMarkerExtension Parms{};

	Parms.InMarkerExtension = InMarkerExtension;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSequenceObjective.MakeSequenceObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzObjective*>             Objectives                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzSequenceObjective::MakeSequenceObjective(class AGzAdvancedMission* Mission, const TArray<class UGzObjective*>& Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSequenceObjective", "MakeSequenceObjective");

	Params::GzSequenceObjective_MakeSequenceObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objectives = std::move(Objectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionObjectiveWidget.OnChildObjectiveWidgetCreated_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzMissionObjectiveWidget*        NewWidget                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjectiveWidget::OnChildObjectiveWidgetCreated_BP(class UGzMissionObjectiveWidget* NewWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjectiveWidget", "OnChildObjectiveWidgetCreated_BP");

	Params::GzMissionObjectiveWidget_OnChildObjectiveWidgetCreated_BP Parms{};

	Parms.NewWidget = NewWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionObjectiveWidget.OnObjectiveSet_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMissionObjective*                InObjective                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjectiveWidget::OnObjectiveSet_BP(class UMissionObjective* InObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjectiveWidget", "OnObjectiveSet_BP");

	Params::GzMissionObjectiveWidget_OnObjectiveSet_BP Parms{};

	Parms.InObjective = InObjective;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionObjectiveWidget.OnObjectiveStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMissionObjective*                MissionObjective                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionObjectiveState                  OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionObjectiveState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjectiveWidget::OnObjectiveStateChanged_BP(class UMissionObjective* MissionObjective, EMissionObjectiveState OldState, EMissionObjectiveState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjectiveWidget", "OnObjectiveStateChanged_BP");

	Params::GzMissionObjectiveWidget_OnObjectiveStateChanged_BP Parms{};

	Parms.MissionObjective = MissionObjective;
	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMissionObjective_Destroy.SetTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMissionResourceRef              InTarget                                               (Parm, NativeAccessSpecifierPublic)

void UGzMissionObjective_Destroy::SetTarget(const struct FMissionResourceRef& InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjective_Destroy", "SetTarget");

	Params::GzMissionObjective_Destroy_SetTarget Parms{};

	Parms.InTarget = std::move(InTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjective_GoToLocation.OnTriggerOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionObjective_GoToLocation::OnTriggerOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjective_GoToLocation", "OnTriggerOverlap");

	Params::GzMissionObjective_GoToLocation_OnTriggerOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionObjective_GoToLocation.SetTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMissionResourceRef              InTarget                                               (Parm, NativeAccessSpecifierPublic)

void UGzMissionObjective_GoToLocation::SetTarget(const struct FMissionResourceRef& InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionObjective_GoToLocation", "SetTarget");

	Params::GzMissionObjective_GoToLocation_SetTarget Parms{};

	Parms.InTarget = std::move(InTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionResourceSubsystem.Init
// (Final, Native, Public, BlueprintCallable)

void UGzMissionResourceSubsystem::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionResourceSubsystem", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionResourceSubsystem.OnStageChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionResourceSubsystem::OnStageChanged(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionResourceSubsystem", "OnStageChanged");

	Params::GzMissionResourceSubsystem_OnStageChanged Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterActor.Invalidate
// (Final, Native, Public)

void AGzMissionStarterActor::Invalidate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterActor", "Invalidate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterActor.OnRep_MissionData
// (Native, Event, Protected, BlueprintEvent)

void AGzMissionStarterActor::OnRep_MissionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterActor", "OnRep_MissionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterActor.TryStartMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMissionStarterActor::TryStartMission(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterActor", "TryStartMission");

	Params::GzMissionStarterActor_TryStartMission Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStarterActor.GetMissionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMissionData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMissionData* AGzMissionStarterActor::GetMissionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterActor", "GetMissionData");

	Params::GzMissionStarterActor_GetMissionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStarterSpawner.DestroyDelayed
// (Final, Native, Public, BlueprintCallable)

void AGzMissionStarterSpawner::DestroyDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterSpawner", "DestroyDelayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterSpawner.DestroyThis
// (Final, Native, Protected)

void AGzMissionStarterSpawner::DestroyThis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterSpawner", "DestroyThis");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterSpawner.OnMissionCreated
// (Final, Native, Public)
// Parameters:
// class AGzMissionStarterActor*           MissionStarterActor                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzMissionStarterSpawner::OnMissionCreated(class AGzMissionStarterActor* MissionStarterActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterSpawner", "OnMissionCreated");

	Params::GzMissionStarterSpawner_OnMissionCreated Parms{};

	Parms.MissionStarterActor = MissionStarterActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStarterSpawner.IsAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzMissionStarterSpawner::IsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStarterSpawner", "IsAvailable");

	Params::GzMissionStarterSpawner_IsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStatCollector.OnMissionStateChanged
// (Native, Protected)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionStatCollector::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionStatCollector", "OnMissionStateChanged");

	Params::GzMissionStatCollector_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionStatics.GetAliveMissionParticipants
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AMission*                         Mission                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGzPlayerState*> UGzMissionStatics::GetAliveMissionParticipants(const class AMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionStatics", "GetAliveMissionParticipants");

	Params::GzMissionStatics_GetAliveMissionParticipants Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStatics.GetAliveMissionParticipantsCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AMission*                         Mission                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMissionStatics::GetAliveMissionParticipantsCount(const class AMission* Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionStatics", "GetAliveMissionParticipantsCount");

	Params::GzMissionStatics_GetAliveMissionParticipantsCount Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStatics.GetAliveParticipantsFromGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionGroup                  MissionGroup                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UGzMissionStatics::GetAliveParticipantsFromGroup(const class UObject* WorldContextObject, const struct FGzMissionGroup& MissionGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionStatics", "GetAliveParticipantsFromGroup");

	Params::GzMissionStatics_GetAliveParticipantsFromGroup Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionGroup = std::move(MissionGroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStatics.GetMissionData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           MissionId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMissionData* UGzMissionStatics::GetMissionData(const class FString& MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionStatics", "GetMissionData");

	Params::GzMissionStatics_GetMissionData Parms{};

	Parms.MissionId = std::move(MissionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionStatics.Resolve
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionResourceRef              Ref                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzMissionStatics::Resolve(const class UObject* WorldContextObject, const struct FMissionResourceRef& Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzMissionStatics", "Resolve");

	Params::GzMissionStatics_Resolve Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Ref = std::move(Ref);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.CreateMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InstigatorContext                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   MissionData                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionRuntimeContext*           RuntimeContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::CreateMission(class AActor* InstigatorContext, class UGzMissionData* MissionData, class UMissionRuntimeContext* RuntimeContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "CreateMission");

	Params::GzMissionSubsystem_CreateMission Parms{};

	Parms.InstigatorContext = InstigatorContext;
	Parms.MissionData = MissionData;
	Parms.RuntimeContext = RuntimeContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.CreateSelectedMissionForPlayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::CreateSelectedMissionForPlayer(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "CreateSelectedMissionForPlayer");

	Params::GzMissionSubsystem_CreateSelectedMissionForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.CreateSelectedMissions
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGzMissionSubsystem::CreateSelectedMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "CreateSelectedMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.GetActiveMissionsByType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzMissionType                          MissionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AGzMission*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzMission*> UGzMissionSubsystem::GetActiveMissionsByType(EGzMissionType MissionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "GetActiveMissionsByType");

	Params::GzMissionSubsystem_GetActiveMissionsByType Parms{};

	Parms.MissionType = MissionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.InitializeMissionStarters
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGzMissionStarterSpawnParams*     InMissionStarterSpawnParams                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::InitializeMissionStarters(class UGzMissionStarterSpawnParams* InMissionStarterSpawnParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "InitializeMissionStarters");

	Params::GzMissionSubsystem_InitializeMissionStarters Parms{};

	Parms.InMissionStarterSpawnParams = InMissionStarterSpawnParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.OnLocalMissionStateChanged
// (Final, Native, Public)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::OnLocalMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "OnLocalMissionStateChanged");

	Params::GzMissionSubsystem_OnLocalMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.OnResourcesFiltered
// (Final, Native, Protected)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::OnResourcesFiltered(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "OnResourcesFiltered");

	Params::GzMissionSubsystem_OnResourcesFiltered Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.TrackMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::TrackMission(class AGzMission* InMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "TrackMission");

	Params::GzMissionSubsystem_TrackMission Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.UntrackMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMissionSubsystem::UntrackMission(class AGzMission* InMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "UntrackMission");

	Params::GzMissionSubsystem_UntrackMission Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMissionSubsystem.GetActiveMissions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGzMission*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzMission*> UGzMissionSubsystem::GetActiveMissions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "GetActiveMissions");

	Params::GzMissionSubsystem_GetActiveMissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.GetTrackedMissions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGzMission*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGzMission*> UGzMissionSubsystem::GetTrackedMissions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "GetTrackedMissions");

	Params::GzMissionSubsystem_GetTrackedMissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.HasMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ParticipantContext                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   MissionData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionSubsystem::HasMission(class AActor* ParticipantContext, const class UGzMissionData* MissionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "HasMission");

	Params::GzMissionSubsystem_HasMission Parms{};

	Parms.ParticipantContext = ParticipantContext;
	Parms.MissionData = MissionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.HasMissionOfSameType
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ParticipantContext                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   MissionData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionSubsystem::HasMissionOfSameType(class AActor* ParticipantContext, const class UGzMissionData* MissionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "HasMissionOfSameType");

	Params::GzMissionSubsystem_HasMissionOfSameType Parms{};

	Parms.ParticipantContext = ParticipantContext;
	Parms.MissionData = MissionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.IsEligibleForMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ParticipantContext                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMissionData*                   MissionData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionSubsystem::IsEligibleForMission(class AActor* ParticipantContext, const class UGzMissionData* MissionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "IsEligibleForMission");

	Params::GzMissionSubsystem_IsEligibleForMission Parms{};

	Parms.ParticipantContext = ParticipantContext;
	Parms.MissionData = MissionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionSubsystem.IsMissionTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzMission*                       InMission                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMissionSubsystem::IsMissionTracked(class AGzMission* InMission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionSubsystem", "IsMissionTracked");

	Params::GzMissionSubsystem_IsMissionTracked Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTargetInterface.GetTargetActor
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* IGzMissionTargetInterface::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTargetInterface", "GetTargetActor");

	Params::GzMissionTargetInterface_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMissionTimeStatCollector.OnMissionStateChanged
// (Final, Native, Protected)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzMissionTimeStatCollector::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMissionTimeStatCollector", "OnMissionStateChanged");

	Params::GzMissionTimeStatCollector_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundStatics.GetAllSoundActionTypes
// (Final, Native, Static, Public)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzSoundStatics::GetAllSoundActionTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetAllSoundActionTypes");

	Params::GzSoundStatics_GetAllSoundActionTypes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetAllSoundStatesKeys
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzSoundStatics::GetAllSoundStatesKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetAllSoundStatesKeys");

	Params::GzSoundStatics_GetAllSoundStatesKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetEnvironmentZoneSwitch
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzEnvironmentZoneManagerComponent*EnvZoneManager                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateZones                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkSwitchValue*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkSwitchValue* UGzSoundStatics::GetEnvironmentZoneSwitch(class UGzEnvironmentZoneManagerComponent* EnvZoneManager, bool bUpdateZones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetEnvironmentZoneSwitch");

	Params::GzSoundStatics_GetEnvironmentZoneSwitch Parms{};

	Parms.EnvZoneManager = EnvZoneManager;
	Parms.bUpdateZones = bUpdateZones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetEnvironmentZoneSwitchForActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateZones                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkSwitchValue*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkSwitchValue* UGzSoundStatics::GetEnvironmentZoneSwitchForActor(const class AActor* Actor, bool bUpdateZones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetEnvironmentZoneSwitchForActor");

	Params::GzSoundStatics_GetEnvironmentZoneSwitchForActor Parms{};

	Parms.Actor = Actor;
	Parms.bUpdateZones = bUpdateZones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetEnvironmentZoneSwitchForLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkSwitchValue*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkSwitchValue* UGzSoundStatics::GetEnvironmentZoneSwitchForLocation(const class UObject* WorldContext, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetEnvironmentZoneSwitchForLocation");

	Params::GzSoundStatics_GetEnvironmentZoneSwitchForLocation Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetEventForPhysicalMaterial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzSurfaceTypeEvents*             SurfaceTypeEvents                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                PhysicalMaterial                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UGzSoundStatics::GetEventForPhysicalMaterial(class UGzSurfaceTypeEvents* SurfaceTypeEvents, const class UPhysicalMaterial* PhysicalMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetEventForPhysicalMaterial");

	Params::GzSoundStatics_GetEventForPhysicalMaterial Parms{};

	Parms.SurfaceTypeEvents = SurfaceTypeEvents;
	Parms.PhysicalMaterial = PhysicalMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetLocalAudioController
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAudioControllerComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAudioControllerComponent* UGzSoundStatics::GetLocalAudioController(const class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetLocalAudioController");

	Params::GzSoundStatics_GetLocalAudioController Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetMovementSounds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGzLimbStepSoundsData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzLimbStepSoundsData* UGzSoundStatics::GetMovementSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetMovementSounds");

	Params::GzSoundStatics_GetMovementSounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.GetSoundPlayDelayForLocalPlayer
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SoundLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGzSoundStatics::GetSoundPlayDelayForLocalPlayer(class UObject* WorldContextObject, const struct FVector& SoundLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "GetSoundPlayDelayForLocalPlayer");

	Params::GzSoundStatics_GetSoundPlayDelayForLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SoundLocation = std::move(SoundLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.PostActionVoiceLineForTeam
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGzPlayerState*                   Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundStatics::PostActionVoiceLineForTeam(class AGzPlayerState* Instigator, const struct FGameplayTag& Tag, bool bStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostActionVoiceLineForTeam");

	Params::GzSoundStatics_PostActionVoiceLineForTeam Parms{};

	Parms.Instigator = Instigator;
	Parms.Tag = std::move(Tag);
	Parms.bStarted = bStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundStatics.PostAkEventWithEnvZoneAtLocation
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundStatics::PostAkEventWithEnvZoneAtLocation(class UAkAudioEvent* Event, const struct FVector& Location, class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostAkEventWithEnvZoneAtLocation");

	Params::GzSoundStatics_PostAkEventWithEnvZoneAtLocation Parms{};

	Parms.Event = Event;
	Parms.Location = std::move(Location);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundStatics.PostLocalAnnouncement
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSoundStatics::PostLocalAnnouncement(const class UObject* WorldContext, const struct FGameplayTag& AnnouncerTag, const struct FGameplayTag& VoiceLineTag, bool bStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostLocalAnnouncement");

	Params::GzSoundStatics_PostLocalAnnouncement Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnnouncerTag = std::move(AnnouncerTag);
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.bStarted = bStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.PostLocalAnnouncementAndWaitForEnd
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       AnnouncementEndDelegate                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSoundStatics::PostLocalAnnouncementAndWaitForEnd(const class UObject* WorldContext, const struct FGameplayTag& AnnouncerTag, const struct FGameplayTag& VoiceLineTag, bool bStarted, const TDelegate<void()>& AnnouncementEndDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostLocalAnnouncementAndWaitForEnd");

	Params::GzSoundStatics_PostLocalAnnouncementAndWaitForEnd Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnnouncerTag = std::move(AnnouncerTag);
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.bStarted = bStarted;
	Parms.AnnouncementEndDelegate = AnnouncementEndDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.PostLocalAnnouncementByData
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPingVoiceLineData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSoundStatics::PostLocalAnnouncementByData(const class UObject* WorldContext, const struct FGameplayTag& AnnouncerTag, const struct FGzPingVoiceLineData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostLocalAnnouncementByData");

	Params::GzSoundStatics_PostLocalAnnouncementByData Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnnouncerTag = std::move(AnnouncerTag);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.PostLocalAnnouncementWithPriority
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     AnnouncerTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     VoiceLineTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStarted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PriorityOverride                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       AnnouncementEndDelegate                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSoundStatics::PostLocalAnnouncementWithPriority(const class UObject* WorldContext, const struct FGameplayTag& AnnouncerTag, const struct FGameplayTag& VoiceLineTag, bool bStarted, int32 PriorityOverride, const TDelegate<void()>& AnnouncementEndDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "PostLocalAnnouncementWithPriority");

	Params::GzSoundStatics_PostLocalAnnouncementWithPriority Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnnouncerTag = std::move(AnnouncerTag);
	Parms.VoiceLineTag = std::move(VoiceLineTag);
	Parms.bStarted = bStarted;
	Parms.PriorityOverride = PriorityOverride;
	Parms.AnnouncementEndDelegate = AnnouncementEndDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSoundStatics.SetInGameSoundEnabled
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolationTimeMs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundStatics::SetInGameSoundEnabled(bool bEnable, float InterpolationTimeMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "SetInGameSoundEnabled");

	Params::GzSoundStatics_SetInGameSoundEnabled Parms{};

	Parms.bEnable = bEnable;
	Parms.InterpolationTimeMs = InterpolationTimeMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundStatics.SetInGameSoundPercent
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolationTimeMs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundStatics::SetInGameSoundPercent(float Percent, float InterpolationTimeMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "SetInGameSoundPercent");

	Params::GzSoundStatics_SetInGameSoundPercent Parms{};

	Parms.Percent = Percent;
	Parms.InterpolationTimeMs = InterpolationTimeMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSoundStatics.SetSoundState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGzSoundStateKey                 State                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSoundStatics::SetSoundState(const struct FGzSoundStateKey& State, class AActor* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzSoundStatics", "SetSoundState");

	Params::GzSoundStatics_SetSoundState Parms{};

	Parms.State = std::move(State);
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzModularEnvStaticMeshComponent.GetMeshSlotOptions
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzModularEnvStaticMeshComponent::GetMeshSlotOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzModularEnvStaticMeshComponent", "GetMeshSlotOptions");

	Params::GzModularEnvStaticMeshComponent_GetMeshSlotOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpectatorPawn.SpectateNextPlayer
// (Final, Native, Protected, BlueprintCallable)

void AGzSpectatorPawn::SpectateNextPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpectatorPawn", "SpectateNextPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpectatorPawn.SpectatePrevPlayer
// (Final, Native, Protected, BlueprintCallable)

void AGzSpectatorPawn::SpectatePrevPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpectatorPawn", "SpectatePrevPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpectatorPawn.GetSpectatedPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* AGzSpectatorPawn::GetSpectatedPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpectatorPawn", "GetSpectatedPawn");

	Params::GzSpectatorPawn_GetSpectatedPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpectatorPawn.GetSpectatedPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGzSpectatorPawn::GetSpectatedPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpectatorPawn", "GetSpectatedPlayer");

	Params::GzSpectatorPawn_GetSpectatedPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarGroundTargetPreviewActor.NetMulticast_ActivateWarning
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void AGzMortarGroundTargetPreviewActor::NetMulticast_ActivateWarning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarGroundTargetPreviewActor", "NetMulticast_ActivateWarning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarGroundTargetPreviewActor.ShowProjectileWarnings
// (Event, Protected, BlueprintEvent)

void AGzMortarGroundTargetPreviewActor::ShowProjectileWarnings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarGroundTargetPreviewActor", "ShowProjectileWarnings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMortarLegsComponent.ApplyTabletInput_Horizontal
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMortarLegsComponent::ApplyTabletInput_Horizontal(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "ApplyTabletInput_Horizontal");

	Params::GzMortarLegsComponent_ApplyTabletInput_Horizontal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.ApplyTabletInput_Vertical
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMortarLegsComponent::ApplyTabletInput_Vertical(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "ApplyTabletInput_Vertical");

	Params::GzMortarLegsComponent_ApplyTabletInput_Vertical Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.CancelTargetSelection
// (Final, Native, Protected, BlueprintCallable)

void UGzMortarLegsComponent::CancelTargetSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "CancelTargetSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.OnAssetsLoaded
// (Final, Native, Protected)

void UGzMortarLegsComponent::OnAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "OnAssetsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.OnEventTagAdded
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMortarLegsComponent::OnEventTagAdded(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "OnEventTagAdded");

	Params::GzMortarLegsComponent_OnEventTagAdded Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.OnShowMap
// (Final, Native, Protected)

void UGzMortarLegsComponent::OnShowMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "OnShowMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.SelectMapTarget
// (Final, Native, Protected, BlueprintCallable)

void UGzMortarLegsComponent::SelectMapTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "SelectMapTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegsComponent.IsTabletVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMortarLegsComponent::IsTabletVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegsComponent", "IsTabletVisible");

	Params::GzMortarLegsComponent_IsTabletVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarLegs_MapScreen.AllTargetsSelected
// (Final, Native, Protected)

void UGzMortarLegs_MapScreen::AllTargetsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "AllTargetsSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreen.CreateMapController
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGzMortarLegs_MapScreenController*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMortarLegs_MapScreenController* UGzMortarLegs_MapScreen::CreateMapController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "CreateMapController");

	Params::GzMortarLegs_MapScreen_CreateMapController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzMortarLegs_MapScreen.GzMapButtonEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzMortarLegs_MapScreen::GzMapButtonEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "GzMapButtonEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMortarLegs_MapScreen.HideMap
// (Native, Event, Public, BlueprintEvent)

void UGzMortarLegs_MapScreen::HideMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "HideMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreen.OnMapReady
// (Final, Native, Protected)

void UGzMortarLegs_MapScreen::OnMapReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "OnMapReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreen.ShowMap
// (Native, Event, Public, BlueprintEvent)

void UGzMortarLegs_MapScreen::ShowMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "ShowMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreen.GetTargetLocations2D
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVector2D>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVector2D> UGzMortarLegs_MapScreen::GetTargetLocations2D() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreen", "GetTargetLocations2D");

	Params::GzMortarLegs_MapScreen_GetTargetLocations2D Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarLegs_MapScreenController.AddTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        WorldLocation2D                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMortarLegs_MapScreenController::AddTargetLocation(const struct FVector2D& WorldLocation2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "AddTargetLocation");

	Params::GzMortarLegs_MapScreenController_AddTargetLocation Parms{};

	Parms.WorldLocation2D = std::move(WorldLocation2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarLegs_MapScreenController.OnHideMap
// (Native, Event, Public, BlueprintEvent)

void UGzMortarLegs_MapScreenController::OnHideMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "OnHideMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreenController.OnShowMap
// (Native, Event, Public, BlueprintEvent)

void UGzMortarLegs_MapScreenController::OnShowMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "OnShowMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreenController.UpdateMapTransform
// (Final, Native, Public, BlueprintCallable)

void UGzMortarLegs_MapScreenController::UpdateMapTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "UpdateMapTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarLegs_MapScreenController.CalculateMapRectangle
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox2D                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox2D UGzMortarLegs_MapScreenController::CalculateMapRectangle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "CalculateMapRectangle");

	Params::GzMortarLegs_MapScreenController_CalculateMapRectangle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarLegs_MapScreenController.GetTargetLocations2D
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVector2D>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVector2D> UGzMortarLegs_MapScreenController::GetTargetLocations2D() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "GetTargetLocations2D");

	Params::GzMortarLegs_MapScreenController_GetTargetLocations2D Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMortarLegs_MapScreenController.IsValidTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        WorldLocation2D                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMortarLegs_MapScreenController::IsValidTargetLocation(const struct FVector2D& WorldLocation2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarLegs_MapScreenController", "IsValidTargetLocation");

	Params::GzMortarLegs_MapScreenController_IsValidTargetLocation Parms{};

	Parms.WorldLocation2D = std::move(WorldLocation2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSplineMapWidget.Init
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzMapWidget*                     InParentMap                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  WorldPoints                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInClosedLoop                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSplineMapWidget::Init(class UGzMapWidget* InParentMap, const TArray<struct FVector>& WorldPoints, bool bInClosedLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSplineMapWidget", "Init");

	Params::GzSplineMapWidget_Init Parms{};

	Parms.InParentMap = InParentMap;
	Parms.WorldPoints = std::move(WorldPoints);
	Parms.bInClosedLoop = bInClosedLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSplineMapWidget.InitWith2DPoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGzMapWidget*                     InParentMap                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                WorldPoints                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInClosedLoop                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSplineMapWidget::InitWith2DPoints(class UGzMapWidget* InParentMap, const TArray<struct FVector2D>& WorldPoints, bool bInClosedLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSplineMapWidget", "InitWith2DPoints");

	Params::GzSplineMapWidget_InitWith2DPoints Parms{};

	Parms.InParentMap = InParentMap;
	Parms.WorldPoints = std::move(WorldPoints);
	Parms.bInClosedLoop = bInClosedLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSplineMapWidget.InitWithSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzMapWidget*                     InParentMap                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 InSpline                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InStart                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InEnd                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSplineMapWidget::InitWithSpline(class UGzMapWidget* InParentMap, class USplineComponent* InSpline, int32 InStart, int32 InEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSplineMapWidget", "InitWithSpline");

	Params::GzSplineMapWidget_InitWithSpline Parms{};

	Parms.InParentMap = InParentMap;
	Parms.InSpline = InSpline;
	Parms.InStart = InStart;
	Parms.InEnd = InEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarProjectile.DropOverTarget
// (Final, Native, Protected)

void AGzMortarProjectile::DropOverTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarProjectile", "DropOverTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMortarProjectile.HideProjectile
// (Final, Native, Protected)

void AGzMortarProjectile::HideProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMortarProjectile", "HideProjectile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.CopyPoseFromSkeletalComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InComponentToCopy                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "CopyPoseFromSkeletalComponent");

	Params::GzPoseableSkeletalMeshComponent_CopyPoseFromSkeletalComponent Parms{};

	Parms.InComponentToCopy = InComponentToCopy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.GetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPoseableSkeletalMeshComponent::GetBoneLocationByName(class FName BoneName, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "GetBoneLocationByName");

	Params::GzPoseableSkeletalMeshComponent_GetBoneLocationByName Parms{};

	Parms.BoneName = BoneName;
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPoseableSkeletalMeshComponent.GetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGzPoseableSkeletalMeshComponent::GetBoneRotationByName(class FName BoneName, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "GetBoneRotationByName");

	Params::GzPoseableSkeletalMeshComponent_GetBoneRotationByName Parms{};

	Parms.BoneName = BoneName;
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPoseableSkeletalMeshComponent.GetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPoseableSkeletalMeshComponent::GetBoneScaleByName(class FName BoneName, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "GetBoneScaleByName");

	Params::GzPoseableSkeletalMeshComponent_GetBoneScaleByName Parms{};

	Parms.BoneName = BoneName;
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPoseableSkeletalMeshComponent.GetBoneTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UGzPoseableSkeletalMeshComponent::GetBoneTransformByName(class FName BoneName, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "GetBoneTransformByName");

	Params::GzPoseableSkeletalMeshComponent_GetBoneTransformByName Parms{};

	Parms.BoneName = BoneName;
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPoseableSkeletalMeshComponent.ResetBoneTransformByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::ResetBoneTransformByName(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "ResetBoneTransformByName");

	Params::GzPoseableSkeletalMeshComponent_ResetBoneTransformByName Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.SetBoneLocationAndQuatByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            InQuat                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::SetBoneLocationAndQuatByName(class FName BoneName, const struct FVector& InLocation, const struct FQuat& InQuat, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "SetBoneLocationAndQuatByName");

	Params::GzPoseableSkeletalMeshComponent_SetBoneLocationAndQuatByName Parms{};

	Parms.BoneName = BoneName;
	Parms.InLocation = std::move(InLocation);
	Parms.InQuat = std::move(InQuat);
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.SetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::SetBoneLocationByName(class FName BoneName, const struct FVector& InLocation, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "SetBoneLocationByName");

	Params::GzPoseableSkeletalMeshComponent_SetBoneLocationByName Parms{};

	Parms.BoneName = BoneName;
	Parms.InLocation = std::move(InLocation);
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.SetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::SetBoneRotationByName(class FName BoneName, const struct FRotator& InRotation, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "SetBoneRotationByName");

	Params::GzPoseableSkeletalMeshComponent_SetBoneRotationByName Parms{};

	Parms.BoneName = BoneName;
	Parms.InRotation = std::move(InRotation);
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.SetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InScale3D                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::SetBoneScaleByName(class FName BoneName, const struct FVector& InScale3D, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "SetBoneScaleByName");

	Params::GzPoseableSkeletalMeshComponent_SetBoneScaleByName Parms{};

	Parms.BoneName = BoneName;
	Parms.InScale3D = std::move(InScale3D);
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPoseableSkeletalMeshComponent.SetBoneTransformByName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneSpaces                             BoneSpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPoseableSkeletalMeshComponent::SetBoneTransformByName(class FName BoneName, const struct FTransform& InTransform, EBoneSpaces BoneSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPoseableSkeletalMeshComponent", "SetBoneTransformByName");

	Params::GzPoseableSkeletalMeshComponent_SetBoneTransformByName Parms{};

	Parms.BoneName = BoneName;
	Parms.InTransform = std::move(InTransform);
	Parms.BoneSpace = BoneSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovableMapController.AreZoomLevelsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMovableMapController::AreZoomLevelsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "AreZoomLevelsEnabled");

	Params::GzMovableMapController_AreZoomLevelsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMovableMapController.GetTargetZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ZoomLevelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzMovableMapController::GetTargetZoomLevel(int32 ZoomLevelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "GetTargetZoomLevel");

	Params::GzMovableMapController_GetTargetZoomLevel Parms{};

	Parms.ZoomLevelIndex = ZoomLevelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMovableMapController.GetZoomLevelsCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzMovableMapController::GetZoomLevelsCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "GetZoomLevelsCount");

	Params::GzMovableMapController_GetZoomLevelsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMovableMapController.OnAnalogValueChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FAnalogInputEvent                InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMovableMapController::OnAnalogValueChanged(const struct FAnalogInputEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "OnAnalogValueChanged");

	Params::GzMovableMapController_OnAnalogValueChanged Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovableMapController.OnKeyDown
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMovableMapController::OnKeyDown(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "OnKeyDown");

	Params::GzMovableMapController_OnKeyDown Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovableMapController.OnMouseButtonDown
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGzMovableMapController::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "OnMouseButtonDown");

	Params::GzMovableMapController_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMovableMapController.OnMouseLeave
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMovableMapController::OnMouseLeave(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "OnMouseLeave");

	Params::GzMovableMapController_OnMouseLeave Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovableMapController.OnMouseWheel
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMovableMapController::OnMouseWheel(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "OnMouseWheel");

	Params::GzMovableMapController_OnMouseWheel Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovableMapController.SetTrackingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMovableMapController::SetTrackingTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovableMapController", "SetTrackingTarget");

	Params::GzMovableMapController_SetTrackingTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMovementSoundComponent.OnCustomizationChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGzCharacterCustomizationProfile NewCustomizationProfile                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzMovementSoundComponent::OnCustomizationChanged(const struct FGzCharacterCustomizationProfile& NewCustomizationProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMovementSoundComponent", "OnCustomizationChanged");

	Params::GzMovementSoundComponent_OnCustomizationChanged Parms{};

	Parms.NewCustomizationProfile = std::move(NewCustomizationProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPostProcessControllerComponent.AddPostProcessBlend
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzPostProcessFX>     FXClass                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzPostProcessFX*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPostProcessFX* UGzPostProcessControllerComponent::AddPostProcessBlend(TSubclassOf<class UGzPostProcessFX> FXClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessControllerComponent", "AddPostProcessBlend");

	Params::GzPostProcessControllerComponent_AddPostProcessBlend Parms{};

	Parms.FXClass = FXClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessControllerComponent.AddPostProcessInstance
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UGzPostProcessFX*                 NewFX                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzPostProcessFX*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPostProcessFX* UGzPostProcessControllerComponent::AddPostProcessInstance(class UGzPostProcessFX* NewFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessControllerComponent", "AddPostProcessInstance");

	Params::GzPostProcessControllerComponent_AddPostProcessInstance Parms{};

	Parms.NewFX = NewFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPostProcessControllerComponent.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPostProcessControllerComponent::OnViewTargetChanged(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessControllerComponent", "OnViewTargetChanged");

	Params::GzPostProcessControllerComponent_OnViewTargetChanged Parms{};

	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPostProcessControllerComponent.RemovePostProcess
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UGzPostProcessFX*                 PostProcessFX                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPostProcessControllerComponent::RemovePostProcess(class UGzPostProcessFX* PostProcessFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessControllerComponent", "RemovePostProcess");

	Params::GzPostProcessControllerComponent_RemovePostProcess Parms{};

	Parms.PostProcessFX = PostProcessFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPostProcessControllerComponent.GetViewTargetCameraComponent
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCameraComponent* UGzPostProcessControllerComponent::GetViewTargetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPostProcessControllerComponent", "GetViewTargetCameraComponent");

	Params::GzPostProcessControllerComponent_GetViewTargetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLocomotionStatics.BreakLocomotionCurrentStates
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLocomotionCurrentStates         Parameters                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EMovementMode                           PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionMovementState                MovementState                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionMovementState                PrevMovementState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionMovementAction               MovementAction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionRotationMode                 RotationMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionGait                         ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionStance                       ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionViewMode                     ViewMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELocomotionOverlayState                 OverlayState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLocomotionStatics::BreakLocomotionCurrentStates(const struct FLocomotionCurrentStates& Parameters, EMovementMode* PawnMovementMode, ELocomotionMovementState* MovementState, ELocomotionMovementState* PrevMovementState, ELocomotionMovementAction* MovementAction, ELocomotionRotationMode* RotationMode, ELocomotionGait* ActualGait, ELocomotionStance* ActualStance, ELocomotionViewMode* ViewMode, ELocomotionOverlayState* OverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLocomotionStatics", "BreakLocomotionCurrentStates");

	Params::GzLocomotionStatics_BreakLocomotionCurrentStates Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState != nullptr)
		*MovementState = Parms.MovementState;

	if (PrevMovementState != nullptr)
		*PrevMovementState = Parms.PrevMovementState;

	if (MovementAction != nullptr)
		*MovementAction = Parms.MovementAction;

	if (RotationMode != nullptr)
		*RotationMode = Parms.RotationMode;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode != nullptr)
		*ViewMode = Parms.ViewMode;

	if (OverlayState != nullptr)
		*OverlayState = Parms.OverlayState;
}


// Function G01.GzLocomotionStatics.BreakLocomotionEssentialValues
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLocomotionEssentialValues       Parameters                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Acceleration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMoving                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasMovementInput                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovementInputAmount                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   AimYawRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzLocomotionStatics::BreakLocomotionEssentialValues(const struct FLocomotionEssentialValues& Parameters, struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* bIsMoving, bool* bHasMovementInput, float* Speed, float* MovementInputAmount, struct FRotator* AimingRotation, float* AimYawRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLocomotionStatics", "BreakLocomotionEssentialValues");

	Params::GzLocomotionStatics_BreakLocomotionEssentialValues Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration != nullptr)
		*Acceleration = std::move(Parms.Acceleration);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (bIsMoving != nullptr)
		*bIsMoving = Parms.bIsMoving;

	if (bHasMovementInput != nullptr)
		*bHasMovementInput = Parms.bHasMovementInput;

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (MovementInputAmount != nullptr)
		*MovementInputAmount = Parms.MovementInputAmount;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate != nullptr)
		*AimYawRate = Parms.AimYawRate;
}


// Function G01.GzLocomotionStatics.GetAllAnimMetaData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*                  Animation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimMetaData*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAnimMetaData*> UGzLocomotionStatics::GetAllAnimMetaData(class UAnimationAsset* Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLocomotionStatics", "GetAllAnimMetaData");

	Params::GzLocomotionStatics_GetAllAnimMetaData Parms{};

	Parms.Animation = Animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzLocomotionStatics.GetAnimMetaDataByClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*                  Animation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGzTraversalAnimMetaData>MetaDataClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzTraversalAnimMetaData*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzTraversalAnimMetaData* UGzLocomotionStatics::GetAnimMetaDataByClass(class UAnimationAsset* Animation, TSubclassOf<class UGzTraversalAnimMetaData> MetaDataClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzLocomotionStatics", "GetAnimMetaDataByClass");

	Params::GzLocomotionStatics_GetAnimMetaDataByClass Parms{};

	Parms.Animation = Animation;
	Parms.MetaDataClass = MetaDataClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Condition.OnConditionStateChanged
// (Final, Native, Private)
// Parameters:
// EGzConditionState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Condition::OnConditionStateChanged(EGzConditionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Condition", "OnConditionStateChanged");

	Params::GzMTW_Condition_OnConditionStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Condition.OnStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzConditionState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Condition::OnStateChanged_BP(EGzConditionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Condition", "OnStateChanged_BP");

	Params::GzMTW_Condition_OnStateChanged_BP Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMTW_Condition.GetConditionState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzConditionState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzConditionState UGzMTW_Condition::GetConditionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Condition", "GetConditionState");

	Params::GzMTW_Condition_GetConditionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Condition.IsInActiveState
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// EGzConditionState                       State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMTW_Condition::IsInActiveState(EGzConditionState State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Condition", "IsInActiveState");

	Params::GzMTW_Condition_IsInActiveState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Container.OnChildStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Container::OnChildStateChanged(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Container", "OnChildStateChanged");

	Params::GzMTW_Container_OnChildStateChanged Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Container.OnInitContainer
// (Event, Protected, BlueprintEvent)

void UGzMTW_Container::OnInitContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Container", "OnInitContainer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMTW_Decorator.OnChildStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Decorator::OnChildStateChanged(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Decorator", "OnChildStateChanged");

	Params::GzMTW_Decorator_OnChildStateChanged Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Decorator.OnInitDecorator
// (Event, Protected, BlueprintEvent)

void UGzMTW_Decorator::OnInitDecorator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Decorator", "OnInitDecorator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzMTW_Objective.OnObjectiveStateChanged
// (Final, Native, Private)
// Parameters:
// EGzObjectiveState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Objective::OnObjectiveStateChanged(EGzObjectiveState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Objective", "OnObjectiveStateChanged");

	Params::GzMTW_Objective_OnObjectiveStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzMTW_Objective.OnStateChanged_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGzObjectiveState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzMTW_Objective::OnStateChanged_BP(EGzObjectiveState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Objective", "OnStateChanged_BP");

	Params::GzMTW_Objective_OnStateChanged_BP Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzMTW_Objective.GetObjectiveState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzObjectiveState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzObjectiveState UGzMTW_Objective::GetObjectiveState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Objective", "GetObjectiveState");

	Params::GzMTW_Objective_GetObjectiveState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzMTW_Objective.IsInActiveState
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// EGzObjectiveState                       State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzMTW_Objective::IsInActiveState(EGzObjectiveState State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzMTW_Objective", "IsInActiveState");

	Params::GzMTW_Objective_IsInActiveState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionAnimationInterface.OnJumped
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ILocomotionAnimationInterface::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionAnimationInterface", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionAnimationInterface.OnReachedJumpApex
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ILocomotionAnimationInterface::OnReachedJumpApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionAnimationInterface", "OnReachedJumpApex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionAnimationInterface.OnShotPerformed
// (Event, Public, BlueprintEvent)

void ILocomotionAnimationInterface::OnShotPerformed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionAnimationInterface", "OnShotPerformed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionAnimationInterface.SetGroundedEntryState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELocomotionGroundedEntryState           EntryState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILocomotionAnimationInterface::SetGroundedEntryState(ELocomotionGroundedEntryState EntryState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionAnimationInterface", "SetGroundedEntryState");

	Params::LocomotionAnimationInterface_SetGroundedEntryState Parms{};

	Parms.EntryState = EntryState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionAnimationInterface.SetOverlayOverrideState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OverlayOverride                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILocomotionAnimationInterface::SetOverlayOverrideState(int32 OverlayOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionAnimationInterface", "SetOverlayOverrideState");

	Params::LocomotionAnimationInterface_SetOverlayOverrideState Parms{};

	Parms.OverlayOverride = OverlayOverride;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzNavigationRoot.GetNavigationRoot
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationRoot*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNavigationRoot* UGzNavigationRoot::GetNavigationRoot(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzNavigationRoot", "GetNavigationRoot");

	Params::GzNavigationRoot_GetNavigationRoot Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.AddWidget
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UGzNavigationWidget*              Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::AddWidget(class UGzNavigationWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidget");

	Params::GzNavigationRoot_AddWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.AddWidgetCached
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNavigationWidget* UGzNavigationRoot::AddWidgetCached(TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidgetCached");

	Params::GzNavigationRoot_AddWidgetCached Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.AddWidgetSoft
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGzNavigationWidget* NavigationWidget)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::AddWidgetSoft(TSoftClassPtr<class UClass> WidgetClass, TDelegate<void(class UGzNavigationWidget* NavigationWidget)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidgetSoft");

	Params::GzNavigationRoot_AddWidgetSoft Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.AddWidgetToLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationWidget*              Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::AddWidgetToLayer(class FName Layer, class UGzNavigationWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidgetToLayer");

	Params::GzNavigationRoot_AddWidgetToLayer Parms{};

	Parms.Layer = Layer;
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.AddWidgetToLayerCached
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNavigationWidget* UGzNavigationRoot::AddWidgetToLayerCached(class FName Layer, TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidgetToLayerCached");

	Params::GzNavigationRoot_AddWidgetToLayerCached Parms{};

	Parms.Layer = Layer;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.AddWidgetToLayerSoft
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGzNavigationWidget* NavigationWidget)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::AddWidgetToLayerSoft(class FName Layer, TSoftClassPtr<class UClass> WidgetClass, TDelegate<void(class UGzNavigationWidget* NavigationWidget)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "AddWidgetToLayerSoft");

	Params::GzNavigationRoot_AddWidgetToLayerSoft Parms{};

	Parms.Layer = Layer;
	Parms.WidgetClass = WidgetClass;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.DisableAnalogCursor
// (Final, Native, Public, BlueprintCallable)

void UGzNavigationRoot::DisableAnalogCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "DisableAnalogCursor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.EnableAnalogCursor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ContextWidget                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::EnableAnalogCursor(const class UWidget* ContextWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "EnableAnalogCursor");

	Params::GzNavigationRoot_EnableAnalogCursor Parms{};

	Parms.ContextWidget = ContextWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.ForceHideCannotBeAddedWidgets
// (Final, Native, Public, BlueprintCallable)

void UGzNavigationRoot::ForceHideCannotBeAddedWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "ForceHideCannotBeAddedWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.GetAllByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzNavigationWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UGzNavigationWidget*> UGzNavigationRoot::GetAllByClass(TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "GetAllByClass");

	Params::GzNavigationRoot_GetAllByClass Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.GetFirstByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzNavigationWidget* UGzNavigationRoot::GetFirstByClass(TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "GetFirstByClass");

	Params::GzNavigationRoot_GetFirstByClass Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.OnWidgetPreloaded
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UGzNavigationWidget*              NavigationWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::OnWidgetPreloaded(class UGzNavigationWidget* NavigationWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "OnWidgetPreloaded");

	Params::GzNavigationRoot_OnWidgetPreloaded Parms{};

	Parms.NavigationWidget = NavigationWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.PopUIInputMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzInputControlsComponent*        ControlsComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::PopUIInputMapping(class UGzInputControlsComponent* ControlsComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "PopUIInputMapping");

	Params::GzNavigationRoot_PopUIInputMapping Parms{};

	Parms.ControlsComp = ControlsComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.PopWidgetFromLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::PopWidgetFromLayer(class FName Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "PopWidgetFromLayer");

	Params::GzNavigationRoot_PopWidgetFromLayer Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.PushUIInputMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzInputControlsComponent*        ControlsComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::PushUIInputMapping(class UGzInputControlsComponent* ControlsComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "PushUIInputMapping");

	Params::GzNavigationRoot_PushUIInputMapping Parms{};

	Parms.ControlsComp = ControlsComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.RemoveAllByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::RemoveAllByClass(TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "RemoveAllByClass");

	Params::GzNavigationRoot_RemoveAllByClass Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.RemoveFirstByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGzNavigationWidget>  WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::RemoveFirstByClass(TSubclassOf<class UGzNavigationWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "RemoveFirstByClass");

	Params::GzNavigationRoot_RemoveFirstByClass Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.RemoveWidget
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UGzNavigationWidget*              Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::RemoveWidget(class UGzNavigationWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "RemoveWidget");

	Params::GzNavigationRoot_RemoveWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.RemoveWidgetFromLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzNavigationWidget*              Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::RemoveWidgetFromLayer(class FName Layer, class UGzNavigationWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "RemoveWidgetFromLayer");

	Params::GzNavigationRoot_RemoveWidgetFromLayer Parms{};

	Parms.Layer = Layer;
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.SetAnalogCursorWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InAnalogCursorWidget                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::SetAnalogCursorWidget(class UUserWidget* InAnalogCursorWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "SetAnalogCursorWidget");

	Params::GzNavigationRoot_SetAnalogCursorWidget Parms{};

	Parms.InAnalogCursorWidget = InAnalogCursorWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.SimulateKeyPress
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             InputEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzNavigationRoot::SimulateKeyPress(const struct FKey& Key, EInputEvent InputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "SimulateKeyPress");

	Params::GzNavigationRoot_SimulateKeyPress Parms{};

	Parms.Key = std::move(Key);
	Parms.InputEvent = InputEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNavigationRoot.GetLayerStack
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LayerName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzActivatableWidgetStack*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzActivatableWidgetStack* UGzNavigationRoot::GetLayerStack(class FName LayerName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "GetLayerStack");

	Params::GzNavigationRoot_GetLayerStack Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.GetUIMappingConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzPawnInputMappingConfig*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzPawnInputMappingConfig* UGzNavigationRoot::GetUIMappingConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "GetUIMappingConfig");

	Params::GzNavigationRoot_GetUIMappingConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationRoot.IsTopWidget
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzNavigationWidget*              Widget                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzNavigationRoot::IsTopWidget(const class UGzNavigationWidget* Widget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNavigationRoot", "IsTopWidget");

	Params::GzNavigationRoot_IsTopWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNavigationUtility.GetLayerNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzNavigationUtility::GetLayerNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzNavigationUtility", "GetLayerNames");

	Params::GzNavigationUtility_GetLayerNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNegateCondition.MakeNegateCondition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Condition                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCondition* UGzNegateCondition::MakeNegateCondition(class AGzAdvancedMission* Mission, class UGzCondition* Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzNegateCondition", "MakeNegateCondition");

	Params::GzNegateCondition_MakeNegateCondition Parms{};

	Parms.Mission = Mission;
	Parms.Condition = Condition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNegateObjective.MakeNegateObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzNegateObjective::MakeNegateObjective(class AGzAdvancedMission* Mission, class UGzObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzNegateObjective", "MakeNegateObjective");

	Params::GzNegateObjective_MakeNegateObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProgressLogWidget.AddLogEntry
// (Final, Native, Private, HasOutParams)
// Parameters:
// TSubclassOf<class UGzProgressLogEntryWidget>ProgressWidgetClass                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProgressLogWidget::AddLogEntry(const TSubclassOf<class UGzProgressLogEntryWidget>& ProgressWidgetClass, float Duration, int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogWidget", "AddLogEntry");

	Params::GzProgressLogWidget_AddLogEntry Parms{};

	Parms.ProgressWidgetClass = ProgressWidgetClass;
	Parms.Duration = Duration;
	Parms.Handle = Handle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressLogWidget.CancelProgress
// (Final, Native, Private)
// Parameters:
// int32                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProgressLogWidget::CancelProgress(int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogWidget", "CancelProgress");

	Params::GzProgressLogWidget_CancelProgress Parms{};

	Parms.Handle = Handle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressLogWidget.UpdateEntryProgress
// (Final, Native, Private)
// Parameters:
// int32                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProgressLogWidget::UpdateEntryProgress(int32 Handle, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogWidget", "UpdateEntryProgress");

	Params::GzProgressLogWidget_UpdateEntryProgress Parms{};

	Parms.Handle = Handle;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNonPlayerCharacter.OnRep_TeamId
// (Final, Native, Private)

void AGzNonPlayerCharacter::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNonPlayerCharacter", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.EnableHomingLeading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableLeading                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileMovementComponent::EnableHomingLeading(const bool bEnableLeading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "EnableHomingLeading");

	Params::GzProjectileMovementComponent_EnableHomingLeading Parms{};

	Parms.bEnableLeading = bEnableLeading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.SetDragEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDragEnabled                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileMovementComponent::SetDragEnabled(const bool bNewDragEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "SetDragEnabled");

	Params::GzProjectileMovementComponent_SetDragEnabled Parms{};

	Parms.bNewDragEnabled = bNewDragEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.SetHomingLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewHomingLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileMovementComponent::SetHomingLocation(const struct FVector& NewHomingLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "SetHomingLocation");

	Params::GzProjectileMovementComponent_SetHomingLocation Parms{};

	Parms.NewHomingLocation = std::move(NewHomingLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.SetHomingMagnitudeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMagnitudeMultiplier                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileMovementComponent::SetHomingMagnitudeMultiplier(const float NewMagnitudeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "SetHomingMagnitudeMultiplier");

	Params::GzProjectileMovementComponent_SetHomingMagnitudeMultiplier Parms{};

	Parms.NewMagnitudeMultiplier = NewMagnitudeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.SetHomingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzProjectileMovementComponent::SetHomingTarget(class USceneComponent* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "SetHomingTarget");

	Params::GzProjectileMovementComponent_SetHomingTarget Parms{};

	Parms.TargetComponent = TargetComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.StopHoming
// (Final, Native, Public, BlueprintCallable)

void UGzProjectileMovementComponent::StopHoming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "StopHoming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.StopHomingTimeout
// (Final, Native, Public, BlueprintCallable)

void UGzProjectileMovementComponent::StopHomingTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "StopHomingTimeout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMovementComponent.GetDistanceToHomingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzProjectileMovementComponent::GetDistanceToHomingTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "GetDistanceToHomingTarget");

	Params::GzProjectileMovementComponent_GetDistanceToHomingTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProjectileMovementComponent.GetDistanceToHomingTargetSquared
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzProjectileMovementComponent::GetDistanceToHomingTargetSquared() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "GetDistanceToHomingTargetSquared");

	Params::GzProjectileMovementComponent_GetDistanceToHomingTargetSquared Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProjectileMovementComponent.GetHomingTargetLeadingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzProjectileMovementComponent::GetHomingTargetLeadingLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMovementComponent", "GetHomingTargetLeadingLocation");

	Params::GzProjectileMovementComponent_GetHomingTargetLeadingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.ContinueZoneShrinking
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzShrinkingZoneManager::ContinueZoneShrinking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "ContinueZoneShrinking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZoneManager.Init
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGzBaseZoneStageParams*>   ZoneParams                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzShrinkingZoneManager::Init(const TArray<class UGzBaseZoneStageParams*>& ZoneParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "Init");

	Params::GzShrinkingZoneManager_Init Parms{};

	Parms.ZoneParams = std::move(ZoneParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZoneManager.OnRep_Zone
// (Final, Native, Private)

void AGzShrinkingZoneManager::OnRep_Zone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "OnRep_Zone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZoneManager.PauseZoneShrinking
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzShrinkingZoneManager::PauseZoneShrinking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "PauseZoneShrinking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZoneManager.ResetZone
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzShrinkingZoneManager::ResetZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "ResetZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShrinkingZoneManager.StartNextStage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzShrinkingZoneManager::StartNextStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "StartNextStage");

	Params::GzShrinkingZoneManager_StartNextStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.CalculateTimeToGetConsumedByNextCircle
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzShrinkingZoneManager::CalculateTimeToGetConsumedByNextCircle(const struct FVector2D& WorldPosition, float* OutTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "CalculateTimeToGetConsumedByNextCircle");

	Params::GzShrinkingZoneManager_CalculateTimeToGetConsumedByNextCircle Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTime != nullptr)
		*OutTime = Parms.OutTime;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetCurrentCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCircle2D                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzCircle2D AGzShrinkingZoneManager::GetCurrentCircle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetCurrentCircle");

	Params::GzShrinkingZoneManager_GetCurrentCircle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetCurrentStage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzShrinkingZoneManager::GetCurrentStage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetCurrentStage");

	Params::GzShrinkingZoneManager_GetCurrentStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetSpawnHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzShrinkingZoneManager::GetSpawnHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetSpawnHeight");

	Params::GzShrinkingZoneManager_GetSpawnHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetStageCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzCircle2D                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzCircle2D AGzShrinkingZoneManager::GetStageCircle(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetStageCircle");

	Params::GzShrinkingZoneManager_GetStageCircle Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetTargetCircle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzCircle2D                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzCircle2D AGzShrinkingZoneManager::GetTargetCircle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetTargetCircle");

	Params::GzShrinkingZoneManager_GetTargetCircle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.GetZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzShrinkingZone*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzShrinkingZone* AGzShrinkingZoneManager::GetZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "GetZone");

	Params::GzShrinkingZoneManager_GetZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.IsShrinking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzShrinkingZoneManager::IsShrinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "IsShrinking");

	Params::GzShrinkingZoneManager_IsShrinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShrinkingZoneManager.OnRep_StageIndex
// (Final, Native, Private, Const)

void AGzShrinkingZoneManager::OnRep_StageIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShrinkingZoneManager", "OnRep_StageIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzPropagationComponent.GzPropagationControllerReplicated__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzPropagationComponent::GzPropagationControllerReplicated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationComponent", "GzPropagationControllerReplicated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPropagationComponent.OnRep_PropagationController
// (Final, Native, Protected)

void UGzPropagationComponent::OnRep_PropagationController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationComponent", "OnRep_PropagationController");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPropagationComponent.GetPropagationController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzSurfacePropagationController*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzSurfacePropagationController* UGzPropagationComponent::GetPropagationController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPropagationComponent", "GetPropagationController");

	Params::GzPropagationComponent_GetPropagationController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.AddUniqueNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzAIController*                  InValue                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCSpawner::AddUniqueNPC(class AGzAIController* InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "AddUniqueNPC");

	Params::GzNPCSpawner_AddUniqueNPC Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCSpawner.OnReinforcement
// (Event, Public, BlueprintEvent)

void AGzNPCSpawner::OnReinforcement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "OnReinforcement");

	UObject::ProcessEvent(Func, nullptr);
}


// SparseDelegateFunction G01.GzNPCSpawner.OnReinforcement_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGzNPCSpawner::OnReinforcement_BP__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "OnReinforcement_BP__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzNPCSpawner.OnSpawn
// (Event, Public, BlueprintEvent)

void AGzNPCSpawner::OnSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "OnSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// SparseDelegateFunction G01.GzNPCSpawner.OnSpawn_BP__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGzNPCSpawner::OnSpawn_BP__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "OnSpawn_BP__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzNPCSpawner.SetAlwaysInAlertState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzNPCSpawner::SetAlwaysInAlertState(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "SetAlwaysInAlertState");

	Params::GzNPCSpawner_SetAlwaysInAlertState Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzNPCSpawner.TrySpawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCSpawner::TrySpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "TrySpawn");

	Params::GzNPCSpawner_TrySpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.CanReinforcenent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCSpawner::CanReinforcenent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "CanReinforcenent");

	Params::GzNPCSpawner_CanReinforcenent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.CanSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCSpawner::CanSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "CanSpawn");

	Params::GzNPCSpawner_CanSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.GetAllNPCs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APawn*>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APawn*> AGzNPCSpawner::GetAllNPCs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "GetAllNPCs");

	Params::GzNPCSpawner_GetAllNPCs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.GetNPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* AGzNPCSpawner::GetNPC(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "GetNPC");

	Params::GzNPCSpawner_GetNPC Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.GetNPCNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzNPCSpawner::GetNPCNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "GetNPCNum");

	Params::GzNPCSpawner_GetNPCNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.GetRandomNPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* AGzNPCSpawner::GetRandomNPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "GetRandomNPC");

	Params::GzNPCSpawner_GetRandomNPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.GetZoneControlBox
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox AGzNPCSpawner::GetZoneControlBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "GetZoneControlBox");

	Params::GzNPCSpawner_GetZoneControlBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzNPCSpawner.IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzNPCSpawner::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzNPCSpawner", "IsEmpty");

	Params::GzNPCSpawner_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzOfflineSessionManager.IsInOfflineSession
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzOfflineSessionManager::IsInOfflineSession() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOfflineSessionManager", "IsInOfflineSession");

	Params::GzOfflineSessionManager_IsInOfflineSession Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZoneStatsCollector.SubmitZoneStats
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzGameStat                      Stat                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzZoneStatsCollector::SubmitZoneStats(int32 PlayerId, const struct FGzGameStat& Stat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneStatsCollector", "SubmitZoneStats");

	Params::GzZoneStatsCollector_SubmitZoneStats Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Stat = std::move(Stat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzOpenLootSpawner.CheckStageToSpawn
// (Final, Native, Private)

void AGzOpenLootSpawner::CheckStageToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOpenLootSpawner", "CheckStageToSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRectangleMarkerShape.SetRectSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InSize                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzRectangleMarkerShape::SetRectSize(const struct FVector2D& InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRectangleMarkerShape", "SetRectSize");

	Params::GzRectangleMarkerShape_SetRectSize Parms{};

	Parms.InSize = std::move(InSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRectangleMarkerShape.GetWorldRectSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UGzRectangleMarkerShape::GetWorldRectSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRectangleMarkerShape", "GetWorldRectSize");

	Params::GzRectangleMarkerShape_GetWorldRectSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzOverloadingZoneBordersExtension.OnZoneStartedOverload
// (Final, Native, Protected)
// Parameters:
// class AGzBattleRoyaleZone*              Zone                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzOverloadingZoneBordersExtension::OnZoneStartedOverload(class AGzBattleRoyaleZone* Zone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzOverloadingZoneBordersExtension", "OnZoneStartedOverload");

	Params::GzOverloadingZoneBordersExtension_OnZoneStartedOverload Parms{};

	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReplicatedCommandInterface.IsReplicatedDateInitialized
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGzReplicatedCommandInterface::IsReplicatedDateInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReplicatedCommandInterface", "IsReplicatedDateInitialized");

	Params::GzReplicatedCommandInterface_IsReplicatedDateInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPartyCustomization.GetDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzPartyCustomization::GetDisplayName(const class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GetDisplayName");

	Params::GzPartyCustomization_GetDisplayName Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPartyCustomization.GetMatchmakingStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPartyCustomization::GetMatchmakingStatus(const class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GetMatchmakingStatus");

	Params::GzPartyCustomization_GetMatchmakingStatus Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzPartyCustomization.GzMatchmakingStatusChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStatus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzMatchmakingStatusChanged__DelegateSignature(const class AGzCharacter* Character, bool bStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzMatchmakingStatusChanged__DelegateSignature");

	Params::GzPartyCustomization_GzMatchmakingStatusChanged__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.bStatus = bStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzPartyCustomization.GzMiscDataUpdated__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPartyMemberMiscData           Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzMiscDataUpdated__DelegateSignature(const class AGzCharacter* Character, const struct FGzPartyMemberMiscData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzMiscDataUpdated__DelegateSignature");

	Params::GzPartyCustomization_GzMiscDataUpdated__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzPartyCustomization.GzPartyMembershipStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bInParty                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzPartyMembershipStateChanged__DelegateSignature(bool bInParty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzPartyMembershipStateChanged__DelegateSignature");

	Params::GzPartyCustomization_GzPartyMembershipStateChanged__DelegateSignature Parms{};

	Parms.bInParty = bInParty;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzPartyCustomization.GzPlayerNameChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzPlayerNameChanged__DelegateSignature(const class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzPlayerNameChanged__DelegateSignature");

	Params::GzPartyCustomization_GzPlayerNameChanged__DelegateSignature Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzPartyCustomization.GzPlayerTalkingStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTalkingState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzPlayerTalkingStateChanged__DelegateSignature(const class AGzCharacter* Character, bool bTalkingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzPlayerTalkingStateChanged__DelegateSignature");

	Params::GzPartyCustomization_GzPlayerTalkingStateChanged__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.bTalkingState = bTalkingState;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzPartyCustomization.GzPlayerVoiceChatStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMuted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPartyCustomization::GzPlayerVoiceChatStateChanged__DelegateSignature(const class AGzCharacter* Character, bool bIsMuted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyCustomization", "GzPlayerVoiceChatStateChanged__DelegateSignature");

	Params::GzPartyCustomization_GzPlayerVoiceChatStateChanged__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.bIsMuted = bIsMuted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPartyMemberDisplaySlot.CreateCharacter
// (Final, Native, Public, BlueprintCallable)

void AGzPartyMemberDisplaySlot::CreateCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "CreateCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPartyMemberDisplaySlot.DebugEquipLoadout
// (Final, Native, Public, BlueprintCallable)

void AGzPartyMemberDisplaySlot::DebugEquipLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "DebugEquipLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPartyMemberDisplaySlot.OnCharacterCreatedBP
// (Event, Public, BlueprintEvent)

void AGzPartyMemberDisplaySlot::OnCharacterCreatedBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "OnCharacterCreatedBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPartyMemberDisplaySlot.OnCharacterRemovedBP
// (Event, Public, BlueprintEvent)

void AGzPartyMemberDisplaySlot::OnCharacterRemovedBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "OnCharacterRemovedBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPartyMemberDisplaySlot.RemoveCharacter
// (Final, Native, Public, BlueprintCallable)

void AGzPartyMemberDisplaySlot::RemoveCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "RemoveCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPartyMemberDisplaySlot.UpdateDisplaySlotInCharacter
// (Event, Public, BlueprintEvent)

void AGzPartyMemberDisplaySlot::UpdateDisplaySlotInCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPartyMemberDisplaySlot", "UpdateDisplaySlotInCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPathTrackingComponent.StartTracking
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzPathTrackingComponent::StartTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPathTrackingComponent", "StartTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPathTrackingComponent.StopTracking
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UGzPathTrackingComponent::StopTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPathTrackingComponent", "StopTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPathTrackingComponent.ShouldCloseLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPathTrackingComponent::ShouldCloseLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPathTrackingComponent", "ShouldCloseLoop");

	Params::GzPathTrackingComponent_ShouldCloseLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPaymentCheatExtension.LaunchPaymentCheckout
// (Final, Exec, Native, Public, Const)

void UGzPaymentCheatExtension::LaunchPaymentCheckout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPaymentCheatExtension", "LaunchPaymentCheckout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPaymentCheatExtension.MockBackendSubscriptionReceivedEvent
// (Final, Exec, Native, Public, Const)

void UGzPaymentCheatExtension::MockBackendSubscriptionReceivedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPaymentCheatExtension", "MockBackendSubscriptionReceivedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPaymentCheatExtension.OpenDummyUrlInPaymentBrowser
// (Final, Exec, Native, Public, Const)

void UGzPaymentCheatExtension::OpenDummyUrlInPaymentBrowser() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPaymentCheatExtension", "OpenDummyUrlInPaymentBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPaymentCheatExtension.OpenUrlInPaymentBrowser
// (Final, Exec, Native, Public, Const)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPaymentCheatExtension::OpenUrlInPaymentBrowser(const class FString& URL) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPaymentCheatExtension", "OpenUrlInPaymentBrowser");

	Params::GzPaymentCheatExtension_OpenUrlInPaymentBrowser Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPerformanceStatsWidget.UpdateStatsVisibility
// (Final, Native, Private)

void UGzPerformanceStatsWidget::UpdateStatsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPerformanceStatsWidget", "UpdateStatsVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPickableEffectsComponent.CreateLootBeam_BP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPickableEffectsComponent::CreateLootBeam_BP(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "CreateLootBeam_BP");

	Params::GzPickableEffectsComponent_CreateLootBeam_BP Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPickableEffectsComponent.CreateNiagara_BP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPickableEffectsComponent::CreateNiagara_BP(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "CreateNiagara_BP");

	Params::GzPickableEffectsComponent_CreateNiagara_BP Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPickableEffectsComponent.CreateSFX_BP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPickableEffectsComponent::CreateSFX_BP(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "CreateSFX_BP");

	Params::GzPickableEffectsComponent_CreateSFX_BP Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPickableEffectsComponent.DestroyLootBeam_BP
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGzPickableEffectsComponent::DestroyLootBeam_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "DestroyLootBeam_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPickableEffectsComponent.DestroyNiagara_BP
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGzPickableEffectsComponent::DestroyNiagara_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "DestroyNiagara_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPickableEffectsComponent.DestroySFX_BP
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGzPickableEffectsComponent::DestroySFX_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "DestroySFX_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPickableEffectsComponent.IsLootBeamCreated
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPickableEffectsComponent::IsLootBeamCreated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "IsLootBeamCreated");

	Params::GzPickableEffectsComponent_IsLootBeamCreated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzPickableEffectsComponent.IsNiagaraCreated
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPickableEffectsComponent::IsNiagaraCreated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "IsNiagaraCreated");

	Params::GzPickableEffectsComponent_IsNiagaraCreated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzPickableEffectsComponent.IsSFXCreated
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPickableEffectsComponent::IsSFXCreated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickableEffectsComponent", "IsSFXCreated");

	Params::GzPickableEffectsComponent_IsSFXCreated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CalculateDropLocationFor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPickableHelper2::CalculateDropLocationFor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CalculateDropLocationFor");

	Params::GzPickableHelper2_CalculateDropLocationFor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CalculateImpulseForDroppedItemFor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPickableHelper2::CalculateImpulseForDroppedItemFor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CalculateImpulseForDroppedItemFor");

	Params::GzPickableHelper2_CalculateImpulseForDroppedItemFor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CalculateSpawnLocationForDroppedItemFor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPickableHelper2::CalculateSpawnLocationForDroppedItemFor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CalculateSpawnLocationForDroppedItemFor");

	Params::GzPickableHelper2_CalculateSpawnLocationForDroppedItemFor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateLimbPickable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzLimbInvItem                   InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::CreateLimbPickable(const class UObject* WorldContextObject, const struct FGzPickableSpawnInfo& SpawnInfo, const struct FGzLimbInvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateLimbPickable");

	Params::GzPickableHelper2_CreateLimbPickable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateLimbPickableItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzLimbInvItem                   LimbItem                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzPickableHelper2::CreateLimbPickableItem(const struct FGzLimbInvItem& LimbItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateLimbPickableItem");

	Params::GzPickableHelper2_CreateLimbPickableItem Parms{};

	Parms.LimbItem = std::move(LimbItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreatePickable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::CreatePickable(const class UObject* WorldContextObject, const struct FGzPickableSpawnInfo& SpawnInfo, const struct FGzInvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreatePickable");

	Params::GzPickableHelper2_CreatePickable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreatePickableOld
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInventoryItemContent          ItemContent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::CreatePickableOld(const class UObject* WorldContextObject, const struct FGzPickableSpawnInfo& SpawnInfo, const struct FGzInventoryItemContent& ItemContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreatePickableOld");

	Params::GzPickableHelper2_CreatePickableOld Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.ItemContent = std::move(ItemContent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateSimplePickable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzSimpleInvItem                 InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::CreateSimplePickable(const class UObject* WorldContextObject, const struct FGzPickableSpawnInfo& SpawnInfo, const struct FGzSimpleInvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateSimplePickable");

	Params::GzPickableHelper2_CreateSimplePickable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateSimplePickableItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzSimpleInvItem                 MiscItem                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzPickableHelper2::CreateSimplePickableItem(const struct FGzSimpleInvItem& MiscItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateSimplePickableItem");

	Params::GzPickableHelper2_CreateSimplePickableItem Parms{};

	Parms.MiscItem = std::move(MiscItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateWeaponPickable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzWeaponInvItem                 InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::CreateWeaponPickable(const class UObject* WorldContextObject, const struct FGzPickableSpawnInfo& SpawnInfo, const struct FGzWeaponInvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateWeaponPickable");

	Params::GzPickableHelper2_CreateWeaponPickable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.CreateWeaponPickableItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGzWeaponInvItem                 WeaponItem                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzInvItem                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGzInvItem UGzPickableHelper2::CreateWeaponPickableItem(const struct FGzWeaponInvItem& WeaponItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "CreateWeaponPickableItem");

	Params::GzPickableHelper2_CreateWeaponPickableItem Parms{};

	Parms.WeaponItem = std::move(WeaponItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.DropItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGzPickableSpawnInfo             SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzPickableHelper2::DropItem(const class UObject* WorldContextObject, const struct FGzInvItem& InvItem, const struct FGzPickableSpawnInfo& SpawnInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "DropItem");

	Params::GzPickableHelper2_DropItem Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InvItem = std::move(InvItem);
	Parms.SpawnInfo = std::move(SpawnInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.DropItemDefault
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvItem                       InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           LastOwner                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGzPickableHelper2::DropItemDefault(const class UObject* WorldContextObject, const struct FGzInvItem& InvItem, const class AActor* LastOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "DropItemDefault");

	Params::GzPickableHelper2_DropItemDefault Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InvItem = std::move(InvItem);
	Parms.LastOwner = LastOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.FindHighPriorityPickup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPickableBase*>          PickableArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AGzPickableBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPickableBase* UGzPickableHelper2::FindHighPriorityPickup(const class AGzCharacter* Character, const TArray<class AGzPickableBase*>& PickableArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "FindHighPriorityPickup");

	Params::GzPickableHelper2_FindHighPriorityPickup Parms{};

	Parms.Character = Character;
	Parms.PickableArray = std::move(PickableArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickableHelper2.GetPickableRealPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzPickableBase*                  Pickable                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzPickableHelper2::GetPickableRealPosition(const class AGzPickableBase* Pickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzPickableHelper2", "GetPickableRealPosition");

	Params::GzPickableHelper2_GetPickableRealPosition Parms{};

	Parms.Pickable = Pickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPickUpLogEntryWidget.SetItemInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGzInvItem                       InvItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzPickUpLogEntryWidget::SetItemInfo(const struct FGzInvItem& InvItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPickUpLogEntryWidget", "SetItemInfo");

	Params::GzPickUpLogEntryWidget_SetItemInfo Parms{};

	Parms.InvItem = std::move(InvItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingActor.GetMarkerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzMarkerComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzMarkerComponent* AGzPingActor::GetMarkerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingActor", "GetMarkerComponent");

	Params::GzPingActor_GetMarkerComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPingActor.GetPingData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzPingData                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGzPingData AGzPingActor::GetPingData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingActor", "GetPingData");

	Params::GzPingActor_GetPingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPingControllerComponent.Client_AddPing
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Client_AddPing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Client_AddPing");

	Params::GzPingControllerComponent_Client_AddPing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Client_CancelPing
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Client_CancelPing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Client_CancelPing");

	Params::GzPingControllerComponent_Client_CancelPing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Client_RemovePing
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Client_RemovePing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Client_RemovePing");

	Params::GzPingControllerComponent_Client_RemovePing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Client_SetAgree
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FGzPingData                      PingData                                               (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAgrees                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Client_SetAgree(const struct FGzPingData& PingData, class AGzPlayerState* PS, bool bAgrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Client_SetAgree");

	Params::GzPingControllerComponent_Client_SetAgree Parms{};

	Parms.PingData = std::move(PingData);
	Parms.PS = PS;
	Parms.bAgrees = bAgrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.OnGameStageChanged
// (Final, Native, Private)

void UGzPingControllerComponent::OnGameStageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "OnGameStageChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Ping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PingType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzPingChannels                         PingChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConsumeSnapshot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPingControllerComponent::Ping(const struct FGameplayTag& PingType, EGzPingChannels PingChannel, bool bConsumeSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Ping");

	Params::GzPingControllerComponent_Ping Parms{};

	Parms.PingType = std::move(PingType);
	Parms.PingChannel = PingChannel;
	Parms.bConsumeSnapshot = bConsumeSnapshot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPingControllerComponent.PingAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PingType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::PingAtLocation(const struct FGameplayTag& PingType, const struct FVector2D& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "PingAtLocation");

	Params::GzPingControllerComponent_PingAtLocation Parms{};

	Parms.PingType = std::move(PingType);
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.PingClosestActorOfClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PingType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPingControllerComponent::PingClosestActorOfClass(const struct FGameplayTag& PingType, TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "PingClosestActorOfClass");

	Params::GzPingControllerComponent_PingClosestActorOfClass Parms{};

	Parms.PingType = std::move(PingType);
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPingControllerComponent.PingMarker
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PingType                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzMarkerComponent*               MarkerComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::PingMarker(const struct FGameplayTag& PingType, class UGzMarkerComponent* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "PingMarker");

	Params::GzPingControllerComponent_PingMarker Parms{};

	Parms.PingType = std::move(PingType);
	Parms.MarkerComponent = MarkerComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Server_CancelPing
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Server_CancelPing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Server_CancelPing");

	Params::GzPingControllerComponent_Server_CancelPing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Server_CreatePing
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Server_CreatePing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Server_CreatePing");

	Params::GzPingControllerComponent_Server_CreatePing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Server_RemovePing
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGzPingData                      PingRequest                                            (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Server_RemovePing(const struct FGzPingData& PingRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Server_RemovePing");

	Params::GzPingControllerComponent_Server_RemovePing Parms{};

	Parms.PingRequest = std::move(PingRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.Server_SetAgree
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGzPingData                      PingData                                               (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAgrees                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingControllerComponent::Server_SetAgree(const struct FGzPingData& PingData, class AGzPlayerState* PS, bool bAgrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "Server_SetAgree");

	Params::GzPingControllerComponent_Server_SetAgree Parms{};

	Parms.PingData = std::move(PingData);
	Parms.PS = PS;
	Parms.bAgrees = bAgrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingControllerComponent.GetPingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPingActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPingActor* UGzPingControllerComponent::GetPingActor(class AActor* InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "GetPingActor");

	Params::GzPingControllerComponent_GetPingActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPingControllerComponent.IsPinged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzPingControllerComponent::IsPinged(class AActor* InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingControllerComponent", "IsPinged");

	Params::GzPingControllerComponent_IsPinged Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSA_ActionOnEvent.OnEvent
// (Final, Native, Public)
// Parameters:
// struct FGameplayEventData               TriggerEventData                                       (Parm, NativeAccessSpecifierPublic)

void UGzSA_ActionOnEvent::OnEvent(const struct FGameplayEventData& TriggerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSA_ActionOnEvent", "OnEvent");

	Params::GzSA_ActionOnEvent_OnEvent Parms{};

	Parms.TriggerEventData = std::move(TriggerEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingTooltipExtension.InteractionFocusChanged
// (Final, Native, Private)
// Parameters:
// class UGzInteractableComponent*         Interactable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInInteractionRange                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingTooltipExtension::InteractionFocusChanged(class UGzInteractableComponent* Interactable, bool bInInteractionRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingTooltipExtension", "InteractionFocusChanged");

	Params::GzPingTooltipExtension_InteractionFocusChanged Parms{};

	Parms.Interactable = Interactable;
	Parms.bInInteractionRange = bInInteractionRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPingTooltipExtension.OnPingRemoved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGzPingData                      PingData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPingTooltipExtension::OnPingRemoved(const struct FGzPingData& PingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPingTooltipExtension", "OnPingRemoved");

	Params::GzPingTooltipExtension_OnPingRemoved Parms{};

	Parms.PingData = std::move(PingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayableAreaMapExtension.OnPlayableAreaReady
// (Final, Native, Private)

void UGzPlayableAreaMapExtension::OnPlayableAreaReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayableAreaMapExtension", "OnPlayableAreaReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayableAreaSubsystem.GetLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UGzPlayableAreaSubsystem::GetLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayableAreaSubsystem", "GetLayer");

	Params::GzPlayableAreaSubsystem_GetLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayableAreaSubsystem.GetZones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UGzPlayableAreaSubsystem::GetZones() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayableAreaSubsystem", "GetZones");

	Params::GzPlayableAreaSubsystem_GetZones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.AddRevealedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     RevealedTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::AddRevealedActor(class AActor* SourceActor, const struct FGameplayTag& RevealedTag, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "AddRevealedActor");

	Params::GzPlayerCharacter_AddRevealedActor Parms{};

	Parms.SourceActor = SourceActor;
	Parms.RevealedTag = std::move(RevealedTag);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.Client_HandleWeaponSlotDrop
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void AGzPlayerCharacter::Client_HandleWeaponSlotDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "Client_HandleWeaponSlotDrop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.FinishCurrentInteractionStage
// (Final, Native, Public, BlueprintCallable)

void AGzPlayerCharacter::FinishCurrentInteractionStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "FinishCurrentInteractionStage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.Multicast_PlayHitReactionInJetpackVFX
// (Net, Native, Event, NetMulticast, Public)

void AGzPlayerCharacter::Multicast_PlayHitReactionInJetpackVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "Multicast_PlayHitReactionInJetpackVFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnAnyAbilityEnded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FAbilityEndedData                AbilityEndedData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnAnyAbilityEnded(const struct FAbilityEndedData& AbilityEndedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnAnyAbilityEnded");

	Params::GzPlayerCharacter_OnAnyAbilityEnded Parms{};

	Parms.AbilityEndedData = std::move(AbilityEndedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnAnyAbilityEndedNextFrame
// (Final, Native, Private)
// Parameters:
// struct FAbilityEndedData                AbilityEndedData                                       (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnAnyAbilityEndedNextFrame(const struct FAbilityEndedData& AbilityEndedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnAnyAbilityEndedNextFrame");

	Params::GzPlayerCharacter_OnAnyAbilityEndedNextFrame Parms{};

	Parms.AbilityEndedData = std::move(AbilityEndedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnCustomizationChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   GzPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnCustomizationChanged(class AGzPlayerState* GzPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnCustomizationChanged");

	Params::GzPlayerCharacter_OnCustomizationChanged Parms{};

	Parms.GzPlayerState = GzPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnInteract
// (Final, Native, Private)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnInteract");

	Params::GzPlayerCharacter_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnInteractionCanceled
// (Final, Native, Private)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnInteractionCanceled(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnInteractionCanceled");

	Params::GzPlayerCharacter_OnInteractionCanceled Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnInteractionStarted
// (Final, Native, Private)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnInteractionStarted(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnInteractionStarted");

	Params::GzPlayerCharacter_OnInteractionStarted Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnKnockedDownTagChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::OnKnockedDownTagChanged(const struct FGameplayTag& Tag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnKnockedDownTagChanged");

	Params::GzPlayerCharacter_OnKnockedDownTagChanged Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnRep_UseFreeRotation
// (Final, Native, Protected)

void AGzPlayerCharacter::OnRep_UseFreeRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnRep_UseFreeRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.RemoveRevealedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     RevealedTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::RemoveRevealedActor(class AActor* SourceActor, const struct FGameplayTag& RevealedTag, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "RemoveRevealedActor");

	Params::GzPlayerCharacter_RemoveRevealedActor Parms{};

	Parms.SourceActor = SourceActor;
	Parms.RevealedTag = std::move(RevealedTag);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.ResetPlayerCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    WithInterpolation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::ResetPlayerCamera(bool WithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "ResetPlayerCamera");

	Params::GzPlayerCharacter_ResetPlayerCamera Parms{};

	Parms.WithInterpolation = WithInterpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.Server_GiveLoadoutFromContainer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// class UGzLoadoutSelectionComponent*     LoadoutSelectionComponent                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            LoadoutGuid                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::Server_GiveLoadoutFromContainer(class UGzLoadoutSelectionComponent* LoadoutSelectionComponent, const struct FGuid& LoadoutGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "Server_GiveLoadoutFromContainer");

	Params::GzPlayerCharacter_Server_GiveLoadoutFromContainer Parms{};

	Parms.LoadoutSelectionComponent = LoadoutSelectionComponent;
	Parms.LoadoutGuid = std::move(LoadoutGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.Server_SetCameraCompensateRotation
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::Server_SetCameraCompensateRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "Server_SetCameraCompensateRotation");

	Params::GzPlayerCharacter_Server_SetCameraCompensateRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.ServerFinishCurrentInteractionStage
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void AGzPlayerCharacter::ServerFinishCurrentInteractionStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "ServerFinishCurrentInteractionStage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.ServerSetFreeRotationEnabled
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::ServerSetFreeRotationEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "ServerSetFreeRotationEnabled");

	Params::GzPlayerCharacter_ServerSetFreeRotationEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.SetFreeRotationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::SetFreeRotationEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "SetFreeRotationEnabled");

	Params::GzPlayerCharacter_SetFreeRotationEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.StartCameraTransition
// (Final, Native, Public)

void AGzPlayerCharacter::StartCameraTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "StartCameraTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.TryInteract
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAutoInteract                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::TryInteract(const bool bAutoInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "TryInteract");

	Params::GzPlayerCharacter_TryInteract Parms{};

	Parms.bAutoInteract = bAutoInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.WingsuitOpenCloseEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsOpened                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerCharacter::WingsuitOpenCloseEvent(bool bIsOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "WingsuitOpenCloseEvent");

	Params::GzPlayerCharacter_WingsuitOpenCloseEvent Parms{};

	Parms.bIsOpened = bIsOpened;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPlayerCharacter.CanHoldBreath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerCharacter::CanHoldBreath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "CanHoldBreath");

	Params::GzPlayerCharacter_CanHoldBreath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.CanShootAutomaticWeapon
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerCharacter::CanShootAutomaticWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "CanShootAutomaticWeapon");

	Params::GzPlayerCharacter_CanShootAutomaticWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetAdvancedCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzAdvancedCameraParamsComponent* ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAdvancedCameraParamsComponent* AGzPlayerCharacter::GetAdvancedCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetAdvancedCameraComponent");

	Params::GzPlayerCharacter_GetAdvancedCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetBlockingHealDamageableAreaTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzCharacterDamageAreaType              Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerCharacter::GetBlockingHealDamageableAreaTime(const EGzCharacterDamageAreaType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetBlockingHealDamageableAreaTime");

	Params::GzPlayerCharacter_GetBlockingHealDamageableAreaTime Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCameraComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCameraComponent* AGzPlayerCharacter::GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetCameraComponent");

	Params::GzPlayerCharacter_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetDesiredOnEndInteractionCameraRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGzPlayerCharacter::GetDesiredOnEndInteractionCameraRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetDesiredOnEndInteractionCameraRotation");

	Params::GzPlayerCharacter_GetDesiredOnEndInteractionCameraRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetInteractionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInteractionComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInteractionComponent* AGzPlayerCharacter::GetInteractionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetInteractionComponent");

	Params::GzPlayerCharacter_GetInteractionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetJetpackDelayAndRepairTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ProhibitionTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               JetpackHPCurrAttribute                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               JetpackHPMaxAttribute                                  (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerCharacter::GetJetpackDelayAndRepairTime(const struct FGameplayTag& ProhibitionTag, const struct FGameplayAttribute& JetpackHPCurrAttribute, const struct FGameplayAttribute& JetpackHPMaxAttribute) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetJetpackDelayAndRepairTime");

	Params::GzPlayerCharacter_GetJetpackDelayAndRepairTime Parms{};

	Parms.ProhibitionTag = std::move(ProhibitionTag);
	Parms.JetpackHPCurrAttribute = std::move(JetpackHPCurrAttribute);
	Parms.JetpackHPMaxAttribute = std::move(JetpackHPMaxAttribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.GetRegenerationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ProhibitionTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               HPCurrAttribute                                        (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAttribute               HPMaxAttribute                                         (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGzPlayerCharacter::GetRegenerationTime(const struct FGameplayTag& ProhibitionTag, const struct FGameplayAttribute& HPCurrAttribute, const struct FGameplayAttribute& HPMaxAttribute) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "GetRegenerationTime");

	Params::GzPlayerCharacter_GetRegenerationTime Parms{};

	Parms.ProhibitionTag = std::move(ProhibitionTag);
	Parms.HPCurrAttribute = std::move(HPCurrAttribute);
	Parms.HPMaxAttribute = std::move(HPMaxAttribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.IsInCustomCameraMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzPlayerCharacter::IsInCustomCameraMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "IsInCustomCameraMode");

	Params::GzPlayerCharacter_IsInCustomCameraMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerCharacter.OnRep_AimCameraCompensation
// (Final, Native, Protected, Const)

void AGzPlayerCharacter::OnRep_AimCameraCompensation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnRep_AimCameraCompensation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnRep_ReviveProgress
// (Final, Native, Protected, Const)

void AGzPlayerCharacter::OnRep_ReviveProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnRep_ReviveProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerCharacter.OnShoulderTagHasChanged
// (Final, Native, Public, BlueprintCallable, Const)

void AGzPlayerCharacter::OnShoulderTagHasChanged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerCharacter", "OnShoulderTagHasChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerDeathLocationRevealSubsystem.OnPlayerAliveStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerDeathLocationRevealSubsystem::OnPlayerAliveStateChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerDeathLocationRevealSubsystem", "OnPlayerAliveStateChanged");

	Params::GzPlayerDeathLocationRevealSubsystem_OnPlayerAliveStateChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerDeathLocationRevealSubsystem.OnStageChanged
// (Final, Native, Private)

void AGzPlayerDeathLocationRevealSubsystem::OnStageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerDeathLocationRevealSubsystem", "OnStageChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerJoinValidationBeaconClient.ClientOnValidationResult
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// bool                                    bCanJoin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerJoinValidationBeaconClient::ClientOnValidationResult(bool bCanJoin, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerJoinValidationBeaconClient", "ClientOnValidationResult");

	Params::GzPlayerJoinValidationBeaconClient_ClientOnValidationResult Parms{};

	Parms.bCanJoin = bCanJoin;
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPlayerJoinValidationBeaconClient.ServerValidatePlayerCanJoin
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzPlayerJoinValidationBeaconClient::ServerValidatePlayerCanJoin(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerJoinValidationBeaconClient", "ServerValidatePlayerCanJoin");

	Params::GzPlayerJoinValidationBeaconClient_ServerValidatePlayerCanJoin Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRadialMenu.CreateSegments
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumberOfSegments                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzRadialMenu::CreateSegments(int32 InNumberOfSegments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenu", "CreateSegments");

	Params::GzRadialMenu_CreateSegments Parms{};

	Parms.InNumberOfSegments = InNumberOfSegments;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRadialMenu.OnSegmentsCreated
// (Event, Protected, BlueprintEvent)

void UGzRadialMenu::OnSegmentsCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenu", "OnSegmentsCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRadialMenu.ResetRadialScroll
// (Event, Protected, BlueprintEvent)

void UGzRadialMenu::ResetRadialScroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenu", "ResetRadialScroll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRadialMenu.UpdateRadialScroll
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   MouseDirectionAngle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzRadialMenu::UpdateRadialScroll(float MouseDirectionAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenu", "UpdateRadialScroll");

	Params::GzRadialMenu_UpdateRadialScroll Parms{};

	Parms.MouseDirectionAngle = MouseDirectionAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPlayerProfileSettings.GetAvatarsIds
// (Final, Native, Private, Const)
// Parameters:
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UGzPlayerProfileSettings::GetAvatarsIds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerProfileSettings", "GetAvatarsIds");

	Params::GzPlayerProfileSettings_GetAvatarsIds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerService.GetPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzClientUserInfo          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzClientUserInfo UGzPlayerService::GetPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerService", "GetPlayer");

	Params::GzPlayerService_GetPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerViewTargetInterface.GetViewTargetAbilityComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilitySystemComponent* IGzPlayerViewTargetInterface::GetViewTargetAbilityComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerViewTargetInterface", "GetViewTargetAbilityComponent");

	Params::GzPlayerViewTargetInterface_GetViewTargetAbilityComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerViewTargetInterface.GetViewTargetCharacter
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzBaseCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzBaseCharacter* IGzPlayerViewTargetInterface::GetViewTargetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerViewTargetInterface", "GetViewTargetCharacter");

	Params::GzPlayerViewTargetInterface_GetViewTargetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerViewTargetInterface.GetViewTargetInventory
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzInvComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzInvComponent* IGzPlayerViewTargetInterface::GetViewTargetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerViewTargetInterface", "GetViewTargetInventory");

	Params::GzPlayerViewTargetInterface_GetViewTargetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPlayerViewTargetInterface.GetViewTargetPlayerState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerState* IGzPlayerViewTargetInterface::GetViewTargetPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPlayerViewTargetInterface", "GetViewTargetPlayerState");

	Params::GzPlayerViewTargetInterface_GetViewTargetPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzPocketGroupWidget.OnPocketsUpdated
// (Event, Protected, BlueprintEvent)

void UGzPocketGroupWidget::OnPocketsUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketGroupWidget", "OnPocketsUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzPocketGroupWidget.OnPocketWidgetAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGzPocketWidget*                  PocketWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzPocketGroupWidget::OnPocketWidgetAdded(class UGzPocketWidget* PocketWidget, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPocketGroupWidget", "OnPocketWidgetAdded");

	Params::GzPocketGroupWidget_OnPocketWidgetAdded Parms{};

	Parms.PocketWidget = PocketWidget;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzPrematchZonesExtension.MapTransformChanged
// (Final, Native, Protected)

void UGzPrematchZonesExtension::MapTransformChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPrematchZonesExtension", "MapTransformChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzPrematchZonesExtension.OnStageChanged
// (Final, Native, Protected)

void UGzPrematchZonesExtension::OnStageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzPrematchZonesExtension", "OnStageChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProceduralDeploymentTransport.OnRep_TrackSpawnData
// (Final, Native, Protected)

void AGzProceduralDeploymentTransport::OnRep_TrackSpawnData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProceduralDeploymentTransport", "OnRep_TrackSpawnData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProcedureTrackTransportLandingLocation.GetDebugLoadoutDrop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzProcedureTrackTransportLandingLocation::GetDebugLoadoutDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzProcedureTrackTransportLandingLocation", "GetDebugLoadoutDrop");

	Params::GzProcedureTrackTransportLandingLocation_GetDebugLoadoutDrop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProcedureTrackTransportLandingLocation.CanBeUsed
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzProcedureTrackTransportLandingLocation::CanBeUsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProcedureTrackTransportLandingLocation", "CanBeUsed");

	Params::GzProcedureTrackTransportLandingLocation_CanBeUsed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzProcedureTrackTransportLandingLocation.OnDeliveryTriggered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGzProceduralTrackTransport*      Transport                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProcedureTrackTransportLandingLocation::OnDeliveryTriggered(class AGzProceduralTrackTransport* Transport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProcedureTrackTransportLandingLocation", "OnDeliveryTriggered");

	Params::GzProcedureTrackTransportLandingLocation_OnDeliveryTriggered Parms{};

	Parms.Transport = Transport;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzProcedureTrackTransportLandingLocation.TriggerDropPodDelivery
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGzProceduralTrackTransport>DropPodClass                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzProcedureTrackTransportLandingLocation::TriggerDropPodDelivery(const TSubclassOf<class AGzProceduralTrackTransport>& DropPodClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProcedureTrackTransportLandingLocation", "TriggerDropPodDelivery");

	Params::GzProcedureTrackTransportLandingLocation_TriggerDropPodDelivery Parms{};

	Parms.DropPodClass = DropPodClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProgressionSubsystem.CalculateBaseHardCurrency
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double AGzProgressionSubsystem::CalculateBaseHardCurrency(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressionSubsystem", "CalculateBaseHardCurrency");

	Params::GzProgressionSubsystem_CalculateBaseHardCurrency Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProgressionSubsystem.CalculateBaseSoftCurrency
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzProgressionSubsystem::CalculateBaseSoftCurrency(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressionSubsystem", "CalculateBaseSoftCurrency");

	Params::GzProgressionSubsystem_CalculateBaseSoftCurrency Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProgressionSubsystem.CalculateBaseXp
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzProgressionSubsystem::CalculateBaseXp(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressionSubsystem", "CalculateBaseXp");

	Params::GzProgressionSubsystem_CalculateBaseXp Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzProgressLogEntryWidget.OnFadeOutFinished_BP
// (Event, Protected, BlueprintEvent)

void UGzProgressLogEntryWidget::OnFadeOutFinished_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogEntryWidget", "OnFadeOutFinished_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzProgressLogEntryWidget.OnInit_BP
// (Event, Protected, BlueprintEvent)

void UGzProgressLogEntryWidget::OnInit_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProgressLogEntryWidget", "OnInit_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzProjectileMine.Explode
// (Native, Public, BlueprintCallable)

void AGzProjectileMine::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMine", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzProjectileMine.ExplodeAtClients
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGzProjectileImpactData          ImpactData                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGzProjectileMine::ExplodeAtClients(const struct FGzProjectileImpactData& ImpactData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzProjectileMine", "ExplodeAtClients");

	Params::GzProjectileMine_ExplodeAtClients Parms{};

	Parms.ImpactData = std::move(ImpactData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRadialMenuButton.OnHovered
// (Event, Protected, BlueprintEvent)

void UGzRadialMenuButton::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenuButton", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRadialMenuButton.OnPressed
// (Event, Protected, BlueprintEvent)

void UGzRadialMenuButton::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenuButton", "OnPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRadialMenuButton.OnUnhovered
// (Event, Protected, BlueprintEvent)

void UGzRadialMenuButton::OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenuButton", "OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRadialMenuButton.SetButtonName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InButtonName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzRadialMenuButton::SetButtonName(const class FName& InButtonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenuButton", "SetButtonName");

	Params::GzRadialMenuButton_SetButtonName Parms{};

	Parms.InButtonName = InButtonName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRadialMenuButton.GetButtonName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzRadialMenuButton::GetButtonName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRadialMenuButton", "GetButtonName");

	Params::GzRadialMenuButton_GetButtonName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRailTransport.EnableCarsAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRailTransport::EnableCarsAlignment(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRailTransport", "EnableCarsAlignment");

	Params::GzRailTransport_EnableCarsAlignment Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRandomStatics.RandomChoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int32>                           Weights                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Result                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGzRandomStatics::RandomChoice(const TArray<int32>& Weights, int32 Num, TArray<int32>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzRandomStatics", "RandomChoice");

	Params::GzRandomStatics_RandomChoice Parms{};

	Parms.Weights = std::move(Weights);
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function G01.GzRandomStatics.RandomFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFloatRange                      Range                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzRandomStatics::RandomFloat(const struct FFloatRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzRandomStatics", "RandomFloat");

	Params::GzRandomStatics_RandomFloat Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRandomStatics.RandomInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInt32Range                      Range                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzRandomStatics::RandomInt(const struct FInt32Range& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzRandomStatics", "RandomInt");

	Params::GzRandomStatics_RandomInt Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRarityRandomizationInterface.OnRarityRandomized
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     RarityRandomizationTag                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGzRarityRandomizationInterface::OnRarityRandomized(const struct FGameplayTag& RarityRandomizationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRarityRandomizationInterface", "OnRarityRandomized");

	Params::GzRarityRandomizationInterface_OnRarityRandomized Parms{};

	Parms.RarityRandomizationTag = std::move(RarityRandomizationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRarityRandomizationInterface.GetAvailableRarityPresets
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGameplayTagContainer            RarityPresets                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer IGzRarityRandomizationInterface::GetAvailableRarityPresets(const struct FGameplayTagContainer& RarityPresets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRarityRandomizationInterface", "GetAvailableRarityPresets");

	Params::GzRarityRandomizationInterface_GetAvailableRarityPresets Parms{};

	Parms.RarityPresets = std::move(RarityPresets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRarityRandomizationInterface.GetRarityRandomizationGroup
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag IGzRarityRandomizationInterface::GetRarityRandomizationGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRarityRandomizationInterface", "GetRarityRandomizationGroup");

	Params::GzRarityRandomizationInterface_GetRarityRandomizationGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzReconDrone.AddAffectedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReconDrone::AddAffectedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "AddAffectedActor");

	Params::GzReconDrone_AddAffectedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReconDrone.DestroyWithReason
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGzReconDestroyReason                   Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReconDrone::DestroyWithReason(EGzReconDestroyReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "DestroyWithReason");

	Params::GzReconDrone_DestroyWithReason Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReconDrone.DisableVisionForFriends
// (Final, Native, Protected, BlueprintCallable)

void AGzReconDrone::DisableVisionForFriends()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "DisableVisionForFriends");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReconDrone.HandleDestroyReason
// (Event, Protected, BlueprintEvent)

void AGzReconDrone::HandleDestroyReason()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "HandleDestroyReason");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzReconDrone.Init
// (Final, Native, Protected, BlueprintCallable)

void AGzReconDrone::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReconDrone.OnRep_DestroyReason
// (Final, Native, Private)

void AGzReconDrone::OnRep_DestroyReason()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "OnRep_DestroyReason");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzReconDrone.RemoveAffectedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzReconDrone::RemoveAffectedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzReconDrone", "RemoveAffectedActor");

	Params::GzReconDrone_RemoveAffectedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentContainer.CreateRedeploymentWidget
// (Event, Protected, BlueprintEvent)

void UGzRedeploymentContainer::CreateRedeploymentWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentContainer", "CreateRedeploymentWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzRedeploymentContainer.NotifyOnTagAdded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     NewTag                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzRedeploymentContainer::NotifyOnTagAdded(const struct FGameplayTag& NewTag, const struct FGameplayTagContainer& CurrentTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentContainer", "NotifyOnTagAdded");

	Params::GzRedeploymentContainer_NotifyOnTagAdded Parms{};

	Parms.NewTag = std::move(NewTag);
	Parms.CurrentTags = std::move(CurrentTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentContainer.NotifyOnTagRemoved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     RemovedTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzRedeploymentContainer::NotifyOnTagRemoved(const struct FGameplayTag& RemovedTag, const struct FGameplayTagContainer& CurrentTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentContainer", "NotifyOnTagRemoved");

	Params::GzRedeploymentContainer_NotifyOnTagRemoved Parms{};

	Parms.RemovedTag = std::move(RemovedTag);
	Parms.CurrentTags = std::move(CurrentTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.GetRedeploymentTransformOverride
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform AGzRedeploymentTerminal::GetRedeploymentTransformOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "GetRedeploymentTransformOverride");

	Params::GzRedeploymentTerminal_GetRedeploymentTransformOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRedeploymentTerminal.OnAvailabilityChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewAvailable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnAvailabilityChanged(bool bNewAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnAvailabilityChanged");

	Params::GzRedeploymentTerminal_OnAvailabilityChanged Parms{};

	Parms.bNewAvailable = bNewAvailable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzRedeploymentTerminal.OnPlayerStateReplicated
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnPlayerStateReplicated(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnPlayerStateReplicated");

	Params::GzRedeploymentTerminal_OnPlayerStateReplicated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.OnPlayersTeamChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnPlayersTeamChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnPlayersTeamChanged");

	Params::GzRedeploymentTerminal_OnPlayersTeamChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.OnTeamChanged
// (Final, Native, Private)

void AGzRedeploymentTerminal::OnTeamChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnTeamChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.OnTeammateStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   Teammate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnTeammateStateChanged(class AGzPlayerState* Teammate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnTeammateStateChanged");

	Params::GzRedeploymentTerminal_OnTeammateStateChanged Parms{};

	Parms.Teammate = Teammate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.OnViewTargetChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnViewTargetChanged(class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnViewTargetChanged");

	Params::GzRedeploymentTerminal_OnViewTargetChanged Parms{};

	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.OnZoneStageChanged
// (Final, Native, Private)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::OnZoneStageChanged(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "OnZoneStageChanged");

	Params::GzRedeploymentTerminal_OnZoneStageChanged Parms{};

	Parms.StageIndex = StageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.RedeployPlayers
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGzPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGzPlayerState*>           PlayerStates                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzRedeploymentTerminal::RedeployPlayers(class AGzPlayerController* Caller, const TArray<class AGzPlayerState*>& PlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "RedeployPlayers");

	Params::GzRedeploymentTerminal_RedeployPlayers Parms{};

	Parms.Caller = Caller;
	Parms.PlayerStates = std::move(PlayerStates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzRedeploymentTerminal.GetRedeploymentCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzRedeploymentTerminal::GetRedeploymentCost(const class AGzPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "GetRedeploymentCost");

	Params::GzRedeploymentTerminal_GetRedeploymentCost Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRedeploymentTerminal.GetTotalRedeploymentCost
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGzPlayerState*>           PlayerStates                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzRedeploymentTerminal::GetTotalRedeploymentCost(const TArray<class AGzPlayerState*>& PlayerStates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "GetTotalRedeploymentCost");

	Params::GzRedeploymentTerminal_GetTotalRedeploymentCost Parms{};

	Parms.PlayerStates = std::move(PlayerStates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzRedeploymentTerminal.IsAvailable
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzRedeploymentTerminal::IsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzRedeploymentTerminal", "IsAvailable");

	Params::GzRedeploymentTerminal_IsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSA_ActionOnTag.OnTagAdded
// (Final, Native, Public)

void UGzSA_ActionOnTag::OnTagAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSA_ActionOnTag", "OnTagAdded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSA_ActionOnTag.OnTagRemoved
// (Final, Native, Public)

void UGzSA_ActionOnTag::OnTagRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSA_ActionOnTag", "OnTagRemoved");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.AssignZoneToPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSearchZonesSubsystem::AssignZoneToPlayer(int32 PlayerId, int32 ZoneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "AssignZoneToPlayer");

	Params::GzSearchZonesSubsystem_AssignZoneToPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.AssignZoneToTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSearchZonesSubsystem::AssignZoneToTeam(class AGzTeam* Team, int32 ZoneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "AssignZoneToTeam");

	Params::GzSearchZonesSubsystem_AssignZoneToTeam Parms{};

	Parms.Team = Team;
	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.CreateZone
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzSearchZoneSpec                InSpec                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzSearchZonesSubsystem::CreateZone(const struct FGzSearchZoneSpec& InSpec, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "CreateZone");

	Params::GzSearchZonesSubsystem_CreateZone Parms{};

	Parms.InSpec = std::move(InSpec);
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSearchZonesSubsystem.RemoveZone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSearchZonesSubsystem::RemoveZone(int32 ZoneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "RemoveZone");

	Params::GzSearchZonesSubsystem_RemoveZone Parms{};

	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.UnassignZoneFromPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSearchZonesSubsystem::UnassignZoneFromPlayer(int32 PlayerId, int32 ZoneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "UnassignZoneFromPlayer");

	Params::GzSearchZonesSubsystem_UnassignZoneFromPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.UnassignZoneFromTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSearchZonesSubsystem::UnassignZoneFromTeam(class AGzTeam* Team, int32 ZoneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "UnassignZoneFromTeam");

	Params::GzSearchZonesSubsystem_UnassignZoneFromTeam Parms{};

	Parms.Team = Team;
	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSearchZonesSubsystem.HasWatcher
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSearchZonesSubsystem::HasWatcher(int32 ZoneId, int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "HasWatcher");

	Params::GzSearchZonesSubsystem_HasWatcher Parms{};

	Parms.ZoneId = ZoneId;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSearchZonesSubsystem.HasZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ZoneId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSearchZonesSubsystem::HasZone(int32 ZoneId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSearchZonesSubsystem", "HasZone");

	Params::GzSearchZonesSubsystem_HasZone Parms{};

	Parms.ZoneId = ZoneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.AssignMarkerToPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzServerMarkerSubsystem::AssignMarkerToPlayer(int32 MarkerId, class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "AssignMarkerToPlayer");

	Params::GzServerMarkerSubsystem_AssignMarkerToPlayer Parms{};

	Parms.MarkerId = MarkerId;
	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzServerMarkerSubsystem.AssignMarkerToPlayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzServerMarkerSubsystem::AssignMarkerToPlayerId(int32 MarkerId, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "AssignMarkerToPlayerId");

	Params::GzServerMarkerSubsystem_AssignMarkerToPlayerId Parms{};

	Parms.MarkerId = MarkerId;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzServerMarkerSubsystem.AssignMarkerToTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzServerMarkerSubsystem::AssignMarkerToTeam(int32 MarkerId, class AGzTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "AssignMarkerToTeam");

	Params::GzServerMarkerSubsystem_AssignMarkerToTeam Parms{};

	Parms.MarkerId = MarkerId;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzServerMarkerSubsystem.AssignMarkerToTeamId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzServerMarkerSubsystem::AssignMarkerToTeamId(int32 MarkerId, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "AssignMarkerToTeamId");

	Params::GzServerMarkerSubsystem_AssignMarkerToTeamId Parms{};

	Parms.MarkerId = MarkerId;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzServerMarkerSubsystem.CreateMarkerAtLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzServerMarkerBuildDataLocation BuildData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzServerMarkerSubsystem::CreateMarkerAtLocation(const struct FGzServerMarkerBuildDataLocation& BuildData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "CreateMarkerAtLocation");

	Params::GzServerMarkerSubsystem_CreateMarkerAtLocation Parms{};

	Parms.BuildData = std::move(BuildData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.CreateMarkerForActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzServerMarkerBuildDataActor    BuildData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzServerMarkerSubsystem::CreateMarkerForActor(const struct FGzServerMarkerBuildDataActor& BuildData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "CreateMarkerForActor");

	Params::GzServerMarkerSubsystem_CreateMarkerForActor Parms{};

	Parms.BuildData = std::move(BuildData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.DestroyMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzServerMarkerSubsystem::DestroyMarker(int32 MarkerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "DestroyMarker");

	Params::GzServerMarkerSubsystem_DestroyMarker Parms{};

	Parms.MarkerId = MarkerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzServerMarkerSubsystem.UnassignMarkerFromPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzPlayerState*                   PS                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzServerMarkerSubsystem::UnassignMarkerFromPlayer(int32 MarkerId, class AGzPlayerState* PS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "UnassignMarkerFromPlayer");

	Params::GzServerMarkerSubsystem_UnassignMarkerFromPlayer Parms{};

	Parms.MarkerId = MarkerId;
	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.UnassignMarkerFromPlayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzServerMarkerSubsystem::UnassignMarkerFromPlayerId(int32 MarkerId, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "UnassignMarkerFromPlayerId");

	Params::GzServerMarkerSubsystem_UnassignMarkerFromPlayerId Parms{};

	Parms.MarkerId = MarkerId;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.UnassignMarkerFromTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzTeam*                          Team                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzServerMarkerSubsystem::UnassignMarkerFromTeam(int32 MarkerId, class AGzTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "UnassignMarkerFromTeam");

	Params::GzServerMarkerSubsystem_UnassignMarkerFromTeam Parms{};

	Parms.MarkerId = MarkerId;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzServerMarkerSubsystem.UnassignMarkerFromTeamId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MarkerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzServerMarkerSubsystem::UnassignMarkerFromTeamId(int32 MarkerId, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzServerMarkerSubsystem", "UnassignMarkerFromTeamId");

	Params::GzServerMarkerSubsystem_UnassignMarkerFromTeamId Parms{};

	Parms.MarkerId = MarkerId;
	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSettingsEntryActionRemapping.HandlePrimaryKeyRightClicked
// (Final, Native, Private)
// Parameters:
// class UCommonButtonBase*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingsEntryActionRemapping::HandlePrimaryKeyRightClicked(class UCommonButtonBase* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsEntryActionRemapping", "HandlePrimaryKeyRightClicked");

	Params::GzSettingsEntryActionRemapping_HandlePrimaryKeyRightClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsEntryActionRemapping.HandleSecondaryKeyRightClicked
// (Final, Native, Private)
// Parameters:
// class UCommonButtonBase*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingsEntryActionRemapping::HandleSecondaryKeyRightClicked(class UCommonButtonBase* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsEntryActionRemapping", "HandleSecondaryKeyRightClicked");

	Params::GzSettingsEntryActionRemapping_HandleSecondaryKeyRightClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsEntryActionRemapping.OnPressAnyKeyPanelAdded
// (Final, Native, Private)
// Parameters:
// class UGzNavigationWidget*              NavigationWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSettingsEntryActionRemapping::OnPressAnyKeyPanelAdded(class UGzNavigationWidget* NavigationWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsEntryActionRemapping", "OnPressAnyKeyPanelAdded");

	Params::GzSettingsEntryActionRemapping_OnPressAnyKeyPanelAdded Parms{};

	Parms.NavigationWidget = NavigationWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSettingsEntryActionRemapping.OnSettingChanged_BP
// (Event, Protected, BlueprintEvent)

void UGzSettingsEntryActionRemapping::OnSettingChanged_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsEntryActionRemapping", "OnSettingChanged_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSettingsEntryActionRemapping.GetInputBrushFromKeySlot
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerMappableKeySlot                  KeySlot                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      OutBrush                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzSettingsEntryActionRemapping::GetInputBrushFromKeySlot(EPlayerMappableKeySlot KeySlot, struct FSlateBrush* OutBrush) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSettingsEntryActionRemapping", "GetInputBrushFromKeySlot");

	Params::GzSettingsEntryActionRemapping_GetInputBrushFromKeySlot Parms{};

	Parms.KeySlot = KeySlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrush != nullptr)
		*OutBrush = std::move(Parms.OutBrush);

	return Parms.ReturnValue;
}


// Function G01.GzShadowBot.SimulateKeyPressed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShadowBot::SimulateKeyPressed(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "SimulateKeyPressed");

	Params::GzShadowBot_SimulateKeyPressed Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShadowBot.SimulateKeyPressedAndReleased
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShadowBot::SimulateKeyPressedAndReleased(const struct FKey& Key, float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "SimulateKeyPressedAndReleased");

	Params::GzShadowBot_SimulateKeyPressedAndReleased Parms{};

	Parms.Key = std::move(Key);
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShadowBot.SimulateKeyReleased
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzShadowBot::SimulateKeyReleased(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "SimulateKeyReleased");

	Params::GzShadowBot_SimulateKeyReleased Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzShadowBot.GetCheatManager
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzCheatManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzCheatManager* AGzShadowBot::GetCheatManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "GetCheatManager");

	Params::GzShadowBot_GetCheatManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShadowBot.GetControlledPawn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APawn*                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class APawn* AGzShadowBot::GetControlledPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "GetControlledPawn");

	Params::GzShadowBot_GetControlledPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShadowBot.GetPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzPlayerController* AGzShadowBot::GetPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShadowBot", "GetPlayerController");

	Params::GzShadowBot_GetPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzShootStatCollector.PlayerShoot
// (Final, Native, Private)
// Parameters:
// class APawn*                            Instigator                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             WeaponName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzShootStatCollector::PlayerShoot(const class APawn* Instigator, class FName WeaponName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzShootStatCollector", "PlayerShoot");

	Params::GzShootStatCollector_PlayerShoot Parms{};

	Parms.Instigator = Instigator;
	Parms.WeaponName = WeaponName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionStateSwitcherWidget.CycleState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Up                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionStateSwitcherWidget::CycleState(bool Up)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionStateSwitcherWidget", "CycleState");

	Params::LocomotionStateSwitcherWidget_CycleState Parms{};

	Parms.Up = Up;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.LocomotionStateSwitcherWidget.InitializeWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCanvasPanel*                     MovablePanel                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionStateSwitcherWidget::InitializeWidget(class UCanvasPanel* MovablePanel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionStateSwitcherWidget", "InitializeWidget");

	Params::LocomotionStateSwitcherWidget_InitializeWidget Parms{};

	Parms.MovablePanel = MovablePanel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionStateSwitcherWidget.SelectOverlayState
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ULocomotionStateSwitcherWidget::SelectOverlayState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionStateSwitcherWidget", "SelectOverlayState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSimplePickable.OnRep_SimpleItem
// (Final, Native, Protected)

void AGzSimplePickable::OnRep_SimpleItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSimplePickable", "OnRep_SimpleItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSimplePickable.IsAvailableToAutoPickUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzSimplePickable::IsAvailableToAutoPickUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSimplePickable", "IsAvailableToAutoPickUp");

	Params::GzSimplePickable_IsAvailableToAutoPickUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSmokePropagationActor.ApplySmokeEffect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          TargetASC                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle AGzSmokePropagationActor::ApplySmokeEffect(class UAbilitySystemComponent* TargetASC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSmokePropagationActor", "ApplySmokeEffect");

	Params::GzSmokePropagationActor_ApplySmokeEffect Parms{};

	Parms.TargetASC = TargetASC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSpiderMine.ActivateMine
// (Final, Native, Private, BlueprintCallable)

void AGzSpiderMine::ActivateMine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "ActivateMine");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.Explode
// (Final, Native, Private)

void AGzSpiderMine::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzSpiderMine::OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnBeginOverlap");

	Params::GzSpiderMine_OnBeginOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnMineReadyForActivation
// (Final, Native, Private)

void AGzSpiderMine::OnMineReadyForActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnMineReadyForActivation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnOwnerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSpiderMine::OnOwnerDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnOwnerDestroyed");

	Params::GzSpiderMine_OnOwnerDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnOwnerKilled
// (Final, Native, Private)
// Parameters:
// int32                                   KillerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSpiderMine::OnOwnerKilled(int32 KillerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnOwnerKilled");

	Params::GzSpiderMine_OnOwnerKilled Parms{};

	Parms.KillerId = KillerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnPosition
// (Final, Native, Private)

void AGzSpiderMine::OnPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnPreviewComponentEndPlay
// (Final, Native, Private)

void AGzSpiderMine::OnPreviewComponentEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnPreviewComponentEndPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnRep_LaunchInfo
// (Final, Native, Private)

void AGzSpiderMine::OnRep_LaunchInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnRep_LaunchInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnRep_MineActivation
// (Final, Native, Private)

void AGzSpiderMine::OnRep_MineActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnRep_MineActivation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnRep_WasDetonated
// (Final, Native, Private)

void AGzSpiderMine::OnRep_WasDetonated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnRep_WasDetonated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.OnReplicatedDataUpdated
// (Final, Native, Private)

void AGzSpiderMine::OnReplicatedDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "OnReplicatedDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSpiderMine.SetItemData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzItemData*                      InItemData                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSpiderMine::SetItemData(class UGzItemData* InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSpiderMine", "SetItemData");

	Params::GzSpiderMine_SetItemData Parms{};

	Parms.InItemData = InItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStageDecorator.MakeStageObjective
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzStageDecorator::MakeStageObjective(class AGzAdvancedMission* Mission, class UGzObjective* Objective, const class FText& Param_Name, const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzStageDecorator", "MakeStageObjective");

	Params::GzStageDecorator_MakeStageObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objective = Objective;
	Parms.Param_Name = std::move(Param_Name);
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStandTurret.OnRep_CurrentBodyPart
// (Final, Native, Static, Public)

void AGzStandTurret::OnRep_CurrentBodyPart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzStandTurret", "OnRep_CurrentBodyPart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStandTurret.OnRep_TargetActor
// (Final, Native, Static, Public)

void AGzStandTurret::OnRep_TargetActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzStandTurret", "OnRep_TargetActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStandTurret.CalculateTarget
// (Final, Native, Private)

void AGzStandTurret::CalculateTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStandTurret", "CalculateTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStandTurret.OnWeaponReady
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   InvPocketId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStandTurret::OnWeaponReady(const struct FGzInvPocketId& InvPocketId, const class AGzWeaponActor* WeaponActor, bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStandTurret", "OnWeaponReady");

	Params::GzStandTurret_OnWeaponReady Parms{};

	Parms.InvPocketId = std::move(InvPocketId);
	Parms.WeaponActor = WeaponActor;
	Parms.bEquipped = bEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStandTurret.GetTargetBodyPart
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          CurrentBodyPartRef                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStandTurret::GetTargetBodyPart(struct FVector* CurrentBodyPartRef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStandTurret", "GetTargetBodyPart");

	Params::GzStandTurret_GetTargetBodyPart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentBodyPartRef != nullptr)
		*CurrentBodyPartRef = std::move(Parms.CurrentBodyPartRef);
}


// Function G01.GzStandTurret.GetTargetEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGzStandTurret::GetTargetEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStandTurret", "GetTargetEnemy");

	Params::GzStandTurret_GetTargetEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStateChangedDecorator.MakeStageObjective
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     Objective                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(EGzObjectiveState NewState)>StateChanged                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzStateChangedDecorator::MakeStageObjective(class AGzAdvancedMission* Mission, class UGzObjective* Objective, const TDelegate<void(EGzObjectiveState NewState)>& StateChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzStateChangedDecorator", "MakeStageObjective");

	Params::GzStateChangedDecorator_MakeStageObjective Parms{};

	Parms.Mission = Mission;
	Parms.Objective = Objective;
	Parms.StateChanged = StateChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzStatsHolderComponent.OnOwnerChangeTeam
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzStatsHolderComponent::OnOwnerChangeTeam(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsHolderComponent", "OnOwnerChangeTeam");

	Params::GzStatsHolderComponent_OnOwnerChangeTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStatsHolderComponent.OnTeammatesChanged
// (Final, Native, Private)

void UGzStatsHolderComponent::OnTeammatesChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStatsHolderComponent", "OnTeammatesChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzStickyGooProjectile.GzGooProjectileDeployedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGzStickyGooProjectile::GzGooProjectileDeployedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooProjectile", "GzGooProjectileDeployedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzStickyGooProjectile.OnProjectileBounce
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// struct FHitResult                       ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzStickyGooProjectile::OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooProjectile", "OnProjectileBounce");

	Params::GzStickyGooProjectile_OnProjectileBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooProjectile.OnProjectileStop
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FHitResult                       ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzStickyGooProjectile::OnProjectileStop(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooProjectile", "OnProjectileStop");

	Params::GzStickyGooProjectile_OnProjectileStop Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStickyGooProjectile.OnRep_IsDeployed
// (Final, Native, Protected)

void AGzStickyGooProjectile::OnRep_IsDeployed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStickyGooProjectile", "OnRep_IsDeployed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzStreamableComponent.OnRep_ObjectNetId
// (Final, Native, Private)

void UGzStreamableComponent::OnRep_ObjectNetId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzStreamableComponent", "OnRep_ObjectNetId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzSuperSprintComponent.GzSprintConditionsChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bConditionsMet                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSuperSprintComponent::GzSprintConditionsChangedEvent__DelegateSignature(const bool bConditionsMet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "GzSprintConditionsChangedEvent__DelegateSignature");

	Params::GzSuperSprintComponent_GzSprintConditionsChangedEvent__DelegateSignature Parms{};

	Parms.bConditionsMet = bConditionsMet;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzSuperSprintComponent.GzSuperSprintActivationEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Param_bIsActive                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzSuperSprintComponent::GzSuperSprintActivationEvent__DelegateSignature(bool Param_bIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "GzSuperSprintActivationEvent__DelegateSignature");

	Params::GzSuperSprintComponent_GzSuperSprintActivationEvent__DelegateSignature Parms{};

	Parms.Param_bIsActive = Param_bIsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzSuperSprintComponent.GzSuperSprintCollisionEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzSuperSprintComponent::GzSuperSprintCollisionEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "GzSuperSprintCollisionEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.GzSuperSprintComponent.GzSuperSprintDurationDepleted__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGzSuperSprintComponent::GzSuperSprintDurationDepleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "GzSuperSprintDurationDepleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSuperSprintComponent.OnMarkDurationDirty
// (Final, Native, Protected)

void UGzSuperSprintComponent::OnMarkDurationDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "OnMarkDurationDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSuperSprintComponent.OnRecharged
// (Final, Native, Protected)

void UGzSuperSprintComponent::OnRecharged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "OnRecharged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSuperSprintComponent.OnRep_SuperSprintDurationLeft
// (Native, Event, Protected, BlueprintEvent)

void UGzSuperSprintComponent::OnRep_SuperSprintDurationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintComponent", "OnRep_SuperSprintDurationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSuperSprintTrailActor.OnRep_PreviousTrailActorLocation
// (Event, Protected, BlueprintEvent)

void AGzSuperSprintTrailActor::OnRep_PreviousTrailActorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintTrailActor", "OnRep_PreviousTrailActorLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzSuperSprintTrailActor.OnTrailTouched
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OverlapInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzSuperSprintTrailActor::OnTrailTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSuperSprintTrailActor", "OnTrailTouched");

	Params::GzSuperSprintTrailActor_OnTrailTouched Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.OverlapInfo = std::move(OverlapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSurfacePropagationController.StartPropagation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzPropagationConfiguration*      PropagationData                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataAsset*                       Param_OptionalDataAsset                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzSurfacePropagationController::StartPropagation(class UGzPropagationConfiguration* PropagationData, const int32 Level, class UDataAsset* Param_OptionalDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSurfacePropagationController", "StartPropagation");

	Params::GzSurfacePropagationController_StartPropagation Parms{};

	Parms.PropagationData = PropagationData;
	Parms.Level = Level;
	Parms.Param_OptionalDataAsset = Param_OptionalDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzSurfacePropagationController.GetDamageSourceDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataAsset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataAsset* AGzSurfacePropagationController::GetDamageSourceDataAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSurfacePropagationController", "GetDamageSourceDataAsset");

	Params::GzSurfacePropagationController_GetDamageSourceDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzSurfacePropagationController.GetOptionalDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataAsset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataAsset* AGzSurfacePropagationController::GetOptionalDataAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzSurfacePropagationController", "GetOptionalDataAsset");

	Params::GzSurfacePropagationController_GetOptionalDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTagSwitcherVertical.InitializedTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      InParentWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetTagSettings                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzTagVisibilitySettings         InTagSettings                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGzTagSwitcherVertical::InitializedTag(class UUserWidget* InParentWidget, const bool bResetTagSettings, const struct FGzTagVisibilitySettings& InTagSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTagSwitcherVertical", "InitializedTag");

	Params::GzTagSwitcherVertical_InitializedTag Parms{};

	Parms.InParentWidget = InParentWidget;
	Parms.bResetTagSettings = bResetTagSettings;
	Parms.InTagSettings = std::move(InTagSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTagSwitcherVertical.SetTagVisibility
// (Final, Native, Private)
// Parameters:
// EGzTargetUITagsState                    TagsState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTagSwitcherVertical::SetTagVisibility(EGzTargetUITagsState TagsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTagSwitcherVertical", "SetTagVisibility");

	Params::GzTagSwitcherVertical_SetTagVisibility Parms{};

	Parms.TagsState = TagsState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeam.OnPlayerAliveStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTeam::OnPlayerAliveStateChanged(class AGzPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "OnPlayerAliveStateChanged");

	Params::GzTeam_OnPlayerAliveStateChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeam.OnRep_TeamAlive
// (Final, Native, Private)

void AGzTeam::OnRep_TeamAlive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "OnRep_TeamAlive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeam.OnRep_TeamMembers
// (Final, Native, Private)

void AGzTeam::OnRep_TeamMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "OnRep_TeamMembers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeam.OnTeammatePawnChanged
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTeam::OnTeammatePawnChanged(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "OnTeammatePawnChanged");

	Params::GzTeam_OnTeammatePawnChanged Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTeam.CanAddPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzPlayerState*                   Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::CanAddPlayer(const class AGzPlayerState* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "CanAddPlayer");

	Params::GzTeam_CanAddPlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeam::GetCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetCapacity");

	Params::GzTeam_GetCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetEmptySlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeam::GetEmptySlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetEmptySlots");

	Params::GzTeam_GetEmptySlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AGzTeam::GetPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetPlayers");

	Params::GzTeam_GetPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetSessionId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGzTeam::GetSessionId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetSessionId");

	Params::GzTeam_GetSessionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeam::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamId");

	Params::GzTeam_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGzPlayerState*             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AGzPlayerState* AGzTeam::GetTeamLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamLeader");

	Params::GzTeam_GetTeamLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamLeaderFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzFaction                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGzFaction AGzTeam::GetTeamLeaderFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamLeaderFaction");

	Params::GzTeam_GetTeamLeaderFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGzTeamMember>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGzTeamMember> AGzTeam::GetTeamMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamMembers");

	Params::GzTeam_GetTeamMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeam::GetTeamRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamRank");

	Params::GzTeam_GetTeamRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetTeamSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGzTeam::GetTeamSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetTeamSize");

	Params::GzTeam_GetTeamSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.GetVoiceChatRoomId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid AGzTeam::GetVoiceChatRoomId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "GetVoiceChatRoomId");

	Params::GzTeam_GetVoiceChatRoomId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.HasLimitedCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::HasLimitedCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "HasLimitedCapacity");

	Params::GzTeam_HasLimitedCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.HasPlayersInMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::HasPlayersInMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "HasPlayersInMatch");

	Params::GzTeam_HasPlayersInMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.HasTeamLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::HasTeamLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "HasTeamLeader");

	Params::GzTeam_HasTeamLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.IsAnyoneAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::IsAnyoneAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "IsAnyoneAlive");

	Params::GzTeam_IsAnyoneAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.IsDefeated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::IsDefeated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "IsDefeated");

	Params::GzTeam_IsDefeated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "IsEmpty");

	Params::GzTeam_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.IsFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::IsFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "IsFull");

	Params::GzTeam_IsFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTeam.IsTeamAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzTeam::IsTeamAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTeam", "IsTeamAlive");

	Params::GzTeam_IsTeamAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTetherPreviewComponent.OnTetherDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTetherPreviewComponent::OnTetherDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTetherPreviewComponent", "OnTetherDestroyed");

	Params::GzTetherPreviewComponent_OnTetherDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTetherPreviewComponent.RegisterTetherPair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           FirstTether                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SecondTether                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TetherLink                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTetherPreviewComponent::RegisterTetherPair(class AActor* FirstTether, class AActor* SecondTether, class AActor* TetherLink)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTetherPreviewComponent", "RegisterTetherPair");

	Params::GzTetherPreviewComponent_RegisterTetherPair Parms{};

	Parms.FirstTether = FirstTether;
	Parms.SecondTether = SecondTether;
	Parms.TetherLink = TetherLink;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTetherPreviewComponent.GetTetherLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzTetherPreviewComponent::GetTetherLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTetherPreviewComponent", "GetTetherLimit");

	Params::GzTetherPreviewComponent_GetTetherLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTextBlock.GetTextColorNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGzTextBlock::GetTextColorNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzTextBlock", "GetTextColorNames");

	Params::GzTextBlock_GetTextColorNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTextBlock.SetColorOverrideName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ColorName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTextBlock::SetColorOverrideName(class FName ColorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTextBlock", "SetColorOverrideName");

	Params::GzTextBlock_SetColorOverrideName Parms{};

	Parms.ColorName = ColorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTextBlock.SetFontTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InFontTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTextBlock::SetFontTag(const struct FGameplayTag& InFontTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTextBlock", "SetFontTag");

	Params::GzTextBlock_SetFontTag Parms{};

	Parms.InFontTag = std::move(InFontTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShieldComponent.RequestShieldReturn
// (Final, Native, Public, BlueprintCallable)

void UGzThrowableShieldComponent::RequestShieldReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShieldComponent", "RequestShieldReturn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowableShieldComponent.IsShieldActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzThrowableShieldComponent::IsShieldActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShieldComponent", "IsShieldActive");

	Params::GzThrowableShieldComponent_IsShieldActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzThrowableShieldComponent.IsShieldLaunched
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzThrowableShieldComponent::IsShieldLaunched() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowableShieldComponent", "IsShieldLaunched");

	Params::GzThrowableShieldComponent_IsShieldLaunched Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzThrowPathActor.CalculateProjectileTransform
// (Final, Native, Public, BlueprintCallable)

void AGzThrowPathActor::CalculateProjectileTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowPathActor", "CalculateProjectileTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzThrowPathActor.GetSourceLocationAndDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzThrowPathActor::GetSourceLocationAndDirection(struct FVector* OutLocation, struct FVector* OutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowPathActor", "GetSourceLocationAndDirection");

	Params::GzThrowPathActor_GetSourceLocationAndDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);
}


// Function G01.GzThrowPathActor.GetSourceTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzThrowPathActor::GetSourceTransform(struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowPathActor", "GetSourceTransform");

	Params::GzThrowPathActor_GetSourceTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);
}


// Function G01.GzThrowPathActor.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGzProjectileData*                InProjectileData                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTargetThrowDistance                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InThrowCurveAddedAngle                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMaxThrowAngle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InAttachSocketName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzThrowPathActor::Initialize(const class UGzProjectileData* InProjectileData, float InTargetThrowDistance, float InThrowCurveAddedAngle, float InMaxThrowAngle, class FName InAttachSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzThrowPathActor", "Initialize");

	Params::GzThrowPathActor_Initialize Parms{};

	Parms.InProjectileData = InProjectileData;
	Parms.InTargetThrowDistance = InTargetThrowDistance;
	Parms.InThrowCurveAddedAngle = InThrowCurveAddedAngle;
	Parms.InMaxThrowAngle = InMaxThrowAngle;
	Parms.InAttachSocketName = InAttachSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTimerCondition.OnActivateTimer
// (Event, Protected, BlueprintEvent)

void UGzTimerCondition::OnActivateTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTimerCondition", "OnActivateTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzTimerCondition.OnDeactivateTimer
// (Event, Protected, BlueprintEvent)

void UGzTimerCondition::OnDeactivateTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTimerCondition", "OnDeactivateTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzTimerCondition.RestartTimer
// (Final, Native, Protected, BlueprintCallable)

void UGzTimerCondition::RestartTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTimerCondition", "RestartTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTimerCondition.GetDuration
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzTimerCondition::GetDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTimerCondition", "GetDuration");

	Params::GzTimerCondition_GetDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function G01.GzToxicSmokePropagation.ApplyDamageEffect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAbilitySystemComponent*          TargetASC                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle AGzToxicSmokePropagation::ApplyDamageEffect(class UAbilitySystemComponent* TargetASC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzToxicSmokePropagation", "ApplyDamageEffect");

	Params::GzToxicSmokePropagation_ApplyDamageEffect Parms{};

	Parms.TargetASC = TargetASC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzTrialSubsystem.StartTrials
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGzTrialSubsystem::StartTrials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialSubsystem", "StartTrials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrialSubsystemCheatExtension.AddTrialProgress
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FName                             TrialId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProgressToAdd                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTrialSubsystemCheatExtension::AddTrialProgress(const class FName& TrialId, const float ProgressToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialSubsystemCheatExtension", "AddTrialProgress");

	Params::GzTrialSubsystemCheatExtension_AddTrialProgress Parms{};

	Parms.TrialId = TrialId;
	Parms.ProgressToAdd = ProgressToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzTrialSubsystemCheatExtension.EnableDebugTrialTracking
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FName                             TrialId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzTrialSubsystemCheatExtension::EnableDebugTrialTracking(const class FName& TrialId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTrialSubsystemCheatExtension", "EnableDebugTrialTracking");

	Params::GzTrialSubsystemCheatExtension_EnableDebugTrialTracking Parms{};

	Parms.TrialId = TrialId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzTurretWeaponActor.GzTurretOwnerChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           NewActor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzTurretWeaponActor::GzTurretOwnerChanged__DelegateSignature(class AActor* NewActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzTurretWeaponActor", "GzTurretOwnerChanged__DelegateSignature");

	Params::GzTurretWeaponActor_GzTurretOwnerChanged__DelegateSignature Parms{};

	Parms.NewActor = NewActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzUIBlueprintFunctionLibrary.FindFontSettingsInRichTextBox
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class URichTextBlock*                   Rich                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FontID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutSuccessful                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTextBlockStyle                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTextBlockStyle UGzUIBlueprintFunctionLibrary::FindFontSettingsInRichTextBox(class URichTextBlock* Rich, const class FName FontID, bool* OutSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "FindFontSettingsInRichTextBox");

	Params::GzUIBlueprintFunctionLibrary_FindFontSettingsInRichTextBox Parms{};

	Parms.Rich = Rich;
	Parms.FontID = FontID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSuccessful != nullptr)
		*OutSuccessful = Parms.OutSuccessful;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetColorById
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ColorID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UGzUIBlueprintFunctionLibrary::GetColorById(const class FName ColorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetColorById");

	Params::GzUIBlueprintFunctionLibrary_GetColorById Parms{};

	Parms.ColorID = ColorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetDefaultErrorColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UGzUIBlueprintFunctionLibrary::GetDefaultErrorColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetDefaultErrorColor");

	Params::GzUIBlueprintFunctionLibrary_GetDefaultErrorColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetFocusedUMGWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGzUIBlueprintFunctionLibrary::GetFocusedUMGWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetFocusedUMGWidget");

	Params::GzUIBlueprintFunctionLibrary_GetFocusedUMGWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetGeometryCenter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometry                        Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGzUIBlueprintFunctionLibrary::GetGeometryCenter(class UObject* WorldContextObject, const struct FGeometry& Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetGeometryCenter");

	Params::GzUIBlueprintFunctionLibrary_GetGeometryCenter Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Geometry = std::move(Geometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetKeyBrush
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      OutBrush                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzUIBlueprintFunctionLibrary::GetKeyBrush(const class UObject* WorldContextObject, struct FSlateBrush* OutBrush, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetKeyBrush");

	Params::GzUIBlueprintFunctionLibrary_GetKeyBrush Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrush != nullptr)
		*OutBrush = std::move(Parms.OutBrush);

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetLoadedHUDComponents
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UGzUIBlueprintFunctionLibrary::GetLoadedHUDComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetLoadedHUDComponents");

	Params::GzUIBlueprintFunctionLibrary_GetLoadedHUDComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetTeammateColorFromIndex
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InPlayerIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UGzUIBlueprintFunctionLibrary::GetTeammateColorFromIndex(int32 InPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetTeammateColorFromIndex");

	Params::GzUIBlueprintFunctionLibrary_GetTeammateColorFromIndex Parms{};

	Parms.InPlayerIndex = InPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.GetWatermarkTextTemplate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGzUIBlueprintFunctionLibrary::GetWatermarkTextTemplate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "GetWatermarkTextTemplate");

	Params::GzUIBlueprintFunctionLibrary_GetWatermarkTextTemplate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.IsVisibleInHierarchy
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzUIBlueprintFunctionLibrary::IsVisibleInHierarchy(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "IsVisibleInHierarchy");

	Params::GzUIBlueprintFunctionLibrary_IsVisibleInHierarchy Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUIBlueprintFunctionLibrary.SetCanvasSlotPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UCanvasPanelSlot*                 Slot                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUIBlueprintFunctionLibrary::SetCanvasSlotPosition(class UCanvasPanelSlot* Slot, const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "SetCanvasSlotPosition");

	Params::GzUIBlueprintFunctionLibrary_SetCanvasSlotPosition Parms{};

	Parms.Slot = Slot;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUIBlueprintFunctionLibrary.SetRenderAngle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUIBlueprintFunctionLibrary::SetRenderAngle(class UWidget* Widget, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "SetRenderAngle");

	Params::GzUIBlueprintFunctionLibrary_SetRenderAngle Parms{};

	Parms.Widget = Widget;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUIBlueprintFunctionLibrary.SetRenderScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUIBlueprintFunctionLibrary::SetRenderScale(class UWidget* Widget, const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "SetRenderScale");

	Params::GzUIBlueprintFunctionLibrary_SetRenderScale Parms{};

	Parms.Widget = Widget;
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUIBlueprintFunctionLibrary.SetRenderTranslation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Translation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUIBlueprintFunctionLibrary::SetRenderTranslation(class UWidget* Widget, const struct FVector2D& Translation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "SetRenderTranslation");

	Params::GzUIBlueprintFunctionLibrary_SetRenderTranslation Parms{};

	Parms.Widget = Widget;
	Parms.Translation = std::move(Translation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUIBlueprintFunctionLibrary.SetVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzUIBlueprintFunctionLibrary::SetVisibility(class UWidget* Widget, ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "SetVisibility");

	Params::GzUIBlueprintFunctionLibrary_SetVisibility Parms{};

	Parms.Widget = Widget;
	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUIBlueprintFunctionLibrary.ShouldDisplayPlayerIdEncoding
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzUIBlueprintFunctionLibrary::ShouldDisplayPlayerIdEncoding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzUIBlueprintFunctionLibrary", "ShouldDisplayPlayerIdEncoding");

	Params::GzUIBlueprintFunctionLibrary_ShouldDisplayPlayerIdEncoding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzUnityMatchmakingServiceStatePollingTicket.OnTicketStatusRequestError
// (Final, Native, Private)
// Parameters:
// struct FUnityTicketStatusError          Error                                                  (Parm, NativeAccessSpecifierPublic)

void UGzUnityMatchmakingServiceStatePollingTicket::OnTicketStatusRequestError(const struct FUnityTicketStatusError& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUnityMatchmakingServiceStatePollingTicket", "OnTicketStatusRequestError");

	Params::GzUnityMatchmakingServiceStatePollingTicket_OnTicketStatusRequestError Parms{};

	Parms.Error = std::move(Error);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzUnityMatchmakingServiceStatePollingTicket.OnTicketStatusUpdate
// (Final, Native, Private)
// Parameters:
// struct FUnityTicketStatusResult         Result                                                 (Parm, NativeAccessSpecifierPublic)

void UGzUnityMatchmakingServiceStatePollingTicket::OnTicketStatusUpdate(const struct FUnityTicketStatusResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzUnityMatchmakingServiceStatePollingTicket", "OnTicketStatusUpdate");

	Params::GzUnityMatchmakingServiceStatePollingTicket_OnTicketStatusUpdate Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.AssignSeat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzVehicle::AssignSeat(class AGzCharacter* Character, EGzVehicleSeatType Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "AssignSeat");

	Params::GzVehicle_AssignSeat Parms{};

	Parms.Character = Character;
	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.BP_ClientOnVehicleHitEvent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   CurrentVehicleSpeed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::BP_ClientOnVehicleHitEvent(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit, float CurrentVehicleSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "BP_ClientOnVehicleHitEvent");

	Params::GzVehicle_BP_ClientOnVehicleHitEvent Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);
	Parms.CurrentVehicleSpeed = CurrentVehicleSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicle.EjectCharacter
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::EjectCharacter(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "EjectCharacter");

	Params::GzVehicle_EjectCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.EjectSeat
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EGzVehicleSeatType                      Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::EjectSeat(EGzVehicleSeatType Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "EjectSeat");

	Params::GzVehicle_EjectSeat Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.EnterClosestFreeSeat
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::EnterClosestFreeSeat(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "EnterClosestFreeSeat");

	Params::GzVehicle_EnterClosestFreeSeat Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.EnterNextFreeSeat
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::EnterNextFreeSeat(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "EnterNextFreeSeat");

	Params::GzVehicle_EnterNextFreeSeat Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.MulticastOnVehicleDestroyed
// (Net, Native, Event, NetMulticast, Protected)

void AGzVehicle::MulticastOnVehicleDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "MulticastOnVehicleDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnCharacterBeginCollision
// (Final, Native, Protected)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnCharacterBeginCollision(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnCharacterBeginCollision");

	Params::GzVehicle_OnCharacterBeginCollision Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnCharacterCollisionBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzVehicle::OnCharacterCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnCharacterCollisionBeginOverlap");

	Params::GzVehicle_OnCharacterCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnCharacterConnectionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzPlayerState*                   CharacterPlayerState                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnCharacterConnectionStateChanged(class AGzPlayerState* CharacterPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnCharacterConnectionStateChanged");

	Params::GzVehicle_OnCharacterConnectionStateChanged Parms{};

	Parms.CharacterPlayerState = CharacterPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnCharacterEndCollision
// (Final, Native, Protected)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnCharacterEndCollision(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnCharacterEndCollision");

	Params::GzVehicle_OnCharacterEndCollision Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnCharacterSeatChange
// (Final, Native, Private)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      NewSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      OldSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnCharacterSeatChange(class AGzCharacter* Character, EGzVehicleSeatType NewSeat, EGzVehicleSeatType OldSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnCharacterSeatChange");

	Params::GzVehicle_OnCharacterSeatChange Parms{};

	Parms.Character = Character;
	Parms.NewSeat = NewSeat;
	Parms.OldSeat = OldSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnInteractedBy
// (Final, Native, Public)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnInteractedBy(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnInteractedBy");

	Params::GzVehicle_OnInteractedBy Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnPassengerRestarted
// (Final, Native, Private)
// Parameters:
// class APawn*                            PassengerPawn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnPassengerRestarted(class APawn* PassengerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnPassengerRestarted");

	Params::GzVehicle_OnPassengerRestarted Parms{};

	Parms.PassengerPawn = PassengerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnRep_AttachedCharacters
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<class AGzCharacter*>             PreviousAttachedCharacters                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzVehicle::OnRep_AttachedCharacters(const TArray<class AGzCharacter*>& PreviousAttachedCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnRep_AttachedCharacters");

	Params::GzVehicle_OnRep_AttachedCharacters Parms{};

	Parms.PreviousAttachedCharacters = std::move(PreviousAttachedCharacters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnRep_CharactersInVehicle
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<class AGzCharacter*>             PreviousCharactersInVehicle                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGzVehicle::OnRep_CharactersInVehicle(const TArray<class AGzCharacter*>& PreviousCharactersInVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnRep_CharactersInVehicle");

	Params::GzVehicle_OnRep_CharactersInVehicle Parms{};

	Parms.PreviousCharactersInVehicle = std::move(PreviousCharactersInVehicle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnRep_HornPressed
// (Final, Native, Protected)
// Parameters:
// bool                                    bOldHornPressedValue                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::OnRep_HornPressed(const bool bOldHornPressedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnRep_HornPressed");

	Params::GzVehicle_OnRep_HornPressed Parms{};

	Parms.bOldHornPressedValue = bOldHornPressedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnRep_IsDestroyed
// (Final, Native, Protected)

void AGzVehicle::OnRep_IsDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnRep_IsDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnVehicleDestroyed
// (Final, Native, Protected)

void AGzVehicle::OnVehicleDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnVehicleDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.OnVehicleHitEvent
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGzVehicle::OnVehicleHitEvent(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "OnVehicleHitEvent");

	Params::GzVehicle_OnVehicleHitEvent Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.SetHornState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsHornpressed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzVehicle::SetHornState(bool bIsHornpressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "SetHornState");

	Params::GzVehicle_SetHornState Parms{};

	Parms.bIsHornpressed = bIsHornpressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicle.SwitchSeat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzVehicle::SwitchSeat(class AGzCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "SwitchSeat");

	Params::GzVehicle_SwitchSeat Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzVehicle.VehicleDestroyedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGzVehicle::VehicleDestroyedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "VehicleDestroyedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicle.GetCharacterInSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzVehicleSeatType                      Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* AGzVehicle::GetCharacterInSeat(EGzVehicleSeatType Seat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetCharacterInSeat");

	Params::GzVehicle_GetCharacterInSeat Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetDriver
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzCharacter* AGzVehicle::GetDriver() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetDriver");

	Params::GzVehicle_GetDriver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetGzVehicleMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzChaosWheeledVehicleMovementComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzChaosWheeledVehicleMovementComponent* AGzVehicle::GetGzVehicleMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetGzVehicleMovementComponent");

	Params::GzVehicle_GetGzVehicleMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetSeatOfCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzCharacter*                     Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGzVehicleSeatType AGzVehicle::GetSeatOfCharacter(const class AGzCharacter* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetSeatOfCharacter");

	Params::GzVehicle_GetSeatOfCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetTurretComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGzTurretComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzTurretComponent* AGzVehicle::GetTurretComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetTurretComponent");

	Params::GzVehicle_GetTurretComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetVehicleConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzVehicleConfig*           ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzVehicleConfig* AGzVehicle::GetVehicleConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetVehicleConfig");

	Params::GzVehicle_GetVehicleConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.GetVehicleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGzVehicleState            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzVehicleState AGzVehicle::GetVehicleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "GetVehicleState");

	Params::GzVehicle_GetVehicleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicle.HasEmptySeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzVehicle::HasEmptySeats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicle", "HasEmptySeats");

	Params::GzVehicle_HasEmptySeats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicleEffectSettings.GetSurfaceEffectsForType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPhysicalSurface                        Surface                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGzVehicleSurfaceEffects   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzVehicleSurfaceEffects UGzVehicleEffectSettings::GetSurfaceEffectsForType(const EPhysicalSurface Surface) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectSettings", "GetSurfaceEffectsForType");

	Params::GzVehicleEffectSettings_GetSurfaceEffectsForType Parms{};

	Parms.Surface = Surface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicleControlsComponent.HandleAccelerateBrake
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleAccelerateBrake(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleAccelerateBrake");

	Params::GzVehicleControlsComponent_HandleAccelerateBrake Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleGetOut
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleGetOut(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleGetOut");

	Params::GzVehicleControlsComponent_HandleGetOut Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleHandBrake
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleHandBrake(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleHandBrake");

	Params::GzVehicleControlsComponent_HandleHandBrake Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleHorn
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleHorn(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleHorn");

	Params::GzVehicleControlsComponent_HandleHorn Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleLookPitch
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleLookPitch(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleLookPitch");

	Params::GzVehicleControlsComponent_HandleLookPitch Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleLookYaw
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleLookYaw(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleLookYaw");

	Params::GzVehicleControlsComponent_HandleLookYaw Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleSeatSwitch
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleSeatSwitch(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleSeatSwitch");

	Params::GzVehicleControlsComponent_HandleSeatSwitch Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.HandleSteering
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionValue                InputValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::HandleSteering(const struct FInputActionValue& InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "HandleSteering");

	Params::GzVehicleControlsComponent_HandleSteering Parms{};

	Parms.InputValue = std::move(InputValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzVehicleControlsComponent.OnInputAxisChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::OnInputAxisChanged__DelegateSignature(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "OnInputAxisChanged__DelegateSignature");

	Params::GzVehicleControlsComponent_OnInputAxisChanged__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVehicleControlsComponent.OnInputButtonChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::OnInputButtonChanged__DelegateSignature(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "OnInputButtonChanged__DelegateSignature");

	Params::GzVehicleControlsComponent_OnInputButtonChanged__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicleControlsComponent.ServerGetOut
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UGzVehicleControlsComponent::ServerGetOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "ServerGetOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.ServerSetHornState
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bIsHornpressed                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleControlsComponent::ServerSetHornState(const bool bIsHornpressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "ServerSetHornState");

	Params::GzVehicleControlsComponent_ServerSetHornState Parms{};

	Parms.bIsHornpressed = bIsHornpressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.ServerSwitchSeat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UGzVehicleControlsComponent::ServerSwitchSeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "ServerSwitchSeat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleControlsComponent.GetDriverCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGzMultiPartCharacter*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzMultiPartCharacter* UGzVehicleControlsComponent::GetDriverCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleControlsComponent", "GetDriverCharacter");

	Params::GzVehicleControlsComponent_GetDriverCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction G01.GzVehicleEffectsComponent.ActiveBrakeStateChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsBraking                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAnyWheelInContact                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::ActiveBrakeStateChangedDelegate__DelegateSignature(bool bIsBraking, bool bIsAnyWheelInContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "ActiveBrakeStateChangedDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_ActiveBrakeStateChangedDelegate__DelegateSignature Parms{};

	Parms.bIsBraking = bIsBraking;
	Parms.bIsAnyWheelInContact = bIsAnyWheelInContact;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVehicleEffectsComponent.AxleGroundStaetChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EGzVehicleAxle                          Axle                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOnGround                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::AxleGroundStaetChangedDelegate__DelegateSignature(EGzVehicleAxle Axle, bool bIsOnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "AxleGroundStaetChangedDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_AxleGroundStaetChangedDelegate__DelegateSignature Parms{};

	Parms.Axle = Axle;
	Parms.bIsOnGround = bIsOnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicleEffectsComponent.CreateAudioComponent
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzVehicleAudioEvent             AudioEvent                                             (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bPlayEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::CreateAudioComponent(struct FGzVehicleAudioEvent& AudioEvent, bool bPlayEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "CreateAudioComponent");

	Params::GzVehicleEffectsComponent_CreateAudioComponent Parms{};

	Parms.AudioEvent = std::move(AudioEvent);
	Parms.bPlayEvent = bPlayEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AudioEvent = std::move(Parms.AudioEvent);
}


// DelegateFunction G01.GzVehicleEffectsComponent.HandbrakeStateChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsPullingHandbrake                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::HandbrakeStateChangedDelegate__DelegateSignature(bool bIsPullingHandbrake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "HandbrakeStateChangedDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_HandbrakeStateChangedDelegate__DelegateSignature Parms{};

	Parms.bIsPullingHandbrake = bIsPullingHandbrake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicleEffectsComponent.OnVehicleAxlePhysMaterialChanged
// (Final, Native, Private)
// Parameters:
// EGzVehicleAxle                          VehicleAxle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                PhysMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::OnVehicleAxlePhysMaterialChanged(EGzVehicleAxle VehicleAxle, class UPhysicalMaterial* PhysMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "OnVehicleAxlePhysMaterialChanged");

	Params::GzVehicleEffectsComponent_OnVehicleAxlePhysMaterialChanged Parms{};

	Parms.VehicleAxle = VehicleAxle;
	Parms.PhysMaterial = PhysMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleEffectsComponent.PlayEvent
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzVehicleAudioEvent             AudioEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::PlayEvent(const struct FGzVehicleAudioEvent& AudioEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "PlayEvent");

	Params::GzVehicleEffectsComponent_PlayEvent Parms{};

	Parms.AudioEvent = std::move(AudioEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleEffectsComponent.SetCustomRtpcValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzVehicleAudioEvent             AudioEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UAkRtpc*                          AkRtpc                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::SetCustomRtpcValue(const struct FGzVehicleAudioEvent& AudioEvent, class UAkRtpc* AkRtpc, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "SetCustomRtpcValue");

	Params::GzVehicleEffectsComponent_SetCustomRtpcValue Parms{};

	Parms.AudioEvent = std::move(AudioEvent);
	Parms.AkRtpc = AkRtpc;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleEffectsComponent.StopEvent
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGzVehicleAudioEvent             AudioEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::StopEvent(const struct FGzVehicleAudioEvent& AudioEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "StopEvent");

	Params::GzVehicleEffectsComponent_StopEvent Parms{};

	Parms.AudioEvent = std::move(AudioEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.GzVehicleEffectsComponent.SuspensionPercentageThresholdDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   SuspensionValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::SuspensionPercentageThresholdDelegate__DelegateSignature(float SuspensionValue, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "SuspensionPercentageThresholdDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_SuspensionPercentageThresholdDelegate__DelegateSignature Parms{};

	Parms.SuspensionValue = SuspensionValue;
	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVehicleEffectsComponent.TurretRotationStateChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsTurretRotating                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::TurretRotationStateChangedDelegate__DelegateSignature(bool bIsTurretRotating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "TurretRotationStateChangedDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_TurretRotationStateChangedDelegate__DelegateSignature Parms{};

	Parms.bIsTurretRotating = bIsTurretRotating;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVehicleEffectsComponent.WheelSkiddingOrSlippingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSkiddingOrSlipping                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::WheelSkiddingOrSlippingDelegate__DelegateSignature(int32 WheelIndex, bool bIsSkiddingOrSlipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "WheelSkiddingOrSlippingDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_WheelSkiddingOrSlippingDelegate__DelegateSignature Parms{};

	Parms.WheelIndex = WheelIndex;
	Parms.bIsSkiddingOrSlipping = bIsSkiddingOrSlipping;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction G01.GzVehicleEffectsComponent.WheelSteeringStateChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SteeringValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInContact                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleEffectsComponent::WheelSteeringStateChangedDelegate__DelegateSignature(int32 WheelIndex, float SteeringValue, bool bIsInContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleEffectsComponent", "WheelSteeringStateChangedDelegate__DelegateSignature");

	Params::GzVehicleEffectsComponent_WheelSteeringStateChangedDelegate__DelegateSignature Parms{};

	Parms.WheelIndex = WheelIndex;
	Parms.SteeringValue = SteeringValue;
	Parms.bIsInContact = bIsInContact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicleMapMarkerWidget.OnVehicleSeatChanged
// (Final, Native, Private)
// Parameters:
// class AGzCharacter*                     Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      NewSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzVehicleSeatType                      OldSeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleMapMarkerWidget::OnVehicleSeatChanged(class AGzCharacter* Character, EGzVehicleSeatType NewSeat, EGzVehicleSeatType OldSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "OnVehicleSeatChanged");

	Params::GzVehicleMapMarkerWidget_OnVehicleSeatChanged Parms{};

	Parms.Character = Character;
	Parms.NewSeat = NewSeat;
	Parms.OldSeat = OldSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleMapMarkerWidget.SetSeatPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<EGzVehicleSeatType, class UWidget*>InSeatPositionMap                                      (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGzVehicleMapMarkerWidget::SetSeatPosition(const TMap<EGzVehicleSeatType, class UWidget*>& InSeatPositionMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "SetSeatPosition");

	Params::GzVehicleMapMarkerWidget_SetSeatPosition Parms{};

	Parms.InSeatPositionMap = std::move(InSeatPositionMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleMapMarkerWidget.SetTeamColor
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   TeamMemberIndex                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Point                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzVehicleMapMarkerWidget::SetTeamColor(const int32 TeamMemberIndex, class UWidget* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "SetTeamColor");

	Params::GzVehicleMapMarkerWidget_SetTeamColor Parms{};

	Parms.TeamMemberIndex = TeamMemberIndex;
	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzVehicleMapMarkerWidget.UpdateAllElements
// (Final, Native, Protected, BlueprintCallable)

void UGzVehicleMapMarkerWidget::UpdateAllElements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateAllElements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzVehicleMapMarkerWidget.UpdateIcon
// (Event, Protected, BlueprintEvent)

void UGzVehicleMapMarkerWidget::UpdateIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicleMapMarkerWidget.UpdateTeamStateDefault
// (Event, Protected, BlueprintEvent)

void UGzVehicleMapMarkerWidget::UpdateTeamStateDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateTeamStateDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicleMapMarkerWidget.UpdateTeamStateEnemy
// (Event, Protected, BlueprintEvent)

void UGzVehicleMapMarkerWidget::UpdateTeamStateEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateTeamStateEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicleMapMarkerWidget.UpdateTeamStateFriend
// (Event, Protected, BlueprintEvent)

void UGzVehicleMapMarkerWidget::UpdateTeamStateFriend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateTeamStateFriend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicleMapMarkerWidget.UpdateTeamStatePlayer
// (Event, Protected, BlueprintEvent)

void UGzVehicleMapMarkerWidget::UpdateTeamStatePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "UpdateTeamStatePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzVehicleMapMarkerWidget.HasGunnerSeat
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzVehicleMapMarkerWidget::HasGunnerSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleMapMarkerWidget", "HasGunnerSeat");

	Params::GzVehicleMapMarkerWidget_HasGunnerSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVehicleSpawner.CanSpawn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzVehicleSpawner::CanSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVehicleSpawner", "CanSpawn");

	Params::GzVehicleSpawner_CanSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzVoiceableObject.GetPingVoiceLineData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const struct FGzPingVoiceLineData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FGzPingVoiceLineData IGzVoiceableObject::GetPingVoiceLineData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzVoiceableObject", "GetPingVoiceLineData");

	Params::GzVoiceableObject_GetPingVoiceLineData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWatermarkWidget.SetWaterMarkRepeatWord
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InWord                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWatermarkWidget::SetWaterMarkRepeatWord(const class FString& InWord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWatermarkWidget", "SetWaterMarkRepeatWord");

	Params::GzWatermarkWidget_SetWaterMarkRepeatWord Parms{};

	Parms.InWord = std::move(InWord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponAnimInstance.GetOwnerIKCurveValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponAnimInstance::GetOwnerIKCurveValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAnimInstance", "GetOwnerIKCurveValue");

	Params::GzWeaponAnimInstance_GetOwnerIKCurveValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponArchetype.GetAssetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzWeaponArchetype::GetAssetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponArchetype", "GetAssetId");

	Params::GzWeaponArchetype_GetAssetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponArchetype.GetDefaultAttachments
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UGzWeaponAttachmentItemData*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGzWeaponAttachmentItemData*> UGzWeaponArchetype::GetDefaultAttachments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponArchetype", "GetDefaultAttachments");

	Params::GzWeaponArchetype_GetDefaultAttachments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponArchetype.GetSuitableAttachmentIDsOfType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGzWeaponAttachmentType                 AttachmentType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzWeaponArchetype::GetSuitableAttachmentIDsOfType(EGzWeaponAttachmentType AttachmentType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponArchetype", "GetSuitableAttachmentIDsOfType");

	Params::GzWeaponArchetype_GetSuitableAttachmentIDsOfType Parms{};

	Parms.AttachmentType = AttachmentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponArchetype.GetSuitableSkinNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGzWeaponArchetype::GetSuitableSkinNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponArchetype", "GetSuitableSkinNames");

	Params::GzWeaponArchetype_GetSuitableSkinNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponAttachmentComponent.PlayWeaponAttachmentMontage
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     AnimationTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponAttachmentComponent::PlayWeaponAttachmentMontage(const struct FGameplayTag& AnimationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAttachmentComponent", "PlayWeaponAttachmentMontage");

	Params::GzWeaponAttachmentComponent_PlayWeaponAttachmentMontage Parms{};

	Parms.AnimationTag = std::move(AnimationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponAttachmentComponent.StopWeaponAttachmentMontage
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     AnimationTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponAttachmentComponent::StopWeaponAttachmentMontage(const struct FGameplayTag& AnimationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAttachmentComponent", "StopWeaponAttachmentMontage");

	Params::GzWeaponAttachmentComponent_StopWeaponAttachmentMontage Parms{};

	Parms.AnimationTag = std::move(AnimationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponAttachmentComponent.GetWeaponAttachmentItemData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGzWeaponAttachmentItemData*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWeaponAttachmentItemData* UGzWeaponAttachmentComponent::GetWeaponAttachmentItemData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponAttachmentComponent", "GetWeaponAttachmentItemData");

	Params::GzWeaponAttachmentComponent_GetWeaponAttachmentItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponCrosshair.OnUpdatedMaxPrecisionStateBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponCrosshair::OnUpdatedMaxPrecisionStateBP(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponCrosshair", "OnUpdatedMaxPrecisionStateBP");

	Params::GzWeaponCrosshair_OnUpdatedMaxPrecisionStateBP Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWeaponStatics.AttachComponentToWeapon
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ComponentToAttach                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNeedCheck                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponStatics::AttachComponentToWeapon(class USceneComponent* ComponentToAttach, const class AActor* WeaponActor, const class FName SocketName, bool bNeedCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "AttachComponentToWeapon");

	Params::GzWeaponStatics_AttachComponentToWeapon Parms{};

	Parms.ComponentToAttach = ComponentToAttach;
	Parms.WeaponActor = WeaponActor;
	Parms.SocketName = SocketName;
	Parms.bNeedCheck = bNeedCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponStatics.GetAllArchetypeCombinations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGzInventoryItemContent>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGzInventoryItemContent> UGzWeaponStatics::GetAllArchetypeCombinations(class UGzWeaponItemData* WeaponItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetAllArchetypeCombinations");

	Params::GzWeaponStatics_GetAllArchetypeCombinations Parms{};

	Parms.WeaponItemData = WeaponItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetAmmoCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponComponent*               WeaponComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInClip                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInStock                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponStatics::GetAmmoCount(class UGzWeaponComponent* WeaponComponent, bool bInClip, bool bInStock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetAmmoCount");

	Params::GzWeaponStatics_GetAmmoCount Parms{};

	Parms.WeaponComponent = WeaponComponent;
	Parms.bInClip = bInClip;
	Parms.bInStock = bInStock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetAmmoCountForWeaponPocket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APawn*                            Char                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzInvPocketId                   DedicatedPocketID                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInClip                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInStock                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGzWeaponStatics::GetAmmoCountForWeaponPocket(const class APawn* Char, const struct FGzInvPocketId& DedicatedPocketID, bool bInClip, bool bInStock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetAmmoCountForWeaponPocket");

	Params::GzWeaponStatics_GetAmmoCountForWeaponPocket Parms{};

	Parms.Char = Char;
	Parms.DedicatedPocketID = std::move(DedicatedPocketID);
	Parms.bInClip = bInClip;
	Parms.bInStock = bInStock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetAmmoItemDataForWeaponData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponData*                    WeaponData                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAmmoItemData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAmmoItemData* UGzWeaponStatics::GetAmmoItemDataForWeaponData(const class UGzWeaponData* WeaponData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetAmmoItemDataForWeaponData");

	Params::GzWeaponStatics_GetAmmoItemDataForWeaponData Parms{};

	Parms.WeaponData = WeaponData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetAmmoType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponComponent*               WeaponComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGzWeaponStatics::GetAmmoType(class UGzWeaponComponent* WeaponComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetAmmoType");

	Params::GzWeaponStatics_GetAmmoType Parms{};

	Parms.WeaponComponent = WeaponComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIAccuracy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIAccuracy(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIAccuracy");

	Params::GzWeaponStatics_GetUIAccuracy Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIClipSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIClipSize(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIClipSize");

	Params::GzWeaponStatics_GetUIClipSize Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIDamage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIDamage(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIDamage");

	Params::GzWeaponStatics_GetUIDamage Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIFireRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIFireRate(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIFireRate");

	Params::GzWeaponStatics_GetUIFireRate Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIHandling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIHandling(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIHandling");

	Params::GzWeaponStatics_GetUIHandling Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIMobility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIMobility(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIMobility");

	Params::GzWeaponStatics_GetUIMobility Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIRange(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIRange");

	Params::GzWeaponStatics_GetUIRange Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.GetUIRecoil
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGzWeaponItemData*                WeaponItemData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UGzWeaponAttachmentItemData*>AttachmentsData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponStatics::GetUIRecoil(class UGzWeaponItemData* WeaponItemData, const TArray<class UGzWeaponAttachmentItemData*>& AttachmentsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "GetUIRecoil");

	Params::GzWeaponStatics_GetUIRecoil Parms{};

	Parms.WeaponItemData = WeaponItemData;
	Parms.AttachmentsData = std::move(AttachmentsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.IsActiveWeaponClipEmpty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Char                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponStatics::IsActiveWeaponClipEmpty(class APawn* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "IsActiveWeaponClipEmpty");

	Params::GzWeaponStatics_IsActiveWeaponClipEmpty Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponStatics.IsActiveWeaponClipFull
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Char                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWeaponStatics::IsActiveWeaponClipFull(class APawn* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWeaponStatics", "IsActiveWeaponClipFull");

	Params::GzWeaponStatics_IsActiveWeaponClipFull Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponOverheatSystem.GetOverheatPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzWeaponOverheatSystem::GetOverheatPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponOverheatSystem", "GetOverheatPercentage");

	Params::GzWeaponOverheatSystem_GetOverheatPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponPocketWidget.OnOwnerLimbChanged
// (Final, Native, Private)
// Parameters:
// EGzLimbType                             Limb                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponPocketWidget::OnOwnerLimbChanged(EGzLimbType Limb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPocketWidget", "OnOwnerLimbChanged");

	Params::GzWeaponPocketWidget_OnOwnerLimbChanged Parms{};

	Parms.Limb = Limb;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponPocketWidget.OnWeaponEquipped
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGzInvPocketId                   InvPocketId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGzWeaponActor*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponPocketWidget::OnWeaponEquipped(const struct FGzInvPocketId& InvPocketId, const class AGzWeaponActor* WeaponActor, bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPocketWidget", "OnWeaponEquipped");

	Params::GzWeaponPocketWidget_OnWeaponEquipped Parms{};

	Parms.InvPocketId = std::move(InvPocketId);
	Parms.WeaponActor = WeaponActor;
	Parms.bEquipped = bEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponPocketWidget.RefreshClipAmount
// (Event, Protected, BlueprintEvent)

void UGzWeaponPocketWidget::RefreshClipAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPocketWidget", "RefreshClipAmount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWeaponPocketWidget.RefreshEquipCondition
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanEquip                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponPocketWidget::RefreshEquipCondition(bool bCanEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPocketWidget", "RefreshEquipCondition");

	Params::GzWeaponPocketWidget_RefreshEquipCondition Parms{};

	Parms.bCanEquip = bCanEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWeaponPocketWidget.UpdateEquipped
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bEquipped                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponPocketWidget::UpdateEquipped(bool bEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponPocketWidget", "UpdateEquipped");

	Params::GzWeaponPocketWidget_UpdateEquipped Parms{};

	Parms.bEquipped = bEquipped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzZipline.ClearZipline
// (Final, Native, Protected)

void AGzZipline::ClearZipline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "ClearZipline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzZipline.GetEndEdgeSegmentMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* AGzZipline::GetEndEdgeSegmentMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "GetEndEdgeSegmentMeshComponent");

	Params::GzZipline_GetEndEdgeSegmentMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZipline.GetEndMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* AGzZipline::GetEndMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "GetEndMeshComponent");

	Params::GzZipline_GetEndMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZipline.GetStartEdgeSegmentMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* AGzZipline::GetStartEdgeSegmentMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "GetStartEdgeSegmentMeshComponent");

	Params::GzZipline_GetStartEdgeSegmentMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZipline.GetStartMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* AGzZipline::GetStartMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "GetStartMeshComponent");

	Params::GzZipline_GetStartMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZipline.OnInteract
// (Final, Native, Protected)
// Parameters:
// class AActor*                           InteractedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzInteractableComponent*         Interactable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzZipline::OnInteract(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "OnInteract");

	Params::GzZipline_OnInteract Parms{};

	Parms.InteractedBy = InteractedBy;
	Parms.Interactable = Interactable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzZipline.RebuildZipline
// (Final, Native, Public, BlueprintCallable)

void AGzZipline::RebuildZipline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "RebuildZipline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzZipline.GetLocationAtMovementAlongZiplineProgressOnSpline
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGzZiplineMovementRuntimeData    ZiplineData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// ESplineCoordinateSpace                  CoordinateSpace                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGzZipline::GetLocationAtMovementAlongZiplineProgressOnSpline(const struct FGzZiplineMovementRuntimeData& ZiplineData, ESplineCoordinateSpace CoordinateSpace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "GetLocationAtMovementAlongZiplineProgressOnSpline");

	Params::GzZipline_GetLocationAtMovementAlongZiplineProgressOnSpline Parms{};

	Parms.ZiplineData = std::move(ZiplineData);
	Parms.CoordinateSpace = CoordinateSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZipline.IsVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGzZipline::IsVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZipline", "IsVertical");

	Params::GzZipline_IsVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWeaponRecoilCompensatingChecker.OnPlayerInputRotatationReceived
// (Final, Native, Protected)
// Parameters:
// class AGzPlayerCharacter*               Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGzPlayerInputRotatationType            ViewInputType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponRecoilCompensatingChecker::OnPlayerInputRotatationReceived(const class AGzPlayerCharacter* Player, EGzPlayerInputRotatationType ViewInputType, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponRecoilCompensatingChecker", "OnPlayerInputRotatationReceived");

	Params::GzWeaponRecoilCompensatingChecker_OnPlayerInputRotatationReceived Parms{};

	Parms.Player = Player;
	Parms.ViewInputType = ViewInputType;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWeaponResourcesSystem.OnPawnOwnerGameplayTagChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWeaponResourcesSystem::OnPawnOwnerGameplayTagChanged(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWeaponResourcesSystem", "OnPawnOwnerGameplayTagChanged");

	Params::GzWeaponResourcesSystem_OnPawnOwnerGameplayTagChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWE_UITagsAware.NotifyOnTagAdded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     NewTag                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzWE_UITagsAware::NotifyOnTagAdded(const struct FGameplayTag& NewTag, const struct FGameplayTagContainer& CurrentTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWE_UITagsAware", "NotifyOnTagAdded");

	Params::GzWE_UITagsAware_NotifyOnTagAdded Parms{};

	Parms.NewTag = std::move(NewTag);
	Parms.CurrentTags = std::move(CurrentTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWE_UITagsAware.NotifyOnTagRemoved
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     RemovedTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGzWE_UITagsAware::NotifyOnTagRemoved(const struct FGameplayTag& RemovedTag, const struct FGameplayTagContainer& CurrentTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWE_UITagsAware", "NotifyOnTagRemoved");

	Params::GzWE_UITagsAware_NotifyOnTagRemoved Parms{};

	Parms.RemovedTag = std::move(RemovedTag);
	Parms.CurrentTags = std::move(CurrentTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWE_UITagsAware.OnTagsApplicable
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWE_UITagsAware::OnTagsApplicable(const struct FGameplayTagContainer& CurrentTags, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWE_UITagsAware", "OnTagsApplicable");

	Params::GzWE_UITagsAware_OnTagsApplicable Parms{};

	Parms.CurrentTags = std::move(CurrentTags);
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWE_UITagsAware.OnTagsNotApplicable
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzWE_UITagsAware::OnTagsNotApplicable(const struct FGameplayTagContainer& CurrentTags, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWE_UITagsAware", "OnTagsNotApplicable");

	Params::GzWE_UITagsAware_OnTagsNotApplicable Parms{};

	Parms.CurrentTags = std::move(CurrentTags);
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWhenObjective.MakeWhenAnyObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_Condition                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzWhenObjective::MakeWhenAnyObjective(class AGzAdvancedMission* Mission, class UGzCondition* Param_Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWhenObjective", "MakeWhenAnyObjective");

	Params::GzWhenObjective_MakeWhenAnyObjective Parms{};

	Parms.Mission = Mission;
	Parms.Param_Condition = Param_Condition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWhenObjective.MakeWhenNegativeObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_Condition                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzWhenObjective::MakeWhenNegativeObjective(class AGzAdvancedMission* Mission, class UGzCondition* Param_Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWhenObjective", "MakeWhenNegativeObjective");

	Params::GzWhenObjective_MakeWhenNegativeObjective Parms{};

	Parms.Mission = Mission;
	Parms.Param_Condition = Param_Condition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWhenObjective.MakeWhenPositiveObjective
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGzAdvancedMission*               Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzCondition*                     Param_Condition                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzObjective*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzObjective* UGzWhenObjective::MakeWhenPositiveObjective(class AGzAdvancedMission* Mission, class UGzCondition* Param_Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzWhenObjective", "MakeWhenPositiveObjective");

	Params::GzWhenObjective_MakeWhenPositiveObjective Parms{};

	Parms.Mission = Mission;
	Parms.Param_Condition = Param_Condition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWidgetDisplayInterface.Hide
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void IGzWidgetDisplayInterface::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWidgetDisplayInterface", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWidgetDisplayInterface.Show
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void IGzWidgetDisplayInterface::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWidgetDisplayInterface", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzWingsuitMeshActor.DetachJetpackBoostVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGzWingsuitMeshActor::DetachJetpackBoostVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWingsuitMeshActor", "DetachJetpackBoostVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWingsuitMeshActor.GetOwnerCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGzMultiPartCharacter*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzMultiPartCharacter* AGzWingsuitMeshActor::GetOwnerCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWingsuitMeshActor", "GetOwnerCharacter");

	Params::GzWingsuitMeshActor_GetOwnerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWingsuitMeshActor.K2_OnEndWingsuit
// (Event, Protected, BlueprintEvent)

void AGzWingsuitMeshActor::K2_OnEndWingsuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWingsuitMeshActor", "K2_OnEndWingsuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWingsuitMeshActor.K2_OnStartWingsuit
// (Event, Protected, BlueprintEvent)

void AGzWingsuitMeshActor::K2_OnStartWingsuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWingsuitMeshActor", "K2_OnStartWingsuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.GzWingsuitMeshActor.SetJetpackBoostVisual
// (Event, Public, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      JetpackBoostVisual                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzWingsuitMeshActor::SetJetpackBoostVisual(class UStaticMesh* JetpackBoostVisual, bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWingsuitMeshActor", "SetJetpackBoostVisual");

	Params::GzWingsuitMeshActor_SetJetpackBoostVisual Parms{};

	Parms.JetpackBoostVisual = JetpackBoostVisual;
	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWorldVisibilityBlendActor.SetState
// (Event, Public, BlueprintEvent)
// Parameters:
// EDepthStencilValue                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzWorldVisibilityBlendActor::SetState(EDepthStencilValue Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldVisibilityBlendActor", "SetState");

	Params::GzWorldVisibilityBlendActor_SetState Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWorldVisibilityBlendActor.SetStateSeparateForLimb
// (Event, Public, BlueprintEvent)
// Parameters:
// EDepthStencilValue                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDepthStencilValue                      ValueForLimbs                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGzWorldVisibilityBlendActor::SetStateSeparateForLimb(EDepthStencilValue Value, EDepthStencilValue ValueForLimbs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldVisibilityBlendActor", "SetStateSeparateForLimb");

	Params::GzWorldVisibilityBlendActor_SetStateSeparateForLimb Parms{};

	Parms.Value = Value;
	Parms.ValueForLimbs = ValueForLimbs;

	UObject::ProcessEvent(Func, &Parms);
}


// Function G01.GzWorldZone.GetMetaDataByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGzWorldZoneMetadata> MetaDataClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzWorldZoneMetadata*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzWorldZoneMetadata* UGzWorldZone::GetMetaDataByClass(TSubclassOf<class UGzWorldZoneMetadata> MetaDataClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZone", "GetMetaDataByClass");

	Params::GzWorldZone_GetMetaDataByClass Parms{};

	Parms.MetaDataClass = MetaDataClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZone.IsInBorders
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzWorldZone::IsInBorders(const struct FVector2D& Position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZone", "IsInBorders");

	Params::GzWorldZone_IsInBorders Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZoneTrackingComponent.GetTrackedWorldZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGzWorldZone*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGzWorldZone* UGzWorldZoneTrackingComponent::GetTrackedWorldZone(class FName Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZoneTrackingComponent", "GetTrackedWorldZone");

	Params::GzWorldZoneTrackingComponent_GetTrackedWorldZone Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzWorldZoneType.GetAssetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGzWorldZoneType::GetAssetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzWorldZoneType", "GetAssetId");

	Params::GzWorldZoneType_GetAssetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzXR_MissionCompleteRedeployModifier.OnMissionStateChanged
// (Final, Native, Private)
// Parameters:
// class AGzMission*                       Mission                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGzMissionState                  OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGzMissionState                  MissionState                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGzXR_MissionCompleteRedeployModifier::OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzXR_MissionCompleteRedeployModifier", "OnMissionStateChanged");

	Params::GzXR_MissionCompleteRedeployModifier_OnMissionStateChanged Parms{};

	Parms.Mission = Mission;
	Parms.OldState = std::move(OldState);
	Parms.MissionState = std::move(MissionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzZoneTrackingComponent.OnOverloadStageChanged
// (Final, Native, Private)
// Parameters:
// int32                                   NewStageIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzZoneTrackingComponent::OnOverloadStageChanged(const int32 NewStageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTrackingComponent", "OnOverloadStageChanged");

	Params::GzZoneTrackingComponent_OnOverloadStageChanged Parms{};

	Parms.NewStageIndex = NewStageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.GzZoneTrackingComponent.GetClosestPointToSafety
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzZoneTrackingComponent::GetClosestPointToSafety(struct FVector2D* OutPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTrackingComponent", "GetClosestPointToSafety");

	Params::GzZoneTrackingComponent_GetClosestPointToSafety Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function G01.GzZoneTrackingComponent.GetClosestZoneCenter
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        OutCenter                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGzZoneTrackingComponent::GetClosestZoneCenter(struct FVector2D* OutCenter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTrackingComponent", "GetClosestZoneCenter");

	Params::GzZoneTrackingComponent_GetClosestZoneCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCenter != nullptr)
		*OutCenter = std::move(Parms.OutCenter);

	return Parms.ReturnValue;
}


// Function G01.GzZoneTrackingComponent.GetDistanceToZoneEdge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGzZoneTrackingComponent::GetDistanceToZoneEdge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTrackingComponent", "GetDistanceToZoneEdge");

	Params::GzZoneTrackingComponent_GetDistanceToZoneEdge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZoneTrackingComponent.GetTrackedPosition
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGzZoneTrackingComponent::GetTrackedPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTrackingComponent", "GetTrackedPosition");

	Params::GzZoneTrackingComponent_GetTrackedPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzZoneTriangulationTaskRunner.OnZoneStartOverload
// (Final, Native, Private)
// Parameters:
// class AGzBattleRoyaleZone*              Zone                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGzZoneTriangulationTaskRunner::OnZoneStartOverload(class AGzBattleRoyaleZone* Zone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GzZoneTriangulationTaskRunner", "OnZoneStartOverload");

	Params::GzZoneTriangulationTaskRunner_OnZoneStartOverload Parms{};

	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_CheckTargetDistance.CalculateTargetDistance
// (Final, Native, Private, Const)

void UGz_BTService_CheckTargetDistance::CalculateTargetDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_CheckTargetDistance", "CalculateTargetDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.Gz_BTService_CheckTargetDistance.GetBlackboardComponent
// (Final, Native, Public, Const)
// Parameters:
// class UBlackboardComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* UGz_BTService_CheckTargetDistance::GetBlackboardComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_CheckTargetDistance", "GetBlackboardComponent");

	Params::Gz_BTService_CheckTargetDistance_GetBlackboardComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.Gz_BTService_CheckTargetDistance.GetGzAIController
// (Final, Native, Public, Const)
// Parameters:
// class AGzAIController*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGzAIController* UGz_BTService_CheckTargetDistance::GetGzAIController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gz_BTService_CheckTargetDistance", "GetGzAIController");

	Params::Gz_BTService_CheckTargetDistance_GetGzAIController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.Gz_BTTask_FlyTo.FindFlightPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGzAICharacter*                   TargetAI                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DestinationActor                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UGz_BTTask_FlyTo::FindFlightPath(const class AGzAICharacter* TargetAI, const class AActor* DestinationActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Gz_BTTask_FlyTo", "FindFlightPath");

	Params::Gz_BTTask_FlyTo_FindFlightPath Parms{};

	Parms.TargetAI = TargetAI;
	Parms.DestinationActor = DestinationActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.InterestPoint.SetPointFree
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewFree                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInterestPoint::SetPointFree(bool NewFree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterestPoint", "SetPointFree");

	Params::InterestPoint_SetPointFree Parms{};

	Parms.NewFree = NewFree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacterInterface.SetMovementAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELocomotionMovementAction               MovementAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILocomotionCharacterInterface::SetMovementAction(ELocomotionMovementAction MovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "SetMovementAction");

	Params::LocomotionCharacterInterface_SetMovementAction Parms{};

	Parms.MovementAction = MovementAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacterInterface.SetOverlayState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELocomotionOverlayState                 OverlayState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILocomotionCharacterInterface::SetOverlayState(ELocomotionOverlayState OverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "SetOverlayState");

	Params::LocomotionCharacterInterface_SetOverlayState Parms{};

	Parms.OverlayState = OverlayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionCharacterInterface.GetCapsule
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* ILocomotionCharacterInterface::GetCapsule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetCapsule");

	Params::LocomotionCharacterInterface_GetCapsule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacterInterface.GetCurrentStates
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLocomotionCurrentStates         States                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void ILocomotionCharacterInterface::GetCurrentStates(struct FLocomotionCurrentStates* States) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetCurrentStates");

	Params::LocomotionCharacterInterface_GetCurrentStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (States != nullptr)
		*States = std::move(Parms.States);
}


// Function G01.LocomotionCharacterInterface.GetEssentialValues
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLocomotionEssentialValues       Values                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void ILocomotionCharacterInterface::GetEssentialValues(struct FLocomotionEssentialValues* Values) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetEssentialValues");

	Params::LocomotionCharacterInterface_GetEssentialValues Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Values != nullptr)
		*Values = std::move(Parms.Values);
}


// Function G01.LocomotionCharacterInterface.GetHeldObjectMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* ILocomotionCharacterInterface::GetHeldObjectMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetHeldObjectMesh");

	Params::LocomotionCharacterInterface_GetHeldObjectMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacterInterface.GetHeldObjectRoot
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ILocomotionCharacterInterface::GetHeldObjectRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetHeldObjectRoot");

	Params::LocomotionCharacterInterface_GetHeldObjectRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacterInterface.GetHeldObjectSkeletalMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ILocomotionCharacterInterface::GetHeldObjectSkeletalMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetHeldObjectSkeletalMesh");

	Params::LocomotionCharacterInterface_GetHeldObjectSkeletalMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacterInterface.GetMovement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UCharacterMovementComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterMovementComponent* ILocomotionCharacterInterface::GetMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetMovement");

	Params::LocomotionCharacterInterface_GetMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionCharacterInterface.GetPawnMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ILocomotionCharacterInterface::GetPawnMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionCharacterInterface", "GetPawnMesh");

	Params::LocomotionCharacterInterface_GetPawnMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.AttachToHand
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      NewStaticMesh                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    NewSkeletalMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           AnimInstanceClass                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLeftHand                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* AnimInstanceClass, bool bLeftHand, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "AttachToHand");

	Params::LocomotionComponent_AttachToHand Parms{};

	Parms.NewStaticMesh = NewStaticMesh;
	Parms.NewSkeletalMesh = NewSkeletalMesh;
	Parms.AnimInstanceClass = AnimInstanceClass;
	Parms.bLeftHand = bLeftHand;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.CacheValues
// (Final, Native, Public, BlueprintCallable)

void ULocomotionComponent::CacheValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "CacheValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.ClearHeldObject
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ULocomotionComponent::ClearHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "ClearHeldObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.GetRotationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELocomotionRotationMode                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELocomotionRotationMode ULocomotionComponent::GetRotationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "GetRotationMode");

	Params::LocomotionComponent_GetRotationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.GetStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELocomotionStance                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELocomotionStance ULocomotionComponent::GetStance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "GetStance");

	Params::LocomotionComponent_GetStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.Initialize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           LocomotionCharacter                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULocomotionComponent::Initialize(const class AActor* LocomotionCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "Initialize");

	Params::LocomotionComponent_Initialize Parms{};

	Parms.LocomotionCharacter = LocomotionCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.OnGaitChanged
// (Native, Event, Public, BlueprintEvent)

void ULocomotionComponent::OnGaitChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnGaitChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionComponent.OnGaitChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnGaitChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnGaitChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionComponent.OnMovementActionChanged
// (Final, Native, Public)
// Parameters:
// ELocomotionMovementAction               PreviousAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::OnMovementActionChanged(ELocomotionMovementAction PreviousAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnMovementActionChanged");

	Params::LocomotionComponent_OnMovementActionChanged Parms{};

	Parms.PreviousAction = PreviousAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.OnMovementModeChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ACharacter*                       C                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::OnMovementModeChanged(class ACharacter* C, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnMovementModeChanged");

	Params::LocomotionComponent_OnMovementModeChanged Parms{};

	Parms.C = C;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionComponent.OnMovementStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnMovementStateChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnMovementStateChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionComponent.OnOverlayChanged
// (Native, Event, Public, BlueprintEvent)

void ULocomotionComponent::OnOverlayChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnOverlayChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionComponent.OnOverlayStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnOverlayStateChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnOverlayStateChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction G01.LocomotionComponent.OnRotationModeChaged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnRotationModeChaged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnRotationModeChaged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionComponent.OnRotationModeChanged
// (Native, Event, Public, BlueprintEvent)

void ULocomotionComponent::OnRotationModeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnRotationModeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.OnStanceChanged
// (Native, Event, Public, BlueprintEvent)

void ULocomotionComponent::OnStanceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnStanceChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionComponent.OnStanceChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnStanceChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnStanceChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionComponent.OnViewModeChanged
// (Native, Event, Public, BlueprintEvent)

void ULocomotionComponent::OnViewModeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnViewModeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction G01.LocomotionComponent.OnViewModeChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ULocomotionComponent::OnViewModeChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "OnViewModeChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function G01.LocomotionComponent.Roll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::Roll(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "Roll");

	Params::LocomotionComponent_Roll Parms{};

	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetEssentialValues
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetEssentialValues(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetEssentialValues");

	Params::LocomotionComponent_SetEssentialValues Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetHeldObjectVariables
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLocomotionHeldObjectVariables   Variables                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetHeldObjectVariables(const struct FLocomotionHeldObjectVariables& Variables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetHeldObjectVariables");

	Params::LocomotionComponent_SetHeldObjectVariables Parms{};

	Parms.Variables = std::move(Variables);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetMovementState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELocomotionMovementState                NewMovementState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetMovementState(ELocomotionMovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetMovementState");

	Params::LocomotionComponent_SetMovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetOverlayState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELocomotionOverlayState                 NewOverlayState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetOverlayState(ELocomotionOverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetOverlayState");

	Params::LocomotionComponent_SetOverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetStance
// (Final, Native, Public)
// Parameters:
// ELocomotionStance                       NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetStance(ELocomotionStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetStance");

	Params::LocomotionComponent_SetStance Parms{};

	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.SetViewMode
// (Final, Native, Public)
// Parameters:
// ELocomotionViewMode                     NewViewMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::SetViewMode(ELocomotionViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "SetViewMode");

	Params::LocomotionComponent_SetViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.UpdateGroundedRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocallyControlled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ULocomotionComponent::UpdateGroundedRotation(float DeltaTime, bool bLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "UpdateGroundedRotation");

	Params::LocomotionComponent_UpdateGroundedRotation Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bLocallyControlled = bLocallyControlled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.UpdateHeldObject
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ULocomotionComponent::UpdateHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "UpdateHeldObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.UpdateHeldObjectAnimations
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ULocomotionComponent::UpdateHeldObjectAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "UpdateHeldObjectAnimations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.UpdateInAirRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocallyControlled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionComponent::UpdateInAirRotation(float DeltaTime, bool bLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "UpdateInAirRotation");

	Params::LocomotionComponent_UpdateInAirRotation Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bLocallyControlled = bLocallyControlled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionComponent.GetControlRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ULocomotionComponent::GetControlRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "GetControlRotation");

	Params::LocomotionComponent_GetControlRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.GetGetUpAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* ULocomotionComponent::GetGetUpAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "GetGetUpAnimation");

	Params::LocomotionComponent_GetGetUpAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionComponent.GetRollAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* ULocomotionComponent::GetRollAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionComponent", "GetRollAnimation");

	Params::LocomotionComponent_GetRollAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionControllerInterface.GetDebugInfo
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    DebugView                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowHUD                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraces                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowDebugShapes                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowLayerColors                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Slomo                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowCharacterInfo                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILocomotionControllerInterface::GetDebugInfo(bool* DebugView, bool* ShowHUD, bool* ShowTraces, bool* ShowDebugShapes, bool* ShowLayerColors, bool* Slomo, bool* ShowCharacterInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionControllerInterface", "GetDebugInfo");

	Params::LocomotionControllerInterface_GetDebugInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugView != nullptr)
		*DebugView = Parms.DebugView;

	if (ShowHUD != nullptr)
		*ShowHUD = Parms.ShowHUD;

	if (ShowTraces != nullptr)
		*ShowTraces = Parms.ShowTraces;

	if (ShowDebugShapes != nullptr)
		*ShowDebugShapes = Parms.ShowDebugShapes;

	if (ShowLayerColors != nullptr)
		*ShowLayerColors = Parms.ShowLayerColors;

	if (Slomo != nullptr)
		*Slomo = Parms.Slomo;

	if (ShowCharacterInfo != nullptr)
		*ShowCharacterInfo = Parms.ShowCharacterInfo;
}


// Function G01.LocomotionHUDWidget.InitializeWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCanvasPanel*                     MovablePanels                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           Arrow                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocomotionHUDWidget::InitializeWidget(class UCanvasPanel* MovablePanels, class UImage* Arrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "InitializeWidget");

	Params::LocomotionHUDWidget_InitializeWidget Parms{};

	Parms.MovablePanels = MovablePanels;
	Parms.Arrow = Arrow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function G01.LocomotionHUDWidget.GetCharacterInfoVisibility
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility ULocomotionHUDWidget::GetCharacterInfoVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetCharacterInfoVisibility");

	Params::LocomotionHUDWidget_GetCharacterInfoVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetCharacterStates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetCharacterStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetCharacterStates");

	Params::LocomotionHUDWidget_GetCharacterStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetDebugViewKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetDebugViewKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetDebugViewKey");

	Params::LocomotionHUDWidget_GetDebugViewKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetShowCharacterInfoKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetShowCharacterInfoKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetShowCharacterInfoKey");

	Params::LocomotionHUDWidget_GetShowCharacterInfoKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetShowDebugShapesKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetShowDebugShapesKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetShowDebugShapesKey");

	Params::LocomotionHUDWidget_GetShowDebugShapesKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetShowHUDKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetShowHUDKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetShowHUDKey");

	Params::LocomotionHUDWidget_GetShowHUDKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetShowLayerColorsKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetShowLayerColorsKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetShowLayerColorsKey");

	Params::LocomotionHUDWidget_GetShowLayerColorsKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetShowTracesKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetShowTracesKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetShowTracesKey");

	Params::LocomotionHUDWidget_GetShowTracesKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.LocomotionHUDWidget.GetSlomoKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ULocomotionHUDWidget::GetSlomoKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocomotionHUDWidget", "GetSlomoKey");

	Params::LocomotionHUDWidget_GetSlomoKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function G01.GzAT_WaitSlideEndConditionsMeet.CreateWaitSlideEndConditionsMeet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGzAT_WaitSlideEndConditionsMeet* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGzAT_WaitSlideEndConditionsMeet* UGzAT_WaitSlideEndConditionsMeet::CreateWaitSlideEndConditionsMeet(class UGameplayAbility* OwningAbility, float SpeedThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GzAT_WaitSlideEndConditionsMeet", "CreateWaitSlideEndConditionsMeet");

	Params::GzAT_WaitSlideEndConditionsMeet_CreateWaitSlideEndConditionsMeet Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.SpeedThreshold = SpeedThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

