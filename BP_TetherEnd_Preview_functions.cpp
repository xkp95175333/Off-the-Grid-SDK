#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TetherEnd_Preview

#include "Basic.hpp"

#include "BP_TetherEnd_Preview_classes.hpp"
#include "BP_TetherEnd_Preview_parameters.hpp"


namespace SDK
{

// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.ExecuteUbergraph_BP_TetherEnd_Preview
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TetherEnd_Preview_C::ExecuteUbergraph_BP_TetherEnd_Preview(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "ExecuteUbergraph_BP_TetherEnd_Preview");

	Params::BP_TetherEnd_Preview_C_ExecuteUbergraph_BP_TetherEnd_Preview Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TetherEnd_Preview_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.SetupMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TetherEnd_Preview_C::SetupMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "SetupMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateColors
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TetherEnd_Preview_C::UpdateColors(bool IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "UpdateColors");

	Params::BP_TetherEnd_Preview_C_UpdateColors Parms{};

	Parms.IsValid = IsValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateLaserTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGzLimbType                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TetherEnd_Preview_C::UpdateLaserTransform(EGzLimbType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "UpdateLaserTransform");

	Params::BP_TetherEnd_Preview_C_UpdateLaserTransform Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TetherEnd_Preview.BP_TetherEnd_Preview_C.UpdateSphere
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGzLimbType                             LimbType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TetherEnd_Preview_C::UpdateSphere(bool IsValid, const struct FVector& Location, const struct FVector& Normal, EGzLimbType LimbType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TetherEnd_Preview_C", "UpdateSphere");

	Params::BP_TetherEnd_Preview_C_UpdateSphere Parms{};

	Parms.IsValid = IsValid;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.LimbType = LimbType;

	UObject::ProcessEvent(Func, &Parms);
}

}

