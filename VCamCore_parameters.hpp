#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCamCore

#include "Basic.hpp"

#include "VCamCore_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LiveLinkInterface_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function VCamCore.GameplayViewTargetPolicy.DeterminePlayerControllers
// 0x0028 (0x0028 - 0x0000)
struct GameplayViewTargetPolicy_DeterminePlayerControllers final
{
public:
	struct FDeterminePlayerControllersTargetPolicyParams Params_0;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayViewTargetPolicy_DeterminePlayerControllers) == 0x000008, "Wrong alignment on GameplayViewTargetPolicy_DeterminePlayerControllers");
static_assert(sizeof(GameplayViewTargetPolicy_DeterminePlayerControllers) == 0x000028, "Wrong size on GameplayViewTargetPolicy_DeterminePlayerControllers");
static_assert(offsetof(GameplayViewTargetPolicy_DeterminePlayerControllers, Params_0) == 0x000000, "Member 'GameplayViewTargetPolicy_DeterminePlayerControllers::Params_0' has a wrong offset!");
static_assert(offsetof(GameplayViewTargetPolicy_DeterminePlayerControllers, ReturnValue) == 0x000018, "Member 'GameplayViewTargetPolicy_DeterminePlayerControllers::ReturnValue' has a wrong offset!");

// Function VCamCore.GameplayViewTargetPolicy.UpdateViewTarget
// 0x0028 (0x0028 - 0x0000)
struct GameplayViewTargetPolicy_UpdateViewTarget final
{
public:
	struct FUpdateViewTargetPolicyParams          Params_0;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayViewTargetPolicy_UpdateViewTarget) == 0x000008, "Wrong alignment on GameplayViewTargetPolicy_UpdateViewTarget");
static_assert(sizeof(GameplayViewTargetPolicy_UpdateViewTarget) == 0x000028, "Wrong size on GameplayViewTargetPolicy_UpdateViewTarget");
static_assert(offsetof(GameplayViewTargetPolicy_UpdateViewTarget, Params_0) == 0x000000, "Member 'GameplayViewTargetPolicy_UpdateViewTarget::Params_0' has a wrong offset!");

// Function VCamCore.VCamComponent.AddInputProfileWithCurrentlyActiveMappings
// 0x000C (0x000C - 0x0000)
struct VCamComponent_AddInputProfileWithCurrentlyActiveMappings final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateIfProfileAlreadyExists;                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBA[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_AddInputProfileWithCurrentlyActiveMappings) == 0x000004, "Wrong alignment on VCamComponent_AddInputProfileWithCurrentlyActiveMappings");
static_assert(sizeof(VCamComponent_AddInputProfileWithCurrentlyActiveMappings) == 0x00000C, "Wrong size on VCamComponent_AddInputProfileWithCurrentlyActiveMappings");
static_assert(offsetof(VCamComponent_AddInputProfileWithCurrentlyActiveMappings, ProfileName) == 0x000000, "Member 'VCamComponent_AddInputProfileWithCurrentlyActiveMappings::ProfileName' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddInputProfileWithCurrentlyActiveMappings, bUpdateIfProfileAlreadyExists) == 0x000008, "Member 'VCamComponent_AddInputProfileWithCurrentlyActiveMappings::bUpdateIfProfileAlreadyExists' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddInputProfileWithCurrentlyActiveMappings, ReturnValue) == 0x000009, "Member 'VCamComponent_AddInputProfileWithCurrentlyActiveMappings::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.AddModifier
// 0x0020 (0x0020 - 0x0000)
struct VCamComponent_AddModifier final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UVCamModifier>              ModifierClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifier*                          CreatedModifier;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_AddModifier) == 0x000008, "Wrong alignment on VCamComponent_AddModifier");
static_assert(sizeof(VCamComponent_AddModifier) == 0x000020, "Wrong size on VCamComponent_AddModifier");
static_assert(offsetof(VCamComponent_AddModifier, Param_Name) == 0x000000, "Member 'VCamComponent_AddModifier::Param_Name' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddModifier, ModifierClass) == 0x000008, "Member 'VCamComponent_AddModifier::ModifierClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddModifier, CreatedModifier) == 0x000010, "Member 'VCamComponent_AddModifier::CreatedModifier' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddModifier, ReturnValue) == 0x000018, "Member 'VCamComponent_AddModifier::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.AddOutputProvider
// 0x0018 (0x0018 - 0x0000)
struct VCamComponent_AddOutputProvider final
{
public:
	TSubclassOf<class UVCamOutputProviderBase>    ProviderClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamOutputProviderBase*                CreatedProvider;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_AddOutputProvider) == 0x000008, "Wrong alignment on VCamComponent_AddOutputProvider");
static_assert(sizeof(VCamComponent_AddOutputProvider) == 0x000018, "Wrong size on VCamComponent_AddOutputProvider");
static_assert(offsetof(VCamComponent_AddOutputProvider, ProviderClass) == 0x000000, "Member 'VCamComponent_AddOutputProvider::ProviderClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddOutputProvider, CreatedProvider) == 0x000008, "Member 'VCamComponent_AddOutputProvider::CreatedProvider' has a wrong offset!");
static_assert(offsetof(VCamComponent_AddOutputProvider, ReturnValue) == 0x000010, "Member 'VCamComponent_AddOutputProvider::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetLiveLinkDataForCurrentFrame
// 0x0160 (0x0160 - 0x0000)
struct VCamComponent_GetLiveLinkDataForCurrentFrame final
{
public:
	struct FLiveLinkCameraBlueprintData           LiveLinkData;                                      // 0x0000(0x0150)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBD[0xF];                                     // 0x0151(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_GetLiveLinkDataForCurrentFrame) == 0x000010, "Wrong alignment on VCamComponent_GetLiveLinkDataForCurrentFrame");
static_assert(sizeof(VCamComponent_GetLiveLinkDataForCurrentFrame) == 0x000160, "Wrong size on VCamComponent_GetLiveLinkDataForCurrentFrame");
static_assert(offsetof(VCamComponent_GetLiveLinkDataForCurrentFrame, LiveLinkData) == 0x000000, "Member 'VCamComponent_GetLiveLinkDataForCurrentFrame::LiveLinkData' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetLiveLinkDataForCurrentFrame, ReturnValue) == 0x000150, "Member 'VCamComponent_GetLiveLinkDataForCurrentFrame::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.InjectInputForAction
// 0x0048 (0x0048 - 0x0000)
struct VCamComponent_InjectInputForAction final
{
public:
	const class UInputAction*                     Action;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionValue                      RawValue;                                          // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_InjectInputForAction) == 0x000008, "Wrong alignment on VCamComponent_InjectInputForAction");
static_assert(sizeof(VCamComponent_InjectInputForAction) == 0x000048, "Wrong size on VCamComponent_InjectInputForAction");
static_assert(offsetof(VCamComponent_InjectInputForAction, Action) == 0x000000, "Member 'VCamComponent_InjectInputForAction::Action' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputForAction, RawValue) == 0x000008, "Member 'VCamComponent_InjectInputForAction::RawValue' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputForAction, Modifiers) == 0x000028, "Member 'VCamComponent_InjectInputForAction::Modifiers' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputForAction, Triggers) == 0x000038, "Member 'VCamComponent_InjectInputForAction::Triggers' has a wrong offset!");

// Function VCamCore.VCamComponent.InjectInputVectorForAction
// 0x0040 (0x0040 - 0x0000)
struct VCamComponent_InjectInputVectorForAction final
{
public:
	const class UInputAction*                     Action;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_InjectInputVectorForAction) == 0x000008, "Wrong alignment on VCamComponent_InjectInputVectorForAction");
static_assert(sizeof(VCamComponent_InjectInputVectorForAction) == 0x000040, "Wrong size on VCamComponent_InjectInputVectorForAction");
static_assert(offsetof(VCamComponent_InjectInputVectorForAction, Action) == 0x000000, "Member 'VCamComponent_InjectInputVectorForAction::Action' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputVectorForAction, Value) == 0x000008, "Member 'VCamComponent_InjectInputVectorForAction::Value' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputVectorForAction, Modifiers) == 0x000020, "Member 'VCamComponent_InjectInputVectorForAction::Modifiers' has a wrong offset!");
static_assert(offsetof(VCamComponent_InjectInputVectorForAction, Triggers) == 0x000030, "Member 'VCamComponent_InjectInputVectorForAction::Triggers' has a wrong offset!");

// Function VCamCore.VCamComponent.InsertModifier
// 0x0028 (0x0028 - 0x0000)
struct VCamComponent_InsertModifier final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UVCamModifier>              ModifierClass;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifier*                          CreatedModifier;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_InsertModifier) == 0x000008, "Wrong alignment on VCamComponent_InsertModifier");
static_assert(sizeof(VCamComponent_InsertModifier) == 0x000028, "Wrong size on VCamComponent_InsertModifier");
static_assert(offsetof(VCamComponent_InsertModifier, Param_Name) == 0x000000, "Member 'VCamComponent_InsertModifier::Param_Name' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertModifier, Param_Index) == 0x000008, "Member 'VCamComponent_InsertModifier::Param_Index' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertModifier, ModifierClass) == 0x000010, "Member 'VCamComponent_InsertModifier::ModifierClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertModifier, CreatedModifier) == 0x000018, "Member 'VCamComponent_InsertModifier::CreatedModifier' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertModifier, ReturnValue) == 0x000020, "Member 'VCamComponent_InsertModifier::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.InsertOutputProvider
// 0x0020 (0x0020 - 0x0000)
struct VCamComponent_InsertOutputProvider final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UVCamOutputProviderBase>    ProviderClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamOutputProviderBase*                CreatedProvider;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_InsertOutputProvider) == 0x000008, "Wrong alignment on VCamComponent_InsertOutputProvider");
static_assert(sizeof(VCamComponent_InsertOutputProvider) == 0x000020, "Wrong size on VCamComponent_InsertOutputProvider");
static_assert(offsetof(VCamComponent_InsertOutputProvider, Param_Index) == 0x000000, "Member 'VCamComponent_InsertOutputProvider::Param_Index' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertOutputProvider, ProviderClass) == 0x000008, "Member 'VCamComponent_InsertOutputProvider::ProviderClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertOutputProvider, CreatedProvider) == 0x000010, "Member 'VCamComponent_InsertOutputProvider::CreatedProvider' has a wrong offset!");
static_assert(offsetof(VCamComponent_InsertOutputProvider, ReturnValue) == 0x000018, "Member 'VCamComponent_InsertOutputProvider::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.RegisterObjectForInput
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_RegisterObjectForInput final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_RegisterObjectForInput) == 0x000008, "Wrong alignment on VCamComponent_RegisterObjectForInput");
static_assert(sizeof(VCamComponent_RegisterObjectForInput) == 0x000008, "Wrong size on VCamComponent_RegisterObjectForInput");
static_assert(offsetof(VCamComponent_RegisterObjectForInput, Object) == 0x000000, "Member 'VCamComponent_RegisterObjectForInput::Object' has a wrong offset!");

// Function VCamCore.VCamComponent.RemoveModifier
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_RemoveModifier final
{
public:
	const class UVCamModifier*                    Modifier;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_RemoveModifier) == 0x000008, "Wrong alignment on VCamComponent_RemoveModifier");
static_assert(sizeof(VCamComponent_RemoveModifier) == 0x000010, "Wrong size on VCamComponent_RemoveModifier");
static_assert(offsetof(VCamComponent_RemoveModifier, Modifier) == 0x000000, "Member 'VCamComponent_RemoveModifier::Modifier' has a wrong offset!");
static_assert(offsetof(VCamComponent_RemoveModifier, ReturnValue) == 0x000008, "Member 'VCamComponent_RemoveModifier::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.RemoveModifierByIndex
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_RemoveModifierByIndex final
{
public:
	int32                                         ModifierIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC3[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_RemoveModifierByIndex) == 0x000004, "Wrong alignment on VCamComponent_RemoveModifierByIndex");
static_assert(sizeof(VCamComponent_RemoveModifierByIndex) == 0x000008, "Wrong size on VCamComponent_RemoveModifierByIndex");
static_assert(offsetof(VCamComponent_RemoveModifierByIndex, ModifierIndex) == 0x000000, "Member 'VCamComponent_RemoveModifierByIndex::ModifierIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_RemoveModifierByIndex, ReturnValue) == 0x000004, "Member 'VCamComponent_RemoveModifierByIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.RemoveModifierByName
// 0x000C (0x000C - 0x0000)
struct VCamComponent_RemoveModifierByName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_RemoveModifierByName) == 0x000004, "Wrong alignment on VCamComponent_RemoveModifierByName");
static_assert(sizeof(VCamComponent_RemoveModifierByName) == 0x00000C, "Wrong size on VCamComponent_RemoveModifierByName");
static_assert(offsetof(VCamComponent_RemoveModifierByName, Param_Name) == 0x000000, "Member 'VCamComponent_RemoveModifierByName::Param_Name' has a wrong offset!");
static_assert(offsetof(VCamComponent_RemoveModifierByName, ReturnValue) == 0x000008, "Member 'VCamComponent_RemoveModifierByName::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.RemoveOutputProvider
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_RemoveOutputProvider final
{
public:
	const class UVCamOutputProviderBase*          Provider;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_RemoveOutputProvider) == 0x000008, "Wrong alignment on VCamComponent_RemoveOutputProvider");
static_assert(sizeof(VCamComponent_RemoveOutputProvider) == 0x000010, "Wrong size on VCamComponent_RemoveOutputProvider");
static_assert(offsetof(VCamComponent_RemoveOutputProvider, Provider) == 0x000000, "Member 'VCamComponent_RemoveOutputProvider::Provider' has a wrong offset!");
static_assert(offsetof(VCamComponent_RemoveOutputProvider, ReturnValue) == 0x000008, "Member 'VCamComponent_RemoveOutputProvider::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.RemoveOutputProviderByIndex
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_RemoveOutputProviderByIndex final
{
public:
	int32                                         ProviderIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_RemoveOutputProviderByIndex) == 0x000004, "Wrong alignment on VCamComponent_RemoveOutputProviderByIndex");
static_assert(sizeof(VCamComponent_RemoveOutputProviderByIndex) == 0x000008, "Wrong size on VCamComponent_RemoveOutputProviderByIndex");
static_assert(offsetof(VCamComponent_RemoveOutputProviderByIndex, ProviderIndex) == 0x000000, "Member 'VCamComponent_RemoveOutputProviderByIndex::ProviderIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_RemoveOutputProviderByIndex, ReturnValue) == 0x000004, "Member 'VCamComponent_RemoveOutputProviderByIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetDisableComponentWhenSpawnedBySequencer
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_SetDisableComponentWhenSpawnedBySequencer final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetDisableComponentWhenSpawnedBySequencer) == 0x000001, "Wrong alignment on VCamComponent_SetDisableComponentWhenSpawnedBySequencer");
static_assert(sizeof(VCamComponent_SetDisableComponentWhenSpawnedBySequencer) == 0x000001, "Wrong size on VCamComponent_SetDisableComponentWhenSpawnedBySequencer");
static_assert(offsetof(VCamComponent_SetDisableComponentWhenSpawnedBySequencer, bValue) == 0x000000, "Member 'VCamComponent_SetDisableComponentWhenSpawnedBySequencer::bValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetDisableOutputOnMultiUserReceiver
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_SetDisableOutputOnMultiUserReceiver final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetDisableOutputOnMultiUserReceiver) == 0x000001, "Wrong alignment on VCamComponent_SetDisableOutputOnMultiUserReceiver");
static_assert(sizeof(VCamComponent_SetDisableOutputOnMultiUserReceiver) == 0x000001, "Wrong size on VCamComponent_SetDisableOutputOnMultiUserReceiver");
static_assert(offsetof(VCamComponent_SetDisableOutputOnMultiUserReceiver, bValue) == 0x000000, "Member 'VCamComponent_SetDisableOutputOnMultiUserReceiver::bValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_SetEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetEnabled) == 0x000001, "Wrong alignment on VCamComponent_SetEnabled");
static_assert(sizeof(VCamComponent_SetEnabled) == 0x000001, "Wrong size on VCamComponent_SetEnabled");
static_assert(offsetof(VCamComponent_SetEnabled, bNewEnabled) == 0x000000, "Member 'VCamComponent_SetEnabled::bNewEnabled' has a wrong offset!");

// Function VCamCore.VCamComponent.SetInputDeviceSettings
// 0x0020 (0x0020 - 0x0000)
struct VCamComponent_SetInputDeviceSettings final
{
public:
	struct FVCamInputDeviceConfig                 NewInputProfile;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetInputDeviceSettings) == 0x000008, "Wrong alignment on VCamComponent_SetInputDeviceSettings");
static_assert(sizeof(VCamComponent_SetInputDeviceSettings) == 0x000020, "Wrong size on VCamComponent_SetInputDeviceSettings");
static_assert(offsetof(VCamComponent_SetInputDeviceSettings, NewInputProfile) == 0x000000, "Member 'VCamComponent_SetInputDeviceSettings::NewInputProfile' has a wrong offset!");

// Function VCamCore.VCamComponent.SetInputProfile
// 0x0050 (0x0050 - 0x0000)
struct VCamComponent_SetInputProfile final
{
public:
	struct FVCamInputProfile                      NewInputProfile;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetInputProfile) == 0x000008, "Wrong alignment on VCamComponent_SetInputProfile");
static_assert(sizeof(VCamComponent_SetInputProfile) == 0x000050, "Wrong size on VCamComponent_SetInputProfile");
static_assert(offsetof(VCamComponent_SetInputProfile, NewInputProfile) == 0x000000, "Member 'VCamComponent_SetInputProfile::NewInputProfile' has a wrong offset!");

// Function VCamCore.VCamComponent.SetInputProfileFromName
// 0x000C (0x000C - 0x0000)
struct VCamComponent_SetInputProfileFromName final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC7[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_SetInputProfileFromName) == 0x000004, "Wrong alignment on VCamComponent_SetInputProfileFromName");
static_assert(sizeof(VCamComponent_SetInputProfileFromName) == 0x00000C, "Wrong size on VCamComponent_SetInputProfileFromName");
static_assert(offsetof(VCamComponent_SetInputProfileFromName, ProfileName) == 0x000000, "Member 'VCamComponent_SetInputProfileFromName::ProfileName' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetInputProfileFromName, ReturnValue) == 0x000008, "Member 'VCamComponent_SetInputProfileFromName::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetLiveLinkSubobject
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_SetLiveLinkSubobject final
{
public:
	struct FLiveLinkSubjectName                   Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetLiveLinkSubobject) == 0x000004, "Wrong alignment on VCamComponent_SetLiveLinkSubobject");
static_assert(sizeof(VCamComponent_SetLiveLinkSubobject) == 0x000008, "Wrong size on VCamComponent_SetLiveLinkSubobject");
static_assert(offsetof(VCamComponent_SetLiveLinkSubobject, Value) == 0x000000, "Member 'VCamComponent_SetLiveLinkSubobject::Value' has a wrong offset!");

// Function VCamCore.VCamComponent.SetModifierContextClass
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_SetModifierContextClass final
{
public:
	TSubclassOf<class UVCamModifierContext>       ContextClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifierContext*                   CreatedContext;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetModifierContextClass) == 0x000008, "Wrong alignment on VCamComponent_SetModifierContextClass");
static_assert(sizeof(VCamComponent_SetModifierContextClass) == 0x000010, "Wrong size on VCamComponent_SetModifierContextClass");
static_assert(offsetof(VCamComponent_SetModifierContextClass, ContextClass) == 0x000000, "Member 'VCamComponent_SetModifierContextClass::ContextClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetModifierContextClass, CreatedContext) == 0x000008, "Member 'VCamComponent_SetModifierContextClass::CreatedContext' has a wrong offset!");

// Function VCamCore.VCamComponent.SetModifierIndex
// 0x000C (0x000C - 0x0000)
struct VCamComponent_SetModifierIndex final
{
public:
	int32                                         OriginalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC8[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_SetModifierIndex) == 0x000004, "Wrong alignment on VCamComponent_SetModifierIndex");
static_assert(sizeof(VCamComponent_SetModifierIndex) == 0x00000C, "Wrong size on VCamComponent_SetModifierIndex");
static_assert(offsetof(VCamComponent_SetModifierIndex, OriginalIndex) == 0x000000, "Member 'VCamComponent_SetModifierIndex::OriginalIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetModifierIndex, NewIndex) == 0x000004, "Member 'VCamComponent_SetModifierIndex::NewIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetModifierIndex, ReturnValue) == 0x000008, "Member 'VCamComponent_SetModifierIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetOutputProviderIndex
// 0x000C (0x000C - 0x0000)
struct VCamComponent_SetOutputProviderIndex final
{
public:
	int32                                         OriginalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC9[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_SetOutputProviderIndex) == 0x000004, "Wrong alignment on VCamComponent_SetOutputProviderIndex");
static_assert(sizeof(VCamComponent_SetOutputProviderIndex) == 0x00000C, "Wrong size on VCamComponent_SetOutputProviderIndex");
static_assert(offsetof(VCamComponent_SetOutputProviderIndex, OriginalIndex) == 0x000000, "Member 'VCamComponent_SetOutputProviderIndex::OriginalIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetOutputProviderIndex, NewIndex) == 0x000004, "Member 'VCamComponent_SetOutputProviderIndex::NewIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_SetOutputProviderIndex, ReturnValue) == 0x000008, "Member 'VCamComponent_SetOutputProviderIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SetRole
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_SetRole final
{
public:
	struct FGameplayTag                           Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_SetRole) == 0x000004, "Wrong alignment on VCamComponent_SetRole");
static_assert(sizeof(VCamComponent_SetRole) == 0x000008, "Wrong size on VCamComponent_SetRole");
static_assert(offsetof(VCamComponent_SetRole, Value) == 0x000000, "Member 'VCamComponent_SetRole::Value' has a wrong offset!");

// Function VCamCore.VCamComponent.GetAllModifierNames
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetAllModifierNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetAllModifierNames) == 0x000008, "Wrong alignment on VCamComponent_GetAllModifierNames");
static_assert(sizeof(VCamComponent_GetAllModifierNames) == 0x000010, "Wrong size on VCamComponent_GetAllModifierNames");
static_assert(offsetof(VCamComponent_GetAllModifierNames, ReturnValue) == 0x000000, "Member 'VCamComponent_GetAllModifierNames::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetAllModifiers
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetAllModifiers final
{
public:
	TArray<class UVCamModifier*>                  Modifiers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetAllModifiers) == 0x000008, "Wrong alignment on VCamComponent_GetAllModifiers");
static_assert(sizeof(VCamComponent_GetAllModifiers) == 0x000010, "Wrong size on VCamComponent_GetAllModifiers");
static_assert(offsetof(VCamComponent_GetAllModifiers, Modifiers) == 0x000000, "Member 'VCamComponent_GetAllModifiers::Modifiers' has a wrong offset!");

// Function VCamCore.VCamComponent.GetAllOutputProviders
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetAllOutputProviders final
{
public:
	TArray<class UVCamOutputProviderBase*>        Providers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetAllOutputProviders) == 0x000008, "Wrong alignment on VCamComponent_GetAllOutputProviders");
static_assert(sizeof(VCamComponent_GetAllOutputProviders) == 0x000010, "Wrong size on VCamComponent_GetAllOutputProviders");
static_assert(offsetof(VCamComponent_GetAllOutputProviders, Providers) == 0x000000, "Member 'VCamComponent_GetAllOutputProviders::Providers' has a wrong offset!");

// Function VCamCore.VCamComponent.GetAllPlayerMappableActionKeyMappings
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetAllPlayerMappableActionKeyMappings final
{
public:
	TArray<struct FEnhancedActionKeyMapping>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetAllPlayerMappableActionKeyMappings) == 0x000008, "Wrong alignment on VCamComponent_GetAllPlayerMappableActionKeyMappings");
static_assert(sizeof(VCamComponent_GetAllPlayerMappableActionKeyMappings) == 0x000010, "Wrong size on VCamComponent_GetAllPlayerMappableActionKeyMappings");
static_assert(offsetof(VCamComponent_GetAllPlayerMappableActionKeyMappings, ReturnValue) == 0x000000, "Member 'VCamComponent_GetAllPlayerMappableActionKeyMappings::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetDisableComponentWhenSpawnedBySequencer
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_GetDisableComponentWhenSpawnedBySequencer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetDisableComponentWhenSpawnedBySequencer) == 0x000001, "Wrong alignment on VCamComponent_GetDisableComponentWhenSpawnedBySequencer");
static_assert(sizeof(VCamComponent_GetDisableComponentWhenSpawnedBySequencer) == 0x000001, "Wrong size on VCamComponent_GetDisableComponentWhenSpawnedBySequencer");
static_assert(offsetof(VCamComponent_GetDisableComponentWhenSpawnedBySequencer, ReturnValue) == 0x000000, "Member 'VCamComponent_GetDisableComponentWhenSpawnedBySequencer::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetDisableOutputOnMultiUserReceiver
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_GetDisableOutputOnMultiUserReceiver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetDisableOutputOnMultiUserReceiver) == 0x000001, "Wrong alignment on VCamComponent_GetDisableOutputOnMultiUserReceiver");
static_assert(sizeof(VCamComponent_GetDisableOutputOnMultiUserReceiver) == 0x000001, "Wrong size on VCamComponent_GetDisableOutputOnMultiUserReceiver");
static_assert(offsetof(VCamComponent_GetDisableOutputOnMultiUserReceiver, ReturnValue) == 0x000000, "Member 'VCamComponent_GetDisableOutputOnMultiUserReceiver::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetInputDeviceSettings
// 0x0020 (0x0020 - 0x0000)
struct VCamComponent_GetInputDeviceSettings final
{
public:
	struct FVCamInputDeviceConfig                 ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetInputDeviceSettings) == 0x000008, "Wrong alignment on VCamComponent_GetInputDeviceSettings");
static_assert(sizeof(VCamComponent_GetInputDeviceSettings) == 0x000020, "Wrong size on VCamComponent_GetInputDeviceSettings");
static_assert(offsetof(VCamComponent_GetInputDeviceSettings, ReturnValue) == 0x000000, "Member 'VCamComponent_GetInputDeviceSettings::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetInputProfile
// 0x0050 (0x0050 - 0x0000)
struct VCamComponent_GetInputProfile final
{
public:
	struct FVCamInputProfile                      ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetInputProfile) == 0x000008, "Wrong alignment on VCamComponent_GetInputProfile");
static_assert(sizeof(VCamComponent_GetInputProfile) == 0x000050, "Wrong size on VCamComponent_GetInputProfile");
static_assert(offsetof(VCamComponent_GetInputProfile, ReturnValue) == 0x000000, "Member 'VCamComponent_GetInputProfile::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetInputVCamSubsystem
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_GetInputVCamSubsystem final
{
public:
	class UInputVCamSubsystem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetInputVCamSubsystem) == 0x000008, "Wrong alignment on VCamComponent_GetInputVCamSubsystem");
static_assert(sizeof(VCamComponent_GetInputVCamSubsystem) == 0x000008, "Wrong size on VCamComponent_GetInputVCamSubsystem");
static_assert(offsetof(VCamComponent_GetInputVCamSubsystem, ReturnValue) == 0x000000, "Member 'VCamComponent_GetInputVCamSubsystem::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetLiveLinkSubobject
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_GetLiveLinkSubobject final
{
public:
	struct FLiveLinkSubjectName                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetLiveLinkSubobject) == 0x000004, "Wrong alignment on VCamComponent_GetLiveLinkSubobject");
static_assert(sizeof(VCamComponent_GetLiveLinkSubobject) == 0x000008, "Wrong size on VCamComponent_GetLiveLinkSubobject");
static_assert(offsetof(VCamComponent_GetLiveLinkSubobject, ReturnValue) == 0x000000, "Member 'VCamComponent_GetLiveLinkSubobject::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetModifierByIndex
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetModifierByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCamModifier*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetModifierByIndex) == 0x000008, "Wrong alignment on VCamComponent_GetModifierByIndex");
static_assert(sizeof(VCamComponent_GetModifierByIndex) == 0x000010, "Wrong size on VCamComponent_GetModifierByIndex");
static_assert(offsetof(VCamComponent_GetModifierByIndex, Param_Index) == 0x000000, "Member 'VCamComponent_GetModifierByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetModifierByIndex, ReturnValue) == 0x000008, "Member 'VCamComponent_GetModifierByIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetModifierByName
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetModifierByName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifier*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetModifierByName) == 0x000008, "Wrong alignment on VCamComponent_GetModifierByName");
static_assert(sizeof(VCamComponent_GetModifierByName) == 0x000010, "Wrong size on VCamComponent_GetModifierByName");
static_assert(offsetof(VCamComponent_GetModifierByName, Param_Name) == 0x000000, "Member 'VCamComponent_GetModifierByName::Param_Name' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetModifierByName, ReturnValue) == 0x000008, "Member 'VCamComponent_GetModifierByName::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetModifierContext
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_GetModifierContext final
{
public:
	class UVCamModifierContext*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetModifierContext) == 0x000008, "Wrong alignment on VCamComponent_GetModifierContext");
static_assert(sizeof(VCamComponent_GetModifierContext) == 0x000008, "Wrong size on VCamComponent_GetModifierContext");
static_assert(offsetof(VCamComponent_GetModifierContext, ReturnValue) == 0x000000, "Member 'VCamComponent_GetModifierContext::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetModifiersByClass
// 0x0018 (0x0018 - 0x0000)
struct VCamComponent_GetModifiersByClass final
{
public:
	TSubclassOf<class UVCamModifier>              ModifierClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVCamModifier*>                  FoundModifiers;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetModifiersByClass) == 0x000008, "Wrong alignment on VCamComponent_GetModifiersByClass");
static_assert(sizeof(VCamComponent_GetModifiersByClass) == 0x000018, "Wrong size on VCamComponent_GetModifiersByClass");
static_assert(offsetof(VCamComponent_GetModifiersByClass, ModifierClass) == 0x000000, "Member 'VCamComponent_GetModifiersByClass::ModifierClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetModifiersByClass, FoundModifiers) == 0x000008, "Member 'VCamComponent_GetModifiersByClass::FoundModifiers' has a wrong offset!");

// Function VCamCore.VCamComponent.GetModifiersByInterface
// 0x0018 (0x0018 - 0x0000)
struct VCamComponent_GetModifiersByInterface final
{
public:
	TSubclassOf<class IInterface>                 InterfaceClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVCamModifier*>                  FoundModifiers;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetModifiersByInterface) == 0x000008, "Wrong alignment on VCamComponent_GetModifiersByInterface");
static_assert(sizeof(VCamComponent_GetModifiersByInterface) == 0x000018, "Wrong size on VCamComponent_GetModifiersByInterface");
static_assert(offsetof(VCamComponent_GetModifiersByInterface, InterfaceClass) == 0x000000, "Member 'VCamComponent_GetModifiersByInterface::InterfaceClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetModifiersByInterface, FoundModifiers) == 0x000008, "Member 'VCamComponent_GetModifiersByInterface::FoundModifiers' has a wrong offset!");

// Function VCamCore.VCamComponent.GetNumberOfModifiers
// 0x0004 (0x0004 - 0x0000)
struct VCamComponent_GetNumberOfModifiers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetNumberOfModifiers) == 0x000004, "Wrong alignment on VCamComponent_GetNumberOfModifiers");
static_assert(sizeof(VCamComponent_GetNumberOfModifiers) == 0x000004, "Wrong size on VCamComponent_GetNumberOfModifiers");
static_assert(offsetof(VCamComponent_GetNumberOfModifiers, ReturnValue) == 0x000000, "Member 'VCamComponent_GetNumberOfModifiers::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetNumberOfOutputProviders
// 0x0004 (0x0004 - 0x0000)
struct VCamComponent_GetNumberOfOutputProviders final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetNumberOfOutputProviders) == 0x000004, "Wrong alignment on VCamComponent_GetNumberOfOutputProviders");
static_assert(sizeof(VCamComponent_GetNumberOfOutputProviders) == 0x000004, "Wrong size on VCamComponent_GetNumberOfOutputProviders");
static_assert(offsetof(VCamComponent_GetNumberOfOutputProviders, ReturnValue) == 0x000000, "Member 'VCamComponent_GetNumberOfOutputProviders::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetOutputProviderByIndex
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetOutputProviderByIndex final
{
public:
	int32                                         ProviderIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCamOutputProviderBase*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetOutputProviderByIndex) == 0x000008, "Wrong alignment on VCamComponent_GetOutputProviderByIndex");
static_assert(sizeof(VCamComponent_GetOutputProviderByIndex) == 0x000010, "Wrong size on VCamComponent_GetOutputProviderByIndex");
static_assert(offsetof(VCamComponent_GetOutputProviderByIndex, ProviderIndex) == 0x000000, "Member 'VCamComponent_GetOutputProviderByIndex::ProviderIndex' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetOutputProviderByIndex, ReturnValue) == 0x000008, "Member 'VCamComponent_GetOutputProviderByIndex::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetOutputProvidersByClass
// 0x0018 (0x0018 - 0x0000)
struct VCamComponent_GetOutputProvidersByClass final
{
public:
	TSubclassOf<class UVCamOutputProviderBase>    ProviderClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVCamOutputProviderBase*>        FoundProviders;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetOutputProvidersByClass) == 0x000008, "Wrong alignment on VCamComponent_GetOutputProvidersByClass");
static_assert(sizeof(VCamComponent_GetOutputProvidersByClass) == 0x000018, "Wrong size on VCamComponent_GetOutputProvidersByClass");
static_assert(offsetof(VCamComponent_GetOutputProvidersByClass, ProviderClass) == 0x000000, "Member 'VCamComponent_GetOutputProvidersByClass::ProviderClass' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetOutputProvidersByClass, FoundProviders) == 0x000008, "Member 'VCamComponent_GetOutputProvidersByClass::FoundProviders' has a wrong offset!");

// Function VCamCore.VCamComponent.GetPlayerMappableKeys
// 0x0010 (0x0010 - 0x0000)
struct VCamComponent_GetPlayerMappableKeys final
{
public:
	TArray<struct FEnhancedActionKeyMapping>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetPlayerMappableKeys) == 0x000008, "Wrong alignment on VCamComponent_GetPlayerMappableKeys");
static_assert(sizeof(VCamComponent_GetPlayerMappableKeys) == 0x000010, "Wrong size on VCamComponent_GetPlayerMappableKeys");
static_assert(offsetof(VCamComponent_GetPlayerMappableKeys, ReturnValue) == 0x000000, "Member 'VCamComponent_GetPlayerMappableKeys::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetPlayerMappedKey
// 0x0020 (0x0020 - 0x0000)
struct VCamComponent_GetPlayerMappedKey final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetPlayerMappedKey) == 0x000008, "Wrong alignment on VCamComponent_GetPlayerMappedKey");
static_assert(sizeof(VCamComponent_GetPlayerMappedKey) == 0x000020, "Wrong size on VCamComponent_GetPlayerMappedKey");
static_assert(offsetof(VCamComponent_GetPlayerMappedKey, MappingName) == 0x000000, "Member 'VCamComponent_GetPlayerMappedKey::MappingName' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetPlayerMappedKey, ReturnValue) == 0x000008, "Member 'VCamComponent_GetPlayerMappedKey::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetRole
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_GetRole final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetRole) == 0x000004, "Wrong alignment on VCamComponent_GetRole");
static_assert(sizeof(VCamComponent_GetRole) == 0x000008, "Wrong size on VCamComponent_GetRole");
static_assert(offsetof(VCamComponent_GetRole, ReturnValue) == 0x000000, "Member 'VCamComponent_GetRole::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetSubsystemArray
// 0x0018 (0x0018 - 0x0000)
struct VCamComponent_GetSubsystemArray final
{
public:
	TSubclassOf<class UVCamSubsystem>             Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVCamSubsystem*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetSubsystemArray) == 0x000008, "Wrong alignment on VCamComponent_GetSubsystemArray");
static_assert(sizeof(VCamComponent_GetSubsystemArray) == 0x000018, "Wrong size on VCamComponent_GetSubsystemArray");
static_assert(offsetof(VCamComponent_GetSubsystemArray, Param_Class) == 0x000000, "Member 'VCamComponent_GetSubsystemArray::Param_Class' has a wrong offset!");
static_assert(offsetof(VCamComponent_GetSubsystemArray, ReturnValue) == 0x000008, "Member 'VCamComponent_GetSubsystemArray::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.GetTargetCamera
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_GetTargetCamera final
{
public:
	class UCineCameraComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_GetTargetCamera) == 0x000008, "Wrong alignment on VCamComponent_GetTargetCamera");
static_assert(sizeof(VCamComponent_GetTargetCamera) == 0x000008, "Wrong size on VCamComponent_GetTargetCamera");
static_assert(offsetof(VCamComponent_GetTargetCamera, ReturnValue) == 0x000000, "Member 'VCamComponent_GetTargetCamera::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct VCamComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_IsEnabled) == 0x000001, "Wrong alignment on VCamComponent_IsEnabled");
static_assert(sizeof(VCamComponent_IsEnabled) == 0x000001, "Wrong size on VCamComponent_IsEnabled");
static_assert(offsetof(VCamComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'VCamComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.SaveCurrentInputProfileToSettings
// 0x000C (0x000C - 0x0000)
struct VCamComponent_SaveCurrentInputProfileToSettings final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCC[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamComponent_SaveCurrentInputProfileToSettings) == 0x000004, "Wrong alignment on VCamComponent_SaveCurrentInputProfileToSettings");
static_assert(sizeof(VCamComponent_SaveCurrentInputProfileToSettings) == 0x00000C, "Wrong size on VCamComponent_SaveCurrentInputProfileToSettings");
static_assert(offsetof(VCamComponent_SaveCurrentInputProfileToSettings, ProfileName) == 0x000000, "Member 'VCamComponent_SaveCurrentInputProfileToSettings::ProfileName' has a wrong offset!");
static_assert(offsetof(VCamComponent_SaveCurrentInputProfileToSettings, ReturnValue) == 0x000008, "Member 'VCamComponent_SaveCurrentInputProfileToSettings::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamComponent.UnregisterObjectForInput
// 0x0008 (0x0008 - 0x0000)
struct VCamComponent_UnregisterObjectForInput final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamComponent_UnregisterObjectForInput) == 0x000008, "Wrong alignment on VCamComponent_UnregisterObjectForInput");
static_assert(sizeof(VCamComponent_UnregisterObjectForInput) == 0x000008, "Wrong size on VCamComponent_UnregisterObjectForInput");
static_assert(offsetof(VCamComponent_UnregisterObjectForInput, Object) == 0x000000, "Member 'VCamComponent_UnregisterObjectForInput::Object' has a wrong offset!");

// Function VCamCore.VCamSubsystem.GetVCamComponent
// 0x0008 (0x0008 - 0x0000)
struct VCamSubsystem_GetVCamComponent final
{
public:
	class UVCamComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamSubsystem_GetVCamComponent) == 0x000008, "Wrong alignment on VCamSubsystem_GetVCamComponent");
static_assert(sizeof(VCamSubsystem_GetVCamComponent) == 0x000008, "Wrong size on VCamSubsystem_GetVCamComponent");
static_assert(offsetof(VCamSubsystem_GetVCamComponent, ReturnValue) == 0x000000, "Member 'VCamSubsystem_GetVCamComponent::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamOutputProviderCreatedWidget.ReceiveOutputProvider
// 0x0008 (0x0008 - 0x0000)
struct VCamOutputProviderCreatedWidget_ReceiveOutputProvider final
{
public:
	struct FVCamReceiveOutputProviderData         Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderCreatedWidget_ReceiveOutputProvider) == 0x000008, "Wrong alignment on VCamOutputProviderCreatedWidget_ReceiveOutputProvider");
static_assert(sizeof(VCamOutputProviderCreatedWidget_ReceiveOutputProvider) == 0x000008, "Wrong size on VCamOutputProviderCreatedWidget_ReceiveOutputProvider");
static_assert(offsetof(VCamOutputProviderCreatedWidget_ReceiveOutputProvider, Data) == 0x000000, "Member 'VCamOutputProviderCreatedWidget_ReceiveOutputProvider::Data' has a wrong offset!");

// Function VCamCore.VCamBaseActor.GetVCamComponent
// 0x0008 (0x0008 - 0x0000)
struct VCamBaseActor_GetVCamComponent final
{
public:
	class UVCamComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBaseActor_GetVCamComponent) == 0x000008, "Wrong alignment on VCamBaseActor_GetVCamComponent");
static_assert(sizeof(VCamBaseActor_GetVCamComponent) == 0x000008, "Wrong size on VCamBaseActor_GetVCamComponent");
static_assert(offsetof(VCamBaseActor_GetVCamComponent, ReturnValue) == 0x000000, "Member 'VCamBaseActor_GetVCamComponent::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamInputSettings.GetVCamInputSettings
// 0x0008 (0x0008 - 0x0000)
struct VCamInputSettings_GetVCamInputSettings final
{
public:
	class UVCamInputSettings*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamInputSettings_GetVCamInputSettings) == 0x000008, "Wrong alignment on VCamInputSettings_GetVCamInputSettings");
static_assert(sizeof(VCamInputSettings_GetVCamInputSettings) == 0x000008, "Wrong size on VCamInputSettings_GetVCamInputSettings");
static_assert(offsetof(VCamInputSettings_GetVCamInputSettings, ReturnValue) == 0x000000, "Member 'VCamInputSettings_GetVCamInputSettings::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamInputSettings.SetDefaultInputProfile
// 0x0008 (0x0008 - 0x0000)
struct VCamInputSettings_SetDefaultInputProfile final
{
public:
	class FName                                   NewDefaultInputProfile;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamInputSettings_SetDefaultInputProfile) == 0x000004, "Wrong alignment on VCamInputSettings_SetDefaultInputProfile");
static_assert(sizeof(VCamInputSettings_SetDefaultInputProfile) == 0x000008, "Wrong size on VCamInputSettings_SetDefaultInputProfile");
static_assert(offsetof(VCamInputSettings_SetDefaultInputProfile, NewDefaultInputProfile) == 0x000000, "Member 'VCamInputSettings_SetDefaultInputProfile::NewDefaultInputProfile' has a wrong offset!");

// Function VCamCore.VCamInputSettings.SetInputProfiles
// 0x0050 (0x0050 - 0x0000)
struct VCamInputSettings_SetInputProfiles final
{
public:
	TMap<class FName, struct FVCamInputProfile>   NewInputProfiles;                                  // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamInputSettings_SetInputProfiles) == 0x000008, "Wrong alignment on VCamInputSettings_SetInputProfiles");
static_assert(sizeof(VCamInputSettings_SetInputProfiles) == 0x000050, "Wrong size on VCamInputSettings_SetInputProfiles");
static_assert(offsetof(VCamInputSettings_SetInputProfiles, NewInputProfiles) == 0x000000, "Member 'VCamInputSettings_SetInputProfiles::NewInputProfiles' has a wrong offset!");

// Function VCamCore.VCamInputSettings.GetInputProfileNames
// 0x0010 (0x0010 - 0x0000)
struct VCamInputSettings_GetInputProfileNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamInputSettings_GetInputProfileNames) == 0x000008, "Wrong alignment on VCamInputSettings_GetInputProfileNames");
static_assert(sizeof(VCamInputSettings_GetInputProfileNames) == 0x000010, "Wrong size on VCamInputSettings_GetInputProfileNames");
static_assert(offsetof(VCamInputSettings_GetInputProfileNames, ReturnValue) == 0x000000, "Member 'VCamInputSettings_GetInputProfileNames::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamModifier.GetCurrentLiveLinkDataFromOwningComponent
// 0x0150 (0x0150 - 0x0000)
struct VCamModifier_GetCurrentLiveLinkDataFromOwningComponent final
{
public:
	struct FLiveLinkCameraBlueprintData           LiveLinkData;                                      // 0x0000(0x0150)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamModifier_GetCurrentLiveLinkDataFromOwningComponent) == 0x000010, "Wrong alignment on VCamModifier_GetCurrentLiveLinkDataFromOwningComponent");
static_assert(sizeof(VCamModifier_GetCurrentLiveLinkDataFromOwningComponent) == 0x000150, "Wrong size on VCamModifier_GetCurrentLiveLinkDataFromOwningComponent");
static_assert(offsetof(VCamModifier_GetCurrentLiveLinkDataFromOwningComponent, LiveLinkData) == 0x000000, "Member 'VCamModifier_GetCurrentLiveLinkDataFromOwningComponent::LiveLinkData' has a wrong offset!");

// Function VCamCore.VCamModifier.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct VCamModifier_SetEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamModifier_SetEnabled) == 0x000001, "Wrong alignment on VCamModifier_SetEnabled");
static_assert(sizeof(VCamModifier_SetEnabled) == 0x000001, "Wrong size on VCamModifier_SetEnabled");
static_assert(offsetof(VCamModifier_SetEnabled, bNewEnabled) == 0x000000, "Member 'VCamModifier_SetEnabled::bNewEnabled' has a wrong offset!");

// Function VCamCore.VCamModifier.SetStackEntryName
// 0x000C (0x000C - 0x0000)
struct VCamModifier_SetStackEntryName final
{
public:
	class FName                                   NewName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD2[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamModifier_SetStackEntryName) == 0x000004, "Wrong alignment on VCamModifier_SetStackEntryName");
static_assert(sizeof(VCamModifier_SetStackEntryName) == 0x00000C, "Wrong size on VCamModifier_SetStackEntryName");
static_assert(offsetof(VCamModifier_SetStackEntryName, NewName) == 0x000000, "Member 'VCamModifier_SetStackEntryName::NewName' has a wrong offset!");
static_assert(offsetof(VCamModifier_SetStackEntryName, ReturnValue) == 0x000008, "Member 'VCamModifier_SetStackEntryName::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamModifier.GetOwningVCamComponent
// 0x0008 (0x0008 - 0x0000)
struct VCamModifier_GetOwningVCamComponent final
{
public:
	class UVCamComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamModifier_GetOwningVCamComponent) == 0x000008, "Wrong alignment on VCamModifier_GetOwningVCamComponent");
static_assert(sizeof(VCamModifier_GetOwningVCamComponent) == 0x000008, "Wrong size on VCamModifier_GetOwningVCamComponent");
static_assert(offsetof(VCamModifier_GetOwningVCamComponent, ReturnValue) == 0x000000, "Member 'VCamModifier_GetOwningVCamComponent::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamModifier.GetStackEntryName
// 0x0008 (0x0008 - 0x0000)
struct VCamModifier_GetStackEntryName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamModifier_GetStackEntryName) == 0x000004, "Wrong alignment on VCamModifier_GetStackEntryName");
static_assert(sizeof(VCamModifier_GetStackEntryName) == 0x000008, "Wrong size on VCamModifier_GetStackEntryName");
static_assert(offsetof(VCamModifier_GetStackEntryName, ReturnValue) == 0x000000, "Member 'VCamModifier_GetStackEntryName::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamModifier.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct VCamModifier_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamModifier_IsEnabled) == 0x000001, "Wrong alignment on VCamModifier_IsEnabled");
static_assert(sizeof(VCamModifier_IsEnabled) == 0x000001, "Wrong size on VCamModifier_IsEnabled");
static_assert(offsetof(VCamModifier_IsEnabled, ReturnValue) == 0x000000, "Member 'VCamModifier_IsEnabled::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamBlueprintModifier.OnApply
// 0x0018 (0x0018 - 0x0000)
struct VCamBlueprintModifier_OnApply final
{
public:
	class UVCamModifierContext*                   Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCineCameraComponent*                   CameraComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamBlueprintModifier_OnApply) == 0x000008, "Wrong alignment on VCamBlueprintModifier_OnApply");
static_assert(sizeof(VCamBlueprintModifier_OnApply) == 0x000018, "Wrong size on VCamBlueprintModifier_OnApply");
static_assert(offsetof(VCamBlueprintModifier_OnApply, Context) == 0x000000, "Member 'VCamBlueprintModifier_OnApply::Context' has a wrong offset!");
static_assert(offsetof(VCamBlueprintModifier_OnApply, CameraComponent) == 0x000008, "Member 'VCamBlueprintModifier_OnApply::CameraComponent' has a wrong offset!");
static_assert(offsetof(VCamBlueprintModifier_OnApply, DeltaTime) == 0x000010, "Member 'VCamBlueprintModifier_OnApply::DeltaTime' has a wrong offset!");

// Function VCamCore.VCamBlueprintModifier.OnInitialize
// 0x0008 (0x0008 - 0x0000)
struct VCamBlueprintModifier_OnInitialize final
{
public:
	class UVCamModifierContext*                   Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamBlueprintModifier_OnInitialize) == 0x000008, "Wrong alignment on VCamBlueprintModifier_OnInitialize");
static_assert(sizeof(VCamBlueprintModifier_OnInitialize) == 0x000008, "Wrong size on VCamBlueprintModifier_OnInitialize");
static_assert(offsetof(VCamBlueprintModifier_OnInitialize, Context) == 0x000000, "Member 'VCamBlueprintModifier_OnInitialize::Context' has a wrong offset!");

// DelegateFunction VCamCore.VCamOutputProviderBase.ActivationDelegate_Blueprint__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature final
{
public:
	bool                                          bNewIsActive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature) == 0x000001, "Wrong alignment on VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature");
static_assert(sizeof(VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature) == 0x000001, "Wrong size on VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature");
static_assert(offsetof(VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature, bNewIsActive) == 0x000000, "Member 'VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature::bNewIsActive' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.SetActive
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_SetActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_SetActive) == 0x000001, "Wrong alignment on VCamOutputProviderBase_SetActive");
static_assert(sizeof(VCamOutputProviderBase_SetActive) == 0x000001, "Wrong size on VCamOutputProviderBase_SetActive");
static_assert(offsetof(VCamOutputProviderBase_SetActive, bInActive) == 0x000000, "Member 'VCamOutputProviderBase_SetActive::bInActive' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.SetTargetViewport
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_SetTargetViewport final
{
public:
	EVCamTargetViewportID                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_SetTargetViewport) == 0x000001, "Wrong alignment on VCamOutputProviderBase_SetTargetViewport");
static_assert(sizeof(VCamOutputProviderBase_SetTargetViewport) == 0x000001, "Wrong size on VCamOutputProviderBase_SetTargetViewport");
static_assert(offsetof(VCamOutputProviderBase_SetTargetViewport, Value) == 0x000000, "Member 'VCamOutputProviderBase_SetTargetViewport::Value' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.SetUMGClass
// 0x0008 (0x0008 - 0x0000)
struct VCamOutputProviderBase_SetUMGClass final
{
public:
	TSubclassOf<class UUserWidget>                InUMGClass;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_SetUMGClass) == 0x000008, "Wrong alignment on VCamOutputProviderBase_SetUMGClass");
static_assert(sizeof(VCamOutputProviderBase_SetUMGClass) == 0x000008, "Wrong size on VCamOutputProviderBase_SetUMGClass");
static_assert(offsetof(VCamOutputProviderBase_SetUMGClass, InUMGClass) == 0x000000, "Member 'VCamOutputProviderBase_SetUMGClass::InUMGClass' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.GetTargetViewport
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_GetTargetViewport final
{
public:
	EVCamTargetViewportID                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_GetTargetViewport) == 0x000001, "Wrong alignment on VCamOutputProviderBase_GetTargetViewport");
static_assert(sizeof(VCamOutputProviderBase_GetTargetViewport) == 0x000001, "Wrong size on VCamOutputProviderBase_GetTargetViewport");
static_assert(offsetof(VCamOutputProviderBase_GetTargetViewport, ReturnValue) == 0x000000, "Member 'VCamOutputProviderBase_GetTargetViewport::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.GetUMGClass
// 0x0008 (0x0008 - 0x0000)
struct VCamOutputProviderBase_GetUMGClass final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_GetUMGClass) == 0x000008, "Wrong alignment on VCamOutputProviderBase_GetUMGClass");
static_assert(sizeof(VCamOutputProviderBase_GetUMGClass) == 0x000008, "Wrong size on VCamOutputProviderBase_GetUMGClass");
static_assert(offsetof(VCamOutputProviderBase_GetUMGClass, ReturnValue) == 0x000000, "Member 'VCamOutputProviderBase_GetUMGClass::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.GetVCamComponent
// 0x0008 (0x0008 - 0x0000)
struct VCamOutputProviderBase_GetVCamComponent final
{
public:
	class UVCamComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_GetVCamComponent) == 0x000008, "Wrong alignment on VCamOutputProviderBase_GetVCamComponent");
static_assert(sizeof(VCamOutputProviderBase_GetVCamComponent) == 0x000008, "Wrong size on VCamOutputProviderBase_GetVCamComponent");
static_assert(offsetof(VCamOutputProviderBase_GetVCamComponent, ReturnValue) == 0x000000, "Member 'VCamOutputProviderBase_GetVCamComponent::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.IsActive
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_IsActive) == 0x000001, "Wrong alignment on VCamOutputProviderBase_IsActive");
static_assert(sizeof(VCamOutputProviderBase_IsActive) == 0x000001, "Wrong size on VCamOutputProviderBase_IsActive");
static_assert(offsetof(VCamOutputProviderBase_IsActive, ReturnValue) == 0x000000, "Member 'VCamOutputProviderBase_IsActive::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamOutputProviderBase.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct VCamOutputProviderBase_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamOutputProviderBase_IsInitialized) == 0x000001, "Wrong alignment on VCamOutputProviderBase_IsInitialized");
static_assert(sizeof(VCamOutputProviderBase_IsInitialized) == 0x000001, "Wrong size on VCamOutputProviderBase_IsInitialized");
static_assert(offsetof(VCamOutputProviderBase_IsInitialized, ReturnValue) == 0x000000, "Member 'VCamOutputProviderBase_IsInitialized::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamWidget.OnConnectionUpdated
// 0x0028 (0x0028 - 0x0000)
struct VCamWidget_OnConnectionUpdated final
{
public:
	class FName                                   ConnectionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidConnectSuccessfully;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDE[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModifierConnectionPointName;                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCamModifier*                          ConnectedModifier;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           ConnectedAction;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamWidget_OnConnectionUpdated) == 0x000008, "Wrong alignment on VCamWidget_OnConnectionUpdated");
static_assert(sizeof(VCamWidget_OnConnectionUpdated) == 0x000028, "Wrong size on VCamWidget_OnConnectionUpdated");
static_assert(offsetof(VCamWidget_OnConnectionUpdated, ConnectionName) == 0x000000, "Member 'VCamWidget_OnConnectionUpdated::ConnectionName' has a wrong offset!");
static_assert(offsetof(VCamWidget_OnConnectionUpdated, bDidConnectSuccessfully) == 0x000008, "Member 'VCamWidget_OnConnectionUpdated::bDidConnectSuccessfully' has a wrong offset!");
static_assert(offsetof(VCamWidget_OnConnectionUpdated, ModifierConnectionPointName) == 0x00000C, "Member 'VCamWidget_OnConnectionUpdated::ModifierConnectionPointName' has a wrong offset!");
static_assert(offsetof(VCamWidget_OnConnectionUpdated, ConnectedModifier) == 0x000018, "Member 'VCamWidget_OnConnectionUpdated::ConnectedModifier' has a wrong offset!");
static_assert(offsetof(VCamWidget_OnConnectionUpdated, ConnectedAction) == 0x000020, "Member 'VCamWidget_OnConnectionUpdated::ConnectedAction' has a wrong offset!");

// Function VCamCore.VCamWidget.OnInitializeConnections
// 0x0008 (0x0008 - 0x0000)
struct VCamWidget_OnInitializeConnections final
{
public:
	class UVCamComponent*                         VCam;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamWidget_OnInitializeConnections) == 0x000008, "Wrong alignment on VCamWidget_OnInitializeConnections");
static_assert(sizeof(VCamWidget_OnInitializeConnections) == 0x000008, "Wrong size on VCamWidget_OnInitializeConnections");
static_assert(offsetof(VCamWidget_OnInitializeConnections, VCam) == 0x000000, "Member 'VCamWidget_OnInitializeConnections::VCam' has a wrong offset!");

// Function VCamCore.VCamWidget.ReinitializeConnections
// 0x0001 (0x0001 - 0x0000)
struct VCamWidget_ReinitializeConnections final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamWidget_ReinitializeConnections) == 0x000001, "Wrong alignment on VCamWidget_ReinitializeConnections");
static_assert(sizeof(VCamWidget_ReinitializeConnections) == 0x000001, "Wrong size on VCamWidget_ReinitializeConnections");
static_assert(offsetof(VCamWidget_ReinitializeConnections, ReturnValue) == 0x000000, "Member 'VCamWidget_ReinitializeConnections::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamWidget.UpdateConnectionTargets
// 0x0058 (0x0058 - 0x0000)
struct VCamWidget_UpdateConnectionTargets final
{
public:
	TMap<class FName, struct FVCamConnectionTargetSettings> NewConnectionTargets;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReinitializeOnSuccessfulUpdate;                   // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionUpdateResult                       Result;                                            // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE0[0x6];                                     // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamWidget_UpdateConnectionTargets) == 0x000008, "Wrong alignment on VCamWidget_UpdateConnectionTargets");
static_assert(sizeof(VCamWidget_UpdateConnectionTargets) == 0x000058, "Wrong size on VCamWidget_UpdateConnectionTargets");
static_assert(offsetof(VCamWidget_UpdateConnectionTargets, NewConnectionTargets) == 0x000000, "Member 'VCamWidget_UpdateConnectionTargets::NewConnectionTargets' has a wrong offset!");
static_assert(offsetof(VCamWidget_UpdateConnectionTargets, bReinitializeOnSuccessfulUpdate) == 0x000050, "Member 'VCamWidget_UpdateConnectionTargets::bReinitializeOnSuccessfulUpdate' has a wrong offset!");
static_assert(offsetof(VCamWidget_UpdateConnectionTargets, Result) == 0x000051, "Member 'VCamWidget_UpdateConnectionTargets::Result' has a wrong offset!");

// Function VCamCore.VCamStateSwitcherWidget.K2_SetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct VCamStateSwitcherWidget_K2_SetCurrentState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamStateSwitcherWidget_K2_SetCurrentState) == 0x000004, "Wrong alignment on VCamStateSwitcherWidget_K2_SetCurrentState");
static_assert(sizeof(VCamStateSwitcherWidget_K2_SetCurrentState) == 0x000008, "Wrong size on VCamStateSwitcherWidget_K2_SetCurrentState");
static_assert(offsetof(VCamStateSwitcherWidget_K2_SetCurrentState, NewState) == 0x000000, "Member 'VCamStateSwitcherWidget_K2_SetCurrentState::NewState' has a wrong offset!");

// Function VCamCore.VCamStateSwitcherWidget.SetCurrentState
// 0x000C (0x000C - 0x0000)
struct VCamStateSwitcherWidget_SetCurrentState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitializeConnections;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE1[0x1];                                     // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamStateSwitcherWidget_SetCurrentState) == 0x000004, "Wrong alignment on VCamStateSwitcherWidget_SetCurrentState");
static_assert(sizeof(VCamStateSwitcherWidget_SetCurrentState) == 0x00000C, "Wrong size on VCamStateSwitcherWidget_SetCurrentState");
static_assert(offsetof(VCamStateSwitcherWidget_SetCurrentState, NewState) == 0x000000, "Member 'VCamStateSwitcherWidget_SetCurrentState::NewState' has a wrong offset!");
static_assert(offsetof(VCamStateSwitcherWidget_SetCurrentState, bForceUpdate) == 0x000008, "Member 'VCamStateSwitcherWidget_SetCurrentState::bForceUpdate' has a wrong offset!");
static_assert(offsetof(VCamStateSwitcherWidget_SetCurrentState, bReinitializeConnections) == 0x000009, "Member 'VCamStateSwitcherWidget_SetCurrentState::bReinitializeConnections' has a wrong offset!");
static_assert(offsetof(VCamStateSwitcherWidget_SetCurrentState, ReturnValue) == 0x00000A, "Member 'VCamStateSwitcherWidget_SetCurrentState::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamStateSwitcherWidget.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct VCamStateSwitcherWidget_GetCurrentState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamStateSwitcherWidget_GetCurrentState) == 0x000004, "Wrong alignment on VCamStateSwitcherWidget_GetCurrentState");
static_assert(sizeof(VCamStateSwitcherWidget_GetCurrentState) == 0x000008, "Wrong size on VCamStateSwitcherWidget_GetCurrentState");
static_assert(offsetof(VCamStateSwitcherWidget_GetCurrentState, ReturnValue) == 0x000000, "Member 'VCamStateSwitcherWidget_GetCurrentState::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamStateSwitcherWidget.GetStateInfo
// 0x0020 (0x0020 - 0x0000)
struct VCamStateSwitcherWidget_GetStateInfo final
{
public:
	class FName                                   State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVCamWidgetConnectionState             OutStateInfo;                                      // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE2[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamStateSwitcherWidget_GetStateInfo) == 0x000008, "Wrong alignment on VCamStateSwitcherWidget_GetStateInfo");
static_assert(sizeof(VCamStateSwitcherWidget_GetStateInfo) == 0x000020, "Wrong size on VCamStateSwitcherWidget_GetStateInfo");
static_assert(offsetof(VCamStateSwitcherWidget_GetStateInfo, State) == 0x000000, "Member 'VCamStateSwitcherWidget_GetStateInfo::State' has a wrong offset!");
static_assert(offsetof(VCamStateSwitcherWidget_GetStateInfo, OutStateInfo) == 0x000008, "Member 'VCamStateSwitcherWidget_GetStateInfo::OutStateInfo' has a wrong offset!");
static_assert(offsetof(VCamStateSwitcherWidget_GetStateInfo, ReturnValue) == 0x000018, "Member 'VCamStateSwitcherWidget_GetStateInfo::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamStateSwitcherWidget.GetStates
// 0x0010 (0x0010 - 0x0000)
struct VCamStateSwitcherWidget_GetStates final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamStateSwitcherWidget_GetStates) == 0x000008, "Wrong alignment on VCamStateSwitcherWidget_GetStates");
static_assert(sizeof(VCamStateSwitcherWidget_GetStates) == 0x000010, "Wrong size on VCamStateSwitcherWidget_GetStates");
static_assert(offsetof(VCamStateSwitcherWidget_GetStates, ReturnValue) == 0x000000, "Member 'VCamStateSwitcherWidget_GetStates::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectedInputAction_VCamConnection
// 0x0050 (0x0050 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection final
{
public:
	struct FVCamConnection                        Connection;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInputAction*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection) == 0x000050, "Wrong size on VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection, Connection) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection::Connection' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection, ReturnValue) == 0x000048, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectedInputAction_VCamWidget
// 0x0020 (0x0020 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget final
{
public:
	class UVCamWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectionId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           OutInputAction;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget) == 0x000020, "Wrong size on VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget, Widget) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget::Widget' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget, ConnectionId) == 0x000008, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget::ConnectionId' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget, OutInputAction) == 0x000010, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget::OutInputAction' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget, ReturnValue) == 0x000018, "Member 'VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectedModifier_VCamConnection
// 0x0050 (0x0050 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection final
{
public:
	struct FVCamConnection                        Connection;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UVCamModifier*                          ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection) == 0x000050, "Wrong size on VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection, Connection) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection::Connection' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection, ReturnValue) == 0x000048, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectedModifier_VCamWidget
// 0x0020 (0x0020 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget final
{
public:
	class UVCamWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectionId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamModifier*                          OutModifier;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget) == 0x000020, "Wrong size on VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget, Widget) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget::Widget' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget, ConnectionId) == 0x000008, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget::ConnectionId' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget, OutModifier) == 0x000010, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget::OutModifier' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget, ReturnValue) == 0x000018, "Member 'VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectionByName_VCamWidget
// 0x0060 (0x0060 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectionByName_VCamWidget final
{
public:
	class UVCamWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectionId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVCamConnection                        OutConnection;                                     // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE5[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectionByName_VCamWidget");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget) == 0x000060, "Wrong size on VCamUIFunctionLibrary_GetConnectionByName_VCamWidget");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget, Widget) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectionByName_VCamWidget::Widget' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget, ConnectionId) == 0x000008, "Member 'VCamUIFunctionLibrary_GetConnectionByName_VCamWidget::ConnectionId' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget, OutConnection) == 0x000010, "Member 'VCamUIFunctionLibrary_GetConnectionByName_VCamWidget::OutConnection' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionByName_VCamWidget, ReturnValue) == 0x000058, "Member 'VCamUIFunctionLibrary_GetConnectionByName_VCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectionPointName_VCamConnection
// 0x0050 (0x0050 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection final
{
public:
	struct FVCamConnection                        Connection;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection) == 0x000050, "Wrong size on VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection, Connection) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection::Connection' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection, ReturnValue) == 0x000048, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.GetConnectionPointName_VCamWidget
// 0x0020 (0x0020 - 0x0000)
struct VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget final
{
public:
	class UVCamWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectionId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutConnectionPointName;                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget");
static_assert(sizeof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget) == 0x000020, "Wrong size on VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget, Widget) == 0x000000, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget::Widget' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget, ConnectionId) == 0x000008, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget::ConnectionId' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget, OutConnectionPointName) == 0x000010, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget::OutConnectionPointName' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget, ReturnValue) == 0x000018, "Member 'VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.IsConnected_VCamConnection
// 0x0050 (0x0050 - 0x0000)
struct VCamUIFunctionLibrary_IsConnected_VCamConnection final
{
public:
	struct FVCamConnection                        Connection;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE7[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_IsConnected_VCamConnection) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_IsConnected_VCamConnection");
static_assert(sizeof(VCamUIFunctionLibrary_IsConnected_VCamConnection) == 0x000050, "Wrong size on VCamUIFunctionLibrary_IsConnected_VCamConnection");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamConnection, Connection) == 0x000000, "Member 'VCamUIFunctionLibrary_IsConnected_VCamConnection::Connection' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamConnection, ReturnValue) == 0x000048, "Member 'VCamUIFunctionLibrary_IsConnected_VCamConnection::ReturnValue' has a wrong offset!");

// Function VCamCore.VCamUIFunctionLibrary.IsConnected_VCamWidget
// 0x0018 (0x0018 - 0x0000)
struct VCamUIFunctionLibrary_IsConnected_VCamWidget final
{
public:
	class UVCamWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectionId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsConnected;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE8[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCamUIFunctionLibrary_IsConnected_VCamWidget) == 0x000008, "Wrong alignment on VCamUIFunctionLibrary_IsConnected_VCamWidget");
static_assert(sizeof(VCamUIFunctionLibrary_IsConnected_VCamWidget) == 0x000018, "Wrong size on VCamUIFunctionLibrary_IsConnected_VCamWidget");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamWidget, Widget) == 0x000000, "Member 'VCamUIFunctionLibrary_IsConnected_VCamWidget::Widget' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamWidget, ConnectionId) == 0x000008, "Member 'VCamUIFunctionLibrary_IsConnected_VCamWidget::ConnectionId' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamWidget, bOutIsConnected) == 0x000010, "Member 'VCamUIFunctionLibrary_IsConnected_VCamWidget::bOutIsConnected' has a wrong offset!");
static_assert(offsetof(VCamUIFunctionLibrary_IsConnected_VCamWidget, ReturnValue) == 0x000011, "Member 'VCamUIFunctionLibrary_IsConnected_VCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.WidgetReferenceBlueprintFunctionLibrary.ResolveVCamWidget
// 0x0038 (0x0038 - 0x0000)
struct WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget final
{
public:
	struct FVCamChildWidgetReference              WidgetReference;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UUserWidget*                            OwnerWidget;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCamWidget*                            ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget) == 0x000008, "Wrong alignment on WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget");
static_assert(sizeof(WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget) == 0x000038, "Wrong size on WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget, WidgetReference) == 0x000000, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget::WidgetReference' has a wrong offset!");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget, OwnerWidget) == 0x000028, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget, ReturnValue) == 0x000030, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget::ReturnValue' has a wrong offset!");

// Function VCamCore.WidgetReferenceBlueprintFunctionLibrary.ResolveWidget
// 0x0038 (0x0038 - 0x0000)
struct WidgetReferenceBlueprintFunctionLibrary_ResolveWidget final
{
public:
	struct FChildWidgetReference                  WidgetReference;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UUserWidget*                            OwnerWidget;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetReferenceBlueprintFunctionLibrary_ResolveWidget) == 0x000008, "Wrong alignment on WidgetReferenceBlueprintFunctionLibrary_ResolveWidget");
static_assert(sizeof(WidgetReferenceBlueprintFunctionLibrary_ResolveWidget) == 0x000038, "Wrong size on WidgetReferenceBlueprintFunctionLibrary_ResolveWidget");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveWidget, WidgetReference) == 0x000000, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveWidget::WidgetReference' has a wrong offset!");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveWidget, OwnerWidget) == 0x000028, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveWidget::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WidgetReferenceBlueprintFunctionLibrary_ResolveWidget, ReturnValue) == 0x000030, "Member 'WidgetReferenceBlueprintFunctionLibrary_ResolveWidget::ReturnValue' has a wrong offset!");

}

