#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_UIHelper

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_TooltipItemType_structs.hpp"
#include "G01_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_UIHelper.BPFL_UIHelper_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_UIHelper_C final : public UBlueprintFunctionLibrary
{
public:
	static void CurrencyTextFormat(int32 Amount, class UObject* __WorldContext, class FText* Result);
	static void CutEnumToEnumValue(const class FString& EnumValue, const class FString& EnumName, class UObject* __WorldContext, class FName* Return);
	static void CutText(const class FText& InText, int32 LenMax, const class FString& EndPrefix, class UObject* __WorldContext, class FText* Result);
	static class UObject* GetAmmoTypeImage(EGzWeaponResourceType Param_Index, class UObject* __WorldContext);
	static void GetCurrencyIcon(class UObject* __WorldContext, class UTexture2D** AsTexture_2D);
	static class UTexture2D* GetFireModeIcon(EGzWeaponMode Param_Index, class UObject* __WorldContext);
	static void GetItemType(class UGzItemData* ItemData, class UObject* __WorldContext, E_TooltipItemType* Result);
	static void GetLimbHealthAttribute(EGzLimbType LimbType, bool MaxAttribute, class UObject* __WorldContext, struct FGameplayAttribute* Attribute);
	static TSoftObjectPtr<class UTexture2D> GetLimbIdentifier(EGzLimbType Param_Index, class UObject* __WorldContext);
	static void GetNotificationColor(EGzNotificationGroupType NotifictionGroupType, class UObject* __WorldContext, struct FLinearColor* Color);
	static struct FLinearColor GetRarityColor(EGzItemRarity Param_Index, class UObject* __WorldContext);
	static class UTexture2D* GetRarityIcon(EGzItemRarity Param_Index, class UObject* __WorldContext);
	static void GetRarityName(EGzItemRarity Param_Index, class UObject* __WorldContext, class FText* RarityName);
	static void GetTeamAttitudeColor(ETeamAttitude TeamAttitude, class UObject* __WorldContext, struct FLinearColor* Color);
	static void GetTeammateASCIIColorFromIndex(int32 PlayerIndex, class UObject* __WorldContext, class FText* ASCIIColor);
	static void GetTeammateASCIIShapeFromIndex(int32 PlayerIndex, class UObject* __WorldContext, class FText* ShapeAsASCII);
	static void GetTeammateColorFromIndex(int32 InPlayerIndex, class UObject* __WorldContext, struct FLinearColor* OutPlayerColor);
	static void GetTeammateShapeFromIndex(int32 PlayerIndex, class UObject* __WorldContext, class UTexture2D** NewParam);
	static void GetTimeInMinutesSecondFormatText(float InSeconds, class UObject* __WorldContext, class FText* Result);
	static void GetTimeInMinutesSecondToString(float InSeconds, class UObject* __WorldContext, class FString* Minutes, class FString* Seconds);
	static void GetWeaponDataInHand(class AGzCharacter* Character, class UObject* __WorldContext, class UGzWeaponItemData** CurrentWeaponData);
	static void GetWeaponTypeName(EGzWeaponType WeaponType, bool Short, class UObject* __WorldContext, class FText* WeaponName);
	static void IsSoloGamemode(const class APlayerController* PlayerController, class UObject* __WorldContext, bool* bIsSolos);
	static void ScopeValuePerFOV(double FieldOfView, class UObject* __WorldContext, int32* Value);
	static void Set_Rarity_Icon___Color(class UImage* Image, EGzItemRarity Quality, class UObject* __WorldContext);
	static void SetHexIconColored(EGzItemRarity Quality, class UImage* Image, class UObject* __WorldContext);

	void GetIndexInTeam(class AGzPlayerState* PlayerState, class UObject* __WorldContext, int32* OutputPin);
	void IsEventActive(const struct FGameplayTag& Event, class UObject* ObjectReference, class UObject* __WorldContext, bool* IsActive, double* ExpireTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_UIHelper_C">();
	}
	static class UBPFL_UIHelper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_UIHelper_C>();
	}
};
static_assert(alignof(UBPFL_UIHelper_C) == 0x000008, "Wrong alignment on UBPFL_UIHelper_C");
static_assert(sizeof(UBPFL_UIHelper_C) == 0x000028, "Wrong size on UBPFL_UIHelper_C");

}

