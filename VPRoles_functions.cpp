#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VPRoles

#include "Basic.hpp"

#include "VPRoles_classes.hpp"
#include "VPRoles_parameters.hpp"


namespace SDK
{

// DelegateFunction VPRoles.VirtualProductionRolesSubsystem.OnRolesChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// TArray<class FString>                   EnabledRoles                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVirtualProductionRolesSubsystem::OnRolesChanged__DelegateSignature(const TArray<class FString>& EnabledRoles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "OnRolesChanged__DelegateSignature");

	Params::VirtualProductionRolesSubsystem_OnRolesChanged__DelegateSignature Parms{};

	Parms.EnabledRoles = std::move(EnabledRoles);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VPRoles.VirtualProductionRolesSubsystem.SetActiveRoles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Roles                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVirtualProductionRolesSubsystem::SetActiveRoles(const TArray<class FString>& Roles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "SetActiveRoles");

	Params::VirtualProductionRolesSubsystem_SetActiveRoles Parms{};

	Parms.Roles = std::move(Roles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VPRoles.VirtualProductionRolesSubsystem.GetActiveRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVirtualProductionRolesSubsystem::GetActiveRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "GetActiveRoles");

	Params::VirtualProductionRolesSubsystem_GetActiveRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPRoles.VirtualProductionRolesSubsystem.GetActiveRolesString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVirtualProductionRolesSubsystem::GetActiveRolesString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "GetActiveRolesString");

	Params::VirtualProductionRolesSubsystem_GetActiveRolesString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPRoles.VirtualProductionRolesSubsystem.GetAllRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVirtualProductionRolesSubsystem::GetAllRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "GetAllRoles");

	Params::VirtualProductionRolesSubsystem_GetAllRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VPRoles.VirtualProductionRolesSubsystem.HasActiveRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Role                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualProductionRolesSubsystem::HasActiveRole(const class FString& Role) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VirtualProductionRolesSubsystem", "HasActiveRole");

	Params::VirtualProductionRolesSubsystem_HasActiveRole Parms{};

	Parms.Role = std::move(Role);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

