#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ErrantBiomesRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ErrantBiomesRuntime.EBiomesRuntimeSpawning
// NumValues: 0x0004
enum class EBiomesRuntimeSpawning : uint8
{
	Auto                                     = 0,
	Never                                    = 1,
	Always                                   = 2,
	EBiomesRuntimeSpawning_MAX               = 3,
};

// Enum ErrantBiomesRuntime.EBiomesGroupInstances
// NumValues: 0x0004
enum class EBiomesGroupInstances : uint8
{
	Always                                   = 0,
	WhenMoreThenThreshold                    = 1,
	Never                                    = 2,
	EBiomesGroupInstances_MAX                = 3,
};

// ScriptStruct ErrantBiomesRuntime.BiomesComponentGenerateTransformsInfo
// 0x0090 (0x0090 - 0x0000)
struct FBiomesComponentGenerateTransformsInfo final
{
public:
	int32                                         TransformsSize;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreciseWithNeighboursSize;                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentSize;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeighboursEdgesSize;                               // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWorldPrecision;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42DD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldScale;                                        // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldToLandscape;                                  // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesComponentGenerateTransformsInfo) == 0x000010, "Wrong alignment on FBiomesComponentGenerateTransformsInfo");
static_assert(sizeof(FBiomesComponentGenerateTransformsInfo) == 0x000090, "Wrong size on FBiomesComponentGenerateTransformsInfo");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, TransformsSize) == 0x000000, "Member 'FBiomesComponentGenerateTransformsInfo::TransformsSize' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, PreciseWithNeighboursSize) == 0x000004, "Member 'FBiomesComponentGenerateTransformsInfo::PreciseWithNeighboursSize' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, ComponentSize) == 0x000008, "Member 'FBiomesComponentGenerateTransformsInfo::ComponentSize' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, NeighboursEdgesSize) == 0x00000C, "Member 'FBiomesComponentGenerateTransformsInfo::NeighboursEdgesSize' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, MaxWorldPrecision) == 0x000010, "Member 'FBiomesComponentGenerateTransformsInfo::MaxWorldPrecision' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, WorldScale) == 0x000018, "Member 'FBiomesComponentGenerateTransformsInfo::WorldScale' has a wrong offset!");
static_assert(offsetof(FBiomesComponentGenerateTransformsInfo, WorldToLandscape) == 0x000030, "Member 'FBiomesComponentGenerateTransformsInfo::WorldToLandscape' has a wrong offset!");

// ScriptStruct ErrantBiomesRuntime.BiomesInstancesSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FBiomesInstancesSettings final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorTemplate;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABiomesRuntimeSpawnerContainer> RuntimeSpawningActorClass;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABiomesRuntimeSpawnerContainer*         RuntimeSpawningActorTemplate;                      // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHierarchicalInstancedStaticMeshComponent* InstanceComponentTemplate;                         // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBiomesGroupInstances                         GroupInstances;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42DE[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinInstancesInGroup;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceGroupSizeMultiplier;                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInstancesPerRuntimeInstanceComponent;           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBiomesRuntimeSpawning                        RuntimeSpawning;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42DF[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             DEPRECATED_DataLayers;                             // 0x0040(0x0050)(NativeAccessSpecifierPrivate)
	bool                                          bUsesDeprecatedDataLayers;                         // 0x0090(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCastsShadow;                                      // 0x0091(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasPhysics;                                       // 0x0092(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableDensityScaling;                             // 0x0093(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         InstanceStartCullDistance;                         // 0x0094(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         InstanceEndCullDistance;                           // 0x0098(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinDrawDistance;                                   // 0x009C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LDMaxDrawDistance;                                 // 0x00A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42E0[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomesInstancesSettings) == 0x000008, "Wrong alignment on FBiomesInstancesSettings");
static_assert(sizeof(FBiomesInstancesSettings) == 0x0000A8, "Wrong size on FBiomesInstancesSettings");
static_assert(offsetof(FBiomesInstancesSettings, ActorClass) == 0x000000, "Member 'FBiomesInstancesSettings::ActorClass' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, ActorTemplate) == 0x000008, "Member 'FBiomesInstancesSettings::ActorTemplate' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, RuntimeSpawningActorClass) == 0x000010, "Member 'FBiomesInstancesSettings::RuntimeSpawningActorClass' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, RuntimeSpawningActorTemplate) == 0x000018, "Member 'FBiomesInstancesSettings::RuntimeSpawningActorTemplate' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, InstanceComponentTemplate) == 0x000020, "Member 'FBiomesInstancesSettings::InstanceComponentTemplate' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, GroupInstances) == 0x000028, "Member 'FBiomesInstancesSettings::GroupInstances' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, MinInstancesInGroup) == 0x00002C, "Member 'FBiomesInstancesSettings::MinInstancesInGroup' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, InstanceGroupSizeMultiplier) == 0x000030, "Member 'FBiomesInstancesSettings::InstanceGroupSizeMultiplier' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, MaxInstancesPerRuntimeInstanceComponent) == 0x000034, "Member 'FBiomesInstancesSettings::MaxInstancesPerRuntimeInstanceComponent' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, RuntimeSpawning) == 0x000038, "Member 'FBiomesInstancesSettings::RuntimeSpawning' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, DEPRECATED_DataLayers) == 0x000040, "Member 'FBiomesInstancesSettings::DEPRECATED_DataLayers' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, bUsesDeprecatedDataLayers) == 0x000090, "Member 'FBiomesInstancesSettings::bUsesDeprecatedDataLayers' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, bCastsShadow) == 0x000091, "Member 'FBiomesInstancesSettings::bCastsShadow' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, bHasPhysics) == 0x000092, "Member 'FBiomesInstancesSettings::bHasPhysics' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, bEnableDensityScaling) == 0x000093, "Member 'FBiomesInstancesSettings::bEnableDensityScaling' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, InstanceStartCullDistance) == 0x000094, "Member 'FBiomesInstancesSettings::InstanceStartCullDistance' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, InstanceEndCullDistance) == 0x000098, "Member 'FBiomesInstancesSettings::InstanceEndCullDistance' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, MinDrawDistance) == 0x00009C, "Member 'FBiomesInstancesSettings::MinDrawDistance' has a wrong offset!");
static_assert(offsetof(FBiomesInstancesSettings, LDMaxDrawDistance) == 0x0000A0, "Member 'FBiomesInstancesSettings::LDMaxDrawDistance' has a wrong offset!");

// ScriptStruct ErrantBiomesRuntime.BiomesRandomScale
// 0x0018 (0x0018 - 0x0000)
struct FBiomesRandomScale final
{
public:
	struct FVector3f                              Min;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Max;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesRandomScale) == 0x000004, "Wrong alignment on FBiomesRandomScale");
static_assert(sizeof(FBiomesRandomScale) == 0x000018, "Wrong size on FBiomesRandomScale");
static_assert(offsetof(FBiomesRandomScale, Min) == 0x000000, "Member 'FBiomesRandomScale::Min' has a wrong offset!");
static_assert(offsetof(FBiomesRandomScale, Max) == 0x00000C, "Member 'FBiomesRandomScale::Max' has a wrong offset!");

// ScriptStruct ErrantBiomesRuntime.BiomesRandomRotation
// 0x0018 (0x0018 - 0x0000)
struct FBiomesRandomRotation final
{
public:
	struct FVector3f                              Min;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Max;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesRandomRotation) == 0x000004, "Wrong alignment on FBiomesRandomRotation");
static_assert(sizeof(FBiomesRandomRotation) == 0x000018, "Wrong size on FBiomesRandomRotation");
static_assert(offsetof(FBiomesRandomRotation, Min) == 0x000000, "Member 'FBiomesRandomRotation::Min' has a wrong offset!");
static_assert(offsetof(FBiomesRandomRotation, Max) == 0x00000C, "Member 'FBiomesRandomRotation::Max' has a wrong offset!");

// ScriptStruct ErrantBiomesRuntime.BiomesInstanceComponentPartitions
// 0x0048 (0x0048 - 0x0000)
struct FBiomesInstanceComponentPartitions final
{
public:
	TArray<TSoftObjectPtr<class UHierarchicalInstancedStaticMeshComponent>> InstanceComponents;                                // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBox2D>                         PartitionBounds;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E1[0x28];                                    // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomesInstanceComponentPartitions) == 0x000008, "Wrong alignment on FBiomesInstanceComponentPartitions");
static_assert(sizeof(FBiomesInstanceComponentPartitions) == 0x000048, "Wrong size on FBiomesInstanceComponentPartitions");
static_assert(offsetof(FBiomesInstanceComponentPartitions, InstanceComponents) == 0x000000, "Member 'FBiomesInstanceComponentPartitions::InstanceComponents' has a wrong offset!");
static_assert(offsetof(FBiomesInstanceComponentPartitions, PartitionBounds) == 0x000010, "Member 'FBiomesInstanceComponentPartitions::PartitionBounds' has a wrong offset!");

// ScriptStruct ErrantBiomesRuntime.BiomesSpeciesGenerateTransformsInfo
// 0x0078 (0x0078 - 0x0000)
struct FBiomesSpeciesGenerateTransformsInfo final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationWithLandscape;                             // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientationWithLandscape;                          // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBiomesRandomRotation                  RandomRotation;                                    // 0x0020(0x0018)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FBiomesRandomScale                     RandomScale;                                       // 0x0038(0x0018)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        RandSeed;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E2[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RandomScaleAmount;                                 // 0x0058(0x0018)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRotationYaw;                                 // 0x0070(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRotationRollAndPitch;                        // 0x0074(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomesSpeciesGenerateTransformsInfo) == 0x000008, "Wrong alignment on FBiomesSpeciesGenerateTransformsInfo");
static_assert(sizeof(FBiomesSpeciesGenerateTransformsInfo) == 0x000078, "Wrong size on FBiomesSpeciesGenerateTransformsInfo");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, LocationOffset) == 0x000000, "Member 'FBiomesSpeciesGenerateTransformsInfo::LocationOffset' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RotationWithLandscape) == 0x000018, "Member 'FBiomesSpeciesGenerateTransformsInfo::RotationWithLandscape' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, OrientationWithLandscape) == 0x00001C, "Member 'FBiomesSpeciesGenerateTransformsInfo::OrientationWithLandscape' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandomRotation) == 0x000020, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandomRotation' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandomScale) == 0x000038, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandomScale' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandSeed) == 0x000050, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandSeed' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandomScaleAmount) == 0x000058, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandomScaleAmount' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandomRotationYaw) == 0x000070, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandomRotationYaw' has a wrong offset!");
static_assert(offsetof(FBiomesSpeciesGenerateTransformsInfo, RandomRotationRollAndPitch) == 0x000074, "Member 'FBiomesSpeciesGenerateTransformsInfo::RandomRotationRollAndPitch' has a wrong offset!");

}

