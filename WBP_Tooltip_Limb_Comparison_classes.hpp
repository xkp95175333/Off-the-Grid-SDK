#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_Limb_Comparison

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "WBP_BaseTooltip_Comparison_classes.hpp"
#include "G01_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Tooltip_Limb_Comparison.WBP_Tooltip_Limb_Comparison_C
// 0x0090 (0x0380 - 0x02F0)
class UWBP_Tooltip_Limb_Comparison_C final : public UWBP_BaseTooltip_Comparison_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Arrows_Image;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Quality_Image;                                     // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ItemImage_C*                       WBP_ItemImage;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGameplayAttribute                     LimbHealthAttribute;                               // 0x0310(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayAttribute                     LimbHealthAttributeMax;                            // 0x0348(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Destruct();
	void ExecuteUbergraph_WBP_Tooltip_Limb_Comparison(int32 EntryPoint);
	void FindLimbHelth();
	void InitLimbSetup(class UGzBodyPartItemData* LimbItemData);
	void UpdateHealth(double HealthPercentage, bool bCanInteract);
	void UpdateLimbType(class UGzBodyPartItemData* LimbItemData);
	void UpdateShortRarity(class UGzItemData* Param_ItemData);
	void UpdateTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Tooltip_Limb_Comparison_C">();
	}
	static class UWBP_Tooltip_Limb_Comparison_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Tooltip_Limb_Comparison_C>();
	}
};
static_assert(alignof(UWBP_Tooltip_Limb_Comparison_C) == 0x000008, "Wrong alignment on UWBP_Tooltip_Limb_Comparison_C");
static_assert(sizeof(UWBP_Tooltip_Limb_Comparison_C) == 0x000380, "Wrong size on UWBP_Tooltip_Limb_Comparison_C");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Tooltip_Limb_Comparison_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, Arrows_Image) == 0x0002F8, "Member 'UWBP_Tooltip_Limb_Comparison_C::Arrows_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, Quality_Image) == 0x000300, "Member 'UWBP_Tooltip_Limb_Comparison_C::Quality_Image' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, WBP_ItemImage) == 0x000308, "Member 'UWBP_Tooltip_Limb_Comparison_C::WBP_ItemImage' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, LimbHealthAttribute) == 0x000310, "Member 'UWBP_Tooltip_Limb_Comparison_C::LimbHealthAttribute' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_Limb_Comparison_C, LimbHealthAttributeMax) == 0x000348, "Member 'UWBP_Tooltip_Limb_Comparison_C::LimbHealthAttributeMax' has a wrong offset!");

}

