#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieMediaPlayer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MediaAssets_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class MovieMediaPlayer.MovieSceneMediaPlayerSection
// 0x0138 (0x0228 - 0x00F0)
class UMovieSceneMediaPlayerSection final : public UMovieSceneSection
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          MediaTexture;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MediaMaterial;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BackgroundColor;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48FD[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           StartFrameOffset;                                  // 0x0110(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMediaSourceCacheSettings              CacheSettings;                                     // 0x0114(0x0008)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_48FE[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneBoolChannel                 ChannelCanPlayerBeOpen;                            // 0x0120(0x0108)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMediaPlayerSection">();
	}
	static class UMovieSceneMediaPlayerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMediaPlayerSection>();
	}
};
static_assert(alignof(UMovieSceneMediaPlayerSection) == 0x000008, "Wrong alignment on UMovieSceneMediaPlayerSection");
static_assert(sizeof(UMovieSceneMediaPlayerSection) == 0x000228, "Wrong size on UMovieSceneMediaPlayerSection");
static_assert(offsetof(UMovieSceneMediaPlayerSection, MediaSource) == 0x0000F0, "Member 'UMovieSceneMediaPlayerSection::MediaSource' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, MediaTexture) == 0x0000F8, "Member 'UMovieSceneMediaPlayerSection::MediaTexture' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, MediaMaterial) == 0x000100, "Member 'UMovieSceneMediaPlayerSection::MediaMaterial' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, BackgroundColor) == 0x000108, "Member 'UMovieSceneMediaPlayerSection::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, bLooping) == 0x00010C, "Member 'UMovieSceneMediaPlayerSection::bLooping' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, StartFrameOffset) == 0x000110, "Member 'UMovieSceneMediaPlayerSection::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, CacheSettings) == 0x000114, "Member 'UMovieSceneMediaPlayerSection::CacheSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneMediaPlayerSection, ChannelCanPlayerBeOpen) == 0x000120, "Member 'UMovieSceneMediaPlayerSection::ChannelCanPlayerBeOpen' has a wrong offset!");

// Class MovieMediaPlayer.MovieSceneMediaPlayerTrack
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneMediaPlayerTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_48FF[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             MediaSections;                                     // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMediaPlayerTrack">();
	}
	static class UMovieSceneMediaPlayerTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMediaPlayerTrack>();
	}
};
static_assert(alignof(UMovieSceneMediaPlayerTrack) == 0x000008, "Wrong alignment on UMovieSceneMediaPlayerTrack");
static_assert(sizeof(UMovieSceneMediaPlayerTrack) == 0x0000B0, "Wrong size on UMovieSceneMediaPlayerTrack");
static_assert(offsetof(UMovieSceneMediaPlayerTrack, MediaSections) == 0x0000A0, "Member 'UMovieSceneMediaPlayerTrack::MediaSections' has a wrong offset!");

}

