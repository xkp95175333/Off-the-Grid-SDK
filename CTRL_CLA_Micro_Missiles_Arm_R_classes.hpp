#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CTRL_CLA_Micro_Missiles_Arm_R

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass CTRL_CLA_Micro_Missiles_Arm_R.CTRL_CLA_Micro_Missiles_Arm_R_C
// 0x0138 (0x0BE0 - 0x0AA8)
class UCTRL_CLA_Micro_Missiles_Arm_R_C final : public UControlRig
{
public:
	uint8                                         Pad_6EB0[0x8];                                     // 0x0AA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Upperarm_twist_xform;                              // 0x0AB0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Static_upvector;                                   // 0x0B10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x0B28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Calvicle_twist_xform;                              // 0x0B40(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigElementKey>                 First_rocket_pack_jnt;                             // 0x0BA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRigElementKey>                 Second_rocket_pack_jnt;                            // 0x0BB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRigElementKey>                 Third_rocket_pack_jnt;                             // 0x0BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          First_rocket_pack;                                 // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Second_rocket_pack;                                // 0x0BD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Third_rocket_pack;                                 // 0x0BD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CTRL_CLA_Micro_Missiles_Arm_R_C">();
	}
	static class UCTRL_CLA_Micro_Missiles_Arm_R_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCTRL_CLA_Micro_Missiles_Arm_R_C>();
	}
};
static_assert(alignof(UCTRL_CLA_Micro_Missiles_Arm_R_C) == 0x000010, "Wrong alignment on UCTRL_CLA_Micro_Missiles_Arm_R_C");
static_assert(sizeof(UCTRL_CLA_Micro_Missiles_Arm_R_C) == 0x000BE0, "Wrong size on UCTRL_CLA_Micro_Missiles_Arm_R_C");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Upperarm_twist_xform) == 0x000AB0, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Upperarm_twist_xform' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Static_upvector) == 0x000B10, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Static_upvector' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, UpVector) == 0x000B28, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::UpVector' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Calvicle_twist_xform) == 0x000B40, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Calvicle_twist_xform' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, First_rocket_pack_jnt) == 0x000BA0, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::First_rocket_pack_jnt' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Second_rocket_pack_jnt) == 0x000BB0, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Second_rocket_pack_jnt' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Third_rocket_pack_jnt) == 0x000BC0, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Third_rocket_pack_jnt' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, First_rocket_pack) == 0x000BD0, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::First_rocket_pack' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Second_rocket_pack) == 0x000BD1, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Second_rocket_pack' has a wrong offset!");
static_assert(offsetof(UCTRL_CLA_Micro_Missiles_Arm_R_C, Third_rocket_pack) == 0x000BD2, "Member 'UCTRL_CLA_Micro_Missiles_Arm_R_C::Third_rocket_pack' has a wrong offset!");

}

