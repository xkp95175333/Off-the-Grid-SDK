#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minigame

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "Engine_structs.hpp"
#include "E_MinigameServerState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Minigame.BP_Minigame_C
// 0x00D8 (0x0400 - 0x0328)
class ABP_Minigame_C : public AGzMissionInteractable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere1;                                           // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Component_Trigger_C*                BP_Component_Trigger;                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStreamableComponent*                 GzStreamable;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         InitialSeed;                                       // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_696D[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzPlayerCharacter*                     As_Gz_Player_Character;                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGzPlayerController*                    As_Gz_Player_Controller;                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGzInputConfigBindingHandle            InputHandle;                                       // 0x0360(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_MinigameServerState                         MinigameState;                                     // 0x036C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_696E[0x3];                                     // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActive;                                          // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnMinigameStateUpdated;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MinigamePreActiveDelay;                            // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_696F[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinigameDuration;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinigameEndTime;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MinigameTimer;                                     // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlocked;                                         // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6970[0x7];                                     // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   OwningPlayers;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	struct FGzInvPocketId                         WeaponPocketId;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskAttributeChanged*           PlayerHealthListenTask;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGzAsyncTaskAttributeChanged*           PlayerArmorListenTask;                             // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Minigame();
	void AssignPlayers(const TArray<class APlayerState*>& AssignedPlayers);
	void BndEvt__BP_Minigame_InteractableComponent_K2Node_ComponentBoundEvent_0_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void BndEvt__BP_Minigame_InteractableComponent_K2Node_ComponentBoundEvent_2_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void BndEvt__BP_Minigame_InteractableComponent_K2Node_ComponentBoundEvent_3_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void ExecuteUbergraph_BP_Minigame(int32 EntryPoint);
	void HandleDamageTaken_Client();
	void HandleDamageTaken_Server();
	void HolsterWeapon(class AGzPlayerCharacter* PlayerCharacter);
	void InpActEvt_IA_Minigame_Cancel_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Minigame_Down_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Minigame_Left_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Minigame_Right_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Minigame_Up_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void OnActive__DelegateSignature();
	void OnAttributeChanged_13E5EE804A84BCB9E9C0DCAFD2295B20(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void OnAttributeChanged_6F3B878147D8B0B7D6EBF6AE8D6C020F(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void OnAttributeChanged_BF06766147D74AE470D9A983393D725A(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void OnAttributeChanged_EBAC6D81498741A7958298869E7E3516(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void OnFail__DelegateSignature();
	void OnKeyReceived(uint8 PressedKey);
	void OnMinigameStateUpdated__DelegateSignature();
	void OnPlayersAssigned();
	void OnRep_InitialSeed();
	void OnRep_MinigameState();
	void OnRep_OwningPlayers();
	void OnSuccess__DelegateSignature();
	void OnSuccess_Server();
	void ReceiveBeginPlay();
	void SetMinigameState(E_MinigameServerState NewMinigameState);
	void StopInteractionMode();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Minigame_C">();
	}
	static class ABP_Minigame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Minigame_C>();
	}
};
static_assert(alignof(ABP_Minigame_C) == 0x000008, "Wrong alignment on ABP_Minigame_C");
static_assert(sizeof(ABP_Minigame_C) == 0x000400, "Wrong size on ABP_Minigame_C");
static_assert(offsetof(ABP_Minigame_C, UberGraphFrame) == 0x000328, "Member 'ABP_Minigame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, Sphere1) == 0x000330, "Member 'ABP_Minigame_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, BP_Component_Trigger) == 0x000338, "Member 'ABP_Minigame_C::BP_Component_Trigger' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, GzStreamable) == 0x000340, "Member 'ABP_Minigame_C::GzStreamable' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, InitialSeed) == 0x000348, "Member 'ABP_Minigame_C::InitialSeed' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, As_Gz_Player_Character) == 0x000350, "Member 'ABP_Minigame_C::As_Gz_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, As_Gz_Player_Controller) == 0x000358, "Member 'ABP_Minigame_C::As_Gz_Player_Controller' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, InputHandle) == 0x000360, "Member 'ABP_Minigame_C::InputHandle' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, MinigameState) == 0x00036C, "Member 'ABP_Minigame_C::MinigameState' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, OnSuccess) == 0x000370, "Member 'ABP_Minigame_C::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, OnFail) == 0x000380, "Member 'ABP_Minigame_C::OnFail' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, OnActive) == 0x000390, "Member 'ABP_Minigame_C::OnActive' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, OnMinigameStateUpdated) == 0x0003A0, "Member 'ABP_Minigame_C::OnMinigameStateUpdated' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, MinigamePreActiveDelay) == 0x0003B0, "Member 'ABP_Minigame_C::MinigamePreActiveDelay' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, MinigameDuration) == 0x0003B8, "Member 'ABP_Minigame_C::MinigameDuration' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, MinigameEndTime) == 0x0003C0, "Member 'ABP_Minigame_C::MinigameEndTime' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, MinigameTimer) == 0x0003C8, "Member 'ABP_Minigame_C::MinigameTimer' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, IsBlocked) == 0x0003D0, "Member 'ABP_Minigame_C::IsBlocked' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, OwningPlayers) == 0x0003D8, "Member 'ABP_Minigame_C::OwningPlayers' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, WeaponPocketId) == 0x0003E8, "Member 'ABP_Minigame_C::WeaponPocketId' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, PlayerHealthListenTask) == 0x0003F0, "Member 'ABP_Minigame_C::PlayerHealthListenTask' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_C, PlayerArmorListenTask) == 0x0003F8, "Member 'ABP_Minigame_C::PlayerArmorListenTask' has a wrong offset!");

}

