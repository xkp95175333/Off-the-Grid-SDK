#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CLA_TetherArm_Base_R

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_AnimGraph");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_AnimGraph) == 0x000010, "Wrong size on ABP_CLA_TetherArm_Base_R_C_AnimGraph");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.ClearTimers
// 0x0020 (0x0020 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_ClearTimers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F70[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_ClearTimers) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_ClearTimers");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_ClearTimers) == 0x000020, "Wrong size on ABP_CLA_TetherArm_Base_R_C_ClearTimers");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, CallFunc_Array_Get_Item) == 0x000010, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ClearTimers, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'ABP_CLA_TetherArm_Base_R_C_ClearTimers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.ExecuteUbergraph_ABP_CLA_TetherArm_Base_R
// 0x0128 (0x0128 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_2;                          // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_1;                          // 0x0034(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag;                            // 0x003C(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0054(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F71[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAbilitySystemComponent*              CallFunc_GetGzAbilitySystemComponent_ReturnValue;  // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F72[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F73[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAsyncTaskGameplayTagAddedRemoved*    CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F74[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& Tag)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x00AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F75[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_Tag_3;                          // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F76[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F77[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_2;               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_3;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0108(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_4;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_1;              // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F78[0x2];                                     // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue_5;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R) == 0x000128, "Wrong size on ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, EntryPoint) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CustomEvent_Tag_2) == 0x000004, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CustomEvent_Tag_2' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, Temp_struct_Variable) == 0x00001C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CustomEvent_Tag_1) == 0x000034, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CustomEvent_Tag_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CustomEvent_Tag) == 0x00003C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CustomEvent_Tag' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate_2) == 0x000044, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, Temp_struct_Variable_1) == 0x000054, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate_3) == 0x00005C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_GetGzAbilitySystemComponent_ReturnValue) == 0x000080, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_GetGzAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue) == 0x000090, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_IsValid_ReturnValue_1) == 0x000098, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1) == 0x0000A0, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_ListenForGameplayTagAddedOrRemoved_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_IsValid_ReturnValue_2) == 0x0000A8, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000AC, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_GetCurveValue_ReturnValue) == 0x0000BC, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000C0, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x0000C8, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_GetOwningComponent_ReturnValue) == 0x0000D8, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_CustomEvent_Tag_3) == 0x0000E0, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_CustomEvent_Tag_3' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, K2Node_SwitchEnum_CmpSuccess) == 0x0000E8, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue) == 0x0000EC, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue_1) == 0x0000F0, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000F8, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue_2) == 0x000100, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue_3) == 0x000104, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000108, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue_4) == 0x000110, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Array_Add_ReturnValue) == 0x000114, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Array_Add_ReturnValue_1) == 0x000118, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Array_IsEmpty_ReturnValue) == 0x00011C, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Array_IsEmpty_ReturnValue_1) == 0x00011D, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Array_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R, CallFunc_Montage_Play_ReturnValue_5) == 0x000120, "Member 'ABP_CLA_TetherArm_Base_R_C_ExecuteUbergraph_ABP_CLA_TetherArm_Base_R::CallFunc_Montage_Play_ReturnValue_5' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.GetCachedAbilityReference
// 0x0078 (0x0078 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference final
{
public:
	class UGA_SpiderMine_C*                       TetherAbility;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F79[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Temp_struct_Variable;                              // 0x0018(0x0020)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGzGameplayAbility*>             CallFunc_GetAbilitiesForInventorySlots_OutAbilities; // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7B[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGameplayAbility*                     CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGA_SpiderMine_C*                       K2Node_DynamicCast_AsGA_Spider_Mine;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7C[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference) == 0x000078, "Wrong size on ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, TetherAbility) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::TetherAbility' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, Temp_int_Array_Index_Variable) == 0x000010, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, Temp_struct_Variable) == 0x000018, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_GetAbilitiesForInventorySlots_OutAbilities) == 0x000040, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_GetAbilitiesForInventorySlots_OutAbilities' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_Array_Get_Item) == 0x000058, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, K2Node_DynamicCast_AsGA_Spider_Mine) == 0x000060, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::K2Node_DynamicCast_AsGA_Spider_Mine' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCachedAbilityReference::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.GetCurrentReloadAngle
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle final
{
public:
	double                                        MaxAllowedReloadAngle;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue_1;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle) == 0x0000C0, "Wrong size on ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, MaxAllowedReloadAngle) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::MaxAllowedReloadAngle' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, ReturnValue) == 0x000008, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_GetSocketRotation_ReturnValue) == 0x000010, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_GetForwardVector_ReturnValue) == 0x000030, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_Normal_ReturnValue) == 0x000048, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_GetSocketRotation_ReturnValue_1) == 0x000060, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_GetSocketRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_GetForwardVector_ReturnValue_1) == 0x000078, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_Normal_ReturnValue_1) == 0x000090, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000A8, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_DegAcos_ReturnValue) == 0x0000B0, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_CLA_TetherArm_Base_R_C_GetCurrentReloadAngle::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.OnTagAdded_97B05C654C386D12957811859AF1EDC1
// 0x0008 (0x0008 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1) == 0x000004, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1) == 0x000008, "Wrong size on ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1, Tag) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_OnTagAdded_97B05C654C386D12957811859AF1EDC1::Tag' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.OnTagAdded_B0C6569149E07DA36B77768CFE2194E9
// 0x0008 (0x0008 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9) == 0x000004, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9) == 0x000008, "Wrong size on ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9, Tag) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_OnTagAdded_B0C6569149E07DA36B77768CFE2194E9::Tag' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.OnTagRemoved_97B05C654C386D12957811859AF1EDC1
// 0x0008 (0x0008 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1) == 0x000004, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1) == 0x000008, "Wrong size on ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1, Tag) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_97B05C654C386D12957811859AF1EDC1::Tag' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9
// 0x0008 (0x0008 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9) == 0x000004, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9) == 0x000008, "Wrong size on ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9, Tag) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_OnTagRemoved_B0C6569149E07DA36B77768CFE2194E9::Tag' has a wrong offset!");

// Function ABP_CLA_TetherArm_Base_R.ABP_CLA_TetherArm_Base_R_C.UnHideMaterialSlots
// 0x0058 (0x0058 - 0x0000)
struct ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots final
{
public:
	TArray<int32>                                 LODs;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 Materials;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7E[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots) == 0x000008, "Wrong alignment on ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots");
static_assert(sizeof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots) == 0x000058, "Wrong size on ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, LODs) == 0x000000, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::LODs' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, Materials) == 0x000010, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::Materials' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, Temp_int_Array_Index_Variable) == 0x000020, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Array_Get_Item) == 0x000028, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Array_Length_ReturnValue_1) == 0x00002C, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, Temp_int_Loop_Counter_Variable_1) == 0x000044, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_GetOwningComponent_ReturnValue) == 0x000048, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'ABP_CLA_TetherArm_Base_R_C_UnHideMaterialSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

}

