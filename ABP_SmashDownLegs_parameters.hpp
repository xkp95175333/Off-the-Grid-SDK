#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SmashDownLegs

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.Aiming_Correction
// 0x0020 (0x0020 - 0x0000)
struct ABP_SmashDownLegs_C_Aiming_Correction final
{
public:
	struct FPoseLink                              Aim_pose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_Aiming_Correction;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_Aiming_Correction) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_Aiming_Correction");
static_assert(sizeof(ABP_SmashDownLegs_C_Aiming_Correction) == 0x000020, "Wrong size on ABP_SmashDownLegs_C_Aiming_Correction");
static_assert(offsetof(ABP_SmashDownLegs_C_Aiming_Correction, Aim_pose) == 0x000000, "Member 'ABP_SmashDownLegs_C_Aiming_Correction::Aim_pose' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_Aiming_Correction, Param_Aiming_Correction) == 0x000010, "Member 'ABP_SmashDownLegs_C_Aiming_Correction::Param_Aiming_Correction' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_AnimGraph");
static_assert(sizeof(ABP_SmashDownLegs_C_AnimGraph) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_AnimGraph");
static_assert(offsetof(ABP_SmashDownLegs_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_SmashDownLegs_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_SmashDownLegs_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SmashDownLegs_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_SmashDownLegs_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_SmashDownLegs_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_SmashDownLegs_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_SmashDownLegs_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_SmashDownLegs_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.DamagedBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_DamagedBody_CycleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_CycleState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_DamagedBody_CycleState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_DamagedBody_CycleState");
static_assert(sizeof(ABP_SmashDownLegs_C_DamagedBody_CycleState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_DamagedBody_CycleState");
static_assert(offsetof(ABP_SmashDownLegs_C_DamagedBody_CycleState, Param_DamagedBody_CycleState) == 0x000000, "Member 'ABP_SmashDownLegs_C_DamagedBody_CycleState::Param_DamagedBody_CycleState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.DamagedBody_EnterState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_DamagedBody_EnterState final
{
public:
	struct FPoseLink                              Param_DamagedBody_EnterState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_DamagedBody_EnterState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_DamagedBody_EnterState");
static_assert(sizeof(ABP_SmashDownLegs_C_DamagedBody_EnterState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_DamagedBody_EnterState");
static_assert(offsetof(ABP_SmashDownLegs_C_DamagedBody_EnterState, Param_DamagedBody_EnterState) == 0x000000, "Member 'ABP_SmashDownLegs_C_DamagedBody_EnterState::Param_DamagedBody_EnterState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.DamagedBody_ExitState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_DamagedBody_ExitState final
{
public:
	struct FPoseLink                              Param_DamagedBody_ExitState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_DamagedBody_ExitState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_DamagedBody_ExitState");
static_assert(sizeof(ABP_SmashDownLegs_C_DamagedBody_ExitState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_DamagedBody_ExitState");
static_assert(offsetof(ABP_SmashDownLegs_C_DamagedBody_ExitState, Param_DamagedBody_ExitState) == 0x000000, "Member 'ABP_SmashDownLegs_C_DamagedBody_ExitState::Param_DamagedBody_ExitState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.DamagedBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_DamagedBody_IdleState final
{
public:
	struct FPoseLink                              Param_DamagedBody_IdleState;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_DamagedBody_IdleState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_DamagedBody_IdleState");
static_assert(sizeof(ABP_SmashDownLegs_C_DamagedBody_IdleState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_DamagedBody_IdleState");
static_assert(offsetof(ABP_SmashDownLegs_C_DamagedBody_IdleState, Param_DamagedBody_IdleState) == 0x000000, "Member 'ABP_SmashDownLegs_C_DamagedBody_IdleState::Param_DamagedBody_IdleState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.ExecuteUbergraph_ABP_SmashDownLegs
// 0x0080 (0x0080 - 0x0000)
struct ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0010(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0018(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4F[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  K2Node_DynamicCast_AsGz_Multi_Part_Character;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F50[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_UpdateAnimState_Tag_Container_Gameplay_Tags; // 0x0040(0x0010)(ReferenceParm)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0050(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F51[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x005C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_3;             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F52[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0068(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_4;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F53[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs");
static_assert(sizeof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs) == 0x000080, "Wrong size on ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, EntryPoint) == 0x000000, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_GetCurveValue_ReturnValue) == 0x000008, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, Temp_struct_Variable) == 0x000010, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, Temp_struct_Variable_1) == 0x000018, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Array_Contains_ReturnValue) == 0x000020, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000028, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, K2Node_DynamicCast_AsGz_Multi_Part_Character) == 0x000030, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::K2Node_DynamicCast_AsGz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Array_Contains_ReturnValue_1) == 0x000039, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_UpdateAnimState_Tag_Container_Gameplay_Tags) == 0x000040, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_UpdateAnimState_Tag_Container_Gameplay_Tags' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, Temp_struct_Variable_2) == 0x000050, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_BooleanOR_ReturnValue) == 0x000058, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_BooleanOR_ReturnValue_1) == 0x000059, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Array_Contains_ReturnValue_2) == 0x00005A, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, Temp_struct_Variable_3) == 0x00005C, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000064, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Array_Contains_ReturnValue_3) == 0x000065, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Array_Contains_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, Temp_struct_Variable_4) == 0x000068, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Array_Contains_ReturnValue_4) == 0x000070, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Array_Contains_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'ABP_SmashDownLegs_C_ExecuteUbergraph_ABP_SmashDownLegs::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              PreAimPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        AimYaw;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimPitch;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_Aiming");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_SmashDownLegs_C_FullBody_Aiming");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_Aiming, PreAimPose) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_Aiming::PreAimPose' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_Aiming, AimYaw) == 0x000010, "Member 'ABP_SmashDownLegs_C_FullBody_Aiming::AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_Aiming, AimPitch) == 0x000018, "Member 'ABP_SmashDownLegs_C_FullBody_Aiming::AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_SmashDownLegs_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_AnimAbility
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_AnimAbility final
{
public:
	struct FPoseLink                              Param_FullBody_AnimAbility;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_AnimAbility) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_AnimAbility");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_AnimAbility) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_AnimAbility");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_AnimAbility, Param_FullBody_AnimAbility) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_AnimAbility::Param_FullBody_AnimAbility' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              Param_FullBody_CycleState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_CycleState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_CycleState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_CycleState, Param_FullBody_CycleState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_CycleState::Param_FullBody_CycleState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_FallLandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_FallLandState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLandState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_FallLandState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_FallLandState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_FallLandState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_FallLandState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_FallLandState, Param_FullBody_FallLandState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_FallLandState::Param_FullBody_FallLandState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_FallLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_FallLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_FallLoopState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_FallLoopState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_FallLoopState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_FallLoopState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_FallLoopState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_FallLoopState, Param_FullBody_FallLoopState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_FallLoopState::Param_FullBody_FallLoopState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_IdleState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_IdleState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_JumpApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_JumpApexState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpApexState;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_JumpApexState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_JumpApexState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_JumpApexState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_JumpApexState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_JumpApexState, Param_FullBody_JumpApexState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_JumpApexState::Param_FullBody_JumpApexState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_JumpStartLoopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_JumpStartLoopState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartLoopState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_JumpStartLoopState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_JumpStartLoopState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_JumpStartLoopState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_JumpStartLoopState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_JumpStartLoopState, Param_FullBody_JumpStartLoopState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_JumpStartLoopState::Param_FullBody_JumpStartLoopState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_PivotState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_PivotState final
{
public:
	struct FPoseLink                              Param_FullBody_PivotState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_PivotState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_PivotState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_PivotState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_PivotState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_PivotState, Param_FullBody_PivotState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_PivotState::Param_FullBody_PivotState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_SkeletalControls
// 0x0020 (0x0020 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_SkeletalControls final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_FullBody_SkeletalControls;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_SkeletalControls) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_SkeletalControls");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_SkeletalControls) == 0x000020, "Wrong size on ABP_SmashDownLegs_C_FullBody_SkeletalControls");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_SkeletalControls, InPose) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_SkeletalControls::InPose' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_SkeletalControls, Param_FullBody_SkeletalControls) == 0x000010, "Member 'ABP_SmashDownLegs_C_FullBody_SkeletalControls::Param_FullBody_SkeletalControls' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_StartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_StartState final
{
public:
	struct FPoseLink                              Param_FullBody_StartState;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_StartState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_StartState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_StartState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_StartState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_StartState, Param_FullBody_StartState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_StartState::Param_FullBody_StartState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBody_StopState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBody_StopState final
{
public:
	struct FPoseLink                              Param_FullBody_StopState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBody_StopState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBody_StopState");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBody_StopState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBody_StopState");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBody_StopState, Param_FullBody_StopState) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBody_StopState::Param_FullBody_StopState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.FullBodyAdditives
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_FullBodyAdditives final
{
public:
	struct FPoseLink                              Param_FullBodyAdditives;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_FullBodyAdditives) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_FullBodyAdditives");
static_assert(sizeof(ABP_SmashDownLegs_C_FullBodyAdditives) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_FullBodyAdditives");
static_assert(offsetof(ABP_SmashDownLegs_C_FullBodyAdditives, Param_FullBodyAdditives) == 0x000000, "Member 'ABP_SmashDownLegs_C_FullBodyAdditives::Param_FullBodyAdditives' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.KneeSlide_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_KneeSlide_State final
{
public:
	struct FPoseLink                              Param_KneeSlide_State;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_KneeSlide_State) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_KneeSlide_State");
static_assert(sizeof(ABP_SmashDownLegs_C_KneeSlide_State) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_KneeSlide_State");
static_assert(offsetof(ABP_SmashDownLegs_C_KneeSlide_State, Param_KneeSlide_State) == 0x000000, "Member 'ABP_SmashDownLegs_C_KneeSlide_State::Param_KneeSlide_State' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.LeftHandPose_OverrideState
// 0x0020 (0x0020 - 0x0000)
struct ABP_SmashDownLegs_C_LeftHandPose_OverrideState final
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_LeftHandPose_OverrideState;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_LeftHandPose_OverrideState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_LeftHandPose_OverrideState");
static_assert(sizeof(ABP_SmashDownLegs_C_LeftHandPose_OverrideState) == 0x000020, "Wrong size on ABP_SmashDownLegs_C_LeftHandPose_OverrideState");
static_assert(offsetof(ABP_SmashDownLegs_C_LeftHandPose_OverrideState, InputPose) == 0x000000, "Member 'ABP_SmashDownLegs_C_LeftHandPose_OverrideState::InputPose' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_LeftHandPose_OverrideState, Param_LeftHandPose_OverrideState) == 0x000010, "Member 'ABP_SmashDownLegs_C_LeftHandPose_OverrideState::Param_LeftHandPose_OverrideState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.Limbless_State
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_Limbless_State final
{
public:
	struct FPoseLink                              Param_Limbless_State;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_Limbless_State) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_Limbless_State");
static_assert(sizeof(ABP_SmashDownLegs_C_Limbless_State) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_Limbless_State");
static_assert(offsetof(ABP_SmashDownLegs_C_Limbless_State, Param_Limbless_State) == 0x000000, "Member 'ABP_SmashDownLegs_C_Limbless_State::Param_Limbless_State' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.NPC_CoverState
// 0x0010 (0x0010 - 0x0000)
struct ABP_SmashDownLegs_C_NPC_CoverState final
{
public:
	struct FPoseLink                              Param_NPC_CoverState;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_SmashDownLegs_C_NPC_CoverState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_NPC_CoverState");
static_assert(sizeof(ABP_SmashDownLegs_C_NPC_CoverState) == 0x000010, "Wrong size on ABP_SmashDownLegs_C_NPC_CoverState");
static_assert(offsetof(ABP_SmashDownLegs_C_NPC_CoverState, Param_NPC_CoverState) == 0x000000, "Member 'ABP_SmashDownLegs_C_NPC_CoverState::Param_NPC_CoverState' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.SPX_GetBaseAnimBP
// 0x0018 (0x0018 - 0x0000)
struct ABP_SmashDownLegs_C_SPX_GetBaseAnimBP final
{
public:
	class UABP_Human_C*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UABP_Human_C*                           K2Node_DynamicCast_AsABP_Human;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SmashDownLegs_C_SPX_GetBaseAnimBP) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_SPX_GetBaseAnimBP");
static_assert(sizeof(ABP_SmashDownLegs_C_SPX_GetBaseAnimBP) == 0x000018, "Wrong size on ABP_SmashDownLegs_C_SPX_GetBaseAnimBP");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetBaseAnimBP, ReturnValue) == 0x000000, "Member 'ABP_SmashDownLegs_C_SPX_GetBaseAnimBP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetBaseAnimBP, K2Node_DynamicCast_AsABP_Human) == 0x000008, "Member 'ABP_SmashDownLegs_C_SPX_GetBaseAnimBP::K2Node_DynamicCast_AsABP_Human' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetBaseAnimBP, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_SmashDownLegs_C_SPX_GetBaseAnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.SPX_GetCharacter
// 0x0018 (0x0018 - 0x0000)
struct ABP_SmashDownLegs_C_SPX_GetCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_SmashDownLegs_C_SPX_GetCharacter) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_SPX_GetCharacter");
static_assert(sizeof(ABP_SmashDownLegs_C_SPX_GetCharacter) == 0x000018, "Wrong size on ABP_SmashDownLegs_C_SPX_GetCharacter");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetCharacter, ReturnValue) == 0x000000, "Member 'ABP_SmashDownLegs_C_SPX_GetCharacter::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetCharacter, K2Node_DynamicCast_AsCharacter) == 0x000008, "Member 'ABP_SmashDownLegs_C_SPX_GetCharacter::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_SPX_GetCharacter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_SmashDownLegs_C_SPX_GetCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_SmashDownLegs.ABP_SmashDownLegs_C.UpdateAnimState
// 0x0060 (0x0060 - 0x0000)
struct ABP_SmashDownLegs_C_UpdateAnimState final
{
public:
	TArray<struct FGameplayTag>                   Param_Tag_Container_Gameplay_Tags;                 // 0x0000(0x0010)(Parm, OutParm)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F54[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_GetOwnedGameplayTags_self_CastInput;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_GetOwnedGameplayTags_TagContainer;        // 0x0030(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(ABP_SmashDownLegs_C_UpdateAnimState) == 0x000008, "Wrong alignment on ABP_SmashDownLegs_C_UpdateAnimState");
static_assert(sizeof(ABP_SmashDownLegs_C_UpdateAnimState) == 0x000060, "Wrong size on ABP_SmashDownLegs_C_UpdateAnimState");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, Param_Tag_Container_Gameplay_Tags) == 0x000000, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::Param_Tag_Container_Gameplay_Tags' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, CallFunc_GetOwnedGameplayTags_self_CastInput) == 0x000020, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::CallFunc_GetOwnedGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, CallFunc_GetOwnedGameplayTags_TagContainer) == 0x000030, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::CallFunc_GetOwnedGameplayTags_TagContainer' has a wrong offset!");
static_assert(offsetof(ABP_SmashDownLegs_C_UpdateAnimState, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000050, "Member 'ABP_SmashDownLegs_C_UpdateAnimState::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");

}

