#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCamCore

#include "Basic.hpp"

#include "VCamCore_classes.hpp"
#include "VCamCore_parameters.hpp"


namespace SDK
{

// Function VCamCore.GameplayViewTargetPolicy.DeterminePlayerControllers
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDeterminePlayerControllersTargetPolicyParamsParams_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class APlayerController*>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerController*> UGameplayViewTargetPolicy::DeterminePlayerControllers(const struct FDeterminePlayerControllersTargetPolicyParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayViewTargetPolicy", "DeterminePlayerControllers");

	Params::GameplayViewTargetPolicy_DeterminePlayerControllers Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.GameplayViewTargetPolicy.UpdateViewTarget
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FUpdateViewTargetPolicyParams    Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameplayViewTargetPolicy::UpdateViewTarget(const struct FUpdateViewTargetPolicyParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayViewTargetPolicy", "UpdateViewTarget");

	Params::GameplayViewTargetPolicy_UpdateViewTarget Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.AddInputProfileWithCurrentlyActiveMappings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ProfileName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateIfProfileAlreadyExists                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::AddInputProfileWithCurrentlyActiveMappings(const class FName ProfileName, bool bUpdateIfProfileAlreadyExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "AddInputProfileWithCurrentlyActiveMappings");

	Params::VCamComponent_AddInputProfileWithCurrentlyActiveMappings Parms{};

	Parms.ProfileName = ProfileName;
	Parms.bUpdateIfProfileAlreadyExists = bUpdateIfProfileAlreadyExists;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.AddModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UVCamModifier>        ModifierClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    CreatedModifier                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::AddModifier(const class FName Param_Name, TSubclassOf<class UVCamModifier> ModifierClass, class UVCamModifier** CreatedModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "AddModifier");

	Params::VCamComponent_AddModifier Parms{};

	Parms.Param_Name = Param_Name;
	Parms.ModifierClass = ModifierClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatedModifier != nullptr)
		*CreatedModifier = Parms.CreatedModifier;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.AddOutputProvider
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UVCamOutputProviderBase>ProviderClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamOutputProviderBase*          CreatedProvider                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::AddOutputProvider(TSubclassOf<class UVCamOutputProviderBase> ProviderClass, class UVCamOutputProviderBase** CreatedProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "AddOutputProvider");

	Params::VCamComponent_AddOutputProvider Parms{};

	Parms.ProviderClass = ProviderClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatedProvider != nullptr)
		*CreatedProvider = Parms.CreatedProvider;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetLiveLinkDataForCurrentFrame
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLiveLinkCameraBlueprintData     LiveLinkData                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::GetLiveLinkDataForCurrentFrame(struct FLiveLinkCameraBlueprintData* LiveLinkData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetLiveLinkDataForCurrentFrame");

	Params::VCamComponent_GetLiveLinkDataForCurrentFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LiveLinkData != nullptr)
		*LiveLinkData = std::move(Parms.LiveLinkData);

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.InjectInputForAction
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionValue                RawValue                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class UInputModifier*>           Modifiers                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UInputTrigger*>            Triggers                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVCamComponent::InjectInputForAction(const class UInputAction* Action, const struct FInputActionValue& RawValue, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "InjectInputForAction");

	Params::VCamComponent_InjectInputForAction Parms{};

	Parms.Action = Action;
	Parms.RawValue = std::move(RawValue);
	Parms.Modifiers = std::move(Modifiers);
	Parms.Triggers = std::move(Triggers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.InjectInputVectorForAction
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputModifier*>           Modifiers                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UInputTrigger*>            Triggers                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVCamComponent::InjectInputVectorForAction(const class UInputAction* Action, const struct FVector& Value, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "InjectInputVectorForAction");

	Params::VCamComponent_InjectInputVectorForAction Parms{};

	Parms.Action = Action;
	Parms.Value = std::move(Value);
	Parms.Modifiers = std::move(Modifiers);
	Parms.Triggers = std::move(Triggers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.InsertModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UVCamModifier>        ModifierClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    CreatedModifier                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::InsertModifier(const class FName Param_Name, int32 Param_Index, TSubclassOf<class UVCamModifier> ModifierClass, class UVCamModifier** CreatedModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "InsertModifier");

	Params::VCamComponent_InsertModifier Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Param_Index = Param_Index;
	Parms.ModifierClass = ModifierClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatedModifier != nullptr)
		*CreatedModifier = Parms.CreatedModifier;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.InsertOutputProvider
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UVCamOutputProviderBase>ProviderClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamOutputProviderBase*          CreatedProvider                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::InsertOutputProvider(int32 Param_Index, TSubclassOf<class UVCamOutputProviderBase> ProviderClass, class UVCamOutputProviderBase** CreatedProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "InsertOutputProvider");

	Params::VCamComponent_InsertOutputProvider Parms{};

	Parms.Param_Index = Param_Index;
	Parms.ProviderClass = ProviderClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatedProvider != nullptr)
		*CreatedProvider = Parms.CreatedProvider;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.RegisterObjectForInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::RegisterObjectForInput(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RegisterObjectForInput");

	Params::VCamComponent_RegisterObjectForInput Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.RemoveAllModifiers
// (Final, Native, Public, BlueprintCallable)

void UVCamComponent::RemoveAllModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveAllModifiers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.RemoveAllOutputProviders
// (Final, Native, Public, BlueprintCallable)

void UVCamComponent::RemoveAllOutputProviders()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveAllOutputProviders");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.RemoveModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVCamModifier*                    Modifier                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::RemoveModifier(const class UVCamModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveModifier");

	Params::VCamComponent_RemoveModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.RemoveModifierByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ModifierIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::RemoveModifierByIndex(const int32 ModifierIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveModifierByIndex");

	Params::VCamComponent_RemoveModifierByIndex Parms{};

	Parms.ModifierIndex = ModifierIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.RemoveModifierByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::RemoveModifierByName(const class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveModifierByName");

	Params::VCamComponent_RemoveModifierByName Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.RemoveOutputProvider
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVCamOutputProviderBase*          Provider                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::RemoveOutputProvider(const class UVCamOutputProviderBase* Provider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveOutputProvider");

	Params::VCamComponent_RemoveOutputProvider Parms{};

	Parms.Provider = Provider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.RemoveOutputProviderByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ProviderIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::RemoveOutputProviderByIndex(const int32 ProviderIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "RemoveOutputProviderByIndex");

	Params::VCamComponent_RemoveOutputProviderByIndex Parms{};

	Parms.ProviderIndex = ProviderIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.SetDisableComponentWhenSpawnedBySequencer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetDisableComponentWhenSpawnedBySequencer(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetDisableComponentWhenSpawnedBySequencer");

	Params::VCamComponent_SetDisableComponentWhenSpawnedBySequencer Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetDisableOutputOnMultiUserReceiver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetDisableOutputOnMultiUserReceiver(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetDisableOutputOnMultiUserReceiver");

	Params::VCamComponent_SetDisableOutputOnMultiUserReceiver Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetEnabled");

	Params::VCamComponent_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetInputDeviceSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVCamInputDeviceConfig           NewInputProfile                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVCamComponent::SetInputDeviceSettings(const struct FVCamInputDeviceConfig& NewInputProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetInputDeviceSettings");

	Params::VCamComponent_SetInputDeviceSettings Parms{};

	Parms.NewInputProfile = std::move(NewInputProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetInputProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVCamInputProfile                NewInputProfile                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVCamComponent::SetInputProfile(const struct FVCamInputProfile& NewInputProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetInputProfile");

	Params::VCamComponent_SetInputProfile Parms{};

	Parms.NewInputProfile = std::move(NewInputProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetInputProfileFromName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ProfileName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::SetInputProfileFromName(const class FName ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetInputProfileFromName");

	Params::VCamComponent_SetInputProfileFromName Parms{};

	Parms.ProfileName = ProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.SetLiveLinkSubobject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FLiveLinkSubjectName             Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetLiveLinkSubobject(const struct FLiveLinkSubjectName& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetLiveLinkSubobject");

	Params::VCamComponent_SetLiveLinkSubobject Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.SetModifierContextClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UVCamModifierContext> ContextClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifierContext*             CreatedContext                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetModifierContextClass(TSubclassOf<class UVCamModifierContext> ContextClass, class UVCamModifierContext** CreatedContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetModifierContextClass");

	Params::VCamComponent_SetModifierContextClass Parms{};

	Parms.ContextClass = ContextClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatedContext != nullptr)
		*CreatedContext = Parms.CreatedContext;
}


// Function VCamCore.VCamComponent.SetModifierIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   OriginalIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::SetModifierIndex(int32 OriginalIndex, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetModifierIndex");

	Params::VCamComponent_SetModifierIndex Parms{};

	Parms.OriginalIndex = OriginalIndex;
	Parms.NewIndex = NewIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.SetOutputProviderIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   OriginalIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::SetOutputProviderIndex(int32 OriginalIndex, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetOutputProviderIndex");

	Params::VCamComponent_SetOutputProviderIndex Parms{};

	Parms.OriginalIndex = OriginalIndex;
	Parms.NewIndex = NewIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.SetRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::SetRole(const struct FGameplayTag& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SetRole");

	Params::VCamComponent_SetRole Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamComponent.GetAllModifierNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UVCamComponent::GetAllModifierNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetAllModifierNames");

	Params::VCamComponent_GetAllModifierNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetAllModifiers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UVCamModifier*>            Modifiers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVCamComponent::GetAllModifiers(TArray<class UVCamModifier*>* Modifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetAllModifiers");

	Params::VCamComponent_GetAllModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Modifiers != nullptr)
		*Modifiers = std::move(Parms.Modifiers);
}


// Function VCamCore.VCamComponent.GetAllOutputProviders
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UVCamOutputProviderBase*>  Providers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVCamComponent::GetAllOutputProviders(TArray<class UVCamOutputProviderBase*>* Providers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetAllOutputProviders");

	Params::VCamComponent_GetAllOutputProviders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Providers != nullptr)
		*Providers = std::move(Parms.Providers);
}


// Function VCamCore.VCamComponent.GetAllPlayerMappableActionKeyMappings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FEnhancedActionKeyMapping>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FEnhancedActionKeyMapping> UVCamComponent::GetAllPlayerMappableActionKeyMappings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetAllPlayerMappableActionKeyMappings");

	Params::VCamComponent_GetAllPlayerMappableActionKeyMappings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetDisableComponentWhenSpawnedBySequencer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::GetDisableComponentWhenSpawnedBySequencer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetDisableComponentWhenSpawnedBySequencer");

	Params::VCamComponent_GetDisableComponentWhenSpawnedBySequencer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetDisableOutputOnMultiUserReceiver
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::GetDisableOutputOnMultiUserReceiver() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetDisableOutputOnMultiUserReceiver");

	Params::VCamComponent_GetDisableOutputOnMultiUserReceiver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetInputDeviceSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVCamInputDeviceConfig     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FVCamInputDeviceConfig UVCamComponent::GetInputDeviceSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetInputDeviceSettings");

	Params::VCamComponent_GetInputDeviceSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetInputProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVCamInputProfile          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FVCamInputProfile UVCamComponent::GetInputProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetInputProfile");

	Params::VCamComponent_GetInputProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetInputVCamSubsystem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInputVCamSubsystem*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputVCamSubsystem* UVCamComponent::GetInputVCamSubsystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetInputVCamSubsystem");

	Params::VCamComponent_GetInputVCamSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetLiveLinkSubobject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLiveLinkSubjectName             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLiveLinkSubjectName UVCamComponent::GetLiveLinkSubobject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetLiveLinkSubobject");

	Params::VCamComponent_GetLiveLinkSubobject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetModifierByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamModifier* UVCamComponent::GetModifierByIndex(const int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetModifierByIndex");

	Params::VCamComponent_GetModifierByIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetModifierByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamModifier* UVCamComponent::GetModifierByName(const class FName Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetModifierByName");

	Params::VCamComponent_GetModifierByName Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetModifierContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVCamModifierContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamModifierContext* UVCamComponent::GetModifierContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetModifierContext");

	Params::VCamComponent_GetModifierContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetModifiersByClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UVCamModifier>        ModifierClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVCamModifier*>            FoundModifiers                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVCamComponent::GetModifiersByClass(TSubclassOf<class UVCamModifier> ModifierClass, TArray<class UVCamModifier*>* FoundModifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetModifiersByClass");

	Params::VCamComponent_GetModifiersByClass Parms{};

	Parms.ModifierClass = ModifierClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundModifiers != nullptr)
		*FoundModifiers = std::move(Parms.FoundModifiers);
}


// Function VCamCore.VCamComponent.GetModifiersByInterface
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class IInterface>           InterfaceClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVCamModifier*>            FoundModifiers                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVCamComponent::GetModifiersByInterface(TSubclassOf<class IInterface> InterfaceClass, TArray<class UVCamModifier*>* FoundModifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetModifiersByInterface");

	Params::VCamComponent_GetModifiersByInterface Parms{};

	Parms.InterfaceClass = InterfaceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundModifiers != nullptr)
		*FoundModifiers = std::move(Parms.FoundModifiers);
}


// Function VCamCore.VCamComponent.GetNumberOfModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCamComponent::GetNumberOfModifiers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetNumberOfModifiers");

	Params::VCamComponent_GetNumberOfModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetNumberOfOutputProviders
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCamComponent::GetNumberOfOutputProviders() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetNumberOfOutputProviders");

	Params::VCamComponent_GetNumberOfOutputProviders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetOutputProviderByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ProviderIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamOutputProviderBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamOutputProviderBase* UVCamComponent::GetOutputProviderByIndex(const int32 ProviderIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetOutputProviderByIndex");

	Params::VCamComponent_GetOutputProviderByIndex Parms{};

	Parms.ProviderIndex = ProviderIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetOutputProvidersByClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UVCamOutputProviderBase>ProviderClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVCamOutputProviderBase*>  FoundProviders                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVCamComponent::GetOutputProvidersByClass(TSubclassOf<class UVCamOutputProviderBase> ProviderClass, TArray<class UVCamOutputProviderBase*>* FoundProviders) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetOutputProvidersByClass");

	Params::VCamComponent_GetOutputProvidersByClass Parms{};

	Parms.ProviderClass = ProviderClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundProviders != nullptr)
		*FoundProviders = std::move(Parms.FoundProviders);
}


// Function VCamCore.VCamComponent.GetPlayerMappableKeys
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FEnhancedActionKeyMapping>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FEnhancedActionKeyMapping> UVCamComponent::GetPlayerMappableKeys() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetPlayerMappableKeys");

	Params::VCamComponent_GetPlayerMappableKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetPlayerMappedKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MappingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UVCamComponent::GetPlayerMappedKey(const class FName MappingName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetPlayerMappedKey");

	Params::VCamComponent_GetPlayerMappedKey Parms{};

	Parms.MappingName = MappingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVCamComponent::GetRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetRole");

	Params::VCamComponent_GetRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetSubsystemArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UVCamSubsystem>       Param_Class                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVCamSubsystem*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UVCamSubsystem*> UVCamComponent::GetSubsystemArray(const TSubclassOf<class UVCamSubsystem>& Param_Class) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetSubsystemArray");

	Params::VCamComponent_GetSubsystemArray Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.GetTargetCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCineCameraComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCineCameraComponent* UVCamComponent::GetTargetCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "GetTargetCamera");

	Params::VCamComponent_GetTargetCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "IsEnabled");

	Params::VCamComponent_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.SaveCurrentInputProfileToSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ProfileName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamComponent::SaveCurrentInputProfileToSettings(const class FName ProfileName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "SaveCurrentInputProfileToSettings");

	Params::VCamComponent_SaveCurrentInputProfileToSettings Parms{};

	Parms.ProfileName = ProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamComponent.UnregisterObjectForInput
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamComponent::UnregisterObjectForInput(class UObject* Object) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamComponent", "UnregisterObjectForInput");

	Params::VCamComponent_UnregisterObjectForInput Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamSubsystem.GetVCamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVCamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamComponent* UVCamSubsystem::GetVCamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamSubsystem", "GetVCamComponent");

	Params::VCamSubsystem_GetVCamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamOutputProviderCreatedWidget.ReceiveOutputProvider
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVCamReceiveOutputProviderData   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IVCamOutputProviderCreatedWidget::ReceiveOutputProvider(const struct FVCamReceiveOutputProviderData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderCreatedWidget", "ReceiveOutputProvider");

	Params::VCamOutputProviderCreatedWidget_ReceiveOutputProvider Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamBaseActor.GetVCamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVCamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamComponent* AVCamBaseActor::GetVCamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBaseActor", "GetVCamComponent");

	Params::VCamBaseActor_GetVCamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamInputSettings.GetVCamInputSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVCamInputSettings*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamInputSettings* UVCamInputSettings::GetVCamInputSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamInputSettings", "GetVCamInputSettings");

	Params::VCamInputSettings_GetVCamInputSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamInputSettings.SetDefaultInputProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewDefaultInputProfile                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamInputSettings::SetDefaultInputProfile(const class FName NewDefaultInputProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamInputSettings", "SetDefaultInputProfile");

	Params::VCamInputSettings_SetDefaultInputProfile Parms{};

	Parms.NewDefaultInputProfile = NewDefaultInputProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamInputSettings.SetInputProfiles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FVCamInputProfile>NewInputProfiles                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVCamInputSettings::SetInputProfiles(const TMap<class FName, struct FVCamInputProfile>& NewInputProfiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamInputSettings", "SetInputProfiles");

	Params::VCamInputSettings_SetInputProfiles Parms{};

	Parms.NewInputProfiles = std::move(NewInputProfiles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamInputSettings.GetInputProfileNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UVCamInputSettings::GetInputProfileNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamInputSettings", "GetInputProfileNames");

	Params::VCamInputSettings_GetInputProfileNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamModifier.GetCurrentLiveLinkDataFromOwningComponent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLiveLinkCameraBlueprintData     LiveLinkData                                           (Parm, OutParm, NativeAccessSpecifierPublic)

void UVCamModifier::GetCurrentLiveLinkDataFromOwningComponent(struct FLiveLinkCameraBlueprintData* LiveLinkData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "GetCurrentLiveLinkDataFromOwningComponent");

	Params::VCamModifier_GetCurrentLiveLinkDataFromOwningComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LiveLinkData != nullptr)
		*LiveLinkData = std::move(Parms.LiveLinkData);
}


// Function VCamCore.VCamModifier.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamModifier::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "SetEnabled");

	Params::VCamModifier_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamModifier.SetStackEntryName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamModifier::SetStackEntryName(class FName NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "SetStackEntryName");

	Params::VCamModifier_SetStackEntryName Parms{};

	Parms.NewName = NewName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamModifier.GetOwningVCamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVCamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamComponent* UVCamModifier::GetOwningVCamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "GetOwningVCamComponent");

	Params::VCamModifier_GetOwningVCamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamModifier.GetStackEntryName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVCamModifier::GetStackEntryName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "GetStackEntryName");

	Params::VCamModifier_GetStackEntryName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamModifier.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamModifier::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamModifier", "IsEnabled");

	Params::VCamModifier_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamBlueprintModifier.OnApply
// (Event, Public, BlueprintEvent)
// Parameters:
// class UVCamModifierContext*             Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCineCameraComponent*             CameraComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintModifier::OnApply(class UVCamModifierContext* Context, class UCineCameraComponent* CameraComponent, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBlueprintModifier", "OnApply");

	Params::VCamBlueprintModifier_OnApply Parms{};

	Parms.Context = Context;
	Parms.CameraComponent = CameraComponent;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VCamCore.VCamBlueprintModifier.OnDeinitialize
// (Event, Public, BlueprintEvent)

void UVCamBlueprintModifier::OnDeinitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBlueprintModifier", "OnDeinitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VCamCore.VCamBlueprintModifier.OnInitialize
// (Event, Public, BlueprintEvent)
// Parameters:
// class UVCamModifierContext*             Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamBlueprintModifier::OnInitialize(class UVCamModifierContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBlueprintModifier", "OnInitialize");

	Params::VCamBlueprintModifier_OnInitialize Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VCamCore.VCamBlueprintModifier.GetInputMappingContextAndPriority
// (Event, Public, BlueprintEvent, Const)

void UVCamBlueprintModifier::GetInputMappingContextAndPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamBlueprintModifier", "GetInputMappingContextAndPriority");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction VCamCore.VCamOutputProviderBase.ActivationDelegate_Blueprint__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bNewIsActive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamOutputProviderBase::ActivationDelegate_Blueprint__DelegateSignature(bool bNewIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "ActivationDelegate_Blueprint__DelegateSignature");

	Params::VCamOutputProviderBase_ActivationDelegate_Blueprint__DelegateSignature Parms{};

	Parms.bNewIsActive = bNewIsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VCamCore.VCamOutputProviderBase.SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInActive                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamOutputProviderBase::SetActive(const bool bInActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "SetActive");

	Params::VCamOutputProviderBase_SetActive Parms{};

	Parms.bInActive = bInActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamOutputProviderBase.SetTargetViewport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVCamTargetViewportID                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamOutputProviderBase::SetTargetViewport(EVCamTargetViewportID Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "SetTargetViewport");

	Params::VCamOutputProviderBase_SetTargetViewport Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamOutputProviderBase.SetUMGClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          InUMGClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamOutputProviderBase::SetUMGClass(const TSubclassOf<class UUserWidget> InUMGClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "SetUMGClass");

	Params::VCamOutputProviderBase_SetUMGClass Parms{};

	Parms.InUMGClass = InUMGClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamOutputProviderBase.GetTargetViewport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVCamTargetViewportID                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVCamTargetViewportID UVCamOutputProviderBase::GetTargetViewport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "GetTargetViewport");

	Params::VCamOutputProviderBase_GetTargetViewport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamOutputProviderBase.GetUMGClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> UVCamOutputProviderBase::GetUMGClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "GetUMGClass");

	Params::VCamOutputProviderBase_GetUMGClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamOutputProviderBase.GetVCamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVCamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamComponent* UVCamOutputProviderBase::GetVCamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "GetVCamComponent");

	Params::VCamOutputProviderBase_GetVCamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamOutputProviderBase.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamOutputProviderBase::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "IsActive");

	Params::VCamOutputProviderBase_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamOutputProviderBase.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamOutputProviderBase::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamOutputProviderBase", "IsInitialized");

	Params::VCamOutputProviderBase_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction VCamCore.VCamWidget.ConnectionsReinitializedDelegate_Blueprint__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UVCamWidget::ConnectionsReinitializedDelegate_Blueprint__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "ConnectionsReinitializedDelegate_Blueprint__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VCamCore.VCamWidget.OnConnectionUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             ConnectionName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDidConnectSuccessfully                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ModifierConnectionPointName                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    ConnectedModifier                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     ConnectedAction                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamWidget::OnConnectionUpdated(class FName ConnectionName, bool bDidConnectSuccessfully, class FName ModifierConnectionPointName, class UVCamModifier* ConnectedModifier, class UInputAction* ConnectedAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "OnConnectionUpdated");

	Params::VCamWidget_OnConnectionUpdated Parms{};

	Parms.ConnectionName = ConnectionName;
	Parms.bDidConnectSuccessfully = bDidConnectSuccessfully;
	Parms.ModifierConnectionPointName = ModifierConnectionPointName;
	Parms.ConnectedModifier = ConnectedModifier;
	Parms.ConnectedAction = ConnectedAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VCamCore.VCamWidget.OnInitializeConnections
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UVCamComponent*                   VCam                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamWidget::OnInitializeConnections(class UVCamComponent* VCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "OnInitializeConnections");

	Params::VCamWidget_OnInitializeConnections Parms{};

	Parms.VCam = VCam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamWidget.PostConnectionsInitialized
// (Event, Public, BlueprintEvent)

void UVCamWidget::PostConnectionsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "PostConnectionsInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VCamCore.VCamWidget.ReinitializeConnections
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamWidget::ReinitializeConnections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "ReinitializeConnections");

	Params::VCamWidget_ReinitializeConnections Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamWidget.UpdateConnectionTargets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FVCamConnectionTargetSettings>NewConnectionTargets                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReinitializeOnSuccessfulUpdate                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EConnectionUpdateResult                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamWidget::UpdateConnectionTargets(const TMap<class FName, struct FVCamConnectionTargetSettings>& NewConnectionTargets, const bool bReinitializeOnSuccessfulUpdate, EConnectionUpdateResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamWidget", "UpdateConnectionTargets");

	Params::VCamWidget_UpdateConnectionTargets Parms{};

	Parms.NewConnectionTargets = std::move(NewConnectionTargets);
	Parms.bReinitializeOnSuccessfulUpdate = bReinitializeOnSuccessfulUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function VCamCore.VCamStateSwitcherWidget.K2_SetCurrentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCamStateSwitcherWidget::K2_SetCurrentState(class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamStateSwitcherWidget", "K2_SetCurrentState");

	Params::VCamStateSwitcherWidget_K2_SetCurrentState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VCamCore.VCamStateSwitcherWidget.SetCurrentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUpdate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeConnections                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamStateSwitcherWidget::SetCurrentState(class FName NewState, bool bForceUpdate, bool bReinitializeConnections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamStateSwitcherWidget", "SetCurrentState");

	Params::VCamStateSwitcherWidget_SetCurrentState Parms{};

	Parms.NewState = NewState;
	Parms.bForceUpdate = bForceUpdate;
	Parms.bReinitializeConnections = bReinitializeConnections;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamStateSwitcherWidget.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVCamStateSwitcherWidget::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamStateSwitcherWidget", "GetCurrentState");

	Params::VCamStateSwitcherWidget_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamStateSwitcherWidget.GetStateInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVCamWidgetConnectionState       OutStateInfo                                           (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamStateSwitcherWidget::GetStateInfo(class FName State, struct FVCamWidgetConnectionState* OutStateInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamStateSwitcherWidget", "GetStateInfo");

	Params::VCamStateSwitcherWidget_GetStateInfo Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStateInfo != nullptr)
		*OutStateInfo = std::move(Parms.OutStateInfo);

	return Parms.ReturnValue;
}


// Function VCamCore.VCamStateSwitcherWidget.GetStates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UVCamStateSwitcherWidget::GetStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCamStateSwitcherWidget", "GetStates");

	Params::VCamStateSwitcherWidget_GetStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectedInputAction_VCamConnection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVCamConnection                  Connection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInputAction*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputAction* UVCamUIFunctionLibrary::GetConnectedInputAction_VCamConnection(const struct FVCamConnection& Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectedInputAction_VCamConnection");

	Params::VCamUIFunctionLibrary_GetConnectedInputAction_VCamConnection Parms{};

	Parms.Connection = std::move(Connection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectedInputAction_VCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVCamWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     OutInputAction                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::GetConnectedInputAction_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class UInputAction** OutInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectedInputAction_VCamWidget");

	Params::VCamUIFunctionLibrary_GetConnectedInputAction_VCamWidget Parms{};

	Parms.Widget = Widget;
	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInputAction != nullptr)
		*OutInputAction = Parms.OutInputAction;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectedModifier_VCamConnection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVCamConnection                  Connection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVCamModifier*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamModifier* UVCamUIFunctionLibrary::GetConnectedModifier_VCamConnection(const struct FVCamConnection& Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectedModifier_VCamConnection");

	Params::VCamUIFunctionLibrary_GetConnectedModifier_VCamConnection Parms{};

	Parms.Connection = std::move(Connection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectedModifier_VCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVCamWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamModifier*                    OutModifier                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::GetConnectedModifier_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class UVCamModifier** OutModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectedModifier_VCamWidget");

	Params::VCamUIFunctionLibrary_GetConnectedModifier_VCamWidget Parms{};

	Parms.Widget = Widget;
	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutModifier != nullptr)
		*OutModifier = Parms.OutModifier;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectionByName_VCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVCamWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVCamConnection                  OutConnection                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::GetConnectionByName_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, struct FVCamConnection* OutConnection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectionByName_VCamWidget");

	Params::VCamUIFunctionLibrary_GetConnectionByName_VCamWidget Parms{};

	Parms.Widget = Widget;
	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConnection != nullptr)
		*OutConnection = std::move(Parms.OutConnection);

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectionPointName_VCamConnection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVCamConnection                  Connection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVCamUIFunctionLibrary::GetConnectionPointName_VCamConnection(const struct FVCamConnection& Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectionPointName_VCamConnection");

	Params::VCamUIFunctionLibrary_GetConnectionPointName_VCamConnection Parms{};

	Parms.Connection = std::move(Connection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.GetConnectionPointName_VCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVCamWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OutConnectionPointName                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::GetConnectionPointName_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class FName* OutConnectionPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "GetConnectionPointName_VCamWidget");

	Params::VCamUIFunctionLibrary_GetConnectionPointName_VCamWidget Parms{};

	Parms.Widget = Widget;
	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConnectionPointName != nullptr)
		*OutConnectionPointName = Parms.OutConnectionPointName;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.IsConnected_VCamConnection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVCamConnection                  Connection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::IsConnected_VCamConnection(const struct FVCamConnection& Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "IsConnected_VCamConnection");

	Params::VCamUIFunctionLibrary_IsConnected_VCamConnection Parms{};

	Parms.Connection = std::move(Connection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.VCamUIFunctionLibrary.IsConnected_VCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVCamWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutIsConnected                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCamUIFunctionLibrary::IsConnected_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, bool* bOutIsConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCamUIFunctionLibrary", "IsConnected_VCamWidget");

	Params::VCamUIFunctionLibrary_IsConnected_VCamWidget Parms{};

	Parms.Widget = Widget;
	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutIsConnected != nullptr)
		*bOutIsConnected = Parms.bOutIsConnected;

	return Parms.ReturnValue;
}


// Function VCamCore.WidgetReferenceBlueprintFunctionLibrary.ResolveVCamWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVCamChildWidgetReference        WidgetReference                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UUserWidget*                      OwnerWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCamWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVCamWidget* UWidgetReferenceBlueprintFunctionLibrary::ResolveVCamWidget(const struct FVCamChildWidgetReference& WidgetReference, class UUserWidget* OwnerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetReferenceBlueprintFunctionLibrary", "ResolveVCamWidget");

	Params::WidgetReferenceBlueprintFunctionLibrary_ResolveVCamWidget Parms{};

	Parms.WidgetReference = std::move(WidgetReference);
	Parms.OwnerWidget = OwnerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VCamCore.WidgetReferenceBlueprintFunctionLibrary.ResolveWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FChildWidgetReference            WidgetReference                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UUserWidget*                      OwnerWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UWidgetReferenceBlueprintFunctionLibrary::ResolveWidget(const struct FChildWidgetReference& WidgetReference, class UUserWidget* OwnerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetReferenceBlueprintFunctionLibrary", "ResolveWidget");

	Params::WidgetReferenceBlueprintFunctionLibrary_ResolveWidget Parms{};

	Parms.WidgetReference = std::move(WidgetReference);
	Parms.OwnerWidget = OwnerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

