#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MultiUserClientLibrary

#include "Basic.hpp"

#include "Concert_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ConcertReplicationScripting_structs.hpp"


namespace SDK
{

// Enum MultiUserClientLibrary.EMultiUserClientStatus
// NumValues: 0x0004
enum class EMultiUserClientStatus : uint8
{
	Connected                                = 0,
	Disconnected                             = 1,
	Updated                                  = 2,
	EMultiUserClientStatus_MAX               = 3,
};

// Enum MultiUserClientLibrary.EMultiUserObjectReplicationMode
// NumValues: 0x0003
enum class EMultiUserObjectReplicationMode : uint8
{
	SpecifiedRate                            = 0,
	Realtime                                 = 1,
	EMultiUserObjectReplicationMode_MAX      = 2,
};

// Enum MultiUserClientLibrary.EMultiUserPropertyChangeType
// NumValues: 0x0004
enum class EMultiUserPropertyChangeType : uint8
{
	Put                                      = 0,
	Add                                      = 1,
	Remove                                   = 2,
	EMultiUserPropertyChangeType_MAX         = 3,
};

// Enum MultiUserClientLibrary.EMultiUserChangeAuthorityOperationResult
// NumValues: 0x000C
enum class EMultiUserChangeAuthorityOperationResult : uint8
{
	Success                                  = 0,
	NoChanges                                = 1,
	RejectedFullyOrPartially                 = 2,
	Timeout                                  = 3,
	CancelledDueToStreamUpdate               = 4,
	Cancelled                                = 5,
	FailedToSendRequest                      = 6,
	NotInSession                             = 7,
	UnknownClient                            = 8,
	NotOnGameThread                          = 9,
	NotAvailable                             = 10,
	EMultiUserChangeAuthorityOperationResult_MAX = 11,
};

// Enum MultiUserClientLibrary.EMultiUserChangeFrequencyErrorCode
// NumValues: 0x0004
enum class EMultiUserChangeFrequencyErrorCode : uint8
{
	UnregisteredStream                       = 0,
	InvalidReplicationRate                   = 1,
	Count                                    = 2,
	EMultiUserChangeFrequencyErrorCode_MAX   = 3,
};

// Enum MultiUserClientLibrary.EMultiUserPutObjectErrorCode
// NumValues: 0x0004
enum class EMultiUserPutObjectErrorCode : uint8
{
	UnresolvedStream                         = 0,
	MissingData                              = 1,
	Count                                    = 2,
	EMultiUserPutObjectErrorCode_MAX         = 3,
};

// Enum MultiUserClientLibrary.EMultiUserChangeStreamOperationResult
// NumValues: 0x000B
enum class EMultiUserChangeStreamOperationResult : uint8
{
	Success                                  = 0,
	NoChanges                                = 1,
	Rejected                                 = 2,
	Timeout                                  = 3,
	Cancelled                                = 4,
	FailedToSendRequest                      = 5,
	NotInSession                             = 6,
	UnknownClient                            = 7,
	NotOnGameThread                          = 8,
	NotAvailable                             = 9,
	EMultiUserChangeStreamOperationResult_MAX = 10,
};

// Enum MultiUserClientLibrary.EMultiUserConnectionError
// NumValues: 0x000B
enum class EMultiUserConnectionError : uint32
{
	None                                     = 0,
	Canceled                                 = 1,
	ConnectionAttemptAborted                 = 2,
	ServerNotResponding                      = 3,
	ServerError                              = 4,
	WorkspaceValidationUnknown               = 100,
	SourceControlValidationUnknown           = 110,
	SourceControlValidationCanceled          = 111,
	SourceControlValidationError             = 112,
	DirtyPackageValidationError              = 113,
	EMultiUserConnectionError_MAX            = 114,
};

// Enum MultiUserClientLibrary.EMultiUserSourceValidationMode
// NumValues: 0x0004
enum class EMultiUserSourceValidationMode : uint8
{
	Hard                                     = 0,
	Soft                                     = 1,
	SoftAutoProceed                          = 2,
	EMultiUserSourceValidationMode_MAX       = 3,
};

// Enum MultiUserClientLibrary.EMultiUserConnectionStatus
// NumValues: 0x0005
enum class EMultiUserConnectionStatus : uint8
{
	Connecting                               = 0,
	Connected                                = 1,
	Disconnecting                            = 2,
	Disconnected                             = 3,
	EMultiUserConnectionStatus_MAX           = 4,
};

// ScriptStruct MultiUserClientLibrary.MultiUserPropertyChange
// 0x0018 (0x0018 - 0x0000)
struct FMultiUserPropertyChange final
{
public:
	TArray<struct FConcertPropertyChainWrapper>   Properties;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EMultiUserPropertyChangeType                  ChangeType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47D8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserPropertyChange) == 0x000008, "Wrong alignment on FMultiUserPropertyChange");
static_assert(sizeof(FMultiUserPropertyChange) == 0x000018, "Wrong size on FMultiUserPropertyChange");
static_assert(offsetof(FMultiUserPropertyChange, Properties) == 0x000000, "Member 'FMultiUserPropertyChange::Properties' has a wrong offset!");
static_assert(offsetof(FMultiUserPropertyChange, ChangeType) == 0x000010, "Member 'FMultiUserPropertyChange::ChangeType' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserObjectReplicationSettings
// 0x0002 (0x0002 - 0x0000)
struct FMultiUserObjectReplicationSettings final
{
public:
	EMultiUserObjectReplicationMode               Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReplicationRate;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserObjectReplicationSettings) == 0x000001, "Wrong alignment on FMultiUserObjectReplicationSettings");
static_assert(sizeof(FMultiUserObjectReplicationSettings) == 0x000002, "Wrong size on FMultiUserObjectReplicationSettings");
static_assert(offsetof(FMultiUserObjectReplicationSettings, Mode) == 0x000000, "Member 'FMultiUserObjectReplicationSettings::Mode' has a wrong offset!");
static_assert(offsetof(FMultiUserObjectReplicationSettings, ReplicationRate) == 0x000001, "Member 'FMultiUserObjectReplicationSettings::ReplicationRate' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserFrequencyChangeRequest
// 0x00A8 (0x00A8 - 0x0000)
struct FMultiUserFrequencyChangeRequest final
{
public:
	TSet<struct FSoftObjectPath>                  OverridesToRemove;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FSoftObjectPath, struct FMultiUserObjectReplicationSettings> OverridesToAdd;                                    // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMultiUserObjectReplicationSettings    NewDefaults;                                       // 0x00A0(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bChangeDefaults;                                   // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47D9[0x5];                                     // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserFrequencyChangeRequest) == 0x000008, "Wrong alignment on FMultiUserFrequencyChangeRequest");
static_assert(sizeof(FMultiUserFrequencyChangeRequest) == 0x0000A8, "Wrong size on FMultiUserFrequencyChangeRequest");
static_assert(offsetof(FMultiUserFrequencyChangeRequest, OverridesToRemove) == 0x000000, "Member 'FMultiUserFrequencyChangeRequest::OverridesToRemove' has a wrong offset!");
static_assert(offsetof(FMultiUserFrequencyChangeRequest, OverridesToAdd) == 0x000050, "Member 'FMultiUserFrequencyChangeRequest::OverridesToAdd' has a wrong offset!");
static_assert(offsetof(FMultiUserFrequencyChangeRequest, NewDefaults) == 0x0000A0, "Member 'FMultiUserFrequencyChangeRequest::NewDefaults' has a wrong offset!");
static_assert(offsetof(FMultiUserFrequencyChangeRequest, bChangeDefaults) == 0x0000A2, "Member 'FMultiUserFrequencyChangeRequest::bChangeDefaults' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeStreamRequest
// 0x0148 (0x0148 - 0x0000)
struct FMultiUserChangeStreamRequest final
{
public:
	TMap<class UObject*, struct FMultiUserPropertyChange> PropertyChanges;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<struct FSoftObjectPath>                  ObjectsToRemove;                                   // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMultiUserFrequencyChangeRequest       FrequencyChanges;                                  // 0x00A0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserChangeStreamRequest) == 0x000008, "Wrong alignment on FMultiUserChangeStreamRequest");
static_assert(sizeof(FMultiUserChangeStreamRequest) == 0x000148, "Wrong size on FMultiUserChangeStreamRequest");
static_assert(offsetof(FMultiUserChangeStreamRequest, PropertyChanges) == 0x000000, "Member 'FMultiUserChangeStreamRequest::PropertyChanges' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeStreamRequest, ObjectsToRemove) == 0x000050, "Member 'FMultiUserChangeStreamRequest::ObjectsToRemove' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeStreamRequest, FrequencyChanges) == 0x0000A0, "Member 'FMultiUserChangeStreamRequest::FrequencyChanges' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeAuthorityRequest
// 0x00A0 (0x00A0 - 0x0000)
struct FMultiUserChangeAuthorityRequest final
{
public:
	TSet<struct FSoftObjectPath>                  ObjectsToStartReplicating;                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<struct FSoftObjectPath>                  ObjectToStopReplicating;                           // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserChangeAuthorityRequest) == 0x000008, "Wrong alignment on FMultiUserChangeAuthorityRequest");
static_assert(sizeof(FMultiUserChangeAuthorityRequest) == 0x0000A0, "Wrong size on FMultiUserChangeAuthorityRequest");
static_assert(offsetof(FMultiUserChangeAuthorityRequest, ObjectsToStartReplicating) == 0x000000, "Member 'FMultiUserChangeAuthorityRequest::ObjectsToStartReplicating' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeAuthorityRequest, ObjectToStopReplicating) == 0x000050, "Member 'FMultiUserChangeAuthorityRequest::ObjectToStopReplicating' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeClientReplicationRequest
// 0x01E8 (0x01E8 - 0x0000)
struct FMultiUserChangeClientReplicationRequest final
{
public:
	struct FMultiUserChangeStreamRequest          StreamChangeRequest;                               // 0x0000(0x0148)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMultiUserChangeAuthorityRequest       AuthorityChangeRequest;                            // 0x0148(0x00A0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserChangeClientReplicationRequest) == 0x000008, "Wrong alignment on FMultiUserChangeClientReplicationRequest");
static_assert(sizeof(FMultiUserChangeClientReplicationRequest) == 0x0001E8, "Wrong size on FMultiUserChangeClientReplicationRequest");
static_assert(offsetof(FMultiUserChangeClientReplicationRequest, StreamChangeRequest) == 0x000000, "Member 'FMultiUserChangeClientReplicationRequest::StreamChangeRequest' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientReplicationRequest, AuthorityChangeRequest) == 0x000148, "Member 'FMultiUserChangeClientReplicationRequest::AuthorityChangeRequest' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserBlueprintEventData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMultiUserBlueprintEventData final
{
public:
	uint8                                         Pad_47DA[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserBlueprintEventData) == 0x000008, "Wrong alignment on FMultiUserBlueprintEventData");
static_assert(sizeof(FMultiUserBlueprintEventData) == 0x000010, "Wrong size on FMultiUserBlueprintEventData");

// ScriptStruct MultiUserClientLibrary.MultiUserClientInfo
// 0x0040 (0x0040 - 0x0000)
struct FMultiUserClientInfo final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AvatarColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserClientInfo) == 0x000008, "Wrong alignment on FMultiUserClientInfo");
static_assert(sizeof(FMultiUserClientInfo) == 0x000040, "Wrong size on FMultiUserClientInfo");
static_assert(offsetof(FMultiUserClientInfo, ClientEndpointId) == 0x000000, "Member 'FMultiUserClientInfo::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, DisplayName) == 0x000010, "Member 'FMultiUserClientInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, AvatarColor) == 0x000020, "Member 'FMultiUserClientInfo::AvatarColor' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, Tags) == 0x000030, "Member 'FMultiUserClientInfo::Tags' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.ConcertBlueprintEvent
// 0x0020 (0x0020 - 0x0000)
struct FConcertBlueprintEvent final
{
public:
	struct FConcertSessionSerializedPayload       Data;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcertBlueprintEvent) == 0x000008, "Wrong alignment on FConcertBlueprintEvent");
static_assert(sizeof(FConcertBlueprintEvent) == 0x000020, "Wrong size on FConcertBlueprintEvent");
static_assert(offsetof(FConcertBlueprintEvent, Data) == 0x000000, "Member 'FConcertBlueprintEvent::Data' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.ChangeClientStreamFrequencyResponse
// 0x0058 (0x0058 - 0x0000)
struct FChangeClientStreamFrequencyResponse final
{
public:
	TMap<struct FSoftObjectPath, EMultiUserChangeFrequencyErrorCode> ObjectErrors;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TOptional<EMultiUserChangeFrequencyErrorCode> DefaultChangeErrorCode;                            // 0x0050(0x0002)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47DB[0x6];                                     // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChangeClientStreamFrequencyResponse) == 0x000008, "Wrong alignment on FChangeClientStreamFrequencyResponse");
static_assert(sizeof(FChangeClientStreamFrequencyResponse) == 0x000058, "Wrong size on FChangeClientStreamFrequencyResponse");
static_assert(offsetof(FChangeClientStreamFrequencyResponse, ObjectErrors) == 0x000000, "Member 'FChangeClientStreamFrequencyResponse::ObjectErrors' has a wrong offset!");
static_assert(offsetof(FChangeClientStreamFrequencyResponse, DefaultChangeErrorCode) == 0x000050, "Member 'FChangeClientStreamFrequencyResponse::DefaultChangeErrorCode' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeClientStreamResponse
// 0x0108 (0x0108 - 0x0000)
struct FMultiUserChangeClientStreamResponse final
{
public:
	EMultiUserChangeStreamOperationResult         ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47DC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FSoftObjectPath, struct FGuid>    AuthorityConflicts;                                // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FSoftObjectPath, EMultiUserPutObjectErrorCode> SemanticErrors;                                    // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FChangeClientStreamFrequencyResponse   FrequencyErrors;                                   // 0x00A8(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bFailedStreamCreation;                             // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47DD[0x7];                                     // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserChangeClientStreamResponse) == 0x000008, "Wrong alignment on FMultiUserChangeClientStreamResponse");
static_assert(sizeof(FMultiUserChangeClientStreamResponse) == 0x000108, "Wrong size on FMultiUserChangeClientStreamResponse");
static_assert(offsetof(FMultiUserChangeClientStreamResponse, ErrorCode) == 0x000000, "Member 'FMultiUserChangeClientStreamResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientStreamResponse, AuthorityConflicts) == 0x000008, "Member 'FMultiUserChangeClientStreamResponse::AuthorityConflicts' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientStreamResponse, SemanticErrors) == 0x000058, "Member 'FMultiUserChangeClientStreamResponse::SemanticErrors' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientStreamResponse, FrequencyErrors) == 0x0000A8, "Member 'FMultiUserChangeClientStreamResponse::FrequencyErrors' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientStreamResponse, bFailedStreamCreation) == 0x000100, "Member 'FMultiUserChangeClientStreamResponse::bFailedStreamCreation' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeClientAuthorityResponse
// 0x0058 (0x0058 - 0x0000)
struct FMultiUserChangeClientAuthorityResponse final
{
public:
	EMultiUserChangeAuthorityOperationResult      ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47DE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftObjectPath>                  RejectedObjects;                                   // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserChangeClientAuthorityResponse) == 0x000008, "Wrong alignment on FMultiUserChangeClientAuthorityResponse");
static_assert(sizeof(FMultiUserChangeClientAuthorityResponse) == 0x000058, "Wrong size on FMultiUserChangeClientAuthorityResponse");
static_assert(offsetof(FMultiUserChangeClientAuthorityResponse, ErrorCode) == 0x000000, "Member 'FMultiUserChangeClientAuthorityResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientAuthorityResponse, RejectedObjects) == 0x000008, "Member 'FMultiUserChangeClientAuthorityResponse::RejectedObjects' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserChangeClientReplicationResult
// 0x0160 (0x0160 - 0x0000)
struct FMultiUserChangeClientReplicationResult final
{
public:
	struct FMultiUserChangeClientStreamResponse   StreamResponse;                                    // 0x0000(0x0108)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMultiUserChangeClientAuthorityResponse AuthorityResponse;                                 // 0x0108(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserChangeClientReplicationResult) == 0x000008, "Wrong alignment on FMultiUserChangeClientReplicationResult");
static_assert(sizeof(FMultiUserChangeClientReplicationResult) == 0x000160, "Wrong size on FMultiUserChangeClientReplicationResult");
static_assert(offsetof(FMultiUserChangeClientReplicationResult, StreamResponse) == 0x000000, "Member 'FMultiUserChangeClientReplicationResult::StreamResponse' has a wrong offset!");
static_assert(offsetof(FMultiUserChangeClientReplicationResult, AuthorityResponse) == 0x000108, "Member 'FMultiUserChangeClientReplicationResult::AuthorityResponse' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserReplicationRegistrationParams
// 0x0020 (0x0020 - 0x0000)
struct FMultiUserReplicationRegistrationParams final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMultiUserReplicationRegistrationContext> Context;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserReplicationRegistrationParams) == 0x000008, "Wrong alignment on FMultiUserReplicationRegistrationParams");
static_assert(sizeof(FMultiUserReplicationRegistrationParams) == 0x000020, "Wrong size on FMultiUserReplicationRegistrationParams");
static_assert(offsetof(FMultiUserReplicationRegistrationParams, ClientEndpointId) == 0x000000, "Member 'FMultiUserReplicationRegistrationParams::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(FMultiUserReplicationRegistrationParams, Context) == 0x000010, "Member 'FMultiUserReplicationRegistrationParams::Context' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserSessionInfo
// 0x0048 (0x0048 - 0x0000)
struct FMultiUserSessionInfo final
{
public:
	struct FGuid                                  ServerEndpointId;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndpointName;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47DF[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserSessionInfo) == 0x000008, "Wrong alignment on FMultiUserSessionInfo");
static_assert(sizeof(FMultiUserSessionInfo) == 0x000048, "Wrong size on FMultiUserSessionInfo");
static_assert(offsetof(FMultiUserSessionInfo, ServerEndpointId) == 0x000000, "Member 'FMultiUserSessionInfo::ServerEndpointId' has a wrong offset!");
static_assert(offsetof(FMultiUserSessionInfo, SessionName) == 0x000010, "Member 'FMultiUserSessionInfo::SessionName' has a wrong offset!");
static_assert(offsetof(FMultiUserSessionInfo, ServerName) == 0x000020, "Member 'FMultiUserSessionInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FMultiUserSessionInfo, EndpointName) == 0x000030, "Member 'FMultiUserSessionInfo::EndpointName' has a wrong offset!");
static_assert(offsetof(FMultiUserSessionInfo, bValid) == 0x000040, "Member 'FMultiUserSessionInfo::bValid' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserConnectionError
// 0x0018 (0x0018 - 0x0000)
struct FMultiUserConnectionError final
{
public:
	EMultiUserConnectionError                     ErrorCode;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMessage;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserConnectionError) == 0x000008, "Wrong alignment on FMultiUserConnectionError");
static_assert(sizeof(FMultiUserConnectionError) == 0x000018, "Wrong size on FMultiUserConnectionError");
static_assert(offsetof(FMultiUserConnectionError, ErrorCode) == 0x000000, "Member 'FMultiUserConnectionError::ErrorCode' has a wrong offset!");
static_assert(offsetof(FMultiUserConnectionError, ErrorMessage) == 0x000008, "Member 'FMultiUserConnectionError::ErrorMessage' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserClientConfig
// 0x0038 (0x0038 - 0x0000)
struct FMultiUserClientConfig final
{
public:
	class FString                                 DefaultServerURL;                                  // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSessionName;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSessionToRestore;                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMultiUserSourceValidationMode                ValidationMode;                                    // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47E1[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserClientConfig) == 0x000008, "Wrong alignment on FMultiUserClientConfig");
static_assert(sizeof(FMultiUserClientConfig) == 0x000038, "Wrong size on FMultiUserClientConfig");
static_assert(offsetof(FMultiUserClientConfig, DefaultServerURL) == 0x000000, "Member 'FMultiUserClientConfig::DefaultServerURL' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, DefaultSessionName) == 0x000010, "Member 'FMultiUserClientConfig::DefaultSessionName' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, DefaultSessionToRestore) == 0x000020, "Member 'FMultiUserClientConfig::DefaultSessionToRestore' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, ValidationMode) == 0x000030, "Member 'FMultiUserClientConfig::ValidationMode' has a wrong offset!");

}

