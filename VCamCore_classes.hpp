#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCamCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LiveLinkInterface_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "EnhancedInput_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "VCamCore_structs.hpp"
#include "CinematicCamera_classes.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "UMG_classes.hpp"
#include "VPUtilities_structs.hpp"


namespace SDK
{

// Class VCamCore.GameplayViewTargetPolicy
// 0x0000 (0x0028 - 0x0028)
class UGameplayViewTargetPolicy : public UObject
{
public:
	TArray<class APlayerController*> DeterminePlayerControllers(const struct FDeterminePlayerControllersTargetPolicyParams& Params_0);
	void UpdateViewTarget(const struct FUpdateViewTargetPolicyParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayViewTargetPolicy">();
	}
	static class UGameplayViewTargetPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayViewTargetPolicy>();
	}
};
static_assert(alignof(UGameplayViewTargetPolicy) == 0x000008, "Wrong alignment on UGameplayViewTargetPolicy");
static_assert(sizeof(UGameplayViewTargetPolicy) == 0x000028, "Wrong size on UGameplayViewTargetPolicy");

// Class VCamCore.FocusFirstPlayerViewTargetPolicy
// 0x0000 (0x0028 - 0x0028)
class UFocusFirstPlayerViewTargetPolicy final : public UGameplayViewTargetPolicy
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusFirstPlayerViewTargetPolicy">();
	}
	static class UFocusFirstPlayerViewTargetPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusFirstPlayerViewTargetPolicy>();
	}
};
static_assert(alignof(UFocusFirstPlayerViewTargetPolicy) == 0x000008, "Wrong alignment on UFocusFirstPlayerViewTargetPolicy");
static_assert(sizeof(UFocusFirstPlayerViewTargetPolicy) == 0x000028, "Wrong size on UFocusFirstPlayerViewTargetPolicy");

// Class VCamCore.VCamComponent
// 0x0230 (0x0460 - 0x0230)
class UVCamComponent final : public USceneComponent
{
public:
	FMulticastInlineDelegateProperty_             OnComponentReplaced;                               // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DB5[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Role;                                              // 0x0244(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLiveLinkSubjectName                   LiveLinkSubject;                                   // 0x024C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLockViewportToCamera;                             // 0x0254(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DB6[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCamViewportLocker                    ViewportLocker;                                    // 0x0258(0x0050)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bDisableComponentWhenSpawnedBySequencer;           // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisableOutputOnMultiUserReceiver;                 // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DB7[0x2];                                     // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateFrequencyMs;                                 // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVCamTargetViewportID                         TargetViewport;                                    // 0x02B0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB8[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCamInputProfile                      InputProfile;                                      // 0x02B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)
	struct FVCamInputDeviceConfig                 InputDeviceSettings;                               // 0x0308(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)
	TArray<class UVCamOutputProviderBase*>        OutputProviders;                                   // 0x0328(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UVCamModifierContext*                   ModifierContext;                                   // 0x0338(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FModifierStackEntry>            ModifierStack;                                     // 0x0340(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UInputComponent*                        InputComponent;                                    // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UInputMappingContext*>           AppliedInputContexts;                              // 0x0358(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DB9[0xF8];                                    // 0x0368(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddInputProfileWithCurrentlyActiveMappings(const class FName ProfileName, bool bUpdateIfProfileAlreadyExists);
	bool AddModifier(const class FName Param_Name, TSubclassOf<class UVCamModifier> ModifierClass, class UVCamModifier** CreatedModifier);
	bool AddOutputProvider(TSubclassOf<class UVCamOutputProviderBase> ProviderClass, class UVCamOutputProviderBase** CreatedProvider);
	bool GetLiveLinkDataForCurrentFrame(struct FLiveLinkCameraBlueprintData* LiveLinkData);
	void InjectInputForAction(const class UInputAction* Action, const struct FInputActionValue& RawValue, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers);
	void InjectInputVectorForAction(const class UInputAction* Action, const struct FVector& Value, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers);
	bool InsertModifier(const class FName Param_Name, int32 Param_Index, TSubclassOf<class UVCamModifier> ModifierClass, class UVCamModifier** CreatedModifier);
	bool InsertOutputProvider(int32 Param_Index, TSubclassOf<class UVCamOutputProviderBase> ProviderClass, class UVCamOutputProviderBase** CreatedProvider);
	void RegisterObjectForInput(class UObject* Object);
	void RemoveAllModifiers();
	void RemoveAllOutputProviders();
	bool RemoveModifier(const class UVCamModifier* Modifier);
	bool RemoveModifierByIndex(const int32 ModifierIndex);
	bool RemoveModifierByName(const class FName Param_Name);
	bool RemoveOutputProvider(const class UVCamOutputProviderBase* Provider);
	bool RemoveOutputProviderByIndex(const int32 ProviderIndex);
	void SetDisableComponentWhenSpawnedBySequencer(bool bValue);
	void SetDisableOutputOnMultiUserReceiver(bool bValue);
	void SetEnabled(bool bNewEnabled);
	void SetInputDeviceSettings(const struct FVCamInputDeviceConfig& NewInputProfile);
	void SetInputProfile(const struct FVCamInputProfile& NewInputProfile);
	bool SetInputProfileFromName(const class FName ProfileName);
	void SetLiveLinkSubobject(const struct FLiveLinkSubjectName& Value);
	void SetModifierContextClass(TSubclassOf<class UVCamModifierContext> ContextClass, class UVCamModifierContext** CreatedContext);
	bool SetModifierIndex(int32 OriginalIndex, int32 NewIndex);
	bool SetOutputProviderIndex(int32 OriginalIndex, int32 NewIndex);
	void SetRole(const struct FGameplayTag& Value);

	TArray<class FName> GetAllModifierNames() const;
	void GetAllModifiers(TArray<class UVCamModifier*>* Modifiers) const;
	void GetAllOutputProviders(TArray<class UVCamOutputProviderBase*>* Providers) const;
	TArray<struct FEnhancedActionKeyMapping> GetAllPlayerMappableActionKeyMappings() const;
	bool GetDisableComponentWhenSpawnedBySequencer() const;
	bool GetDisableOutputOnMultiUserReceiver() const;
	const struct FVCamInputDeviceConfig GetInputDeviceSettings() const;
	const struct FVCamInputProfile GetInputProfile() const;
	class UInputVCamSubsystem* GetInputVCamSubsystem() const;
	struct FLiveLinkSubjectName GetLiveLinkSubobject() const;
	class UVCamModifier* GetModifierByIndex(const int32 Param_Index) const;
	class UVCamModifier* GetModifierByName(const class FName Param_Name) const;
	class UVCamModifierContext* GetModifierContext() const;
	void GetModifiersByClass(TSubclassOf<class UVCamModifier> ModifierClass, TArray<class UVCamModifier*>* FoundModifiers) const;
	void GetModifiersByInterface(TSubclassOf<class IInterface> InterfaceClass, TArray<class UVCamModifier*>* FoundModifiers) const;
	int32 GetNumberOfModifiers() const;
	int32 GetNumberOfOutputProviders() const;
	class UVCamOutputProviderBase* GetOutputProviderByIndex(const int32 ProviderIndex) const;
	void GetOutputProvidersByClass(TSubclassOf<class UVCamOutputProviderBase> ProviderClass, TArray<class UVCamOutputProviderBase*>* FoundProviders) const;
	TArray<struct FEnhancedActionKeyMapping> GetPlayerMappableKeys() const;
	struct FKey GetPlayerMappedKey(const class FName MappingName) const;
	struct FGameplayTag GetRole() const;
	TArray<class UVCamSubsystem*> GetSubsystemArray(const TSubclassOf<class UVCamSubsystem>& Param_Class) const;
	class UCineCameraComponent* GetTargetCamera() const;
	bool IsEnabled() const;
	bool SaveCurrentInputProfileToSettings(const class FName ProfileName) const;
	void UnregisterObjectForInput(class UObject* Object) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamComponent">();
	}
	static class UVCamComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamComponent>();
	}
};
static_assert(alignof(UVCamComponent) == 0x000010, "Wrong alignment on UVCamComponent");
static_assert(sizeof(UVCamComponent) == 0x000460, "Wrong size on UVCamComponent");
static_assert(offsetof(UVCamComponent, OnComponentReplaced) == 0x000230, "Member 'UVCamComponent::OnComponentReplaced' has a wrong offset!");
static_assert(offsetof(UVCamComponent, bEnabled) == 0x000240, "Member 'UVCamComponent::bEnabled' has a wrong offset!");
static_assert(offsetof(UVCamComponent, Role) == 0x000244, "Member 'UVCamComponent::Role' has a wrong offset!");
static_assert(offsetof(UVCamComponent, LiveLinkSubject) == 0x00024C, "Member 'UVCamComponent::LiveLinkSubject' has a wrong offset!");
static_assert(offsetof(UVCamComponent, bLockViewportToCamera) == 0x000254, "Member 'UVCamComponent::bLockViewportToCamera' has a wrong offset!");
static_assert(offsetof(UVCamComponent, ViewportLocker) == 0x000258, "Member 'UVCamComponent::ViewportLocker' has a wrong offset!");
static_assert(offsetof(UVCamComponent, bDisableComponentWhenSpawnedBySequencer) == 0x0002A8, "Member 'UVCamComponent::bDisableComponentWhenSpawnedBySequencer' has a wrong offset!");
static_assert(offsetof(UVCamComponent, bDisableOutputOnMultiUserReceiver) == 0x0002A9, "Member 'UVCamComponent::bDisableOutputOnMultiUserReceiver' has a wrong offset!");
static_assert(offsetof(UVCamComponent, UpdateFrequencyMs) == 0x0002AC, "Member 'UVCamComponent::UpdateFrequencyMs' has a wrong offset!");
static_assert(offsetof(UVCamComponent, TargetViewport) == 0x0002B0, "Member 'UVCamComponent::TargetViewport' has a wrong offset!");
static_assert(offsetof(UVCamComponent, InputProfile) == 0x0002B8, "Member 'UVCamComponent::InputProfile' has a wrong offset!");
static_assert(offsetof(UVCamComponent, InputDeviceSettings) == 0x000308, "Member 'UVCamComponent::InputDeviceSettings' has a wrong offset!");
static_assert(offsetof(UVCamComponent, OutputProviders) == 0x000328, "Member 'UVCamComponent::OutputProviders' has a wrong offset!");
static_assert(offsetof(UVCamComponent, ModifierContext) == 0x000338, "Member 'UVCamComponent::ModifierContext' has a wrong offset!");
static_assert(offsetof(UVCamComponent, ModifierStack) == 0x000340, "Member 'UVCamComponent::ModifierStack' has a wrong offset!");
static_assert(offsetof(UVCamComponent, InputComponent) == 0x000350, "Member 'UVCamComponent::InputComponent' has a wrong offset!");
static_assert(offsetof(UVCamComponent, AppliedInputContexts) == 0x000358, "Member 'UVCamComponent::AppliedInputContexts' has a wrong offset!");

// Class VCamCore.VCamSubsystem
// 0x0000 (0x0030 - 0x0030)
class UVCamSubsystem : public USubsystem
{
public:
	class UVCamComponent* GetVCamComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamSubsystem">();
	}
	static class UVCamSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamSubsystem>();
	}
};
static_assert(alignof(UVCamSubsystem) == 0x000008, "Wrong alignment on UVCamSubsystem");
static_assert(sizeof(UVCamSubsystem) == 0x000030, "Wrong size on UVCamSubsystem");

// Class VCamCore.InputVCamSubsystem
// 0x01D0 (0x0200 - 0x0030)
class UInputVCamSubsystem final : public UVCamSubsystem
{
public:
	uint8                                         Pad_1DCD[0x150];                                   // 0x0030(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCamPlayerInput*                       PlayerInput;                                       // 0x0180(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DCE[0x10];                                    // 0x0188(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UInputComponent>> CurrentInputStack;                                 // 0x0198(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UEnhancedInputUserSettings*             UserSettings;                                      // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UInputAction*, struct FInjectedInput> ContinuouslyInjectedInputs;                        // 0x01B0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputVCamSubsystem">();
	}
	static class UInputVCamSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputVCamSubsystem>();
	}
};
static_assert(alignof(UInputVCamSubsystem) == 0x000008, "Wrong alignment on UInputVCamSubsystem");
static_assert(sizeof(UInputVCamSubsystem) == 0x000200, "Wrong size on UInputVCamSubsystem");
static_assert(offsetof(UInputVCamSubsystem, PlayerInput) == 0x000180, "Member 'UInputVCamSubsystem::PlayerInput' has a wrong offset!");
static_assert(offsetof(UInputVCamSubsystem, CurrentInputStack) == 0x000198, "Member 'UInputVCamSubsystem::CurrentInputStack' has a wrong offset!");
static_assert(offsetof(UInputVCamSubsystem, UserSettings) == 0x0001A8, "Member 'UInputVCamSubsystem::UserSettings' has a wrong offset!");
static_assert(offsetof(UInputVCamSubsystem, ContinuouslyInjectedInputs) == 0x0001B0, "Member 'UInputVCamSubsystem::ContinuouslyInjectedInputs' has a wrong offset!");

// Class VCamCore.VCamOutputProviderCreatedWidget
// 0x0000 (0x0028 - 0x0028)
class IVCamOutputProviderCreatedWidget final : public IInterface
{
public:
	void ReceiveOutputProvider(const struct FVCamReceiveOutputProviderData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputProviderCreatedWidget">();
	}
	static class IVCamOutputProviderCreatedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVCamOutputProviderCreatedWidget>();
	}
};
static_assert(alignof(IVCamOutputProviderCreatedWidget) == 0x000008, "Wrong alignment on IVCamOutputProviderCreatedWidget");
static_assert(sizeof(IVCamOutputProviderCreatedWidget) == 0x000028, "Wrong size on IVCamOutputProviderCreatedWidget");

// Class VCamCore.VCamBaseActor
// 0x0000 (0x0A70 - 0x0A70)
class AVCamBaseActor : public ACineCameraActor
{
public:
	class UVCamComponent*                         VCamComponent;                                     // 0x0A68(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UVCamComponent* GetVCamComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamBaseActor">();
	}
	static class AVCamBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVCamBaseActor>();
	}
};
static_assert(alignof(AVCamBaseActor) == 0x000010, "Wrong alignment on AVCamBaseActor");
static_assert(sizeof(AVCamBaseActor) == 0x000A70, "Wrong size on AVCamBaseActor");
static_assert(offsetof(AVCamBaseActor, VCamComponent) == 0x000A68, "Member 'AVCamBaseActor::VCamComponent' has a wrong offset!");

// Class VCamCore.VCamBlueprintAssetUserData
// 0x0000 (0x0028 - 0x0028)
class UVCamBlueprintAssetUserData final : public UAssetUserData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamBlueprintAssetUserData">();
	}
	static class UVCamBlueprintAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamBlueprintAssetUserData>();
	}
};
static_assert(alignof(UVCamBlueprintAssetUserData) == 0x000008, "Wrong alignment on UVCamBlueprintAssetUserData");
static_assert(sizeof(UVCamBlueprintAssetUserData) == 0x000028, "Wrong size on UVCamBlueprintAssetUserData");

// Class VCamCore.VirtualCameraCoreUserSettings
// 0x0018 (0x0040 - 0x0028)
class UVirtualCameraCoreUserSettings final : public UObject
{
public:
	class FString                                 DiscoveryEndpoint;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscoveryPort;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCF[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCameraCoreUserSettings">();
	}
	static class UVirtualCameraCoreUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCameraCoreUserSettings>();
	}
};
static_assert(alignof(UVirtualCameraCoreUserSettings) == 0x000008, "Wrong alignment on UVirtualCameraCoreUserSettings");
static_assert(sizeof(UVirtualCameraCoreUserSettings) == 0x000040, "Wrong size on UVirtualCameraCoreUserSettings");
static_assert(offsetof(UVirtualCameraCoreUserSettings, DiscoveryEndpoint) == 0x000028, "Member 'UVirtualCameraCoreUserSettings::DiscoveryEndpoint' has a wrong offset!");
static_assert(offsetof(UVirtualCameraCoreUserSettings, DiscoveryPort) == 0x000038, "Member 'UVirtualCameraCoreUserSettings::DiscoveryPort' has a wrong offset!");

// Class VCamCore.VCamInputSettings
// 0x0058 (0x0090 - 0x0038)
class UVCamInputSettings final : public UDeveloperSettings
{
public:
	class FName                                   DefaultInputProfile;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVCamInputProfile>   InputProfiles;                                     // 0x0040(0x0050)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)

public:
	static class UVCamInputSettings* GetVCamInputSettings();

	void SetDefaultInputProfile(const class FName NewDefaultInputProfile);
	void SetInputProfiles(const TMap<class FName, struct FVCamInputProfile>& NewInputProfiles);

	TArray<class FName> GetInputProfileNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamInputSettings">();
	}
	static class UVCamInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamInputSettings>();
	}
};
static_assert(alignof(UVCamInputSettings) == 0x000008, "Wrong alignment on UVCamInputSettings");
static_assert(sizeof(UVCamInputSettings) == 0x000090, "Wrong size on UVCamInputSettings");
static_assert(offsetof(UVCamInputSettings, DefaultInputProfile) == 0x000038, "Member 'UVCamInputSettings::DefaultInputProfile' has a wrong offset!");
static_assert(offsetof(UVCamInputSettings, InputProfiles) == 0x000040, "Member 'UVCamInputSettings::InputProfiles' has a wrong offset!");

// Class VCamCore.VCamModifier
// 0x0068 (0x0090 - 0x0028)
class UVCamModifier : public UObject
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputContextPriority;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD0[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FVCamModifierConnectionPoint> ConnectionPoints;                                  // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNeedsInitialization;                              // 0x0088(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD1[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCurrentLiveLinkDataFromOwningComponent(struct FLiveLinkCameraBlueprintData* LiveLinkData);
	void SetEnabled(bool bNewEnabled);
	bool SetStackEntryName(class FName NewName);

	class UVCamComponent* GetOwningVCamComponent() const;
	class FName GetStackEntryName() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamModifier">();
	}
	static class UVCamModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamModifier>();
	}
};
static_assert(alignof(UVCamModifier) == 0x000008, "Wrong alignment on UVCamModifier");
static_assert(sizeof(UVCamModifier) == 0x000090, "Wrong size on UVCamModifier");
static_assert(offsetof(UVCamModifier, InputMappingContext) == 0x000028, "Member 'UVCamModifier::InputMappingContext' has a wrong offset!");
static_assert(offsetof(UVCamModifier, InputContextPriority) == 0x000030, "Member 'UVCamModifier::InputContextPriority' has a wrong offset!");
static_assert(offsetof(UVCamModifier, ConnectionPoints) == 0x000038, "Member 'UVCamModifier::ConnectionPoints' has a wrong offset!");
static_assert(offsetof(UVCamModifier, bNeedsInitialization) == 0x000088, "Member 'UVCamModifier::bNeedsInitialization' has a wrong offset!");

// Class VCamCore.VCamBlueprintModifier
// 0x0000 (0x0090 - 0x0090)
class UVCamBlueprintModifier final : public UVCamModifier
{
public:
	void OnApply(class UVCamModifierContext* Context, class UCineCameraComponent* CameraComponent, const float DeltaTime);
	void OnDeinitialize();
	void OnInitialize(class UVCamModifierContext* Context);

	void GetInputMappingContextAndPriority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamBlueprintModifier">();
	}
	static class UVCamBlueprintModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamBlueprintModifier>();
	}
};
static_assert(alignof(UVCamBlueprintModifier) == 0x000008, "Wrong alignment on UVCamBlueprintModifier");
static_assert(sizeof(UVCamBlueprintModifier) == 0x000090, "Wrong size on UVCamBlueprintModifier");

// Class VCamCore.VCamModifierContext
// 0x0000 (0x0028 - 0x0028)
class UVCamModifierContext final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamModifierContext">();
	}
	static class UVCamModifierContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamModifierContext>();
	}
};
static_assert(alignof(UVCamModifierContext) == 0x000008, "Wrong alignment on UVCamModifierContext");
static_assert(sizeof(UVCamModifierContext) == 0x000028, "Wrong size on UVCamModifierContext");

// Class VCamCore.VCamOutputProviderBase
// 0x0138 (0x0160 - 0x0028)
class UVCamOutputProviderBase : public UObject
{
public:
	uint8                                         Pad_1DD4[0x18];                                    // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnActivatedDelegate_Blueprint;                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bUseOverrideResolution;                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD5[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              OverrideResolution;                                // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPWidgetDisplayType                          DisplayType;                                       // 0x005C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DD6[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayViewTargetPolicy*              GameplayViewTargetPolicy;                          // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsActive;                                         // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVCamTargetViewportID                         TargetViewport;                                    // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD7[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                UMGClass;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FWidgetTreeSnapshot                    WidgetSnapshot;                                    // 0x0078(0x0058)(NativeAccessSpecifierPrivate)
	bool                                          bInitialized;                                      // 0x00D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD8[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVPFullScreenUserWidget*                UMGWidget;                                         // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UCineCameraComponent>    TargetCamera;                                      // 0x00E0(0x0028)(ExportObject, Transient, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWasOutputSuspendedWhileActive;                    // 0x0108(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD9[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class APlayerController>> PlayersWhoseViewTargetsWereSet;                    // 0x0110(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void ActivationDelegate_Blueprint__DelegateSignature(bool bNewIsActive);
	void SetActive(const bool bInActive);
	void SetTargetViewport(EVCamTargetViewportID Value);
	void SetUMGClass(const TSubclassOf<class UUserWidget> InUMGClass);

	EVCamTargetViewportID GetTargetViewport() const;
	TSubclassOf<class UUserWidget> GetUMGClass() const;
	class UVCamComponent* GetVCamComponent() const;
	bool IsActive() const;
	bool IsInitialized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputProviderBase">();
	}
	static class UVCamOutputProviderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamOutputProviderBase>();
	}
};
static_assert(alignof(UVCamOutputProviderBase) == 0x000008, "Wrong alignment on UVCamOutputProviderBase");
static_assert(sizeof(UVCamOutputProviderBase) == 0x000160, "Wrong size on UVCamOutputProviderBase");
static_assert(offsetof(UVCamOutputProviderBase, OnActivatedDelegate_Blueprint) == 0x000040, "Member 'UVCamOutputProviderBase::OnActivatedDelegate_Blueprint' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, bUseOverrideResolution) == 0x000050, "Member 'UVCamOutputProviderBase::bUseOverrideResolution' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, OverrideResolution) == 0x000054, "Member 'UVCamOutputProviderBase::OverrideResolution' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, DisplayType) == 0x00005C, "Member 'UVCamOutputProviderBase::DisplayType' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, GameplayViewTargetPolicy) == 0x000060, "Member 'UVCamOutputProviderBase::GameplayViewTargetPolicy' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, bIsActive) == 0x000068, "Member 'UVCamOutputProviderBase::bIsActive' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, TargetViewport) == 0x000069, "Member 'UVCamOutputProviderBase::TargetViewport' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, UMGClass) == 0x000070, "Member 'UVCamOutputProviderBase::UMGClass' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, WidgetSnapshot) == 0x000078, "Member 'UVCamOutputProviderBase::WidgetSnapshot' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, bInitialized) == 0x0000D0, "Member 'UVCamOutputProviderBase::bInitialized' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, UMGWidget) == 0x0000D8, "Member 'UVCamOutputProviderBase::UMGWidget' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, TargetCamera) == 0x0000E0, "Member 'UVCamOutputProviderBase::TargetCamera' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, bWasOutputSuspendedWhileActive) == 0x000108, "Member 'UVCamOutputProviderBase::bWasOutputSuspendedWhileActive' has a wrong offset!");
static_assert(offsetof(UVCamOutputProviderBase, PlayersWhoseViewTargetsWereSet) == 0x000110, "Member 'UVCamOutputProviderBase::PlayersWhoseViewTargetsWereSet' has a wrong offset!");

// Class VCamCore.VCamOutputComposure
// 0x0018 (0x0178 - 0x0160)
class UVCamOutputComposure final : public UVCamOutputProviderBase
{
public:
	TArray<TSoftObjectPtr<class ACompositingElement>> LayerTargets;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 FinalOutputRenderTarget;                           // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputComposure">();
	}
	static class UVCamOutputComposure* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamOutputComposure>();
	}
};
static_assert(alignof(UVCamOutputComposure) == 0x000008, "Wrong alignment on UVCamOutputComposure");
static_assert(sizeof(UVCamOutputComposure) == 0x000178, "Wrong size on UVCamOutputComposure");
static_assert(offsetof(UVCamOutputComposure, LayerTargets) == 0x000160, "Member 'UVCamOutputComposure::LayerTargets' has a wrong offset!");
static_assert(offsetof(UVCamOutputComposure, FinalOutputRenderTarget) == 0x000170, "Member 'UVCamOutputComposure::FinalOutputRenderTarget' has a wrong offset!");

// Class VCamCore.VCamOutputMediaOutput
// 0x0018 (0x0178 - 0x0160)
class UVCamOutputMediaOutput final : public UVCamOutputProviderBase
{
public:
	class UMediaOutput*                           OutputConfig;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromComposureOutputProviderIndex;                  // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDA[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaCapture*                          MediaCapture;                                      // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputMediaOutput">();
	}
	static class UVCamOutputMediaOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamOutputMediaOutput>();
	}
};
static_assert(alignof(UVCamOutputMediaOutput) == 0x000008, "Wrong alignment on UVCamOutputMediaOutput");
static_assert(sizeof(UVCamOutputMediaOutput) == 0x000178, "Wrong size on UVCamOutputMediaOutput");
static_assert(offsetof(UVCamOutputMediaOutput, OutputConfig) == 0x000160, "Member 'UVCamOutputMediaOutput::OutputConfig' has a wrong offset!");
static_assert(offsetof(UVCamOutputMediaOutput, FromComposureOutputProviderIndex) == 0x000168, "Member 'UVCamOutputMediaOutput::FromComposureOutputProviderIndex' has a wrong offset!");
static_assert(offsetof(UVCamOutputMediaOutput, MediaCapture) == 0x000170, "Member 'UVCamOutputMediaOutput::MediaCapture' has a wrong offset!");

// Class VCamCore.VCamOutputRemoteSession
// 0x0128 (0x0288 - 0x0160)
class UVCamOutputRemoteSession final : public UVCamOutputProviderBase
{
public:
	int32                                         PortNumber;                                        // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromComposureOutputProviderIndex;                  // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URemoteSessionMediaOutput*              MediaOutput;                                       // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URemoteSessionMediaCapture*             MediaCapture;                                      // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DDB[0x110];                                   // 0x0178(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputRemoteSession">();
	}
	static class UVCamOutputRemoteSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamOutputRemoteSession>();
	}
};
static_assert(alignof(UVCamOutputRemoteSession) == 0x000008, "Wrong alignment on UVCamOutputRemoteSession");
static_assert(sizeof(UVCamOutputRemoteSession) == 0x000288, "Wrong size on UVCamOutputRemoteSession");
static_assert(offsetof(UVCamOutputRemoteSession, PortNumber) == 0x000160, "Member 'UVCamOutputRemoteSession::PortNumber' has a wrong offset!");
static_assert(offsetof(UVCamOutputRemoteSession, FromComposureOutputProviderIndex) == 0x000164, "Member 'UVCamOutputRemoteSession::FromComposureOutputProviderIndex' has a wrong offset!");
static_assert(offsetof(UVCamOutputRemoteSession, MediaOutput) == 0x000168, "Member 'UVCamOutputRemoteSession::MediaOutput' has a wrong offset!");
static_assert(offsetof(UVCamOutputRemoteSession, MediaCapture) == 0x000170, "Member 'UVCamOutputRemoteSession::MediaCapture' has a wrong offset!");

// Class VCamCore.VCamOutputViewport
// 0x0000 (0x0160 - 0x0160)
class UVCamOutputViewport final : public UVCamOutputProviderBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamOutputViewport">();
	}
	static class UVCamOutputViewport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamOutputViewport>();
	}
};
static_assert(alignof(UVCamOutputViewport) == 0x000008, "Wrong alignment on UVCamOutputViewport");
static_assert(sizeof(UVCamOutputViewport) == 0x000160, "Wrong size on UVCamOutputViewport");

// Class VCamCore.VCamPlayerInput
// 0x0020 (0x0810 - 0x07F0)
class UVCamPlayerInput final : public UEnhancedPlayerInput
{
public:
	struct FVCamInputDeviceConfig                 InputDeviceSettings;                               // 0x07F0(0x0020)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamPlayerInput">();
	}
	static class UVCamPlayerInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamPlayerInput>();
	}
};
static_assert(alignof(UVCamPlayerInput) == 0x000008, "Wrong alignment on UVCamPlayerInput");
static_assert(sizeof(UVCamPlayerInput) == 0x000810, "Wrong size on UVCamPlayerInput");
static_assert(offsetof(UVCamPlayerInput, InputDeviceSettings) == 0x0007F0, "Member 'UVCamPlayerInput::InputDeviceSettings' has a wrong offset!");

// Class VCamCore.VCamWidget
// 0x0098 (0x0378 - 0x02E0)
class UVCamWidget : public UUserWidget
{
public:
	TMap<class FName, struct FVCamConnection>     Connections;                                       // 0x02E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bRegisterForInput;                                 // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDC[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   InputMappingContext;                               // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputContextPriority;                              // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDD[0x1C];                                    // 0x0344(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPostConnectionsReinitializedDelegate_Blueprint;  // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UVCamComponent*                         VCamComponent;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ConnectionsReinitializedDelegate_Blueprint__DelegateSignature();
	void OnConnectionUpdated(class FName ConnectionName, bool bDidConnectSuccessfully, class FName ModifierConnectionPointName, class UVCamModifier* ConnectedModifier, class UInputAction* ConnectedAction);
	void OnInitializeConnections(class UVCamComponent* VCam);
	void PostConnectionsInitialized();
	bool ReinitializeConnections();
	void UpdateConnectionTargets(const TMap<class FName, struct FVCamConnectionTargetSettings>& NewConnectionTargets, const bool bReinitializeOnSuccessfulUpdate, EConnectionUpdateResult* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamWidget">();
	}
	static class UVCamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamWidget>();
	}
};
static_assert(alignof(UVCamWidget) == 0x000008, "Wrong alignment on UVCamWidget");
static_assert(sizeof(UVCamWidget) == 0x000378, "Wrong size on UVCamWidget");
static_assert(offsetof(UVCamWidget, Connections) == 0x0002E0, "Member 'UVCamWidget::Connections' has a wrong offset!");
static_assert(offsetof(UVCamWidget, bRegisterForInput) == 0x000330, "Member 'UVCamWidget::bRegisterForInput' has a wrong offset!");
static_assert(offsetof(UVCamWidget, InputMappingContext) == 0x000338, "Member 'UVCamWidget::InputMappingContext' has a wrong offset!");
static_assert(offsetof(UVCamWidget, InputContextPriority) == 0x000340, "Member 'UVCamWidget::InputContextPriority' has a wrong offset!");
static_assert(offsetof(UVCamWidget, OnPostConnectionsReinitializedDelegate_Blueprint) == 0x000360, "Member 'UVCamWidget::OnPostConnectionsReinitializedDelegate_Blueprint' has a wrong offset!");
static_assert(offsetof(UVCamWidget, VCamComponent) == 0x000370, "Member 'UVCamWidget::VCamComponent' has a wrong offset!");

// Class VCamCore.VCamStateSwitcherWidget
// 0x0078 (0x03F0 - 0x0378)
class UVCamStateSwitcherWidget final : public UVCamWidget
{
public:
	FMulticastInlineDelegateProperty_             OnPreStateChanged;                                 // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnPostStateChanged;                                // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FVCamWidgetConnectionState> States;                                            // 0x0398(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FName                                   CurrentState;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void K2_SetCurrentState(class FName NewState);
	bool SetCurrentState(class FName NewState, bool bForceUpdate, bool bReinitializeConnections);

	class FName GetCurrentState() const;
	bool GetStateInfo(class FName State, struct FVCamWidgetConnectionState* OutStateInfo) const;
	TArray<class FName> GetStates() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamStateSwitcherWidget">();
	}
	static class UVCamStateSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamStateSwitcherWidget>();
	}
};
static_assert(alignof(UVCamStateSwitcherWidget) == 0x000008, "Wrong alignment on UVCamStateSwitcherWidget");
static_assert(sizeof(UVCamStateSwitcherWidget) == 0x0003F0, "Wrong size on UVCamStateSwitcherWidget");
static_assert(offsetof(UVCamStateSwitcherWidget, OnPreStateChanged) == 0x000378, "Member 'UVCamStateSwitcherWidget::OnPreStateChanged' has a wrong offset!");
static_assert(offsetof(UVCamStateSwitcherWidget, OnPostStateChanged) == 0x000388, "Member 'UVCamStateSwitcherWidget::OnPostStateChanged' has a wrong offset!");
static_assert(offsetof(UVCamStateSwitcherWidget, States) == 0x000398, "Member 'UVCamStateSwitcherWidget::States' has a wrong offset!");
static_assert(offsetof(UVCamStateSwitcherWidget, CurrentState) == 0x0003E8, "Member 'UVCamStateSwitcherWidget::CurrentState' has a wrong offset!");

// Class VCamCore.VCamUIFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVCamUIFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UInputAction* GetConnectedInputAction_VCamConnection(const struct FVCamConnection& Connection);
	static bool GetConnectedInputAction_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class UInputAction** OutInputAction);
	static class UVCamModifier* GetConnectedModifier_VCamConnection(const struct FVCamConnection& Connection);
	static bool GetConnectedModifier_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class UVCamModifier** OutModifier);
	static bool GetConnectionByName_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, struct FVCamConnection* OutConnection);
	static class FName GetConnectionPointName_VCamConnection(const struct FVCamConnection& Connection);
	static bool GetConnectionPointName_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, class FName* OutConnectionPointName);
	static bool IsConnected_VCamConnection(const struct FVCamConnection& Connection);
	static bool IsConnected_VCamWidget(class UVCamWidget* Widget, class FName ConnectionId, bool* bOutIsConnected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VCamUIFunctionLibrary">();
	}
	static class UVCamUIFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVCamUIFunctionLibrary>();
	}
};
static_assert(alignof(UVCamUIFunctionLibrary) == 0x000008, "Wrong alignment on UVCamUIFunctionLibrary");
static_assert(sizeof(UVCamUIFunctionLibrary) == 0x000028, "Wrong size on UVCamUIFunctionLibrary");

// Class VCamCore.WidgetReferenceBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetReferenceBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UVCamWidget* ResolveVCamWidget(const struct FVCamChildWidgetReference& WidgetReference, class UUserWidget* OwnerWidget);
	static class UWidget* ResolveWidget(const struct FChildWidgetReference& WidgetReference, class UUserWidget* OwnerWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetReferenceBlueprintFunctionLibrary">();
	}
	static class UWidgetReferenceBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetReferenceBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UWidgetReferenceBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UWidgetReferenceBlueprintFunctionLibrary");
static_assert(sizeof(UWidgetReferenceBlueprintFunctionLibrary) == 0x000028, "Wrong size on UWidgetReferenceBlueprintFunctionLibrary");

}

