#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTServiceSetEnemyFocus

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_NPCBodyPart_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTServiceSetEnemyFocus.BTServiceSetEnemyFocus_C
// 0x0120 (0x01B8 - 0x0098)
class UBTServiceSetEnemyFocus_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   OffsetFocusBBName;                                 // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MaxOffset;                                         // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 TargetVisible;                                     // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 Enemy;                                             // 0x0100(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 LimbofTarget;                                      // 0x0128(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 StimulusLocation;                                  // 0x0150(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 DistanceToTarget;                                  // 0x0178(0x0028)(Edit, BlueprintVisible)
	double                                        MinDistanceForHead;                                // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EGzCharacterDamageAreaType>            Out_Visible_Parts;                                 // 0x01A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetEnemyFocus(class AAIController* AIController);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void Get_Body_Part_Enum(E_NPCBodyPart Expected_BPart, EGzCharacterDamageAreaType* BPart);
	void ExecuteUbergraph_BTServiceSetEnemyFocus(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTServiceSetEnemyFocus_C">();
	}
	static class UBTServiceSetEnemyFocus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTServiceSetEnemyFocus_C>();
	}
};
static_assert(alignof(UBTServiceSetEnemyFocus_C) == 0x000008, "Wrong alignment on UBTServiceSetEnemyFocus_C");
static_assert(sizeof(UBTServiceSetEnemyFocus_C) == 0x0001B8, "Wrong size on UBTServiceSetEnemyFocus_C");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, UberGraphFrame) == 0x000098, "Member 'UBTServiceSetEnemyFocus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, OffsetFocusBBName) == 0x0000A0, "Member 'UBTServiceSetEnemyFocus_C::OffsetFocusBBName' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, Offset) == 0x0000A8, "Member 'UBTServiceSetEnemyFocus_C::Offset' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, MaxOffset) == 0x0000C0, "Member 'UBTServiceSetEnemyFocus_C::MaxOffset' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, TargetVisible) == 0x0000D8, "Member 'UBTServiceSetEnemyFocus_C::TargetVisible' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, Enemy) == 0x000100, "Member 'UBTServiceSetEnemyFocus_C::Enemy' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, LimbofTarget) == 0x000128, "Member 'UBTServiceSetEnemyFocus_C::LimbofTarget' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, StimulusLocation) == 0x000150, "Member 'UBTServiceSetEnemyFocus_C::StimulusLocation' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, DistanceToTarget) == 0x000178, "Member 'UBTServiceSetEnemyFocus_C::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, MinDistanceForHead) == 0x0001A0, "Member 'UBTServiceSetEnemyFocus_C::MinDistanceForHead' has a wrong offset!");
static_assert(offsetof(UBTServiceSetEnemyFocus_C, Out_Visible_Parts) == 0x0001A8, "Member 'UBTServiceSetEnemyFocus_C::Out_Visible_Parts' has a wrong offset!");

}

