#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TextToSpeech

#include "Basic.hpp"

#include "TextToSpeech_classes.hpp"
#include "TextToSpeech_parameters.hpp"


namespace SDK
{

// Function TextToSpeech.TextToSpeechEngineSubsystem.ActivateAllChannels
// (Final, Native, Public, BlueprintCallable)

void UTextToSpeechEngineSubsystem::ActivateAllChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "ActivateAllChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.ActivateChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::ActivateChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "ActivateChannel");

	Params::TextToSpeechEngineSubsystem_ActivateChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.AddCustomChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InNewChannelId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::AddCustomChannel(class FName InNewChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "AddCustomChannel");

	Params::TextToSpeechEngineSubsystem_AddCustomChannel Parms{};

	Parms.InNewChannelId = InNewChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.AddDefaultChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InNewChannelId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::AddDefaultChannel(class FName InNewChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "AddDefaultChannel");

	Params::TextToSpeechEngineSubsystem_AddDefaultChannel Parms{};

	Parms.InNewChannelId = InNewChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.DeactivateAllChannels
// (Final, Native, Public, BlueprintCallable)

void UTextToSpeechEngineSubsystem::DeactivateAllChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "DeactivateAllChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.DeactivateChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::DeactivateChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "DeactivateChannel");

	Params::TextToSpeechEngineSubsystem_DeactivateChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.GetVolumeOnChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTextToSpeechEngineSubsystem::GetVolumeOnChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "GetVolumeOnChannel");

	Params::TextToSpeechEngineSubsystem_GetVolumeOnChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.MuteChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::MuteChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "MuteChannel");

	Params::TextToSpeechEngineSubsystem_MuteChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.RemoveAllChannels
// (Final, Native, Public, BlueprintCallable)

void UTextToSpeechEngineSubsystem::RemoveAllChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "RemoveAllChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.RemoveChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::RemoveChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "RemoveChannel");

	Params::TextToSpeechEngineSubsystem_RemoveChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.SetRateOnChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRate                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::SetRateOnChannel(class FName InChannelId, float InRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "SetRateOnChannel");

	Params::TextToSpeechEngineSubsystem_SetRateOnChannel Parms{};

	Parms.InChannelId = InChannelId;
	Parms.InRate = InRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.SetVolumeOnChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::SetVolumeOnChannel(class FName InChannelId, float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "SetVolumeOnChannel");

	Params::TextToSpeechEngineSubsystem_SetVolumeOnChannel Parms{};

	Parms.InChannelId = InChannelId;
	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.SpeakOnChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InStringToSpeak                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::SpeakOnChannel(class FName InChannelId, class FString& InStringToSpeak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "SpeakOnChannel");

	Params::TextToSpeechEngineSubsystem_SpeakOnChannel Parms{};

	Parms.InChannelId = InChannelId;
	Parms.InStringToSpeak = std::move(InStringToSpeak);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InStringToSpeak = std::move(Parms.InStringToSpeak);
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.StopSpeakingOnAllChannels
// (Final, Native, Public, BlueprintCallable)

void UTextToSpeechEngineSubsystem::StopSpeakingOnAllChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "StopSpeakingOnAllChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.StopSpeakingOnChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::StopSpeakingOnChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "StopSpeakingOnChannel");

	Params::TextToSpeechEngineSubsystem_StopSpeakingOnChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.UnmuteChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextToSpeechEngineSubsystem::UnmuteChannel(class FName InChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "UnmuteChannel");

	Params::TextToSpeechEngineSubsystem_UnmuteChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.DoesChannelExist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextToSpeechEngineSubsystem::DoesChannelExist(class FName InChannelId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "DoesChannelExist");

	Params::TextToSpeechEngineSubsystem_DoesChannelExist Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.GetNumChannels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTextToSpeechEngineSubsystem::GetNumChannels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "GetNumChannels");

	Params::TextToSpeechEngineSubsystem_GetNumChannels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.GetRateOnChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTextToSpeechEngineSubsystem::GetRateOnChannel(class FName InChannelId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "GetRateOnChannel");

	Params::TextToSpeechEngineSubsystem_GetRateOnChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.IsChannelActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextToSpeechEngineSubsystem::IsChannelActive(class FName InChannelId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "IsChannelActive");

	Params::TextToSpeechEngineSubsystem_IsChannelActive Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.IsChannelMuted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextToSpeechEngineSubsystem::IsChannelMuted(class FName InChannelId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "IsChannelMuted");

	Params::TextToSpeechEngineSubsystem_IsChannelMuted Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TextToSpeech.TextToSpeechEngineSubsystem.IsSpeakingOnChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InChannelId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextToSpeechEngineSubsystem::IsSpeakingOnChannel(class FName InChannelId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextToSpeechEngineSubsystem", "IsSpeakingOnChannel");

	Params::TextToSpeechEngineSubsystem_IsSpeakingOnChannel Parms{};

	Parms.InChannelId = InChannelId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

