#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SignalR

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct SignalR.NegotiationTransport
// 0x0020 (0x0020 - 0x0000)
struct FNegotiationTransport final
{
public:
	class FString                                 Transport;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TransferFormats;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNegotiationTransport) == 0x000008, "Wrong alignment on FNegotiationTransport");
static_assert(sizeof(FNegotiationTransport) == 0x000020, "Wrong size on FNegotiationTransport");
static_assert(offsetof(FNegotiationTransport, Transport) == 0x000000, "Member 'FNegotiationTransport::Transport' has a wrong offset!");
static_assert(offsetof(FNegotiationTransport, TransferFormats) == 0x000010, "Member 'FNegotiationTransport::TransferFormats' has a wrong offset!");

// ScriptStruct SignalR.NegotiationResponse
// 0x0068 (0x0068 - 0x0000)
struct FNegotiationResponse final
{
public:
	int32                                         NegotiateVersion;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectionId;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionToken;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNegotiationTransport>          AvailableTransports;                               // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNegotiationResponse) == 0x000008, "Wrong alignment on FNegotiationResponse");
static_assert(sizeof(FNegotiationResponse) == 0x000068, "Wrong size on FNegotiationResponse");
static_assert(offsetof(FNegotiationResponse, NegotiateVersion) == 0x000000, "Member 'FNegotiationResponse::NegotiateVersion' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, ConnectionId) == 0x000008, "Member 'FNegotiationResponse::ConnectionId' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, ConnectionToken) == 0x000018, "Member 'FNegotiationResponse::ConnectionToken' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, URL) == 0x000028, "Member 'FNegotiationResponse::URL' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, AccessToken) == 0x000038, "Member 'FNegotiationResponse::AccessToken' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, Error) == 0x000048, "Member 'FNegotiationResponse::Error' has a wrong offset!");
static_assert(offsetof(FNegotiationResponse, AvailableTransports) == 0x000058, "Member 'FNegotiationResponse::AvailableTransports' has a wrong offset!");

}

