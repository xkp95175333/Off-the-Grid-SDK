#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LimbInputHintContainer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "E_InputHint_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_LimbInputHintContainer.WBP_LimbInputHintContainer_C
// 0x00E0 (0x0420 - 0x0340)
class UWBP_LimbInputHintContainer_C final : public UGzHUDComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGzTextBlock*                           LimbDisplayName;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LimbImage;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         LimbInfoBox;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_198;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_0;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGzMultiPartCharacter*                  As_Gz_Multi_Part_Character;                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ShowTime;                                          // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B75[0x4];                                     // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ShowTimer;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_Crosshair_InputAction_C*>   ActiveCrosshairInputs;                             // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	EGzLimbType                                   Limb_Type;                                         // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B76[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzItemData*                            ActiveLimbHint;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EGzAbilityInputModifier, struct FGzBodyPartAbilityInputEntry> ActiveInputEntries;                                // 0x03A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Left_Arm;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Right_Arm;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Legs;                                              // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UGzItemData*>                    ToShowAbilities;                                   // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CreateWidget(const TMap<EGzAbilityInputModifier, struct FGzBodyPartAbilityInputEntry>& TargetMap, EGzAbilityInputModifier InputModifierKey);
	void EndHints();
	void ExecuteUbergraph_WBP_LimbInputHintContainer(int32 EntryPoint);
	class UInputAction* GetInputAction(class UInputAction* Option_1);
	void GetInputData(class UGzItemData* Target, TMap<EGzAbilityInputModifier, struct FGzBodyPartAbilityInputEntry>* Input_Entries);
	void InitHints();
	void OnLimbChanged(EGzLimbType LimbType);
	void OnTagAdded_AADE8FEE499777FA16392EBD63B787F4(const struct FGameplayTag& Tag);
	void OnTagAdded_B1B2135047193647594BC88ED64C5BF8(const struct FGameplayTag& Tag);
	void OnTagAdded_CC67AF944794759C9E6035882987770E(const struct FGameplayTag& Tag);
	void OnTagRemoved_AADE8FEE499777FA16392EBD63B787F4(const struct FGameplayTag& Tag);
	void OnTagRemoved_B1B2135047193647594BC88ED64C5BF8(const struct FGameplayTag& Tag);
	void OnTagRemoved_CC67AF944794759C9E6035882987770E(const struct FGameplayTag& Tag);
	void OnViewTargetChanged(class APawn* ViewTarget);
	void OverrideQueue();
	void RetriggerQueueIfNotEmpty();
	void SetLimbImageAndName(class UGzItemData* ItemData);
	void SetQueue(const EGzLimbType LimbType);
	void ShowHints();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_LimbInputHintContainer_C">();
	}
	static class UWBP_LimbInputHintContainer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_LimbInputHintContainer_C>();
	}
};
static_assert(alignof(UWBP_LimbInputHintContainer_C) == 0x000008, "Wrong alignment on UWBP_LimbInputHintContainer_C");
static_assert(sizeof(UWBP_LimbInputHintContainer_C) == 0x000420, "Wrong size on UWBP_LimbInputHintContainer_C");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, UberGraphFrame) == 0x000340, "Member 'UWBP_LimbInputHintContainer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, LimbDisplayName) == 0x000348, "Member 'UWBP_LimbInputHintContainer_C::LimbDisplayName' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, LimbImage) == 0x000350, "Member 'UWBP_LimbInputHintContainer_C::LimbImage' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, LimbInfoBox) == 0x000358, "Member 'UWBP_LimbInputHintContainer_C::LimbInfoBox' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, Overlay_198) == 0x000360, "Member 'UWBP_LimbInputHintContainer_C::Overlay_198' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, VerticalBox_0) == 0x000368, "Member 'UWBP_LimbInputHintContainer_C::VerticalBox_0' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, As_Gz_Multi_Part_Character) == 0x000370, "Member 'UWBP_LimbInputHintContainer_C::As_Gz_Multi_Part_Character' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ShowTime) == 0x000378, "Member 'UWBP_LimbInputHintContainer_C::ShowTime' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ShowTimer) == 0x000380, "Member 'UWBP_LimbInputHintContainer_C::ShowTimer' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ActiveCrosshairInputs) == 0x000388, "Member 'UWBP_LimbInputHintContainer_C::ActiveCrosshairInputs' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, Limb_Type) == 0x000398, "Member 'UWBP_LimbInputHintContainer_C::Limb_Type' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ActiveLimbHint) == 0x0003A0, "Member 'UWBP_LimbInputHintContainer_C::ActiveLimbHint' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ActiveInputEntries) == 0x0003A8, "Member 'UWBP_LimbInputHintContainer_C::ActiveInputEntries' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, Left_Arm) == 0x0003F8, "Member 'UWBP_LimbInputHintContainer_C::Left_Arm' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, Right_Arm) == 0x000400, "Member 'UWBP_LimbInputHintContainer_C::Right_Arm' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, Legs) == 0x000408, "Member 'UWBP_LimbInputHintContainer_C::Legs' has a wrong offset!");
static_assert(offsetof(UWBP_LimbInputHintContainer_C, ToShowAbilities) == 0x000410, "Member 'UWBP_LimbInputHintContainer_C::ToShowAbilities' has a wrong offset!");

}

