#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GameNotification

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "G01_structs.hpp"
#include "G01_classes.hpp"
#include "E_EnclaveOps_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_GameNotification.WBP_GameNotification_C
// 0x0110 (0x0488 - 0x0378)
class UWBP_GameNotification_C final : public UGzGameNotificationContainer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_GameNotificationSlot_C*            WBP_GameNotificationSlot;                          // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EGzGameNotificationType                       DefaultMissionNotificationType;                    // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C76[0x7];                                     // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzMultiStageGameState*                 GameModeState;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PreviousStageTags;                                 // 0x0398(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FName>        GameStageToNotifId;                                // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          FirstGrid;                                         // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C77[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FGameplayTag> WorldZoneTagToNotificationTag;                     // 0x0410(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           DefaultHexExtractionStartedTag;                    // 0x0460(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MissionShowTime;                                   // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C78[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzShrinkingZoneManager*                As_Gz_Shrinking_Zone_Manager;                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bActivatedDeploymentNotification;                  // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C79[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MissionFailedReasonDataAsset_C*     MissionFailReasonsDataAsset;                       // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddEnclaveMessage(class UGzGameMessage* Message);
	void AddGridMessage(class UGzGameMessage* Message);
	void AddGridTimeMessage(class UGzGameMessage* Message);
	void AddHexExtractionStartMessage(class UGzGameMessage* Message);
	void AddHexHackedMessage(class UGzGameMessage* Message);
	void AddHexSucceedMessage(class UGzGameMessage* Message);
	void AddMessageHexReconstituted(class UGzGameMessage* Message);
	void AddMissionCompletedNotification(class AGzMission* Mission);
	void AddMissionFailedNotification(class AGzMission* Mission);
	void AddMissionTargetTrackedNotification(class UGzMissionData* Mission, const class FText& PlayerName, int32 IndexPlayerInTeam, const class FText& PlayerClanTag);
	void BuindDeploymentNotification(class APawn* ViewTarget);
	void BuindExtructionRoyaleEvents();
	void BuindGameModeState();
	void BuindMessages(class AGzGameMessageSubsystem* MessageSubsystem);
	void BuindMissionEvents();
	double CalculateShowTime(double EventRemainingTime, const struct FGzGameNotificationSpec& NotificationSpec);
	void Construct();
	void CREATEDELEGATE_PROXYFUNCTION_0(float DeploymentTime);
	void CreateGameStageNotification(const class FName InNotificationID, const class FText& InHeaderText);
	void CreateNotificationAndSetTime(const class FName InNotificationID, double Time, bool* Result);
	void DebugExtractionCancel(bool bExtractionHackedSucceed, class UGzItemData* ExtractionItem);
	void DebugHexExtractionStart(bool IsExtructionTeam, class UGzItemData* ExtractionItem);
	void DebugHexHacked(bool IsHackedTeam, class UGzItemData* ExtractionItem);
	void DebugHexReconstituted(bool IsHackedTeam, class UGzItemData* ExtractionItem);
	void DebugHexSucceed(class UGzItemData* ExtractionItem);
	void DebugMissionCompleted(class UGzMissionData* MissionData);
	void DebugMissionFailed(class UGzMissionData* MissionData);
	void DebugMissionStarted(class UGzMissionData* MissionData);
	void DebugOnMissionStartedBountyTarget(class UGzMissionData* MissionData);
	void ExecuteUbergraph_WBP_GameNotification(int32 EntryPoint);
	void ExtractionCancelMessage(class UGzGameMessage* Message);
	void GameStageTagToTableID(class FName* ID);
	class FText GetMissionName(class UGzMissionData* MissionData);
	void GetWorldZoneNotificationTag(class UGzWorldZone* WorldZone, struct FGameplayTag* Tag);
	void HasShrinkingZoneRadius(bool* Result);
	bool IsTimerTooShort(float InputPin);
	void LoadIcon(TSoftObjectPtr<class UObject> Asset, class UTexture2D** Texture);
	void MissionConsumedMessage(class UGzGameMessage* Message);
	void MissionCreateFailedMessage(class UGzGameMessage* Message);
	void OnDeploymentTransportReady_Event(class AGzDeploymentTransport* DeploymentTransport);
	void OnGameModeEvents(const struct FGzEventNotificationData& ActedEvent);
	void OnInitialized();
	void OnMissionGenericMessage(class UGzGameMessage* Message);
	void OnMissionStarted(class AGzMission* Mission);
	void OnMissionStateChanged(class AGzMission* Mission, const struct FGzMissionState& OldState, const struct FGzMissionState& MissionState);
	void OnReady_30EFFA384B2BD99FBD8EFA9122B674FB(class AGzGameModeSubsystem* Subsystem);
	void OnReady_B6CC7BF548A62D547A0D0D835343A966(class AGzGameModeSubsystem* Subsystem);
	void OnShowGameNotification_Event(class FName NotificationID);
	void OnViewTargetChanged_1(class APawn* ViewTarget);
	void ShowDebugGameNotification(class FName TestNotificationID);
	void TryAddDeploymentNotification(double Time);
	void TryAddServerTyme(double Time, double* Result);
	double TryRemoveServerTyme(double Rime);
	void UpdateNotificationForGameStages();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_GameNotification_C">();
	}
	static class UWBP_GameNotification_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_GameNotification_C>();
	}
};
static_assert(alignof(UWBP_GameNotification_C) == 0x000008, "Wrong alignment on UWBP_GameNotification_C");
static_assert(sizeof(UWBP_GameNotification_C) == 0x000488, "Wrong size on UWBP_GameNotification_C");
static_assert(offsetof(UWBP_GameNotification_C, UberGraphFrame) == 0x000378, "Member 'UWBP_GameNotification_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, WBP_GameNotificationSlot) == 0x000380, "Member 'UWBP_GameNotification_C::WBP_GameNotificationSlot' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, DefaultMissionNotificationType) == 0x000388, "Member 'UWBP_GameNotification_C::DefaultMissionNotificationType' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, GameModeState) == 0x000390, "Member 'UWBP_GameNotification_C::GameModeState' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, PreviousStageTags) == 0x000398, "Member 'UWBP_GameNotification_C::PreviousStageTags' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, GameStageToNotifId) == 0x0003B8, "Member 'UWBP_GameNotification_C::GameStageToNotifId' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, FirstGrid) == 0x000408, "Member 'UWBP_GameNotification_C::FirstGrid' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, WorldZoneTagToNotificationTag) == 0x000410, "Member 'UWBP_GameNotification_C::WorldZoneTagToNotificationTag' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, DefaultHexExtractionStartedTag) == 0x000460, "Member 'UWBP_GameNotification_C::DefaultHexExtractionStartedTag' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, MissionShowTime) == 0x000468, "Member 'UWBP_GameNotification_C::MissionShowTime' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, As_Gz_Shrinking_Zone_Manager) == 0x000470, "Member 'UWBP_GameNotification_C::As_Gz_Shrinking_Zone_Manager' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, bActivatedDeploymentNotification) == 0x000478, "Member 'UWBP_GameNotification_C::bActivatedDeploymentNotification' has a wrong offset!");
static_assert(offsetof(UWBP_GameNotification_C, MissionFailReasonsDataAsset) == 0x000480, "Member 'UWBP_GameNotification_C::MissionFailReasonsDataAsset' has a wrong offset!");

}

