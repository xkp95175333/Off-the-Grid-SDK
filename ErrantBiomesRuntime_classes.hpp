#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ErrantBiomesRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ErrantBiomesRuntime_structs.hpp"


namespace SDK
{

// Class ErrantBiomesRuntime.BiomesHierarchicalInstancedStaticMeshComponent
// 0x0000 (0x0B10 - 0x0B10)
class UBiomesHierarchicalInstancedStaticMeshComponent final : public UHierarchicalInstancedStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesHierarchicalInstancedStaticMeshComponent">();
	}
	static class UBiomesHierarchicalInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesHierarchicalInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UBiomesHierarchicalInstancedStaticMeshComponent) == 0x000010, "Wrong alignment on UBiomesHierarchicalInstancedStaticMeshComponent");
static_assert(sizeof(UBiomesHierarchicalInstancedStaticMeshComponent) == 0x000B10, "Wrong size on UBiomesHierarchicalInstancedStaticMeshComponent");

// Class ErrantBiomesRuntime.BiomesPartitionActor
// 0x0000 (0x02A0 - 0x02A0)
class ABiomesPartitionActor : public APartitionActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesPartitionActor">();
	}
	static class ABiomesPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABiomesPartitionActor>();
	}
};
static_assert(alignof(ABiomesPartitionActor) == 0x000008, "Wrong alignment on ABiomesPartitionActor");
static_assert(sizeof(ABiomesPartitionActor) == 0x0002A0, "Wrong size on ABiomesPartitionActor");

// Class ErrantBiomesRuntime.BiomesRuntimeData
// 0x0010 (0x02B0 - 0x02A0)
class ABiomesRuntimeData final : public AActor
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x02A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesRuntimeData">();
	}
	static class ABiomesRuntimeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABiomesRuntimeData>();
	}
};
static_assert(alignof(ABiomesRuntimeData) == 0x000008, "Wrong alignment on ABiomesRuntimeData");
static_assert(sizeof(ABiomesRuntimeData) == 0x0002B0, "Wrong size on ABiomesRuntimeData");
static_assert(offsetof(ABiomesRuntimeData, Objects) == 0x0002A0, "Member 'ABiomesRuntimeData::Objects' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesRuntimeSpawnerComponent
// 0x0138 (0x01E0 - 0x00A8)
class UBiomesRuntimeSpawnerComponent final : public UActorComponent
{
public:
	double                                        MaxSpawningDistanceSquared;                        // 0x00A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E3[0x40];                                    // 0x00B0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UBiomesSpeciesInfo*                     SpeciesInfo;                                       // 0x00F0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointsGridIndex;                              // 0x00F8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ComponentXY;                                       // 0x00FC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E4[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULandscapeComponent>     LandscapeComponent;                                // 0x0108(0x0028)(Edit, ExportObject, EditConst, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBiomesInstanceComponentPartitions> InstanceComponentPartitions;                       // 0x0130(0x0010)(Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBox2D                                 WorldBounds2D;                                     // 0x0140(0x0028)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssetNumPartitions;                                // 0x0168(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                LocalInstancesLocationOffset;                      // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UHierarchicalInstancedStaticMeshComponent>> InstanceComponents;                                // 0x0190(0x0010)(ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         MaxSpawningDistance;                               // 0x01A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42E5[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   WorldBounds;                                       // 0x01A8(0x0038)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesRuntimeSpawnerComponent">();
	}
	static class UBiomesRuntimeSpawnerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesRuntimeSpawnerComponent>();
	}
};
static_assert(alignof(UBiomesRuntimeSpawnerComponent) == 0x000008, "Wrong alignment on UBiomesRuntimeSpawnerComponent");
static_assert(sizeof(UBiomesRuntimeSpawnerComponent) == 0x0001E0, "Wrong size on UBiomesRuntimeSpawnerComponent");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, MaxSpawningDistanceSquared) == 0x0000A8, "Member 'UBiomesRuntimeSpawnerComponent::MaxSpawningDistanceSquared' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, SpeciesInfo) == 0x0000F0, "Member 'UBiomesRuntimeSpawnerComponent::SpeciesInfo' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, SpawnPointsGridIndex) == 0x0000F8, "Member 'UBiomesRuntimeSpawnerComponent::SpawnPointsGridIndex' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, ComponentXY) == 0x0000FC, "Member 'UBiomesRuntimeSpawnerComponent::ComponentXY' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, LandscapeComponent) == 0x000108, "Member 'UBiomesRuntimeSpawnerComponent::LandscapeComponent' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, InstanceComponentPartitions) == 0x000130, "Member 'UBiomesRuntimeSpawnerComponent::InstanceComponentPartitions' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, WorldBounds2D) == 0x000140, "Member 'UBiomesRuntimeSpawnerComponent::WorldBounds2D' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, AssetNumPartitions) == 0x000168, "Member 'UBiomesRuntimeSpawnerComponent::AssetNumPartitions' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, LocalInstancesLocationOffset) == 0x000178, "Member 'UBiomesRuntimeSpawnerComponent::LocalInstancesLocationOffset' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, InstanceComponents) == 0x000190, "Member 'UBiomesRuntimeSpawnerComponent::InstanceComponents' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, MaxSpawningDistance) == 0x0001A0, "Member 'UBiomesRuntimeSpawnerComponent::MaxSpawningDistance' has a wrong offset!");
static_assert(offsetof(UBiomesRuntimeSpawnerComponent, WorldBounds) == 0x0001A8, "Member 'UBiomesRuntimeSpawnerComponent::WorldBounds' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesRuntimeSpawnerContainer
// 0x0058 (0x02F8 - 0x02A0)
class ABiomesRuntimeSpawnerContainer final : public ABiomesPartitionActor
{
public:
	TArray<class UHierarchicalInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                     // 0x02A0(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UBiomesRuntimeSpawnerComponent*> SpawnerComponents;                                 // 0x02B0(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBox                                   FullySpawnedWorldBounds;                           // 0x02C0(0x0038)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesRuntimeSpawnerContainer">();
	}
	static class ABiomesRuntimeSpawnerContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABiomesRuntimeSpawnerContainer>();
	}
};
static_assert(alignof(ABiomesRuntimeSpawnerContainer) == 0x000008, "Wrong alignment on ABiomesRuntimeSpawnerContainer");
static_assert(sizeof(ABiomesRuntimeSpawnerContainer) == 0x0002F8, "Wrong size on ABiomesRuntimeSpawnerContainer");
static_assert(offsetof(ABiomesRuntimeSpawnerContainer, InstancedStaticMeshComponents) == 0x0002A0, "Member 'ABiomesRuntimeSpawnerContainer::InstancedStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawnerContainer, SpawnerComponents) == 0x0002B0, "Member 'ABiomesRuntimeSpawnerContainer::SpawnerComponents' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawnerContainer, FullySpawnedWorldBounds) == 0x0002C0, "Member 'ABiomesRuntimeSpawnerContainer::FullySpawnedWorldBounds' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesRuntimeSpawner
// 0x00B0 (0x0350 - 0x02A0)
class ABiomesRuntimeSpawner final : public AActor
{
public:
	TSoftObjectPtr<class UBiomesSpeciesInfo>      SpeciesInfo;                                       // 0x02A0(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointsGridIndex;                              // 0x02C8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ComponentXY;                                       // 0x02CC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E6[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULandscapeComponent>     LandscapeComponent;                                // 0x02D8(0x0028)(Edit, ExportObject, EditConst, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHierarchicalInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                     // 0x0300(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         MaxSpawningDistance;                               // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42E7[0x3C];                                    // 0x0314(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesRuntimeSpawner">();
	}
	static class ABiomesRuntimeSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABiomesRuntimeSpawner>();
	}
};
static_assert(alignof(ABiomesRuntimeSpawner) == 0x000008, "Wrong alignment on ABiomesRuntimeSpawner");
static_assert(sizeof(ABiomesRuntimeSpawner) == 0x000350, "Wrong size on ABiomesRuntimeSpawner");
static_assert(offsetof(ABiomesRuntimeSpawner, SpeciesInfo) == 0x0002A0, "Member 'ABiomesRuntimeSpawner::SpeciesInfo' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawner, SpawnPointsGridIndex) == 0x0002C8, "Member 'ABiomesRuntimeSpawner::SpawnPointsGridIndex' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawner, ComponentXY) == 0x0002CC, "Member 'ABiomesRuntimeSpawner::ComponentXY' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawner, LandscapeComponent) == 0x0002D8, "Member 'ABiomesRuntimeSpawner::LandscapeComponent' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawner, InstancedStaticMeshComponents) == 0x000300, "Member 'ABiomesRuntimeSpawner::InstancedStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ABiomesRuntimeSpawner, MaxSpawningDistance) == 0x000310, "Member 'ABiomesRuntimeSpawner::MaxSpawningDistance' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesRuntimeSpawningSubsystem
// 0x0650 (0x0680 - 0x0030)
class UBiomesRuntimeSpawningSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_42E8[0x650];                                   // 0x0030(0x0650)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesRuntimeSpawningSubsystem">();
	}
	static class UBiomesRuntimeSpawningSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesRuntimeSpawningSubsystem>();
	}
};
static_assert(alignof(UBiomesRuntimeSpawningSubsystem) == 0x000008, "Wrong alignment on UBiomesRuntimeSpawningSubsystem");
static_assert(sizeof(UBiomesRuntimeSpawningSubsystem) == 0x000680, "Wrong size on UBiomesRuntimeSpawningSubsystem");

// Class ErrantBiomesRuntime.BiomesSpawnPointsGrid
// 0x0020 (0x0050 - 0x0030)
class UBiomesSpawnPointsGrid final : public UDataAsset
{
public:
	float                                         NoCollisionRadius;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CellSize;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CellEdgeSize;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42E9[0x14];                                    // 0x003C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesSpawnPointsGrid">();
	}
	static class UBiomesSpawnPointsGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesSpawnPointsGrid>();
	}
};
static_assert(alignof(UBiomesSpawnPointsGrid) == 0x000008, "Wrong alignment on UBiomesSpawnPointsGrid");
static_assert(sizeof(UBiomesSpawnPointsGrid) == 0x000050, "Wrong size on UBiomesSpawnPointsGrid");
static_assert(offsetof(UBiomesSpawnPointsGrid, NoCollisionRadius) == 0x000030, "Member 'UBiomesSpawnPointsGrid::NoCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBiomesSpawnPointsGrid, CellSize) == 0x000034, "Member 'UBiomesSpawnPointsGrid::CellSize' has a wrong offset!");
static_assert(offsetof(UBiomesSpawnPointsGrid, CellEdgeSize) == 0x000038, "Member 'UBiomesSpawnPointsGrid::CellEdgeSize' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesSpeciesInfo
// 0x0198 (0x01C8 - 0x0030)
class UBiomesSpeciesInfo final : public UDataAsset
{
public:
	struct FSoftObjectPath                        SourceSpeciesAsset;                                // 0x0030(0x0020)(Edit, ZeroConstructor, EditConst, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Assets;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<bool>                                  AssetCanUsePrebuiltTree;                           // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FBox>                           AssetBounds;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<bool>                                  AssetNeedsInstanceBufferCPUAccess;                 // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssetDesiredInstancesPerLeaf;                      // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UBiomesSpawnPointsGrid*                 SpawnPointsGrid;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBiomesInstancesSettings               InstancesSettings;                                 // 0x00A8(0x00A8)(Edit, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBiomesSpeciesGenerateTransformsInfo   SpeciesGenerationInfo;                             // 0x0150(0x0078)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesSpeciesInfo">();
	}
	static class UBiomesSpeciesInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesSpeciesInfo>();
	}
};
static_assert(alignof(UBiomesSpeciesInfo) == 0x000008, "Wrong alignment on UBiomesSpeciesInfo");
static_assert(sizeof(UBiomesSpeciesInfo) == 0x0001C8, "Wrong size on UBiomesSpeciesInfo");
static_assert(offsetof(UBiomesSpeciesInfo, SourceSpeciesAsset) == 0x000030, "Member 'UBiomesSpeciesInfo::SourceSpeciesAsset' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, Assets) == 0x000050, "Member 'UBiomesSpeciesInfo::Assets' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, AssetCanUsePrebuiltTree) == 0x000060, "Member 'UBiomesSpeciesInfo::AssetCanUsePrebuiltTree' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, AssetBounds) == 0x000070, "Member 'UBiomesSpeciesInfo::AssetBounds' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, AssetNeedsInstanceBufferCPUAccess) == 0x000080, "Member 'UBiomesSpeciesInfo::AssetNeedsInstanceBufferCPUAccess' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, AssetDesiredInstancesPerLeaf) == 0x000090, "Member 'UBiomesSpeciesInfo::AssetDesiredInstancesPerLeaf' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, SpawnPointsGrid) == 0x0000A0, "Member 'UBiomesSpeciesInfo::SpawnPointsGrid' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, InstancesSettings) == 0x0000A8, "Member 'UBiomesSpeciesInfo::InstancesSettings' has a wrong offset!");
static_assert(offsetof(UBiomesSpeciesInfo, SpeciesGenerationInfo) == 0x000150, "Member 'UBiomesSpeciesInfo::SpeciesGenerationInfo' has a wrong offset!");

// Class ErrantBiomesRuntime.BiomesWorldInfo
// 0x0090 (0x00C0 - 0x0030)
class UBiomesWorldInfo final : public UDataAsset
{
public:
	struct FBiomesComponentGenerateTransformsInfo ComponentGenerateTransformsInfo;                   // 0x0030(0x0090)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomesWorldInfo">();
	}
	static class UBiomesWorldInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomesWorldInfo>();
	}
};
static_assert(alignof(UBiomesWorldInfo) == 0x000010, "Wrong alignment on UBiomesWorldInfo");
static_assert(sizeof(UBiomesWorldInfo) == 0x0000C0, "Wrong size on UBiomesWorldInfo");
static_assert(offsetof(UBiomesWorldInfo, ComponentGenerateTransformsInfo) == 0x000030, "Member 'UBiomesWorldInfo::ComponentGenerateTransformsInfo' has a wrong offset!");

}

