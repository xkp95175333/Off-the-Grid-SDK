#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VPSettings

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VPSettings.VPSettings
// 0x0090 (0x00B8 - 0x0028)
class UVPSettings final : public UObject
{
public:
	TArray<float>                                 FocalLengthPresets;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<float>                                 AperturePresets;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<float>                                 DefaultShutterSpeedPresets;                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<float>                                 DefaultISOPresets;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 DirectorName;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShowName;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Roles;                                             // 0x0088(0x0020)(Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_46F2[0x10];                                    // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVPSettings* GetVPSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VPSettings">();
	}
	static class UVPSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVPSettings>();
	}
};
static_assert(alignof(UVPSettings) == 0x000008, "Wrong alignment on UVPSettings");
static_assert(sizeof(UVPSettings) == 0x0000B8, "Wrong size on UVPSettings");
static_assert(offsetof(UVPSettings, FocalLengthPresets) == 0x000028, "Member 'UVPSettings::FocalLengthPresets' has a wrong offset!");
static_assert(offsetof(UVPSettings, AperturePresets) == 0x000038, "Member 'UVPSettings::AperturePresets' has a wrong offset!");
static_assert(offsetof(UVPSettings, DefaultShutterSpeedPresets) == 0x000048, "Member 'UVPSettings::DefaultShutterSpeedPresets' has a wrong offset!");
static_assert(offsetof(UVPSettings, DefaultISOPresets) == 0x000058, "Member 'UVPSettings::DefaultISOPresets' has a wrong offset!");
static_assert(offsetof(UVPSettings, DirectorName) == 0x000068, "Member 'UVPSettings::DirectorName' has a wrong offset!");
static_assert(offsetof(UVPSettings, ShowName) == 0x000078, "Member 'UVPSettings::ShowName' has a wrong offset!");
static_assert(offsetof(UVPSettings, Roles) == 0x000088, "Member 'UVPSettings::Roles' has a wrong offset!");

}

