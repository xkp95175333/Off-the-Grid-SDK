#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedThirdPersonCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AdvancedThirdPersonCamera.EATPCInterpolationType
// NumValues: 0x0003
enum class EATPCInterpolationType : uint8
{
	SmoothInterpolation                      = 0,
	ConstInterpolation                       = 1,
	EATPCInterpolationType_MAX               = 2,
};

// Enum AdvancedThirdPersonCamera.EATPCCameraModeScriptTickGroup
// NumValues: 0x0003
enum class EATPCCameraModeScriptTickGroup : uint32
{
	PreCameraObjectTick                      = 0,
	PostCameraObjectTick                     = 1,
	EATPCCameraModeScriptTickGroup_MAX       = 2,
};

// ScriptStruct AdvancedThirdPersonCamera.ATPCLockOnTargetSettings
// 0x0050 (0x0050 - 0x0000)
struct FATPCLockOnTargetSettings final
{
public:
	float                                         TargetResetTime;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTargetOnChangeCameraMode;                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateCameraByYaw;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateCameraByPitch;                               // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA8[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotationSpeed;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalSmoothRotationSpeed;                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationLimits;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaxLockDistance;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTargetOnReachMaxDistance;                    // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA9[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxLockDistance;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCheckTargetVisibility;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetLockOnLostVisibleTarget;                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CheckVisibilityTraceChannel;                       // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardLockOnTarget;                                 // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLockAfterPlayerInput;                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAA[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseLockAfterPlayerInputTime;                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDesiredConeRotation;                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAB[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeisredConeRotationYaw;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTargetRotation;                                // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAC[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotationOffset;                              // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTarget;                                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAD[0x6];                                     // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCLockOnTargetSettings) == 0x000008, "Wrong alignment on FATPCLockOnTargetSettings");
static_assert(sizeof(FATPCLockOnTargetSettings) == 0x000050, "Wrong size on FATPCLockOnTargetSettings");
static_assert(offsetof(FATPCLockOnTargetSettings, TargetResetTime) == 0x000000, "Member 'FATPCLockOnTargetSettings::TargetResetTime' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetTargetOnChangeCameraMode) == 0x000004, "Member 'FATPCLockOnTargetSettings::bResetTargetOnChangeCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, RotateCameraByYaw) == 0x000005, "Member 'FATPCLockOnTargetSettings::RotateCameraByYaw' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, RotateCameraByPitch) == 0x000006, "Member 'FATPCLockOnTargetSettings::RotateCameraByPitch' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, CameraRotationSpeed) == 0x000008, "Member 'FATPCLockOnTargetSettings::CameraRotationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, AdditionalSmoothRotationSpeed) == 0x00000C, "Member 'FATPCLockOnTargetSettings::AdditionalSmoothRotationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseRotationLimits) == 0x000010, "Member 'FATPCLockOnTargetSettings::bUseRotationLimits' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseMaxLockDistance) == 0x000011, "Member 'FATPCLockOnTargetSettings::bUseMaxLockDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetTargetOnReachMaxDistance) == 0x000012, "Member 'FATPCLockOnTargetSettings::bResetTargetOnReachMaxDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, MaxLockDistance) == 0x000014, "Member 'FATPCLockOnTargetSettings::MaxLockDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseCheckTargetVisibility) == 0x000018, "Member 'FATPCLockOnTargetSettings::bUseCheckTargetVisibility' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetLockOnLostVisibleTarget) == 0x000019, "Member 'FATPCLockOnTargetSettings::bResetLockOnLostVisibleTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, CheckVisibilityTraceChannel) == 0x00001A, "Member 'FATPCLockOnTargetSettings::CheckVisibilityTraceChannel' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bHardLockOnTarget) == 0x00001B, "Member 'FATPCLockOnTargetSettings::bHardLockOnTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bPauseLockAfterPlayerInput) == 0x00001C, "Member 'FATPCLockOnTargetSettings::bPauseLockAfterPlayerInput' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, PauseLockAfterPlayerInputTime) == 0x000020, "Member 'FATPCLockOnTargetSettings::PauseLockAfterPlayerInputTime' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseDesiredConeRotation) == 0x000024, "Member 'FATPCLockOnTargetSettings::bUseDesiredConeRotation' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, DeisredConeRotationYaw) == 0x000028, "Member 'FATPCLockOnTargetSettings::DeisredConeRotationYaw' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseTargetRotation) == 0x00002C, "Member 'FATPCLockOnTargetSettings::bUseTargetRotation' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, TargetRotationOffset) == 0x000030, "Member 'FATPCLockOnTargetSettings::TargetRotationOffset' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bEnableDebug) == 0x000048, "Member 'FATPCLockOnTargetSettings::bEnableDebug' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bShowTarget) == 0x000049, "Member 'FATPCLockOnTargetSettings::bShowTarget' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraLocationLagSettings
// 0x0014 (0x0014 - 0x0000)
struct FATPCCameraLocationLagSettings final
{
public:
	bool                                          bEnableCameraLagForXY;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLagForZ;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAE[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugLagMarkers;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraLagSubstepping;                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAF[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxTimeStep;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraLocationLagSettings) == 0x000004, "Wrong alignment on FATPCCameraLocationLagSettings");
static_assert(sizeof(FATPCCameraLocationLagSettings) == 0x000014, "Wrong size on FATPCCameraLocationLagSettings");
static_assert(offsetof(FATPCCameraLocationLagSettings, bEnableCameraLagForXY) == 0x000000, "Member 'FATPCCameraLocationLagSettings::bEnableCameraLagForXY' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bEnableCameraLagForZ) == 0x000001, "Member 'FATPCCameraLocationLagSettings::bEnableCameraLagForZ' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagSpeed) == 0x000004, "Member 'FATPCCameraLocationLagSettings::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagMaxDistance) == 0x000008, "Member 'FATPCCameraLocationLagSettings::CameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bDrawDebugLagMarkers) == 0x00000C, "Member 'FATPCCameraLocationLagSettings::bDrawDebugLagMarkers' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bUseCameraLagSubstepping) == 0x00000D, "Member 'FATPCCameraLocationLagSettings::bUseCameraLagSubstepping' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagMaxTimeStep) == 0x000010, "Member 'FATPCCameraLocationLagSettings::CameraLagMaxTimeStep' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraRotationLagSettings
// 0x000C (0x000C - 0x0000)
struct FATPCCameraRotationLagSettings final
{
public:
	float                                         CameraLagSpeed;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraLagSubstepping;                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxTimeStep;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraRotationLagSettings) == 0x000004, "Wrong alignment on FATPCCameraRotationLagSettings");
static_assert(sizeof(FATPCCameraRotationLagSettings) == 0x00000C, "Wrong size on FATPCCameraRotationLagSettings");
static_assert(offsetof(FATPCCameraRotationLagSettings, CameraLagSpeed) == 0x000000, "Member 'FATPCCameraRotationLagSettings::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FATPCCameraRotationLagSettings, bUseCameraLagSubstepping) == 0x000004, "Member 'FATPCCameraRotationLagSettings::bUseCameraLagSubstepping' has a wrong offset!");
static_assert(offsetof(FATPCCameraRotationLagSettings, CameraLagMaxTimeStep) == 0x000008, "Member 'FATPCCameraRotationLagSettings::CameraLagMaxTimeStep' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCLocationSettings
// 0x00D0 (0x00D0 - 0x0000)
struct FATPCLocationSettings final
{
public:
	bool                                          bEnableCameraLocationLag;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraLocationLagSettings         CameraLocationLagSettings;                         // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRotationLag;                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB2[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraRotationLagSettings         CameraRotationLagSettings;                         // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDoCollisionTest;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbeSize;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ProbeChannel;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoMovementCollisionTest;                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB4[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementCollisionTestDuration;                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementCollisionTestMinLocationDelta;             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             MovementCollisionTestCollisionChannel;             // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB5[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCameraDistance;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCameraDistance;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDistanceToDefaultOnChangeCameraMode;           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB6[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraDistance;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheDistanceForCurrentCameraMode;                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATPCInterpolationType                        ZoomInterpolationType;                             // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB7[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomSpeed;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomDistance;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB8[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           SocketOffsetCurve;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           CrouchSocketOffsetCurve;                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           SlidingSocketOffsetCurve;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           LeglessSocketOffsetCurve;                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketOffsetInterpSpeed;                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationOffsetInterpSpeedCoef;                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTimeAsSocketOffsetIndex;                       // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRelativeLocationOffset;                     // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB9[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocationOffset;                            // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffsetInterpSpeed;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBA[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PitchDistanceCurve;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCLocationSettings) == 0x000008, "Wrong alignment on FATPCLocationSettings");
static_assert(sizeof(FATPCLocationSettings) == 0x0000D0, "Wrong size on FATPCLocationSettings");
static_assert(offsetof(FATPCLocationSettings, bEnableCameraLocationLag) == 0x000000, "Member 'FATPCLocationSettings::bEnableCameraLocationLag' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, CameraLocationLagSettings) == 0x000004, "Member 'FATPCLocationSettings::CameraLocationLagSettings' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bEnableCameraRotationLag) == 0x000018, "Member 'FATPCLocationSettings::bEnableCameraRotationLag' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, CameraRotationLagSettings) == 0x00001C, "Member 'FATPCLocationSettings::CameraRotationLagSettings' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bDoCollisionTest) == 0x000028, "Member 'FATPCLocationSettings::bDoCollisionTest' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ProbeSize) == 0x00002C, "Member 'FATPCLocationSettings::ProbeSize' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ProbeChannel) == 0x000030, "Member 'FATPCLocationSettings::ProbeChannel' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bDoMovementCollisionTest) == 0x000031, "Member 'FATPCLocationSettings::bDoMovementCollisionTest' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestDuration) == 0x000034, "Member 'FATPCLocationSettings::MovementCollisionTestDuration' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestMinLocationDelta) == 0x000038, "Member 'FATPCLocationSettings::MovementCollisionTestMinLocationDelta' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestCollisionChannel) == 0x00003C, "Member 'FATPCLocationSettings::MovementCollisionTestCollisionChannel' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MinCameraDistance) == 0x000040, "Member 'FATPCLocationSettings::MinCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MaxCameraDistance) == 0x000044, "Member 'FATPCLocationSettings::MaxCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bSetDistanceToDefaultOnChangeCameraMode) == 0x000048, "Member 'FATPCLocationSettings::bSetDistanceToDefaultOnChangeCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, DefaultCameraDistance) == 0x00004C, "Member 'FATPCLocationSettings::DefaultCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bCacheDistanceForCurrentCameraMode) == 0x000050, "Member 'FATPCLocationSettings::bCacheDistanceForCurrentCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomInterpolationType) == 0x000051, "Member 'FATPCLocationSettings::ZoomInterpolationType' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomSpeed) == 0x000054, "Member 'FATPCLocationSettings::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomDistance) == 0x000058, "Member 'FATPCLocationSettings::ZoomDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SocketOffsetCurve) == 0x000060, "Member 'FATPCLocationSettings::SocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, CrouchSocketOffsetCurve) == 0x000068, "Member 'FATPCLocationSettings::CrouchSocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SlidingSocketOffsetCurve) == 0x000070, "Member 'FATPCLocationSettings::SlidingSocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, LeglessSocketOffsetCurve) == 0x000078, "Member 'FATPCLocationSettings::LeglessSocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SocketOffsetInterpSpeed) == 0x000080, "Member 'FATPCLocationSettings::SocketOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, LocationOffsetInterpSpeedCoef) == 0x000084, "Member 'FATPCLocationSettings::LocationOffsetInterpSpeedCoef' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bUseTimeAsSocketOffsetIndex) == 0x000088, "Member 'FATPCLocationSettings::bUseTimeAsSocketOffsetIndex' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bEnableRelativeLocationOffset) == 0x000089, "Member 'FATPCLocationSettings::bEnableRelativeLocationOffset' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, RelativeLocationOffset) == 0x000090, "Member 'FATPCLocationSettings::RelativeLocationOffset' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, TargetOffset) == 0x0000A8, "Member 'FATPCLocationSettings::TargetOffset' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, TargetOffsetInterpSpeed) == 0x0000C0, "Member 'FATPCLocationSettings::TargetOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, PitchDistanceCurve) == 0x0000C8, "Member 'FATPCLocationSettings::PitchDistanceCurve' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFollowTerrainSettings
// 0x0028 (0x0028 - 0x0000)
struct FATPCFollowTerrainSettings final
{
public:
	class UCurveVector*                           TerrainAngleSocketOffsetCurve;                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketOffsetInterpSpeed;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TerrainAngleRotationOffsetCurve;                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleRotationInterpSpeed;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleDelayChange;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCFollowTerrainSettings) == 0x000008, "Wrong alignment on FATPCFollowTerrainSettings");
static_assert(sizeof(FATPCFollowTerrainSettings) == 0x000028, "Wrong size on FATPCFollowTerrainSettings");
static_assert(offsetof(FATPCFollowTerrainSettings, TerrainAngleSocketOffsetCurve) == 0x000000, "Member 'FATPCFollowTerrainSettings::TerrainAngleSocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, SocketOffsetInterpSpeed) == 0x000008, "Member 'FATPCFollowTerrainSettings::SocketOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, TerrainAngleRotationOffsetCurve) == 0x000010, "Member 'FATPCFollowTerrainSettings::TerrainAngleRotationOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, AngleRotationInterpSpeed) == 0x000018, "Member 'FATPCFollowTerrainSettings::AngleRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, AngleDelayChange) == 0x00001C, "Member 'FATPCFollowTerrainSettings::AngleDelayChange' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, bEnableDebug) == 0x000020, "Member 'FATPCFollowTerrainSettings::bEnableDebug' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRotationOffsetSettings
// 0x0018 (0x0018 - 0x0000)
struct FATPCRotationOffsetSettings final
{
public:
	float                                         StartOffsetDelay;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeed;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATPCInterpolationType                        InterpolationType;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBD[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchOffset;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateOnlyIfMovement;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinMovementSpeedForActivate;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCRotationOffsetSettings) == 0x000004, "Wrong alignment on FATPCRotationOffsetSettings");
static_assert(sizeof(FATPCRotationOffsetSettings) == 0x000018, "Wrong size on FATPCRotationOffsetSettings");
static_assert(offsetof(FATPCRotationOffsetSettings, StartOffsetDelay) == 0x000000, "Member 'FATPCRotationOffsetSettings::StartOffsetDelay' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, ChangeRotationSpeed) == 0x000004, "Member 'FATPCRotationOffsetSettings::ChangeRotationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, InterpolationType) == 0x000008, "Member 'FATPCRotationOffsetSettings::InterpolationType' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, PitchOffset) == 0x00000C, "Member 'FATPCRotationOffsetSettings::PitchOffset' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, bActivateOnlyIfMovement) == 0x000010, "Member 'FATPCRotationOffsetSettings::bActivateOnlyIfMovement' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, MinMovementSpeedForActivate) == 0x000014, "Member 'FATPCRotationOffsetSettings::MinMovementSpeedForActivate' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRoofCollisionCheckSettings
// 0x0088 (0x0088 - 0x0000)
struct FATPCRoofCollisionCheckSettings final
{
public:
	TArray<EObjectTypeQuery>                      TraceObjectTypes;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                EyesBoxTraceHalfSize;                              // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoofTraceAngleFirst;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBF[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RoofBoxTraceHalfSizeFirst;                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoofTraceAngleSecond;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC0[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RoofBoxTraceHalfSizeSecond;                        // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCRotationOffsetSettings            RotationOffsetSettings;                            // 0x0068(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC1[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCRoofCollisionCheckSettings) == 0x000008, "Wrong alignment on FATPCRoofCollisionCheckSettings");
static_assert(sizeof(FATPCRoofCollisionCheckSettings) == 0x000088, "Wrong size on FATPCRoofCollisionCheckSettings");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, TraceObjectTypes) == 0x000000, "Member 'FATPCRoofCollisionCheckSettings::TraceObjectTypes' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, EyesBoxTraceHalfSize) == 0x000010, "Member 'FATPCRoofCollisionCheckSettings::EyesBoxTraceHalfSize' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofTraceAngleFirst) == 0x000028, "Member 'FATPCRoofCollisionCheckSettings::RoofTraceAngleFirst' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeFirst) == 0x000030, "Member 'FATPCRoofCollisionCheckSettings::RoofBoxTraceHalfSizeFirst' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofTraceAngleSecond) == 0x000048, "Member 'FATPCRoofCollisionCheckSettings::RoofTraceAngleSecond' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeSecond) == 0x000050, "Member 'FATPCRoofCollisionCheckSettings::RoofBoxTraceHalfSizeSecond' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RotationOffsetSettings) == 0x000068, "Member 'FATPCRoofCollisionCheckSettings::RotationOffsetSettings' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, bEnableDebug) == 0x000080, "Member 'FATPCRoofCollisionCheckSettings::bEnableDebug' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCViewRotationToActorRotationSettings
// 0x0014 (0x0014 - 0x0000)
struct FATPCViewRotationToActorRotationSettings final
{
public:
	bool                                          bIterruptOnActorRotationChanged;                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDeltaForChange;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartChangeDelay;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeed;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeedInterpSpeed;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCViewRotationToActorRotationSettings) == 0x000004, "Wrong alignment on FATPCViewRotationToActorRotationSettings");
static_assert(sizeof(FATPCViewRotationToActorRotationSettings) == 0x000014, "Wrong size on FATPCViewRotationToActorRotationSettings");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, bIterruptOnActorRotationChanged) == 0x000000, "Member 'FATPCViewRotationToActorRotationSettings::bIterruptOnActorRotationChanged' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, MaxDeltaForChange) == 0x000004, "Member 'FATPCViewRotationToActorRotationSettings::MaxDeltaForChange' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, StartChangeDelay) == 0x000008, "Member 'FATPCViewRotationToActorRotationSettings::StartChangeDelay' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, ChangeRotationSpeed) == 0x00000C, "Member 'FATPCViewRotationToActorRotationSettings::ChangeRotationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, ChangeRotationSpeedInterpSpeed) == 0x000010, "Member 'FATPCViewRotationToActorRotationSettings::ChangeRotationSpeedInterpSpeed' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRotationSettings
// 0x0100 (0x0100 - 0x0000)
struct FATPCRotationSettings final
{
public:
	float                                         ViewPitchMin;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMax;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurvesAsLeglessPitchLimits;                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeglessViewPitchMin;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeglessViewPitchMax;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LeglessPitchMinCurve;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeglessPitchMaxCurve;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMin;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMax;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeglessViewYawMin;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeglessViewYawMax;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRelativePitchLimits;                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRelativeYawLimits;                             // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC5[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewInterpolationSpeed;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationOffset;                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC6[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRotationOffsetSettings            RotationOffsetSettings;                            // 0x0044(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRoofCollisionCheckSettings;                 // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC7[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRoofCollisionCheckSettings        RoofCollisionCheckSettings;                        // 0x0060(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableViewRotationToActorRotation;                // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC8[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCViewRotationToActorRotationSettings ViewRotationToActorRotationSettings;               // 0x00EC(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCRotationSettings) == 0x000008, "Wrong alignment on FATPCRotationSettings");
static_assert(sizeof(FATPCRotationSettings) == 0x000100, "Wrong size on FATPCRotationSettings");
static_assert(offsetof(FATPCRotationSettings, ViewPitchMin) == 0x000000, "Member 'FATPCRotationSettings::ViewPitchMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewPitchMax) == 0x000004, "Member 'FATPCRotationSettings::ViewPitchMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bUseCurvesAsLeglessPitchLimits) == 0x000008, "Member 'FATPCRotationSettings::bUseCurvesAsLeglessPitchLimits' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessViewPitchMin) == 0x00000C, "Member 'FATPCRotationSettings::LeglessViewPitchMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessViewPitchMax) == 0x000010, "Member 'FATPCRotationSettings::LeglessViewPitchMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessPitchMinCurve) == 0x000018, "Member 'FATPCRotationSettings::LeglessPitchMinCurve' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessPitchMaxCurve) == 0x000020, "Member 'FATPCRotationSettings::LeglessPitchMaxCurve' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewYawMin) == 0x000028, "Member 'FATPCRotationSettings::ViewYawMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewYawMax) == 0x00002C, "Member 'FATPCRotationSettings::ViewYawMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessViewYawMin) == 0x000030, "Member 'FATPCRotationSettings::LeglessViewYawMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, LeglessViewYawMax) == 0x000034, "Member 'FATPCRotationSettings::LeglessViewYawMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bUseRelativePitchLimits) == 0x000038, "Member 'FATPCRotationSettings::bUseRelativePitchLimits' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bUseRelativeYawLimits) == 0x000039, "Member 'FATPCRotationSettings::bUseRelativeYawLimits' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewInterpolationSpeed) == 0x00003C, "Member 'FATPCRotationSettings::ViewInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableRotationOffset) == 0x000040, "Member 'FATPCRotationSettings::bEnableRotationOffset' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, RotationOffsetSettings) == 0x000044, "Member 'FATPCRotationSettings::RotationOffsetSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableRoofCollisionCheckSettings) == 0x00005C, "Member 'FATPCRotationSettings::bEnableRoofCollisionCheckSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, RoofCollisionCheckSettings) == 0x000060, "Member 'FATPCRotationSettings::RoofCollisionCheckSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableViewRotationToActorRotation) == 0x0000E8, "Member 'FATPCRotationSettings::bEnableViewRotationToActorRotation' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewRotationToActorRotationSettings) == 0x0000EC, "Member 'FATPCRotationSettings::ViewRotationToActorRotationSettings' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFOVSettings
// 0x0018 (0x0018 - 0x0000)
struct FATPCFOVSettings final
{
public:
	float                                         CameraFOV;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationSpeed;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PitchRotationFOVModifier;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MovementSpeedFOVModifier;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCFOVSettings) == 0x000008, "Wrong alignment on FATPCFOVSettings");
static_assert(sizeof(FATPCFOVSettings) == 0x000018, "Wrong size on FATPCFOVSettings");
static_assert(offsetof(FATPCFOVSettings, CameraFOV) == 0x000000, "Member 'FATPCFOVSettings::CameraFOV' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, InterpolationSpeed) == 0x000004, "Member 'FATPCFOVSettings::InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, PitchRotationFOVModifier) == 0x000008, "Member 'FATPCFOVSettings::PitchRotationFOVModifier' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, MovementSpeedFOVModifier) == 0x000010, "Member 'FATPCFOVSettings::MovementSpeedFOVModifier' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFadeSettings
// 0x0030 (0x0030 - 0x0000)
struct FATPCFadeSettings final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFadeMinValue;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFadeMaxValue;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialFadeParamNames;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             FadeChannel;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeSelfIfCollision;                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomFadeOutTimeForSelfFade;                  // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC9[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfFadeCustomFadeOutTime;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfFadeCheckRadius;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfFadeAttachedActors;                           // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugFadeShape;                               // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECA[0x2];                                     // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCFadeSettings) == 0x000008, "Wrong alignment on FATPCFadeSettings");
static_assert(sizeof(FATPCFadeSettings) == 0x000030, "Wrong size on FATPCFadeSettings");
static_assert(offsetof(FATPCFadeSettings, FadeInTime) == 0x000000, "Member 'FATPCFadeSettings::FadeInTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, FadeOutTime) == 0x000004, "Member 'FATPCFadeSettings::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeMinValue) == 0x000008, "Member 'FATPCFadeSettings::MaterialFadeMinValue' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeMaxValue) == 0x00000C, "Member 'FATPCFadeSettings::MaterialFadeMaxValue' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeParamNames) == 0x000010, "Member 'FATPCFadeSettings::MaterialFadeParamNames' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, FadeChannel) == 0x000020, "Member 'FATPCFadeSettings::FadeChannel' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bFadeSelfIfCollision) == 0x000021, "Member 'FATPCFadeSettings::bFadeSelfIfCollision' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bUseCustomFadeOutTimeForSelfFade) == 0x000022, "Member 'FATPCFadeSettings::bUseCustomFadeOutTimeForSelfFade' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, SelfFadeCustomFadeOutTime) == 0x000024, "Member 'FATPCFadeSettings::SelfFadeCustomFadeOutTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, SelfFadeCheckRadius) == 0x000028, "Member 'FATPCFadeSettings::SelfFadeCheckRadius' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bSelfFadeAttachedActors) == 0x00002C, "Member 'FATPCFadeSettings::bSelfFadeAttachedActors' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bDrawDebugFadeShape) == 0x00002D, "Member 'FATPCFadeSettings::bDrawDebugFadeShape' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraShakesSettings
// 0x0018 (0x0018 - 0x0000)
struct FATPCCameraShakesSettings final
{
public:
	TSubclassOf<class UCameraShakeBase>           EnterToModeCameraShake;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           RegularCameraShake;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedStopAllCameraShakeOnEnterToCameraMode;        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCCameraShakesSettings) == 0x000008, "Wrong alignment on FATPCCameraShakesSettings");
static_assert(sizeof(FATPCCameraShakesSettings) == 0x000018, "Wrong size on FATPCCameraShakesSettings");
static_assert(offsetof(FATPCCameraShakesSettings, EnterToModeCameraShake) == 0x000000, "Member 'FATPCCameraShakesSettings::EnterToModeCameraShake' has a wrong offset!");
static_assert(offsetof(FATPCCameraShakesSettings, RegularCameraShake) == 0x000008, "Member 'FATPCCameraShakesSettings::RegularCameraShake' has a wrong offset!");
static_assert(offsetof(FATPCCameraShakesSettings, bNeedStopAllCameraShakeOnEnterToCameraMode) == 0x000010, "Member 'FATPCCameraShakesSettings::bNeedStopAllCameraShakeOnEnterToCameraMode' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraMode
// 0x02D8 (0x02D8 - 0x0000)
struct FATPCCameraMode final
{
public:
	bool                                          bEnableLocationSettings;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCLocationSettings                  LocationSettings;                                  // 0x0008(0x00D0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationSettings;                           // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECD[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRotationSettings                  RotationSettings;                                  // 0x00E0(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableFOVSettings;                                // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECE[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFOVSettings                       FOVSettings;                                       // 0x01E8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableFadeSettings;                               // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECF[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFadeSettings                      FadeSettings;                                      // 0x0208(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableFollowTerrainSettings;                      // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED0[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFollowTerrainSettings             FollowTerrainSettings;                             // 0x0240(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShakesSettings;                       // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED1[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraShakesSettings              CameraShakesSettings;                              // 0x0270(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FATPCLockOnTargetSettings              LockOnTargetSettings;                              // 0x0288(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraMode) == 0x000008, "Wrong alignment on FATPCCameraMode");
static_assert(sizeof(FATPCCameraMode) == 0x0002D8, "Wrong size on FATPCCameraMode");
static_assert(offsetof(FATPCCameraMode, bEnableLocationSettings) == 0x000000, "Member 'FATPCCameraMode::bEnableLocationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, LocationSettings) == 0x000008, "Member 'FATPCCameraMode::LocationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableRotationSettings) == 0x0000D8, "Member 'FATPCCameraMode::bEnableRotationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, RotationSettings) == 0x0000E0, "Member 'FATPCCameraMode::RotationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFOVSettings) == 0x0001E0, "Member 'FATPCCameraMode::bEnableFOVSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FOVSettings) == 0x0001E8, "Member 'FATPCCameraMode::FOVSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFadeSettings) == 0x000200, "Member 'FATPCCameraMode::bEnableFadeSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FadeSettings) == 0x000208, "Member 'FATPCCameraMode::FadeSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFollowTerrainSettings) == 0x000238, "Member 'FATPCCameraMode::bEnableFollowTerrainSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FollowTerrainSettings) == 0x000240, "Member 'FATPCCameraMode::FollowTerrainSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableCameraShakesSettings) == 0x000268, "Member 'FATPCCameraMode::bEnableCameraShakesSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, CameraShakesSettings) == 0x000270, "Member 'FATPCCameraMode::CameraShakesSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, LockOnTargetSettings) == 0x000288, "Member 'FATPCCameraMode::LockOnTargetSettings' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCOverrideCameraRotation
// 0x0020 (0x0020 - 0x0000)
struct FATPCOverrideCameraRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseRotationLimits;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlayerInput;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED2[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedAfterPlayerInput;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCOverrideCameraRotation) == 0x000008, "Wrong alignment on FATPCOverrideCameraRotation");
static_assert(sizeof(FATPCOverrideCameraRotation) == 0x000020, "Wrong size on FATPCOverrideCameraRotation");
static_assert(offsetof(FATPCOverrideCameraRotation, Rotation) == 0x000000, "Member 'FATPCOverrideCameraRotation::Rotation' has a wrong offset!");
static_assert(offsetof(FATPCOverrideCameraRotation, bUseRotationLimits) == 0x000018, "Member 'FATPCOverrideCameraRotation::bUseRotationLimits' has a wrong offset!");
static_assert(offsetof(FATPCOverrideCameraRotation, bAllowPlayerInput) == 0x000019, "Member 'FATPCOverrideCameraRotation::bAllowPlayerInput' has a wrong offset!");
static_assert(offsetof(FATPCOverrideCameraRotation, InterpSpeedAfterPlayerInput) == 0x00001C, "Member 'FATPCOverrideCameraRotation::InterpSpeedAfterPlayerInput' has a wrong offset!");

}

