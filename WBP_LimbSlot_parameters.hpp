#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LimbSlot

#include "Basic.hpp"

#include "G01_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_LimbSlot.WBP_LimbSlot_C.BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_LimbSlot_C_BndEvt__WBP_WeaponSlot_PocketButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.ExecuteUbergraph_WBP_LimbSlot
// 0x0138 (0x0138 - 0x0000)
struct WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B49[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzBaseCharacter*                       Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     K2Node_CustomEvent_Attribute;                      // 0x0028(0x0038)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_OldValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable;                              // 0x0070(0x0038)(HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGzPlayerViewTargetInterface> K2Node_DynamicCast_AsGz_Player_View_Target_Interface; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4A[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGzBaseCharacter*                       CallFunc_GetViewTargetCharacter_ReturnValue;       // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4B[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGzInvItem                             K2Node_Event_NewItem;                              // 0x00E8(0x0010)(ConstParm)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGzBodyPartItemData*                    K2Node_DynamicCast_AsGz_Body_Part_Item_Data;       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4C[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzAsyncTaskAttributeChanged*           CallFunc_ListenForAttributeChange_ReturnValue;     // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4D[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot");
static_assert(sizeof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot) == 0x000138, "Wrong size on WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, EntryPoint) == 0x000000, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, Temp_object_Variable) == 0x000008, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000020, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_CustomEvent_Attribute) == 0x000028, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_CustomEvent_Attribute' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_CustomEvent_NewValue) == 0x000060, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_CustomEvent_OldValue) == 0x000064, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_CustomEvent_OldValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, Temp_real_Variable) == 0x000068, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, Temp_real_Variable_1) == 0x00006C, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, Temp_struct_Variable) == 0x000070, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x0000A8, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_DynamicCast_AsGz_Player_View_Target_Interface) == 0x0000B0, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_DynamicCast_AsGz_Player_View_Target_Interface' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_GetViewTargetCharacter_ReturnValue) == 0x0000C8, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_GetViewTargetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_ComponentBoundEvent_Button_1) == 0x0000D0, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_ComponentBoundEvent_Button) == 0x0000D8, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_Event_IsDesignTime) == 0x0000E0, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_Event_NewItem) == 0x0000E8, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_Event_NewItem' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000F8, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000100, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_GetItemData_ReturnValue) == 0x000108, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_GetItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_DynamicCast_AsGz_Body_Part_Item_Data) == 0x000110, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_DynamicCast_AsGz_Body_Part_Item_Data' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_ListenForAttributeChange_ReturnValue) == 0x000120, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_ListenForAttributeChange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_IsValid_ReturnValue) == 0x000128, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x00012C, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000130, "Member 'WBP_LimbSlot_C_ExecuteUbergraph_WBP_LimbSlot::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.GetLimbAbility
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_LimbSlot_C_GetLimbAbility final
{
public:
	class UGzGA_BaseLimbAbility*                  Ability;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UGzGA_BaseLimbAbility*                  AbilityFound;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGzCharacter*                           K2Node_DynamicCast_AsGz_Character;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x004C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B50[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue; // 0x0058(0x0020)()
	TArray<class UGzGameplayAbility*>             CallFunc_GetAbilitiesForInventorySlots_OutAbilities; // 0x0078(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B51[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGameplayAbility*                     CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B52[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGA_BaseLimbAbility*                  K2Node_DynamicCast_AsGz_GA_Base_Limb_Ability;      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_GetLimbAbility) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_GetLimbAbility");
static_assert(sizeof(WBP_LimbSlot_C_GetLimbAbility) == 0x0000B0, "Wrong size on WBP_LimbSlot_C_GetLimbAbility");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Ability) == 0x000000, "Member 'WBP_LimbSlot_C_GetLimbAbility::Ability' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, AbilityFound) == 0x000008, "Member 'WBP_LimbSlot_C_GetLimbAbility::AbilityFound' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_byte_Variable) == 0x000010, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_struct_Variable) == 0x000014, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_struct_Variable_1) == 0x00001C, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_struct_Variable_2) == 0x000024, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'WBP_LimbSlot_C_GetLimbAbility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000038, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, K2Node_DynamicCast_AsGz_Character) == 0x000040, "Member 'WBP_LimbSlot_C_GetLimbAbility::K2Node_DynamicCast_AsGz_Character' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WBP_LimbSlot_C_GetLimbAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, K2Node_Select_Default) == 0x00004C, "Member 'WBP_LimbSlot_C_GetLimbAbility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue) == 0x000058, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_GetAbilitiesForInventorySlots_OutAbilities) == 0x000078, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_GetAbilitiesForInventorySlots_OutAbilities' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_Array_Get_Item) == 0x000090, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'WBP_LimbSlot_C_GetLimbAbility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, K2Node_DynamicCast_AsGz_GA_Base_Limb_Ability) == 0x0000A0, "Member 'WBP_LimbSlot_C_GetLimbAbility::K2Node_DynamicCast_AsGz_GA_Base_Limb_Ability' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_GetLimbAbility, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'WBP_LimbSlot_C_GetLimbAbility::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.HandleEmptyItem
// 0x0010 (0x0010 - 0x0000)
struct WBP_LimbSlot_C_HandleEmptyItem final
{
public:
	class UWBP_Inventory_BaseButton_C*            K2Node_DynamicCast_AsWBP_Inventory_Base_Button;    // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_HandleEmptyItem) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_HandleEmptyItem");
static_assert(sizeof(WBP_LimbSlot_C_HandleEmptyItem) == 0x000010, "Wrong size on WBP_LimbSlot_C_HandleEmptyItem");
static_assert(offsetof(WBP_LimbSlot_C_HandleEmptyItem, K2Node_DynamicCast_AsWBP_Inventory_Base_Button) == 0x000000, "Member 'WBP_LimbSlot_C_HandleEmptyItem::K2Node_DynamicCast_AsWBP_Inventory_Base_Button' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleEmptyItem, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'WBP_LimbSlot_C_HandleEmptyItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleEmptyItem, CallFunc_IsHovered_ReturnValue) == 0x000009, "Member 'WBP_LimbSlot_C_HandleEmptyItem::CallFunc_IsHovered_ReturnValue' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.HandleValidItem
// 0x0050 (0x0050 - 0x0000)
struct WBP_LimbSlot_C_HandleValidItem final
{
public:
	struct FGzInvItem                             Param_Item;                                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UGzItemData*                            CallFunc_GetItemData_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGzItemRarity                                 CallFunc_GetRarity_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B53[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B54[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGzGA_BaseLimbAbility*                  CallFunc_GetLimbAbility_Ability;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B55[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentCharges_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0040(0x0010)()
};
static_assert(alignof(WBP_LimbSlot_C_HandleValidItem) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_HandleValidItem");
static_assert(sizeof(WBP_LimbSlot_C_HandleValidItem) == 0x000050, "Wrong size on WBP_LimbSlot_C_HandleValidItem");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, Param_Item) == 0x000000, "Member 'WBP_LimbSlot_C_HandleValidItem::Param_Item' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_GetItemData_ReturnValue) == 0x000010, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_GetItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_GetRarity_ReturnValue) == 0x000018, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_GetRarityColor_ReturnValue) == 0x00001C, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_GetLimbAbility_Ability) == 0x000030, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_GetLimbAbility_Ability' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_GetCurrentCharges_ReturnValue) == 0x00003C, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_GetCurrentCharges_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_HandleValidItem, CallFunc_Conv_IntToText_ReturnValue) == 0x000040, "Member 'WBP_LimbSlot_C_HandleValidItem::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.InitAttributes
// 0x0288 (0x0288 - 0x0000)
struct WBP_LimbSlot_C_InitAttributes final
{
public:
	EGzLimbType                                   Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B56[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable;                          // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_1;                        // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_2;                        // 0x0058(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable_1;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B57[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Temp_struct_Variable;                              // 0x0088(0x0038)(HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable_1;                            // 0x00C0(0x0038)(HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable_2;                            // 0x00F8(0x0038)(HasGetValueTypeHash)
	EGzLimbType                                   Temp_byte_Variable_2;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B58[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Temp_struct_Variable_3;                            // 0x0138(0x0038)(HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable_4;                            // 0x0170(0x0038)(HasGetValueTypeHash)
	struct FGameplayAttribute                     Temp_struct_Variable_5;                            // 0x01A8(0x0038)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              K2Node_Select_Default;                             // 0x01E0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B59[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     K2Node_Select_Default_1;                           // 0x0210(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_1;                 // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_2;                 // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B5A[0x6];                                     // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     K2Node_Select_Default_2;                           // 0x0250(0x0038)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_InitAttributes) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_InitAttributes");
static_assert(sizeof(WBP_LimbSlot_C_InitAttributes) == 0x000288, "Wrong size on WBP_LimbSlot_C_InitAttributes");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_byte_Variable) == 0x000000, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_softobject_Variable) == 0x000008, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_softobject_Variable_1) == 0x000030, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_softobject_Variable_2) == 0x000058, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_softobject_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_byte_Variable_1) == 0x000080, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable) == 0x000088, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable_1) == 0x0000C0, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable_2) == 0x0000F8, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_byte_Variable_2) == 0x000130, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable_3) == 0x000138, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable_4) == 0x000170, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, Temp_struct_Variable_5) == 0x0001A8, "Member 'WBP_LimbSlot_C_InitAttributes::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, K2Node_Select_Default) == 0x0001E0, "Member 'WBP_LimbSlot_C_InitAttributes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, CallFunc_MatchesTag_ReturnValue) == 0x000208, "Member 'WBP_LimbSlot_C_InitAttributes::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, K2Node_Select_Default_1) == 0x000210, "Member 'WBP_LimbSlot_C_InitAttributes::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, CallFunc_MatchesTag_ReturnValue_1) == 0x000248, "Member 'WBP_LimbSlot_C_InitAttributes::CallFunc_MatchesTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, CallFunc_MatchesTag_ReturnValue_2) == 0x000249, "Member 'WBP_LimbSlot_C_InitAttributes::CallFunc_MatchesTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_InitAttributes, K2Node_Select_Default_2) == 0x000250, "Member 'WBP_LimbSlot_C_InitAttributes::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385
// 0x0040 (0x0040 - 0x0000)
struct WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385 final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         NewValue;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldValue;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385");
static_assert(sizeof(WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385) == 0x000040, "Wrong size on WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385");
static_assert(offsetof(WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385, Attribute) == 0x000000, "Member 'WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385::Attribute' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385, NewValue) == 0x000038, "Member 'WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385, OldValue) == 0x00003C, "Member 'WBP_LimbSlot_C_OnAttributeChanged_439C44584D077F0BCBB5A9B27D97E385::OldValue' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.OnPocketChanged_BP
// 0x0010 (0x0010 - 0x0000)
struct WBP_LimbSlot_C_OnPocketChanged_BP final
{
public:
	struct FGzInvItem                             NewItem;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_LimbSlot_C_OnPocketChanged_BP) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_OnPocketChanged_BP");
static_assert(sizeof(WBP_LimbSlot_C_OnPocketChanged_BP) == 0x000010, "Wrong size on WBP_LimbSlot_C_OnPocketChanged_BP");
static_assert(offsetof(WBP_LimbSlot_C_OnPocketChanged_BP, NewItem) == 0x000000, "Member 'WBP_LimbSlot_C_OnPocketChanged_BP::NewItem' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_LimbSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_LimbSlot_C_PreConstruct");
static_assert(sizeof(WBP_LimbSlot_C_PreConstruct) == 0x000001, "Wrong size on WBP_LimbSlot_C_PreConstruct");
static_assert(offsetof(WBP_LimbSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_LimbSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_LimbSlot.WBP_LimbSlot_C.UpdateLimbHealth
// 0x0040 (0x0040 - 0x0000)
struct WBP_LimbSlot_C_UpdateLimbHealth final
{
public:
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B5B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B5C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast_1;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LimbSlot_C_UpdateLimbHealth) == 0x000008, "Wrong alignment on WBP_LimbSlot_C_UpdateLimbHealth");
static_assert(sizeof(WBP_LimbSlot_C_UpdateLimbHealth) == 0x000040, "Wrong size on WBP_LimbSlot_C_UpdateLimbHealth");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute) == 0x000000, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue) == 0x000004, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1) == 0x000008, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1) == 0x00000C, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SelectFloat_ReturnValue_1) == 0x000018, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SafeDivide_ReturnValue) == 0x000020, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SelectFloat_A_ImplicitCast) == 0x000028, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SelectFloat_A_ImplicitCast_1) == 0x000030, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SelectFloat_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_LimbSlot_C_UpdateLimbHealth, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x000038, "Member 'WBP_LimbSlot_C_UpdateLimbHealth::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

}

