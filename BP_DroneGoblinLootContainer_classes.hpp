#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DroneGoblinLootContainer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "G01_structs.hpp"
#include "BP_LootContainer_Crate_HighV2_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DroneGoblinLootContainer.BP_DroneGoblinLootContainer_C
// 0x0078 (0x0408 - 0x0390)
class ABP_DroneGoblinLootContainer_C final : public ABP_LootContainer_Crate_HighV2_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DroneGoblinLootContainer_C;      // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Military_Lootbox_D_lid_dw;                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzStreamableComponent*                 GzStreamable;                                      // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGzPhysicsSimulationSyncComponent*      GzPhysicsSimulationSync;                           // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGzImpulseInfo                         In_Impulse_Info;                                   // 0x03B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           CheckGroundTimer;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InitialHeight;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHeight;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DroneCrateDestrDelay;                              // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CrateCouldBeOpened;                                // 0x03F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50AE[0x7];                                     // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           OpenChestAnimMontageDownSide;                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void StartSimulation();
	void StartCheckingForGround();
	void SetOpenedMaterials();
	void SetOpenAnimation();
	void SetInActiveMaterials();
	void SetActiveMaterials();
	void ReceiveBeginPlay();
	void OnRep_CrateCouldBeOpened();
	void ObjectiveExpiredCrateDestruction(double Delay);
	void IsDownSide(bool* Param_IsDownSide);
	void HitGround();
	void GetOpenChestAnimMontage(class UAnimMontage** OpenMontage);
	void ExecuteUbergraph_BP_DroneGoblinLootContainer(int32 EntryPoint);
	void DestroyDroneCrate();
	void CheckForGround();
	void BndEvt__BP_LootContainer_LoadoutV2_GzPhysicsSimulationSync_K2Node_ComponentBoundEvent_0_GzSleepStarted__DelegateSignature();
	void BndEvt__BP_DroneGoblinLootContainer_InteractableComponent_K2Node_ComponentBoundEvent_2_GzOnInteract__DelegateSignature(class AActor* InteractedBy, const class UGzInteractableComponent* Interactable);
	void Awake();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DroneGoblinLootContainer_C">();
	}
	static class ABP_DroneGoblinLootContainer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DroneGoblinLootContainer_C>();
	}
};
static_assert(alignof(ABP_DroneGoblinLootContainer_C) == 0x000008, "Wrong alignment on ABP_DroneGoblinLootContainer_C");
static_assert(sizeof(ABP_DroneGoblinLootContainer_C) == 0x000408, "Wrong size on ABP_DroneGoblinLootContainer_C");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, UberGraphFrame_BP_DroneGoblinLootContainer_C) == 0x000390, "Member 'ABP_DroneGoblinLootContainer_C::UberGraphFrame_BP_DroneGoblinLootContainer_C' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, SM_Military_Lootbox_D_lid_dw) == 0x000398, "Member 'ABP_DroneGoblinLootContainer_C::SM_Military_Lootbox_D_lid_dw' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, GzStreamable) == 0x0003A0, "Member 'ABP_DroneGoblinLootContainer_C::GzStreamable' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, GzPhysicsSimulationSync) == 0x0003A8, "Member 'ABP_DroneGoblinLootContainer_C::GzPhysicsSimulationSync' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, In_Impulse_Info) == 0x0003B0, "Member 'ABP_DroneGoblinLootContainer_C::In_Impulse_Info' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, CheckGroundTimer) == 0x0003D8, "Member 'ABP_DroneGoblinLootContainer_C::CheckGroundTimer' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, InitialHeight) == 0x0003E0, "Member 'ABP_DroneGoblinLootContainer_C::InitialHeight' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, CurrentHeight) == 0x0003E8, "Member 'ABP_DroneGoblinLootContainer_C::CurrentHeight' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, DroneCrateDestrDelay) == 0x0003F0, "Member 'ABP_DroneGoblinLootContainer_C::DroneCrateDestrDelay' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, CrateCouldBeOpened) == 0x0003F8, "Member 'ABP_DroneGoblinLootContainer_C::CrateCouldBeOpened' has a wrong offset!");
static_assert(offsetof(ABP_DroneGoblinLootContainer_C, OpenChestAnimMontageDownSide) == 0x000400, "Member 'ABP_DroneGoblinLootContainer_C::OpenChestAnimMontageDownSide' has a wrong offset!");

}

