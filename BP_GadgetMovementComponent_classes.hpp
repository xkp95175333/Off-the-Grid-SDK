#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GadgetMovementComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_GadgetMovementComponentData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GadgetMovementComponent.BP_GadgetMovementComponent_C
// 0x0238 (0x02E0 - 0x00A8)
class UBP_GadgetMovementComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CurrentFlyTime;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpeedDown;                                         // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MoveRotation;                                      // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocation;                                    // 0x00E8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SpeedCurve;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0108(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MoveLocation;                                      // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpeed;                                        // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalMoveTimeCurrent;                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CollisionBlendTimeCurrent;                         // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CollisionRotation;                                 // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161A[0x8];                                     // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GadgetMovementComponentData         MoveData;                                          // 0x0170(0x00A0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPosition;                                        // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSet<ECollisionChannel>                       EndMoveCollisionTypes;                             // 0x0220(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPrimitiveComponent*                    ColidedComponent;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        PingPrediction;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PingPredictionFrame;                               // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PingPredictionCurrent;                             // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Additional_Move_Time;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gravity;                                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirFriction;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpeedCurrent;                                      // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnReplicatedDataUpdated;                           // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   ColidedBone;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttachToTeamMates;                                // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AssignOnAttachedDestroy();
	void ExecuteUbergraph_BP_GadgetMovementComponent(int32 EntryPoint);
	void GetDeltaTimeForClient(double* Delta);
	struct FRotator MakeRotFromHitNormal(const struct FVector& Z);
	void Move(const struct FS_GadgetMovementData& Data, bool Move_Data_Need_Attach);
	void OnDestroyed_Event(class AActor* DestroyedActor);
	void OnPosition__DelegateSignature();
	void OnRep_MoveData();
	void OnReplicatedDataUpdated__DelegateSignature();
	void ReceiveTick(float DeltaSeconds);
	void Reset();
	void ShortestBone(class AGzMultiPartCharacter* Char, class AActor* Actor, class FName* bone);
	void Update_Location_Delta_Time(double DeltaTime);
	void UpdateOnStateChanged();
	void UpdatePositionOnClient();
	void UpdatePositionOnServer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GadgetMovementComponent_C">();
	}
	static class UBP_GadgetMovementComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GadgetMovementComponent_C>();
	}
};
static_assert(alignof(UBP_GadgetMovementComponent_C) == 0x000010, "Wrong alignment on UBP_GadgetMovementComponent_C");
static_assert(sizeof(UBP_GadgetMovementComponent_C) == 0x0002E0, "Wrong size on UBP_GadgetMovementComponent_C");
static_assert(offsetof(UBP_GadgetMovementComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_GadgetMovementComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, CurrentFlyTime) == 0x0000B0, "Member 'UBP_GadgetMovementComponent_C::CurrentFlyTime' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, SpeedDown) == 0x0000B8, "Member 'UBP_GadgetMovementComponent_C::SpeedDown' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, MoveRotation) == 0x0000D0, "Member 'UBP_GadgetMovementComponent_C::MoveRotation' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, TargetLocation) == 0x0000E8, "Member 'UBP_GadgetMovementComponent_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, SpeedCurve) == 0x000100, "Member 'UBP_GadgetMovementComponent_C::SpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, TargetRotation) == 0x000108, "Member 'UBP_GadgetMovementComponent_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, MoveLocation) == 0x000120, "Member 'UBP_GadgetMovementComponent_C::MoveLocation' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, BlendSpeed) == 0x000138, "Member 'UBP_GadgetMovementComponent_C::BlendSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, AdditionalMoveTimeCurrent) == 0x000140, "Member 'UBP_GadgetMovementComponent_C::AdditionalMoveTimeCurrent' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, CollisionBlendTimeCurrent) == 0x000148, "Member 'UBP_GadgetMovementComponent_C::CollisionBlendTimeCurrent' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, CollisionRotation) == 0x000150, "Member 'UBP_GadgetMovementComponent_C::CollisionRotation' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, MoveData) == 0x000170, "Member 'UBP_GadgetMovementComponent_C::MoveData' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, OnPosition) == 0x000210, "Member 'UBP_GadgetMovementComponent_C::OnPosition' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, EndMoveCollisionTypes) == 0x000220, "Member 'UBP_GadgetMovementComponent_C::EndMoveCollisionTypes' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, ColidedComponent) == 0x000270, "Member 'UBP_GadgetMovementComponent_C::ColidedComponent' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, PingPrediction) == 0x000278, "Member 'UBP_GadgetMovementComponent_C::PingPrediction' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, PingPredictionFrame) == 0x000280, "Member 'UBP_GadgetMovementComponent_C::PingPredictionFrame' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, PingPredictionCurrent) == 0x000288, "Member 'UBP_GadgetMovementComponent_C::PingPredictionCurrent' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, Additional_Move_Time) == 0x000290, "Member 'UBP_GadgetMovementComponent_C::Additional_Move_Time' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, Gravity) == 0x000298, "Member 'UBP_GadgetMovementComponent_C::Gravity' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, AirFriction) == 0x0002A0, "Member 'UBP_GadgetMovementComponent_C::AirFriction' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, SpeedCurrent) == 0x0002A8, "Member 'UBP_GadgetMovementComponent_C::SpeedCurrent' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, OnReplicatedDataUpdated) == 0x0002C0, "Member 'UBP_GadgetMovementComponent_C::OnReplicatedDataUpdated' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, ColidedBone) == 0x0002D0, "Member 'UBP_GadgetMovementComponent_C::ColidedBone' has a wrong offset!");
static_assert(offsetof(UBP_GadgetMovementComponent_C, bAttachToTeamMates) == 0x0002D8, "Member 'UBP_GadgetMovementComponent_C::bAttachToTeamMates' has a wrong offset!");

}

